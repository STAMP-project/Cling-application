JUnit version 4.12
.E.E..E..E..E.....
Time: 0.704
There were 5 failures:
1) test04(org.apache.commons.math.distribution.HypergeometricDistributionImpl_ESTest)
org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: population size must be positive.
	at org.apache.commons.math.distribution.HypergeometricDistributionImpl.setPopulationSize(HypergeometricDistributionImpl.java:239)
	at org.apache.commons.math.distribution.HypergeometricDistributionImpl.<init>(HypergeometricDistributionImpl.java:64)
	at org.apache.commons.math.distribution.HypergeometricDistributionImpl_ESTest.test04(HypergeometricDistributionImpl_ESTest.java:68)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.lang.Thread.run(Thread.java:748)
2) test05(org.apache.commons.math.distribution.HypergeometricDistributionImpl_ESTest)
org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: number of successes must be non-negative.
	at org.apache.commons.math.distribution.HypergeometricDistributionImpl.setNumberOfSuccesses(HypergeometricDistributionImpl.java:226)
	at org.apache.commons.math.distribution.HypergeometricDistributionImpl.<init>(HypergeometricDistributionImpl.java:66)
	at org.apache.commons.math.distribution.HypergeometricDistributionImpl_ESTest.test05(HypergeometricDistributionImpl_ESTest.java:83)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.lang.Thread.run(Thread.java:748)
3) test03(org.apache.commons.math.distribution.HypergeometricDistributionImpl_ESTest)
org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: sample size must be non-negative.
	at org.apache.commons.math.distribution.HypergeometricDistributionImpl.setSampleSize(HypergeometricDistributionImpl.java:252)
	at org.apache.commons.math.distribution.HypergeometricDistributionImpl.<init>(HypergeometricDistributionImpl.java:65)
	at org.apache.commons.math.distribution.HypergeometricDistributionImpl_ESTest.test03(HypergeometricDistributionImpl_ESTest.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.lang.Thread.run(Thread.java:748)
4) test11(org.apache.commons.math.distribution.HypergeometricDistributionImpl_ESTest)
org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: sample size must be less than or equal to population size
	at org.apache.commons.math.distribution.HypergeometricDistributionImpl.<init>(HypergeometricDistributionImpl.java:61)
	at org.apache.commons.math.distribution.HypergeometricDistributionImpl_ESTest.test11(HypergeometricDistributionImpl_ESTest.java:144)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.lang.Thread.run(Thread.java:748)
5) test12(org.apache.commons.math.distribution.HypergeometricDistributionImpl_ESTest)
org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: number of successes must be less than or equal to population size
	at org.apache.commons.math.distribution.HypergeometricDistributionImpl.<init>(HypergeometricDistributionImpl.java:56)
	at org.apache.commons.math.distribution.HypergeometricDistributionImpl_ESTest.test12(HypergeometricDistributionImpl_ESTest.java:159)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.lang.Thread.run(Thread.java:748)

FAILURES!!!
Tests run: 13,  Failures: 5


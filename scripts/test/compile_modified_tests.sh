INPUT="subject_generator/subjects.csv"
OLDIFS=$IFS
IFS=,
[ ! -f $INPUT ] && { echo "$INPUT file not found"; }

counter=0
while read tool execution_id project caller_class callee_class type
do
  # skip the title row
  if [[ "$counter" -eq "0" ]]; then
    counter=1
    continue
  fi
  # Prepare project cp
    CPEntriesDir="projects/$project/cp-entries.txt"
    CPEntriesContent=$( cat $CPEntriesDir)
    preparedCPs=$( python scripts/python/reassemble-cps.py $CPEntriesContent "$project")
  # Detecting tests
    if [[ "$tool" == "cling" ]]; then
        echo "Detecting the generated test suite by $tool. execution id: $execution_id, project: $project, caller class: $caller_class, callee class: $callee_class"
        resultDir="data/rq3/tests-with-exception/$tool-$project-$caller_class-$callee_class-$execution_id"
    elif [[ "$tool" == "evosuite-caller5" ]]; then
        echo "Detecting the generated test suite by EvoSuite. execution id: $execution_id, project: $project, target class: $caller_class"
        resultDir="data/rq3/tests-with-exception/evosuite5-$project-$caller_class-$execution_id"
    else
        echo "Detecting the generated test suite by EvoSuite. execution id: $execution_id, project: $project, target class: $callee_class"
        resultDir="data/rq3/tests-with-exception/evosuite5-$project-$callee_class-$execution_id"
    fi


    echo "test suite generated by $tool: $resultDir"
    if [[ -d $resultDir ]]; then
        echo "Compiling scaffolding tests"
        for scaffoldingTest in `find $resultDir -name "*_scaffolding.java" -type f`; do
        javac -cp "$preparedCPs:$(cat libs/test_execution/classpath.txt)" $scaffoldingTest
        done

        echo "Compiling the main test class"
        for mainTest in `find $resultDir -name "*_ESTest.java" -type f`; do
        echo "** "$mainTest
        javac -cp "$preparedCPs:$resultDir:$(cat libs/test_execution/classpath.txt)" $mainTest &
        done
        sleep 0.1
    else
        echo "! Could not find caller test suite"
    fi

  

done < $INPUT



 while (( $(pgrep -l javac | wc -l) > 0 ))
    do
                sleep 1
    done

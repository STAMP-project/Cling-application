INPUT="subject_generator/subjects.csv"
OLDIFS=$IFS
IFS=,
[ ! -f $INPUT ] && { echo "$INPUT file not found"; }

counter=0
while read tool execution_id project caller_class callee_class type
do
  # skip the title row
  if [[ "$counter" -eq "0" ]]; then
    counter=1
    continue
  fi
  # Prepare project cp
    CPEntriesDir="projects/$project/cp-entries.txt"
    CPEntriesContent=$( cat $CPEntriesDir)
    preparedCPs=$( python scripts/python/reassemble-cps.py $CPEntriesContent "$project")
  # Detecting tests
    if [[ "$tool" == "cling" ]]; then
        echo "Detecting the generated test suite by $tool. execution id: $execution_id, project: $project, caller class: $caller_class, callee class: $callee_class"
        resultDir="results/cling/$project-$caller_class-$callee_class-$execution_id"
    elif [[ "$tool" == "evosuite-caller5" ]]; then
        echo "Detecting the generated test suite by EvoSuite. execution id: $execution_id, project: $project, target class: $caller_class"
        resultDir="results/evosuite5/$project-$caller_class-$execution_id"
    elif [[ "$tool" == "evosuite-callee5" ]]; then
        echo "Detecting the generated test suite by EvoSuite. execution id: $execution_id, project: $project, target class: $callee_class"
        resultDir="results/evosuite5/$project-$callee_class-$execution_id"
    elif [[ "$tool" == "randoop-caller5" ]]; then
        echo "Detecting the generated test suite by Randoop. execution id: $execution_id, project: $project, target class: $caller_class"
        resultDir="results/randoop5/$project-$caller_class-$execution_id"
    elif [[ "$tool" == "randoop-callee5" ]]; then
        echo "Detecting the generated test suite by Randoop. execution id: $execution_id, project: $project, target class: $callee_class"
        resultDir="results/randoop5/$project-$callee_class-$execution_id"
    elif [[ "$tool" == "randoop" ]]; then
        echo "Detecting the generated test suite by Randoop. execution id: $execution_id, project: $project, caller class: $caller_class, callee class: $callee_class"
        resultDir="results/randoop10/$project-$caller_class-$callee_class-$execution_id"
    fi


    echo "test suite generated by $tool: $resultDir"
    if [[ -d $resultDir ]]; then

        if [[ "$tool" == randoop* ]]; then
          if [[ -f "$resultDir/RegressionTest.class" ]]; then
            echo "Tests in $resultDir are already compiled"
            continue
          fi
          echo "Compiling Regression tests"
          numberOfRegressionTests=0
          while :
          do
            if [[ -f "$resultDir/RegressionTest$numberOfRegressionTests.java" ]]; then
              # compile detected regression test test
              detectedTest="$resultDir/RegressionTest$numberOfRegressionTests.java"
              javac -cp "$preparedCPs:$(cat libs/test_execution/classpath.txt)" $detectedTest &
              numberOfRegressionTests=$((numberOfRegressionTests+1))
            else
              numberOfRegressionTests=$((numberOfRegressionTests-1))
              break
            fi


            while (( $(pgrep -l java | wc -l) >= 21 ))
            do
                sleep 1
            done
          done 
           # Here, we need to check if all of the compilations are done
           while (( $(pgrep -l java | wc -l) >= 1 ))
            do
                sleep 1
            done
            echo "Compilation of regression tests are done. Compile the main test"
            javac -cp "$preparedCPs:$resultDir:$(cat libs/test_execution/classpath.txt)" "$resultDir/RegressionTest.java" &

            # Now, lets move to error tests
            mainErrorTest="$resultDir/ErrorTest.java"
            
            if [[ ! -f "$mainErrorTest" ]]; then
              echo "No available error test in $resultDir"
              continue
            fi

            echo "$mainErrorTest is detected in $resultDir"
            numberOfErrorTests=0
            while :
            do
              if [[ -f "$resultDir/ErrorTest$numberOfRegressionTests.java" ]]; then
                # compile detected regression test test
                detectedTest="$resultDir/ErrorTest$numberOfRegressionTests.java"
                javac -cp "$preparedCPs:$(cat libs/test_execution/classpath.txt)" $detectedTest &
                numberOfErrorTests=$((numberOfErrorTests+1))
              else
                numberOfErrorTests=$((numberOfErrorTests-1))
                break
              fi
            done
            # Here, we need to check if all of the compilations are done
            while (( $(pgrep -l java | wc -l) >= 1 ))
            do
                sleep 1
            done

            echo "Compilation of error tests are done. Compile the main test"
            javac -cp "$preparedCPs:$resultDir:$(cat libs/test_execution/classpath.txt)" "$mainErrorTest" &
        else
          echo "Compiling scaffolding tests"
          for scaffoldingTest in `find $resultDir -name "*_scaffolding.java" -type f`; do
            javac -cp "$preparedCPs:$(cat libs/test_execution/classpath.txt)" $scaffoldingTest &
          done

          echo "Compiling the main test class"
          for mainTest in `find $resultDir -name "*_ESTest.java" -type f`; do
            javac -cp "$preparedCPs:$resultDir:$(cat libs/test_execution/classpath.txt)" $mainTest &
          done
          sleep 1
        fi
    else
        echo "! Could not find test suite"
    fi

  

done < $INPUT



 while (( $(pgrep -l javac | wc -l) > 0 ))
    do
                sleep 1
    done

pid=$1
execution_id=$2
project=$3
target_class=$4
budget=$5
preparedCPs=$6

timeInMinute=$((budget / 60))
filename="$project-$target_class-$execution_id-out.txt"
resultDir="results/randoop$timeInMinute/$project-$target_class-$execution_id"
RANDOOP_JAR="tools/randoop-all-4.2.4.jar"
JUnit_JAR="libs/test_execution/junit-4.12.jar:libs/test_execution/hamcrest-core-1.3.jar"

## Wait until either the process ends or the process stays inactive for 5 minutes

stopLoop=0
while [ "$stopLoop" -eq 0 ]; do
    # First, sleep and wait for the process to finish
    # sleep "$budget"

    if ps -p $pid > /dev/null
    then
        echo "$pid is running"
        # Find inactive time
        modifiedTime=$(date -r "logs/evosuite$timeInMinute/$filename" "+%s")
        currentTime=$(date "+%s")
        inActiveTime=$((currentTime-modifiedTime))
        echo "Process $pid is inactive for $inActiveTime seconds"
        if [[ "$inActiveTime" -gt "300" ]]; then
            #Kill process
            kill "$pid"
            echo "killing process $pid"
        else
            continue
        fi

    fi
    echo "$resultDir"
    #Check if results are available
    if [ -d "$resultDir" ]; then
        echo "Test is generated by randoop. id: $execution_id project $project caller class: $caller_class callee class:$callee_class "
        find ${resultDir} -name "*ErrorTest*.java" -print0 | while read -d $'\0' testsuite
        do
            echo "minimizing $testsuite"
            java -cp ${RANDOOP_JAR} randoop.main.Main minimize --suitepath=${testsuite} --suiteclasspath=${JUnit_JAR}":"${preparedCPs}
        done 
        # for testsuite in $(); do 
        #     echo "minimizing $testsuite"
        #     
        # done
    fi

    # This process is killed, so there is no need for the observer. Stop the while loop
    stopLoop=1
done

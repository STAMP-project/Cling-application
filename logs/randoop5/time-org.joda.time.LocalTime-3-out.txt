Randoop for Java version "4.2.4, branch master, commit be6dbd3, 2020-07-14".

Will try to generate tests for 1 classes.
PUBLIC MEMBERS=122
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=3, test inputs generated=0, failing inputs=0      (2020-11-25T01:51:37.028Z     112MB used)
Progress update: steps=804, test inputs generated=765, failing inputs=0      (2020-11-25T01:52:37.108Z     91MB used)
Progress update: steps=1000, test inputs generated=948, failing inputs=0      (2020-11-25T01:52:50.248Z     572MB used)
Progress update: steps=1479, test inputs generated=1409, failing inputs=0      (2020-11-25T01:53:37.109Z     1154MB used)
Progress update: steps=2000, test inputs generated=1893, failing inputs=0      (2020-11-25T01:54:04.133Z     78MB used)
Progress update: steps=2464, test inputs generated=2332, failing inputs=0      (2020-11-25T01:54:37.109Z     1324MB used)
Progress update: steps=3000, test inputs generated=2837, failing inputs=0      (2020-11-25T01:55:22.438Z     885MB used)
Progress update: steps=3079, test inputs generated=2910, failing inputs=0      (2020-11-25T01:55:37.112Z     505MB used)
Progress update: steps=3956, test inputs generated=3736, failing inputs=0      (2020-11-25T01:56:37.021Z     1154MB used)
Normal method executions: 6532435
Exceptional method executions: 573

Average method execution time (normal termination):      0.000565
Average method execution time (exceptional termination): 0.207
Approximate memory usage 1154MB
Explorer = ForwardGenerator(steps: 3956, null steps: 220, num_sequences_generated: 3736;
    allSequences: 3736, regresson seqs: 3735, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 1;
    runtimePrimitivesSeen:784)

No error-revealing tests to output.

About to look for failing assertions in 2030 regression sequences.

Regression test output:
Regression test count: 2030
Writing regression JUnit tests...
                                                                                                                                                                                                       Created file /experiment/results/randoop5/time-org.joda.time.LocalTime-3/RegressionTest0.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalTime-3/RegressionTest1.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalTime-3/RegressionTest2.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalTime-3/RegressionTest3.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalTime-3/RegressionTest4.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalTime-3/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.toString()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.toInterval()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.remainder()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.isLeap()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getRangeDurationField()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getName()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getMinimumValueOverall()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getMinimumValue()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getMaximumValueOverall()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getMaximumValue()
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

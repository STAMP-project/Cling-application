Randoop for Java version "4.2.4, branch master, commit be6dbd3, 2020-07-14".

Will try to generate tests for 1 classes.
PUBLIC MEMBERS=19
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2020-11-25T02:24:50.285Z     102MB used)
Progress update: steps=1000, test inputs generated=309, failing inputs=0      (2020-11-25T02:25:10.223Z     75MB used)
Progress update: steps=2000, test inputs generated=553, failing inputs=0      (2020-11-25T02:25:19.941Z     500MB used)
Progress update: steps=3000, test inputs generated=788, failing inputs=0      (2020-11-25T02:25:27.336Z     210MB used)
Progress update: steps=4000, test inputs generated=1025, failing inputs=0      (2020-11-25T02:25:33.656Z     433MB used)
Progress update: steps=5000, test inputs generated=1272, failing inputs=0      (2020-11-25T02:25:40.175Z     713MB used)
Progress update: steps=6000, test inputs generated=1522, failing inputs=0      (2020-11-25T02:25:47.471Z     59MB used)
Progress update: steps=6491, test inputs generated=1630, failing inputs=0      (2020-11-25T02:25:50.336Z     504MB used)
Progress update: steps=7000, test inputs generated=1747, failing inputs=0      (2020-11-25T02:25:53.654Z     59MB used)
Progress update: steps=8000, test inputs generated=1982, failing inputs=0      (2020-11-25T02:26:10.324Z     65MB used)
Progress update: steps=9000, test inputs generated=2217, failing inputs=0      (2020-11-25T02:26:25.743Z     1043MB used)
Progress update: steps=10000, test inputs generated=2442, failing inputs=0      (2020-11-25T02:26:37.134Z     912MB used)
Progress update: steps=11000, test inputs generated=2660, failing inputs=0      (2020-11-25T02:26:44.422Z     767MB used)
Progress update: steps=11815, test inputs generated=2843, failing inputs=0      (2020-11-25T02:26:50.337Z     362MB used)
Progress update: steps=12000, test inputs generated=2888, failing inputs=0      (2020-11-25T02:26:52.402Z     548MB used)
Progress update: steps=13000, test inputs generated=3112, failing inputs=0      (2020-11-25T02:27:00.664Z     333MB used)
Progress update: steps=14000, test inputs generated=3323, failing inputs=0      (2020-11-25T02:27:08.334Z     1224MB used)
Progress update: steps=15000, test inputs generated=3558, failing inputs=0      (2020-11-25T02:27:15.832Z     920MB used)
Progress update: steps=16000, test inputs generated=3776, failing inputs=0      (2020-11-25T02:27:25.681Z     573MB used)
Progress update: steps=17000, test inputs generated=4008, failing inputs=0      (2020-11-25T02:27:43.274Z     265MB used)
Progress update: steps=17460, test inputs generated=4098, failing inputs=0      (2020-11-25T02:27:50.337Z     661MB used)
Progress update: steps=18000, test inputs generated=4228, failing inputs=0      (2020-11-25T02:27:59.522Z     1204MB used)
Progress update: steps=19000, test inputs generated=4490, failing inputs=0      (2020-11-25T02:28:19.825Z     1035MB used)
Progress update: steps=20000, test inputs generated=4709, failing inputs=0      (2020-11-25T02:28:47.602Z     677MB used)
Progress update: steps=20114, test inputs generated=4737, failing inputs=0      (2020-11-25T02:28:50.338Z     811MB used)
Progress update: steps=21000, test inputs generated=4934, failing inputs=0      (2020-11-25T02:29:03.094Z     369MB used)
Progress update: steps=22000, test inputs generated=5174, failing inputs=0      (2020-11-25T02:29:17.257Z     88MB used)
Progress update: steps=23000, test inputs generated=5385, failing inputs=0      (2020-11-25T02:29:32.647Z     984MB used)
Progress update: steps=24000, test inputs generated=5611, failing inputs=0      (2020-11-25T02:29:47.557Z     677MB used)
Progress update: steps=24153, test inputs generated=5654, failing inputs=0      (2020-11-25T02:29:50.277Z     856MB used)
Normal method executions: 189005
Exceptional method executions: 3

Average method execution time (normal termination):      0.00792
Average method execution time (exceptional termination): 0.964
Approximate memory usage 856MB
Explorer = ForwardGenerator(steps: 24153, null steps: 18499, num_sequences_generated: 5654;
    allSequences: 5654, regresson seqs: 5653, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 1;
    runtimePrimitivesSeen:40)

No error-revealing tests to output.
                                                                                                                                                                                                       
About to look for failing assertions in 2777 regression sequences.

Regression test output:
Regression test count: 2777
Writing regression JUnit tests...
Created file /experiment/results/randoop5/time-org.joda.time.DateTimeUtils-6/RegressionTest0.java
Created file /experiment/results/randoop5/time-org.joda.time.DateTimeUtils-6/RegressionTest1.java
Created file /experiment/results/randoop5/time-org.joda.time.DateTimeUtils-6/RegressionTest2.java
Created file /experiment/results/randoop5/time-org.joda.time.DateTimeUtils-6/RegressionTest3.java
Created file /experiment/results/randoop5/time-org.joda.time.DateTimeUtils-6/RegressionTest4.java
Created file /experiment/results/randoop5/time-org.joda.time.DateTimeUtils-6/RegressionTest5.java
Created file /experiment/results/randoop5/time-org.joda.time.DateTimeUtils-6/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  org.joda.time.DateTimeUtils.getInstantMillis(org.joda.time.ReadableInstant)
  Possibly flaky:  org.joda.time.DateTimeUtils.currentTimeMillis()
  Possibly flaky:  java.lang.String.valueOf(long)
  Possibly flaky:  java.lang.Long.valueOf(long)
  Possibly flaky:  java.lang.Long.toString(long)
  Possibly flaky:  java.lang.Long.toOctalString(long)
  Possibly flaky:  java.lang.Long.toHexString(long)
  Possibly flaky:  java.lang.Long.toBinaryString(long)
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

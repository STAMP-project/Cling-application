Randoop for Java version "4.2.4, branch master, commit be6dbd3, 2020-07-14".

Will try to generate tests for 1 classes.
PUBLIC MEMBERS=39
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2020-11-25T01:07:12.941Z     102MB used)
Progress update: steps=824, test inputs generated=719, failing inputs=0      (2020-11-25T01:08:12.961Z     322MB used)
Progress update: steps=1000, test inputs generated=861, failing inputs=0      (2020-11-25T01:08:30.319Z     94MB used)
Progress update: steps=1629, test inputs generated=1395, failing inputs=0      (2020-11-25T01:09:12.962Z     575MB used)
Progress update: steps=2000, test inputs generated=1710, failing inputs=0      (2020-11-25T01:09:32.864Z     968MB used)
Progress update: steps=2699, test inputs generated=2299, failing inputs=0      (2020-11-25T01:10:12.962Z     503MB used)
Progress update: steps=3000, test inputs generated=2544, failing inputs=0      (2020-11-25T01:10:41.582Z     520MB used)
Progress update: steps=3593, test inputs generated=3032, failing inputs=0      (2020-11-25T01:11:12.962Z     544MB used)
Progress update: steps=4000, test inputs generated=3356, failing inputs=0      (2020-11-25T01:11:28.020Z     1002MB used)
Progress update: steps=4958, test inputs generated=4155, failing inputs=0      (2020-11-25T01:12:12.963Z     833MB used)
Progress update: steps=4958, test inputs generated=4155, failing inputs=0      (2020-11-25T01:12:12.963Z     833MB used)
Normal method executions: 92674
Exceptional method executions: 94

Average method execution time (normal termination):      0.00821
Average method execution time (exceptional termination): 0.0837
Approximate memory usage 833MB
Explorer = ForwardGenerator(steps: 4958, null steps: 803, num_sequences_generated: 4155;
    allSequences: 4155, regresson seqs: 4154, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 1;
    runtimePrimitivesSeen:394)

No error-revealing tests to output.

About to look for failing assertions in 2112 regression sequences.

Regression test output:
Regression test count: 2112
Writing regression JUnit tests...
Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-20/RegressionTest0.java
                                                                                                                                                                                                       Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-20/RegressionTest1.java
Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-20/RegressionTest2.java
Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-20/RegressionTest3.java
Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-20/RegressionTest4.java
Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-20/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.toTimeZone()
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.previousTransition(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.nextTransition(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.isFixed()
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.getStandardOffset(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.getOffset(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.getNameKey(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.equals(java.lang.Object)
  Possibly flaky:  org.joda.time.DateTimeZone.toString()
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

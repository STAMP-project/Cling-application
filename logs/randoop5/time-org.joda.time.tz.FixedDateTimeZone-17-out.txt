Randoop for Java version "4.2.4, branch master, commit be6dbd3, 2020-07-14".

Will try to generate tests for 1 classes.
PUBLIC MEMBERS=39
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2020-11-25T01:07:06.202Z     102MB used)
Progress update: steps=846, test inputs generated=737, failing inputs=0      (2020-11-25T01:08:06.224Z     429MB used)
Progress update: steps=1000, test inputs generated=861, failing inputs=0      (2020-11-25T01:08:15.430Z     366MB used)
Progress update: steps=1638, test inputs generated=1401, failing inputs=0      (2020-11-25T01:09:06.224Z     101MB used)
Progress update: steps=2000, test inputs generated=1710, failing inputs=0      (2020-11-25T01:09:26.750Z     794MB used)
Progress update: steps=2741, test inputs generated=2331, failing inputs=0      (2020-11-25T01:10:06.225Z     629MB used)
Progress update: steps=3000, test inputs generated=2544, failing inputs=0      (2020-11-25T01:10:22.470Z     797MB used)
Progress update: steps=3569, test inputs generated=3011, failing inputs=0      (2020-11-25T01:11:06.225Z     439MB used)
Progress update: steps=4000, test inputs generated=3356, failing inputs=0      (2020-11-25T01:11:21.542Z     362MB used)
Progress update: steps=5000, test inputs generated=4191, failing inputs=0      (2020-11-25T01:12:03.387Z     120MB used)
Progress update: steps=5054, test inputs generated=4244, failing inputs=0      (2020-11-25T01:12:06.223Z     401MB used)
Normal method executions: 95295
Exceptional method executions: 96

Average method execution time (normal termination):      0.00671
Average method execution time (exceptional termination): 0.0789
Approximate memory usage 401MB
Explorer = ForwardGenerator(steps: 5054, null steps: 810, num_sequences_generated: 4244;
    allSequences: 4244, regresson seqs: 4243, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 1;
    runtimePrimitivesSeen:402)
                                                                                                                                                                                                       
No error-revealing tests to output.

About to look for failing assertions in 2149 regression sequences.

Regression test output:
Regression test count: 2149
Writing regression JUnit tests...
Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-17/RegressionTest0.java
Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-17/RegressionTest1.java
Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-17/RegressionTest2.java
Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-17/RegressionTest3.java
Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-17/RegressionTest4.java
Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-17/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.toTimeZone()
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.previousTransition(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.nextTransition(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.isFixed()
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.getStandardOffset(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.getOffset(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.getNameKey(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.equals(java.lang.Object)
  Possibly flaky:  org.joda.time.DateTimeZone.toString()
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

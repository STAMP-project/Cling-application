Randoop for Java version "4.2.4, branch master, commit be6dbd3, 2020-07-14".

Will try to generate tests for 1 classes.
PUBLIC MEMBERS=167
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=4, test inputs generated=1, failing inputs=0      (2020-11-25T02:53:42.386Z     112MB used)
Progress update: steps=628, test inputs generated=592, failing inputs=0      (2020-11-25T02:54:42.423Z     210MB used)
Progress update: steps=1000, test inputs generated=947, failing inputs=0      (2020-11-25T02:55:32.471Z     400MB used)
Progress update: steps=1166, test inputs generated=1106, failing inputs=0      (2020-11-25T02:55:42.424Z     715MB used)
Progress update: steps=2000, test inputs generated=1911, failing inputs=0      (2020-11-25T02:56:39.090Z     390MB used)
Progress update: steps=2034, test inputs generated=1945, failing inputs=0      (2020-11-25T02:56:42.424Z     814MB used)
Progress update: steps=2562, test inputs generated=2457, failing inputs=0      (2020-11-25T02:57:42.425Z     890MB used)
Progress update: steps=3000, test inputs generated=2881, failing inputs=0      (2020-11-25T02:58:08.152Z     85MB used)
Progress update: steps=3460, test inputs generated=3329, failing inputs=0      (2020-11-25T02:58:42.362Z     1200MB used)
Normal method executions: 4343930
Exceptional method executions: 612

Average method execution time (normal termination):      0.000567
Average method execution time (exceptional termination): 0.188
Approximate memory usage 1200MB
Explorer = ForwardGenerator(steps: 3460, null steps: 131, num_sequences_generated: 3329;
    allSequences: 3329, regresson seqs: 3280, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 49;
    runtimePrimitivesSeen:899)

No error-revealing tests to output.

About to look for failing assertions in 1769 regression sequences.

Regression test output:
Regression test count: 1769
Writing regression JUnit tests...
                                                                                                                                                                                                       Created file /experiment/results/randoop5/time-org.joda.time.LocalDateTime-9/RegressionTest0.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalDateTime-9/RegressionTest1.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalDateTime-9/RegressionTest2.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalDateTime-9/RegressionTest3.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalDateTime-9/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.toString()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.toInterval()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.remainder()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.isLeap()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getRangeDurationField()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getName()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getMinimumValueOverall()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getMinimumValue()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getMaximumValueOverall()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getMaximumValue()
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

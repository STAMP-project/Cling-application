Randoop for Java version "4.2.4, branch master, commit be6dbd3, 2020-07-14".

Will try to generate tests for 1 classes.
PUBLIC MEMBERS=122
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=2, test inputs generated=0, failing inputs=0      (2020-11-25T01:52:01Z     112MB used)
Progress update: steps=719, test inputs generated=688, failing inputs=0      (2020-11-25T01:53:01.090Z     750MB used)
Progress update: steps=1000, test inputs generated=954, failing inputs=0      (2020-11-25T01:53:34.314Z     1053MB used)
Progress update: steps=1483, test inputs generated=1413, failing inputs=0      (2020-11-25T01:54:01.090Z     638MB used)
Progress update: steps=2000, test inputs generated=1886, failing inputs=0      (2020-11-25T01:54:40.742Z     1300MB used)
Progress update: steps=2207, test inputs generated=2082, failing inputs=0      (2020-11-25T01:55:01.091Z     1287MB used)
Progress update: steps=2701, test inputs generated=2544, failing inputs=0      (2020-11-25T01:56:01.092Z     1151MB used)
Progress update: steps=3000, test inputs generated=2817, failing inputs=0      (2020-11-25T01:56:19.323Z     837MB used)
Progress update: steps=3743, test inputs generated=3497, failing inputs=0      (2020-11-25T01:57:00.981Z     533MB used)
Normal method executions: 7674272
Exceptional method executions: 444

Average method execution time (normal termination):      0.000528
Average method execution time (exceptional termination): 0.209
Approximate memory usage 533MB
Explorer = ForwardGenerator(steps: 3743, null steps: 246, num_sequences_generated: 3497;
    allSequences: 3497, regresson seqs: 3496, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 1;
    runtimePrimitivesSeen:832)

No error-revealing tests to output.

About to look for failing assertions in 1880 regression sequences.

Regression test output:
Regression test count: 1880
Writing regression JUnit tests...
                                                                                                                                                                                                       Created file /experiment/results/randoop5/time-org.joda.time.LocalTime-4/RegressionTest0.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalTime-4/RegressionTest1.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalTime-4/RegressionTest2.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalTime-4/RegressionTest3.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalTime-4/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getDifferenceAsLong(org.joda.time.ReadableInstant)
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.toString()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.toInterval()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.remainder()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.isLeap()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getRangeDurationField()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getName()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getMinimumValueOverall()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getMinimumValue()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getMaximumValueOverall()
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

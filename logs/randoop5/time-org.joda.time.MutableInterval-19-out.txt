Randoop for Java version "4.2.4, branch master, commit be6dbd3, 2020-07-14".

Will try to generate tests for 1 classes.
PUBLIC MEMBERS=55
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2020-11-25T01:25:30.069Z     112MB used)
Progress update: steps=523, test inputs generated=475, failing inputs=0      (2020-11-25T01:26:30.125Z     137MB used)
Progress update: steps=1000, test inputs generated=870, failing inputs=0      (2020-11-25T01:27:14.629Z     226MB used)
Progress update: steps=1104, test inputs generated=955, failing inputs=0      (2020-11-25T01:27:30.126Z     219MB used)
Progress update: steps=1919, test inputs generated=1582, failing inputs=0      (2020-11-25T01:28:30.126Z     915MB used)
Progress update: steps=2000, test inputs generated=1642, failing inputs=0      (2020-11-25T01:28:35.372Z     281MB used)
Progress update: steps=2589, test inputs generated=2084, failing inputs=0      (2020-11-25T01:29:30.127Z     197MB used)
Progress update: steps=3000, test inputs generated=2419, failing inputs=0      (2020-11-25T01:29:59.051Z     450MB used)
Progress update: steps=3676, test inputs generated=2946, failing inputs=0      (2020-11-25T01:30:30.097Z     481MB used)
Normal method executions: 8276849
Exceptional method executions: 249

Average method execution time (normal termination):      0.000458
Average method execution time (exceptional termination): 0.317
Approximate memory usage 481MB
Explorer = ForwardGenerator(steps: 3676, null steps: 730, num_sequences_generated: 2946;
    allSequences: 2946, regresson seqs: 2945, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 1;
    runtimePrimitivesSeen:332)

No error-revealing tests to output.

About to look for failing assertions in 1483 regression sequences.

Regression test output:
Regression test count: 1483
Writing regression JUnit tests...
                                                                                                                                                                                                       Created file /experiment/results/randoop5/time-org.joda.time.MutableInterval-19/RegressionTest0.java
Created file /experiment/results/randoop5/time-org.joda.time.MutableInterval-19/RegressionTest1.java
Created file /experiment/results/randoop5/time-org.joda.time.MutableInterval-19/RegressionTest2.java
Created file /experiment/results/randoop5/time-org.joda.time.MutableInterval-19/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  org.joda.time.base.BaseInterval.getStartMillis()
  Possibly flaky:  org.joda.time.base.BaseInterval.getEndMillis()
  Possibly flaky:  org.joda.time.base.BaseInterval.getChronology()
  Possibly flaky:  org.joda.time.base.AbstractInterval.toString()
  Possibly flaky:  org.joda.time.base.AbstractInterval.toPeriod()
  Possibly flaky:  org.joda.time.base.AbstractInterval.toPeriod(org.joda.time.PeriodType)
  Possibly flaky:  org.joda.time.base.AbstractInterval.toMutableInterval()
  Possibly flaky:  org.joda.time.base.AbstractInterval.toInterval()
  Possibly flaky:  org.joda.time.base.AbstractInterval.toDurationMillis()
  Possibly flaky:  org.joda.time.base.AbstractInterval.toDuration()
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

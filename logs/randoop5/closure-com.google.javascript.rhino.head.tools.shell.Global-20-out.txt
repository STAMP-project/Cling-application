Randoop for Java version "4.2.4, branch master, commit be6dbd3, 2020-07-14".

Will try to generate tests for 1 classes.
PUBLIC MEMBERS=132
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2020-11-25T12:42:34.152Z     123MB used)




Progress update: steps=1000, test inputs generated=747, failing inputs=5      (2020-11-25T12:42:54.802Z     118MB used)









Progress update: steps=2000, test inputs generated=1373, failing inputs=5      (2020-11-25T12:43:28.142Z     52MB used)


Progress update: steps=2185, test inputs generated=1478, failing inputs=6      (2020-11-25T12:43:34.194Z     53MB used)


Progress update: steps=3000, test inputs generated=1981, failing inputs=7      (2020-11-25T12:43:48.756Z     469MB used)







Progress update: steps=4000, test inputs generated=2570, failing inputs=7      (2020-11-25T12:44:07.925Z     182MB used)





Progress update: steps=5000, test inputs generated=3147, failing inputs=8      (2020-11-25T12:44:26.772Z     190MB used)

Progress update: steps=5291, test inputs generated=3314, failing inputs=8      (2020-11-25T12:44:34.238Z     76MB used)

Progress update: steps=6000, test inputs generated=3720, failing inputs=8      (2020-11-25T12:45:00.291Z     81MB used)


Progress update: steps=7000, test inputs generated=4300, failing inputs=8      (2020-11-25T12:45:21.260Z     128MB used)

1 JavaImporter

Progress update: steps=7655, test inputs generated=4678, failing inputs=8      (2020-11-25T12:45:34.239Z     133MB used)

Progress update: steps=8000, test inputs generated=4863, failing inputs=8      (2020-11-25T12:45:41.248Z     83MB used)



js>    > 







Progress update: steps=9000, test inputs generated=5429, failing inputs=9      (2020-11-25T12:45:59.444Z     111MB used)

Progress update: steps=9974, test inputs generated=5962, failing inputs=9      (2020-11-25T12:46:34.239Z     167MB used)
Progress update: steps=10000, test inputs generated=5976, failing inputs=9      (2020-11-25T12:46:35.127Z     334MB used)


Command                Description 
=======                =========== 
help()                 Display usage and help messages. 
defineClass(className) Define an extension using the Java class 
                       named with the string argument. 
                       Uses ScriptableObject.defineClass(). 
load(["foo.js", ...])  Load JavaScript source files named by 
                       string arguments. 
loadClass(className)   Load a class named by a string argument. 
                       The class must be a script compiled to a 
                       class file. 
print([expr ...])      Evaluate and print expressions. 
quit()                 Quit the shell. 
version([number])      Get or set the JavaScript version number. 
gc()                   Runs the garbage collector.
spawn(arg)             Evaluate function or script name on a new thread 
sync(function [, obj]) Creates a synchronized version of the function, 
                       where the synchronization object is the obj 
                       argument or "this" if obj is undefined
readFile(fileName [, encoding])
                       Returns the content of the file as a string. 
                       Encoding of the string can be optionally specified. 
readUrl(url [, encoding]) 
                       Similar to readFile, reads the contents of the url.
runCommand(name ...)   Runs a specified shell command. Additional arguments are 
                       passed to the command 
seal(args ...)         Seals the supplied objects 
toint32(arg)           Converts the argument into a 32-bit integer 
serialize(obj, fileName) 
                      Serializes an object and saves it to a file 
deserialize(fileName)  Reconstructs a serialized object 
environment            Returns the current environment object 
history                Displays the shell command history


Command                Description 
=======                =========== 
help()                 Display usage and help messages. 
defineClass(className) Define an extension using the Java class 
                       named with the string argument. 
                       Uses ScriptableObject.defineClass(). 
load(["foo.js", ...])  Load JavaScript source files named by 
                       string arguments. 
loadClass(className)   Load a class named by a string argument. 
                       The class must be a script compiled to a 
                       class file. 
print([expr ...])      Evaluate and print expressions. 
quit()                 Quit the shell. 
version([number])      Get or set the JavaScript version number. 
gc()                   Runs the garbage collector.
spawn(arg)             Evaluate function or script name on a new thread 
sync(function [, obj]) Creates a synchronized version of the function, 
                       where the synchronization object is the obj 
                       argument or "this" if obj is undefined
readFile(fileName [, encoding])
                       Returns the content of the file as a string. 
                       Encoding of the string can be optionally specified. 
readUrl(url [, encoding]) 
                       Similar to readFile, reads the contents of the url.
runCommand(name ...)   Runs a specified shell command. Additional arguments are 
                       passed to the command 
seal(args ...)         Seals the supplied objects 
toint32(arg)           Converts the argument into a 32-bit integer 
serialize(obj, fileName) 
                      Serializes an object and saves it to a file 
deserialize(fileName)  Reconstructs a serialized object 
environment            Returns the current environment object 
history                Displays the shell command history

Progress update: steps=11000, test inputs generated=6510, failing inputs=9      (2020-11-25T12:46:55.327Z     223MB used)

Command                Description 
=======                =========== 
help()                 Display usage and help messages. 
defineClass(className) Define an extension using the Java class 
                       named with the string argument. 
                       Uses ScriptableObject.defineClass(). 
load(["foo.js", ...])  Load JavaScript source files named by 
                       string arguments. 
loadClass(className)   Load a class named by a string argument. 
                       The class must be a script compiled to a 
                       class file. 
print([expr ...])      Evaluate and print expressions. 
quit()                 Quit the shell. 
version([number])      Get or set the JavaScript version number. 
gc()                   Runs the garbage collector.
spawn(arg)             Evaluate function or script name on a new thread 
sync(function [, obj]) Creates a synchronized version of the function, 
                       where the synchronization object is the obj 
                       argument or "this" if obj is undefined
readFile(fileName [, encoding])
                       Returns the content of the file as a string. 
                       Encoding of the string can be optionally specified. 
readUrl(url [, encoding]) 
                       Similar to readFile, reads the contents of the url.
runCommand(name ...)   Runs a specified shell command. Additional arguments are 
                       passed to the command 
seal(args ...)         Seals the supplied objects 
toint32(arg)           Converts the argument into a 32-bit integer 
serialize(obj, fileName) 
                      Serializes an object and saves it to a file 
deserialize(fileName)  Reconstructs a serialized object 
environment            Returns the current environment object 
history                Displays the shell command history



Progress update: steps=12000, test inputs generated=7051, failing inputs=9      (2020-11-25T12:47:16.355Z     115MB used)



Progress update: steps=12738, test inputs generated=7466, failing inputs=9      (2020-11-25T12:47:34.153Z     154MB used)
Normal method executions: 9351031
Exceptional method executions: 2041

Average method execution time (normal termination):      0.0137
Average method execution time (exceptional termination): 0.127
Approximate memory usage 154MB
Explorer = ForwardGenerator(steps: 12738, null steps: 5272, num_sequences_generated: 7466;
    allSequences: 7466, regresson seqs: 7176, error seqs: 9=9=9, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 281;
    runtimePrimitivesSeen:47)

Error-revealing test output:
Error-revealing test count: 9
Writing error-revealing JUnit tests...
Created file /experiment/results/randoop5/closure-com.google.javascript.rhino.head.tools.shell.Global-20/ErrorTest0.java
Created file /experiment/results/randoop5/closure-com.google.javascript.rhino.head.tools.shell.Global-20/ErrorTest.java
Wrote error-revealing JUnit tests.

About to look for failing assertions in 4149 regression sequences.

Regression test output:
Regression test count: 4149
Writing regression JUnit tests...
                                                                                                                                                                                                       Created file /experiment/results/randoop5/closure-com.google.javascript.rhino.head.tools.shell.Global-20/RegressionTest0.java
Created file /experiment/results/randoop5/closure-com.google.javascript.rhino.head.tools.shell.Global-20/RegressionTest1.java
Created file /experiment/results/randoop5/closure-com.google.javascript.rhino.head.tools.shell.Global-20/RegressionTest2.java
Created file /experiment/results/randoop5/closure-com.google.javascript.rhino.head.tools.shell.Global-20/RegressionTest3.java
Created file /experiment/results/randoop5/closure-com.google.javascript.rhino.head.tools.shell.Global-20/RegressionTest4.java
Created file /experiment/results/randoop5/closure-com.google.javascript.rhino.head.tools.shell.Global-20/RegressionTest5.java
Created file /experiment/results/randoop5/closure-com.google.javascript.rhino.head.tools.shell.Global-20/RegressionTest6.java
Created file /experiment/results/randoop5/closure-com.google.javascript.rhino.head.tools.shell.Global-20/RegressionTest7.java
Created file /experiment/results/randoop5/closure-com.google.javascript.rhino.head.tools.shell.Global-20/RegressionTest8.java
Created file /experiment/results/randoop5/closure-com.google.javascript.rhino.head.tools.shell.Global-20/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  java.util.Collections.addAll(java.util.Collection<java.lang.String>,java.lang.String[])
  Possibly flaky:  com.google.javascript.rhino.head.tools.shell.Global.toint32(com.google.javascript.rhino.head.Context,com.google.javascript.rhino.head.Scriptable,java.lang.Object[],com.google.javascript.rhino.head.Function)
  Possibly flaky:  com.google.javascript.rhino.head.tools.shell.Global.setSealedStdLib(boolean)
  Possibly flaky:  com.google.javascript.rhino.head.tools.shell.Global.setOut(java.io.PrintStream)
  Possibly flaky:  com.google.javascript.rhino.head.tools.shell.Global.setIn(java.io.InputStream)
  Possibly flaky:  com.google.javascript.rhino.head.tools.shell.Global.setErr(java.io.PrintStream)
  Possibly flaky:  com.google.javascript.rhino.head.tools.shell.Global.seal(com.google.javascript.rhino.head.Context,com.google.javascript.rhino.head.Scriptable,java.lang.Object[],com.google.javascript.rhino.head.Function)
  Possibly flaky:  com.google.javascript.rhino.head.tools.shell.Global.runDoctest(com.google.javascript.rhino.head.Context,com.google.javascript.rhino.head.Scriptable,java.lang.String,java.lang.String,int)
  Possibly flaky:  com.google.javascript.rhino.head.tools.shell.Global.quit(com.google.javascript.rhino.head.Context,com.google.javascript.rhino.head.Scriptable,java.lang.Object[],com.google.javascript.rhino.head.Function)
  Possibly flaky:  com.google.javascript.rhino.head.tools.shell.Global.load(com.google.javascript.rhino.head.Context,com.google.javascript.rhino.head.Scriptable,java.lang.Object[],com.google.javascript.rhino.head.Function)
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

Uncompilable sequences generated (count: 280).
Please report at https://github.com/randoop/randoop/issues ,
providing the information requested at https://randoop.github.io/randoop/manual/index.html#bug-reporting .

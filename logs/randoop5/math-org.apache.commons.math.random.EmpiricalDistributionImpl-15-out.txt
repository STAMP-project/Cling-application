Randoop for Java version "4.2.4, branch master, commit be6dbd3, 2020-07-14".

Will try to generate tests for 1 classes.
PUBLIC MEMBERS=13
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=4, test inputs generated=0, failing inputs=0      (2020-11-24T23:29:37.298Z     102MB used)
Progress update: steps=887, test inputs generated=713, failing inputs=16      (2020-11-24T23:30:37.318Z     551MB used)
Progress update: steps=1000, test inputs generated=795, failing inputs=16      (2020-11-24T23:30:44.806Z     410MB used)
Progress update: steps=1531, test inputs generated=1214, failing inputs=22      (2020-11-24T23:31:37.319Z     666MB used)
Progress update: steps=2000, test inputs generated=1578, failing inputs=26      (2020-11-24T23:31:56.430Z     197MB used)
Progress update: steps=2876, test inputs generated=2271, failing inputs=47      (2020-11-24T23:32:37.319Z     680MB used)
Progress update: steps=3000, test inputs generated=2367, failing inputs=47      (2020-11-24T23:32:44.636Z     335MB used)
Progress update: steps=3585, test inputs generated=2818, failing inputs=50      (2020-11-24T23:33:37.321Z     679MB used)
Progress update: steps=4000, test inputs generated=3151, failing inputs=51      (2020-11-24T23:34:01.798Z     510MB used)
Progress update: steps=4606, test inputs generated=3614, failing inputs=54      (2020-11-24T23:34:37.321Z     701MB used)
Progress update: steps=4606, test inputs generated=3614, failing inputs=54      (2020-11-24T23:34:37.329Z     701MB used)
Normal method executions: 2053119
Exceptional method executions: 851

Average method execution time (normal termination):      0.00175
Average method execution time (exceptional termination): 0.0850
Approximate memory usage 701MB
Explorer = ForwardGenerator(steps: 4606, null steps: 992, num_sequences_generated: 3614;
    allSequences: 3614, regresson seqs: 3559, error seqs: 54=54=54, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 1;
    runtimePrimitivesSeen:718)

Error-revealing test output:
Error-revealing test count: 54
Writing error-revealing JUnit tests...
Created file /experiment/results/randoop5/math-org.apache.commons.math.random.EmpiricalDistributionImpl-15/ErrorTest0.java
Created file /experiment/results/randoop5/math-org.apache.commons.math.random.EmpiricalDistributionImpl-15/ErrorTest.java
Wrote error-revealing JUnit tests.

About to look for failing assertions in 2020 regression sequences.

Regression test output:
Regression test count: 2020
Writing regression JUnit tests...
Created file /experiment/results/randoop5/math-org.apache.commons.math.random.EmpiricalDistributionImpl-15/RegressionTest0.java
                                                                                                                                                                                                       Created file /experiment/results/randoop5/math-org.apache.commons.math.random.EmpiricalDistributionImpl-15/RegressionTest1.java
Created file /experiment/results/randoop5/math-org.apache.commons.math.random.EmpiricalDistributionImpl-15/RegressionTest2.java
Created file /experiment/results/randoop5/math-org.apache.commons.math.random.EmpiricalDistributionImpl-15/RegressionTest3.java
Created file /experiment/results/randoop5/math-org.apache.commons.math.random.EmpiricalDistributionImpl-15/RegressionTest4.java
Created file /experiment/results/randoop5/math-org.apache.commons.math.random.EmpiricalDistributionImpl-15/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  org.apache.commons.math.random.EmpiricalDistributionImpl.load(java.net.URL)
  Possibly flaky:  org.apache.commons.math.random.EmpiricalDistributionImpl.load(double[])
  Possibly flaky:  org.apache.commons.math.random.EmpiricalDistributionImpl.load(java.io.File)
  Possibly flaky:  org.apache.commons.math.random.EmpiricalDistributionImpl.isLoaded()
  Possibly flaky:  org.apache.commons.math.random.EmpiricalDistributionImpl.getUpperBounds()
  Possibly flaky:  org.apache.commons.math.random.EmpiricalDistributionImpl.getSampleStats()
  Possibly flaky:  org.apache.commons.math.random.EmpiricalDistributionImpl.getNextValue()
  Possibly flaky:  org.apache.commons.math.random.EmpiricalDistributionImpl.getBinStats()
  Possibly flaky:  org.apache.commons.math.random.EmpiricalDistributionImpl.getBinCount()
  Possibly flaky:  java.util.Arrays.toString(double[])
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

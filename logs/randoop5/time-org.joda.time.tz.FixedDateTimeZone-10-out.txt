Randoop for Java version "4.2.4, branch master, commit be6dbd3, 2020-07-14".

Will try to generate tests for 1 classes.
PUBLIC MEMBERS=39
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2020-11-25T01:05:17.863Z     102MB used)
Progress update: steps=1000, test inputs generated=861, failing inputs=0      (2020-11-25T01:06:14.311Z     280MB used)
Progress update: steps=1059, test inputs generated=916, failing inputs=0      (2020-11-25T01:06:17.904Z     530MB used)
Progress update: steps=1933, test inputs generated=1650, failing inputs=0      (2020-11-25T01:07:17.904Z     102MB used)
Progress update: steps=2000, test inputs generated=1710, failing inputs=0      (2020-11-25T01:07:22.220Z     385MB used)
Progress update: steps=2815, test inputs generated=2394, failing inputs=0      (2020-11-25T01:08:17.905Z     960MB used)
Progress update: steps=3000, test inputs generated=2544, failing inputs=0      (2020-11-25T01:08:42.606Z     722MB used)
Progress update: steps=3616, test inputs generated=3051, failing inputs=0      (2020-11-25T01:09:17.905Z     451MB used)
Progress update: steps=4000, test inputs generated=3356, failing inputs=0      (2020-11-25T01:09:36.459Z     196MB used)
Progress update: steps=4729, test inputs generated=3964, failing inputs=0      (2020-11-25T01:10:17.906Z     64MB used)
Progress update: steps=4729, test inputs generated=3964, failing inputs=0      (2020-11-25T01:10:17.953Z     64MB used)
Normal method executions: 87149
Exceptional method executions: 92

Average method execution time (normal termination):      0.00715
Average method execution time (exceptional termination): 0.0858
Approximate memory usage 64MB
Explorer = ForwardGenerator(steps: 4729, null steps: 765, num_sequences_generated: 3964;
    allSequences: 3964, regresson seqs: 3963, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 1;
    runtimePrimitivesSeen:383)

No error-revealing tests to output.

About to look for failing assertions in 2020 regression sequences.

Regression test output:
Regression test count: 2020
Writing regression JUnit tests...
Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-10/RegressionTest0.java
                                                                                                                                                                                                       Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-10/RegressionTest1.java
Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-10/RegressionTest2.java
Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-10/RegressionTest3.java
Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-10/RegressionTest4.java
Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-10/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.toTimeZone()
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.previousTransition(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.nextTransition(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.isFixed()
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.getStandardOffset(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.getOffset(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.getNameKey(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.equals(java.lang.Object)
  Possibly flaky:  org.joda.time.DateTimeZone.toString()
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

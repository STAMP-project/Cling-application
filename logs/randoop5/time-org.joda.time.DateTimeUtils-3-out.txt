Randoop for Java version "4.2.4, branch master, commit be6dbd3, 2020-07-14".

Will try to generate tests for 1 classes.
PUBLIC MEMBERS=19
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2020-11-25T02:24:41.501Z     102MB used)
Progress update: steps=1000, test inputs generated=309, failing inputs=0      (2020-11-25T02:24:58.161Z     604MB used)
Progress update: steps=2000, test inputs generated=553, failing inputs=0      (2020-11-25T02:25:08.072Z     124MB used)
Progress update: steps=3000, test inputs generated=788, failing inputs=0      (2020-11-25T02:25:15.102Z     109MB used)
Progress update: steps=4000, test inputs generated=1025, failing inputs=0      (2020-11-25T02:25:22.306Z     84MB used)
Progress update: steps=5000, test inputs generated=1272, failing inputs=0      (2020-11-25T02:25:28.604Z     1080MB used)
Progress update: steps=6000, test inputs generated=1522, failing inputs=0      (2020-11-25T02:25:36.335Z     977MB used)
Progress update: steps=6774, test inputs generated=1699, failing inputs=0      (2020-11-25T02:25:41.569Z     614MB used)
Progress update: steps=7000, test inputs generated=1747, failing inputs=0      (2020-11-25T02:25:42.629Z     795MB used)
Progress update: steps=8000, test inputs generated=1982, failing inputs=0      (2020-11-25T02:25:49.569Z     434MB used)
Progress update: steps=9000, test inputs generated=2217, failing inputs=0      (2020-11-25T02:25:57.829Z     103MB used)
Progress update: steps=10000, test inputs generated=2442, failing inputs=0      (2020-11-25T02:26:16.964Z     1033MB used)
Progress update: steps=11000, test inputs generated=2660, failing inputs=0      (2020-11-25T02:26:29.851Z     622MB used)
Progress update: steps=12000, test inputs generated=2888, failing inputs=0      (2020-11-25T02:26:40.601Z     260MB used)
Progress update: steps=12126, test inputs generated=2918, failing inputs=0      (2020-11-25T02:26:41.569Z     402MB used)
Progress update: steps=13000, test inputs generated=3112, failing inputs=0      (2020-11-25T02:26:48.412Z     1205MB used)
Progress update: steps=14000, test inputs generated=3323, failing inputs=0      (2020-11-25T02:26:56.335Z     803MB used)
Progress update: steps=15000, test inputs generated=3558, failing inputs=0      (2020-11-25T02:27:05.513Z     468MB used)
Progress update: steps=16000, test inputs generated=3776, failing inputs=0      (2020-11-25T02:27:14.005Z     108MB used)
Progress update: steps=17000, test inputs generated=4008, failing inputs=0      (2020-11-25T02:27:23.159Z     1089MB used)
Progress update: steps=18000, test inputs generated=4228, failing inputs=0      (2020-11-25T02:27:38.322Z     726MB used)
Progress update: steps=18176, test inputs generated=4272, failing inputs=0      (2020-11-25T02:27:41.570Z     914MB used)
Progress update: steps=19000, test inputs generated=4490, failing inputs=0      (2020-11-25T02:27:58.126Z     549MB used)
Progress update: steps=20000, test inputs generated=4709, failing inputs=0      (2020-11-25T02:28:13.098Z     215MB used)
Progress update: steps=21000, test inputs generated=4934, failing inputs=0      (2020-11-25T02:28:38.974Z     1161MB used)
Progress update: steps=21091, test inputs generated=4960, failing inputs=0      (2020-11-25T02:28:41.570Z     1294MB used)
Progress update: steps=22000, test inputs generated=5174, failing inputs=0      (2020-11-25T02:28:59.313Z     904MB used)
Progress update: steps=23000, test inputs generated=5385, failing inputs=0      (2020-11-25T02:29:11.951Z     547MB used)
Progress update: steps=24000, test inputs generated=5611, failing inputs=0      (2020-11-25T02:29:27.142Z     243MB used)
Progress update: steps=24854, test inputs generated=5827, failing inputs=0      (2020-11-25T02:29:41.545Z     1160MB used)
Normal method executions: 195309
Exceptional method executions: 3

Average method execution time (normal termination):      0.00742
Average method execution time (exceptional termination): 0.986
Approximate memory usage 1160MB
Explorer = ForwardGenerator(steps: 24854, null steps: 19027, num_sequences_generated: 5827;
    allSequences: 5827, regresson seqs: 5826, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 1;
    runtimePrimitivesSeen:40)

No error-revealing tests to output.
                                                                                                                                                                                                       
About to look for failing assertions in 2863 regression sequences.

Regression test output:
Regression test count: 2863
Writing regression JUnit tests...
Created file /experiment/results/randoop5/time-org.joda.time.DateTimeUtils-3/RegressionTest0.java
Created file /experiment/results/randoop5/time-org.joda.time.DateTimeUtils-3/RegressionTest1.java
Created file /experiment/results/randoop5/time-org.joda.time.DateTimeUtils-3/RegressionTest2.java
Created file /experiment/results/randoop5/time-org.joda.time.DateTimeUtils-3/RegressionTest3.java
Created file /experiment/results/randoop5/time-org.joda.time.DateTimeUtils-3/RegressionTest4.java
Created file /experiment/results/randoop5/time-org.joda.time.DateTimeUtils-3/RegressionTest5.java
Created file /experiment/results/randoop5/time-org.joda.time.DateTimeUtils-3/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  org.joda.time.DateTimeUtils.getInstantMillis(org.joda.time.ReadableInstant)
  Possibly flaky:  org.joda.time.DateTimeUtils.currentTimeMillis()
  Possibly flaky:  java.lang.String.valueOf(long)
  Possibly flaky:  java.lang.Long.valueOf(long)
  Possibly flaky:  java.lang.Long.toString(long)
  Possibly flaky:  java.lang.Long.toOctalString(long)
  Possibly flaky:  java.lang.Long.toHexString(long)
  Possibly flaky:  java.lang.Long.toBinaryString(long)
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

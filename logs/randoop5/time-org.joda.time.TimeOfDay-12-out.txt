Randoop for Java version "4.2.4, branch master, commit be6dbd3, 2020-07-14".

Will try to generate tests for 1 classes.
PUBLIC MEMBERS=105
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2020-11-25T01:32:32.230Z     112MB used)
Progress update: steps=606, test inputs generated=559, failing inputs=0      (2020-11-25T01:33:32.256Z     427MB used)
Progress update: steps=1000, test inputs generated=932, failing inputs=0      (2020-11-25T01:34:27.166Z     98MB used)
Progress update: steps=1028, test inputs generated=961, failing inputs=0      (2020-11-25T01:34:32.256Z     367MB used)
Progress update: steps=2000, test inputs generated=1861, failing inputs=0      (2020-11-25T01:35:29.013Z     880MB used)
Progress update: steps=2045, test inputs generated=1903, failing inputs=0      (2020-11-25T01:35:32.284Z     38MB used)
Progress update: steps=2821, test inputs generated=2637, failing inputs=0      (2020-11-25T01:36:32.284Z     835MB used)
Progress update: steps=3000, test inputs generated=2800, failing inputs=0      (2020-11-25T01:36:39.041Z     1266MB used)
Progress update: steps=3974, test inputs generated=3715, failing inputs=0      (2020-11-25T01:37:32.225Z     994MB used)
Normal method executions: 4603681
Exceptional method executions: 568

Average method execution time (normal termination):      0.000520
Average method execution time (exceptional termination): 0.153
Approximate memory usage 994MB
Explorer = ForwardGenerator(steps: 3974, null steps: 259, num_sequences_generated: 3715;
    allSequences: 3715, regresson seqs: 3714, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 1;
    runtimePrimitivesSeen:121)

No error-revealing tests to output.

About to look for failing assertions in 2005 regression sequences.

Regression test output:
Regression test count: 2005
Writing regression JUnit tests...
                                                                                                                                                                                                       Created file /experiment/results/randoop5/time-org.joda.time.TimeOfDay-12/RegressionTest0.java
Created file /experiment/results/randoop5/time-org.joda.time.TimeOfDay-12/RegressionTest1.java
Created file /experiment/results/randoop5/time-org.joda.time.TimeOfDay-12/RegressionTest2.java
Created file /experiment/results/randoop5/time-org.joda.time.TimeOfDay-12/RegressionTest3.java
Created file /experiment/results/randoop5/time-org.joda.time.TimeOfDay-12/RegressionTest4.java
Created file /experiment/results/randoop5/time-org.joda.time.TimeOfDay-12/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  org.joda.time.field.AbstractPartialFieldProperty.getName()
  Possibly flaky:  org.joda.time.field.AbstractPartialFieldProperty.getMinimumValueOverall()
  Possibly flaky:  org.joda.time.field.AbstractPartialFieldProperty.getMinimumValue()
  Possibly flaky:  org.joda.time.field.AbstractPartialFieldProperty.getMaximumValueOverall()
  Possibly flaky:  org.joda.time.field.AbstractPartialFieldProperty.getMaximumShortTextLength(java.util.Locale)
  Possibly flaky:  org.joda.time.field.AbstractPartialFieldProperty.getFieldType()
  Possibly flaky:  org.joda.time.field.AbstractPartialFieldProperty.getDurationField()
  Possibly flaky:  org.joda.time.field.AbstractPartialFieldProperty.getAsText(java.util.Locale)
  Possibly flaky:  org.joda.time.field.AbstractPartialFieldProperty.getAsText()
  Possibly flaky:  org.joda.time.field.AbstractPartialFieldProperty.getAsString()
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

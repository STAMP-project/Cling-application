Randoop for Java version "4.2.4, branch master, commit be6dbd3, 2020-07-14".

Will try to generate tests for 1 classes.
PUBLIC MEMBERS=19
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=1, failing inputs=0      (2020-11-25T02:24:45.718Z     102MB used)
Progress update: steps=1000, test inputs generated=309, failing inputs=0      (2020-11-25T02:25:03.702Z     593MB used)
Progress update: steps=2000, test inputs generated=553, failing inputs=0      (2020-11-25T02:25:14.654Z     209MB used)
Progress update: steps=3000, test inputs generated=788, failing inputs=0      (2020-11-25T02:25:22.381Z     286MB used)
Progress update: steps=4000, test inputs generated=1025, failing inputs=0      (2020-11-25T02:25:29.277Z     366MB used)
Progress update: steps=5000, test inputs generated=1272, failing inputs=0      (2020-11-25T02:25:36.064Z     351MB used)
Progress update: steps=6000, test inputs generated=1522, failing inputs=0      (2020-11-25T02:25:42.441Z     372MB used)
Progress update: steps=6623, test inputs generated=1659, failing inputs=0      (2020-11-25T02:25:45.770Z     943MB used)
Progress update: steps=7000, test inputs generated=1747, failing inputs=0      (2020-11-25T02:25:48.062Z     197MB used)
Progress update: steps=8000, test inputs generated=1982, failing inputs=0      (2020-11-25T02:25:53.998Z     1132MB used)
Progress update: steps=9000, test inputs generated=2217, failing inputs=0      (2020-11-25T02:26:10.355Z     993MB used)
Progress update: steps=10000, test inputs generated=2442, failing inputs=0      (2020-11-25T02:26:23.368Z     736MB used)
Progress update: steps=11000, test inputs generated=2660, failing inputs=0      (2020-11-25T02:26:36.057Z     432MB used)
Progress update: steps=12000, test inputs generated=2888, failing inputs=0      (2020-11-25T02:26:44.413Z     103MB used)
Progress update: steps=12197, test inputs generated=2934, failing inputs=0      (2020-11-25T02:26:45.770Z     319MB used)
Progress update: steps=13000, test inputs generated=3112, failing inputs=0      (2020-11-25T02:26:53.145Z     1057MB used)
Progress update: steps=14000, test inputs generated=3323, failing inputs=0      (2020-11-25T02:27:01.842Z     677MB used)
Progress update: steps=15000, test inputs generated=3558, failing inputs=0      (2020-11-25T02:27:11.036Z     367MB used)
Progress update: steps=16000, test inputs generated=3776, failing inputs=0      (2020-11-25T02:27:18.011Z     1275MB used)
Progress update: steps=17000, test inputs generated=4008, failing inputs=0      (2020-11-25T02:27:33.027Z     960MB used)
Progress update: steps=17765, test inputs generated=4173, failing inputs=0      (2020-11-25T02:27:45.773Z     376MB used)
Progress update: steps=18000, test inputs generated=4228, failing inputs=0      (2020-11-25T02:27:50.226Z     609MB used)
Progress update: steps=19000, test inputs generated=4490, failing inputs=0      (2020-11-25T02:28:08.782Z     444MB used)
Progress update: steps=20000, test inputs generated=4709, failing inputs=0      (2020-11-25T02:28:32.337Z     86MB used)
Progress update: steps=20517, test inputs generated=4831, failing inputs=0      (2020-11-25T02:28:45.774Z     605MB used)
Progress update: steps=21000, test inputs generated=4934, failing inputs=0      (2020-11-25T02:28:54.646Z     1066MB used)
Progress update: steps=22000, test inputs generated=5174, failing inputs=0      (2020-11-25T02:29:09.579Z     777MB used)
Progress update: steps=23000, test inputs generated=5385, failing inputs=0      (2020-11-25T02:29:22.609Z     421MB used)
Progress update: steps=24000, test inputs generated=5611, failing inputs=0      (2020-11-25T02:29:38.965Z     117MB used)
Progress update: steps=24353, test inputs generated=5704, failing inputs=0      (2020-11-25T02:29:45.703Z     498MB used)
Normal method executions: 190843
Exceptional method executions: 3

Average method execution time (normal termination):      0.00757
Average method execution time (exceptional termination): 8.79
Approximate memory usage 498MB
Explorer = ForwardGenerator(steps: 24353, null steps: 18649, num_sequences_generated: 5704;
    allSequences: 5704, regresson seqs: 5703, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 1;
    runtimePrimitivesSeen:40)

No error-revealing tests to output.

About to look for failing assertions in 2796 regression sequences.
                                                                                                                                                                                                       
Regression test output:
Regression test count: 2796
Writing regression JUnit tests...
Created file /experiment/results/randoop5/time-org.joda.time.DateTimeUtils-4/RegressionTest0.java
Created file /experiment/results/randoop5/time-org.joda.time.DateTimeUtils-4/RegressionTest1.java
Created file /experiment/results/randoop5/time-org.joda.time.DateTimeUtils-4/RegressionTest2.java
Created file /experiment/results/randoop5/time-org.joda.time.DateTimeUtils-4/RegressionTest3.java
Created file /experiment/results/randoop5/time-org.joda.time.DateTimeUtils-4/RegressionTest4.java
Created file /experiment/results/randoop5/time-org.joda.time.DateTimeUtils-4/RegressionTest5.java
Created file /experiment/results/randoop5/time-org.joda.time.DateTimeUtils-4/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  org.joda.time.DateTimeUtils.getInstantMillis(org.joda.time.ReadableInstant)
  Possibly flaky:  org.joda.time.DateTimeUtils.currentTimeMillis()
  Possibly flaky:  java.lang.String.valueOf(long)
  Possibly flaky:  java.lang.Long.valueOf(long)
  Possibly flaky:  java.lang.Long.toString(long)
  Possibly flaky:  java.lang.Long.toOctalString(long)
  Possibly flaky:  java.lang.Long.toHexString(long)
  Possibly flaky:  java.lang.Long.toBinaryString(long)
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

Randoop for Java version "4.2.4, branch master, commit be6dbd3, 2020-07-14".

Will try to generate tests for 1 classes.
PUBLIC MEMBERS=105
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=16, test inputs generated=0, failing inputs=0      (2020-11-25T01:32:10.363Z     112MB used)
Progress update: steps=701, test inputs generated=647, failing inputs=0      (2020-11-25T01:33:10.468Z     342MB used)
Progress update: steps=1000, test inputs generated=926, failing inputs=0      (2020-11-25T01:33:40.200Z     711MB used)
Progress update: steps=1232, test inputs generated=1147, failing inputs=0      (2020-11-25T01:34:10.469Z     362MB used)
Progress update: steps=1952, test inputs generated=1820, failing inputs=0      (2020-11-25T01:35:10.469Z     63MB used)
Progress update: steps=2000, test inputs generated=1863, failing inputs=0      (2020-11-25T01:35:12.565Z     477MB used)
Progress update: steps=2717, test inputs generated=2530, failing inputs=0      (2020-11-25T01:36:10.470Z     403MB used)
Progress update: steps=3000, test inputs generated=2791, failing inputs=0      (2020-11-25T01:36:26.565Z     540MB used)
Progress update: steps=3985, test inputs generated=3716, failing inputs=0      (2020-11-25T01:37:10.284Z     841MB used)
Normal method executions: 4321229
Exceptional method executions: 614

Average method execution time (normal termination):      0.000532
Average method execution time (exceptional termination): 0.146
Approximate memory usage 841MB
Explorer = ForwardGenerator(steps: 3985, null steps: 269, num_sequences_generated: 3716;
    allSequences: 3716, regresson seqs: 3715, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 1;
    runtimePrimitivesSeen:130)

No error-revealing tests to output.

About to look for failing assertions in 2021 regression sequences.

Regression test output:
Regression test count: 2021
Writing regression JUnit tests...
                                                                                                                                                                                                       Created file /experiment/results/randoop5/time-org.joda.time.TimeOfDay-8/RegressionTest0.java
Created file /experiment/results/randoop5/time-org.joda.time.TimeOfDay-8/RegressionTest1.java
Created file /experiment/results/randoop5/time-org.joda.time.TimeOfDay-8/RegressionTest2.java
Created file /experiment/results/randoop5/time-org.joda.time.TimeOfDay-8/RegressionTest3.java
Created file /experiment/results/randoop5/time-org.joda.time.TimeOfDay-8/RegressionTest4.java
Created file /experiment/results/randoop5/time-org.joda.time.TimeOfDay-8/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  org.joda.time.field.AbstractPartialFieldProperty.toString()
  Possibly flaky:  org.joda.time.field.AbstractPartialFieldProperty.getRangeDurationField()
  Possibly flaky:  org.joda.time.field.AbstractPartialFieldProperty.getName()
  Possibly flaky:  org.joda.time.field.AbstractPartialFieldProperty.getMinimumValueOverall()
  Possibly flaky:  org.joda.time.field.AbstractPartialFieldProperty.getMinimumValue()
  Possibly flaky:  org.joda.time.field.AbstractPartialFieldProperty.getMaximumValueOverall()
  Possibly flaky:  org.joda.time.field.AbstractPartialFieldProperty.getMaximumValue()
  Possibly flaky:  org.joda.time.field.AbstractPartialFieldProperty.getMaximumShortTextLength(java.util.Locale)
  Possibly flaky:  org.joda.time.field.AbstractPartialFieldProperty.getFieldType()
  Possibly flaky:  org.joda.time.field.AbstractPartialFieldProperty.getAsText(java.util.Locale)
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

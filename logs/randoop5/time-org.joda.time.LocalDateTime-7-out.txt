Randoop for Java version "4.2.4, branch master, commit be6dbd3, 2020-07-14".

Will try to generate tests for 1 classes.
PUBLIC MEMBERS=167
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=4, test inputs generated=1, failing inputs=0      (2020-11-25T02:53:37.102Z     112MB used)
Progress update: steps=657, test inputs generated=618, failing inputs=0      (2020-11-25T02:54:37.184Z     167MB used)
Progress update: steps=1000, test inputs generated=948, failing inputs=0      (2020-11-25T02:55:19.007Z     592MB used)
Progress update: steps=1182, test inputs generated=1123, failing inputs=0      (2020-11-25T02:55:37.184Z     578MB used)
Progress update: steps=2000, test inputs generated=1911, failing inputs=0      (2020-11-25T02:56:29.267Z     976MB used)
Progress update: steps=2080, test inputs generated=1991, failing inputs=0      (2020-11-25T02:56:37.185Z     751MB used)
Progress update: steps=2589, test inputs generated=2476, failing inputs=0      (2020-11-25T02:57:37.187Z     970MB used)
Progress update: steps=3000, test inputs generated=2871, failing inputs=0      (2020-11-25T02:58:02.041Z     205MB used)
Progress update: steps=3494, test inputs generated=3349, failing inputs=0      (2020-11-25T02:58:37.141Z     876MB used)
Normal method executions: 3453767
Exceptional method executions: 600

Average method execution time (normal termination):      0.000693
Average method execution time (exceptional termination): 0.198
Approximate memory usage 876MB
Explorer = ForwardGenerator(steps: 3494, null steps: 145, num_sequences_generated: 3349;
    allSequences: 3349, regresson seqs: 3306, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 43;
    runtimePrimitivesSeen:1079)

No error-revealing tests to output.

About to look for failing assertions in 1813 regression sequences.

Regression test output:
Regression test count: 1813
Writing regression JUnit tests...
                                                                                                                                                                                                       Created file /experiment/results/randoop5/time-org.joda.time.LocalDateTime-7/RegressionTest0.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalDateTime-7/RegressionTest1.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalDateTime-7/RegressionTest2.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalDateTime-7/RegressionTest3.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalDateTime-7/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.toString()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.toInterval()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.remainder()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.isLeap()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getRangeDurationField()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getName()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getMinimumValueOverall()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getMinimumValue()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getMaximumValueOverall()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getMaximumValue()
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

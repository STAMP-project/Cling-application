Randoop for Java version "4.2.4, branch master, commit be6dbd3, 2020-07-14".

Will try to generate tests for 1 classes.
PUBLIC MEMBERS=122
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=3, test inputs generated=1, failing inputs=0      (2020-11-25T01:54:50.897Z     112MB used)
Progress update: steps=501, test inputs generated=481, failing inputs=0      (2020-11-25T01:55:50.939Z     108MB used)
Progress update: steps=1000, test inputs generated=954, failing inputs=0      (2020-11-25T01:56:20.798Z     1040MB used)
Progress update: steps=1599, test inputs generated=1525, failing inputs=0      (2020-11-25T01:56:50.939Z     454MB used)
Progress update: steps=2000, test inputs generated=1905, failing inputs=0      (2020-11-25T01:57:11.290Z     522MB used)
Progress update: steps=2621, test inputs generated=2482, failing inputs=0      (2020-11-25T01:57:50.940Z     531MB used)
Progress update: steps=3000, test inputs generated=2841, failing inputs=0      (2020-11-25T01:58:42.810Z     653MB used)
Progress update: steps=3093, test inputs generated=2933, failing inputs=0      (2020-11-25T01:58:50.940Z     660MB used)
Progress update: steps=3910, test inputs generated=3691, failing inputs=0      (2020-11-25T01:59:50.875Z     377MB used)
Normal method executions: 5980097
Exceptional method executions: 533

Average method execution time (normal termination):      0.000524
Average method execution time (exceptional termination): 0.359
Approximate memory usage 377MB
Explorer = ForwardGenerator(steps: 3910, null steps: 219, num_sequences_generated: 3691;
    allSequences: 3691, regresson seqs: 3690, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 1;
    runtimePrimitivesSeen:872)

No error-revealing tests to output.

About to look for failing assertions in 1997 regression sequences.

Regression test output:
Regression test count: 1997
Writing regression JUnit tests...
                                                                                                                                                                                                       Created file /experiment/results/randoop5/time-org.joda.time.LocalTime-20/RegressionTest0.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalTime-20/RegressionTest1.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalTime-20/RegressionTest2.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalTime-20/RegressionTest3.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalTime-20/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getDifferenceAsLong(org.joda.time.ReadableInstant)
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getDifference(org.joda.time.ReadableInstant)
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.toString()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.toInterval()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.remainder()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.isLeap()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getRangeDurationField()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getName()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getMinimumValueOverall()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getMinimumValue()
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

Randoop for Java version "4.2.4, branch master, commit be6dbd3, 2020-07-14".

Will try to generate tests for 1 classes.
PUBLIC MEMBERS=167
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=3, test inputs generated=0, failing inputs=0      (2020-11-25T02:53:49.982Z     112MB used)
Progress update: steps=623, test inputs generated=587, failing inputs=0      (2020-11-25T02:54:50.068Z     500MB used)
Progress update: steps=1000, test inputs generated=954, failing inputs=0      (2020-11-25T02:55:37.786Z     352MB used)
Progress update: steps=1207, test inputs generated=1150, failing inputs=0      (2020-11-25T02:55:50.069Z     654MB used)
Progress update: steps=2000, test inputs generated=1921, failing inputs=0      (2020-11-25T02:56:47.102Z     908MB used)
Progress update: steps=2038, test inputs generated=1960, failing inputs=0      (2020-11-25T02:56:50.069Z     1254MB used)
Progress update: steps=2629, test inputs generated=2528, failing inputs=0      (2020-11-25T02:57:50.070Z     1305MB used)
Progress update: steps=3000, test inputs generated=2879, failing inputs=0      (2020-11-25T02:58:11.234Z     858MB used)
Progress update: steps=3518, test inputs generated=3385, failing inputs=0      (2020-11-25T02:58:50.012Z     372MB used)
Normal method executions: 3662287
Exceptional method executions: 642

Average method execution time (normal termination):      0.000637
Average method execution time (exceptional termination): 0.193
Approximate memory usage 372MB
Explorer = ForwardGenerator(steps: 3518, null steps: 133, num_sequences_generated: 3385;
    allSequences: 3385, regresson seqs: 3334, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 51;
    runtimePrimitivesSeen:772)

No error-revealing tests to output.

About to look for failing assertions in 1818 regression sequences.

Regression test output:
Regression test count: 1818
Writing regression JUnit tests...
                                                                                                                                                                                                       Created file /experiment/results/randoop5/time-org.joda.time.LocalDateTime-10/RegressionTest0.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalDateTime-10/RegressionTest1.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalDateTime-10/RegressionTest2.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalDateTime-10/RegressionTest3.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalDateTime-10/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.toString()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.toInterval()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.remainder()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.isLeap()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getRangeDurationField()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getName()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getMinimumValueOverall()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getMinimumValue()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getMaximumValueOverall()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getMaximumValue()
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

Randoop for Java version "4.2.4, branch master, commit be6dbd3, 2020-07-14".

Will try to generate tests for 1 classes.
PUBLIC MEMBERS=55
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2020-11-25T01:25:29.207Z     112MB used)
Progress update: steps=495, test inputs generated=453, failing inputs=0      (2020-11-25T01:26:29.255Z     429MB used)
Progress update: steps=1000, test inputs generated=870, failing inputs=0      (2020-11-25T01:27:21.963Z     565MB used)
Progress update: steps=1063, test inputs generated=920, failing inputs=0      (2020-11-25T01:27:29.256Z     1095MB used)
Progress update: steps=1861, test inputs generated=1537, failing inputs=0      (2020-11-25T01:28:29.256Z     814MB used)
Progress update: steps=2000, test inputs generated=1642, failing inputs=0      (2020-11-25T01:28:38.295Z     600MB used)
Progress update: steps=2501, test inputs generated=2027, failing inputs=0      (2020-11-25T01:29:29.256Z     1118MB used)
Progress update: steps=3000, test inputs generated=2419, failing inputs=0      (2020-11-25T01:30:02.241Z     780MB used)
Progress update: steps=3557, test inputs generated=2857, failing inputs=0      (2020-11-25T01:30:29.203Z     1039MB used)
Normal method executions: 7992554
Exceptional method executions: 242

Average method execution time (normal termination):      0.000481
Average method execution time (exceptional termination): 0.294
Approximate memory usage 1039MB
Explorer = ForwardGenerator(steps: 3557, null steps: 700, num_sequences_generated: 2857;
    allSequences: 2857, regresson seqs: 2856, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 1;
    runtimePrimitivesSeen:326)

No error-revealing tests to output.

About to look for failing assertions in 1435 regression sequences.

Regression test output:
Regression test count: 1435
Writing regression JUnit tests...
                                                                                                                                                                                                       Created file /experiment/results/randoop5/time-org.joda.time.MutableInterval-18/RegressionTest0.java
Created file /experiment/results/randoop5/time-org.joda.time.MutableInterval-18/RegressionTest1.java
Created file /experiment/results/randoop5/time-org.joda.time.MutableInterval-18/RegressionTest2.java
Created file /experiment/results/randoop5/time-org.joda.time.MutableInterval-18/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  org.joda.time.base.BaseInterval.getStartMillis()
  Possibly flaky:  org.joda.time.base.BaseInterval.getEndMillis()
  Possibly flaky:  org.joda.time.base.BaseInterval.getChronology()
  Possibly flaky:  org.joda.time.base.AbstractInterval.toString()
  Possibly flaky:  org.joda.time.base.AbstractInterval.toPeriod()
  Possibly flaky:  org.joda.time.base.AbstractInterval.toPeriod(org.joda.time.PeriodType)
  Possibly flaky:  org.joda.time.base.AbstractInterval.toMutableInterval()
  Possibly flaky:  org.joda.time.base.AbstractInterval.toInterval()
  Possibly flaky:  org.joda.time.base.AbstractInterval.toDurationMillis()
  Possibly flaky:  org.joda.time.base.AbstractInterval.toDuration()
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

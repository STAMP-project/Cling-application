Randoop for Java version "4.2.4, branch master, commit be6dbd3, 2020-07-14".

Will try to generate tests for 1 classes.
PUBLIC MEMBERS=55
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2020-11-25T01:25:26.829Z     112MB used)
Progress update: steps=495, test inputs generated=453, failing inputs=0      (2020-11-25T01:26:26.890Z     255MB used)
Progress update: steps=1000, test inputs generated=870, failing inputs=0      (2020-11-25T01:27:17.529Z     289MB used)
Progress update: steps=1074, test inputs generated=929, failing inputs=0      (2020-11-25T01:27:26.890Z     902MB used)
Progress update: steps=1864, test inputs generated=1540, failing inputs=0      (2020-11-25T01:28:26.891Z     530MB used)
Progress update: steps=2000, test inputs generated=1642, failing inputs=0      (2020-11-25T01:28:36.190Z     314MB used)
Progress update: steps=2526, test inputs generated=2047, failing inputs=0      (2020-11-25T01:29:26.892Z     1041MB used)
Progress update: steps=3000, test inputs generated=2419, failing inputs=0      (2020-11-25T01:30:00.015Z     474MB used)
Progress update: steps=3559, test inputs generated=2858, failing inputs=0      (2020-11-25T01:30:26.878Z     783MB used)
Normal method executions: 7996858
Exceptional method executions: 242

Average method execution time (normal termination):      0.000460
Average method execution time (exceptional termination): 0.115
Approximate memory usage 783MB
Explorer = ForwardGenerator(steps: 3559, null steps: 701, num_sequences_generated: 2858;
    allSequences: 2858, regresson seqs: 2857, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 1;
    runtimePrimitivesSeen:326)

No error-revealing tests to output.
                                                                                                                                                                                                       
About to look for failing assertions in 1436 regression sequences.

Regression test output:
Regression test count: 1436
Writing regression JUnit tests...
Created file /experiment/results/randoop5/time-org.joda.time.MutableInterval-15/RegressionTest0.java
Created file /experiment/results/randoop5/time-org.joda.time.MutableInterval-15/RegressionTest1.java
Created file /experiment/results/randoop5/time-org.joda.time.MutableInterval-15/RegressionTest2.java
Created file /experiment/results/randoop5/time-org.joda.time.MutableInterval-15/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  org.joda.time.base.BaseInterval.getStartMillis()
  Possibly flaky:  org.joda.time.base.BaseInterval.getEndMillis()
  Possibly flaky:  org.joda.time.base.BaseInterval.getChronology()
  Possibly flaky:  org.joda.time.base.AbstractInterval.toString()
  Possibly flaky:  org.joda.time.base.AbstractInterval.toPeriod()
  Possibly flaky:  org.joda.time.base.AbstractInterval.toPeriod(org.joda.time.PeriodType)
  Possibly flaky:  org.joda.time.base.AbstractInterval.toMutableInterval()
  Possibly flaky:  org.joda.time.base.AbstractInterval.toInterval()
  Possibly flaky:  org.joda.time.base.AbstractInterval.toDurationMillis()
  Possibly flaky:  org.joda.time.base.AbstractInterval.toDuration()
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

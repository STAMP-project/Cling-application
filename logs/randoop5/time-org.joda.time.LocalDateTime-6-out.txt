Randoop for Java version "4.2.4, branch master, commit be6dbd3, 2020-07-14".

Will try to generate tests for 1 classes.
PUBLIC MEMBERS=167
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=4, test inputs generated=1, failing inputs=0      (2020-11-25T02:53:24.138Z     112MB used)
Progress update: steps=695, test inputs generated=653, failing inputs=0      (2020-11-25T02:54:24.195Z     160MB used)
Progress update: steps=1000, test inputs generated=948, failing inputs=0      (2020-11-25T02:54:51.290Z     309MB used)
Progress update: steps=1224, test inputs generated=1158, failing inputs=0      (2020-11-25T02:55:24.196Z     613MB used)
Progress update: steps=2000, test inputs generated=1907, failing inputs=0      (2020-11-25T02:56:13.886Z     596MB used)
Progress update: steps=2126, test inputs generated=2033, failing inputs=0      (2020-11-25T02:56:24.196Z     426MB used)
Progress update: steps=2647, test inputs generated=2534, failing inputs=0      (2020-11-25T02:57:24.197Z     1017MB used)
Progress update: steps=3000, test inputs generated=2876, failing inputs=0      (2020-11-25T02:57:50.476Z     177MB used)
Progress update: steps=3535, test inputs generated=3400, failing inputs=0      (2020-11-25T02:58:24.138Z     951MB used)
Normal method executions: 3348733
Exceptional method executions: 615

Average method execution time (normal termination):      0.000767
Average method execution time (exceptional termination): 0.178
Approximate memory usage 951MB
Explorer = ForwardGenerator(steps: 3535, null steps: 135, num_sequences_generated: 3400;
    allSequences: 3400, regresson seqs: 3344, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 56;
    runtimePrimitivesSeen:920)

No error-revealing tests to output.

About to look for failing assertions in 1818 regression sequences.

Regression test output:
Regression test count: 1818
Writing regression JUnit tests...
                                                                                                                                                                                                       Created file /experiment/results/randoop5/time-org.joda.time.LocalDateTime-6/RegressionTest0.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalDateTime-6/RegressionTest1.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalDateTime-6/RegressionTest2.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalDateTime-6/RegressionTest3.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalDateTime-6/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.toString()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.toInterval()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.remainder()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.isLeap()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getRangeDurationField()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getName()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getMinimumValueOverall()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getMinimumValue()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getMaximumValueOverall()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.getMaximumValue()
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

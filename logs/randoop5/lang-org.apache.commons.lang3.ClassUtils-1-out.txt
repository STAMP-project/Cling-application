Randoop for Java version "4.2.4, branch master, commit be6dbd3, 2020-07-14".

Will try to generate tests for 1 classes.
PUBLIC MEMBERS=38
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2020-11-25T00:00:28.888Z     102MB used)
Progress update: steps=1000, test inputs generated=796, failing inputs=0      (2020-11-25T00:01:27.553Z     460MB used)
Progress update: steps=1019, test inputs generated=811, failing inputs=0      (2020-11-25T00:01:28.926Z     692MB used)
Progress update: steps=1861, test inputs generated=1374, failing inputs=0      (2020-11-25T00:02:28.927Z     190MB used)
Progress update: steps=2000, test inputs generated=1475, failing inputs=0      (2020-11-25T00:02:46.742Z     204MB used)
Progress update: steps=2949, test inputs generated=2097, failing inputs=0      (2020-11-25T00:03:28.927Z     1026MB used)
Progress update: steps=3000, test inputs generated=2133, failing inputs=0      (2020-11-25T00:03:31.116Z     129MB used)
Progress update: steps=4000, test inputs generated=2764, failing inputs=0      (2020-11-25T00:04:13.658Z     1229MB used)
Progress update: steps=4416, test inputs generated=3021, failing inputs=0      (2020-11-25T00:04:28.928Z     739MB used)Long generation time 1157 msec (= 1157 + 0) for
java.lang.Class<?>[] wildcardClassArray0 = null;
java.lang.Class<?> wildcardClass1 = null;
java.lang.Class[] classArray3 = new java.lang.Class[ 1 ];
@SuppressWarnings("unchecked")
java.lang.Class<?>[] wildcardClassArray4 = (java.lang.Class<?>[])classArray3;
wildcardClassArray4[0] = wildcardClass1;
java.lang.Class<?>[] wildcardClassArray7 = org.apache.commons.lang3.ClassUtils.wrappersToPrimitives(wildcardClassArray4);
java.lang.Class<?> wildcardClass8 = null;
java.lang.Class[] classArray10 = new java.lang.Class[ 1 ];
@SuppressWarnings("unchecked")
java.lang.Class<?>[] wildcardClassArray11 = (java.lang.Class<?>[])classArray10;
wildcardClassArray11[0] = wildcardClass8;
java.lang.Class<?>[] wildcardClassArray14 = org.apache.commons.lang3.ClassUtils.wrappersToPrimitives(wildcardClassArray11);
boolean boolean15 = org.apache.commons.lang3.ClassUtils.isAssignable(wildcardClassArray7, wildcardClassArray11);
boolean boolean16 = org.apache.commons.lang3.ClassUtils.isAssignable(wildcardClassArray0, wildcardClassArray7);
java.lang.Class<?> wildcardClass17 = wildcardClassArray7.getClass();
java.lang.String str18 = org.apache.commons.lang3.ClassUtils.getShortClassName((java.lang.Class<Capture205>)wildcardClass17);
java.lang.Class<?> wildcardClass19 = org.apache.commons.lang3.ClassUtils.primitiveToWrapper((java.lang.Class<Capture315>)wildcardClass17);
java.util.List<java.lang.Class<?>> wildcardClassList20 = org.apache.commons.lang3.ClassUtils.getAllSuperclasses((java.lang.Class<Capture454>)wildcardClass19);
java.lang.Class<?> wildcardClass21 = wildcardClassList20.getClass();
java.lang.String str22 = org.apache.commons.lang3.ClassUtils.getPackageName((java.lang.Class<Capture968>)wildcardClass21);
java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.ClassUtils.primitiveToWrapper((java.lang.Class<Capture1562>)wildcardClass21);
java.util.List<java.lang.Class<?>> wildcardClassList24 = org.apache.commons.lang3.ClassUtils.getAllSuperclasses((java.lang.Class<Capture2157>)wildcardClass23);
java.util.List<java.lang.String> strList25 = org.apache.commons.lang3.ClassUtils.convertClassesToClassNames((java.util.List<java.lang.Class<Capture2544>>)wildcardClassList24);
java.lang.String str27 = org.apache.commons.lang3.ClassUtils.getPackageCanonicalName((java.lang.Object)wildcardClassList24, "java.lang");
java.util.List<java.lang.String> strList28 = org.apache.commons.lang3.ClassUtils.convertClassesToClassNames((java.util.List<java.lang.Class<Capture12624>>)wildcardClassList24);
java.lang.String str30 = org.apache.commons.lang3.ClassUtils.getPackageCanonicalName((java.lang.Object)strList28, "ArrayList");
java.util.List<java.lang.Class<?>> wildcardClassList31 = org.apache.commons.lang3.ClassUtils.convertClassNamesToClasses(strList28);
java.util.List<java.lang.String> strList32 = org.apache.commons.lang3.ClassUtils.convertClassesToClassNames((java.util.List<java.lang.Class<Capture132822>>)strList28);


Progress update: steps=5000, test inputs generated=3389, failing inputs=0      (2020-11-25T00:05:10.209Z     525MB used)
Progress update: steps=5441, test inputs generated=3661, failing inputs=0      (2020-11-25T00:05:28.930Z     558MB used)
Progress update: steps=5441, test inputs generated=3661, failing inputs=0      (2020-11-25T00:05:28.938Z     558MB used)
Normal method executions: 10421392
Exceptional method executions: 232

Average method execution time (normal termination):      0.000285
Average method execution time (exceptional termination): 0.256
Approximate memory usage 558MB
Explorer = ForwardGenerator(steps: 5441, null steps: 1780, num_sequences_generated: 3661;
    allSequences: 3661, regresson seqs: 1240, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 2421;
    runtimePrimitivesSeen:60)

No error-revealing tests to output.

About to look for failing assertions in 788 regression sequences.

Regression test output:
Regression test count: 788
Writing regression JUnit tests...
Created file /experiment/results/randoop5/lang-org.apache.commons.lang3.ClassUtils-1/RegressionTest0.java
Created file /experiment/results/randoop5/lang-org.apache.commons.lang3.ClassUtils-1/RegressionTest1.java
Created file /experiment/results/randoop5/lang-org.apache.commons.lang3.ClassUtils-1/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Invalid tests generated: 0

Uncompilable sequences generated (count: 2420).
Please report at https://github.com/randoop/randoop/issues ,
providing the information requested at https://randoop.github.io/randoop/manual/index.html#bug-reporting .

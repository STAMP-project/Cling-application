Randoop for Java version "4.2.4, branch master, commit be6dbd3, 2020-07-14".

Will try to generate tests for 1 classes.
PUBLIC MEMBERS=39
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2020-11-25T01:05:09.763Z     102MB used)
Progress update: steps=1000, test inputs generated=861, failing inputs=0      (2020-11-25T01:06:04.486Z     738MB used)
Progress update: steps=1098, test inputs generated=948, failing inputs=0      (2020-11-25T01:06:09.796Z     228MB used)
Progress update: steps=1915, test inputs generated=1637, failing inputs=0      (2020-11-25T01:07:09.797Z     56MB used)
Progress update: steps=2000, test inputs generated=1710, failing inputs=0      (2020-11-25T01:07:13.262Z     387MB used)
Progress update: steps=2869, test inputs generated=2440, failing inputs=0      (2020-11-25T01:08:09.799Z     244MB used)
Progress update: steps=3000, test inputs generated=2544, failing inputs=0      (2020-11-25T01:08:17.598Z     765MB used)
Progress update: steps=3697, test inputs generated=3118, failing inputs=0      (2020-11-25T01:09:09.800Z     119MB used)
Progress update: steps=4000, test inputs generated=3356, failing inputs=0      (2020-11-25T01:09:26.001Z     175MB used)
Progress update: steps=4830, test inputs generated=4051, failing inputs=0      (2020-11-25T01:10:09.774Z     592MB used)
Normal method executions: 89672
Exceptional method executions: 94

Average method execution time (normal termination):      0.00690
Average method execution time (exceptional termination): 0.0777
Approximate memory usage 592MB
Explorer = ForwardGenerator(steps: 4830, null steps: 779, num_sequences_generated: 4051;
    allSequences: 4051, regresson seqs: 4050, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 1;
    runtimePrimitivesSeen:388)

No error-revealing tests to output.
                                                                                                                                                                                                       
About to look for failing assertions in 2067 regression sequences.

Regression test output:
Regression test count: 2067
Writing regression JUnit tests...
Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-5/RegressionTest0.java
Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-5/RegressionTest1.java
Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-5/RegressionTest2.java
Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-5/RegressionTest3.java
Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-5/RegressionTest4.java
Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-5/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.toTimeZone()
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.previousTransition(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.nextTransition(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.isFixed()
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.getStandardOffset(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.getOffset(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.getNameKey(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.equals(java.lang.Object)
  Possibly flaky:  org.joda.time.DateTimeZone.toString()
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

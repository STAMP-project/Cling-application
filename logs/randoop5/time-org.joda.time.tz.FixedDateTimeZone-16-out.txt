Randoop for Java version "4.2.4, branch master, commit be6dbd3, 2020-07-14".

Will try to generate tests for 1 classes.
PUBLIC MEMBERS=39
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2020-11-25T01:07:04.552Z     102MB used)
Progress update: steps=837, test inputs generated=730, failing inputs=0      (2020-11-25T01:08:04.601Z     430MB used)
Progress update: steps=1000, test inputs generated=861, failing inputs=0      (2020-11-25T01:08:15.122Z     396MB used)
Progress update: steps=1600, test inputs generated=1369, failing inputs=0      (2020-11-25T01:09:04.602Z     734MB used)
Progress update: steps=2000, test inputs generated=1710, failing inputs=0      (2020-11-25T01:09:26.861Z     126MB used)
Progress update: steps=2697, test inputs generated=2297, failing inputs=0      (2020-11-25T01:10:04.602Z     630MB used)
Progress update: steps=3000, test inputs generated=2544, failing inputs=0      (2020-11-25T01:10:24.417Z     162MB used)
Progress update: steps=3515, test inputs generated=2963, failing inputs=0      (2020-11-25T01:11:04.603Z     526MB used)
Progress update: steps=4000, test inputs generated=3356, failing inputs=0      (2020-11-25T01:11:22.356Z     762MB used)
Progress update: steps=4985, test inputs generated=4179, failing inputs=0      (2020-11-25T01:12:04.563Z     321MB used)
Normal method executions: 93184
Exceptional method executions: 96

Average method execution time (normal termination):      0.00741
Average method execution time (exceptional termination): 0.388
Approximate memory usage 321MB
Explorer = ForwardGenerator(steps: 4985, null steps: 806, num_sequences_generated: 4179;
    allSequences: 4179, regresson seqs: 4178, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 1;
    runtimePrimitivesSeen:396)

No error-revealing tests to output.

About to look for failing assertions in 2127 regression sequences.

Regression test output:
Regression test count: 2127
Writing regression JUnit tests...
                                                                                                                                                                                                       Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-16/RegressionTest0.java
Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-16/RegressionTest1.java
Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-16/RegressionTest2.java
Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-16/RegressionTest3.java
Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-16/RegressionTest4.java
Created file /experiment/results/randoop5/time-org.joda.time.tz.FixedDateTimeZone-16/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.toTimeZone()
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.previousTransition(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.nextTransition(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.isFixed()
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.getStandardOffset(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.getOffset(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.getNameKey(long)
  Possibly flaky:  org.joda.time.tz.FixedDateTimeZone.equals(java.lang.Object)
  Possibly flaky:  org.joda.time.DateTimeZone.toString()
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

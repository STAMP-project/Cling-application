Randoop for Java version "4.2.4, branch master, commit be6dbd3, 2020-07-14".

Will try to generate tests for 1 classes.
PUBLIC MEMBERS=13
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=5, test inputs generated=0, failing inputs=0      (2020-11-24T23:29:38.014Z     102MB used)
Progress update: steps=844, test inputs generated=679, failing inputs=16      (2020-11-24T23:30:38.047Z     941MB used)
Progress update: steps=1000, test inputs generated=795, failing inputs=16      (2020-11-24T23:30:48.115Z     786MB used)
Progress update: steps=1495, test inputs generated=1185, failing inputs=22      (2020-11-24T23:31:38.048Z     117MB used)
Progress update: steps=2000, test inputs generated=1578, failing inputs=26      (2020-11-24T23:31:58.470Z     365MB used)
Progress update: steps=2819, test inputs generated=2231, failing inputs=47      (2020-11-24T23:32:38.048Z     495MB used)
Progress update: steps=3000, test inputs generated=2367, failing inputs=47      (2020-11-24T23:32:48.705Z     375MB used)
Progress update: steps=3517, test inputs generated=2765, failing inputs=50      (2020-11-24T23:33:38.049Z     337MB used)
Progress update: steps=4000, test inputs generated=3151, failing inputs=51      (2020-11-24T23:34:06.504Z     485MB used)
Progress update: steps=4533, test inputs generated=3553, failing inputs=53      (2020-11-24T23:34:38.138Z     273MB used)
Progress update: steps=4533, test inputs generated=3554, failing inputs=53      (2020-11-24T23:34:38.248Z     273MB used)
Normal method executions: 2022933
Exceptional method executions: 839

Average method execution time (normal termination):      0.00175
Average method execution time (exceptional termination): 0.0983
Approximate memory usage 273MB
Explorer = ForwardGenerator(steps: 4533, null steps: 979, num_sequences_generated: 3554;
    allSequences: 3554, regresson seqs: 3500, error seqs: 53=53=53, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 1;
    runtimePrimitivesSeen:706)

Error-revealing test output:
Error-revealing test count: 53
Writing error-revealing JUnit tests...
Created file /experiment/results/randoop5/math-org.apache.commons.math.random.EmpiricalDistributionImpl-16/ErrorTest0.java
Created file /experiment/results/randoop5/math-org.apache.commons.math.random.EmpiricalDistributionImpl-16/ErrorTest.java
Wrote error-revealing JUnit tests.

About to look for failing assertions in 1982 regression sequences.

Regression test output:
Regression test count: 1982
Writing regression JUnit tests...
Created file /experiment/results/randoop5/math-org.apache.commons.math.random.EmpiricalDistributionImpl-16/RegressionTest0.java
                                                                                                                                                                                                       Created file /experiment/results/randoop5/math-org.apache.commons.math.random.EmpiricalDistributionImpl-16/RegressionTest1.java
Created file /experiment/results/randoop5/math-org.apache.commons.math.random.EmpiricalDistributionImpl-16/RegressionTest2.java
Created file /experiment/results/randoop5/math-org.apache.commons.math.random.EmpiricalDistributionImpl-16/RegressionTest3.java
Created file /experiment/results/randoop5/math-org.apache.commons.math.random.EmpiricalDistributionImpl-16/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  org.apache.commons.math.random.EmpiricalDistributionImpl.load(java.net.URL)
  Possibly flaky:  org.apache.commons.math.random.EmpiricalDistributionImpl.load(double[])
  Possibly flaky:  org.apache.commons.math.random.EmpiricalDistributionImpl.load(java.io.File)
  Possibly flaky:  org.apache.commons.math.random.EmpiricalDistributionImpl.isLoaded()
  Possibly flaky:  org.apache.commons.math.random.EmpiricalDistributionImpl.getUpperBounds()
  Possibly flaky:  org.apache.commons.math.random.EmpiricalDistributionImpl.getSampleStats()
  Possibly flaky:  org.apache.commons.math.random.EmpiricalDistributionImpl.getNextValue()
  Possibly flaky:  org.apache.commons.math.random.EmpiricalDistributionImpl.getBinStats()
  Possibly flaky:  org.apache.commons.math.random.EmpiricalDistributionImpl.getBinCount()
  Possibly flaky:  java.util.Arrays.toString(double[])
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

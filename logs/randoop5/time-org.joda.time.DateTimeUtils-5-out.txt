Randoop for Java version "4.2.4, branch master, commit be6dbd3, 2020-07-14".

Will try to generate tests for 1 classes.
PUBLIC MEMBERS=19
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2020-11-25T02:24:49.345Z     102MB used)
Progress update: steps=1000, test inputs generated=309, failing inputs=0      (2020-11-25T02:25:06.925Z     610MB used)
Progress update: steps=2000, test inputs generated=553, failing inputs=0      (2020-11-25T02:25:15.867Z     268MB used)
Progress update: steps=3000, test inputs generated=788, failing inputs=0      (2020-11-25T02:25:23.270Z     419MB used)
Progress update: steps=4000, test inputs generated=1025, failing inputs=0      (2020-11-25T02:25:29.792Z     486MB used)
Progress update: steps=5000, test inputs generated=1272, failing inputs=0      (2020-11-25T02:25:36.311Z     506MB used)
Progress update: steps=6000, test inputs generated=1522, failing inputs=0      (2020-11-25T02:25:42.674Z     530MB used)
Progress update: steps=7000, test inputs generated=1747, failing inputs=0      (2020-11-25T02:25:48.602Z     311MB used)
Progress update: steps=7177, test inputs generated=1783, failing inputs=0      (2020-11-25T02:25:49.445Z     490MB used)
Progress update: steps=8000, test inputs generated=1982, failing inputs=0      (2020-11-25T02:25:54.259Z     169MB used)
Progress update: steps=9000, test inputs generated=2217, failing inputs=0      (2020-11-25T02:26:05.834Z     1142MB used)
Progress update: steps=10000, test inputs generated=2442, failing inputs=0      (2020-11-25T02:26:21.683Z     838MB used)
Progress update: steps=11000, test inputs generated=2660, failing inputs=0      (2020-11-25T02:26:33.611Z     493MB used)
Progress update: steps=12000, test inputs generated=2888, failing inputs=0      (2020-11-25T02:26:41.852Z     131MB used)
Progress update: steps=12960, test inputs generated=3104, failing inputs=0      (2020-11-25T02:26:49.445Z     1027MB used)
Progress update: steps=13000, test inputs generated=3112, failing inputs=0      (2020-11-25T02:26:49.600Z     1079MB used)
Progress update: steps=14000, test inputs generated=3323, failing inputs=0      (2020-11-25T02:26:57.190Z     648MB used)
Progress update: steps=15000, test inputs generated=3558, failing inputs=0      (2020-11-25T02:27:06.289Z     340MB used)
Progress update: steps=16000, test inputs generated=3776, failing inputs=0      (2020-11-25T02:27:14.294Z     1271MB used)
Progress update: steps=17000, test inputs generated=4008, failing inputs=0      (2020-11-25T02:27:23.701Z     959MB used)
Progress update: steps=18000, test inputs generated=4228, failing inputs=0      (2020-11-25T02:27:39.058Z     601MB used)
Progress update: steps=18527, test inputs generated=4368, failing inputs=0      (2020-11-25T02:27:49.446Z     1202MB used)
Progress update: steps=19000, test inputs generated=4490, failing inputs=0      (2020-11-25T02:27:59.251Z     418MB used)
Progress update: steps=20000, test inputs generated=4709, failing inputs=0      (2020-11-25T02:28:14.547Z     87MB used)
Progress update: steps=21000, test inputs generated=4934, failing inputs=0      (2020-11-25T02:28:40.782Z     1035MB used)
Progress update: steps=21312, test inputs generated=5008, failing inputs=0      (2020-11-25T02:28:49.447Z     68MB used)
Progress update: steps=22000, test inputs generated=5174, failing inputs=0      (2020-11-25T02:29:00.121Z     782MB used)
Progress update: steps=23000, test inputs generated=5385, failing inputs=0      (2020-11-25T02:29:12.382Z     395MB used)
Progress update: steps=24000, test inputs generated=5611, failing inputs=0      (2020-11-25T02:29:27.614Z     91MB used)
Progress update: steps=25000, test inputs generated=5870, failing inputs=0      (2020-11-25T02:29:45.151Z     1183MB used)
Progress update: steps=25181, test inputs generated=5927, failing inputs=0      (2020-11-25T02:29:49.362Z     169MB used)
Normal method executions: 198760
Exceptional method executions: 3

Average method execution time (normal termination):      0.00662
Average method execution time (exceptional termination): 4.01
Approximate memory usage 169MB
Explorer = ForwardGenerator(steps: 25181, null steps: 19254, num_sequences_generated: 5927;
    allSequences: 5927, regresson seqs: 5926, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 1;
    runtimePrimitivesSeen:40)

No error-revealing tests to output.
                                                                                                                                                                                                       
About to look for failing assertions in 2910 regression sequences.

Regression test output:
Regression test count: 2910
Writing regression JUnit tests...
Created file /experiment/results/randoop5/time-org.joda.time.DateTimeUtils-5/RegressionTest0.java
Created file /experiment/results/randoop5/time-org.joda.time.DateTimeUtils-5/RegressionTest1.java
Created file /experiment/results/randoop5/time-org.joda.time.DateTimeUtils-5/RegressionTest2.java
Created file /experiment/results/randoop5/time-org.joda.time.DateTimeUtils-5/RegressionTest3.java
Created file /experiment/results/randoop5/time-org.joda.time.DateTimeUtils-5/RegressionTest4.java
Created file /experiment/results/randoop5/time-org.joda.time.DateTimeUtils-5/RegressionTest5.java
Created file /experiment/results/randoop5/time-org.joda.time.DateTimeUtils-5/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  org.joda.time.DateTimeUtils.getInstantMillis(org.joda.time.ReadableInstant)
  Possibly flaky:  org.joda.time.DateTimeUtils.currentTimeMillis()
  Possibly flaky:  java.lang.String.valueOf(long)
  Possibly flaky:  java.lang.Long.valueOf(long)
  Possibly flaky:  java.lang.Long.toString(long)
  Possibly flaky:  java.lang.Long.toOctalString(long)
  Possibly flaky:  java.lang.Long.toHexString(long)
  Possibly flaky:  java.lang.Long.toBinaryString(long)
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

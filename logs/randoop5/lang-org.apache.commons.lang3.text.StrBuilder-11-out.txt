Randoop for Java version "4.2.4, branch master, commit be6dbd3, 2020-07-14".

Will try to generate tests for 1 classes.
PUBLIC MEMBERS=135
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=4, test inputs generated=0, failing inputs=0      (2020-11-25T00:44:08.950Z     112MB used)
Progress update: steps=707, test inputs generated=673, failing inputs=0      (2020-11-25T00:45:09.076Z     130MB used)
Progress update: steps=1000, test inputs generated=952, failing inputs=0      (2020-11-25T00:45:40.394Z     1040MB used)
Progress update: steps=1357, test inputs generated=1290, failing inputs=0      (2020-11-25T00:46:09.076Z     1221MB used)
Progress update: steps=2000, test inputs generated=1885, failing inputs=0      (2020-11-25T00:46:52.335Z     573MB used)
Progress update: steps=2223, test inputs generated=2089, failing inputs=0      (2020-11-25T00:47:09.077Z     810MB used)
Progress update: steps=2854, test inputs generated=2664, failing inputs=0      (2020-11-25T00:48:09.078Z     223MB used)
Progress update: steps=3000, test inputs generated=2796, failing inputs=0      (2020-11-25T00:48:16.591Z     1233MB used)
Progress update: steps=3823, test inputs generated=3540, failing inputs=0      (2020-11-25T00:49:08.953Z     1246MB used)
Normal method executions: 2506215
Exceptional method executions: 569

Average method execution time (normal termination):      0.000538
Average method execution time (exceptional termination): 0.0882
Approximate memory usage 1246MB
Explorer = ForwardGenerator(steps: 3823, null steps: 283, num_sequences_generated: 3540;
    allSequences: 3540, regresson seqs: 3539, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 1;
    runtimePrimitivesSeen:162)

No error-revealing tests to output.

About to look for failing assertions in 1912 regression sequences.

Regression test output:
Regression test count: 1912
Writing regression JUnit tests...
                                                                                                                                                                                                       Created file /experiment/results/randoop5/lang-org.apache.commons.lang3.text.StrBuilder-11/RegressionTest0.java
Created file /experiment/results/randoop5/lang-org.apache.commons.lang3.text.StrBuilder-11/RegressionTest1.java
Created file /experiment/results/randoop5/lang-org.apache.commons.lang3.text.StrBuilder-11/RegressionTest2.java
Created file /experiment/results/randoop5/lang-org.apache.commons.lang3.text.StrBuilder-11/RegressionTest3.java
Created file /experiment/results/randoop5/lang-org.apache.commons.lang3.text.StrBuilder-11/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  org.apache.commons.lang3.text.StrBuilder.toCharArray()
  Possibly flaky:  org.apache.commons.lang3.text.StrBuilder.replaceFirst(org.apache.commons.lang3.text.StrMatcher,java.lang.String)
  Possibly flaky:  org.apache.commons.lang3.text.StrBuilder.minimizeCapacity()
  Possibly flaky:  org.apache.commons.lang3.text.StrBuilder.equalsIgnoreCase(org.apache.commons.lang3.text.StrBuilder)
  Possibly flaky:  org.apache.commons.lang3.text.StrBuilder.deleteCharAt(int)
  Possibly flaky:  org.apache.commons.lang3.text.StrBuilder.asWriter()
  Possibly flaky:  org.apache.commons.lang3.text.StrBuilder.asTokenizer()
  Possibly flaky:  org.apache.commons.lang3.text.StrBuilder.asReader()
  Possibly flaky:  org.apache.commons.lang3.text.StrBuilder.appendln(boolean)
  Possibly flaky:  org.apache.commons.lang3.text.StrBuilder.appendNewLine()
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0
eterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  org.apache.commons.lang3.text.StrBuilder.toCharArray(int,int)
  Possibly flaky:  org.apache.commons.lang3.text.StrBuilder.toCharArray()
  Possibly flaky:  org.apache.commons.lang3.text.StrBuilder.rightString(int)
  Possibly flaky:  org.apache.commons.lang3.text.StrBuilder.replaceFirst(org.apache.commons.lang3.text.StrMatcher,java.lang.String)
  Possibly flaky:  org.apache.commons.lang3.text.StrBuilder.minimizeCapacity()
  Possibly flaky:  org.apache.commons.lang3.text.StrBuilder.lastIndexOf(char)
  Possibly flaky:  org.apache.commons.lang3.text.StrBuilder.lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)
  Possibly flaky:  org.apache.commons.lang3.text.StrBuilder.lastIndexOf(org.apache.commons.lang3.text.StrMatcher)
  Possibly flaky:  org.apache.commons.lang3.text.StrBuilder.insert(int,char[])
  Possibly flaky:  org.apache.commons.lang3.text.StrBuilder.insert(int,char[],int,int)
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

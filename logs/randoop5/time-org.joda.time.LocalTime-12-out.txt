Randoop for Java version "4.2.4, branch master, commit be6dbd3, 2020-07-14".

Will try to generate tests for 1 classes.
PUBLIC MEMBERS=122
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2020-11-25T01:53:43.559Z     112MB used)
Progress update: steps=849, test inputs generated=813, failing inputs=0      (2020-11-25T01:54:43.597Z     414MB used)
Progress update: steps=1000, test inputs generated=954, failing inputs=0      (2020-11-25T01:54:55.706Z     456MB used)
Progress update: steps=1432, test inputs generated=1365, failing inputs=0      (2020-11-25T01:55:43.598Z     1051MB used)
Progress update: steps=2000, test inputs generated=1888, failing inputs=0      (2020-11-25T01:56:21.702Z     625MB used)
Progress update: steps=2397, test inputs generated=2257, failing inputs=0      (2020-11-25T01:56:43.598Z     1151MB used)
Progress update: steps=3000, test inputs generated=2814, failing inputs=0      (2020-11-25T01:57:13.574Z     216MB used)
Progress update: steps=3440, test inputs generated=3227, failing inputs=0      (2020-11-25T01:57:43.598Z     1002MB used)
Progress update: steps=3886, test inputs generated=3640, failing inputs=0      (2020-11-25T01:58:43.571Z     974MB used)
Normal method executions: 6703613
Exceptional method executions: 495

Average method execution time (normal termination):      0.000484
Average method execution time (exceptional termination): 0.173
Approximate memory usage 974MB
Explorer = ForwardGenerator(steps: 3886, null steps: 246, num_sequences_generated: 3640;
    allSequences: 3640, regresson seqs: 3638, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 2;
    runtimePrimitivesSeen:896)

No error-revealing tests to output.
                                                                                                                                                                                                       
About to look for failing assertions in 1916 regression sequences.

Regression test output:
Regression test count: 1916
Writing regression JUnit tests...
Created file /experiment/results/randoop5/time-org.joda.time.LocalTime-12/RegressionTest0.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalTime-12/RegressionTest1.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalTime-12/RegressionTest2.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalTime-12/RegressionTest3.java
Created file /experiment/results/randoop5/time-org.joda.time.LocalTime-12/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  org.joda.time.base.AbstractPartial.toDateTime(org.joda.time.ReadableInstant)
  Possibly flaky:  java.lang.String.valueOf(long)
  Possibly flaky:  java.lang.Long.valueOf(long)
  Possibly flaky:  java.lang.Long.toString(long)
  Possibly flaky:  java.lang.Long.toOctalString(long)
  Possibly flaky:  java.lang.Long.toHexString(long)
  Possibly flaky:  java.lang.Long.toBinaryString(long)
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.toString()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.toInterval()
  Possibly flaky:  org.joda.time.field.AbstractReadableInstantFieldProperty.remainder()
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

Randoop for Java version "4.3.0, local changes, branch master, commit 7af20ae, 2022-01-31".
Cannot instantiate non-accessible class org.mockito.asm.MethodWriter specified via --testclass or --classlist; will use its static methods.

Will try to generate tests for 8 classes.
PUBLIC MEMBERS=92
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2022-02-22T16:05:38.884Z     226M used)
Progress update: steps=1000, test inputs generated=722, failing inputs=0      (2022-02-22T16:05:58.003Z     398M used)Long execution time 10 sec for
org.mockito.asm.ByteVector byteVector1 = new org.mockito.asm.ByteVector(1953001316);


Progress update: steps=2000, test inputs generated=1550, failing inputs=0      (2022-02-22T16:06:22.654Z     3.11G used)
Progress update: steps=3000, test inputs generated=2363, failing inputs=0      (2022-02-22T16:06:35.216Z     2.05G used)
Progress update: steps=3342, test inputs generated=2619, failing inputs=0      (2022-02-22T16:06:38.899Z     2.05G used)
Progress update: steps=4000, test inputs generated=3128, failing inputs=0      (2022-02-22T16:06:47.527Z     2.12G used)
Progress update: steps=5000, test inputs generated=3900, failing inputs=0      (2022-02-22T16:07:00.217Z     2.29G used)Long execution time 15 sec for
org.mockito.asm.ByteVector byteVector1 = new org.mockito.asm.ByteVector(20);
org.mockito.asm.ClassWriter classWriter3 = new org.mockito.asm.ClassWriter((int)(byte)10);
org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter3.visitAnnotation("hi!", false);
org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter3.visitField(5, "", "", "", (java.lang.Object)'a');
int int16 = classWriter3.newField("L1588695094", "hi!", "hi!");
byte[] byteArray17 = classWriter3.toByteArray();
org.mockito.asm.ByteVector byteVector20 = byteVector1.putByteArray(byteArray17, 8, 1953001316);


Progress update: steps=6000, test inputs generated=4677, failing inputs=0      (2022-02-22T16:07:34.163Z     2.26G used)
Progress update: steps=6181, test inputs generated=4821, failing inputs=0      (2022-02-22T16:07:38.900Z     3.02G used)
Progress update: steps=7000, test inputs generated=5470, failing inputs=0      (2022-02-22T16:07:49.732Z     2.95G used)
Progress update: steps=8000, test inputs generated=6248, failing inputs=0      (2022-02-22T16:08:17.185Z     3.08G used)
Progress update: steps=8837, test inputs generated=6892, failing inputs=0      (2022-02-22T16:08:38.900Z     2.88G used)
Progress update: steps=9000, test inputs generated=7014, failing inputs=0      (2022-02-22T16:08:41.567Z     3.57G used)
Progress update: steps=10000, test inputs generated=7787, failing inputs=0      (2022-02-22T16:09:03.255Z     2.86G used)
Progress update: steps=11000, test inputs generated=8554, failing inputs=0      (2022-02-22T16:09:31.139Z     3.18G used)
Progress update: steps=11264, test inputs generated=8763, failing inputs=0      (2022-02-22T16:09:38.901Z     3.28G used)
Progress update: steps=12000, test inputs generated=9346, failing inputs=0      (2022-02-22T16:09:59.118Z     3.41G used)
Progress update: steps=13000, test inputs generated=10124, failing inputs=0      (2022-02-22T16:10:21.581Z     3.45G used)
Progress update: steps=13539, test inputs generated=10540, failing inputs=0      (2022-02-22T16:10:38.901Z     3.62G used)
Progress update: steps=14000, test inputs generated=10893, failing inputs=0      (2022-02-22T16:10:47.862Z     3.49G used)
Progress update: steps=15000, test inputs generated=11660, failing inputs=0      (2022-02-22T16:11:15.529Z     3.76G used)
Progress update: steps=15509, test inputs generated=12055, failing inputs=0      (2022-02-22T16:11:39.070Z     3.61G used)
Progress update: steps=16000, test inputs generated=12437, failing inputs=0      (2022-02-22T16:11:57.398Z     3.75G used)
Progress update: steps=17000, test inputs generated=13196, failing inputs=0      (2022-02-22T16:12:35.643Z     3.73G used)
Progress update: steps=17091, test inputs generated=13263, failing inputs=0      (2022-02-22T16:12:39.079Z     3.77G used)
Progress update: steps=17899, test inputs generated=13896, failing inputs=0      (2022-02-22T16:13:39.210Z     3.75G used)
Progress update: steps=18000, test inputs generated=13970, failing inputs=0      (2022-02-22T16:13:46.125Z     3.78G used)
Progress update: steps=18492, test inputs generated=14348, failing inputs=0      (2022-02-22T16:14:39.639Z     3.77G used)
Problem with sequence:
char char0 = '4'; // [NormalExecution 4 [class java.lang.Character]]
org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int)'4'); // [NormalExecution org.mockito.asm.ClassWriter@5d68ba36 [class org.mockito.asm.ClassWriter]]
java.lang.String str2 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str3 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str4 = ""; // [NormalExecution  [class java.lang.String]]
classWriter1.visitOuterClass("", "", ""); // [NormalExecution null]
int int6 = 0; // [NormalExecution 0 [class java.lang.Integer]]
int int7 = 8; // [NormalExecution 8 [class java.lang.Integer]]
java.lang.String str8 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str9 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str10 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
java.lang.String[] strArray11 = new java.lang.String[] {  }; // [NormalExecution [] [class [Ljava.lang.String;]]
classWriter1.visit(0, 8, "", "", "hi!", strArray11); // [NormalExecution null]
int int13 = 2; // [NormalExecution 2 [class java.lang.Integer]]
char char14 = '4'; // [NormalExecution 4 [class java.lang.Character]]
java.lang.String str15 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
java.lang.String str16 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
java.lang.String str17 = ""; // [NormalExecution  [class java.lang.String]]
char char18 = '4'; // [NormalExecution 4 [class java.lang.Character]]
org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int)'4'); // [NormalExecution org.mockito.asm.ClassWriter@9018d7c [class org.mockito.asm.ClassWriter]]
java.lang.String str20 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str21 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str22 = ""; // [NormalExecution  [class java.lang.String]]
classWriter19.visitOuterClass("", "", ""); // [NormalExecution null]
int int24 = 0; // [NormalExecution 0 [class java.lang.Integer]]
int int25 = 8; // [NormalExecution 8 [class java.lang.Integer]]
java.lang.String str26 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str27 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str28 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
java.lang.String[] strArray29 = new java.lang.String[] {  }; // [NormalExecution [] [class [Ljava.lang.String;]]
classWriter19.visit(0, 8, "", "", "hi!", strArray29); // [NormalExecution null]
classWriter1.visit(2, (int)'4', "hi!", "hi!", "", strArray29); // [NormalExecution null]
char char32 = '#'; // [NormalExecution # [class java.lang.Character]]
java.lang.String str33 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str34 = "L2022571275"; // [NormalExecution L2022571275 [class java.lang.String]]
java.lang.String str35 = "L2022571275"; // [NormalExecution L2022571275 [class java.lang.String]]
byte byte36 = (byte)10; // [NormalExecution 10 [class java.lang.Byte]]
org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int)(byte)10); // [NormalExecution org.mockito.asm.ClassWriter@f9c6511 [class org.mockito.asm.ClassWriter]]
java.lang.String str38 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
boolean boolean39 = false; // [NormalExecution false [class java.lang.Boolean]]
org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter37.visitAnnotation("hi!", false); // [NormalExecution org.mockito.asm.AnnotationWriter@28e4ae43 [class org.mockito.asm.AnnotationWriter]]
int int41 = 5; // [NormalExecution 5 [class java.lang.Integer]]
java.lang.String str42 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str43 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str44 = ""; // [NormalExecution  [class java.lang.String]]
char char45 = 'a'; // [NormalExecution a [class java.lang.Character]]
org.mockito.asm.FieldVisitor fieldVisitor46 = classWriter37.visitField(5, "", "", "", (java.lang.Object)'a'); // [NormalExecution org.mockito.asm.FieldWriter@2b72240f [class org.mockito.asm.FieldWriter]]
short short47 = (short)-1; // [NormalExecution -1 [class java.lang.Short]]
byte byte48 = (byte)0; // [NormalExecution 0 [class java.lang.Byte]]
java.lang.String str49 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str50 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
java.lang.String str51 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str52 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str53 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str54 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
java.lang.String str55 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String[] strArray56 = new java.lang.String[] { "", "", "hi!", "" }; // [NormalExecution [ [class java.lang.String],  [class java.lang.String], hi! [class java.lang.String],  [class java.lang.String]] [class [Ljava.lang.String;]]
classWriter37.visit((int)(short)-1, (int)(byte)0, "", "hi!", "", strArray56); // [NormalExecution null]
org.mockito.asm.MethodVisitor methodVisitor58 = classWriter1.visitMethod((int)'#', "", "L2022571275", "L2022571275", strArray56); // [NormalExecution org.mockito.asm.MethodWriter@4551c064 [class org.mockito.asm.MethodWriter]]
java.lang.String str59 = "L2022571275"; // [NormalExecution L2022571275 [class java.lang.String]]
boolean boolean60 = false; // [NormalExecution false [class java.lang.Boolean]]
org.mockito.asm.AnnotationVisitor annotationVisitor61 = methodVisitor58.visitAnnotation("L2022571275", false); // [NormalExecution org.mockito.asm.AnnotationWriter@21023569 [class org.mockito.asm.AnnotationWriter]]
org.mockito.asm.Label label62 = new org.mockito.asm.Label(); // [NormalExecution L748229052 [class org.mockito.asm.Label]]
java.lang.String str63 = label62.toString(); // [NormalExecution L748229052 [class java.lang.String]]
methodVisitor58.visitLabel(label62); // [NormalExecution null]
org.mockito.asm.ByteVector byteVector65 = new org.mockito.asm.ByteVector(); // [NormalExecution org.mockito.asm.ByteVector@16711a7c [class org.mockito.asm.ByteVector]]
java.lang.String str66 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
org.mockito.asm.ByteVector byteVector67 = byteVector65.putUTF8("hi!"); // [NormalExecution org.mockito.asm.ByteVector@16711a7c [class org.mockito.asm.ByteVector]]
char char68 = 'a'; // [NormalExecution a [class java.lang.Character]]
org.mockito.asm.ByteVector byteVector69 = byteVector67.putInt((int)'a'); // [NormalExecution org.mockito.asm.ByteVector@16711a7c [class org.mockito.asm.ByteVector]]
int int70 = 100; // [NormalExecution 100 [class java.lang.Integer]]
org.mockito.asm.ByteVector byteVector71 = byteVector69.putLong((long)100); // [NormalExecution org.mockito.asm.ByteVector@16711a7c [class org.mockito.asm.ByteVector]]
int int72 = 10; // [NormalExecution 10 [class java.lang.Integer]]
org.mockito.asm.ByteVector byteVector73 = byteVector71.putShort(10); // [NormalExecution org.mockito.asm.ByteVector@16711a7c [class org.mockito.asm.ByteVector]]
java.lang.String str74 = "L879209152"; // [NormalExecution L879209152 [class java.lang.String]]
org.mockito.asm.ByteVector byteVector75 = byteVector71.putUTF8("L879209152"); // [NormalExecution org.mockito.asm.ByteVector@16711a7c [class org.mockito.asm.ByteVector]]
label62.info = byteVector71; // [NormalExecution null]
int int77 = label62.getOffset(); // [NormalExecution 0 [class java.lang.Integer]]
char char78 = '4'; // [NormalExecution 4 [class java.lang.Character]]
org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter((int)'4'); // [NormalExecution org.mockito.asm.ClassWriter@6cc83e45 [class org.mockito.asm.ClassWriter]]
java.lang.String str80 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str81 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str82 = ""; // [NormalExecution  [class java.lang.String]]
classWriter79.visitOuterClass("", "", ""); // [NormalExecution null]
byte[] byteArray84 = classWriter79.toByteArray(); // [NormalExecution [-54, -2, -70, -66, 0, 0, 0, 0, 0, 5, 1, 0, 0, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 4, 0, 2, 0, 3] [class [B]]
org.mockito.asm.ClassReader classReader85 = new org.mockito.asm.ClassReader(byteArray84); // [NormalExecution org.mockito.asm.ClassReader@79f2675b [class org.mockito.asm.ClassReader]]
short short86 = (short)1; // [NormalExecution 1 [class java.lang.Short]]
int int87 = classReader85.readUnsignedShort((int)(short)1); // [NormalExecution 65210 [class java.lang.Integer]]
int int88 = classReader85.header; // [NormalExecution 39 [class java.lang.Integer]]
byte byte89 = (byte)10; // [NormalExecution 10 [class java.lang.Byte]]
short short90 = classReader85.readShort((int)(byte)10); // [NormalExecution 256 [class java.lang.Short]]
byte[] byteArray91 = classReader85.b; // [NormalExecution [-54, -2, -70, -66, 0, 0, 0, 0, 0, 5, 1, 0, 0, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 4, 0, 2, 0, 3] [class [B]]
int int92 = 1; // [NormalExecution 1 [class java.lang.Integer]]
short short93 = classReader85.readShort(1); // [NormalExecution -326 [class java.lang.Short]]
int int94 = classReader85.header; // [NormalExecution 39 [class java.lang.Integer]]
int int95 = classReader85.header; // [NormalExecution 39 [class java.lang.Integer]]
label62.info = int95; // [NormalExecution null]
<randoop.contract.IsNotNull@1f [strArray11]>
<randoop.contract.IsNotNull@1f [strArray29]>
<randoop.contract.IsNotNull@1f [annotationVisitor40]>
<randoop.contract.IsNotNull@1f [fieldVisitor46]>
<randoop.contract.IsNotNull@1f [strArray56]>
<randoop.contract.IsNotNull@1f [methodVisitor58]>
<randoop.contract.IsNotNull@1f [annotationVisitor61]>
<randoop.PrimValue, value=L748229052 [str63]>
<randoop.contract.IsNotNull@1f [byteVector67]>
<randoop.contract.IsNotNull@1f [byteVector69]>
<randoop.contract.IsNotNull@1f [byteVector71]>
<randoop.contract.IsNotNull@1f [byteVector73]>
<randoop.contract.IsNotNull@1f [byteVector75]>
<randoop.PrimValue, value=0 [int77]>
<randoop.contract.IsNotNull@1f [byteArray84]>
<<ObserverEqValue java.util.Arrays.toString : (byte[]) -> java.lang.String, value = '[-54, -2, -70, -66, 0, 0, 0, 0, 0, 5, 1, 0, 0, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 4, 0, 2, 0, 3] [class java.lang.String]' [byteArray84]>
<randoop.PrimValue, value=65210 [int87]>
<randoop.PrimValue, value=39 [int88]>
<randoop.PrimValue, value=256 [short90]>
<randoop.contract.IsNotNull@1f [byteArray91]>
<<ObserverEqValue java.util.Arrays.toString : (byte[]) -> java.lang.String, value = '[-54, -2, -70, -66, 0, 0, 0, 0, 0, 5, 1, 0, 0, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 4, 0, 2, 0, 3] [class java.lang.String]' [byteArray91]>
<randoop.PrimValue, value=-326 [short93]>
<randoop.PrimValue, value=39 [int94]>
<randoop.PrimValue, value=39 [int95]>
java.lang.OutOfMemoryError: GC overhead limit exceeded

createAndClassifySequences threw an exception
java.lang.OutOfMemoryError: GC overhead limit exceeded


Throwable thrown while handling command: java.lang.OutOfMemoryError: GC overhead limit exceeded
java.lang.OutOfMemoryError: GC overhead limit exceeded

Randoop failed.
Last sequence under execution: 
org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int)'4');
classWriter1.visitOuterClass("", "", "");
java.lang.String[] strArray11 = new java.lang.String[] {  };
classWriter1.visit(0, 8, "", "", "hi!", strArray11);
org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int)'4');
classWriter19.visitOuterClass("", "", "");
java.lang.String[] strArray29 = new java.lang.String[] {  };
classWriter19.visit(0, 8, "", "", "hi!", strArray29);
classWriter1.visit(2, (int)'4', "hi!", "hi!", "", strArray29);
org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int)(byte)10);
org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter37.visitAnnotation("hi!", false);
org.mockito.asm.FieldVisitor fieldVisitor46 = classWriter37.visitField(5, "", "", "", (java.lang.Object)'a');
java.lang.String[] strArray56 = new java.lang.String[] { "", "", "hi!", "" };
classWriter37.visit((int)(short)-1, (int)(byte)0, "", "hi!", "", strArray56);
org.mockito.asm.MethodVisitor methodVisitor58 = classWriter1.visitMethod((int)'#', "", "L2022571275", "L2022571275", strArray56);
org.mockito.asm.AnnotationVisitor annotationVisitor61 = methodVisitor58.visitAnnotation("L2022571275", false);
org.mockito.asm.Label label62 = new org.mockito.asm.Label();
java.lang.String str63 = label62.toString();
methodVisitor58.visitLabel(label62);
org.mockito.asm.ByteVector byteVector65 = new org.mockito.asm.ByteVector();
org.mockito.asm.ByteVector byteVector67 = byteVector65.putUTF8("hi!");
org.mockito.asm.ByteVector byteVector69 = byteVector67.putInt((int)'a');
org.mockito.asm.ByteVector byteVector71 = byteVector69.putLong((long)100);
org.mockito.asm.ByteVector byteVector73 = byteVector71.putShort(10);
org.mockito.asm.ByteVector byteVector75 = byteVector71.putUTF8("L879209152");
label62.info = byteVector71;
int int77 = label62.getOffset();
org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter((int)'4');
classWriter79.visitOuterClass("", "", "");
byte[] byteArray84 = classWriter79.toByteArray();
org.mockito.asm.ClassReader classReader85 = new org.mockito.asm.ClassReader(byteArray84);
int int87 = classReader85.readUnsignedShort((int)(short)1);
int int88 = classReader85.header;
short short90 = classReader85.readShort((int)(byte)10);
byte[] byteArray91 = classReader85.b;
short short93 = classReader85.readShort(1);
int int94 = classReader85.header;
int int95 = classReader85.header;
label62.info = int95;

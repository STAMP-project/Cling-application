Randoop for Java version "4.3.0, local changes, branch master, commit 7af20ae, 2022-01-31".

Will try to generate tests for 8 classes.
PUBLIC MEMBERS=222
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2022-02-22T18:45:41.712Z     215M used)
Progress update: steps=1000, test inputs generated=935, failing inputs=36      (2022-02-22T18:46:02.995Z     1.03G used)
Progress update: steps=2000, test inputs generated=1837, failing inputs=75      (2022-02-22T18:46:20.063Z     507M used)
Progress update: steps=2828, test inputs generated=2562, failing inputs=96      (2022-02-22T18:46:41.729Z     664M used)
Progress update: steps=3000, test inputs generated=2715, failing inputs=98      (2022-02-22T18:46:44.973Z     875M used)
Progress update: steps=4000, test inputs generated=3557, failing inputs=125      (2022-02-22T18:47:04.307Z     1.00G used)Long execution time 51 sec for
org.apache.commons.math.linear.BigMatrix bigMatrix1 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int)(short)25884);


Progress update: steps=4396, test inputs generated=3888, failing inputs=144      (2022-02-22T18:48:02.087Z     3.05G used)
Progress update: steps=4418, test inputs generated=3909, failing inputs=145      (2022-02-22T18:49:15.644Z     2.75G used)Long execution time 73 sec for
java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal5 = bigDecimal3.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray6 = new java.math.BigDecimal[] { bigDecimal1, bigDecimal5 };
org.apache.commons.math.linear.BigMatrix bigMatrix7 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray6);
java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal13 = bigDecimal11.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray14 = new java.math.BigDecimal[] { bigDecimal9, bigDecimal13 };
org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray14);
java.math.BigDecimal[] bigDecimalArray16 = bigMatrix7.preMultiply(bigDecimalArray14);
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray16);
java.math.BigDecimal bigDecimal18 = bigMatrixImpl17.getDeterminant();
java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal24 = bigDecimal22.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal20, bigDecimal24 };
org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray25);
java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal32 = bigDecimal30.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray33 = new java.math.BigDecimal[] { bigDecimal28, bigDecimal32 };
org.apache.commons.math.linear.BigMatrix bigMatrix34 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray33);
java.math.BigDecimal[] bigDecimalArray35 = bigMatrix26.preMultiply(bigDecimalArray33);
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray35);
java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal((long)(-1));
short short39 = bigDecimal38.shortValueExact();
java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal43 = bigDecimal41.movePointLeft((int)(short)1);
boolean boolean44 = bigDecimal38.equals((java.lang.Object)bigDecimal41);
org.apache.commons.math.linear.BigMatrix bigMatrix45 = bigMatrixImpl36.scalarAdd(bigDecimal38);
java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal((long)(-1));
java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal51 = bigDecimal49.movePointLeft((int)(short)1);
double double52 = bigDecimal51.doubleValue();
java.math.BigDecimal bigDecimal54 = bigDecimal51.pow((int)(byte)0);
java.math.BigDecimal bigDecimal55 = bigDecimal47.add(bigDecimal54);
org.apache.commons.math.linear.BigMatrix bigMatrix56 = bigMatrixImpl36.scalarMultiply(bigDecimal55);
org.apache.commons.math.linear.BigMatrix bigMatrix57 = bigMatrixImpl17.scalarAdd(bigDecimal55);
bigMatrixImpl17.setScale(0);
java.math.BigDecimal bigDecimal61 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal63 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal65 = bigDecimal63.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray66 = new java.math.BigDecimal[] { bigDecimal61, bigDecimal65 };
org.apache.commons.math.linear.BigMatrix bigMatrix67 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray66);
java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal71 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal73 = bigDecimal71.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray74 = new java.math.BigDecimal[] { bigDecimal69, bigDecimal73 };
org.apache.commons.math.linear.BigMatrix bigMatrix75 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray74);
java.math.BigDecimal[] bigDecimalArray76 = bigMatrix67.preMultiply(bigDecimalArray74);
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl77 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray76);
java.math.BigDecimal bigDecimal79 = new java.math.BigDecimal((long)(-1));
short short80 = bigDecimal79.shortValueExact();
java.math.BigDecimal bigDecimal82 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal84 = bigDecimal82.movePointLeft((int)(short)1);
boolean boolean85 = bigDecimal79.equals((java.lang.Object)bigDecimal82);
org.apache.commons.math.linear.BigMatrix bigMatrix86 = bigMatrixImpl77.scalarAdd(bigDecimal79);
org.apache.commons.math.linear.BigMatrix bigMatrix87 = bigMatrixImpl77.transpose();
java.lang.String str88 = bigMatrixImpl77.toString();
org.apache.commons.math.linear.BigMatrix bigMatrix89 = bigMatrixImpl17.solve((org.apache.commons.math.linear.BigMatrix)bigMatrixImpl77);
org.apache.commons.math.linear.BigMatrix bigMatrix90 = bigMatrixImpl17.inverse();
java.math.BigDecimal bigDecimal91 = bigMatrixImpl17.getNorm();


Progress update: steps=5000, test inputs generated=4400, failing inputs=164      (2022-02-22T18:50:08.973Z     2.98G used)
Progress update: steps=5074, test inputs generated=4461, failing inputs=165      (2022-02-22T18:50:16.222Z     2.76G used)
Progress update: steps=5220, test inputs generated=4590, failing inputs=170      (2022-02-22T18:52:10.562Z     2.75G used)Long execution time 97 sec for
java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal5 = bigDecimal3.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray6 = new java.math.BigDecimal[] { bigDecimal1, bigDecimal5 };
org.apache.commons.math.linear.BigMatrix bigMatrix7 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray6);
java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal13 = bigDecimal11.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray14 = new java.math.BigDecimal[] { bigDecimal9, bigDecimal13 };
org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray14);
java.math.BigDecimal[] bigDecimalArray16 = bigMatrix7.preMultiply(bigDecimalArray14);
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray16);
java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal((long)(-1));
short short20 = bigDecimal19.shortValueExact();
java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal24 = bigDecimal22.movePointLeft((int)(short)1);
boolean boolean25 = bigDecimal19.equals((java.lang.Object)bigDecimal22);
org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl17.scalarAdd(bigDecimal19);
java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal32 = bigDecimal30.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray33 = new java.math.BigDecimal[] { bigDecimal28, bigDecimal32 };
org.apache.commons.math.linear.BigMatrix bigMatrix34 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray33);
java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal40 = bigDecimal38.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray41 = new java.math.BigDecimal[] { bigDecimal36, bigDecimal40 };
org.apache.commons.math.linear.BigMatrix bigMatrix42 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray41);
java.math.BigDecimal[] bigDecimalArray43 = bigMatrix34.preMultiply(bigDecimalArray41);
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray43);
java.math.BigDecimal[] bigDecimalArray45 = bigMatrix26.preMultiply(bigDecimalArray43);
org.apache.commons.math.linear.BigMatrix bigMatrix46 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray43);
java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal50 = bigDecimal48.movePointLeft((int)(short)1);
double double51 = bigDecimal50.doubleValue();
java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal((long)(-1));
java.math.BigDecimal bigDecimal54 = bigDecimal50.min(bigDecimal53);
java.math.BigDecimal bigDecimal55 = bigDecimal54.plus();
org.apache.commons.math.linear.BigMatrix bigMatrix56 = bigMatrix46.scalarMultiply(bigDecimal54);
java.math.BigDecimal bigDecimal58 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal62 = bigDecimal60.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray63 = new java.math.BigDecimal[] { bigDecimal58, bigDecimal62 };
org.apache.commons.math.linear.BigMatrix bigMatrix64 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray63);
java.math.BigDecimal bigDecimal66 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal68 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal70 = bigDecimal68.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray71 = new java.math.BigDecimal[] { bigDecimal66, bigDecimal70 };
org.apache.commons.math.linear.BigMatrix bigMatrix72 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray71);
java.math.BigDecimal[] bigDecimalArray73 = bigMatrix64.preMultiply(bigDecimalArray71);
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl74 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray73);
java.math.BigDecimal bigDecimal75 = bigMatrixImpl74.getDeterminant();
org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrixImpl74.inverse();
int int77 = bigMatrixImpl74.getRoundingMode();
org.apache.commons.math.linear.BigMatrix bigMatrix78 = bigMatrix46.subtract((org.apache.commons.math.linear.BigMatrix)bigMatrixImpl74);
int int79 = bigMatrixImpl74.getRoundingMode();
double[] doubleArray86 = new double[] { (short)-1, 0, (-1), 1.0d, 1.0f, 0 };
org.apache.commons.math.linear.RealMatrix realMatrix87 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray86);
org.apache.commons.math.linear.RealMatrix realMatrix88 = realMatrix87.copy();
double[] doubleArray95 = new double[] { 100, (short)10, 1.0f, (byte)10, (byte)-1, 100L };
org.apache.commons.math.linear.RealMatrix realMatrix96 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray95);
double[] doubleArray97 = realMatrix88.operate(doubleArray95);
org.apache.commons.math.linear.RealMatrix realMatrix98 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray95);
java.math.BigDecimal[] bigDecimalArray99 = bigMatrixImpl74.operate(doubleArray95);


Progress update: steps=6000, test inputs generated=5246, failing inputs=199      (2022-02-22T18:52:54.296Z     2.77G used)Long execution time 81 sec for
org.apache.commons.math.linear.BigMatrix bigMatrix1 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int)(short)25884);
java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal7 = bigDecimal5.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray8 = new java.math.BigDecimal[] { bigDecimal3, bigDecimal7 };
org.apache.commons.math.linear.BigMatrix bigMatrix9 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray8);
java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal15 = bigDecimal13.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray16 = new java.math.BigDecimal[] { bigDecimal11, bigDecimal15 };
org.apache.commons.math.linear.BigMatrix bigMatrix17 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray16);
java.math.BigDecimal[] bigDecimalArray18 = bigMatrix9.preMultiply(bigDecimalArray16);
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray18);
java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal((long)(-1));
short short22 = bigDecimal21.shortValueExact();
java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal26 = bigDecimal24.movePointLeft((int)(short)1);
boolean boolean27 = bigDecimal21.equals((java.lang.Object)bigDecimal24);
org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl19.scalarAdd(bigDecimal21);
java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal34 = bigDecimal32.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray35 = new java.math.BigDecimal[] { bigDecimal30, bigDecimal34 };
org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray35);
java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal42 = bigDecimal40.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray43 = new java.math.BigDecimal[] { bigDecimal38, bigDecimal42 };
org.apache.commons.math.linear.BigMatrix bigMatrix44 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray43);
java.math.BigDecimal[] bigDecimalArray45 = bigMatrix36.preMultiply(bigDecimalArray43);
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray45);
java.math.BigDecimal[] bigDecimalArray47 = bigMatrix28.preMultiply(bigDecimalArray45);
org.apache.commons.math.linear.BigMatrix bigMatrix48 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray47);
org.apache.commons.math.linear.BigMatrix bigMatrix49 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray47);
java.math.BigDecimal[] bigDecimalArray50 = bigMatrix1.solve(bigDecimalArray47);


Progress update: steps=6061, test inputs generated=5301, failing inputs=200      (2022-02-22T18:54:08.140Z     3.25G used)
Progress update: steps=6325, test inputs generated=5526, failing inputs=203      (2022-02-22T18:55:27.223Z     2.95G used)Long execution time 56 sec for
org.apache.commons.math.linear.BigMatrix bigMatrix1 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix(10100);


Progress update: steps=6352, test inputs generated=5551, failing inputs=205      (2022-02-22T18:55:41.804Z     3.21G used)
Normal method executions: 18302418
Exceptional method executions: 2041

Average method execution time (normal termination):      0.0114
Average method execution time (exceptional termination): 40.2
Approximate memory usage 3.21G
Explorer = ForwardGenerator(steps: 6352, null steps: 801, num_sequences_generated: 5551;
    allSequences: 5551, regresson seqs: 4380, error seqs: 205=205=205, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 966;
    runtimePrimitivesSeen:144)

Error-revealing test output:
Error-revealing test count: 205
Writing error-revealing JUnit tests...
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-11/ErrorTest0.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-11/ErrorTest1.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-11/ErrorTest.java
Wrote error-revealing JUnit tests.

About to look for failing assertions in 2790 regression sequences.

Regression test output:
Regression test count: 2790
Writing regression JUnit tests...
                                                                                                                                                                                                       Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-11/RegressionTest0.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-11/RegressionTest1.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-11/RegressionTest2.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-11/RegressionTest3.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-11/RegressionTest4.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-11/RegressionTest5.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-11/RegressionTest6.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-11/RegressionTest7.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-11/RegressionTest8.java

Randoop for Java version "4.3.0, local changes, branch master, commit 7af20ae, 2022-01-31".

Will try to generate tests for 15 classes.
PUBLIC MEMBERS=218
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2022-02-22T15:15:23.681Z     236M used)
Progress update: steps=1000, test inputs generated=591, failing inputs=0      (2022-02-22T15:15:31.773Z     536M used)
Progress update: steps=2000, test inputs generated=1301, failing inputs=0      (2022-02-22T15:15:38.593Z     916M used)
Progress update: steps=3000, test inputs generated=1987, failing inputs=0      (2022-02-22T15:15:45.554Z     1.23G used)
Progress update: steps=4000, test inputs generated=2674, failing inputs=0      (2022-02-22T15:15:52.203Z     1.20G used)
Progress update: steps=5000, test inputs generated=3349, failing inputs=0      (2022-02-22T15:15:59.057Z     1.26G used)
Progress update: steps=6000, test inputs generated=4015, failing inputs=1      (2022-02-22T15:16:06.047Z     223M used)
Progress update: steps=7000, test inputs generated=4664, failing inputs=1      (2022-02-22T15:16:12.565Z     326M used)
Progress update: steps=8000, test inputs generated=5315, failing inputs=1      (2022-02-22T15:16:18.974Z     698M used)
Progress update: steps=8738, test inputs generated=5818, failing inputs=1      (2022-02-22T15:16:23.697Z     639M used)
Progress update: steps=9000, test inputs generated=5984, failing inputs=1      (2022-02-22T15:16:25.108Z     259M used)
Progress update: steps=10000, test inputs generated=6611, failing inputs=1      (2022-02-22T15:16:31.533Z     384M used)
Progress update: steps=11000, test inputs generated=7264, failing inputs=1      (2022-02-22T15:16:37.708Z     1.02G used)
Progress update: steps=12000, test inputs generated=7918, failing inputs=1      (2022-02-22T15:16:43.920Z     745M used)
Progress update: steps=13000, test inputs generated=8553, failing inputs=1      (2022-02-22T15:16:49.993Z     359M used)
Progress update: steps=14000, test inputs generated=9172, failing inputs=1      (2022-02-22T15:16:56.112Z     801M used)
Progress update: steps=15000, test inputs generated=9798, failing inputs=1      (2022-02-22T15:17:01.917Z     1.12G used)
Progress update: steps=16000, test inputs generated=10439, failing inputs=1      (2022-02-22T15:17:07.856Z     402M used)
Progress update: steps=17000, test inputs generated=11081, failing inputs=1      (2022-02-22T15:17:13.769Z     836M used)
Progress update: steps=18000, test inputs generated=11722, failing inputs=1      (2022-02-22T15:17:19.764Z     1.14G used)
Progress update: steps=18699, test inputs generated=12148, failing inputs=1      (2022-02-22T15:17:23.697Z     613M used)
Progress update: steps=19000, test inputs generated=12345, failing inputs=1      (2022-02-22T15:17:25.590Z     1.37G used)
Progress update: steps=20000, test inputs generated=12995, failing inputs=1      (2022-02-22T15:17:32.613Z     2.57G used)
Progress update: steps=21000, test inputs generated=13630, failing inputs=1      (2022-02-22T15:17:38.905Z     3.30G used)
Progress update: steps=22000, test inputs generated=14259, failing inputs=1      (2022-02-22T15:17:44.912Z     2.62G used)
Progress update: steps=23000, test inputs generated=14921, failing inputs=1      (2022-02-22T15:17:50.981Z     3.00G used)
Progress update: steps=24000, test inputs generated=15543, failing inputs=1      (2022-02-22T15:17:57.140Z     2.35G used)
Progress update: steps=25000, test inputs generated=16192, failing inputs=1      (2022-02-22T15:18:03.295Z     2.67G used)
Progress update: steps=26000, test inputs generated=16854, failing inputs=1      (2022-02-22T15:18:11.350Z     2.95G used)
Progress update: steps=27000, test inputs generated=17481, failing inputs=1      (2022-02-22T15:18:17.686Z     3.39G used)
Progress update: steps=27886, test inputs generated=18070, failing inputs=1      (2022-02-22T15:18:23.698Z     2.85G used)
Progress update: steps=28000, test inputs generated=18142, failing inputs=1      (2022-02-22T15:18:24.350Z     3.12G used)
Progress update: steps=29000, test inputs generated=18788, failing inputs=1      (2022-02-22T15:18:30.701Z     3.61G used)
Progress update: steps=30000, test inputs generated=19420, failing inputs=1      (2022-02-22T15:18:36.827Z     3.07G used)
Progress update: steps=31000, test inputs generated=20055, failing inputs=1      (2022-02-22T15:18:42.835Z     3.73G used)
Progress update: steps=32000, test inputs generated=20685, failing inputs=1      (2022-02-22T15:18:49.991Z     3.21G used)
Progress update: steps=33000, test inputs generated=21319, failing inputs=1      (2022-02-22T15:18:56.516Z     3.76G used)
Progress update: steps=34000, test inputs generated=21944, failing inputs=1      (2022-02-22T15:19:09.115Z     3.60G used)
Progress update: steps=35000, test inputs generated=22567, failing inputs=1      (2022-02-22T15:19:16.509Z     3.61G used)
Progress update: steps=35954, test inputs generated=23205, failing inputs=1      (2022-02-22T15:19:23.698Z     3.56G used)
Progress update: steps=36000, test inputs generated=23234, failing inputs=1      (2022-02-22T15:19:23.927Z     3.65G used)
Progress update: steps=37000, test inputs generated=23862, failing inputs=1      (2022-02-22T15:19:30.994Z     3.16G used)
Progress update: steps=38000, test inputs generated=24494, failing inputs=2      (2022-02-22T15:19:37.569Z     3.50G used)
Progress update: steps=39000, test inputs generated=25123, failing inputs=2      (2022-02-22T15:19:44.301Z     3.32G used)
Progress update: steps=40000, test inputs generated=25766, failing inputs=2      (2022-02-22T15:19:50.660Z     3.43G used)
Progress update: steps=41000, test inputs generated=26381, failing inputs=2      (2022-02-22T15:19:56.383Z     3.69G used)
Progress update: steps=42000, test inputs generated=26993, failing inputs=2      (2022-02-22T15:20:01.851Z     3.79G used)
Progress update: steps=43000, test inputs generated=27619, failing inputs=2      (2022-02-22T15:20:08.242Z     3.63G used)
Progress update: steps=44000, test inputs generated=28275, failing inputs=2      (2022-02-22T15:20:14.948Z     3.77G used)
Progress update: steps=45000, test inputs generated=28909, failing inputs=2      (2022-02-22T15:20:21.573Z     3.67G used)
Progress update: steps=45340, test inputs generated=29129, failing inputs=2      (2022-02-22T15:20:23.699Z     3.67G used)
Progress update: steps=46000, test inputs generated=29555, failing inputs=2      (2022-02-22T15:20:29.696Z     3.78G used)
Progress update: steps=47000, test inputs generated=30181, failing inputs=2      (2022-02-22T15:20:44.708Z     3.81G used)
Progress update: steps=48000, test inputs generated=30813, failing inputs=2      (2022-02-22T15:21:09.531Z     3.83G used)
Problem with sequence:
java.lang.String str0 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
java.io.PrintWriter printWriter1 = new java.io.PrintWriter("hi!"); // [NormalExecution java.io.PrintWriter@39b0cec9 [class java.io.PrintWriter]]
java.util.Locale locale2 = null; // [NormalExecution null]
java.lang.String str3 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String[] strArray4 = org.mockito.asm.util.AbstractVisitor.TYPES; // [NormalExecution [null, null, null, null, T_BOOLEAN [class java.lang.String], T_CHAR [class java.lang.String], T_FLOAT [class java.lang.String], T_DOUBLE [class java.lang.String], T_BYTE [class java.lang.String], T_SHORT [class java.lang.String], T_INT [class java.lang.String], T_LONG [class java.lang.String]] [class [Ljava.lang.String;]]
java.io.PrintWriter printWriter5 = printWriter1.format(locale2, "", (java.lang.Object[])strArray4); // [NormalExecution java.io.PrintWriter@39b0cec9 [class java.io.PrintWriter]]
byte byte6 = (byte)1; // [NormalExecution 1 [class java.lang.Byte]]
printWriter5.println((int)(byte)1); // [NormalExecution null]
char char8 = 'a'; // [NormalExecution a [class java.lang.Character]]
printWriter5.println('a'); // [NormalExecution null]
long long10 = 10L; // [NormalExecution 10 [class java.lang.Long]]
printWriter5.print(10L); // [NormalExecution null]
printWriter5.println(); // [NormalExecution null]
java.lang.String str13 = "L295720478"; // [NormalExecution L295720478 [class java.lang.String]]
printWriter5.write("L295720478"); // [NormalExecution null]
java.lang.String str15 = "L1732916180"; // [NormalExecution L1732916180 [class java.lang.String]]
printWriter5.println("L1732916180"); // [NormalExecution null]
int int17 = 51966; // [NormalExecution 51966 [class java.lang.Integer]]
printWriter5.println((long)51966); // [NormalExecution null]
java.lang.String str19 = "L2099571942"; // [NormalExecution L2099571942 [class java.lang.String]]
printWriter5.println("L2099571942"); // [NormalExecution null]
java.lang.String str21 = "L1170787406"; // [NormalExecution L1170787406 [class java.lang.String]]
org.mockito.asm.util.ASMifierMethodVisitor aSMifierMethodVisitor22 = new org.mockito.asm.util.ASMifierMethodVisitor(); // [NormalExecution org.mockito.asm.util.ASMifierMethodVisitor@4efc56f7 [class org.mockito.asm.util.ASMifierMethodVisitor]]
char char23 = 'a'; // [NormalExecution a [class java.lang.Character]]
int int24 = 7; // [NormalExecution 7 [class java.lang.Integer]]
aSMifierMethodVisitor22.visitIincInsn((int)'a', 7); // [NormalExecution null]
int int26 = 0; // [NormalExecution 0 [class java.lang.Integer]]
int int27 = 0; // [NormalExecution 0 [class java.lang.Integer]]
aSMifierMethodVisitor22.visitIincInsn(0, 0); // [NormalExecution null]
short short29 = (short)10; // [NormalExecution 10 [class java.lang.Short]]
java.lang.String str30 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str31 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
java.lang.String str32 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
aSMifierMethodVisitor22.visitFieldInsn((int)(short)10, "", "hi!", "hi!"); // [NormalExecution null]
int int34 = 8; // [NormalExecution 8 [class java.lang.Integer]]
java.lang.String str35 = ""; // [NormalExecution  [class java.lang.String]]
boolean boolean36 = false; // [NormalExecution false [class java.lang.Boolean]]
org.mockito.asm.AnnotationVisitor annotationVisitor37 = aSMifierMethodVisitor22.visitParameterAnnotation(8, "", false); // [NormalExecution org.mockito.asm.util.ASMifierAnnotationVisitor@7082dd88 [class org.mockito.asm.util.ASMifierAnnotationVisitor]]
java.lang.String str38 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
boolean boolean39 = false; // [NormalExecution false [class java.lang.Boolean]]
org.mockito.asm.AnnotationVisitor annotationVisitor40 = aSMifierMethodVisitor22.visitAnnotation("hi!", false); // [NormalExecution org.mockito.asm.util.ASMifierAnnotationVisitor@775d19c7 [class org.mockito.asm.util.ASMifierAnnotationVisitor]]
java.lang.String str41 = ""; // [NormalExecution  [class java.lang.String]]
byte byte42 = (byte)10; // [NormalExecution 10 [class java.lang.Byte]]
org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int)(byte)10); // [NormalExecution org.mockito.asm.ClassWriter@4c2b10a8 [class org.mockito.asm.ClassWriter]]
java.lang.String str44 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str45 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
java.lang.String str46 = ""; // [NormalExecution  [class java.lang.String]]
int int47 = classWriter43.newField("", "hi!", ""); // [NormalExecution 5 [class java.lang.Integer]]
byte[] byteArray48 = classWriter43.toByteArray(); // [NormalExecution [-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 3, 0, 1, 9, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] [class [B]]
char char49 = '4'; // [NormalExecution 4 [class java.lang.Character]]
int int50 = classWriter43.newConst((java.lang.Object)'4'); // [NormalExecution 6 [class java.lang.Integer]]
java.lang.String str51 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str52 = ""; // [NormalExecution  [class java.lang.String]]
classWriter43.visitSource("", ""); // [NormalExecution null]
int int54 = 4; // [NormalExecution 4 [class java.lang.Integer]]
java.lang.String str55 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str56 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
java.lang.String str57 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
int int58 = 2; // [NormalExecution 2 [class java.lang.Integer]]
org.mockito.asm.FieldVisitor fieldVisitor59 = classWriter43.visitField(4, "", "hi!", "hi!", (java.lang.Object)2); // [NormalExecution org.mockito.asm.FieldWriter@8815a8a [class org.mockito.asm.FieldWriter]]
java.lang.String str60 = ""; // [NormalExecution  [class java.lang.String]]
boolean boolean61 = true; // [NormalExecution true [class java.lang.Boolean]]
org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter43.visitAnnotation("", true); // [NormalExecution org.mockito.asm.AnnotationWriter@37780bd5 [class org.mockito.asm.AnnotationWriter]]
java.lang.String str63 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
boolean boolean64 = false; // [NormalExecution false [class java.lang.Boolean]]
org.mockito.asm.AnnotationVisitor annotationVisitor65 = classWriter43.visitAnnotation("hi!", false); // [NormalExecution org.mockito.asm.AnnotationWriter@51f0ee2f [class org.mockito.asm.AnnotationWriter]]
byte[] byteArray66 = classWriter43.toByteArray(); // [NormalExecution [-54, -2, -70, -66, 0, 0, 0, 0, 0, 14, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 3, 0, 1, 9, 0, 2, 0, 4, 3, 0, 0, 0, 52, 3, 0, 0, 0, 2, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 1, 0, 3, 0, 2, 0, 8, 0, 0, 0, 2, 0, 7, 0, 9, 0, 0, 0, 2, 0, 3, 0, 0, 0, 4, 0, 10, 0, 0, 0, 2, 0, 1, 0, 11, 0, 0, 0, 0, 0, 12, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 13, 0, 0, 0, 6, 0, 1, 0, 3, 0, 0] [class [B]]
annotationVisitor40.visit("", (java.lang.Object)byteArray66); // [NormalExecution null]
org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray66); // [NormalExecution org.mockito.asm.ClassReader@414a3431 [class org.mockito.asm.ClassReader]]
int int69 = classReader68.header; // [NormalExecution 164 [class java.lang.Integer]]
java.lang.String str70 = classReader68.getSuperName(); // [NormalExecution null]
byte[] byteArray71 = classReader68.b; // [NormalExecution [-54, -2, -70, -66, 0, 0, 0, 0, 0, 14, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 3, 0, 1, 9, 0, 2, 0, 4, 3, 0, 0, 0, 52, 3, 0, 0, 0, 2, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 1, 0, 3, 0, 2, 0, 8, 0, 0, 0, 2, 0, 7, 0, 9, 0, 0, 0, 2, 0, 3, 0, 0, 0, 4, 0, 10, 0, 0, 0, 2, 0, 1, 0, 11, 0, 0, 0, 0, 0, 12, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 13, 0, 0, 0, 6, 0, 1, 0, 3, 0, 0] [class [B]]
java.lang.String[] strArray72 = classReader68.getInterfaces(); // [NormalExecution [] [class [Ljava.lang.String;]]
java.io.PrintWriter printWriter73 = printWriter5.printf("L1170787406", (java.lang.Object[])strArray72); // [NormalExecution java.io.PrintWriter@39b0cec9 [class java.io.PrintWriter]]
int int74 = 8460; // [NormalExecution 8460 [class java.lang.Integer]]
printWriter5.println(8460); // [NormalExecution null]
<randoop.contract.IsNotNull@1f [strArray4]>
<randoop.contract.IsNotNull@1f [printWriter5]>
<randoop.contract.IsNotNull@1f [annotationVisitor37]>
<randoop.contract.IsNotNull@1f [annotationVisitor40]>
<randoop.PrimValue, value=5 [int47]>
<randoop.contract.IsNotNull@1f [byteArray48]>
<<ObserverEqValue java.util.Arrays.toString : (byte[]) -> java.lang.String, value = '[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 3, 0, 1, 9, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] [class java.lang.String]' [byteArray48]>
<randoop.PrimValue, value=6 [int50]>
<randoop.contract.IsNotNull@1f [fieldVisitor59]>
<randoop.contract.IsNotNull@1f [annotationVisitor62]>
<randoop.contract.IsNotNull@1f [annotationVisitor65]>
<randoop.contract.IsNotNull@1f [byteArray66]>
<<ObserverEqValue java.util.Arrays.toString : (byte[]) -> java.lang.String, value = '[-54, -2, -70, -66, 0, 0, 0, 0, 0, 14, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 3, 0, 1, 9, 0, 2, 0, 4, 3, 0, 0, 0, 52, 3, 0, 0, 0, 2, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 1, 0, 3, 0, 2, 0, 8, 0, 0, 0, 2, 0, 7, 0, 9, 0, 0, 0, 2, 0, 3, 0, 0, 0, 4, 0, 10, 0, 0, 0, 2, 0, 1, 0, 11, 0, 0, 0, 0, 0, 12, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 13, 0, 0, 0, 6, 0, 1, 0, 3, 0, 0] [class java.lang.String]' [byteArray66]>
<randoop.PrimValue, value=164 [int69]>
<randoop.contract.IsNull@25 [str70]>
<randoop.contract.IsNotNull@1f [byteArray71]>
<<ObserverEqValue java.util.Arrays.toString : (byte[]) -> java.lang.String, value = '[-54, -2, -70, -66, 0, 0, 0, 0, 0, 14, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 3, 0, 1, 9, 0, 2, 0, 4, 3, 0, 0, 0, 52, 3, 0, 0, 0, 2, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 1, 0, 3, 0, 2, 0, 8, 0, 0, 0, 2, 0, 7, 0, 9, 0, 0, 0, 2, 0, 3, 0, 0, 0, 4, 0, 10, 0, 0, 0, 2, 0, 1, 0, 11, 0, 0, 0, 0, 0, 12, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 13, 0, 0, 0, 6, 0, 1, 0, 3, 0, 0] [class java.lang.String]' [byteArray71]>
<randoop.contract.IsNotNull@1f [strArray72]>
<randoop.contract.IsNotNull@1f [printWriter73]>
java.lang.OutOfMemoryError: GC overhead limit exceeded

createAndClassifySequences threw an exception
java.lang.OutOfMemoryError: GC overhead limit exceeded


Throwable thrown while handling command: java.lang.OutOfMemoryError: GC overhead limit exceeded
java.lang.OutOfMemoryError: GC overhead limit exceeded

Randoop failed.
Last sequence under execution: 
java.io.PrintWriter printWriter1 = new java.io.PrintWriter("hi!");
java.util.Locale locale2 = null;
java.lang.String[] strArray4 = org.mockito.asm.util.AbstractVisitor.TYPES;
java.io.PrintWriter printWriter5 = printWriter1.format(locale2, "", (java.lang.Object[])strArray4);
printWriter5.println((int)(byte)1);
printWriter5.println('a');
printWriter5.print(10L);
printWriter5.println();
printWriter5.write("L295720478");
printWriter5.println("L1732916180");
printWriter5.println((long)51966);
printWriter5.println("L2099571942");
org.mockito.asm.util.ASMifierMethodVisitor aSMifierMethodVisitor22 = new org.mockito.asm.util.ASMifierMethodVisitor();
aSMifierMethodVisitor22.visitIincInsn((int)'a', 7);
aSMifierMethodVisitor22.visitIincInsn(0, 0);
aSMifierMethodVisitor22.visitFieldInsn((int)(short)10, "", "hi!", "hi!");
org.mockito.asm.AnnotationVisitor annotationVisitor37 = aSMifierMethodVisitor22.visitParameterAnnotation(8, "", false);
org.mockito.asm.AnnotationVisitor annotationVisitor40 = aSMifierMethodVisitor22.visitAnnotation("hi!", false);
org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int)(byte)10);
int int47 = classWriter43.newField("", "hi!", "");
byte[] byteArray48 = classWriter43.toByteArray();
int int50 = classWriter43.newConst((java.lang.Object)'4');
classWriter43.visitSource("", "");
org.mockito.asm.FieldVisitor fieldVisitor59 = classWriter43.visitField(4, "", "hi!", "hi!", (java.lang.Object)2);
org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter43.visitAnnotation("", true);
org.mockito.asm.AnnotationVisitor annotationVisitor65 = classWriter43.visitAnnotation("hi!", false);
byte[] byteArray66 = classWriter43.toByteArray();
annotationVisitor40.visit("", (java.lang.Object)byteArray66);
org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray66);
int int69 = classReader68.header;
java.lang.String str70 = classReader68.getSuperName();
byte[] byteArray71 = classReader68.b;
java.lang.String[] strArray72 = classReader68.getInterfaces();
java.io.PrintWriter printWriter73 = printWriter5.printf("L1170787406", (java.lang.Object[])strArray72);
printWriter5.println(8460);

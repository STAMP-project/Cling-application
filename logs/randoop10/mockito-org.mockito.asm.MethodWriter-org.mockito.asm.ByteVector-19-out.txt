Randoop for Java version "4.3.0, local changes, branch master, commit 7af20ae, 2022-01-31".
Cannot instantiate non-accessible class org.mockito.asm.MethodWriter specified via --testclass or --classlist; will use its static methods.

Will try to generate tests for 8 classes.
PUBLIC MEMBERS=92
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=3, test inputs generated=1, failing inputs=0      (2022-02-22T16:06:12.278Z     226M used)
Progress update: steps=1000, test inputs generated=788, failing inputs=0      (2022-02-22T16:06:33.565Z     821M used)
Progress update: steps=2000, test inputs generated=1602, failing inputs=0      (2022-02-22T16:06:49.467Z     1.19G used)
Progress update: steps=2895, test inputs generated=2320, failing inputs=0      (2022-02-22T16:07:12.322Z     2.86G used)
Progress update: steps=3000, test inputs generated=2405, failing inputs=0      (2022-02-22T16:07:14.354Z     3.29G used)Long execution time 13 sec for
org.mockito.asm.ByteVector byteVector1 = new org.mockito.asm.ByteVector(0);
org.mockito.asm.ByteVector byteVector3 = byteVector1.putInt((int)(short)10);
org.mockito.asm.ByteVector byteVector5 = byteVector1.putShort((int)(byte)10);
org.mockito.asm.ByteVector byteVector7 = byteVector5.putShort((-1));
org.mockito.asm.ByteVector byteVector9 = byteVector7.putShort(19);
org.mockito.asm.ByteVector byteVector11 = byteVector7.putLong((long)26);
org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter(0);
byte[] byteArray14 = classWriter13.toByteArray();
org.mockito.asm.ClassReader classReader15 = new org.mockito.asm.ClassReader(byteArray14);
byte[] byteArray16 = classReader15.b;
org.mockito.asm.ByteVector byteVector19 = byteVector11.putByteArray(byteArray16, 22, 942802688);


Progress update: steps=4000, test inputs generated=3210, failing inputs=0      (2022-02-22T16:07:48.310Z     3.44G used)
Progress update: steps=5000, test inputs generated=4008, failing inputs=0      (2022-02-22T16:08:07.077Z     2.79G used)
Progress update: steps=5186, test inputs generated=4153, failing inputs=0      (2022-02-22T16:08:12.323Z     3.21G used)Long generation time 1614 msec (= 1614 + 0) for
org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
classWriter1.visitSource("L694316372", "");
byte[] byteArray5 = classWriter1.toByteArray();
org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(0);
java.lang.String[] strArray20 = new java.lang.String[] { "", "L694316372", "L694316372", "L694316372" };
org.mockito.asm.MethodVisitor methodVisitor21 = classWriter11.visitMethod(0, "L694316372", "L694316372", "", strArray20);
org.mockito.asm.MethodVisitor methodVisitor22 = classWriter1.visitMethod((int)'#', "L965699106", "L652692816", "L587149895", strArray20);
methodVisitor22.visitMaxs((int)(short)0, 100);
org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(0);
java.lang.String[] strArray36 = new java.lang.String[] { "", "L694316372", "L694316372", "L694316372" };
org.mockito.asm.MethodVisitor methodVisitor37 = classWriter27.visitMethod(0, "L694316372", "L694316372", "", strArray36);
int int40 = classWriter27.newNameType("L591803852", "hi!");
classWriter27.visitInnerClass("L591803852", "L1788678692", "hi!", 0);
org.mockito.asm.AnnotationVisitor annotationVisitor48 = classWriter27.visitAnnotation("L455385236", false);
classWriter27.visitEnd();
classWriter27.visitOuterClass("L1238497527", "L172209597", "L805141171");
int int56 = classWriter27.newNameType("L1516312349", "L1661688115");
methodVisitor22.visitLdcInsn((java.lang.Object)"L1661688115");
methodVisitor22.visitEnd();


Progress update: steps=6000, test inputs generated=4813, failing inputs=0      (2022-02-22T16:08:36.028Z     3.01G used)
Progress update: steps=7000, test inputs generated=5597, failing inputs=0      (2022-02-22T16:09:01.217Z     3.42G used)
Progress update: steps=7456, test inputs generated=5951, failing inputs=0      (2022-02-22T16:09:12.323Z     3.11G used)
Progress update: steps=8000, test inputs generated=6372, failing inputs=0      (2022-02-22T16:09:25.481Z     3.45G used)
Progress update: steps=9000, test inputs generated=7176, failing inputs=0      (2022-02-22T16:09:53.601Z     3.38G used)
Progress update: steps=9759, test inputs generated=7786, failing inputs=0      (2022-02-22T16:10:12.324Z     3.48G used)
Progress update: steps=10000, test inputs generated=7977, failing inputs=0      (2022-02-22T16:10:21.722Z     3.28G used)
Progress update: steps=11000, test inputs generated=8741, failing inputs=0      (2022-02-22T16:10:48.291Z     3.39G used)
Progress update: steps=11842, test inputs generated=9407, failing inputs=0      (2022-02-22T16:11:12.713Z     3.23G used)
Progress update: steps=12000, test inputs generated=9526, failing inputs=0      (2022-02-22T16:11:18.008Z     3.39G used)
Progress update: steps=13000, test inputs generated=10305, failing inputs=0      (2022-02-22T16:11:51.948Z     3.33G used)
Progress update: steps=13940, test inputs generated=11016, failing inputs=0      (2022-02-22T16:12:13.161Z     3.28G used)
Progress update: steps=14000, test inputs generated=11064, failing inputs=0      (2022-02-22T16:12:14.204Z     3.39G used)
Progress update: steps=15000, test inputs generated=11827, failing inputs=0      (2022-02-22T16:12:44.622Z     3.38G used)
Progress update: steps=15886, test inputs generated=12509, failing inputs=0      (2022-02-22T16:13:13.171Z     3.34G used)
Progress update: steps=16000, test inputs generated=12581, failing inputs=0      (2022-02-22T16:13:16.731Z     3.42G used)
Progress update: steps=16774, test inputs generated=13162, failing inputs=0      (2022-02-22T16:14:13.739Z     3.44G used)
Progress update: steps=17000, test inputs generated=13324, failing inputs=0      (2022-02-22T16:14:29.780Z     3.45G used)
Progress update: steps=17511, test inputs generated=13696, failing inputs=0      (2022-02-22T16:15:14.565Z     3.46G used)
Progress update: steps=17946, test inputs generated=14022, failing inputs=0      (2022-02-22T16:16:12.461Z     3.47G used)
Normal method executions: 4550466
Exceptional method executions: 3371

Average method execution time (normal termination):      0.00158
Average method execution time (exceptional termination): 10.9
Approximate memory usage 3.47G
Explorer = ForwardGenerator(steps: 17946, null steps: 3924, num_sequences_generated: 14022;
    allSequences: 14022, regresson seqs: 13773, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 249;
    runtimePrimitivesSeen:4410)

No error-revealing tests to output.

About to look for failing assertions in 7815 regression sequences.

Regression test output:
Regression test count: 7815
Writing regression JUnit tests...
                                                                                                                                                                                                       GenTests.writeTestFiles threw an exception
java.lang.OutOfMemoryError: GC overhead limit exceeded

Throwable thrown while handling command: java.lang.OutOfMemoryError: GC overhead limit exceeded
java.lang.OutOfMemoryError: GC overhead limit exceeded

Randoop failed.
Last sequence under execution: 
org.mockito.asm.ByteVector byteVector1 = new org.mockito.asm.ByteVector(0);
org.mockito.asm.ByteVector byteVector3 = byteVector1.putShort(3);
org.mockito.asm.ByteVector byteVector5 = byteVector3.putInt((int)' ');
org.mockito.asm.ByteVector byteVector7 = byteVector3.putShort(4);
org.mockito.asm.ByteVector byteVector9 = byteVector7.putByte(100);
org.mockito.asm.ByteVector byteVector11 = byteVector9.putUTF8("L630774968");
org.mockito.asm.ByteVector byteVector13 = new org.mockito.asm.ByteVector(0);
org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(0);
classWriter15.visitSource("L694316372", "");
byte[] byteArray19 = classWriter15.toByteArray();
org.mockito.asm.ByteVector byteVector22 = byteVector13.putByteArray(byteArray19, 5, 6);
org.mockito.asm.ByteVector byteVector25 = byteVector11.putByteArray(byteArray19, 7, 16);
org.mockito.asm.ClassReader classReader28 = new org.mockito.asm.ClassReader(byteArray19, (int)(byte)0, (int)(short)0);
byte[] byteArray29 = classReader28.b;
java.lang.String[] strArray30 = classReader28.getInterfaces();
org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader28, 0);
int int36 = classWriter32.newField("L1456024767", "L1123062167", "L1967493068");
classWriter32.visitInnerClass("L1546110991", "L680957861", "L1549060343", 29);
org.mockito.asm.Attribute attribute42 = null;
classWriter32.visitAttribute(attribute42);

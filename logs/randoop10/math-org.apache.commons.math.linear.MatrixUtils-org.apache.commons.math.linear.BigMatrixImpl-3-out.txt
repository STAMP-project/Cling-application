Randoop for Java version "4.3.0, local changes, branch master, commit 7af20ae, 2022-01-31".

Will try to generate tests for 8 classes.
PUBLIC MEMBERS=222
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2022-02-22T18:41:15.744Z     204M used)
Progress update: steps=891, test inputs generated=846, failing inputs=8      (2022-02-22T18:42:25.019Z     1.81G used)Long execution time 36 sec for
org.apache.commons.math.linear.BigMatrix bigMatrix1 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int)(short)16960);


Progress update: steps=1000, test inputs generated=951, failing inputs=9      (2022-02-22T18:42:31.054Z     2.13G used)
Progress update: steps=2000, test inputs generated=1883, failing inputs=24      (2022-02-22T18:43:10.061Z     2.59G used)
Progress update: steps=2663, test inputs generated=2497, failing inputs=30      (2022-02-22T18:43:25.020Z     3.02G used)
Progress update: steps=2917, test inputs generated=2721, failing inputs=31      (2022-02-22T18:44:50.980Z     3.04G used)Long execution time 82 sec for
org.apache.commons.math.linear.BigMatrix bigMatrix1 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int)(short)16960);
java.math.BigDecimal bigDecimal2 = bigMatrix1.getTrace();


Progress update: steps=3000, test inputs generated=2798, failing inputs=31      (2022-02-22T18:44:57.313Z     3.03G used)Long execution time 21 sec for
org.apache.commons.math.linear.BigMatrix bigMatrix1 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int)(short)16960);
java.math.BigDecimal bigDecimal2 = bigMatrix1.getTrace();
double[] doubleArray6 = new double[] { '4', (short)100, 1L };
double[] doubleArray10 = new double[] { '4', (short)100, 1L };
double[][] doubleArray11 = new double[][] { doubleArray6, doubleArray10 };
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray11);
org.apache.commons.math.linear.BigMatrix bigMatrix13 = bigMatrixImpl12.copy();
java.math.BigDecimal bigDecimal14 = bigMatrix13.getNorm();
double[] doubleArray18 = new double[] { '4', (short)100, 1L };
double[] doubleArray22 = new double[] { '4', (short)100, 1L };
double[][] doubleArray23 = new double[][] { doubleArray18, doubleArray22 };
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray23);
bigMatrixImpl24.setRoundingMode((int)(short)10);
java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal((long)(short)100);
boolean boolean30 = bigDecimal28.equals((java.lang.Object)10L);
java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal((long)(short)100);
boolean boolean34 = bigDecimal32.equals((java.lang.Object)10L);
java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal37 = bigDecimal32.remainder(bigDecimal36);
java.math.BigDecimal bigDecimal38 = bigDecimal28.subtract(bigDecimal37);
java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal42 = bigDecimal40.pow((int)'a');
java.math.BigDecimal bigDecimal43 = bigDecimal37.divideToIntegralValue(bigDecimal42);
org.apache.commons.math.linear.BigMatrix bigMatrix44 = bigMatrixImpl24.scalarMultiply(bigDecimal37);
java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal48 = bigDecimal46.pow((int)'a');
java.math.BigDecimal bigDecimal49 = bigDecimal37.divide(bigDecimal46);
double double50 = bigDecimal46.doubleValue();
org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrix13.scalarAdd(bigDecimal46);
java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal55 = bigDecimal53.pow((int)'a');
java.math.BigDecimal bigDecimal56 = bigDecimal53.ulp();
java.math.BigDecimal bigDecimal58 = bigDecimal53.movePointRight(0);
java.math.BigDecimal bigDecimal61 = java.math.BigDecimal.valueOf((long)(short)100, (int)(short)0);
java.math.BigDecimal bigDecimal63 = new java.math.BigDecimal((long)(short)100);
boolean boolean65 = bigDecimal63.equals((java.lang.Object)10L);
java.math.BigDecimal bigDecimal67 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal68 = bigDecimal63.remainder(bigDecimal67);
double double69 = bigDecimal68.doubleValue();
java.math.BigDecimal bigDecimal70 = bigDecimal61.max(bigDecimal68);
java.math.BigDecimal bigDecimal71 = bigDecimal53.divideToIntegralValue(bigDecimal70);
java.math.BigDecimal bigDecimal73 = bigDecimal71.movePointLeft(100);
java.lang.String str74 = bigDecimal71.toPlainString();
java.math.BigDecimal bigDecimal75 = bigDecimal46.min(bigDecimal71);
java.math.BigDecimal bigDecimal76 = bigDecimal2.subtract(bigDecimal71);


Progress update: steps=3423, test inputs generated=3187, failing inputs=38      (2022-02-22T18:45:55.953Z     3.60G used)Long execution time 21 sec for
java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal3 = bigDecimal1.pow((int)'a');
java.math.BigDecimal bigDecimal4 = bigDecimal1.ulp();
java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal8 = bigDecimal6.movePointLeft((int)(byte)-1);
java.math.BigDecimal bigDecimal9 = bigDecimal1.remainder(bigDecimal6);
int int10 = bigDecimal1.precision();
java.lang.String str11 = bigDecimal1.toPlainString();
java.math.BigDecimal bigDecimal13 = bigDecimal1.pow(1000000);
java.math.BigInteger bigInteger14 = bigDecimal13.toBigInteger();
java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(bigInteger14);


Progress update: steps=3712, test inputs generated=3458, failing inputs=42      (2022-02-22T18:46:56.013Z     3.73G used)Long execution time 12 sec for
double[] doubleArray3 = new double[] { '4', (short)100, 1L };
double[] doubleArray7 = new double[] { '4', (short)100, 1L };
double[][] doubleArray8 = new double[][] { doubleArray3, doubleArray7 };
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl9 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray8);
double[] doubleArray13 = new double[] { '4', (short)100, 1L };
double[] doubleArray17 = new double[] { '4', (short)100, 1L };
double[][] doubleArray18 = new double[][] { doubleArray13, doubleArray17 };
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
java.math.BigDecimal[][] bigDecimalArray20 = bigMatrixImpl19.getDataRef();
org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl9.add((org.apache.commons.math.linear.BigMatrix)bigMatrixImpl19);
java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal((long)(short)100);
boolean boolean25 = bigDecimal23.equals((java.lang.Object)10L);
java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal28 = bigDecimal23.remainder(bigDecimal27);
java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal31 = bigDecimal28.add(bigDecimal30);
java.math.BigDecimal bigDecimal33 = bigDecimal31.pow(3);
org.apache.commons.math.linear.BigMatrix bigMatrix34 = bigMatrix21.scalarMultiply(bigDecimal33);
java.math.BigDecimal bigDecimal36 = bigDecimal33.movePointRight(1000000);
java.math.BigDecimal bigDecimal37 = bigDecimal36.abs();
java.lang.String str38 = bigDecimal36.toEngineeringString();


Progress update: steps=4000, test inputs generated=3702, failing inputs=47      (2022-02-22T18:47:27.053Z     3.83G used)
Progress update: steps=4082, test inputs generated=3773, failing inputs=48      (2022-02-22T18:47:56.124Z     3.66G used)Long execution time 25 sec for
double[] doubleArray3 = new double[] { '4', (short)100, 1L };
double[] doubleArray7 = new double[] { '4', (short)100, 1L };
double[][] doubleArray8 = new double[][] { doubleArray3, doubleArray7 };
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl9 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray8);
double[] doubleArray13 = new double[] { '4', (short)100, 1L };
double[] doubleArray17 = new double[] { '4', (short)100, 1L };
double[][] doubleArray18 = new double[][] { doubleArray13, doubleArray17 };
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
java.math.BigDecimal[][] bigDecimalArray20 = bigMatrixImpl19.getDataRef();
org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl9.add((org.apache.commons.math.linear.BigMatrix)bigMatrixImpl19);
java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal((long)(short)100);
boolean boolean25 = bigDecimal23.equals((java.lang.Object)10L);
java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal28 = bigDecimal23.remainder(bigDecimal27);
java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal31 = bigDecimal28.add(bigDecimal30);
java.math.BigDecimal bigDecimal33 = bigDecimal31.pow(3);
org.apache.commons.math.linear.BigMatrix bigMatrix34 = bigMatrix21.scalarMultiply(bigDecimal33);
java.math.BigDecimal bigDecimal36 = bigDecimal33.movePointRight(1000000);
java.math.BigDecimal bigDecimal37 = bigDecimal36.abs();
java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal41 = bigDecimal39.scaleByPowerOfTen(100);
java.math.BigDecimal bigDecimal42 = bigDecimal39.abs();
java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal46 = bigDecimal44.pow((int)'a');
java.math.BigDecimal bigDecimal47 = bigDecimal44.ulp();
java.math.BigDecimal bigDecimal49 = bigDecimal44.movePointRight(0);
java.math.BigDecimal bigDecimal52 = java.math.BigDecimal.valueOf((long)(short)100, (int)(short)0);
java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal((long)(short)100);
boolean boolean56 = bigDecimal54.equals((java.lang.Object)10L);
java.math.BigDecimal bigDecimal58 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal59 = bigDecimal54.remainder(bigDecimal58);
double double60 = bigDecimal59.doubleValue();
java.math.BigDecimal bigDecimal61 = bigDecimal52.max(bigDecimal59);
java.math.BigDecimal bigDecimal62 = bigDecimal44.divideToIntegralValue(bigDecimal61);
java.math.BigDecimal bigDecimal64 = bigDecimal62.movePointLeft(100);
java.math.BigDecimal bigDecimal65 = bigDecimal39.subtract(bigDecimal64);
java.math.BigDecimal bigDecimal66 = bigDecimal37.add(bigDecimal65);

Long execution time 25 sec for
java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long)64, 0);
java.math.BigDecimal bigDecimal4 = bigDecimal2.setScale(100);
java.math.BigDecimal bigDecimal6 = bigDecimal4.setScale(1000000);


Progress update: steps=4198, test inputs generated=3878, failing inputs=48      (2022-02-22T18:49:00.578Z     3.82G used)
Progress update: steps=4443, test inputs generated=4099, failing inputs=51      (2022-02-22T18:50:02.561Z     3.85G used)Long execution time 28 sec for
java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long)(short)1, 1000);
org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int)(short)16960);
java.math.BigDecimal bigDecimal5 = bigMatrix4.getTrace();
double[] doubleArray9 = new double[] { '4', (short)100, 1L };
double[] doubleArray13 = new double[] { '4', (short)100, 1L };
double[][] doubleArray14 = new double[][] { doubleArray9, doubleArray13 };
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl15 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray14);
org.apache.commons.math.linear.BigMatrix bigMatrix16 = bigMatrixImpl15.copy();
java.math.BigDecimal bigDecimal17 = bigMatrix16.getNorm();
double[] doubleArray21 = new double[] { '4', (short)100, 1L };
double[] doubleArray25 = new double[] { '4', (short)100, 1L };
double[][] doubleArray26 = new double[][] { doubleArray21, doubleArray25 };
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray26);
bigMatrixImpl27.setRoundingMode((int)(short)10);
java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal((long)(short)100);
boolean boolean33 = bigDecimal31.equals((java.lang.Object)10L);
java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal((long)(short)100);
boolean boolean37 = bigDecimal35.equals((java.lang.Object)10L);
java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal40 = bigDecimal35.remainder(bigDecimal39);
java.math.BigDecimal bigDecimal41 = bigDecimal31.subtract(bigDecimal40);
java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal45 = bigDecimal43.pow((int)'a');
java.math.BigDecimal bigDecimal46 = bigDecimal40.divideToIntegralValue(bigDecimal45);
org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl27.scalarMultiply(bigDecimal40);
java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal51 = bigDecimal49.pow((int)'a');
java.math.BigDecimal bigDecimal52 = bigDecimal40.divide(bigDecimal49);
double double53 = bigDecimal49.doubleValue();
org.apache.commons.math.linear.BigMatrix bigMatrix54 = bigMatrix16.scalarAdd(bigDecimal49);
java.math.BigDecimal bigDecimal56 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal58 = bigDecimal56.pow((int)'a');
java.math.BigDecimal bigDecimal59 = bigDecimal56.ulp();
java.math.BigDecimal bigDecimal61 = bigDecimal56.movePointRight(0);
java.math.BigDecimal bigDecimal64 = java.math.BigDecimal.valueOf((long)(short)100, (int)(short)0);
java.math.BigDecimal bigDecimal66 = new java.math.BigDecimal((long)(short)100);
boolean boolean68 = bigDecimal66.equals((java.lang.Object)10L);
java.math.BigDecimal bigDecimal70 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal71 = bigDecimal66.remainder(bigDecimal70);
double double72 = bigDecimal71.doubleValue();
java.math.BigDecimal bigDecimal73 = bigDecimal64.max(bigDecimal71);
java.math.BigDecimal bigDecimal74 = bigDecimal56.divideToIntegralValue(bigDecimal73);
java.math.BigDecimal bigDecimal76 = bigDecimal74.movePointLeft(100);
java.lang.String str77 = bigDecimal74.toPlainString();
java.math.BigDecimal bigDecimal78 = bigDecimal49.min(bigDecimal74);
java.math.BigDecimal bigDecimal79 = bigDecimal5.subtract(bigDecimal74);
java.math.BigDecimal bigDecimal80 = bigDecimal2.add(bigDecimal79);


Progress update: steps=4517, test inputs generated=4163, failing inputs=54      (2022-02-22T18:51:19.677Z     3.66G used)Long execution time 34 sec for
double[] doubleArray3 = new double[] { '4', (short)100, 1L };
double[] doubleArray7 = new double[] { '4', (short)100, 1L };
double[][] doubleArray8 = new double[][] { doubleArray3, doubleArray7 };
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl9 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray8);
double[] doubleArray13 = new double[] { '4', (short)100, 1L };
double[] doubleArray17 = new double[] { '4', (short)100, 1L };
double[][] doubleArray18 = new double[][] { doubleArray13, doubleArray17 };
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
java.math.BigDecimal[][] bigDecimalArray20 = bigMatrixImpl19.getDataRef();
org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl9.add((org.apache.commons.math.linear.BigMatrix)bigMatrixImpl19);
java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal((long)(short)100);
boolean boolean25 = bigDecimal23.equals((java.lang.Object)10L);
java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal28 = bigDecimal23.remainder(bigDecimal27);
java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal31 = bigDecimal28.add(bigDecimal30);
java.math.BigDecimal bigDecimal33 = bigDecimal31.pow(3);
org.apache.commons.math.linear.BigMatrix bigMatrix34 = bigMatrix21.scalarMultiply(bigDecimal33);
java.math.BigDecimal bigDecimal36 = bigDecimal33.movePointRight(1000000);
java.math.BigDecimal bigDecimal37 = bigDecimal36.abs();
java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long)(short)16960);
java.math.BigDecimal bigDecimal40 = bigDecimal39.ulp();
java.math.BigDecimal[] bigDecimalArray41 = bigDecimal37.divideAndRemainder(bigDecimal40);


Progress update: steps=4517, test inputs generated=4164, failing inputs=54      (2022-02-22T18:51:34.119Z     3.80G used)
Normal method executions: 5211520
Exceptional method executions: 1710

Average method execution time (normal termination):      0.0625
Average method execution time (exceptional termination): 17.0
Approximate memory usage 3.80G
Explorer = ForwardGenerator(steps: 4517, null steps: 353, num_sequences_generated: 4164;
    allSequences: 4164, regresson seqs: 3502, error seqs: 54=54=54, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 608;
    runtimePrimitivesSeen:110)

Error-revealing test output:
Error-revealing test count: 54
Writing error-revealing JUnit tests...
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-3/ErrorTest0.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-3/ErrorTest.java
Wrote error-revealing JUnit tests.

About to look for failing assertions in 2262 regression sequences.

Regression test output:
Regression test count: 2262
Writing regression JUnit tests...
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-3/RegressionTest0.java
                                                                                                                                                                                                       Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-3/RegressionTest1.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-3/RegressionTest2.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-3/RegressionTest3.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-3/RegressionTest4.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-3/RegressionTest5.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-3/RegressionTest6.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-3/RegressionTest7.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-3/RegressionTest8.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-3/RegressionTest9.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-3/RegressionTest10.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-3/RegressionTest11.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-3/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Invalid tests generated: 0

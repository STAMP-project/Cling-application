Randoop for Java version "4.3.0, local changes, branch master, commit 7af20ae, 2022-01-31".
Cannot instantiate non-accessible class com.google.javascript.rhino.jstype.PrototypeObjectType specified via --testclass or --classlist; will use its static methods.
Cannot instantiate non-accessible class com.google.javascript.rhino.jstype.ProxyObjectType specified via --testclass or --classlist; will use its static methods.

Will try to generate tests for 44 classes.
PUBLIC MEMBERS=981
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2022-02-23T04:15:29.881Z     365M used)
Progress update: steps=1000, test inputs generated=345, failing inputs=0      (2022-02-23T04:15:32.420Z     846M used)
Progress update: steps=2000, test inputs generated=752, failing inputs=0      (2022-02-23T04:15:34.035Z     216M used)
Progress update: steps=3000, test inputs generated=1194, failing inputs=0      (2022-02-23T04:15:35.839Z     567M used)
Progress update: steps=4000, test inputs generated=1637, failing inputs=0      (2022-02-23T04:15:37.413Z     1.15G used)
Progress update: steps=5000, test inputs generated=2092, failing inputs=0      (2022-02-23T04:15:39.397Z     420M used)
Progress update: steps=6000, test inputs generated=2544, failing inputs=1      (2022-02-23T04:15:41.410Z     1.22G used)
Progress update: steps=7000, test inputs generated=2988, failing inputs=1      (2022-02-23T04:15:42.947Z     1.18G used)
Progress update: steps=8000, test inputs generated=3415, failing inputs=1      (2022-02-23T04:15:44.713Z     1.31G used)
Progress update: steps=9000, test inputs generated=3862, failing inputs=1      (2022-02-23T04:15:47.228Z     513M used)
Progress update: steps=10000, test inputs generated=4314, failing inputs=1      (2022-02-23T04:15:49.292Z     646M used)
Progress update: steps=11000, test inputs generated=4722, failing inputs=1      (2022-02-23T04:15:51.211Z     782M used)
Progress update: steps=12000, test inputs generated=5162, failing inputs=1      (2022-02-23T04:15:53.517Z     1.19G used)
Progress update: steps=13000, test inputs generated=5616, failing inputs=1      (2022-02-23T04:15:55.282Z     1.11G used)
Progress update: steps=14000, test inputs generated=6039, failing inputs=1      (2022-02-23T04:15:57.173Z     1.17G used)
Progress update: steps=15000, test inputs generated=6453, failing inputs=1      (2022-02-23T04:16:00.110Z     1.36G used)
Progress update: steps=16000, test inputs generated=6864, failing inputs=1      (2022-02-23T04:16:02.757Z     1.28G used)
Progress update: steps=17000, test inputs generated=7307, failing inputs=1      (2022-02-23T04:16:05.929Z     494M used)
Progress update: steps=18000, test inputs generated=7746, failing inputs=1      (2022-02-23T04:16:09.322Z     1.02G used)
Progress update: steps=19000, test inputs generated=8170, failing inputs=1      (2022-02-23T04:16:12.054Z     57.0M used)
Progress update: steps=20000, test inputs generated=8614, failing inputs=1      (2022-02-23T04:16:16.032Z     332M used)
Progress update: steps=21000, test inputs generated=9045, failing inputs=1      (2022-02-23T04:16:19.439Z     609M used)
Progress update: steps=22000, test inputs generated=9446, failing inputs=1      (2022-02-23T04:16:23.534Z     932M used)
Progress update: steps=23000, test inputs generated=9858, failing inputs=1      (2022-02-23T04:16:27.337Z     1.21G used)
Progress update: steps=23551, test inputs generated=10089, failing inputs=1      (2022-02-23T04:16:29.895Z     1.06G used)
Progress update: steps=24000, test inputs generated=10272, failing inputs=1      (2022-02-23T04:16:31.303Z     579M used)
Progress update: steps=25000, test inputs generated=10704, failing inputs=1      (2022-02-23T04:16:35.295Z     1.13G used)
Progress update: steps=26000, test inputs generated=11143, failing inputs=1      (2022-02-23T04:16:40.529Z     445M used)
Progress update: steps=27000, test inputs generated=11566, failing inputs=1      (2022-02-23T04:16:45.371Z     1.08G used)
Progress update: steps=28000, test inputs generated=12035, failing inputs=1      (2022-02-23T04:16:50.676Z     260M used)
Progress update: steps=29000, test inputs generated=12469, failing inputs=1      (2022-02-23T04:16:56.599Z     1.36G used)
Progress update: steps=30000, test inputs generated=12882, failing inputs=1      (2022-02-23T04:17:02.119Z     255M used)
Progress update: steps=31000, test inputs generated=13293, failing inputs=1      (2022-02-23T04:17:08.085Z     561M used)
Progress update: steps=32000, test inputs generated=13713, failing inputs=1      (2022-02-23T04:17:15.484Z     1.14G used)
Progress update: steps=33000, test inputs generated=14138, failing inputs=1      (2022-02-23T04:17:20.759Z     369M used)
Progress update: steps=34000, test inputs generated=14600, failing inputs=1      (2022-02-23T04:17:28.711Z     1.14G used)
Progress update: steps=34243, test inputs generated=14703, failing inputs=1      (2022-02-23T04:17:29.895Z     186M used)
Progress update: steps=35000, test inputs generated=15026, failing inputs=1      (2022-02-23T04:17:34.916Z     481M used)
Progress update: steps=36000, test inputs generated=15436, failing inputs=1      (2022-02-23T04:17:42.409Z     894M used)
Progress update: steps=37000, test inputs generated=15843, failing inputs=1      (2022-02-23T04:17:51.249Z     1.39G used)
Progress update: steps=38000, test inputs generated=16268, failing inputs=1      (2022-02-23T04:17:59.687Z     842M used)Long generation time 1813 msec for null sequence.

Progress update: steps=39000, test inputs generated=16700, failing inputs=1      (2022-02-23T04:18:09.268Z     406M used)
Progress update: steps=40000, test inputs generated=17119, failing inputs=1      (2022-02-23T04:18:19.434Z     361M used)
Progress update: steps=41000, test inputs generated=17507, failing inputs=1      (2022-02-23T04:18:28.720Z     322M used)
Progress update: steps=41196, test inputs generated=17580, failing inputs=1      (2022-02-23T04:18:29.896Z     627M used)
Progress update: steps=42000, test inputs generated=17925, failing inputs=1      (2022-02-23T04:18:38.257Z     630M used)
Progress update: steps=43000, test inputs generated=18366, failing inputs=1      (2022-02-23T04:18:48.362Z     580M used)
Progress update: steps=44000, test inputs generated=18756, failing inputs=1      (2022-02-23T04:18:57.596Z     771M used)Long generation time 1981 msec for null sequence.

Progress update: steps=45000, test inputs generated=19175, failing inputs=1      (2022-02-23T04:19:10.273Z     913M used)
Progress update: steps=46000, test inputs generated=19575, failing inputs=1      (2022-02-23T04:19:21.031Z     555M used)
Progress update: steps=46735, test inputs generated=19880, failing inputs=1      (2022-02-23T04:19:29.896Z     465M used)
Progress update: steps=47000, test inputs generated=19992, failing inputs=1      (2022-02-23T04:19:31.103Z     779M used)
Progress update: steps=48000, test inputs generated=20395, failing inputs=1      (2022-02-23T04:19:42.706Z     323M used)
Progress update: steps=49000, test inputs generated=20816, failing inputs=1      (2022-02-23T04:19:52.583Z     689M used)
Progress update: steps=50000, test inputs generated=21252, failing inputs=1      (2022-02-23T04:20:06.626Z     301M used)
Progress update: steps=51000, test inputs generated=21685, failing inputs=1      (2022-02-23T04:20:17.997Z     285M used)
Progress update: steps=51807, test inputs generated=22031, failing inputs=1      (2022-02-23T04:20:29.921Z     53.5M used)Long generation time 1454 msec for null sequence.
Long generation time 1049 msec for null sequence.
Long generation time 1928 msec for null sequence.

Progress update: steps=52000, test inputs generated=22121, failing inputs=1      (2022-02-23T04:20:35.408Z     614M used)Long generation time 2672 msec for null sequence.

Progress update: steps=53000, test inputs generated=22520, failing inputs=1      (2022-02-23T04:20:52.499Z     402M used)Long generation time 1771 msec for null sequence.

Progress update: steps=54000, test inputs generated=22928, failing inputs=1      (2022-02-23T04:21:09.322Z     297M used)
Progress update: steps=55000, test inputs generated=23362, failing inputs=1      (2022-02-23T04:21:23.136Z     157M used)
Progress update: steps=55541, test inputs generated=23581, failing inputs=1      (2022-02-23T04:21:29.922Z     478M used)Long generation time 1563 msec for null sequence.

Progress update: steps=56000, test inputs generated=23780, failing inputs=1      (2022-02-23T04:21:38.915Z     239M used)Long generation time 1390 msec for null sequence.

Progress update: steps=57000, test inputs generated=24222, failing inputs=1      (2022-02-23T04:21:52.871Z     180M used)
Progress update: steps=58000, test inputs generated=24666, failing inputs=1      (2022-02-23T04:22:10.421Z     415M used)
Progress update: steps=59000, test inputs generated=25099, failing inputs=1      (2022-02-23T04:22:27.110Z     152M used)
Progress update: steps=59201, test inputs generated=25186, failing inputs=1      (2022-02-23T04:22:29.922Z     341M used)
Progress update: steps=60000, test inputs generated=25526, failing inputs=1      (2022-02-23T04:22:43.748Z     345M used)Long generation time 2026 msec for null sequence.

Progress update: steps=61000, test inputs generated=25941, failing inputs=1      (2022-02-23T04:23:01.088Z     463M used)Long generation time 1485 msec for null sequence.
Long generation time 3372 msec for null sequence.

Progress update: steps=62000, test inputs generated=26349, failing inputs=1      (2022-02-23T04:23:20.435Z     637M used)
Progress update: steps=62856, test inputs generated=26686, failing inputs=1      (2022-02-23T04:23:29.923Z     662M used)Long generation time 2929 msec for null sequence.

Progress update: steps=63000, test inputs generated=26753, failing inputs=1      (2022-02-23T04:23:35.228Z     334M used)Long generation time 1193 msec (= 1193 + 0) for
java.lang.Object[] objArray1 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList2 = com.google.common.collect.ImmutableList.copyOf(objArray1);
com.google.common.collect.UnmodifiableIterator<java.lang.Object> objItor3 = objList2.iterator();
java.lang.Object[] objArray5 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList6 = com.google.common.collect.ImmutableList.copyOf(objArray5);
boolean boolean7 = objList2.containsAll((java.util.Collection<java.lang.Object>)objList6);
int int9 = objList2.indexOf((java.lang.Object)0.0d);
java.lang.Object[] objArray10 = objList2.toArray();
com.google.common.collect.UnmodifiableIterator<java.lang.Object> objItor11 = objList2.iterator();
java.lang.Object[] objArray12 = objList2.toArray();
java.lang.Object[] objArray14 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList15 = com.google.common.collect.ImmutableList.copyOf(objArray14);
com.google.common.collect.UnmodifiableIterator<java.lang.Object> objItor16 = objList15.iterator();
java.lang.Object[] objArray18 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList19 = com.google.common.collect.ImmutableList.copyOf(objArray18);
boolean boolean20 = objList15.containsAll((java.util.Collection<java.lang.Object>)objList19);
int int22 = objList15.indexOf((java.lang.Object)0.0d);
java.lang.Object[] objArray24 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList25 = com.google.common.collect.ImmutableList.copyOf(objArray24);
com.google.common.collect.UnmodifiableIterator<java.lang.Object> objItor26 = objList25.iterator();
com.google.common.collect.ImmutableList<java.util.HashSet<java.lang.String>> strSetList27 = com.google.common.collect.ImmutableList.copyOf((java.util.Collection<java.lang.Object>)objList25);
java.util.ListIterator<java.lang.Object> objItor28 = objList25.listIterator();
boolean boolean29 = objList15.containsAll((java.util.Collection<java.lang.Object>)objList25);
java.lang.Object[] objArray31 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList32 = com.google.common.collect.ImmutableList.copyOf(objArray31);
com.google.common.collect.UnmodifiableIterator<java.lang.Object> objItor33 = objList32.iterator();
com.google.common.collect.ImmutableList<java.util.HashSet<java.lang.String>> strSetList34 = com.google.common.collect.ImmutableList.copyOf((java.util.Collection<java.lang.Object>)objList32);
java.util.Spliterator<java.lang.Object> objSpliterator35 = objList32.spliterator();
java.util.Iterator<java.lang.Object> objItor36 = objList32.iterator();
java.lang.Object[] objArray37 = objList32.toArray();
boolean boolean38 = objList25.containsAll((java.util.Collection<java.lang.Object>)objList32);
com.google.common.collect.UnmodifiableIterator<java.lang.Object> objItor39 = objList25.iterator();
boolean boolean40 = objList2.retainAll((java.util.Collection<java.lang.Object>)objList25);

Long generation time 1598 msec for null sequence.

Progress update: steps=64000, test inputs generated=27189, failing inputs=1      (2022-02-23T04:23:51.992Z     505M used)Long generation time 1226 msec for null sequence.

Progress update: steps=65000, test inputs generated=27625, failing inputs=1      (2022-02-23T04:24:13.273Z     251M used)Long generation time 1338 msec for null sequence.

Progress update: steps=65843, test inputs generated=27975, failing inputs=1      (2022-02-23T04:24:29.923Z     440M used)
Progress update: steps=66000, test inputs generated=28048, failing inputs=1      (2022-02-23T04:24:32.566Z     364M used)Long generation time 1036 msec (= 1036 + 0) for
java.lang.Object[] objArray1 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList2 = com.google.common.collect.ImmutableList.copyOf(objArray1);
java.lang.Object[] objArray4 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList5 = com.google.common.collect.ImmutableList.copyOf(objArray4);
java.lang.Object[] objArray6 = objList5.toArray();
boolean boolean7 = objList2.containsAll((java.util.Collection<java.lang.Object>)objList5);
java.util.Iterator<java.lang.Object> objItor8 = objList5.iterator();
com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(15);
java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable11 = node10.siblings();
int int12 = objList5.indexOf((java.lang.Object)node10);
java.lang.Object[] objArray14 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList15 = com.google.common.collect.ImmutableList.copyOf(objArray14);
java.lang.Object[] objArray16 = objList15.toArray();
java.lang.Object[] objArray18 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList19 = com.google.common.collect.ImmutableList.copyOf(objArray18);
java.lang.Object[] objArray20 = objList19.toArray();
java.lang.Object[] objArray22 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList23 = com.google.common.collect.ImmutableList.copyOf(objArray22);
java.lang.Object[] objArray24 = objList23.toArray();
java.lang.Object[] objArray26 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList27 = com.google.common.collect.ImmutableList.copyOf(objArray26);
java.lang.Object[] objArray29 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList30 = com.google.common.collect.ImmutableList.copyOf(objArray29);
java.lang.Object[] objArray31 = objList30.toArray();
boolean boolean32 = objList27.containsAll((java.util.Collection<java.lang.Object>)objList30);
java.lang.Object[] objArray34 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList35 = com.google.common.collect.ImmutableList.copyOf(objArray34);
java.lang.Object[] objArray37 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList38 = com.google.common.collect.ImmutableList.copyOf(objArray37);
java.lang.Object[] objArray39 = objList38.toArray();
boolean boolean40 = objList35.containsAll((java.util.Collection<java.lang.Object>)objList38);
java.lang.Object[] objArray42 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList43 = com.google.common.collect.ImmutableList.copyOf(objArray42);
java.lang.Object[] objArray45 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList46 = com.google.common.collect.ImmutableList.copyOf(objArray45);
java.lang.Object[] objArray47 = objList46.toArray();
boolean boolean48 = objList43.containsAll((java.util.Collection<java.lang.Object>)objList46);
java.lang.Object[] objArray50 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList51 = com.google.common.collect.ImmutableList.copyOf(objArray50);
java.lang.Object[] objArray52 = objList51.toArray();
java.lang.Object[] objArray54 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList55 = com.google.common.collect.ImmutableList.copyOf(objArray54);
java.lang.Object[] objArray57 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList58 = com.google.common.collect.ImmutableList.copyOf(objArray57);
java.lang.Object[] objArray60 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList61 = com.google.common.collect.ImmutableList.copyOf(objArray60);
java.lang.Object[] objArray62 = objList61.toArray();
java.lang.Object[] objArray64 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList65 = com.google.common.collect.ImmutableList.copyOf(objArray64);
java.lang.Object[] objArray67 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList68 = com.google.common.collect.ImmutableList.copyOf(objArray67);
java.lang.Object[] objArray69 = objList68.toArray();
boolean boolean70 = objList65.containsAll((java.util.Collection<java.lang.Object>)objList68);
java.lang.Object[] objArray72 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList73 = com.google.common.collect.ImmutableList.copyOf(objArray72);
java.lang.Object[] objArray74 = objList73.toArray();
com.google.common.collect.ImmutableCollection[] immutableCollectionArray76 = new com.google.common.collect.ImmutableCollection[ 0 ];
@SuppressWarnings("unchecked")
com.google.common.collect.ImmutableCollection<java.lang.Object>[] objCollectionArray77 = (com.google.common.collect.ImmutableCollection<java.lang.Object>[])immutableCollectionArray76;
com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableCollection<java.lang.Object>> objCollectionList78 = com.google.common.collect.ImmutableList.of((com.google.common.collect.ImmutableCollection<java.lang.Object>)objList15, (com.google.common.collect.ImmutableCollection<java.lang.Object>)objList19, (com.google.common.collect.ImmutableCollection<java.lang.Object>)objList23, (com.google.common.collect.ImmutableCollection<java.lang.Object>)objList30, (com.google.common.collect.ImmutableCollection<java.lang.Object>)objList38, (com.google.common.collect.ImmutableCollection<java.lang.Object>)objList43, (com.google.common.collect.ImmutableCollection<java.lang.Object>)objList51, (com.google.common.collect.ImmutableCollection<java.lang.Object>)objList55, (com.google.common.collect.ImmutableCollection<java.lang.Object>)objList58, (com.google.common.collect.ImmutableCollection<java.lang.Object>)objList61, (com.google.common.collect.ImmutableCollection<java.lang.Object>)objList65, (com.google.common.collect.ImmutableCollection<java.lang.Object>)objList73, objCollectionArray77);
com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString("", 0, (int)(byte)-1);
boolean boolean83 = node82.isNumber();
boolean boolean84 = node82.isDefaultCase();
boolean boolean85 = node82.isEmpty();
java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable86 = node82.children();
int int87 = objList19.indexOf((java.lang.Object)nodeIterable86);
com.google.common.collect.ImmutableList<java.lang.Object> objList88 = objList19.reverse();
com.google.common.collect.ImmutableList<java.lang.Object> objList89 = objList88.asList();
com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList90 = com.google.common.collect.ImmutableList.copyOf((java.lang.Iterable<java.lang.Object>)objList89);
boolean boolean91 = objList5.addAll((java.util.Collection<java.lang.Object>)objList89);

Long generation time 1855 msec for null sequence.
Long generation time 1781 msec for null sequence.
Long generation time 1059 msec for null sequence.

Progress update: steps=67000, test inputs generated=28469, failing inputs=1      (2022-02-23T04:24:59.900Z     143M used)Long generation time 1085 msec (= 1085 + 0) for
java.lang.Object[] objArray1 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList2 = com.google.common.collect.ImmutableList.copyOf(objArray1);
java.lang.Object[] objArray4 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList5 = com.google.common.collect.ImmutableList.copyOf(objArray4);
java.lang.Object[] objArray6 = objList5.toArray();
boolean boolean7 = objList2.containsAll((java.util.Collection<java.lang.Object>)objList5);
int int9 = objList2.lastIndexOf((java.lang.Object)10.0f);
com.google.common.collect.ImmutableList<java.lang.Object> objList10 = objList2.asList();
java.util.Spliterator<java.lang.Object> objSpliterator11 = objList2.spliterator();
com.google.common.collect.ImmutableList<java.lang.Object> objList12 = objList2.asList();
com.google.common.collect.ImmutableList<java.lang.Object> objList13 = objList2.reverse();
com.google.common.collect.ImmutableList<java.lang.Object> objList14 = objList2.asList();
java.lang.Object[] objArray17 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList18 = com.google.common.collect.ImmutableList.copyOf(objArray17);
java.lang.Object[] objArray19 = objList18.toArray();
java.lang.Object[] objArray21 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList22 = com.google.common.collect.ImmutableList.copyOf(objArray21);
java.lang.Object[] objArray23 = objList22.toArray();
java.lang.Object[] objArray25 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList26 = com.google.common.collect.ImmutableList.copyOf(objArray25);
java.lang.Object[] objArray27 = objList26.toArray();
java.lang.Object[] objArray29 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList30 = com.google.common.collect.ImmutableList.copyOf(objArray29);
java.lang.Object[] objArray32 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList33 = com.google.common.collect.ImmutableList.copyOf(objArray32);
java.lang.Object[] objArray34 = objList33.toArray();
boolean boolean35 = objList30.containsAll((java.util.Collection<java.lang.Object>)objList33);
java.lang.Object[] objArray37 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList38 = com.google.common.collect.ImmutableList.copyOf(objArray37);
java.lang.Object[] objArray40 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList41 = com.google.common.collect.ImmutableList.copyOf(objArray40);
java.lang.Object[] objArray42 = objList41.toArray();
boolean boolean43 = objList38.containsAll((java.util.Collection<java.lang.Object>)objList41);
java.lang.Object[] objArray45 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList46 = com.google.common.collect.ImmutableList.copyOf(objArray45);
java.lang.Object[] objArray48 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList49 = com.google.common.collect.ImmutableList.copyOf(objArray48);
java.lang.Object[] objArray50 = objList49.toArray();
boolean boolean51 = objList46.containsAll((java.util.Collection<java.lang.Object>)objList49);
java.lang.Object[] objArray53 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList54 = com.google.common.collect.ImmutableList.copyOf(objArray53);
java.lang.Object[] objArray55 = objList54.toArray();
java.lang.Object[] objArray57 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList58 = com.google.common.collect.ImmutableList.copyOf(objArray57);
java.lang.Object[] objArray60 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList61 = com.google.common.collect.ImmutableList.copyOf(objArray60);
java.lang.Object[] objArray63 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList64 = com.google.common.collect.ImmutableList.copyOf(objArray63);
java.lang.Object[] objArray65 = objList64.toArray();
java.lang.Object[] objArray67 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList68 = com.google.common.collect.ImmutableList.copyOf(objArray67);
java.lang.Object[] objArray70 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList71 = com.google.common.collect.ImmutableList.copyOf(objArray70);
java.lang.Object[] objArray72 = objList71.toArray();
boolean boolean73 = objList68.containsAll((java.util.Collection<java.lang.Object>)objList71);
java.lang.Object[] objArray75 = new java.lang.Object[] { (short)10 };
com.google.common.collect.ImmutableList<java.lang.Object> objList76 = com.google.common.collect.ImmutableList.copyOf(objArray75);
java.lang.Object[] objArray77 = objList76.toArray();
com.google.common.collect.ImmutableCollection[] immutableCollectionArray79 = new com.google.common.collect.ImmutableCollection[ 0 ];
@SuppressWarnings("unchecked")
com.google.common.collect.ImmutableCollection<java.lang.Object>[] objCollectionArray80 = (com.google.common.collect.ImmutableCollection<java.lang.Object>[])immutableCollectionArray79;
com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableCollection<java.lang.Object>> objCollectionList81 = com.google.common.collect.ImmutableList.of((com.google.common.collect.ImmutableCollection<java.lang.Object>)objList18, (com.google.common.collect.ImmutableCollection<java.lang.Object>)objList22, (com.google.common.collect.ImmutableCollection<java.lang.Object>)objList26, (com.google.common.collect.ImmutableCollection<java.lang.Object>)objList33, (com.google.common.collect.ImmutableCollection<java.lang.Object>)objList41, (com.google.common.collect.ImmutableCollection<java.lang.Object>)objList46, (com.google.common.collect.ImmutableCollection<java.lang.Object>)objList54, (com.google.common.collect.ImmutableCollection<java.lang.Object>)objList58, (com.google.common.collect.ImmutableCollection<java.lang.Object>)objList61, (com.google.common.collect.ImmutableCollection<java.lang.Object>)objList64, (com.google.common.collect.ImmutableCollection<java.lang.Object>)objList68, (com.google.common.collect.ImmutableCollection<java.lang.Object>)objList76, objCollectionArray80);
com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(29);
boolean boolean84 = objList22.contains((java.lang.Object)29);
com.google.common.collect.ImmutableList<java.lang.Object> objList85 = objList22.asList();
com.google.common.collect.ImmutableList<java.lang.Object> objList86 = objList85.asList();
java.lang.Object[] objArray87 = objList85.toArray();
java.lang.Object[] objArray88 = objList85.toArray();
boolean boolean89 = objList2.addAll(7, (java.util.Collection<java.lang.Object>)objList85);

Long generation time 1277 msec for null sequence.
Long generation time 1539 msec for null sequence.
Long generation time 1061 msec for null sequence.
Long generation time 1132 msec for null sequence.

Progress update: steps=68000, test inputs generated=28870, failing inputs=1      (2022-02-23T04:25:27.921Z     249M used)
Progress update: steps=68102, test inputs generated=28914, failing inputs=1      (2022-02-23T04:25:29.924Z     408M used)Long generation time 1920 msec for null sequence.

Progress update: steps=68102, test inputs generated=28914, failing inputs=1      (2022-02-23T04:25:31.223Z     416M used)
Normal method executions: 36045545
Exceptional method executions: 4206

Average method execution time (normal termination):      0.000128
Average method execution time (exceptional termination): 0.0447
Approximate memory usage 416M
Explorer = ForwardGenerator(steps: 68102, null steps: 39188, num_sequences_generated: 28914;
    allSequences: 28914, regresson seqs: 210, error seqs: 1=1=1, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 28703;
    runtimePrimitivesSeen:277)

Error-revealing test output:
Error-revealing test count: 1
Writing error-revealing JUnit tests...
Created file /experiment/results/randoop10/closure-com.google.javascript.rhino.jstype.JSType-com.google.javascript.rhino.jstype.FunctionType-15/ErrorTest0.java
Created file /experiment/results/randoop10/closure-com.google.javascript.rhino.jstype.JSType-com.google.javascript.rhino.jstype.FunctionType-15/ErrorTest.java
Wrote error-revealing JUnit tests.

About to look for failing assertions in 143 regression sequences.

Regression test output:
Regression test count: 143
Writing regression JUnit tests...
Created file /experiment/results/randoop10/closure-com.google.javascript.rhino.jstype.JSType-com.google.javascript.rhino.jstype.FunctionType-15/RegressionTest0.java
Created file /experiment/results/randoop10/closure-com.google.javascript.rhino.jstype.JSType-com.google.javascript.rhino.jstype.FunctionType-15/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Invalid tests generated: 0

Uncompilable sequences generated (count: 3).
Please report uncompilable sequences at https://github.com/randoop/randoop/issues ,
providing the information requested at https://randoop.github.io/randoop/manual/index.html#bug-reporting .

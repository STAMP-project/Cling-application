Randoop for Java version "4.3.0, local changes, branch master, commit 7af20ae, 2022-01-31".

Will try to generate tests for 22 classes.
PUBLIC MEMBERS=332
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2022-02-22T19:03:05.081Z     226M used)
Progress update: steps=1000, test inputs generated=742, failing inputs=0      (2022-02-22T19:03:13.474Z     791M used)
Progress update: steps=2000, test inputs generated=1574, failing inputs=0      (2022-02-22T19:03:20.612Z     397M used)
Progress update: steps=3000, test inputs generated=2391, failing inputs=0      (2022-02-22T19:03:26.933Z     431M used)
Progress update: steps=4000, test inputs generated=3224, failing inputs=0      (2022-02-22T19:03:33.106Z     250M used)
Progress update: steps=5000, test inputs generated=4012, failing inputs=0      (2022-02-22T19:03:38.478Z     1.31G used)
Progress update: steps=6000, test inputs generated=4821, failing inputs=0      (2022-02-22T19:03:44.434Z     1.31G used)
Progress update: steps=7000, test inputs generated=5640, failing inputs=0      (2022-02-22T19:03:49.874Z     1.07G used)
Progress update: steps=8000, test inputs generated=6451, failing inputs=0      (2022-02-22T19:03:55.991Z     1.15G used)
Progress update: steps=9000, test inputs generated=7232, failing inputs=0      (2022-02-22T19:04:01.191Z     992M used)
Progress update: steps=9722, test inputs generated=7798, failing inputs=0      (2022-02-22T19:04:05.104Z     354M used)
Progress update: steps=10000, test inputs generated=8033, failing inputs=0      (2022-02-22T19:04:06.508Z     1.18G used)
Progress update: steps=11000, test inputs generated=8834, failing inputs=0      (2022-02-22T19:04:11.326Z     878M used)
Progress update: steps=12000, test inputs generated=9634, failing inputs=0      (2022-02-22T19:04:16.120Z     746M used)
Progress update: steps=13000, test inputs generated=10426, failing inputs=0      (2022-02-22T19:04:21.741Z     879M used)
Progress update: steps=14000, test inputs generated=11211, failing inputs=0      (2022-02-22T19:04:26.580Z     829M used)
Progress update: steps=15000, test inputs generated=11997, failing inputs=0      (2022-02-22T19:04:31.271Z     781M used)
Progress update: steps=15270, test inputs generated=12215, failing inputs=0      (2022-02-22T19:05:05.105Z     280M used)Long execution time 172 sec for
org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
org.apache.commons.math.distribution.BinomialDistribution binomialDistribution3 = distributionFactory0.createBinomialDistribution((int)(byte)10, 1.0d);
org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution7 = distributionFactory0.createHypergeometricDistribution((int)(byte)100, (int)(short)0, (int)'a');
double double9 = hypergeometricDistribution7.probability((int)'u');
double double11 = hypergeometricDistribution7.cumulativeProbability((double)(-1.0f));
hypergeometricDistribution7.setPopulationSize((int)(short)1);
hypergeometricDistribution7.setPopulationSize(2147483646);
double double17 = hypergeometricDistribution7.probability(0);


Progress update: steps=16000, test inputs generated=12792, failing inputs=0      (2022-02-22T19:07:28.336Z     1.01G used)
Progress update: steps=17000, test inputs generated=13572, failing inputs=0      (2022-02-22T19:07:32.288Z     993M used)
Progress update: steps=17590, test inputs generated=14038, failing inputs=0      (2022-02-22T19:08:55.860Z     1.26G used)Long execution time 165 sec for
org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
org.apache.commons.math.distribution.BinomialDistribution binomialDistribution3 = distributionFactory0.createBinomialDistribution((int)(byte)10, 1.0d);
org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution7 = distributionFactory0.createHypergeometricDistribution((int)(byte)100, (int)(short)0, (int)'a');
double double9 = hypergeometricDistribution7.probability((int)'u');
double double11 = hypergeometricDistribution7.cumulativeProbability((double)(-1.0f));
hypergeometricDistribution7.setPopulationSize((int)(short)1);
hypergeometricDistribution7.setPopulationSize(2147483646);
double double17 = hypergeometricDistribution7.probability(0);
hypergeometricDistribution7.setNumberOfSuccesses(2611);


Progress update: steps=18000, test inputs generated=14361, failing inputs=0      (2022-02-22T19:10:21.468Z     998M used)
Progress update: steps=19000, test inputs generated=15144, failing inputs=0      (2022-02-22T19:10:24.986Z     1,11G used)
Progress update: steps=19900, test inputs generated=15838, failing inputs=0      (2022-02-22T19:11:53.684Z     604M used)Long execution time 178 sec for
java.io.PrintStream printStream1 = new java.io.PrintStream("hi!");
java.lang.CharSequence charSequence2 = null;
java.io.PrintStream printStream3 = printStream1.append(charSequence2);
java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream)printStream3);
printStream4.print((long)(byte)100);
java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream)printStream4);
java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream)printStream4, false);
org.apache.commons.math.distribution.DistributionFactory distributionFactory10 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
org.apache.commons.math.distribution.BinomialDistribution binomialDistribution13 = distributionFactory10.createBinomialDistribution((int)(byte)10, 1.0d);
org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution17 = distributionFactory10.createHypergeometricDistribution((int)(byte)100, (int)(short)0, (int)'a');
double double19 = hypergeometricDistribution17.probability((int)'u');
double double21 = hypergeometricDistribution17.cumulativeProbability((double)(-1.0f));
hypergeometricDistribution17.setPopulationSize((int)(short)1);
hypergeometricDistribution17.setPopulationSize(2147483646);
double double27 = hypergeometricDistribution17.probability(0);
hypergeometricDistribution17.setNumberOfSuccesses(2611);
printStream4.print((java.lang.Object)hypergeometricDistribution17);


Progress update: steps=19900, test inputs generated=15839, failing inputs=0      (2022-02-22T19:13:26.449Z     604M used)
Normal method executions: 7663991
Exceptional method executions: 3884

Average method execution time (normal termination):      0.0682
Average method execution time (exceptional termination): 0.0665
Approximate memory usage 604M
Explorer = ForwardGenerator(steps: 19900, null steps: 4061, num_sequences_generated: 15839;
    allSequences: 15839, regresson seqs: 3192, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 12647;
    runtimePrimitivesSeen:592)

No error-revealing tests to output.

About to look for failing assertions in 2293 regression sequences.

Regression test output:
Regression test count: 2293
Writing regression JUnit tests...
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-15/RegressionTest0.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-15/RegressionTest1.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-15/RegressionTest2.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-15/RegressionTest3.java
                                                                                                                                                                                                       Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-15/RegressionTest4.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-15/RegressionTest5.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-15/RegressionTest6.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-15/RegressionTest7.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-15/RegressionTest8.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-15/RegressionTest9.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-15/RegressionTest10.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-15/RegressionTest11.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-15/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  org.apache.commons.math.distribution.WeibullDistribution.setScale(double)
  Possibly flaky:  org.apache.commons.math.distribution.WeibullDistribution.getShape()
  Possibly flaky:  org.apache.commons.math.distribution.WeibullDistribution.getScale()
  Possibly flaky:  java.util.Objects.toString(java.lang.Object)
  Possibly flaky:  java.util.Locale.toString()
  Possibly flaky:  java.util.Locale.hasExtensions()
  Possibly flaky:  java.util.Locale.getUnicodeLocaleType(java.lang.String)
  Possibly flaky:  java.util.Locale.getDisplayName()
  Possibly flaky:  java.util.Locale.getDisplayCountry(java.util.Locale)
  Possibly flaky:  java.util.Locale.getDefault(java.util.Locale.Category)
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

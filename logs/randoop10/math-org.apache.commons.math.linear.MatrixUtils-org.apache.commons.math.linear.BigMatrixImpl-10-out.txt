Randoop for Java version "4.3.0, local changes, branch master, commit 7af20ae, 2022-01-31".

Will try to generate tests for 8 classes.
PUBLIC MEMBERS=222
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2022-02-22T18:45:41.453Z     215M used)
Progress update: steps=1000, test inputs generated=935, failing inputs=36      (2022-02-22T18:46:00.660Z     1.13G used)
Progress update: steps=2000, test inputs generated=1837, failing inputs=75      (2022-02-22T18:46:19.066Z     556M used)
Progress update: steps=2921, test inputs generated=2646, failing inputs=98      (2022-02-22T18:46:41.466Z     1.39G used)
Progress update: steps=3000, test inputs generated=2715, failing inputs=98      (2022-02-22T18:46:43.338Z     850M used)
Progress update: steps=4000, test inputs generated=3557, failing inputs=125      (2022-02-22T18:47:02.868Z     971M used)
Progress update: steps=4396, test inputs generated=3888, failing inputs=144      (2022-02-22T18:47:52.608Z     3.04G used)Long execution time 43 sec for
org.apache.commons.math.linear.BigMatrix bigMatrix1 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int)(short)25884);


Progress update: steps=5000, test inputs generated=4400, failing inputs=164      (2022-02-22T18:48:44.892Z     3.37G used)
Progress update: steps=5143, test inputs generated=4521, failing inputs=166      (2022-02-22T18:48:52.609Z     3.56G used)Long generation time 1128 msec (= 1128 + 0) for
double[] doubleArray6 = new double[] { (short)-1, 0, (-1), 1.0d, 1.0f, 0 };
org.apache.commons.math.linear.RealMatrix realMatrix7 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray6);
org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix7.copy();
double[] doubleArray15 = new double[] { (short)-1, 0, (-1), 1.0d, 1.0f, 0 };
org.apache.commons.math.linear.RealMatrix realMatrix16 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray15);
org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrix16.copy();
org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrix7.subtract(realMatrix16);
double[][] doubleArray19 = realMatrix16.getData();
org.apache.commons.math.linear.BigMatrix bigMatrix20 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray19);
java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal24 = bigDecimal22.movePointLeft((int)(short)1);
java.lang.String str25 = bigDecimal24.toPlainString();
java.math.BigDecimal bigDecimal26 = bigDecimal24.stripTrailingZeros();
org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrix20.scalarMultiply(bigDecimal26);
double[] doubleArray34 = new double[] { 100, (short)10, 1.0f, (byte)10, (byte)-1, 100L };
org.apache.commons.math.linear.RealMatrix realMatrix35 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray34);
org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray34);
boolean boolean37 = bigDecimal26.equals((java.lang.Object)doubleArray34);
java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.valueOf((long)0, 10);
java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal((long)(byte)1);
java.math.BigDecimal bigDecimal43 = bigDecimal42.negate();
java.math.BigDecimal bigDecimal45 = java.math.BigDecimal.valueOf((double)100);
java.lang.String str46 = bigDecimal45.toString();
java.math.BigDecimal bigDecimal47 = bigDecimal45.ulp();
java.math.BigDecimal bigDecimal49 = bigDecimal47.pow(0);
int int50 = bigDecimal49.intValueExact();
java.math.BigDecimal bigDecimal51 = bigDecimal43.divideToIntegralValue(bigDecimal49);
java.math.BigDecimal bigDecimal52 = bigDecimal40.min(bigDecimal43);
java.math.BigDecimal bigDecimal55 = bigDecimal26.divide(bigDecimal43, 97, 32);


Progress update: steps=5925, test inputs generated=5181, failing inputs=194      (2022-02-22T18:52:50.877Z     2.76G used)Long execution time 182 sec for
double[] doubleArray5 = new double[] { 1.0f, '4', (-1.0d), 0L, '4' };
double[] doubleArray11 = new double[] { 1.0f, '4', (-1.0d), 0L, '4' };
double[] doubleArray17 = new double[] { 1.0f, '4', (-1.0d), 0L, '4' };
double[] doubleArray23 = new double[] { 1.0f, '4', (-1.0d), 0L, '4' };
double[] doubleArray29 = new double[] { 1.0f, '4', (-1.0d), 0L, '4' };
double[][] doubleArray30 = new double[][] { doubleArray5, doubleArray11, doubleArray17, doubleArray23, doubleArray29 };
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
double[] doubleArray33 = bigMatrixImpl31.getColumnAsDoubleArray(0);
java.math.BigDecimal[][] bigDecimalArray34 = bigMatrixImpl31.getDataRef();
java.math.BigDecimal bigDecimal35 = bigMatrixImpl31.getDeterminant();
java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal("100.0");
org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl31.scalarAdd(bigDecimal37);
java.math.BigDecimal bigDecimal39 = bigMatrixImpl31.getTrace();
java.math.BigDecimal bigDecimal41 = bigDecimal39.pow(3);
double[] doubleArray48 = new double[] { (short)-1, 0, (-1), 1.0d, 1.0f, 0 };
org.apache.commons.math.linear.RealMatrix realMatrix49 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray48);
org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrix49.copy();
double[] doubleArray57 = new double[] { 100, (short)10, 1.0f, (byte)10, (byte)-1, 100L };
org.apache.commons.math.linear.RealMatrix realMatrix58 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray57);
double[] doubleArray59 = realMatrix50.operate(doubleArray57);
org.apache.commons.math.linear.BigMatrix bigMatrix60 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray57);
org.apache.commons.math.linear.RealMatrix realMatrix61 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray57);
int int62 = realMatrix61.getRowDimension();
double[] doubleArray64 = realMatrix61.getRow(3);
org.apache.commons.math.linear.BigMatrix bigMatrix65 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray64);
java.math.BigDecimal bigDecimal66 = bigMatrix65.getDeterminant();
boolean boolean67 = bigDecimal39.equals((java.lang.Object)bigDecimal66);


Progress update: steps=6000, test inputs generated=5246, failing inputs=199      (2022-02-22T18:52:54.932Z     2.91G used)Long execution time 23 sec for
org.apache.commons.math.linear.BigMatrix bigMatrix1 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int)(short)25884);
java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal7 = bigDecimal5.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray8 = new java.math.BigDecimal[] { bigDecimal3, bigDecimal7 };
org.apache.commons.math.linear.BigMatrix bigMatrix9 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray8);
java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal15 = bigDecimal13.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray16 = new java.math.BigDecimal[] { bigDecimal11, bigDecimal15 };
org.apache.commons.math.linear.BigMatrix bigMatrix17 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray16);
java.math.BigDecimal[] bigDecimalArray18 = bigMatrix9.preMultiply(bigDecimalArray16);
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray18);
java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal((long)(-1));
short short22 = bigDecimal21.shortValueExact();
java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal26 = bigDecimal24.movePointLeft((int)(short)1);
boolean boolean27 = bigDecimal21.equals((java.lang.Object)bigDecimal24);
org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl19.scalarAdd(bigDecimal21);
java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal34 = bigDecimal32.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray35 = new java.math.BigDecimal[] { bigDecimal30, bigDecimal34 };
org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray35);
java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal42 = bigDecimal40.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray43 = new java.math.BigDecimal[] { bigDecimal38, bigDecimal42 };
org.apache.commons.math.linear.BigMatrix bigMatrix44 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray43);
java.math.BigDecimal[] bigDecimalArray45 = bigMatrix36.preMultiply(bigDecimalArray43);
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray45);
java.math.BigDecimal[] bigDecimalArray47 = bigMatrix28.preMultiply(bigDecimalArray45);
org.apache.commons.math.linear.BigMatrix bigMatrix48 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray47);
org.apache.commons.math.linear.BigMatrix bigMatrix49 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray47);
java.math.BigDecimal[] bigDecimalArray50 = bigMatrix1.solve(bigDecimalArray47);


Progress update: steps=6325, test inputs generated=5526, failing inputs=203      (2022-02-22T18:56:26.957Z     2.94G used)Long execution time 167 sec for
org.apache.commons.math.linear.BigMatrix bigMatrix1 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix(10100);


Progress update: steps=6325, test inputs generated=5527, failing inputs=203      (2022-02-22T18:56:36.936Z     3.34G used)
Normal method executions: 18158928
Exceptional method executions: 2033

Average method execution time (normal termination):      0.0118
Average method execution time (exceptional termination): 11.7
Approximate memory usage 3.34G
Explorer = ForwardGenerator(steps: 6325, null steps: 798, num_sequences_generated: 5527;
    allSequences: 5527, regresson seqs: 4361, error seqs: 203=203=203, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 963;
    runtimePrimitivesSeen:144)

Error-revealing test output:
Error-revealing test count: 203
Writing error-revealing JUnit tests...
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-10/ErrorTest0.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-10/ErrorTest1.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-10/ErrorTest.java
Wrote error-revealing JUnit tests.

About to look for failing assertions in 2779 regression sequences.

Regression test output:
Regression test count: 2779
Writing regression JUnit tests...
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-10/RegressionTest0.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-10/RegressionTest1.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-10/RegressionTest2.java
                                                                                                                                                                                                       Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-10/RegressionTest3.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-10/RegressionTest4.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-10/RegressionTest5.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-10/RegressionTest6.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-10/RegressionTest7.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-10/RegressionTest8.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-10/RegressionTest9.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-10/RegressionTest10.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-10/RegressionTest11.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-10/RegressionTest12.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-10/RegressionTest13.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-10/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Invalid tests generated: 0

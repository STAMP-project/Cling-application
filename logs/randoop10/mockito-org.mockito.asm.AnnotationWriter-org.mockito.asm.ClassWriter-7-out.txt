Randoop for Java version "4.3.0, local changes, branch master, commit 7af20ae, 2022-01-31".
Cannot instantiate non-accessible class org.mockito.asm.AnnotationWriter specified via --testclass or --classlist; will use its static methods.

Will try to generate tests for 12 classes.
PUBLIC MEMBERS=120
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2022-02-22T15:54:13.424Z     226M used)
Progress update: steps=1000, test inputs generated=596, failing inputs=0      (2022-02-22T15:54:20.772Z     843M used)
Progress update: steps=2000, test inputs generated=1258, failing inputs=0      (2022-02-22T15:54:27.216Z     624M used)
Progress update: steps=3000, test inputs generated=1956, failing inputs=0      (2022-02-22T15:54:33.675Z     1.09G used)
Progress update: steps=4000, test inputs generated=2639, failing inputs=0      (2022-02-22T15:54:40.168Z     1.51G used)
Progress update: steps=5000, test inputs generated=3290, failing inputs=0      (2022-02-22T15:54:45.962Z     1.46G used)
Progress update: steps=6000, test inputs generated=3975, failing inputs=0      (2022-02-22T15:54:52.625Z     771M used)
Progress update: steps=7000, test inputs generated=4615, failing inputs=0      (2022-02-22T15:54:59.600Z     1.04G used)
Progress update: steps=8000, test inputs generated=5256, failing inputs=0      (2022-02-22T15:55:06.137Z     1.35G used)
Progress update: steps=9000, test inputs generated=5892, failing inputs=0      (2022-02-22T15:55:12.338Z     311M used)
Progress update: steps=9188, test inputs generated=6013, failing inputs=0      (2022-02-22T15:55:13.437Z     897M used)
Progress update: steps=10000, test inputs generated=6552, failing inputs=0      (2022-02-22T15:55:19.448Z     752M used)
Progress update: steps=11000, test inputs generated=7210, failing inputs=0      (2022-02-22T15:55:27.112Z     1.56G used)
Progress update: steps=12000, test inputs generated=7854, failing inputs=0      (2022-02-22T15:55:35.250Z     677M used)
Progress update: steps=13000, test inputs generated=8491, failing inputs=0      (2022-02-22T15:55:44.023Z     964M used)
Progress update: steps=14000, test inputs generated=9143, failing inputs=0      (2022-02-22T15:55:56.366Z     1.50G used)
Progress update: steps=14968, test inputs generated=9756, failing inputs=0      (2022-02-22T15:56:13.438Z     1.08G used)
Progress update: steps=15000, test inputs generated=9776, failing inputs=0      (2022-02-22T15:56:14.091Z     1.15G used)
Progress update: steps=16000, test inputs generated=10411, failing inputs=0      (2022-02-22T15:56:23.482Z     3.46G used)
Progress update: steps=17000, test inputs generated=11031, failing inputs=0      (2022-02-22T15:56:34.760Z     2.56G used)
Progress update: steps=18000, test inputs generated=11677, failing inputs=0      (2022-02-22T15:56:48.398Z     3.40G used)
Progress update: steps=19000, test inputs generated=12328, failing inputs=0      (2022-02-22T15:57:01.161Z     2.85G used)
Progress update: steps=19855, test inputs generated=12853, failing inputs=0      (2022-02-22T15:57:13.439Z     2.85G used)
Progress update: steps=20000, test inputs generated=12947, failing inputs=0      (2022-02-22T15:57:17.865Z     2.82G used)
Progress update: steps=21000, test inputs generated=13614, failing inputs=0      (2022-02-22T15:57:31.403Z     3.40G used)
Progress update: steps=22000, test inputs generated=14246, failing inputs=0      (2022-02-22T15:57:48.111Z     3.96G used)
Progress update: steps=23000, test inputs generated=14901, failing inputs=0      (2022-02-22T15:58:05.253Z     2.95G used)
Progress update: steps=23813, test inputs generated=15415, failing inputs=0      (2022-02-22T15:58:13.439Z     3.60G used)
Progress update: steps=24000, test inputs generated=15526, failing inputs=0      (2022-02-22T15:58:15.452Z     3.06G used)
Progress update: steps=25000, test inputs generated=16146, failing inputs=0      (2022-02-22T15:58:29.442Z     3.08G used)
Progress update: steps=26000, test inputs generated=16792, failing inputs=0      (2022-02-22T15:58:46.081Z     3.30G used)
Progress update: steps=27000, test inputs generated=17413, failing inputs=0      (2022-02-22T15:58:59.469Z     3.12G used)
Progress update: steps=28000, test inputs generated=18064, failing inputs=0      (2022-02-22T15:59:10.767Z     3.87G used)
Progress update: steps=28228, test inputs generated=18217, failing inputs=0      (2022-02-22T15:59:13.440Z     3.76G used)
Progress update: steps=29000, test inputs generated=18689, failing inputs=0      (2022-02-22T15:59:23.503Z     3.58G used)
Progress update: steps=30000, test inputs generated=19325, failing inputs=0      (2022-02-22T15:59:38.796Z     3.56G used)
Progress update: steps=31000, test inputs generated=19956, failing inputs=0      (2022-02-22T15:59:50.126Z     3.58G used)
Progress update: steps=32000, test inputs generated=20596, failing inputs=0      (2022-02-22T16:00:01.627Z     3.89G used)
Progress update: steps=32978, test inputs generated=21186, failing inputs=0      (2022-02-22T16:00:13.440Z     3.27G used)
Progress update: steps=33000, test inputs generated=21197, failing inputs=0      (2022-02-22T16:00:13.779Z     3.34G used)
Progress update: steps=34000, test inputs generated=21822, failing inputs=0      (2022-02-22T16:00:25.897Z     3.86G used)
Progress update: steps=35000, test inputs generated=22426, failing inputs=0      (2022-02-22T16:00:39.864Z     3.30G used)
Progress update: steps=36000, test inputs generated=23047, failing inputs=0      (2022-02-22T16:00:51.787Z     3.63G used)
Progress update: steps=37000, test inputs generated=23680, failing inputs=0      (2022-02-22T16:01:02.829Z     3.51G used)
Progress update: steps=37912, test inputs generated=24283, failing inputs=0      (2022-02-22T16:01:13.440Z     3.93G used)
Progress update: steps=38000, test inputs generated=24339, failing inputs=0      (2022-02-22T16:01:14.773Z     3.58G used)
Progress update: steps=39000, test inputs generated=24984, failing inputs=0      (2022-02-22T16:01:27.108Z     3.47G used)
Progress update: steps=40000, test inputs generated=25618, failing inputs=0      (2022-02-22T16:01:39.191Z     3.52G used)
Progress update: steps=41000, test inputs generated=26237, failing inputs=0      (2022-02-22T16:01:52.283Z     3.63G used)
Progress update: steps=42000, test inputs generated=26877, failing inputs=0      (2022-02-22T16:02:06.427Z     3.61G used)
Progress update: steps=42603, test inputs generated=27247, failing inputs=0      (2022-02-22T16:02:13.441Z     3.60G used)
Progress update: steps=43000, test inputs generated=27491, failing inputs=0      (2022-02-22T16:02:20.984Z     3.95G used)
Progress update: steps=43804, test inputs generated=27993, failing inputs=0      (2022-02-22T16:03:13.868Z     3.96G used)
Progress update: steps=44000, test inputs generated=28112, failing inputs=0      (2022-02-22T16:03:26.742Z     3.97G used)
Problem with sequence:
int int0 = 1; // [NormalExecution 1 [class java.lang.Integer]]
org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(1); // [NormalExecution org.mockito.asm.ClassWriter@6872962d [class org.mockito.asm.ClassWriter]]
java.lang.String str2 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
java.lang.String str3 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
classWriter1.visitSource("hi!", "hi!"); // [NormalExecution null]
java.lang.String str5 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
java.lang.String str6 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
classWriter1.visitSource("hi!", "hi!"); // [NormalExecution null]
java.lang.String str8 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str9 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
java.lang.String str10 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
boolean boolean11 = false; // [NormalExecution false [class java.lang.Boolean]]
int int12 = classWriter1.newMethod("", "hi!", "hi!", false); // [NormalExecution 5 [class java.lang.Integer]]
java.lang.String str13 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
java.lang.String str14 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str15 = "java.io.IOException"; // [NormalExecution java.io.IOException [class java.lang.String]]
classWriter1.visitOuterClass("hi!", "", "java.io.IOException"); // [NormalExecution null]
java.lang.String str17 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str18 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
java.lang.String str19 = "java.io.IOException"; // [NormalExecution java.io.IOException [class java.lang.String]]
int int20 = classWriter1.newField("", "hi!", "java.io.IOException"); // [NormalExecution 10 [class java.lang.Integer]]
classWriter1.visitEnd(); // [NormalExecution null]
int int22 = 20; // [NormalExecution 20 [class java.lang.Integer]]
java.lang.String str23 = "L1510513704"; // [NormalExecution L1510513704 [class java.lang.String]]
java.lang.String str24 = "L472911569"; // [NormalExecution L472911569 [class java.lang.String]]
java.lang.String str25 = "L2118175058"; // [NormalExecution L2118175058 [class java.lang.String]]
byte byte26 = (byte)1; // [NormalExecution 1 [class java.lang.Byte]]
org.mockito.asm.ByteVector byteVector27 = new org.mockito.asm.ByteVector((int)(byte)1); // [NormalExecution org.mockito.asm.ByteVector@40bf64ff [class org.mockito.asm.ByteVector]]
java.lang.String str28 = ""; // [NormalExecution  [class java.lang.String]]
org.mockito.asm.ByteVector byteVector29 = byteVector27.putUTF8(""); // [NormalExecution org.mockito.asm.ByteVector@40bf64ff [class org.mockito.asm.ByteVector]]
long long30 = 10L; // [NormalExecution 10 [class java.lang.Long]]
org.mockito.asm.ByteVector byteVector31 = byteVector27.putLong(10L); // [NormalExecution org.mockito.asm.ByteVector@40bf64ff [class org.mockito.asm.ByteVector]]
java.lang.String str32 = ""; // [NormalExecution  [class java.lang.String]]
org.mockito.asm.ByteVector byteVector33 = byteVector31.putUTF8(""); // [NormalExecution org.mockito.asm.ByteVector@40bf64ff [class org.mockito.asm.ByteVector]]
byte byte34 = (byte)10; // [NormalExecution 10 [class java.lang.Byte]]
org.mockito.asm.ByteVector byteVector35 = byteVector33.putByte((int)(byte)10); // [NormalExecution org.mockito.asm.ByteVector@40bf64ff [class org.mockito.asm.ByteVector]]
org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter1.visitField(20, "L1510513704", "L472911569", "L2118175058", (java.lang.Object)(byte)10); // [NormalExecution org.mockito.asm.FieldWriter@1f597d78 [class org.mockito.asm.FieldWriter]]
java.lang.String str37 = "L934178171"; // [NormalExecution L934178171 [class java.lang.String]]
java.lang.String str38 = "L453476418"; // [NormalExecution L453476418 [class java.lang.String]]
java.lang.String str39 = ""; // [NormalExecution  [class java.lang.String]]
classWriter1.visitOuterClass("L934178171", "L453476418", ""); // [NormalExecution null]
int int41 = 203; // [NormalExecution 203 [class java.lang.Integer]]
java.lang.String str42 = "L1267374431"; // [NormalExecution L1267374431 [class java.lang.String]]
java.lang.String str43 = "L1971280978"; // [NormalExecution L1971280978 [class java.lang.String]]
java.lang.String str44 = "L280003989"; // [NormalExecution L280003989 [class java.lang.String]]
int int45 = 1; // [NormalExecution 1 [class java.lang.Integer]]
org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(1); // [NormalExecution org.mockito.asm.ClassWriter@135c4173 [class org.mockito.asm.ClassWriter]]
java.lang.String str47 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
java.lang.String str48 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
classWriter46.visitSource("hi!", "hi!"); // [NormalExecution null]
java.lang.String str50 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
java.lang.String str51 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
classWriter46.visitSource("hi!", "hi!"); // [NormalExecution null]
java.lang.String str53 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str54 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
java.lang.String str55 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
boolean boolean56 = false; // [NormalExecution false [class java.lang.Boolean]]
int int57 = classWriter46.newMethod("", "hi!", "hi!", false); // [NormalExecution 5 [class java.lang.Integer]]
java.lang.String str58 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
java.lang.String str59 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str60 = "java.io.IOException"; // [NormalExecution java.io.IOException [class java.lang.String]]
classWriter46.visitOuterClass("hi!", "", "java.io.IOException"); // [NormalExecution null]
java.lang.String str62 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str63 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
java.lang.String str64 = "java.io.IOException"; // [NormalExecution java.io.IOException [class java.lang.String]]
int int65 = classWriter46.newField("", "hi!", "java.io.IOException"); // [NormalExecution 10 [class java.lang.Integer]]
byte[] byteArray66 = classWriter46.toByteArray(); // [NormalExecution [-54, -2, -70, -66, 0, 0, 0, 0, 0, 14, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 12, 0, 1, 0, 1, 10, 0, 3, 0, 4, 7, 0, 1, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 2, 0, 7, 12, 0, 1, 0, 7, 9, 0, 3, 0, 9, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 11, 0, 0, 0, 2, 0, 1, 0, 12, 0, 0, 0, 3, 104, 105, 33, 0, 13, 0, 0, 0, 4, 0, 6, 0, 8] [class [B]]
java.lang.String str67 = "L1265012661"; // [NormalExecution L1265012661 [class java.lang.String]]
java.lang.String str68 = "L1749751055"; // [NormalExecution L1749751055 [class java.lang.String]]
java.lang.String str69 = ""; // [NormalExecution  [class java.lang.String]]
int int70 = 2560; // [NormalExecution 2560 [class java.lang.Integer]]
classWriter46.visitInnerClass("L1265012661", "L1749751055", "", 2560); // [NormalExecution null]
org.mockito.asm.FieldVisitor fieldVisitor72 = classWriter1.visitField(203, "L1267374431", "L1971280978", "L280003989", (java.lang.Object)"L1265012661"); // [NormalExecution org.mockito.asm.FieldWriter@272d06f7 [class org.mockito.asm.FieldWriter]]
java.lang.String str73 = "L407647781"; // [NormalExecution L407647781 [class java.lang.String]]
boolean boolean74 = true; // [NormalExecution true [class java.lang.Boolean]]
org.mockito.asm.AnnotationVisitor annotationVisitor75 = fieldVisitor72.visitAnnotation("L407647781", true); // [NormalExecution org.mockito.asm.AnnotationWriter@6b2aeb9d [class org.mockito.asm.AnnotationWriter]]
org.mockito.asm.Attribute attribute76 = null; // [NormalExecution null]
fieldVisitor72.visitAttribute(attribute76); // [ExceptionalExecution, java.lang.NullPointerException, at org.mockito.asm.FieldWriter.visitAttribute(FieldWriter.java:159)]
<randoop.PrimValue, value=5 [int12]>
<randoop.PrimValue, value=10 [int20]>
<randoop.contract.IsNotNull@1f [byteVector29]>
<randoop.contract.IsNotNull@1f [byteVector31]>
<randoop.contract.IsNotNull@1f [byteVector33]>
<randoop.contract.IsNotNull@1f [byteVector35]>
<randoop.contract.IsNotNull@1f [fieldVisitor36]>
<randoop.PrimValue, value=5 [int57]>
<randoop.PrimValue, value=10 [int65]>
<randoop.contract.IsNotNull@1f [byteArray66]>
<<ObserverEqValue java.util.Arrays.toString : (byte[]) -> java.lang.String, value = '[-54, -2, -70, -66, 0, 0, 0, 0, 0, 14, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 12, 0, 1, 0, 1, 10, 0, 3, 0, 4, 7, 0, 1, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 2, 0, 7, 12, 0, 1, 0, 7, 9, 0, 3, 0, 9, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 11, 0, 0, 0, 2, 0, 1, 0, 12, 0, 0, 0, 3, 104, 105, 33, 0, 13, 0, 0, 0, 4, 0, 6, 0, 8] [class java.lang.String]' [byteArray66]>
<randoop.contract.IsNotNull@1f [fieldVisitor72]>
<randoop.contract.IsNotNull@1f [annotationVisitor75]>
java.lang.OutOfMemoryError: GC overhead limit exceeded

createAndClassifySequences threw an exception
java.lang.OutOfMemoryError: GC overhead limit exceeded


Throwable thrown while handling command: java.lang.OutOfMemoryError: GC overhead limit exceeded
java.lang.OutOfMemoryError: GC overhead limit exceeded

Randoop failed.
Last sequence under execution: 
org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(1);
classWriter1.visitSource("hi!", "hi!");
classWriter1.visitSource("hi!", "hi!");
int int12 = classWriter1.newMethod("", "hi!", "hi!", false);
classWriter1.visitOuterClass("hi!", "", "java.io.IOException");
int int20 = classWriter1.newField("", "hi!", "java.io.IOException");
classWriter1.visitEnd();
org.mockito.asm.ByteVector byteVector27 = new org.mockito.asm.ByteVector((int)(byte)1);
org.mockito.asm.ByteVector byteVector29 = byteVector27.putUTF8("");
org.mockito.asm.ByteVector byteVector31 = byteVector27.putLong(10L);
org.mockito.asm.ByteVector byteVector33 = byteVector31.putUTF8("");
org.mockito.asm.ByteVector byteVector35 = byteVector33.putByte((int)(byte)10);
org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter1.visitField(20, "L1510513704", "L472911569", "L2118175058", (java.lang.Object)(byte)10);
classWriter1.visitOuterClass("L934178171", "L453476418", "");
org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(1);
classWriter46.visitSource("hi!", "hi!");
classWriter46.visitSource("hi!", "hi!");
int int57 = classWriter46.newMethod("", "hi!", "hi!", false);
classWriter46.visitOuterClass("hi!", "", "java.io.IOException");
int int65 = classWriter46.newField("", "hi!", "java.io.IOException");
byte[] byteArray66 = classWriter46.toByteArray();
classWriter46.visitInnerClass("L1265012661", "L1749751055", "", 2560);
org.mockito.asm.FieldVisitor fieldVisitor72 = classWriter1.visitField(203, "L1267374431", "L1971280978", "L280003989", (java.lang.Object)"L1265012661");
org.mockito.asm.AnnotationVisitor annotationVisitor75 = fieldVisitor72.visitAnnotation("L407647781", true);
org.mockito.asm.Attribute attribute76 = null;
fieldVisitor72.visitAttribute(attribute76);

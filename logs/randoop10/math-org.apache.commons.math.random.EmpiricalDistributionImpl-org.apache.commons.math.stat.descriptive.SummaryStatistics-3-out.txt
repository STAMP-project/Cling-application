Randoop for Java version "4.3.0, local changes, branch master, commit 7af20ae, 2022-01-31".

Will try to generate tests for 22 classes.
PUBLIC MEMBERS=264
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2022-02-22T19:10:13.703Z     226M used)
Progress update: steps=1000, test inputs generated=690, failing inputs=2      (2022-02-22T19:10:21.766Z     1.33G used)
Progress update: steps=2000, test inputs generated=1511, failing inputs=3      (2022-02-22T19:10:31.062Z     1.08G used)
Progress update: steps=3000, test inputs generated=2321, failing inputs=5      (2022-02-22T19:10:40.875Z     1.35G used)
Progress update: steps=4000, test inputs generated=3126, failing inputs=7      (2022-02-22T19:10:49.613Z     1.29G used)
Progress update: steps=5000, test inputs generated=3915, failing inputs=11      (2022-02-22T19:10:58.233Z     2.16G used)
Progress update: steps=6000, test inputs generated=4713, failing inputs=12      (2022-02-22T19:11:09.199Z     2.23G used)
Progress update: steps=6358, test inputs generated=4999, failing inputs=12      (2022-02-22T19:11:13.717Z     2.60G used)
Progress update: steps=7000, test inputs generated=5492, failing inputs=12      (2022-02-22T19:11:20.031Z     2.46G used)
Progress update: steps=8000, test inputs generated=6281, failing inputs=13      (2022-02-22T19:11:28.800Z     3.59G used)
Progress update: steps=9000, test inputs generated=7082, failing inputs=13      (2022-02-22T19:11:49.807Z     3.22G used)
Progress update: steps=9177, test inputs generated=7224, failing inputs=14      (2022-02-22T19:12:14.236Z     3.26G used)
Problem with sequence:
org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(); // [NormalExecution org.apache.commons.math.stat.descriptive.moment.GeometricMean@7f0803c1 [class org.apache.commons.math.stat.descriptive.moment.GeometricMean]]
double double1 = geometricMean0.getResult(); // [NormalExecution NaN [class java.lang.Double]]
long long2 = geometricMean0.getN(); // [NormalExecution 0 [class java.lang.Long]]
double double3 = geometricMean0.getResult(); // [NormalExecution NaN [class java.lang.Double]]
double double4 = geometricMean0.getResult(); // [NormalExecution NaN [class java.lang.Double]]
long long5 = geometricMean0.getN(); // [NormalExecution 0 [class java.lang.Long]]
<randoop.PrimValue, value=NaN [double1]>
<randoop.PrimValue, value=0 [long2]>
<randoop.PrimValue, value=NaN [double3]>
<randoop.PrimValue, value=NaN [double4]>
<randoop.PrimValue, value=0 [long5]>
java.lang.OutOfMemoryError: GC overhead limit exceeded
	at randoop.com.github.javaparser.Position.withColumn(Position.java:93)
	at randoop.com.github.javaparser.printer.SourcePrinter.append(SourcePrinter.java:161)
	at randoop.com.github.javaparser.printer.SourcePrinter.print(SourcePrinter.java:183)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:376)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:163)
	at randoop.com.github.javaparser.ast.expr.SimpleName.accept(SimpleName.java:76)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:530)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:163)
	at randoop.com.github.javaparser.ast.type.ClassOrInterfaceType.accept(ClassOrInterfaceType.java:114)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:525)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:163)
	at randoop.com.github.javaparser.ast.type.ClassOrInterfaceType.accept(ClassOrInterfaceType.java:114)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:525)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:163)
	at randoop.com.github.javaparser.ast.type.ClassOrInterfaceType.accept(ClassOrInterfaceType.java:114)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:525)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:163)
	at randoop.com.github.javaparser.ast.type.ClassOrInterfaceType.accept(ClassOrInterfaceType.java:114)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:525)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:163)
	at randoop.com.github.javaparser.ast.type.ClassOrInterfaceType.accept(ClassOrInterfaceType.java:114)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:525)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:163)
	at randoop.com.github.javaparser.ast.type.ClassOrInterfaceType.accept(ClassOrInterfaceType.java:114)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinter.print(DefaultPrettyPrinter.java:104)
	at randoop.com.github.javaparser.ast.Node.toString(Node.java:322)
	at randoop.com.github.javaparser.ast.nodeTypes.NodeWithVariables$$Lambda$186/1955920234.apply(Unknown Source)
	at java.util.Optional.map(Optional.java:215)
	at randoop.com.github.javaparser.ast.nodeTypes.NodeWithVariables.lambda$calculateMaximumCommonType$1(NodeWithVariables.java:163)
	at randoop.com.github.javaparser.ast.nodeTypes.NodeWithVariables$$Lambda$184/525968792.apply(Unknown Source)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1384)

createAndClassifySequences threw an exception
java.lang.OutOfMemoryError: GC overhead limit exceeded
	at randoop.com.github.javaparser.Position.withColumn(Position.java:93)
	at randoop.com.github.javaparser.printer.SourcePrinter.append(SourcePrinter.java:161)
	at randoop.com.github.javaparser.printer.SourcePrinter.print(SourcePrinter.java:183)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:376)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:163)
	at randoop.com.github.javaparser.ast.expr.SimpleName.accept(SimpleName.java:76)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:530)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:163)
	at randoop.com.github.javaparser.ast.type.ClassOrInterfaceType.accept(ClassOrInterfaceType.java:114)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:525)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:163)
	at randoop.com.github.javaparser.ast.type.ClassOrInterfaceType.accept(ClassOrInterfaceType.java:114)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:525)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:163)
	at randoop.com.github.javaparser.ast.type.ClassOrInterfaceType.accept(ClassOrInterfaceType.java:114)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:525)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:163)
	at randoop.com.github.javaparser.ast.type.ClassOrInterfaceType.accept(ClassOrInterfaceType.java:114)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:525)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:163)
	at randoop.com.github.javaparser.ast.type.ClassOrInterfaceType.accept(ClassOrInterfaceType.java:114)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:525)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:163)
	at randoop.com.github.javaparser.ast.type.ClassOrInterfaceType.accept(ClassOrInterfaceType.java:114)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinter.print(DefaultPrettyPrinter.java:104)
	at randoop.com.github.javaparser.ast.Node.toString(Node.java:322)
	at randoop.com.github.javaparser.ast.nodeTypes.NodeWithVariables$$Lambda$186/1955920234.apply(Unknown Source)
	at java.util.Optional.map(Optional.java:215)
	at randoop.com.github.javaparser.ast.nodeTypes.NodeWithVariables.lambda$calculateMaximumCommonType$1(NodeWithVariables.java:163)
	at randoop.com.github.javaparser.ast.nodeTypes.NodeWithVariables$$Lambda$184/525968792.apply(Unknown Source)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1384)


Throwable thrown while handling command: java.lang.OutOfMemoryError: GC overhead limit exceeded
java.lang.OutOfMemoryError: GC overhead limit exceeded
	at randoop.com.github.javaparser.Position.withColumn(Position.java:93)
	at randoop.com.github.javaparser.printer.SourcePrinter.append(SourcePrinter.java:161)
	at randoop.com.github.javaparser.printer.SourcePrinter.print(SourcePrinter.java:183)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:376)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:163)
	at randoop.com.github.javaparser.ast.expr.SimpleName.accept(SimpleName.java:76)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:530)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:163)
	at randoop.com.github.javaparser.ast.type.ClassOrInterfaceType.accept(ClassOrInterfaceType.java:114)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:525)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:163)
	at randoop.com.github.javaparser.ast.type.ClassOrInterfaceType.accept(ClassOrInterfaceType.java:114)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:525)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:163)
	at randoop.com.github.javaparser.ast.type.ClassOrInterfaceType.accept(ClassOrInterfaceType.java:114)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:525)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:163)
	at randoop.com.github.javaparser.ast.type.ClassOrInterfaceType.accept(ClassOrInterfaceType.java:114)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:525)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:163)
	at randoop.com.github.javaparser.ast.type.ClassOrInterfaceType.accept(ClassOrInterfaceType.java:114)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:525)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(DefaultPrettyPrinterVisitor.java:163)
	at randoop.com.github.javaparser.ast.type.ClassOrInterfaceType.accept(ClassOrInterfaceType.java:114)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinter.print(DefaultPrettyPrinter.java:104)
	at randoop.com.github.javaparser.ast.Node.toString(Node.java:322)
	at randoop.com.github.javaparser.ast.nodeTypes.NodeWithVariables$$Lambda$186/1955920234.apply(Unknown Source)
	at java.util.Optional.map(Optional.java:215)
	at randoop.com.github.javaparser.ast.nodeTypes.NodeWithVariables.lambda$calculateMaximumCommonType$1(NodeWithVariables.java:163)
	at randoop.com.github.javaparser.ast.nodeTypes.NodeWithVariables$$Lambda$184/525968792.apply(Unknown Source)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1384)

Randoop failed.
Last sequence under execution: 
org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
double double1 = geometricMean0.getResult();
long long2 = geometricMean0.getN();
double double3 = geometricMean0.getResult();
double double4 = geometricMean0.getResult();
long long5 = geometricMean0.getN();

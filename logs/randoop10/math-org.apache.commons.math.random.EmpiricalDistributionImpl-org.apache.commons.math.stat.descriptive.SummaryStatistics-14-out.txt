Randoop for Java version "4.3.0, local changes, branch master, commit 7af20ae, 2022-01-31".

Will try to generate tests for 22 classes.
PUBLIC MEMBERS=264
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2022-02-22T19:10:58.230Z     226M used)
Progress update: steps=1000, test inputs generated=757, failing inputs=2      (2022-02-22T19:11:04.924Z     178M used)
Progress update: steps=2000, test inputs generated=1582, failing inputs=5      (2022-02-22T19:11:13.724Z     345M used)
Progress update: steps=3000, test inputs generated=2402, failing inputs=7      (2022-02-22T19:11:22.624Z     911M used)
Progress update: steps=4000, test inputs generated=3213, failing inputs=8      (2022-02-22T19:11:30.586Z     716M used)
Progress update: steps=5000, test inputs generated=4024, failing inputs=9      (2022-02-22T19:11:38.748Z     368M used)
Progress update: steps=6000, test inputs generated=4843, failing inputs=13      (2022-02-22T19:11:48.936Z     686M used)
Progress update: steps=6894, test inputs generated=5563, failing inputs=13      (2022-02-22T19:11:58.243Z     410M used)
Progress update: steps=7000, test inputs generated=5648, failing inputs=13      (2022-02-22T19:11:59.959Z     1.12G used)
Progress update: steps=8000, test inputs generated=6425, failing inputs=13      (2022-02-22T19:12:10.469Z     756M used)
Progress update: steps=9000, test inputs generated=7241, failing inputs=13      (2022-02-22T19:12:21.818Z     962M used)
Progress update: steps=10000, test inputs generated=8023, failing inputs=13      (2022-02-22T19:12:31.971Z     1.63G used)
Progress update: steps=11000, test inputs generated=8818, failing inputs=15      (2022-02-22T19:12:43.530Z     1.07G used)
Progress update: steps=12000, test inputs generated=9586, failing inputs=17      (2022-02-22T19:12:54.943Z     1.45G used)
Progress update: steps=12304, test inputs generated=9813, failing inputs=17      (2022-02-22T19:12:58.244Z     1.88G used)
Progress update: steps=13000, test inputs generated=10359, failing inputs=17      (2022-02-22T19:13:07.905Z     1.77G used)
Progress update: steps=14000, test inputs generated=11143, failing inputs=19      (2022-02-22T19:13:19.328Z     1.05G used)
Progress update: steps=15000, test inputs generated=11940, failing inputs=20      (2022-02-22T19:13:32.141Z     1.67G used)
Progress update: steps=16000, test inputs generated=12715, failing inputs=21      (2022-02-22T19:13:45.228Z     1.94G used)
Progress update: steps=17000, test inputs generated=13516, failing inputs=23      (2022-02-22T19:13:56.745Z     1.32G used)
Progress update: steps=17116, test inputs generated=13617, failing inputs=23      (2022-02-22T19:13:58.244Z     2.10G used)
Progress update: steps=18000, test inputs generated=14305, failing inputs=23      (2022-02-22T19:14:08.382Z     2.32G used)
Progress update: steps=19000, test inputs generated=15107, failing inputs=24      (2022-02-22T19:14:20.277Z     1.80G used)
Progress update: steps=20000, test inputs generated=15869, failing inputs=27      (2022-02-22T19:14:31.066Z     1.98G used)
Progress update: steps=21000, test inputs generated=16662, failing inputs=27      (2022-02-22T19:14:44.195Z     1.54G used)
Progress update: steps=22000, test inputs generated=17430, failing inputs=29      (2022-02-22T19:14:56.289Z     1.94G used)
Progress update: steps=22202, test inputs generated=17594, failing inputs=30      (2022-02-22T19:14:58.708Z     1.81G used)
Progress update: steps=23000, test inputs generated=18205, failing inputs=32      (2022-02-22T19:15:07.929Z     2.42G used)
Progress update: steps=24000, test inputs generated=18977, failing inputs=32      (2022-02-22T19:15:21.720Z     1.98G used)
Progress update: steps=25000, test inputs generated=19732, failing inputs=34      (2022-02-22T19:15:33.668Z     2.40G used)
Progress update: steps=26000, test inputs generated=20499, failing inputs=35      (2022-02-22T19:15:49.624Z     2.04G used)
Progress update: steps=26764, test inputs generated=21069, failing inputs=35      (2022-02-22T19:15:58.708Z     2.48G used)
Progress update: steps=27000, test inputs generated=21248, failing inputs=35      (2022-02-22T19:16:01.860Z     2.79G used)
Progress update: steps=28000, test inputs generated=22025, failing inputs=36      (2022-02-22T19:16:14.907Z     3.30G used)
Progress update: steps=29000, test inputs generated=22810, failing inputs=37      (2022-02-22T19:16:30.289Z     3.13G used)
Progress update: steps=30000, test inputs generated=23579, failing inputs=39      (2022-02-22T19:16:43.126Z     2.46G used)
Progress update: steps=31000, test inputs generated=24356, failing inputs=40      (2022-02-22T19:16:57.008Z     3.23G used)
Progress update: steps=31143, test inputs generated=24467, failing inputs=40      (2022-02-22T19:16:58.731Z     2.77G used)
Progress update: steps=32000, test inputs generated=25125, failing inputs=40      (2022-02-22T19:17:13.213Z     3.47G used)
Progress update: steps=33000, test inputs generated=25909, failing inputs=40      (2022-02-22T19:17:26.003Z     3.45G used)
Progress update: steps=34000, test inputs generated=26690, failing inputs=40      (2022-02-22T19:17:38.827Z     2.87G used)
Progress update: steps=35000, test inputs generated=27466, failing inputs=44      (2022-02-22T19:17:53.053Z     3.25G used)
Progress update: steps=35513, test inputs generated=27870, failing inputs=44      (2022-02-22T19:17:58.732Z     3.88G used)
Progress update: steps=36000, test inputs generated=28242, failing inputs=44      (2022-02-22T19:18:06.381Z     3.44G used)Long generation time 4942 msec (= 4942 + 0) for
java.io.File file2 = java.io.File.createTempFile("hi!", "hi!");
boolean boolean3 = file2.canWrite();
boolean boolean4 = file2.canExecute();
long long5 = file2.getTotalSpace();
java.net.URL uRL6 = file2.toURL();
java.net.URLConnection uRLConnection7 = uRL6.openConnection();
int int8 = uRL6.getDefaultPort();
java.lang.String str9 = uRL6.getUserInfo();
java.lang.String str10 = uRL6.getFile();
java.lang.String str11 = uRL6.getHost();
java.io.File file14 = java.io.File.createTempFile("hi!", "hi!");
boolean boolean15 = file14.canWrite();
boolean boolean16 = file14.canExecute();
long long17 = file14.getTotalSpace();
java.net.URL uRL18 = file14.toURL();
java.lang.String str19 = uRL18.getProtocol();
java.net.URL uRL21 = new java.net.URL(uRL18, "");
java.net.URL uRL23 = new java.net.URL(uRL18, "/tmp/hi!5755053178154946338hi!");
java.net.URI uRI24 = uRL23.toURI();
java.lang.String str25 = uRL23.getUserInfo();
boolean boolean26 = uRL6.sameFile(uRL23);
java.lang.String str27 = uRL23.getProtocol();
java.net.URL uRL29 = new java.net.URL(uRL23, "/tmp/hi!4821359768814695446hi!");
java.net.URLStreamHandler uRLStreamHandler31 = null;
java.net.URL uRL32 = new java.net.URL(uRL23, "file:/tmp/hi!3479149176771118717hi!", uRLStreamHandler31);

Long generation time 1622 msec (= 1622 + 0) for
org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
sum0.clear();
org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
double[] doubleArray8 = new double[] { 0.0f };
variance6.incrementAll(doubleArray8);
double double12 = variance4.evaluate(doubleArray8, 0, 1);
double double13 = secondMoment2.evaluate(doubleArray8);
double double14 = sum0.evaluate(doubleArray8);
sum0.clear();
sum0.clear();
org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics17 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance();
double double18 = summaryStatistics17.getGeometricMean();
double double19 = summaryStatistics17.getGeometricMean();
double double20 = summaryStatistics17.getStandardDeviation();
org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
double[] doubleArray24 = new double[] { 0.0f };
variance22.incrementAll(doubleArray24);
summaryStatistics17.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic)variance22);
org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs27 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
double double28 = sumOfLogs27.getResult();
sumOfLogs27.clear();
boolean boolean31 = sumOfLogs27.equals((java.lang.Object)0.0f);
org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
double[] doubleArray37 = new double[] { 0.0f };
variance35.incrementAll(doubleArray37);
double double41 = variance33.evaluate(doubleArray37, 0, 1);
sumOfLogs27.incrementAll(doubleArray37);
variance22.incrementAll(doubleArray37);
sum0.incrementAll(doubleArray37);
sum0.increment(784.25d);
sum0.clear();
sum0.clear();
double double49 = sum0.getResult();
double double50 = sum0.getResult();
long long51 = sum0.getN();


Progress update: steps=37000, test inputs generated=29012, failing inputs=46      (2022-02-22T19:18:26.961Z     3.18G used)Long generation time 2931 msec (= 2931 + 0) for
org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
double[] doubleArray6 = new double[] { 0.0f };
variance4.incrementAll(doubleArray6);
double double10 = variance2.evaluate(doubleArray6, 0, 1);
double double11 = secondMoment0.evaluate(doubleArray6);
org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
double[] doubleArray18 = new double[] { 0.0f };
variance16.incrementAll(doubleArray18);
double double22 = variance14.evaluate(doubleArray18, 0, 1);
double double23 = secondMoment12.evaluate(doubleArray18);
double double24 = secondMoment12.getResult();
org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment12);
secondMoment12.increment((double)10.0f);
boolean boolean28 = secondMoment0.equals((java.lang.Object)secondMoment12);
org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
secondMoment0.increment((double)1645557067000L);
secondMoment0.clear();
secondMoment0.clear();


Progress update: steps=38000, test inputs generated=29786, failing inputs=47      (2022-02-22T19:18:46.871Z     3.03G used)Long generation time 2030 msec for null sequence.
Long generation time 1258 msec (= 1258 + 0) for
org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance();
double double1 = summaryStatistics0.getMean();
double double2 = summaryStatistics0.getMax();
org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
double[] doubleArray9 = new double[] { '4', '4', '#', 100 };
double double10 = variance4.evaluate(doubleArray9);
variance4.increment((double)0);
boolean boolean13 = variance4.isBiasCorrected();
summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic)variance4);
double double15 = summaryStatistics0.getMean();
double double16 = summaryStatistics0.getMean();
double double17 = summaryStatistics0.getGeometricMean();
double double18 = summaryStatistics0.getMin();
org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
org.apache.commons.math.stat.descriptive.moment.Variance variance23 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
double[] doubleArray25 = new double[] { 0.0f };
variance23.incrementAll(doubleArray25);
double double29 = variance21.evaluate(doubleArray25, 0, 1);
double double30 = secondMoment19.evaluate(doubleArray25);
double double31 = secondMoment19.getResult();
long long32 = secondMoment19.getN();
double double33 = secondMoment19.getResult();
double double34 = secondMoment19.getResult();
secondMoment19.increment(2352.7499999999995d);
double double37 = secondMoment19.getResult();
summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic)secondMoment19);
double double39 = summaryStatistics0.getMax();
summaryStatistics0.addValue((double)(-15));
double double42 = summaryStatistics0.getMin();

Long generation time 1340 msec (= 1340 + 0) for
java.io.File file2 = new java.io.File("hi!3697878665386514677hi!", "/tmp/hi!4874798949096330539hi!");
boolean boolean5 = file2.setWritable(false, false);
boolean boolean6 = file2.mkdirs();
java.lang.String str7 = file2.getPath();
boolean boolean8 = file2.canWrite();


Progress update: steps=38535, test inputs generated=30208, failing inputs=48      (2022-02-22T19:18:58.738Z     3.14G used)Long generation time 1367 msec (= 1367 + 0) for
java.io.File file2 = java.io.File.createTempFile("hi!", "hi!");
boolean boolean3 = file2.delete();
boolean boolean4 = file2.mkdirs();
java.io.File file5 = file2.getParentFile();
java.io.File file6 = file2.getParentFile();
boolean boolean8 = file6.setExecutable(true);
long long9 = file6.getUsableSpace();

Long generation time 1333 msec (= 1333 + 0) for
java.io.File file2 = new java.io.File("file:/tmp/hi!3591233330645195402hi!", "/tmp/hi!4546758020812605521hi!");
long long3 = file2.getUsableSpace();
boolean boolean4 = file2.isDirectory();


Progress update: steps=39000, test inputs generated=30551, failing inputs=48      (2022-02-22T19:19:07.488Z     3.91G used)Long generation time 1370 msec (= 1370 + 0) for
java.io.File file2 = java.io.File.createTempFile("hi!", "hi!");
boolean boolean3 = file2.canWrite();
boolean boolean4 = file2.canExecute();
long long5 = file2.getTotalSpace();
java.net.URL uRL6 = file2.toURL();
java.lang.String str7 = uRL6.getProtocol();
java.lang.String str8 = uRL6.getProtocol();
java.lang.String str9 = uRL6.getHost();
int int10 = uRL6.getDefaultPort();
java.lang.String str11 = uRL6.getPath();
java.net.URL uRL13 = new java.net.URL(uRL6, "file:/tmp/hi!801152335945510778hi!");
java.lang.String str14 = uRL6.getQuery();
java.net.URLConnection uRLConnection15 = uRL6.openConnection();
java.lang.String str16 = uRL6.getHost();
java.io.File file19 = java.io.File.createTempFile("hi!", "hi!");
boolean boolean20 = file19.canWrite();
boolean boolean21 = file19.canExecute();
long long22 = file19.getTotalSpace();
java.net.URL uRL23 = file19.toURL();
java.net.URLConnection uRLConnection24 = uRL23.openConnection();
java.net.URLConnection uRLConnection25 = uRL23.openConnection();
java.lang.Class[] classArray26 = new java.lang.Class[] {  };
java.lang.Object obj27 = uRL23.getContent(classArray26);
java.lang.String str28 = uRL23.getRef();
java.lang.String str29 = uRL23.getQuery();
java.lang.String str30 = uRL23.getHost();
boolean boolean31 = uRL6.sameFile(uRL23);
int int32 = uRL23.getDefaultPort();
java.lang.String str33 = uRL23.getUserInfo();
java.lang.Object obj34 = uRL23.getContent();
java.lang.String str35 = uRL23.getHost();
java.lang.String str36 = uRL23.toString();

Long generation time 1379 msec (= 1379 + 0) for
org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
double double1 = sumOfLogs0.getResult();
sumOfLogs0.clear();
boolean boolean4 = sumOfLogs0.equals((java.lang.Object)0.0f);
org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
double[] doubleArray10 = new double[] { 0.0f };
variance8.incrementAll(doubleArray10);
double double14 = variance6.evaluate(doubleArray10, 0, 1);
sumOfLogs0.incrementAll(doubleArray10);
org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl16 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
double[] doubleArray23 = new double[] { '4', '4', '#', 100 };
double double24 = variance18.evaluate(doubleArray23);
empiricalDistributionImpl16.load(doubleArray23);
org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary26 = empiricalDistributionImpl16.getSampleStats();
double double27 = empiricalDistributionImpl16.getNextValue();
org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = empiricalDistributionImpl16.getSampleStats();
boolean boolean29 = sumOfLogs0.equals((java.lang.Object)empiricalDistributionImpl16);
sumOfLogs0.increment((double)1645557386000L);

Long generation time 1380 msec for null sequence.

Progress update: steps=40000, test inputs generated=31328, failing inputs=48      (2022-02-22T19:19:28.711Z     3.02G used)Long generation time 1760 msec (= 1760 + 0) for
java.io.File file2 = java.io.File.createTempFile("hi!", "hi!");
boolean boolean3 = file2.canWrite();
boolean boolean4 = file2.canExecute();
long long5 = file2.getTotalSpace();
boolean boolean6 = file2.canWrite();
java.lang.String str7 = file2.getPath();
boolean boolean8 = file2.createNewFile();
java.io.File file11 = java.io.File.createTempFile("hi!", "hi!");
java.net.URI uRI12 = file11.toURI();
boolean boolean13 = file11.createNewFile();
java.lang.String str14 = file11.getAbsolutePath();
java.io.File file15 = file11.getAbsoluteFile();
boolean boolean17 = file11.setExecutable(false);
boolean boolean18 = file11.setReadOnly();
java.lang.String str19 = file11.getCanonicalPath();
boolean boolean20 = file2.renameTo(file11);
java.net.URI uRI21 = file2.toURI();
boolean boolean22 = file2.isHidden();

Long generation time 1591 msec (= 1591 + 0) for
java.io.File file2 = java.io.File.createTempFile("hi!", "hi!");
java.net.URI uRI3 = file2.toURI();
boolean boolean4 = file2.createNewFile();
java.lang.String str5 = file2.getAbsolutePath();
java.io.File file6 = file2.getAbsoluteFile();
boolean boolean9 = file6.setExecutable(false, false);
boolean boolean10 = file6.canExecute();
java.io.File file11 = file6.getParentFile();
long long12 = file11.getTotalSpace();
java.io.File file13 = file11.getParentFile();
long long14 = file11.getFreeSpace();


Progress update: steps=41000, test inputs generated=32114, failing inputs=49      (2022-02-22T19:19:52.064Z     3.16G used)
Progress update: steps=41441, test inputs generated=32441, failing inputs=49      (2022-02-22T19:19:58.739Z     3.96G used)Long generation time 1525 msec (= 1525 + 0) for
org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance();
org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getSumsqImpl();
java.io.File file4 = java.io.File.createTempFile("hi!", "hi!");
boolean boolean5 = file4.canWrite();
boolean boolean6 = file4.canExecute();
long long7 = file4.getTotalSpace();
java.net.URL uRL8 = file4.toURL();
java.lang.String str9 = uRL8.getProtocol();
java.net.URL uRL11 = new java.net.URL(uRL8, "");
java.net.URL uRL13 = new java.net.URL(uRL8, "/tmp/hi!5755053178154946338hi!");
boolean boolean14 = summaryStatistics0.equals((java.lang.Object)uRL13);
java.lang.String str15 = uRL13.getFile();
java.net.URL uRL17 = new java.net.URL(uRL13, "/tmp/hi!7276744264735899215hi!");


Progress update: steps=42000, test inputs generated=32882, failing inputs=50      (2022-02-22T19:20:11.794Z     3.54G used)Long generation time 1030 msec (= 1030 + 0) for
java.io.File file1 = new java.io.File("/tmp/hi!6855490845556694862hi!");
java.lang.Class<?> wildcardClass2 = file1.getClass();


Progress update: steps=43000, test inputs generated=33656, failing inputs=50      (2022-02-22T19:20:27.912Z     3.32G used)Long generation time 1312 msec for null sequence.
Long generation time 1061 msec (= 1061 + 0) for
org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance();
double double1 = summaryStatistics0.getGeometricMean();
summaryStatistics0.clear();
org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic3 = summaryStatistics0.getMeanImpl();
double double4 = summaryStatistics0.getVariance();
double double5 = summaryStatistics0.getStandardDeviation();
double double6 = summaryStatistics0.getStandardDeviation();


Progress update: steps=44000, test inputs generated=34435, failing inputs=50      (2022-02-22T19:20:45.680Z     3.95G used)
Progress update: steps=44756, test inputs generated=35017, failing inputs=52      (2022-02-22T19:20:58.231Z     3.71G used)
Normal method executions: 18122977
Exceptional method executions: 3729

Average method execution time (normal termination):      0.00362
Average method execution time (exceptional termination): 1.96
Approximate memory usage 3.71G
Explorer = ForwardGenerator(steps: 44756, null steps: 9739, num_sequences_generated: 35017;
    allSequences: 35017, regresson seqs: 24036, error seqs: 52=52=52, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 10929;
    runtimePrimitivesSeen:9963)

Error-revealing test output:
Error-revealing test count: 52
Writing error-revealing JUnit tests...
Created file /experiment/results/randoop10/math-org.apache.commons.math.random.EmpiricalDistributionImpl-org.apache.commons.math.stat.descriptive.SummaryStatistics-14/ErrorTest0.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.random.EmpiricalDistributionImpl-org.apache.commons.math.stat.descriptive.SummaryStatistics-14/ErrorTest.java
Wrote error-revealing JUnit tests.

About to look for failing assertions in 13858 regression sequences.

Regression test output:
Regression test count: 13858
Writing regression JUnit tests...
                                                                                                                                                                                                       Created file /experiment/results/randoop10/math-org.apache.commons.math.random.EmpiricalDistributionImpl-org.apache.commons.math.stat.descriptive.SummaryStatistics-14/RegressionTest0.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.random.EmpiricalDistributionImpl-org.apache.commons.math.stat.descriptive.SummaryStatistics-14/RegressionTest1.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.random.EmpiricalDistributionImpl-org.apache.commons.math.stat.descriptive.SummaryStatistics-14/RegressionTest2.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.random.EmpiricalDistributionImpl-org.apache.commons.math.stat.descriptive.SummaryStatistics-14/RegressionTest3.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.random.EmpiricalDistributionImpl-org.apache.commons.math.stat.descriptive.SummaryStatistics-14/RegressionTest4.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.random.EmpiricalDistributionImpl-org.apache.commons.math.stat.descriptive.SummaryStatistics-14/RegressionTest5.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.random.EmpiricalDistributionImpl-org.apache.commons.math.stat.descriptive.SummaryStatistics-14/RegressionTest6.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.random.EmpiricalDistributionImpl-org.apache.commons.math.stat.descriptive.SummaryStatistics-14/RegressionTest7.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.random.EmpiricalDistributionImpl-org.apache.commons.math.stat.descriptive.SummaryStatistics-14/RegressionTest8.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.random.EmpiricalDistributionImpl-org.apache.commons.math.stat.descriptive.SummaryStatistics-14/RegressionTest9.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.random.EmpiricalDistributionImpl-org.apache.commons.math.stat.descriptive.SummaryStatistics-14/RegressionTest10.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.random.EmpiricalDistributionImpl-org.apache.commons.math.stat.descriptive.SummaryStatistics-14/RegressionTest11.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.random.EmpiricalDistributionImpl-org.apache.commons.math.stat.descriptive.SummaryStatistics-14/RegressionTest12.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.random.EmpiricalDistributionImpl-org.apache.commons.math.stat.descriptive.SummaryStatistics-14/RegressionTest13.java
GenTests.writeTestFiles threw an exception
randoop.main.RandoopBug: Did not find "There\s+(?:was|were)\s+(\d+)\s+failure(?:s|):" in execution of RegressionTest14
status=Status 143 (timedOut=false) for command "java -ea -Xmx3000m -XX:+HeapDumpOnOutOfMemoryError -classpath .:/experiment/projects/math/target/classes:/experiment/tools/randoop-all-4.3.0.jar:/experiment/tools/covered-class-4.3.0.jar org.junit.runner.JUnitCore RegressionTest14", stdout="JUnit version 4.13.2
........................."
, stderr=""

Standard output:
JUnit version 4.13.2
.........................
... end of standard output.Error output:

... end of error output.

	at randoop.output.FailingAssertionCommentWriter.numJunitFailures(FailingAssertionCommentWriter.java:457)
	at randoop.output.FailingAssertionCommentWriter.commentFailingAssertions(FailingAssertionCommentWriter.java:293)
	at randoop.output.FailingAssertionCommentWriter.writeClassCode(FailingAssertionCommentWriter.java:173)
	at randoop.main.GenTests.writeTestFiles(GenTests.java:878)
	at randoop.main.GenTests.handle(GenTests.java:575)
	at randoop.main.Main.nonStaticMain(Main.java:71)
	at randoop.main.Main.main(Main.java:31)
Caused by: randoop.output.FailingAssertionCommentWriter$NotMatchedException: NotMatchedException(There\s+(?:was|were)\s+(\d+)\s+failure(?:s|):)
	at randoop.output.FailingAssertionCommentWriter.readUntilMatch(FailingAssertionCommentWriter.java:526)
	at randoop.output.FailingAssertionCommentWriter.numJunitFailures(FailingAssertionCommentWriter.java:413)
	... 6 more

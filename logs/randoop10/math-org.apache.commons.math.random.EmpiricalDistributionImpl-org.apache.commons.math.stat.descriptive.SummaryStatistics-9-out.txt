Randoop for Java version "4.3.0, local changes, branch master, commit 7af20ae, 2022-01-31".

Will try to generate tests for 22 classes.
PUBLIC MEMBERS=264
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2022-02-22T19:10:41.588Z     226M used)
Progress update: steps=1000, test inputs generated=771, failing inputs=4      (2022-02-22T19:10:49.237Z     478M used)
Progress update: steps=2000, test inputs generated=1606, failing inputs=6      (2022-02-22T19:10:56.750Z     1.04G used)
Progress update: steps=3000, test inputs generated=2416, failing inputs=9      (2022-02-22T19:11:03.684Z     586M used)
Progress update: steps=4000, test inputs generated=3240, failing inputs=10      (2022-02-22T19:11:11.248Z     959M used)
Progress update: steps=5000, test inputs generated=4027, failing inputs=12      (2022-02-22T19:11:19.305Z     863M used)
Progress update: steps=6000, test inputs generated=4841, failing inputs=13      (2022-02-22T19:11:27.696Z     875M used)
Progress update: steps=7000, test inputs generated=5671, failing inputs=14      (2022-02-22T19:11:34.919Z     1.17G used)
Progress update: steps=7838, test inputs generated=6304, failing inputs=18      (2022-02-22T19:11:41.600Z     1.16G used)
Progress update: steps=8000, test inputs generated=6428, failing inputs=18      (2022-02-22T19:11:43.364Z     1.09G used)
Progress update: steps=9000, test inputs generated=7245, failing inputs=21      (2022-02-22T19:11:53.906Z     1.30G used)
Progress update: steps=10000, test inputs generated=8031, failing inputs=22      (2022-02-22T19:12:03.690Z     1.17G used)
Progress update: steps=11000, test inputs generated=8856, failing inputs=24      (2022-02-22T19:12:16.157Z     1.75G used)
Progress update: steps=12000, test inputs generated=9656, failing inputs=25      (2022-02-22T19:12:26.459Z     1.83G used)
Progress update: steps=13000, test inputs generated=10466, failing inputs=26      (2022-02-22T19:12:37.920Z     1.39G used)
Progress update: steps=13351, test inputs generated=10745, failing inputs=27      (2022-02-22T19:12:41.601Z     1.52G used)
Progress update: steps=14000, test inputs generated=11268, failing inputs=28      (2022-02-22T19:12:48.993Z     1.66G used)
Progress update: steps=15000, test inputs generated=12068, failing inputs=31      (2022-02-22T19:13:00.352Z     1.97G used)
Progress update: steps=16000, test inputs generated=12866, failing inputs=33      (2022-02-22T19:13:12.426Z     1.87G used)
Progress update: steps=17000, test inputs generated=13657, failing inputs=37      (2022-02-22T19:13:24.221Z     1.94G used)
Progress update: steps=17968, test inputs generated=14435, failing inputs=40      (2022-02-22T19:13:41.602Z     3.01G used)
Progress update: steps=18000, test inputs generated=14462, failing inputs=40      (2022-02-22T19:13:42.184Z     2.01G used)
Progress update: steps=19000, test inputs generated=15255, failing inputs=42      (2022-02-22T19:13:55.817Z     2.39G used)
Progress update: steps=20000, test inputs generated=16046, failing inputs=45      (2022-02-22T19:14:07.558Z     3.03G used)
Progress update: steps=21000, test inputs generated=16863, failing inputs=47      (2022-02-22T19:14:19.825Z     2.77G used)
Progress update: steps=22000, test inputs generated=17663, failing inputs=49      (2022-02-22T19:14:31.593Z     3.28G used)
Progress update: steps=22822, test inputs generated=18316, failing inputs=51      (2022-02-22T19:14:41.603Z     3.08G used)
Progress update: steps=23000, test inputs generated=18460, failing inputs=52      (2022-02-22T19:14:44.466Z     3.43G used)
Progress update: steps=24000, test inputs generated=19245, failing inputs=54      (2022-02-22T19:14:59.475Z     3.64G used)
Progress update: steps=25000, test inputs generated=20049, failing inputs=55      (2022-02-22T19:15:17.176Z     3.49G used)
Progress update: steps=26000, test inputs generated=20841, failing inputs=55      (2022-02-22T19:15:35.282Z     3.67G used)
Progress update: steps=26325, test inputs generated=21106, failing inputs=55      (2022-02-22T19:15:41.660Z     3.01G used)
Progress update: steps=27000, test inputs generated=21634, failing inputs=55      (2022-02-22T19:15:53.319Z     3.73G used)
Progress update: steps=28000, test inputs generated=22409, failing inputs=58      (2022-02-22T19:16:09.638Z     3.68G used)
Progress update: steps=29000, test inputs generated=23198, failing inputs=61      (2022-02-22T19:16:31.417Z     3.48G used)
Progress update: steps=29421, test inputs generated=23529, failing inputs=64      (2022-02-22T19:16:41.665Z     3.53G used)
Progress update: steps=30000, test inputs generated=23985, failing inputs=64      (2022-02-22T19:16:56.236Z     3.79G used)
Progress update: steps=31000, test inputs generated=24755, failing inputs=65      (2022-02-22T19:17:17.067Z     3.85G used)
Progress update: steps=31938, test inputs generated=25486, failing inputs=66      (2022-02-22T19:17:41.864Z     3.69G used)
Progress update: steps=32000, test inputs generated=25536, failing inputs=66      (2022-02-22T19:17:45.406Z     3.69G used)
Progress update: steps=32910, test inputs generated=26248, failing inputs=67      (2022-02-22T19:18:45.839Z     3.80G used)
Progress update: steps=33000, test inputs generated=26320, failing inputs=67      (2022-02-22T19:18:52.013Z     3.82G used)
Progress update: steps=33354, test inputs generated=26606, failing inputs=67      (2022-02-22T19:19:45.902Z     3.87G used)Long execution time 10 sec for
org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
double[] doubleArray4 = new double[] { (-1.0d), 1.0f, ' ' };
double double7 = secondMoment0.evaluate(doubleArray4, 0, 0);
org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
secondMoment0.increment((double)0.0f);
secondMoment0.clear();
org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics12 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean13 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
summaryStatistics12.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic)geometricMean13);
org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics12.getMaxImpl();
org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = summaryStatistics12.getSummary();
double double17 = summaryStatistics12.getStandardDeviation();
org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic18 = summaryStatistics12.getMaxImpl();
org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
secondMoment19.clear();
long long21 = secondMoment19.getN();
org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment)secondMoment19);
double double23 = secondMoment19.getResult();
secondMoment19.clear();
summaryStatistics12.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic)secondMoment19);
org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics27 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
double double28 = summaryStatistics27.getStandardDeviation();
double double29 = summaryStatistics27.getSum();
summaryStatistics27.clear();
double double31 = summaryStatistics27.getSumOfLogs();
org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics32 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance();
org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance();
double[] doubleArray35 = new double[] { Double.NaN };
variance33.incrementAll(doubleArray35);
summaryStatistics32.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic)variance33);
variance33.increment((double)280463093760L);
org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics40 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance();
org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance();
double[] doubleArray43 = new double[] { Double.NaN };
variance41.incrementAll(doubleArray43);
summaryStatistics40.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic)variance41);
java.lang.Object obj46 = null;
boolean boolean47 = variance41.equals(obj46);
org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance();
double[] doubleArray52 = new double[] { 1L, (-1.0d), (byte)0 };
double double53 = variance48.evaluate(doubleArray52);
variance41.incrementAll(doubleArray52);
double double56 = variance33.evaluate(doubleArray52, (double)280463568896L);
long long57 = variance33.getN();
summaryStatistics27.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic)variance33);
org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl59 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
java.util.List list60 = empiricalDistributionImpl59.getBinStats();
double[] doubleArray67 = new double[] { (short)100, (byte)-1, 1, 10L, (-1L), (byte)1 };
empiricalDistributionImpl59.load(doubleArray67);
int int69 = empiricalDistributionImpl59.getBinCount();
java.util.List list70 = empiricalDistributionImpl59.getBinStats();
int int71 = empiricalDistributionImpl59.getBinCount();
double[] doubleArray72 = empiricalDistributionImpl59.getUpperBounds();
double double73 = variance33.evaluate(doubleArray72);
double double75 = variance26.evaluate(doubleArray72, (double)299062226944L);
double double78 = secondMoment0.evaluate(doubleArray72, (-15), (int)(byte)1);


Progress update: steps=33385, test inputs generated=26633, failing inputs=67      (2022-02-22T19:20:46.156Z     3.87G used)
Progress update: steps=33385, test inputs generated=26633, failing inputs=67      (2022-02-22T19:21:47.583Z     3.87G used)

*** Randoop has spent over 10 seconds executing the following test.
See https://randoop.github.io/randoop/manual/index.html#no-input-generation .

org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
double[] doubleArray4 = new double[] { (-1.0d), 1.0f, ' ' };
double double7 = secondMoment0.evaluate(doubleArray4, 0, 0);
org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
secondMoment0.increment((double)0.0f);
secondMoment0.clear();
org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics12 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean13 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
summaryStatistics12.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic)geometricMean13);
org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics12.getMaxImpl();
org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = summaryStatistics12.getSummary();
double double17 = summaryStatistics12.getStandardDeviation();
org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic18 = summaryStatistics12.getMaxImpl();
org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
secondMoment19.clear();
long long21 = secondMoment19.getN();
org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment)secondMoment19);
double double23 = secondMoment19.getResult();
secondMoment19.clear();
summaryStatistics12.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic)secondMoment19);
org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics27 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
double double28 = summaryStatistics27.getStandardDeviation();
double double29 = summaryStatistics27.getSum();
summaryStatistics27.clear();
double double31 = summaryStatistics27.getSumOfLogs();
org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics32 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance();
org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance();
double[] doubleArray35 = new double[] { Double.NaN };
variance33.incrementAll(doubleArray35);
summaryStatistics32.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic)variance33);
variance33.increment((double)280463093760L);
org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics40 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance();
org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance();
double[] doubleArray43 = new double[] { Double.NaN };
variance41.incrementAll(doubleArray43);
summaryStatistics40.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic)variance41);
java.lang.Object obj46 = null;
boolean boolean47 = variance41.equals(obj46);
org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance();
double[] doubleArray52 = new double[] { 1L, (-1.0d), (byte)0 };
double double53 = variance48.evaluate(doubleArray52);
variance41.incrementAll(doubleArray52);
double double56 = variance33.evaluate(doubleArray52, (double)280463568896L);
long long57 = variance33.getN();
summaryStatistics27.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic)variance33);
org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl59 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
java.util.List list60 = empiricalDistributionImpl59.getBinStats();
double[] doubleArray67 = new double[] { (short)100, (byte)-1, 1, 10L, (-1L), (byte)1 };
empiricalDistributionImpl59.load(doubleArray67);
int int69 = empiricalDistributionImpl59.getBinCount();
java.util.List list70 = empiricalDistributionImpl59.getBinStats();
int int71 = empiricalDistributionImpl59.getBinCount();
double[] doubleArray72 = empiricalDistributionImpl59.getUpperBounds();
double double73 = variance33.evaluate(doubleArray72);
double double75 = variance26.evaluate(doubleArray72, (double)299062226944L);
double double78 = secondMoment0.evaluate(doubleArray72, (-15), (int)(byte)1);


Will dump a heap profile to randoop-slow.hprof.

Problem with sequence:
createAndClassifySequences threw an exception
java.lang.OutOfMemoryError: Java heap space


Throwable thrown while handling command: java.lang.OutOfMemoryError: Java heap space
java.lang.OutOfMemoryError: Java heap space

Randoop failed.
Last sequence under execution: 
org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
double[] doubleArray4 = new double[] { (-1.0d), 1.0f, ' ' };
double double7 = secondMoment0.evaluate(doubleArray4, 0, 0);
org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
secondMoment0.increment((double)0.0f);
secondMoment0.clear();
org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics12 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean13 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
summaryStatistics12.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic)geometricMean13);
org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics12.getMaxImpl();
org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = summaryStatistics12.getSummary();
double double17 = summaryStatistics12.getStandardDeviation();
org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic18 = summaryStatistics12.getMaxImpl();
org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
secondMoment19.clear();
long long21 = secondMoment19.getN();
org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment)secondMoment19);
double double23 = secondMoment19.getResult();
secondMoment19.clear();
summaryStatistics12.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic)secondMoment19);
org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment19);
org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics27 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
double double28 = summaryStatistics27.getStandardDeviation();
double double29 = summaryStatistics27.getSum();
summaryStatistics27.clear();
double double31 = summaryStatistics27.getSumOfLogs();
org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics32 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance();
org.apache.commons.math.stat.descriptive.moment.Variance variance33 = new org.apache.commons.math.stat.descriptive.moment.Variance();
double[] doubleArray35 = new double[] { Double.NaN };
variance33.incrementAll(doubleArray35);
summaryStatistics32.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic)variance33);
variance33.increment((double)280463093760L);
org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics40 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance();
org.apache.commons.math.stat.descriptive.moment.Variance variance41 = new org.apache.commons.math.stat.descriptive.moment.Variance();
double[] doubleArray43 = new double[] { Double.NaN };
variance41.incrementAll(doubleArray43);
summaryStatistics40.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic)variance41);
java.lang.Object obj46 = null;
boolean boolean47 = variance41.equals(obj46);
org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance();
double[] doubleArray52 = new double[] { 1L, (-1.0d), (byte)0 };
double double53 = variance48.evaluate(doubleArray52);
variance41.incrementAll(doubleArray52);
double double56 = variance33.evaluate(doubleArray52, (double)280463568896L);
long long57 = variance33.getN();
summaryStatistics27.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic)variance33);
org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl59 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
java.util.List list60 = empiricalDistributionImpl59.getBinStats();
double[] doubleArray67 = new double[] { (short)100, (byte)-1, 1, 10L, (-1L), (byte)1 };
empiricalDistributionImpl59.load(doubleArray67);
int int69 = empiricalDistributionImpl59.getBinCount();
java.util.List list70 = empiricalDistributionImpl59.getBinStats();
int int71 = empiricalDistributionImpl59.getBinCount();
double[] doubleArray72 = empiricalDistributionImpl59.getUpperBounds();
double double73 = variance33.evaluate(doubleArray72);
double double75 = variance26.evaluate(doubleArray72, (double)299062226944L);
double double78 = secondMoment0.evaluate(doubleArray72, (-15), (int)(byte)1);

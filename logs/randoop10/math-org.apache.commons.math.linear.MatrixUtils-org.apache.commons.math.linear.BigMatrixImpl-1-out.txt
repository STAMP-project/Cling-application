Randoop for Java version "4.3.0, local changes, branch master, commit 7af20ae, 2022-01-31".

Will try to generate tests for 8 classes.
PUBLIC MEMBERS=222
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=3, test inputs generated=0, failing inputs=0      (2022-02-22T18:40:40.102Z     215M used)
Progress update: steps=1000, test inputs generated=913, failing inputs=43      (2022-02-22T18:41:03.335Z     568M used)
Progress update: steps=2000, test inputs generated=1861, failing inputs=73      (2022-02-22T18:41:21.318Z     804M used)
Progress update: steps=2950, test inputs generated=2757, failing inputs=98      (2022-02-22T18:41:40.133Z     394M used)
Progress update: steps=3000, test inputs generated=2804, failing inputs=98      (2022-02-22T18:41:41.503Z     790M used)Long execution time 12 sec for
org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix(10000);


Progress update: steps=4000, test inputs generated=3750, failing inputs=121      (2022-02-22T18:42:26.427Z     2.73G used)
Progress update: steps=4129, test inputs generated=3865, failing inputs=125      (2022-02-22T18:42:40.618Z     3.30G used)
Progress update: steps=4652, test inputs generated=4352, failing inputs=132      (2022-02-22T18:43:40.641Z     3.50G used)
Progress update: steps=4663, test inputs generated=4360, failing inputs=132      (2022-02-22T18:44:40.672Z     3.43G used)Long execution time 193 sec for
java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((double)10);
float float2 = bigDecimal1.floatValue();
java.math.BigDecimal bigDecimal4 = bigDecimal1.movePointRight(2);
java.math.BigDecimal bigDecimal5 = bigDecimal4.plus();
java.math.BigInteger bigInteger6 = bigDecimal5.toBigIntegerExact();
java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(bigInteger6);
double[] doubleArray9 = new double[] { (-1.0d) };
double[] doubleArray11 = new double[] { (-1.0d) };
double[] doubleArray13 = new double[] { (-1.0d) };
double[] doubleArray15 = new double[] { (-1.0d) };
double[][] doubleArray16 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15 };
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
bigMatrixImpl17.setRoundingMode((int)(byte)100);
java.math.BigDecimal bigDecimal20 = bigMatrixImpl17.getNorm();
java.math.BigDecimal bigDecimal21 = bigDecimal7.divideToIntegralValue(bigDecimal20);
java.math.BigDecimal bigDecimal23 = bigDecimal7.movePointRight(10000000);


Progress update: steps=5000, test inputs generated=4669, failing inputs=141      (2022-02-22T18:47:20.449Z     3.48G used)
Progress update: steps=5326, test inputs generated=4968, failing inputs=151      (2022-02-22T18:47:55.697Z     3.46G used)
Progress update: steps=5767, test inputs generated=5374, failing inputs=160      (2022-02-22T18:48:55.698Z     3.53G used)
Randoop for Java version "4.3.0, local changes, branch master, commit 7af20ae, 2022-01-31".
Cannot instantiate non-accessible class org.joda.time.chrono.BasicChronology specified via --testclass or --classlist.
Cannot instantiate non-accessible class org.joda.time.chrono.BasicFixedMonthChronology specified via --testclass or --classlist.

Will try to generate tests for 343 out of 345 classes.
PUBLIC MEMBERS=5145
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2022-02-21T09:33:47.567Z     145M used)
Progress update: steps=1000, test inputs generated=420, failing inputs=0      (2022-02-21T09:33:58.550Z     857M used)
Progress update: steps=2000, test inputs generated=1079, failing inputs=0      (2022-02-21T09:34:06.977Z     676M used)
Progress update: steps=3000, test inputs generated=1807, failing inputs=0      (2022-02-21T09:34:17.069Z     1.37G used)
Progress update: steps=4000, test inputs generated=2563, failing inputs=0      (2022-02-21T09:34:33.272Z     763M used)
Progress update: steps=4682, test inputs generated=3081, failing inputs=1      (2022-02-21T09:34:47.571Z     314M used)
Progress update: steps=5000, test inputs generated=3324, failing inputs=2      (2022-02-21T09:34:56.396Z     1.16G used)Long execution time 17 sec for
java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
float float2 = charsetDecoder1.maxCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction3 = java.nio.charset.CodingErrorAction.IGNORE;
java.nio.charset.CharsetDecoder charsetDecoder4 = charsetDecoder1.onMalformedInput(codingErrorAction3);
java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect(10800000);
java.nio.ByteBuffer byteBuffer7 = byteBuffer6.asReadOnlyBuffer();
boolean boolean8 = byteBuffer7.hasArray();
java.nio.CharBuffer charBuffer9 = charsetDecoder1.decode(byteBuffer7);

Long execution time 15 sec for
java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
float float2 = charsetDecoder1.maxCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction3 = java.nio.charset.CodingErrorAction.IGNORE;
java.nio.charset.CharsetDecoder charsetDecoder4 = charsetDecoder1.onMalformedInput(codingErrorAction3);
java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect(10800000);
java.nio.ByteBuffer byteBuffer7 = byteBuffer6.asReadOnlyBuffer();
boolean boolean8 = byteBuffer7.hasArray();
java.nio.CharBuffer charBuffer9 = charsetDecoder1.decode(byteBuffer7);
java.nio.charset.Charset charset10 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder11 = charset10.newDecoder();
java.nio.charset.Charset charset12 = java.nio.charset.Charset.defaultCharset();
boolean boolean13 = charset10.contains(charset12);
java.nio.charset.CharsetEncoder charsetEncoder14 = charset10.newEncoder();
byte[] byteArray15 = charsetEncoder14.replacement();
java.nio.charset.Charset charset16 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder17 = charset16.newDecoder();
float float18 = charsetDecoder17.maxCharsPerByte();
float float19 = charsetDecoder17.averageCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction20 = charsetDecoder17.unmappableCharacterAction();
java.nio.charset.CharsetEncoder charsetEncoder21 = charsetEncoder14.onUnmappableCharacter(codingErrorAction20);
java.nio.charset.Charset charset22 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder23 = charset22.newDecoder();
java.nio.charset.Charset charset24 = java.nio.charset.Charset.defaultCharset();
boolean boolean25 = charset22.contains(charset24);
java.nio.charset.CharsetEncoder charsetEncoder26 = charset22.newEncoder();
char[] charArray27 = new char[] {  };
java.nio.CharBuffer charBuffer28 = java.nio.CharBuffer.wrap(charArray27);
java.nio.ByteBuffer byteBuffer29 = charsetEncoder26.encode(charBuffer28);
java.nio.CharBuffer charBuffer30 = charBuffer28.slice();
java.nio.ByteBuffer byteBuffer31 = charsetEncoder21.encode(charBuffer30);
java.nio.ByteBuffer byteBuffer32 = byteBuffer31.asReadOnlyBuffer();
int int33 = byteBuffer7.compareTo(byteBuffer31);


Progress update: steps=5239, test inputs generated=3512, failing inputs=2      (2022-02-21T09:35:47.572Z     974M used)Long execution time 16 sec for
java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
float float2 = charsetDecoder1.maxCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction3 = java.nio.charset.CodingErrorAction.IGNORE;
java.nio.charset.CharsetDecoder charsetDecoder4 = charsetDecoder1.onMalformedInput(codingErrorAction3);
java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect(10800000);
java.nio.ByteBuffer byteBuffer7 = byteBuffer6.asReadOnlyBuffer();
boolean boolean8 = byteBuffer7.hasArray();
java.nio.CharBuffer charBuffer9 = charsetDecoder1.decode(byteBuffer7);
java.nio.charset.Charset charset10 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder11 = charset10.newDecoder();
java.nio.charset.Charset charset12 = java.nio.charset.Charset.defaultCharset();
boolean boolean13 = charset10.contains(charset12);
java.nio.charset.CharsetEncoder charsetEncoder14 = charset10.newEncoder();
byte[] byteArray15 = charsetEncoder14.replacement();
java.nio.charset.Charset charset16 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder17 = charset16.newDecoder();
float float18 = charsetDecoder17.maxCharsPerByte();
float float19 = charsetDecoder17.averageCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction20 = charsetDecoder17.unmappableCharacterAction();
java.nio.charset.CharsetEncoder charsetEncoder21 = charsetEncoder14.onUnmappableCharacter(codingErrorAction20);
java.nio.charset.Charset charset22 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder23 = charset22.newDecoder();
java.nio.charset.Charset charset24 = java.nio.charset.Charset.defaultCharset();
boolean boolean25 = charset22.contains(charset24);
java.nio.charset.CharsetEncoder charsetEncoder26 = charset22.newEncoder();
char[] charArray27 = new char[] {  };
java.nio.CharBuffer charBuffer28 = java.nio.CharBuffer.wrap(charArray27);
java.nio.ByteBuffer byteBuffer29 = charsetEncoder26.encode(charBuffer28);
java.nio.CharBuffer charBuffer30 = charBuffer28.slice();
java.nio.ByteBuffer byteBuffer31 = charsetEncoder21.encode(charBuffer30);
java.nio.ByteBuffer byteBuffer32 = byteBuffer31.asReadOnlyBuffer();
int int33 = byteBuffer7.compareTo(byteBuffer31);
java.nio.LongBuffer longBuffer34 = byteBuffer7.asLongBuffer();

Long execution time 11 sec for
java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
float float2 = charsetDecoder1.maxCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction3 = java.nio.charset.CodingErrorAction.IGNORE;
java.nio.charset.CharsetDecoder charsetDecoder4 = charsetDecoder1.onMalformedInput(codingErrorAction3);
java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect(10800000);
java.nio.ByteBuffer byteBuffer7 = byteBuffer6.asReadOnlyBuffer();
boolean boolean8 = byteBuffer7.hasArray();
java.nio.CharBuffer charBuffer9 = charsetDecoder1.decode(byteBuffer7);
byte byte11 = byteBuffer7.get(96000000);


Progress update: steps=6000, test inputs generated=4094, failing inputs=4      (2022-02-21T09:36:15.989Z     1.24G used)Long execution time 11 sec for
java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
float float2 = charsetDecoder1.maxCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction3 = java.nio.charset.CodingErrorAction.IGNORE;
java.nio.charset.CharsetDecoder charsetDecoder4 = charsetDecoder1.onMalformedInput(codingErrorAction3);
java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect(10800000);
java.nio.ByteBuffer byteBuffer7 = byteBuffer6.asReadOnlyBuffer();
boolean boolean8 = byteBuffer7.hasArray();
java.nio.CharBuffer charBuffer9 = charsetDecoder1.decode(byteBuffer7);
java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.parse((java.lang.CharSequence)charBuffer9);


Progress update: steps=7000, test inputs generated=4897, failing inputs=8      (2022-02-21T09:36:46.326Z     2.06G used)
Progress update: steps=7286, test inputs generated=5115, failing inputs=8      (2022-02-21T09:36:50.268Z     1.59G used)Long execution time 13 sec for
java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
float float2 = charsetDecoder1.maxCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction3 = java.nio.charset.CodingErrorAction.IGNORE;
java.nio.charset.CharsetDecoder charsetDecoder4 = charsetDecoder1.onMalformedInput(codingErrorAction3);
java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect(10800000);
java.nio.ByteBuffer byteBuffer7 = byteBuffer6.asReadOnlyBuffer();
boolean boolean8 = byteBuffer7.hasArray();
java.nio.CharBuffer charBuffer9 = charsetDecoder1.decode(byteBuffer7);
java.nio.charset.Charset charset10 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder11 = charset10.newDecoder();
java.nio.charset.Charset charset12 = java.nio.charset.Charset.defaultCharset();
boolean boolean13 = charset10.contains(charset12);
java.nio.charset.CharsetEncoder charsetEncoder14 = charset10.newEncoder();
byte[] byteArray15 = charsetEncoder14.replacement();
java.nio.charset.Charset charset16 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder17 = charset16.newDecoder();
float float18 = charsetDecoder17.maxCharsPerByte();
float float19 = charsetDecoder17.averageCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction20 = charsetDecoder17.unmappableCharacterAction();
java.nio.charset.CharsetEncoder charsetEncoder21 = charsetEncoder14.onUnmappableCharacter(codingErrorAction20);
java.nio.charset.Charset charset22 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder23 = charset22.newDecoder();
java.nio.charset.Charset charset24 = java.nio.charset.Charset.defaultCharset();
boolean boolean25 = charset22.contains(charset24);
java.nio.charset.CharsetEncoder charsetEncoder26 = charset22.newEncoder();
char[] charArray27 = new char[] {  };
java.nio.CharBuffer charBuffer28 = java.nio.CharBuffer.wrap(charArray27);
java.nio.ByteBuffer byteBuffer29 = charsetEncoder26.encode(charBuffer28);
java.nio.CharBuffer charBuffer30 = charBuffer28.slice();
java.nio.ByteBuffer byteBuffer31 = charsetEncoder21.encode(charBuffer30);
java.nio.ByteBuffer byteBuffer32 = byteBuffer31.asReadOnlyBuffer();
int int33 = byteBuffer7.compareTo(byteBuffer31);
char char35 = byteBuffer7.getChar(1);


Progress update: steps=8000, test inputs generated=5696, failing inputs=9      (2022-02-21T09:37:17.980Z     582M used)
Progress update: steps=9000, test inputs generated=6498, failing inputs=12      (2022-02-21T09:37:49.494Z     1.12G used)
Progress update: steps=9047, test inputs generated=6535, failing inputs=12      (2022-02-21T09:37:50.269Z     1.46G used)Long execution time 15 sec for
java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
float float2 = charsetDecoder1.maxCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction3 = java.nio.charset.CodingErrorAction.IGNORE;
java.nio.charset.CharsetDecoder charsetDecoder4 = charsetDecoder1.onMalformedInput(codingErrorAction3);
java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect(10800000);
java.nio.ByteBuffer byteBuffer7 = byteBuffer6.asReadOnlyBuffer();
boolean boolean8 = byteBuffer7.hasArray();
java.nio.CharBuffer charBuffer9 = charsetDecoder1.decode(byteBuffer7);
java.nio.charset.Charset charset10 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder11 = charset10.newDecoder();
java.nio.charset.Charset charset12 = java.nio.charset.Charset.defaultCharset();
boolean boolean13 = charset10.contains(charset12);
java.nio.charset.CharsetEncoder charsetEncoder14 = charset10.newEncoder();
byte[] byteArray15 = charsetEncoder14.replacement();
java.nio.charset.Charset charset16 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder17 = charset16.newDecoder();
float float18 = charsetDecoder17.maxCharsPerByte();
float float19 = charsetDecoder17.averageCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction20 = charsetDecoder17.unmappableCharacterAction();
java.nio.charset.CharsetEncoder charsetEncoder21 = charsetEncoder14.onUnmappableCharacter(codingErrorAction20);
java.nio.charset.Charset charset22 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder23 = charset22.newDecoder();
java.nio.charset.Charset charset24 = java.nio.charset.Charset.defaultCharset();
boolean boolean25 = charset22.contains(charset24);
java.nio.charset.CharsetEncoder charsetEncoder26 = charset22.newEncoder();
char[] charArray27 = new char[] {  };
java.nio.CharBuffer charBuffer28 = java.nio.CharBuffer.wrap(charArray27);
java.nio.ByteBuffer byteBuffer29 = charsetEncoder26.encode(charBuffer28);
java.nio.CharBuffer charBuffer30 = charBuffer28.slice();
java.nio.ByteBuffer byteBuffer31 = charsetEncoder21.encode(charBuffer30);
java.nio.ByteBuffer byteBuffer32 = byteBuffer31.asReadOnlyBuffer();
int int33 = byteBuffer7.compareTo(byteBuffer31);
java.nio.ByteBuffer byteBuffer36 = byteBuffer31.put((int)(short)0, (byte)1);

Long execution time 14 sec for
java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
float float2 = charsetDecoder1.maxCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction3 = java.nio.charset.CodingErrorAction.IGNORE;
java.nio.charset.CharsetDecoder charsetDecoder4 = charsetDecoder1.onMalformedInput(codingErrorAction3);
java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect(10800000);
java.nio.ByteBuffer byteBuffer7 = byteBuffer6.asReadOnlyBuffer();
boolean boolean8 = byteBuffer7.hasArray();
java.nio.CharBuffer charBuffer9 = charsetDecoder1.decode(byteBuffer7);
java.nio.charset.Charset charset10 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder11 = charset10.newDecoder();
java.nio.charset.Charset charset12 = java.nio.charset.Charset.defaultCharset();
boolean boolean13 = charset10.contains(charset12);
java.nio.charset.CharsetEncoder charsetEncoder14 = charset10.newEncoder();
byte[] byteArray15 = charsetEncoder14.replacement();
java.nio.charset.Charset charset16 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder17 = charset16.newDecoder();
float float18 = charsetDecoder17.maxCharsPerByte();
float float19 = charsetDecoder17.averageCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction20 = charsetDecoder17.unmappableCharacterAction();
java.nio.charset.CharsetEncoder charsetEncoder21 = charsetEncoder14.onUnmappableCharacter(codingErrorAction20);
java.nio.charset.Charset charset22 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder23 = charset22.newDecoder();
java.nio.charset.Charset charset24 = java.nio.charset.Charset.defaultCharset();
boolean boolean25 = charset22.contains(charset24);
java.nio.charset.CharsetEncoder charsetEncoder26 = charset22.newEncoder();
char[] charArray27 = new char[] {  };
java.nio.CharBuffer charBuffer28 = java.nio.CharBuffer.wrap(charArray27);
java.nio.ByteBuffer byteBuffer29 = charsetEncoder26.encode(charBuffer28);
java.nio.CharBuffer charBuffer30 = charBuffer28.slice();
java.nio.ByteBuffer byteBuffer31 = charsetEncoder21.encode(charBuffer30);
java.nio.ByteBuffer byteBuffer32 = byteBuffer31.asReadOnlyBuffer();
int int33 = byteBuffer7.compareTo(byteBuffer31);
char char35 = byteBuffer7.getChar(1);
double double36 = byteBuffer7.getDouble();

Long execution time 12 sec for
java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
boolean boolean3 = charset0.contains(charset2);
java.nio.charset.CharsetEncoder charsetEncoder4 = charset0.newEncoder();
byte[] byteArray5 = charsetEncoder4.replacement();
java.nio.charset.Charset charset6 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder7 = charset6.newDecoder();
float float8 = charsetDecoder7.maxCharsPerByte();
float float9 = charsetDecoder7.averageCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction10 = charsetDecoder7.unmappableCharacterAction();
java.nio.charset.CharsetEncoder charsetEncoder11 = charsetEncoder4.onUnmappableCharacter(codingErrorAction10);
java.nio.charset.Charset charset12 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder13 = charset12.newDecoder();
java.nio.charset.Charset charset14 = java.nio.charset.Charset.defaultCharset();
boolean boolean15 = charset12.contains(charset14);
java.nio.charset.CharsetEncoder charsetEncoder16 = charset12.newEncoder();
byte[] byteArray17 = charsetEncoder16.replacement();
java.nio.charset.CharsetEncoder charsetEncoder18 = charsetEncoder4.replaceWith(byteArray17);
float float19 = charsetEncoder4.averageBytesPerChar();
java.nio.charset.Charset charset20 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder21 = charset20.newDecoder();
float float22 = charsetDecoder21.maxCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction23 = java.nio.charset.CodingErrorAction.IGNORE;
java.nio.charset.CharsetDecoder charsetDecoder24 = charsetDecoder21.onMalformedInput(codingErrorAction23);
java.nio.ByteBuffer byteBuffer26 = java.nio.ByteBuffer.allocateDirect(10800000);
java.nio.ByteBuffer byteBuffer27 = byteBuffer26.asReadOnlyBuffer();
boolean boolean28 = byteBuffer27.hasArray();
java.nio.CharBuffer charBuffer29 = charsetDecoder21.decode(byteBuffer27);
java.nio.charset.Charset charset30 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder31 = charset30.newDecoder();
java.nio.charset.Charset charset32 = java.nio.charset.Charset.defaultCharset();
boolean boolean33 = charset30.contains(charset32);
java.nio.charset.CharsetEncoder charsetEncoder34 = charset30.newEncoder();
byte[] byteArray35 = charsetEncoder34.replacement();
java.nio.charset.Charset charset36 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder37 = charset36.newDecoder();
float float38 = charsetDecoder37.maxCharsPerByte();
float float39 = charsetDecoder37.averageCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction40 = charsetDecoder37.unmappableCharacterAction();
java.nio.charset.CharsetEncoder charsetEncoder41 = charsetEncoder34.onUnmappableCharacter(codingErrorAction40);
java.nio.charset.Charset charset42 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder43 = charset42.newDecoder();
java.nio.charset.Charset charset44 = java.nio.charset.Charset.defaultCharset();
boolean boolean45 = charset42.contains(charset44);
java.nio.charset.CharsetEncoder charsetEncoder46 = charset42.newEncoder();
char[] charArray47 = new char[] {  };
java.nio.CharBuffer charBuffer48 = java.nio.CharBuffer.wrap(charArray47);
java.nio.ByteBuffer byteBuffer49 = charsetEncoder46.encode(charBuffer48);
java.nio.CharBuffer charBuffer50 = charBuffer48.slice();
java.nio.ByteBuffer byteBuffer51 = charsetEncoder41.encode(charBuffer50);
java.nio.ByteBuffer byteBuffer52 = byteBuffer51.asReadOnlyBuffer();
int int53 = byteBuffer27.compareTo(byteBuffer51);
java.nio.charset.CoderResult coderResult54 = charsetEncoder4.flush(byteBuffer27);


Progress update: steps=9935, test inputs generated=7271, failing inputs=13      (2022-02-21T09:38:50.270Z     2.16G used)
Progress update: steps=10000, test inputs generated=7324, failing inputs=13      (2022-02-21T09:38:53.811Z     2.04G used)Long execution time 18 sec for
java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
boolean boolean3 = charset0.contains(charset2);
java.nio.ByteBuffer byteBuffer5 = charset2.encode("US-ASCII");
java.nio.charset.Charset charset6 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder7 = charset6.newDecoder();
float float8 = charsetDecoder7.maxCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction9 = java.nio.charset.CodingErrorAction.IGNORE;
java.nio.charset.CharsetDecoder charsetDecoder10 = charsetDecoder7.onMalformedInput(codingErrorAction9);
java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect(10800000);
java.nio.ByteBuffer byteBuffer13 = byteBuffer12.asReadOnlyBuffer();
boolean boolean14 = byteBuffer13.hasArray();
java.nio.CharBuffer charBuffer15 = charsetDecoder7.decode(byteBuffer13);
java.nio.charset.Charset charset16 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder17 = charset16.newDecoder();
java.nio.charset.Charset charset18 = java.nio.charset.Charset.defaultCharset();
boolean boolean19 = charset16.contains(charset18);
java.nio.charset.CharsetEncoder charsetEncoder20 = charset16.newEncoder();
byte[] byteArray21 = charsetEncoder20.replacement();
java.nio.charset.Charset charset22 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder23 = charset22.newDecoder();
float float24 = charsetDecoder23.maxCharsPerByte();
float float25 = charsetDecoder23.averageCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction26 = charsetDecoder23.unmappableCharacterAction();
java.nio.charset.CharsetEncoder charsetEncoder27 = charsetEncoder20.onUnmappableCharacter(codingErrorAction26);
java.nio.charset.Charset charset28 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder29 = charset28.newDecoder();
java.nio.charset.Charset charset30 = java.nio.charset.Charset.defaultCharset();
boolean boolean31 = charset28.contains(charset30);
java.nio.charset.CharsetEncoder charsetEncoder32 = charset28.newEncoder();
char[] charArray33 = new char[] {  };
java.nio.CharBuffer charBuffer34 = java.nio.CharBuffer.wrap(charArray33);
java.nio.ByteBuffer byteBuffer35 = charsetEncoder32.encode(charBuffer34);
java.nio.CharBuffer charBuffer36 = charBuffer34.slice();
java.nio.ByteBuffer byteBuffer37 = charsetEncoder27.encode(charBuffer36);
java.nio.ByteBuffer byteBuffer38 = byteBuffer37.asReadOnlyBuffer();
int int39 = byteBuffer13.compareTo(byteBuffer37);
java.nio.LongBuffer longBuffer40 = byteBuffer13.asLongBuffer();
java.nio.CharBuffer charBuffer41 = charset2.decode(byteBuffer13);

Long execution time 13 sec for
java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
float float2 = charsetDecoder1.maxCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction3 = java.nio.charset.CodingErrorAction.IGNORE;
java.nio.charset.CharsetDecoder charsetDecoder4 = charsetDecoder1.onMalformedInput(codingErrorAction3);
java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect(10800000);
java.nio.ByteBuffer byteBuffer7 = byteBuffer6.asReadOnlyBuffer();
boolean boolean8 = byteBuffer7.hasArray();
java.nio.CharBuffer charBuffer9 = charsetDecoder1.decode(byteBuffer7);
java.nio.charset.Charset charset10 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder11 = charset10.newDecoder();
java.nio.charset.Charset charset12 = java.nio.charset.Charset.defaultCharset();
boolean boolean13 = charset10.contains(charset12);
java.nio.charset.CharsetEncoder charsetEncoder14 = charset10.newEncoder();
byte[] byteArray15 = charsetEncoder14.replacement();
java.nio.charset.Charset charset16 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder17 = charset16.newDecoder();
float float18 = charsetDecoder17.maxCharsPerByte();
float float19 = charsetDecoder17.averageCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction20 = charsetDecoder17.unmappableCharacterAction();
java.nio.charset.CharsetEncoder charsetEncoder21 = charsetEncoder14.onUnmappableCharacter(codingErrorAction20);
java.nio.charset.Charset charset22 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder23 = charset22.newDecoder();
java.nio.charset.Charset charset24 = java.nio.charset.Charset.defaultCharset();
boolean boolean25 = charset22.contains(charset24);
java.nio.charset.CharsetEncoder charsetEncoder26 = charset22.newEncoder();
char[] charArray27 = new char[] {  };
java.nio.CharBuffer charBuffer28 = java.nio.CharBuffer.wrap(charArray27);
java.nio.ByteBuffer byteBuffer29 = charsetEncoder26.encode(charBuffer28);
java.nio.CharBuffer charBuffer30 = charBuffer28.slice();
java.nio.ByteBuffer byteBuffer31 = charsetEncoder21.encode(charBuffer30);
java.nio.ByteBuffer byteBuffer32 = byteBuffer31.asReadOnlyBuffer();
int int33 = byteBuffer7.compareTo(byteBuffer31);
java.nio.ByteBuffer byteBuffer35 = byteBuffer7.putChar('#');


Progress update: steps=10827, test inputs generated=7983, failing inputs=18      (2022-02-21T09:39:50.271Z     1.90G used)
Progress update: steps=11000, test inputs generated=8123, failing inputs=18      (2022-02-21T09:39:54.345Z     1.24G used)Long execution time 13 sec for
java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
boolean boolean3 = charset0.contains(charset2);
java.nio.ByteBuffer byteBuffer5 = charset2.encode("US-ASCII");
java.nio.charset.Charset charset6 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder7 = charset6.newDecoder();
float float8 = charsetDecoder7.maxCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction9 = java.nio.charset.CodingErrorAction.IGNORE;
java.nio.charset.CharsetDecoder charsetDecoder10 = charsetDecoder7.onMalformedInput(codingErrorAction9);
java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocateDirect(10800000);
java.nio.ByteBuffer byteBuffer13 = byteBuffer12.asReadOnlyBuffer();
boolean boolean14 = byteBuffer13.hasArray();
java.nio.CharBuffer charBuffer15 = charsetDecoder7.decode(byteBuffer13);
java.nio.charset.Charset charset16 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder17 = charset16.newDecoder();
java.nio.charset.Charset charset18 = java.nio.charset.Charset.defaultCharset();
boolean boolean19 = charset16.contains(charset18);
java.nio.charset.CharsetEncoder charsetEncoder20 = charset16.newEncoder();
byte[] byteArray21 = charsetEncoder20.replacement();
java.nio.charset.Charset charset22 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder23 = charset22.newDecoder();
float float24 = charsetDecoder23.maxCharsPerByte();
float float25 = charsetDecoder23.averageCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction26 = charsetDecoder23.unmappableCharacterAction();
java.nio.charset.CharsetEncoder charsetEncoder27 = charsetEncoder20.onUnmappableCharacter(codingErrorAction26);
java.nio.charset.Charset charset28 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder29 = charset28.newDecoder();
java.nio.charset.Charset charset30 = java.nio.charset.Charset.defaultCharset();
boolean boolean31 = charset28.contains(charset30);
java.nio.charset.CharsetEncoder charsetEncoder32 = charset28.newEncoder();
char[] charArray33 = new char[] {  };
java.nio.CharBuffer charBuffer34 = java.nio.CharBuffer.wrap(charArray33);
java.nio.ByteBuffer byteBuffer35 = charsetEncoder32.encode(charBuffer34);
java.nio.CharBuffer charBuffer36 = charBuffer34.slice();
java.nio.ByteBuffer byteBuffer37 = charsetEncoder27.encode(charBuffer36);
java.nio.ByteBuffer byteBuffer38 = byteBuffer37.asReadOnlyBuffer();
int int39 = byteBuffer13.compareTo(byteBuffer37);
java.nio.LongBuffer longBuffer40 = byteBuffer13.asLongBuffer();
java.nio.CharBuffer charBuffer41 = charset2.decode(byteBuffer13);
java.nio.Buffer buffer43 = byteBuffer13.limit(1000002021);


Progress update: steps=12000, test inputs generated=8931, failing inputs=23      (2022-02-21T09:40:34.372Z     963M used)
Progress update: steps=12554, test inputs generated=9375, failing inputs=26      (2022-02-21T09:40:50.272Z     1,14G used)Long execution time 15 sec for
java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
float float2 = charsetDecoder1.maxCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction3 = java.nio.charset.CodingErrorAction.IGNORE;
java.nio.charset.CharsetDecoder charsetDecoder4 = charsetDecoder1.onMalformedInput(codingErrorAction3);
java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect(10800000);
java.nio.ByteBuffer byteBuffer7 = byteBuffer6.asReadOnlyBuffer();
boolean boolean8 = byteBuffer7.hasArray();
java.nio.CharBuffer charBuffer9 = charsetDecoder1.decode(byteBuffer7);
java.net.URI uRI11 = new java.net.URI("hi!");
java.lang.String str12 = uRI11.getRawAuthority();
java.lang.String str13 = uRI11.toString();
java.lang.String str14 = uRI11.getUserInfo();
java.io.OutputStream outputStream15 = null;
java.io.FilterOutputStream filterOutputStream16 = new java.io.FilterOutputStream(outputStream15);
byte[] byteArray18 = new byte[] { (byte)100 };
filterOutputStream16.write(byteArray18, (int)(byte)0, (int)(byte)0);
java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.wrap(byteArray18);
java.nio.LongBuffer longBuffer23 = byteBuffer22.asLongBuffer();
java.nio.ByteBuffer byteBuffer24 = byteBuffer22.duplicate();
boolean boolean25 = uRI11.equals((java.lang.Object)byteBuffer22);
java.nio.DoubleBuffer doubleBuffer26 = byteBuffer22.asDoubleBuffer();
java.util.stream.IntStream intStream28 = java.util.stream.IntStream.of((int)'/');
java.util.OptionalInt optionalInt29 = intStream28.min();
short[] shortArray32 = new short[] { (short)1, (byte)10 };
java.nio.ShortBuffer shortBuffer33 = java.nio.ShortBuffer.wrap(shortArray32);
short[] shortArray36 = new short[] { (short)1, (byte)10 };
java.nio.ShortBuffer shortBuffer37 = java.nio.ShortBuffer.wrap(shortArray36);
java.nio.ShortBuffer shortBuffer38 = shortBuffer33.put(shortBuffer37);
int int39 = shortBuffer38.limit();
boolean boolean40 = shortBuffer38.isReadOnly();
boolean boolean41 = optionalInt29.equals((java.lang.Object)shortBuffer38);
java.nio.ByteOrder byteOrder42 = shortBuffer38.order();
java.nio.ByteBuffer byteBuffer43 = byteBuffer22.order(byteOrder42);
java.nio.ByteBuffer byteBuffer45 = byteBuffer43.put((byte)0);
java.nio.CharBuffer charBuffer46 = charsetDecoder1.decode(byteBuffer45);


Progress update: steps=13000, test inputs generated=9742, failing inputs=29      (2022-02-21T09:41:14.645Z     1,56G used)
Progress update: steps=14000, test inputs generated=10560, failing inputs=34      (2022-02-21T09:41:29.985Z     1.66G used)
Progress update: steps=14260, test inputs generated=10776, failing inputs=35      (2022-02-21T09:41:50.273Z     1.96G used)Long execution time 14 sec for
java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int)'a');
java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder3 = charset2.newDecoder();
float float4 = charsetDecoder3.maxCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction5 = java.nio.charset.CodingErrorAction.IGNORE;
java.nio.charset.CharsetDecoder charsetDecoder6 = charsetDecoder3.onMalformedInput(codingErrorAction5);
java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocateDirect(10800000);
java.nio.ByteBuffer byteBuffer9 = byteBuffer8.asReadOnlyBuffer();
boolean boolean10 = byteBuffer9.hasArray();
java.nio.CharBuffer charBuffer11 = charsetDecoder3.decode(byteBuffer9);
java.nio.charset.Charset charset12 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder13 = charset12.newDecoder();
java.nio.charset.Charset charset14 = java.nio.charset.Charset.defaultCharset();
boolean boolean15 = charset12.contains(charset14);
java.nio.charset.CharsetEncoder charsetEncoder16 = charset12.newEncoder();
byte[] byteArray17 = charsetEncoder16.replacement();
java.nio.charset.Charset charset18 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder19 = charset18.newDecoder();
float float20 = charsetDecoder19.maxCharsPerByte();
float float21 = charsetDecoder19.averageCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction22 = charsetDecoder19.unmappableCharacterAction();
java.nio.charset.CharsetEncoder charsetEncoder23 = charsetEncoder16.onUnmappableCharacter(codingErrorAction22);
java.nio.charset.Charset charset24 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder25 = charset24.newDecoder();
java.nio.charset.Charset charset26 = java.nio.charset.Charset.defaultCharset();
boolean boolean27 = charset24.contains(charset26);
java.nio.charset.CharsetEncoder charsetEncoder28 = charset24.newEncoder();
char[] charArray29 = new char[] {  };
java.nio.CharBuffer charBuffer30 = java.nio.CharBuffer.wrap(charArray29);
java.nio.ByteBuffer byteBuffer31 = charsetEncoder28.encode(charBuffer30);
java.nio.CharBuffer charBuffer32 = charBuffer30.slice();
java.nio.ByteBuffer byteBuffer33 = charsetEncoder23.encode(charBuffer32);
java.nio.ByteBuffer byteBuffer34 = byteBuffer33.asReadOnlyBuffer();
int int35 = byteBuffer9.compareTo(byteBuffer33);
java.nio.LongBuffer longBuffer36 = byteBuffer9.asLongBuffer();
int int37 = byteBuffer1.compareTo(byteBuffer9);

Long execution time 12 sec for
java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
float float2 = charsetDecoder1.maxCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction3 = java.nio.charset.CodingErrorAction.IGNORE;
java.nio.charset.CharsetDecoder charsetDecoder4 = charsetDecoder1.onMalformedInput(codingErrorAction3);
java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect(10800000);
java.nio.ByteBuffer byteBuffer7 = byteBuffer6.asReadOnlyBuffer();
boolean boolean8 = byteBuffer7.hasArray();
java.nio.CharBuffer charBuffer9 = charsetDecoder1.decode(byteBuffer7);
java.net.URI uRI11 = new java.net.URI("hi!");
java.lang.String str12 = uRI11.getRawAuthority();
java.lang.String str13 = uRI11.toString();
java.lang.String str14 = uRI11.getUserInfo();
java.io.OutputStream outputStream15 = null;
java.io.FilterOutputStream filterOutputStream16 = new java.io.FilterOutputStream(outputStream15);
byte[] byteArray18 = new byte[] { (byte)100 };
filterOutputStream16.write(byteArray18, (int)(byte)0, (int)(byte)0);
java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.wrap(byteArray18);
java.nio.LongBuffer longBuffer23 = byteBuffer22.asLongBuffer();
java.nio.ByteBuffer byteBuffer24 = byteBuffer22.duplicate();
boolean boolean25 = uRI11.equals((java.lang.Object)byteBuffer22);
java.nio.DoubleBuffer doubleBuffer26 = byteBuffer22.asDoubleBuffer();
java.util.stream.IntStream intStream28 = java.util.stream.IntStream.of((int)'/');
java.util.OptionalInt optionalInt29 = intStream28.min();
short[] shortArray32 = new short[] { (short)1, (byte)10 };
java.nio.ShortBuffer shortBuffer33 = java.nio.ShortBuffer.wrap(shortArray32);
short[] shortArray36 = new short[] { (short)1, (byte)10 };
java.nio.ShortBuffer shortBuffer37 = java.nio.ShortBuffer.wrap(shortArray36);
java.nio.ShortBuffer shortBuffer38 = shortBuffer33.put(shortBuffer37);
int int39 = shortBuffer38.limit();
boolean boolean40 = shortBuffer38.isReadOnly();
boolean boolean41 = optionalInt29.equals((java.lang.Object)shortBuffer38);
java.nio.ByteOrder byteOrder42 = shortBuffer38.order();
java.nio.ByteBuffer byteBuffer43 = byteBuffer22.order(byteOrder42);
java.nio.ByteBuffer byteBuffer45 = byteBuffer43.put((byte)0);
java.nio.CharBuffer charBuffer46 = charsetDecoder1.decode(byteBuffer45);
java.lang.String str47 = charBuffer46.toString();

Long execution time 15 sec for
java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
float float2 = charsetDecoder1.maxCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction3 = java.nio.charset.CodingErrorAction.IGNORE;
java.nio.charset.CharsetDecoder charsetDecoder4 = charsetDecoder1.onMalformedInput(codingErrorAction3);
java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect(10800000);
java.nio.ByteBuffer byteBuffer7 = byteBuffer6.asReadOnlyBuffer();
boolean boolean8 = byteBuffer7.hasArray();
java.nio.CharBuffer charBuffer9 = charsetDecoder1.decode(byteBuffer7);
java.net.URI uRI11 = new java.net.URI("hi!");
java.lang.String str12 = uRI11.getRawAuthority();
java.lang.String str13 = uRI11.toString();
java.lang.String str14 = uRI11.getUserInfo();
java.io.OutputStream outputStream15 = null;
java.io.FilterOutputStream filterOutputStream16 = new java.io.FilterOutputStream(outputStream15);
byte[] byteArray18 = new byte[] { (byte)100 };
filterOutputStream16.write(byteArray18, (int)(byte)0, (int)(byte)0);
java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.wrap(byteArray18);
java.nio.LongBuffer longBuffer23 = byteBuffer22.asLongBuffer();
java.nio.ByteBuffer byteBuffer24 = byteBuffer22.duplicate();
boolean boolean25 = uRI11.equals((java.lang.Object)byteBuffer22);
java.nio.DoubleBuffer doubleBuffer26 = byteBuffer22.asDoubleBuffer();
java.util.stream.IntStream intStream28 = java.util.stream.IntStream.of((int)'/');
java.util.OptionalInt optionalInt29 = intStream28.min();
short[] shortArray32 = new short[] { (short)1, (byte)10 };
java.nio.ShortBuffer shortBuffer33 = java.nio.ShortBuffer.wrap(shortArray32);
short[] shortArray36 = new short[] { (short)1, (byte)10 };
java.nio.ShortBuffer shortBuffer37 = java.nio.ShortBuffer.wrap(shortArray36);
java.nio.ShortBuffer shortBuffer38 = shortBuffer33.put(shortBuffer37);
int int39 = shortBuffer38.limit();
boolean boolean40 = shortBuffer38.isReadOnly();
boolean boolean41 = optionalInt29.equals((java.lang.Object)shortBuffer38);
java.nio.ByteOrder byteOrder42 = shortBuffer38.order();
java.nio.ByteBuffer byteBuffer43 = byteBuffer22.order(byteOrder42);
java.nio.ByteBuffer byteBuffer45 = byteBuffer43.put((byte)0);
java.nio.CharBuffer charBuffer46 = charsetDecoder1.decode(byteBuffer45);
java.nio.DoubleBuffer doubleBuffer47 = byteBuffer45.asDoubleBuffer();


Progress update: steps=15000, test inputs generated=11377, failing inputs=37      (2022-02-21T09:42:41.885Z     2.38G used)
Progress update: steps=15488, test inputs generated=11794, failing inputs=37      (2022-02-21T09:42:50.321Z     2.20G used)
Progress update: steps=16000, test inputs generated=12223, failing inputs=38      (2022-02-21T09:43:01.351Z     2.55G used)Long execution time 15 sec for
java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
float float2 = charsetDecoder1.maxCharsPerByte();
float float3 = charsetDecoder1.averageCharsPerByte();
java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.allocateDirect(10800000);
java.nio.ByteBuffer byteBuffer7 = byteBuffer5.putLong((long)3600000);
double double8 = byteBuffer5.getDouble();
java.nio.CharBuffer charBuffer9 = charsetDecoder1.decode(byteBuffer5);

Long execution time 16 sec for
java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
boolean boolean3 = charset0.contains(charset2);
java.nio.charset.CharsetEncoder charsetEncoder4 = charset0.newEncoder();
byte[] byteArray5 = charsetEncoder4.replacement();
java.nio.charset.Charset charset6 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder7 = charset6.newDecoder();
float float8 = charsetDecoder7.maxCharsPerByte();
float float9 = charsetDecoder7.averageCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction10 = charsetDecoder7.unmappableCharacterAction();
java.nio.charset.CharsetEncoder charsetEncoder11 = charsetEncoder4.onUnmappableCharacter(codingErrorAction10);
java.nio.charset.Charset charset12 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder13 = charset12.newDecoder();
java.nio.charset.Charset charset14 = java.nio.charset.Charset.defaultCharset();
boolean boolean15 = charset12.contains(charset14);
java.nio.charset.CharsetEncoder charsetEncoder16 = charset12.newEncoder();
byte[] byteArray17 = charsetEncoder16.replacement();
java.nio.charset.CharsetEncoder charsetEncoder18 = charsetEncoder4.replaceWith(byteArray17);
java.nio.charset.Charset charset19 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder20 = charset19.newDecoder();
java.nio.charset.Charset charset21 = java.nio.charset.Charset.defaultCharset();
boolean boolean22 = charset19.contains(charset21);
java.nio.charset.CharsetEncoder charsetEncoder23 = charset19.newEncoder();
char[] charArray24 = new char[] {  };
java.nio.CharBuffer charBuffer25 = java.nio.CharBuffer.wrap(charArray24);
java.nio.ByteBuffer byteBuffer26 = charsetEncoder23.encode(charBuffer25);
java.nio.CharBuffer charBuffer27 = charBuffer25.slice();
java.nio.CharBuffer charBuffer28 = charBuffer25.compact();
java.nio.CharBuffer charBuffer29 = charBuffer25.duplicate();
java.nio.ByteBuffer byteBuffer30 = charsetEncoder4.encode(charBuffer25);
java.nio.charset.Charset charset31 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder32 = charset31.newDecoder();
java.nio.charset.Charset charset33 = java.nio.charset.Charset.defaultCharset();
boolean boolean34 = charset31.contains(charset33);
java.nio.charset.CharsetEncoder charsetEncoder35 = charset31.newEncoder();
char[] charArray36 = new char[] {  };
java.nio.CharBuffer charBuffer37 = java.nio.CharBuffer.wrap(charArray36);
java.nio.ByteBuffer byteBuffer38 = charsetEncoder35.encode(charBuffer37);
java.nio.CharBuffer charBuffer39 = charBuffer37.slice();
java.nio.CharBuffer charBuffer40 = charBuffer37.compact();
java.nio.ByteOrder byteOrder41 = charBuffer37.order();
java.nio.ByteBuffer byteBuffer43 = java.nio.ByteBuffer.allocate((int)'a');
java.nio.charset.Charset charset44 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder45 = charset44.newDecoder();
float float46 = charsetDecoder45.maxCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction47 = java.nio.charset.CodingErrorAction.IGNORE;
java.nio.charset.CharsetDecoder charsetDecoder48 = charsetDecoder45.onMalformedInput(codingErrorAction47);
java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect(10800000);
java.nio.ByteBuffer byteBuffer51 = byteBuffer50.asReadOnlyBuffer();
boolean boolean52 = byteBuffer51.hasArray();
java.nio.CharBuffer charBuffer53 = charsetDecoder45.decode(byteBuffer51);
java.nio.charset.Charset charset54 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder55 = charset54.newDecoder();
java.nio.charset.Charset charset56 = java.nio.charset.Charset.defaultCharset();
boolean boolean57 = charset54.contains(charset56);
java.nio.charset.CharsetEncoder charsetEncoder58 = charset54.newEncoder();
byte[] byteArray59 = charsetEncoder58.replacement();
java.nio.charset.Charset charset60 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder61 = charset60.newDecoder();
float float62 = charsetDecoder61.maxCharsPerByte();
float float63 = charsetDecoder61.averageCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction64 = charsetDecoder61.unmappableCharacterAction();
java.nio.charset.CharsetEncoder charsetEncoder65 = charsetEncoder58.onUnmappableCharacter(codingErrorAction64);
java.nio.charset.Charset charset66 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder67 = charset66.newDecoder();
java.nio.charset.Charset charset68 = java.nio.charset.Charset.defaultCharset();
boolean boolean69 = charset66.contains(charset68);
java.nio.charset.CharsetEncoder charsetEncoder70 = charset66.newEncoder();
char[] charArray71 = new char[] {  };
java.nio.CharBuffer charBuffer72 = java.nio.CharBuffer.wrap(charArray71);
java.nio.ByteBuffer byteBuffer73 = charsetEncoder70.encode(charBuffer72);
java.nio.CharBuffer charBuffer74 = charBuffer72.slice();
java.nio.ByteBuffer byteBuffer75 = charsetEncoder65.encode(charBuffer74);
java.nio.ByteBuffer byteBuffer76 = byteBuffer75.asReadOnlyBuffer();
int int77 = byteBuffer51.compareTo(byteBuffer75);
java.nio.LongBuffer longBuffer78 = byteBuffer51.asLongBuffer();
int int79 = byteBuffer43.compareTo(byteBuffer51);
java.nio.charset.CoderResult coderResult81 = charsetEncoder4.encode(charBuffer37, byteBuffer43, true);


Progress update: steps=16145, test inputs generated=12344, failing inputs=39      (2022-02-21T09:43:50.808Z     2.06G used)Long execution time 16 sec for
java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
boolean boolean3 = charset0.contains(charset2);
java.nio.charset.CharsetEncoder charsetEncoder4 = charset0.newEncoder();
byte[] byteArray5 = charsetEncoder4.replacement();
java.nio.charset.Charset charset6 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder7 = charset6.newDecoder();
float float8 = charsetDecoder7.maxCharsPerByte();
float float9 = charsetDecoder7.averageCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction10 = charsetDecoder7.unmappableCharacterAction();
java.nio.charset.CharsetEncoder charsetEncoder11 = charsetEncoder4.onUnmappableCharacter(codingErrorAction10);
java.nio.charset.Charset charset12 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder13 = charset12.newDecoder();
java.nio.charset.Charset charset14 = java.nio.charset.Charset.defaultCharset();
boolean boolean15 = charset12.contains(charset14);
java.nio.charset.CharsetEncoder charsetEncoder16 = charset12.newEncoder();
byte[] byteArray17 = charsetEncoder16.replacement();
java.nio.charset.CharsetEncoder charsetEncoder18 = charsetEncoder4.replaceWith(byteArray17);
java.nio.charset.Charset charset19 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder20 = charset19.newDecoder();
java.nio.charset.Charset charset21 = java.nio.charset.Charset.defaultCharset();
boolean boolean22 = charset19.contains(charset21);
java.nio.charset.CharsetEncoder charsetEncoder23 = charset19.newEncoder();
char[] charArray24 = new char[] {  };
java.nio.CharBuffer charBuffer25 = java.nio.CharBuffer.wrap(charArray24);
java.nio.ByteBuffer byteBuffer26 = charsetEncoder23.encode(charBuffer25);
java.nio.CharBuffer charBuffer27 = charBuffer25.slice();
java.nio.CharBuffer charBuffer28 = charBuffer25.compact();
java.nio.CharBuffer charBuffer29 = charBuffer25.duplicate();
java.nio.ByteBuffer byteBuffer30 = charsetEncoder4.encode(charBuffer25);
java.nio.charset.Charset charset31 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder32 = charset31.newDecoder();
java.nio.charset.Charset charset33 = java.nio.charset.Charset.defaultCharset();
boolean boolean34 = charset31.contains(charset33);
java.nio.charset.CharsetEncoder charsetEncoder35 = charset31.newEncoder();
char[] charArray36 = new char[] {  };
java.nio.CharBuffer charBuffer37 = java.nio.CharBuffer.wrap(charArray36);
java.nio.ByteBuffer byteBuffer38 = charsetEncoder35.encode(charBuffer37);
java.nio.CharBuffer charBuffer39 = charBuffer37.slice();
java.nio.CharBuffer charBuffer40 = charBuffer37.compact();
java.nio.ByteOrder byteOrder41 = charBuffer37.order();
java.nio.ByteBuffer byteBuffer43 = java.nio.ByteBuffer.allocate((int)'a');
java.nio.charset.Charset charset44 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder45 = charset44.newDecoder();
float float46 = charsetDecoder45.maxCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction47 = java.nio.charset.CodingErrorAction.IGNORE;
java.nio.charset.CharsetDecoder charsetDecoder48 = charsetDecoder45.onMalformedInput(codingErrorAction47);
java.nio.ByteBuffer byteBuffer50 = java.nio.ByteBuffer.allocateDirect(10800000);
java.nio.ByteBuffer byteBuffer51 = byteBuffer50.asReadOnlyBuffer();
boolean boolean52 = byteBuffer51.hasArray();
java.nio.CharBuffer charBuffer53 = charsetDecoder45.decode(byteBuffer51);
java.nio.charset.Charset charset54 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder55 = charset54.newDecoder();
java.nio.charset.Charset charset56 = java.nio.charset.Charset.defaultCharset();
boolean boolean57 = charset54.contains(charset56);
java.nio.charset.CharsetEncoder charsetEncoder58 = charset54.newEncoder();
byte[] byteArray59 = charsetEncoder58.replacement();
java.nio.charset.Charset charset60 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder61 = charset60.newDecoder();
float float62 = charsetDecoder61.maxCharsPerByte();
float float63 = charsetDecoder61.averageCharsPerByte();
java.nio.charset.CodingErrorAction codingErrorAction64 = charsetDecoder61.unmappableCharacterAction();
java.nio.charset.CharsetEncoder charsetEncoder65 = charsetEncoder58.onUnmappableCharacter(codingErrorAction64);
java.nio.charset.Charset charset66 = java.nio.charset.Charset.defaultCharset();
java.nio.charset.CharsetDecoder charsetDecoder67 = charset66.newDecoder();
java.nio.charset.Charset charset68 = java.nio.charset.Charset.defaultCharset();
boolean boolean69 = charset66.contains(charset68);
java.nio.charset.CharsetEncoder charsetEncoder70 = charset66.newEncoder();
char[] charArray71 = new char[] {  };
java.nio.CharBuffer charBuffer72 = java.nio.CharBuffer.wrap(charArray71);
java.nio.ByteBuffer byteBuffer73 = charsetEncoder70.encode(charBuffer72);
java.nio.CharBuffer charBuffer74 = charBuffer72.slice();
java.nio.ByteBuffer byteBuffer75 = charsetEncoder65.encode(charBuffer74);
java.nio.ByteBuffer byteBuffer76 = byteBuffer75.asReadOnlyBuffer();
int int77 = byteBuffer51.compareTo(byteBuffer75);
java.nio.LongBuffer longBuffer78 = byteBuffer51.asLongBuffer();
int int79 = byteBuffer43.compareTo(byteBuffer51);
java.nio.charset.CoderResult coderResult81 = charsetEncoder4.encode(charBuffer37, byteBuffer43, true);
java.net.InetAddress inetAddress82 = java.net.InetAddress.getLocalHost();
java.lang.String str83 = inetAddress82.getCanonicalHostName();
java.lang.String str84 = inetAddress82.toString();
byte[] byteArray85 = inetAddress82.getAddress();
java.nio.charset.CharsetEncoder charsetEncoder86 = charsetEncoder4.replaceWith(byteArray85);


Progress update: steps=16145, test inputs generated=12345, failing inputs=39      (2022-02-21T09:43:52.477Z     2.49G used)
Normal method executions: 14352555
Exceptional method executions: 3122

Average method execution time (normal termination):      0.0249
Average method execution time (exceptional termination): 0.889
Approximate memory usage 2.49G
Explorer = ForwardGenerator(steps: 16145, null steps: 3800, num_sequences_generated: 12345;
    allSequences: 12345, regresson seqs: 11911, error seqs: 39=39=39, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 395;
    runtimePrimitivesSeen:891)

Error-revealing test output:
Error-revealing test count: 39
Writing error-revealing JUnit tests...
Created file /experiment/results/randoop10/time-org.joda.time.chrono.BasicChronology-org.joda.time.chrono.EthiopicChronology-2/ErrorTest0.java
Created file /experiment/results/randoop10/time-org.joda.time.chrono.BasicChronology-org.joda.time.chrono.EthiopicChronology-2/ErrorTest.java
Wrote error-revealing JUnit tests.

About to look for failing assertions in 6635 regression sequences.

Regression test output:
Regression test count: 6635
Writing regression JUnit tests...
Created file /experiment/results/randoop10/time-org.joda.time.chrono.BasicChronology-org.joda.time.chrono.EthiopicChronology-2/RegressionTest0.java
Created file /experiment/results/randoop10/time-org.joda.time.chrono.BasicChronology-org.joda.time.chrono.EthiopicChronology-2/RegressionTest1.java
Created file /experiment/results/randoop10/time-org.joda.time.chrono.BasicChronology-org.joda.time.chrono.EthiopicChronology-2/RegressionTest2.java
Created file /experiment/results/randoop10/time-org.joda.time.chrono.BasicChronology-org.joda.time.chrono.EthiopicChronology-2/RegressionTest3.java
                                                                                                                                                                                                       Created file /experiment/results/randoop10/time-org.joda.time.chrono.BasicChronology-org.joda.time.chrono.EthiopicChronology-2/RegressionTest4.java
Created file /experiment/results/randoop10/time-org.joda.time.chrono.BasicChronology-org.joda.time.chrono.EthiopicChronology-2/RegressionTest5.java
Created file /experiment/results/randoop10/time-org.joda.time.chrono.BasicChronology-org.joda.time.chrono.EthiopicChronology-2/RegressionTest6.java
Created file /experiment/results/randoop10/time-org.joda.time.chrono.BasicChronology-org.joda.time.chrono.EthiopicChronology-2/RegressionTest7.java
Created file /experiment/results/randoop10/time-org.joda.time.chrono.BasicChronology-org.joda.time.chrono.EthiopicChronology-2/RegressionTest8.java
Created file /experiment/results/randoop10/time-org.joda.time.chrono.BasicChronology-org.joda.time.chrono.EthiopicChronology-2/RegressionTest9.java
Created file /experiment/results/randoop10/time-org.joda.time.chrono.BasicChronology-org.joda.time.chrono.EthiopicChronology-2/RegressionTest10.java
Created file /experiment/results/randoop10/time-org.joda.time.chrono.BasicChronology-org.joda.time.chrono.EthiopicChronology-2/RegressionTest11.java
Created file /experiment/results/randoop10/time-org.joda.time.chrono.BasicChronology-org.joda.time.chrono.EthiopicChronology-2/RegressionTest12.java
Created file /experiment/results/randoop10/time-org.joda.time.chrono.BasicChronology-org.joda.time.chrono.EthiopicChronology-2/RegressionTest13.java
Created file /experiment/results/randoop10/time-org.joda.time.chrono.BasicChronology-org.joda.time.chrono.EthiopicChronology-2/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  org.joda.time.format.DateTimeFormatter.print(org.joda.time.ReadableInstant)
  Possibly flaky:  org.joda.time.ReadablePartial.equals(java.lang.Object)
  Possibly flaky:  org.joda.time.LocalTime.compareTo(org.joda.time.ReadablePartial)
  Possibly flaky:  org.joda.time.LocalDateTime.withFieldAdded(org.joda.time.DurationFieldType,int)
  Possibly flaky:  org.joda.time.LocalDateTime.toDate()
  Possibly flaky:  org.joda.time.LocalDateTime.getSecondOfMinute()
  Possibly flaky:  org.joda.time.LocalDateTime.getMinuteOfHour()
  Possibly flaky:  org.joda.time.LocalDateTime.getMillisOfSecond()
  Possibly flaky:  org.joda.time.LocalDate.fromCalendarFields(java.util.Calendar)
  Possibly flaky:  org.joda.time.DurationFieldType.days()
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

Uncompilable sequences generated (count: 44).
Please report uncompilable sequences at https://github.com/randoop/randoop/issues ,
providing the information requested at https://randoop.github.io/randoop/manual/index.html#bug-reporting .

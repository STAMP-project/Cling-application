Randoop for Java version "4.3.0, local changes, branch master, commit 7af20ae, 2022-01-31".

Will try to generate tests for 22 classes.
PUBLIC MEMBERS=332
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2022-02-21T14:33:36.734Z     204M used)
Progress update: steps=1000, test inputs generated=667, failing inputs=0      (2022-02-21T14:33:53.033Z     546M used)
Progress update: steps=2000, test inputs generated=1536, failing inputs=0      (2022-02-21T14:34:10.021Z     606M used)
Progress update: steps=2899, test inputs generated=2319, failing inputs=0      (2022-02-21T14:34:36.751Z     182M used)Long execution time 44 sec for
org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double)(byte)10);
org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.24999999999999964d, (double)10.0f);
org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution(1.0000000000000402d);
double double10 = poissonDistribution8.probability(2147483646);


Progress update: steps=3000, test inputs generated=2407, failing inputs=0      (2022-02-21T14:35:13.332Z     824M used)
Progress update: steps=3883, test inputs generated=3195, failing inputs=0      (2022-02-21T14:36:11.579Z     669M used)Long execution time 45 sec for
org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double)(byte)10);
org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.24999999999999964d, (double)10.0f);
org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution(1.0000000000000402d);
double double10 = poissonDistribution8.probability(2147483646);
poissonDistribution8.setMean(1225.0d);


Progress update: steps=4000, test inputs generated=3296, failing inputs=0      (2022-02-21T14:36:16.864Z     372M used)Long execution time 43 sec for
org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double)(byte)10);
org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.24999999999999964d, (double)10.0f);
org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution(1.0000000000000402d);
double double10 = poissonDistribution8.probability(2147483646);
double double12 = poissonDistribution8.normalApproximateProbability((-1));


Progress update: steps=4776, test inputs generated=3986, failing inputs=0      (2022-02-21T14:37:14.586Z     625M used)Long execution time 44 sec for
org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double)(byte)10);
org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.24999999999999964d, (double)10.0f);
org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution(1.0000000000000402d);
double double10 = poissonDistribution8.probability(2147483646);
double double11 = poissonDistribution8.getMean();


Progress update: steps=5000, test inputs generated=4183, failing inputs=0      (2022-02-21T14:38:03.112Z     1.07G used)
Progress update: steps=5707, test inputs generated=4786, failing inputs=0      (2022-02-21T14:38:14.587Z     513M used)
Progress update: steps=6000, test inputs generated=5050, failing inputs=0      (2022-02-21T14:38:19.467Z     568M used)
Progress update: steps=7000, test inputs generated=5933, failing inputs=0      (2022-02-21T14:38:36.708Z     996M used)
Progress update: steps=7279, test inputs generated=6178, failing inputs=0      (2022-02-21T14:39:14.587Z     794M used)Long execution time 47 sec for
org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double)(byte)10);
org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.24999999999999964d, (double)10.0f);
org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution(1.0000000000000402d);
double double10 = poissonDistribution8.probability(2147483646);
poissonDistribution8.setMean(1225.0d);
poissonDistribution8.setMean(0.691462461274013d);

Long execution time 49 sec for
org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double)(byte)10);
org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.24999999999999964d, (double)10.0f);
org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution(1.0000000000000402d);
double double10 = poissonDistribution8.probability(2147483646);
poissonDistribution8.setMean(1225.0d);
double double14 = poissonDistribution8.probability((double)0.0f);


Progress update: steps=7727, test inputs generated=6567, failing inputs=0      (2022-02-21T14:40:29.021Z     634M used)Long execution time 47 sec for
org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double)(byte)10);
org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.24999999999999964d, (double)10.0f);
org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution(1.0000000000000402d);
double double10 = poissonDistribution8.probability(2147483646);
poissonDistribution8.setMean(1225.0d);
double double14 = poissonDistribution8.probability((double)0.0f);
double double16 = poissonDistribution8.probability(3.5080495063977146E-4d);


Progress update: steps=8000, test inputs generated=6798, failing inputs=0      (2022-02-21T14:41:21.738Z     484M used)
Progress update: steps=8386, test inputs generated=7135, failing inputs=0      (2022-02-21T14:41:29.022Z     934M used)
Progress update: steps=9000, test inputs generated=7662, failing inputs=0      (2022-02-21T14:41:42.264Z     463M used)
Progress update: steps=10000, test inputs generated=8536, failing inputs=0      (2022-02-21T14:42:03.386Z     1.21G used)
Progress update: steps=11000, test inputs generated=9377, failing inputs=0      (2022-02-21T14:42:19.777Z     1.06G used)
Progress update: steps=11320, test inputs generated=9637, failing inputs=0      (2022-02-21T14:42:29.022Z     756M used)Long execution time 50 sec for
org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double)(byte)10);
org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.24999999999999964d, (double)10.0f);
org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution(1.0000000000000402d);
double double10 = poissonDistribution8.probability(2147483646);
poissonDistribution8.setMean(1225.0d);
double double13 = poissonDistribution8.getMean();

Long execution time 48 sec for
org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
org.apache.commons.math.distribution.WeibullDistribution weibullDistribution3 = distributionFactory0.createWeibullDistribution(10.0d, (double)(byte)10);
org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.24999999999999964d, (double)10.0f);
org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution(1.0000000000000402d);
double double10 = poissonDistribution8.probability(2147483646);
poissonDistribution8.setMean(1225.0d);
double double13 = poissonDistribution8.getMean();
double double14 = poissonDistribution8.getMean();


Progress update: steps=11716, test inputs generated=9976, failing inputs=0      (2022-02-21T14:44:10.669Z     1,37G used)
Normal method executions: 7236950
Exceptional method executions: 3033

Average method execution time (normal termination):      0,0587
Average method execution time (exceptional termination): 0,0805
Approximate memory usage 1,37G
Explorer = ForwardGenerator(steps: 11716, null steps: 1740, num_sequences_generated: 9976;
    allSequences: 9976, regresson seqs: 9975, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 1;
    runtimePrimitivesSeen:313)

No error-revealing tests to output.

About to look for failing assertions in 6145 regression sequences.

Regression test output:
Regression test count: 6145
Writing regression JUnit tests...
                                                                                                                                                                                                       Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-3/RegressionTest0.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-3/RegressionTest1.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-3/RegressionTest2.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-3/RegressionTest3.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-3/RegressionTest4.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-3/RegressionTest5.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-3/RegressionTest6.java

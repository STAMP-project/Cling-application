Randoop for Java version "4.3.0, local changes, branch master, commit 7af20ae, 2022-01-31".
Cannot instantiate non-accessible class org.mockito.asm.MethodWriter specified via --testclass or --classlist; will use its static methods.

Will try to generate tests for 8 classes.
PUBLIC MEMBERS=92
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2022-02-22T15:55:25.345Z     226M used)
Progress update: steps=1000, test inputs generated=517, failing inputs=0      (2022-02-22T15:55:36.580Z     316M used)
Progress update: steps=2000, test inputs generated=1144, failing inputs=0      (2022-02-22T15:55:48.924Z     238M used)
Progress update: steps=3000, test inputs generated=1749, failing inputs=0      (2022-02-22T15:56:10.149Z     811M used)
Progress update: steps=3948, test inputs generated=2474, failing inputs=0      (2022-02-22T15:56:25.362Z     2.02G used)
Progress update: steps=4000, test inputs generated=2516, failing inputs=0      (2022-02-22T15:56:26.038Z     2.26G used)
Progress update: steps=5000, test inputs generated=3312, failing inputs=0      (2022-02-22T15:56:44.959Z     1.62G used)
Progress update: steps=6000, test inputs generated=4075, failing inputs=0      (2022-02-22T15:57:03.681Z     2.38G used)
Progress update: steps=6968, test inputs generated=4812, failing inputs=0      (2022-02-22T15:57:25.363Z     2.09G used)
Progress update: steps=7000, test inputs generated=4836, failing inputs=0      (2022-02-22T15:57:25.917Z     2.25G used)
Progress update: steps=8000, test inputs generated=5568, failing inputs=0      (2022-02-22T15:57:47.347Z     1.80G used)
Progress update: steps=9000, test inputs generated=6346, failing inputs=0      (2022-02-22T15:58:07.959Z     2.80G used)
Progress update: steps=9726, test inputs generated=6883, failing inputs=0      (2022-02-22T15:58:25.364Z     3.36G used)
Progress update: steps=10000, test inputs generated=7101, failing inputs=0      (2022-02-22T15:58:31.722Z     3.47G used)
Progress update: steps=11000, test inputs generated=7839, failing inputs=0      (2022-02-22T15:59:06.724Z     3.91G used)
Progress update: steps=11470, test inputs generated=8194, failing inputs=0      (2022-02-22T15:59:25.596Z     3.89G used)
Progress update: steps=12000, test inputs generated=8596, failing inputs=0      (2022-02-22T15:59:48.594Z     3.93G used)
Progress update: steps=12778, test inputs generated=9187, failing inputs=0      (2022-02-22T16:00:25.596Z     3.94G used)
Progress update: steps=13000, test inputs generated=9343, failing inputs=0      (2022-02-22T16:00:42.395Z     3.94G used)
Problem with sequence:
org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector(); // [NormalExecution org.mockito.asm.ByteVector@29d33bb9 [class org.mockito.asm.ByteVector]]
int int1 = 10; // [NormalExecution 10 [class java.lang.Integer]]
org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort(10); // [NormalExecution org.mockito.asm.ByteVector@29d33bb9 [class org.mockito.asm.ByteVector]]
byte[] byteArray3 = null; // [NormalExecution null]
short short4 = (short)1; // [NormalExecution 1 [class java.lang.Short]]
int int5 = 7; // [NormalExecution 7 [class java.lang.Integer]]
org.mockito.asm.ByteVector byteVector6 = byteVector2.putByteArray(byteArray3, (int)(short)1, 7); // [NormalExecution org.mockito.asm.ByteVector@29d33bb9 [class org.mockito.asm.ByteVector]]
org.mockito.asm.ByteVector byteVector7 = new org.mockito.asm.ByteVector(); // [NormalExecution org.mockito.asm.ByteVector@23eed48d [class org.mockito.asm.ByteVector]]
int int8 = 10; // [NormalExecution 10 [class java.lang.Integer]]
org.mockito.asm.ByteVector byteVector9 = byteVector7.putShort(10); // [NormalExecution org.mockito.asm.ByteVector@23eed48d [class org.mockito.asm.ByteVector]]
char char10 = '4'; // [NormalExecution 4 [class java.lang.Character]]
org.mockito.asm.ByteVector byteVector11 = byteVector9.putInt((int)'4'); // [NormalExecution org.mockito.asm.ByteVector@23eed48d [class org.mockito.asm.ByteVector]]
byte byte12 = (byte)1; // [NormalExecution 1 [class java.lang.Byte]]
org.mockito.asm.ByteVector byteVector13 = byteVector9.putInt((int)(byte)1); // [NormalExecution org.mockito.asm.ByteVector@23eed48d [class org.mockito.asm.ByteVector]]
java.lang.String str14 = "L308380898"; // [NormalExecution L308380898 [class java.lang.String]]
org.mockito.asm.ByteVector byteVector15 = byteVector13.putUTF8("L308380898"); // [NormalExecution org.mockito.asm.ByteVector@23eed48d [class org.mockito.asm.ByteVector]]
char char16 = 'a'; // [NormalExecution a [class java.lang.Character]]
org.mockito.asm.ByteVector byteVector17 = byteVector15.putShort((int)'a'); // [NormalExecution org.mockito.asm.ByteVector@23eed48d [class org.mockito.asm.ByteVector]]
char char18 = 'a'; // [NormalExecution a [class java.lang.Character]]
org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int)'a'); // [NormalExecution org.mockito.asm.ClassWriter@3c202bf5 [class org.mockito.asm.ClassWriter]]
byte[] byteArray20 = classWriter19.toByteArray(); // [NormalExecution [-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] [class [B]]
int int21 = 11; // [NormalExecution 11 [class java.lang.Integer]]
int int22 = 5; // [NormalExecution 5 [class java.lang.Integer]]
org.mockito.asm.ByteVector byteVector23 = byteVector15.putByteArray(byteArray20, 11, 5); // [NormalExecution org.mockito.asm.ByteVector@23eed48d [class org.mockito.asm.ByteVector]]
short short24 = (short)0; // [NormalExecution 0 [class java.lang.Short]]
int int25 = 14; // [NormalExecution 14 [class java.lang.Integer]]
org.mockito.asm.ByteVector byteVector26 = byteVector6.putByteArray(byteArray20, (int)(short)0, 14); // [NormalExecution org.mockito.asm.ByteVector@29d33bb9 [class org.mockito.asm.ByteVector]]
int int27 = 111; // [NormalExecution 111 [class java.lang.Integer]]
org.mockito.asm.ByteVector byteVector28 = byteVector26.putByte(111); // [NormalExecution org.mockito.asm.ByteVector@29d33bb9 [class org.mockito.asm.ByteVector]]
java.lang.String str29 = "L663465758"; // [NormalExecution L663465758 [class java.lang.String]]
org.mockito.asm.ByteVector byteVector30 = byteVector26.putUTF8("L663465758"); // [NormalExecution org.mockito.asm.ByteVector@29d33bb9 [class org.mockito.asm.ByteVector]]
<randoop.contract.IsNotNull@1f [byteVector2]>
<randoop.contract.IsNotNull@1f [byteVector6]>
<randoop.contract.IsNotNull@1f [byteVector9]>
<randoop.contract.IsNotNull@1f [byteVector11]>
<randoop.contract.IsNotNull@1f [byteVector13]>
<randoop.contract.IsNotNull@1f [byteVector15]>
<randoop.contract.IsNotNull@1f [byteVector17]>
<randoop.contract.IsNotNull@1f [byteArray20]>
<<ObserverEqValue java.util.Arrays.toString : (byte[]) -> java.lang.String, value = '[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] [class java.lang.String]' [byteArray20]>
<randoop.contract.IsNotNull@1f [byteVector23]>
<randoop.contract.IsNotNull@1f [byteVector26]>
<randoop.contract.IsNotNull@1f [byteVector28]>
<randoop.contract.IsNotNull@1f [byteVector30]>
java.lang.OutOfMemoryError: GC overhead limit exceeded

createAndClassifySequences threw an exception
java.lang.OutOfMemoryError: GC overhead limit exceeded


Throwable thrown while handling command: java.lang.OutOfMemoryError: GC overhead limit exceeded
java.lang.OutOfMemoryError: GC overhead limit exceeded

Randoop failed.
Last sequence under execution: 
org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort(10);
byte[] byteArray3 = null;
org.mockito.asm.ByteVector byteVector6 = byteVector2.putByteArray(byteArray3, (int)(short)1, 7);
org.mockito.asm.ByteVector byteVector7 = new org.mockito.asm.ByteVector();
org.mockito.asm.ByteVector byteVector9 = byteVector7.putShort(10);
org.mockito.asm.ByteVector byteVector11 = byteVector9.putInt((int)'4');
org.mockito.asm.ByteVector byteVector13 = byteVector9.putInt((int)(byte)1);
org.mockito.asm.ByteVector byteVector15 = byteVector13.putUTF8("L308380898");
org.mockito.asm.ByteVector byteVector17 = byteVector15.putShort((int)'a');
org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int)'a');
byte[] byteArray20 = classWriter19.toByteArray();
org.mockito.asm.ByteVector byteVector23 = byteVector15.putByteArray(byteArray20, 11, 5);
org.mockito.asm.ByteVector byteVector26 = byteVector6.putByteArray(byteArray20, (int)(short)0, 14);
org.mockito.asm.ByteVector byteVector28 = byteVector26.putByte(111);
org.mockito.asm.ByteVector byteVector30 = byteVector26.putUTF8("L663465758");

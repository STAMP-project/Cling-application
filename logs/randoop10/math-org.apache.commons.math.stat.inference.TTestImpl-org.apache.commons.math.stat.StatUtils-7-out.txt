Randoop for Java version "4.3.0, local changes, branch master, commit 7af20ae, 2022-01-31".

Will try to generate tests for 22 classes.
PUBLIC MEMBERS=332
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2022-02-22T19:02:35.081Z     226M used)
Progress update: steps=1000, test inputs generated=746, failing inputs=0      (2022-02-22T19:02:52.612Z     181M used)
Progress update: steps=2000, test inputs generated=1572, failing inputs=0      (2022-02-22T19:03:00.019Z     924M used)
Progress update: steps=3000, test inputs generated=2410, failing inputs=0      (2022-02-22T19:03:14.851Z     184M used)
Progress update: steps=4000, test inputs generated=3242, failing inputs=0      (2022-02-22T19:03:21.153Z     220M used)
Progress update: steps=5000, test inputs generated=4029, failing inputs=0      (2022-02-22T19:03:26.970Z     1,33G used)
Progress update: steps=6000, test inputs generated=4854, failing inputs=0      (2022-02-22T19:03:33.348Z     1.20G used)
Progress update: steps=6327, test inputs generated=5119, failing inputs=0      (2022-02-22T19:03:35.103Z     633M used)
Progress update: steps=7000, test inputs generated=5652, failing inputs=0      (2022-02-22T19:03:38.532Z     1.09G used)
Progress update: steps=8000, test inputs generated=6442, failing inputs=0      (2022-02-22T19:03:43.954Z     984M used)
Progress update: steps=9000, test inputs generated=7213, failing inputs=0      (2022-02-22T19:03:48.940Z     663M used)
Progress update: steps=10000, test inputs generated=8020, failing inputs=0      (2022-02-22T19:03:54.783Z     476M used)
Progress update: steps=11000, test inputs generated=8806, failing inputs=0      (2022-02-22T19:04:01.024Z     910M used)
Progress update: steps=11022, test inputs generated=8824, failing inputs=0      (2022-02-22T19:04:35.103Z     1.01G used)Long execution time 46 sec for
org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double)(byte)10);
org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory0.createWeibullDistribution((double)100, (double)'4');
org.apache.commons.math.distribution.WeibullDistribution weibullDistribution8 = distributionFactory0.createWeibullDistribution(6.907755278982138d, (double)10L);
org.apache.commons.math.distribution.PoissonDistribution poissonDistribution10 = distributionFactory0.createPoissonDistribution((double)'#');
double double12 = poissonDistribution10.normalApproximateProbability((int)'#');
int int14 = poissonDistribution10.inverseCumulativeProbability((double)0);
poissonDistribution10.setMean((double)1.0f);
double double17 = poissonDistribution10.getMean();
double double18 = poissonDistribution10.getMean();
double double19 = poissonDistribution10.getMean();
double double21 = poissonDistribution10.probability(2147330716);


Progress update: steps=12000, test inputs generated=9624, failing inputs=0      (2022-02-22T19:04:52.823Z     748M used)
Progress update: steps=13000, test inputs generated=10417, failing inputs=0      (2022-02-22T19:05:01.588Z     619M used)
Progress update: steps=13682, test inputs generated=10959, failing inputs=0      (2022-02-22T19:05:48.197Z     870M used)Long execution time 45 sec for
org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double)(byte)10);
org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory0.createWeibullDistribution((double)100, (double)'4');
org.apache.commons.math.distribution.WeibullDistribution weibullDistribution8 = distributionFactory0.createWeibullDistribution(6.907755278982138d, (double)10L);
org.apache.commons.math.distribution.PoissonDistribution poissonDistribution10 = distributionFactory0.createPoissonDistribution((double)'#');
double double12 = poissonDistribution10.normalApproximateProbability((int)'#');
int int14 = poissonDistribution10.inverseCumulativeProbability((double)0);
poissonDistribution10.setMean((double)1.0f);
double double18 = poissonDistribution10.cumulativeProbability((int)(byte)1);
double double19 = poissonDistribution10.getMean();
poissonDistribution10.setMean(2321.9996744791665d);
double double23 = poissonDistribution10.normalApproximateProbability((int)'#');
double double25 = poissonDistribution10.probability(2.147483646E9d);


Progress update: steps=14000, test inputs generated=11213, failing inputs=0      (2022-02-22T19:05:51.919Z     352M used)
Progress update: steps=15000, test inputs generated=12003, failing inputs=0      (2022-02-22T19:05:55.860Z     273M used)
Progress update: steps=16000, test inputs generated=12787, failing inputs=0      (2022-02-22T19:05:59.957Z     304M used)
Progress update: steps=17000, test inputs generated=13569, failing inputs=0      (2022-02-22T19:06:04.110Z     91,3M used)
Progress update: steps=18000, test inputs generated=14370, failing inputs=0      (2022-02-22T19:06:08.492Z     147M used)
Progress update: steps=19000, test inputs generated=15150, failing inputs=0      (2022-02-22T19:06:12.674Z     1.31G used)
Progress update: steps=19438, test inputs generated=15485, failing inputs=0      (2022-02-22T19:06:50.445Z     1.02G used)Long execution time 166 sec for
org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double)(byte)10);
org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution5 = distributionFactory0.createCauchyDistribution((double)'#', 28.0d);
org.apache.commons.math.distribution.PoissonDistribution poissonDistribution7 = distributionFactory0.createPoissonDistribution((double)1);
org.apache.commons.math.distribution.NormalDistribution normalDistribution10 = distributionFactory0.createNormalDistribution(0.21869797718126205d, 7.192347957422382E-28d);
org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution12 = distributionFactory0.createExponentialDistribution((double)32);
org.apache.commons.math.distribution.NormalDistribution normalDistribution15 = distributionFactory0.createNormalDistribution((double)0, 0.8473058554389479d);
org.apache.commons.math.distribution.NormalDistribution normalDistribution16 = distributionFactory0.createNormalDistribution();
org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution18 = distributionFactory0.createExponentialDistribution(0.9259800500986035d);
org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution22 = distributionFactory0.createHypergeometricDistribution(2147330716, (int)(short)100, (int)' ');
double double24 = hypergeometricDistribution22.cumulativeProbability(2.1615898864763004E-16d);


Progress update: steps=20000, test inputs generated=15921, failing inputs=0      (2022-02-22T19:09:03.547Z     99,8M used)
Progress update: steps=21000, test inputs generated=16711, failing inputs=0      (2022-02-22T19:09:06.799Z     1.26G used)Long execution time 42 sec for
org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double)(byte)10);
org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory0.createWeibullDistribution((double)100, (double)'4');
org.apache.commons.math.distribution.WeibullDistribution weibullDistribution8 = distributionFactory0.createWeibullDistribution(6.907755278982138d, (double)10L);
org.apache.commons.math.distribution.PoissonDistribution poissonDistribution10 = distributionFactory0.createPoissonDistribution((double)'#');
double double12 = poissonDistribution10.normalApproximateProbability((int)'#');
int int14 = poissonDistribution10.inverseCumulativeProbability((double)0);
poissonDistribution10.setMean((double)1.0f);
double double17 = poissonDistribution10.getMean();
double double18 = poissonDistribution10.getMean();
double double19 = poissonDistribution10.getMean();
double double21 = poissonDistribution10.probability(2147330716);
double double23 = poissonDistribution10.normalApproximateProbability(2147330716);


Progress update: steps=21706, test inputs generated=17256, failing inputs=0      (2022-02-22T19:10:01.126Z     297M used)Long execution time 42 sec for
org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double)(byte)10);
org.apache.commons.math.distribution.WeibullDistribution weibullDistribution5 = distributionFactory0.createWeibullDistribution((double)100, (double)'4');
org.apache.commons.math.distribution.WeibullDistribution weibullDistribution8 = distributionFactory0.createWeibullDistribution(6.907755278982138d, (double)10L);
org.apache.commons.math.distribution.PoissonDistribution poissonDistribution10 = distributionFactory0.createPoissonDistribution((double)'#');
double double12 = poissonDistribution10.probability(2147483646);


Progress update: steps=22000, test inputs generated=17505, failing inputs=0      (2022-02-22T19:10:37.612Z     756M used)
Progress update: steps=22633, test inputs generated=17996, failing inputs=0      (2022-02-22T19:11:36.786Z     324M used)Long execution time 181 sec for
org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double)(byte)10);
org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution5 = distributionFactory0.createCauchyDistribution((double)'#', 28.0d);
org.apache.commons.math.distribution.PoissonDistribution poissonDistribution7 = distributionFactory0.createPoissonDistribution((double)1);
org.apache.commons.math.distribution.NormalDistribution normalDistribution10 = distributionFactory0.createNormalDistribution(0.21869797718126205d, 7.192347957422382E-28d);
org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution12 = distributionFactory0.createExponentialDistribution((double)32);
org.apache.commons.math.distribution.NormalDistribution normalDistribution15 = distributionFactory0.createNormalDistribution((double)0, 0.8473058554389479d);
org.apache.commons.math.distribution.NormalDistribution normalDistribution16 = distributionFactory0.createNormalDistribution();
org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution18 = distributionFactory0.createExponentialDistribution(0.9259800500986035d);
org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution22 = distributionFactory0.createHypergeometricDistribution(2147330716, (int)(short)100, (int)' ');
double double24 = hypergeometricDistribution22.cumulativeProbability(2.1615898864763004E-16d);
double double26 = hypergeometricDistribution22.probability(0.3544814337732014d);


Progress update: steps=22633, test inputs generated=17997, failing inputs=0      (2022-02-22T19:13:40.512Z     324M used)
Normal method executions: 10003270
Exceptional method executions: 4641

Average method execution time (normal termination):      0.0534
Average method execution time (exceptional termination): 5.12
Approximate memory usage 324M
Explorer = ForwardGenerator(steps: 22633, null steps: 4636, num_sequences_generated: 17997;
    allSequences: 17997, regresson seqs: 3388, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 14609;
    runtimePrimitivesSeen:622)

No error-revealing tests to output.

About to look for failing assertions in 2521 regression sequences.

Regression test output:
Regression test count: 2521
Writing regression JUnit tests...
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-7/RegressionTest0.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-7/RegressionTest1.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-7/RegressionTest2.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-7/RegressionTest3.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-7/RegressionTest4.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-7/RegressionTest5.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-7/RegressionTest6.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-7/RegressionTest7.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-7/RegressionTest8.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-7/RegressionTest9.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-7/RegressionTest10.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-7/RegressionTest11.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-7/RegressionTest12.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-7/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  org.apache.commons.math.distribution.PascalDistribution.setNumberOfSuccesses(int)
  Possibly flaky:  org.apache.commons.math.distribution.PascalDistribution.getProbabilityOfSuccess()
  Possibly flaky:  org.apache.commons.math.distribution.PascalDistribution.getNumberOfSuccesses()
  Possibly flaky:  org.apache.commons.math.distribution.IntegerDistribution.cumulativeProbability(int)
  Possibly flaky:  org.apache.commons.math.distribution.DiscreteDistribution.probability(double)
  Possibly flaky:  java.util.regex.Pattern.quote(java.lang.String)
  Possibly flaky:  java.util.Locale.toLanguageTag()
  Possibly flaky:  java.util.Locale.getVariant()
  Possibly flaky:  java.util.Locale.getUnicodeLocaleType(java.lang.String)
  Possibly flaky:  java.util.Locale.getScript()
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

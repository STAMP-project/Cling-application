Randoop for Java version "4.3.0, local changes, branch master, commit 7af20ae, 2022-01-31".

Will try to generate tests for 8 classes.
PUBLIC MEMBERS=222
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2022-02-22T18:45:41.270Z     215M used)
Progress update: steps=1000, test inputs generated=935, failing inputs=36      (2022-02-22T18:46:01.010Z     1.33G used)
Progress update: steps=2000, test inputs generated=1837, failing inputs=75      (2022-02-22T18:46:19.865Z     720M used)
Progress update: steps=2840, test inputs generated=2574, failing inputs=97      (2022-02-22T18:46:41.283Z     934M used)
Progress update: steps=3000, test inputs generated=2715, failing inputs=98      (2022-02-22T18:46:44.191Z     1.06G used)
Progress update: steps=4000, test inputs generated=3557, failing inputs=125      (2022-02-22T18:47:04.268Z     1.21G used)Long execution time 63 sec for
org.apache.commons.math.linear.BigMatrix bigMatrix1 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int)(short)25884);


Progress update: steps=4396, test inputs generated=3888, failing inputs=144      (2022-02-22T18:48:14.683Z     3.37G used)Long execution time 15 sec for
char[] charArray2 = new char[] { '4', '4' };
java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(charArray2);
java.math.BigDecimal bigDecimal5 = bigDecimal3.scaleByPowerOfTen((int)'a');
java.math.BigDecimal bigDecimal6 = bigDecimal3.ulp();
java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal12 = bigDecimal10.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray13 = new java.math.BigDecimal[] { bigDecimal8, bigDecimal12 };
org.apache.commons.math.linear.BigMatrix bigMatrix14 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray13);
java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal20 = bigDecimal18.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray21 = new java.math.BigDecimal[] { bigDecimal16, bigDecimal20 };
org.apache.commons.math.linear.BigMatrix bigMatrix22 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray21);
java.math.BigDecimal[] bigDecimalArray23 = bigMatrix14.preMultiply(bigDecimalArray21);
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray23);
java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal((long)(-1));
short short27 = bigDecimal26.shortValueExact();
java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal31 = bigDecimal29.movePointLeft((int)(short)1);
boolean boolean32 = bigDecimal26.equals((java.lang.Object)bigDecimal29);
org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl24.scalarAdd(bigDecimal26);
java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal39 = bigDecimal37.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray40 = new java.math.BigDecimal[] { bigDecimal35, bigDecimal39 };
org.apache.commons.math.linear.BigMatrix bigMatrix41 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray40);
java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal47 = bigDecimal45.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray48 = new java.math.BigDecimal[] { bigDecimal43, bigDecimal47 };
org.apache.commons.math.linear.BigMatrix bigMatrix49 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray48);
java.math.BigDecimal[] bigDecimalArray50 = bigMatrix41.preMultiply(bigDecimalArray48);
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray50);
java.math.BigDecimal[] bigDecimalArray52 = bigMatrix33.preMultiply(bigDecimalArray50);
org.apache.commons.math.linear.BigMatrix bigMatrix53 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray50);
java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal57 = bigDecimal55.movePointLeft((int)(short)1);
double double58 = bigDecimal57.doubleValue();
java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal((long)(-1));
java.math.BigDecimal bigDecimal61 = bigDecimal57.min(bigDecimal60);
java.math.BigDecimal bigDecimal62 = bigDecimal61.plus();
org.apache.commons.math.linear.BigMatrix bigMatrix63 = bigMatrix53.scalarMultiply(bigDecimal61);
java.math.BigDecimal bigDecimal65 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal67 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal69 = bigDecimal67.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray70 = new java.math.BigDecimal[] { bigDecimal65, bigDecimal69 };
org.apache.commons.math.linear.BigMatrix bigMatrix71 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray70);
java.math.BigDecimal bigDecimal73 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal75 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal77 = bigDecimal75.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray78 = new java.math.BigDecimal[] { bigDecimal73, bigDecimal77 };
org.apache.commons.math.linear.BigMatrix bigMatrix79 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray78);
java.math.BigDecimal[] bigDecimalArray80 = bigMatrix71.preMultiply(bigDecimalArray78);
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl81 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray80);
java.math.BigDecimal bigDecimal82 = bigMatrixImpl81.getDeterminant();
org.apache.commons.math.linear.BigMatrix bigMatrix83 = bigMatrixImpl81.inverse();
int int84 = bigMatrixImpl81.getRoundingMode();
org.apache.commons.math.linear.BigMatrix bigMatrix85 = bigMatrix53.subtract((org.apache.commons.math.linear.BigMatrix)bigMatrixImpl81);
java.math.BigDecimal bigDecimal87 = new java.math.BigDecimal((long)(-1));
java.math.BigDecimal bigDecimal88 = bigDecimal87.plus();
org.apache.commons.math.linear.BigMatrix bigMatrix89 = bigMatrix53.scalarAdd(bigDecimal87);
java.math.BigDecimal bigDecimal90 = bigDecimal3.divide(bigDecimal87);
java.math.BigDecimal bigDecimal91 = bigDecimal87.ulp();
java.math.BigDecimal bigDecimal93 = bigDecimal91.movePointRight((int)(byte)3);
long long94 = bigDecimal93.longValueExact();
java.lang.String str95 = bigDecimal93.toString();


Progress update: steps=5000, test inputs generated=4400, failing inputs=164      (2022-02-22T18:49:00.059Z     3.49G used)
Progress update: steps=5324, test inputs generated=4677, failing inputs=172      (2022-02-22T18:49:14.714Z     3.52G used)
Progress update: steps=6000, test inputs generated=5246, failing inputs=199      (2022-02-22T18:49:48.073Z     3.21G used)Long execution time 123 sec for
org.apache.commons.math.linear.BigMatrix bigMatrix1 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int)(short)25884);
java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal7 = bigDecimal5.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray8 = new java.math.BigDecimal[] { bigDecimal3, bigDecimal7 };
org.apache.commons.math.linear.BigMatrix bigMatrix9 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray8);
java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal15 = bigDecimal13.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray16 = new java.math.BigDecimal[] { bigDecimal11, bigDecimal15 };
org.apache.commons.math.linear.BigMatrix bigMatrix17 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray16);
java.math.BigDecimal[] bigDecimalArray18 = bigMatrix9.preMultiply(bigDecimalArray16);
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray18);
java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal((long)(-1));
short short22 = bigDecimal21.shortValueExact();
java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal26 = bigDecimal24.movePointLeft((int)(short)1);
boolean boolean27 = bigDecimal21.equals((java.lang.Object)bigDecimal24);
org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl19.scalarAdd(bigDecimal21);
java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal34 = bigDecimal32.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray35 = new java.math.BigDecimal[] { bigDecimal30, bigDecimal34 };
org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray35);
java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal42 = bigDecimal40.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray43 = new java.math.BigDecimal[] { bigDecimal38, bigDecimal42 };
org.apache.commons.math.linear.BigMatrix bigMatrix44 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray43);
java.math.BigDecimal[] bigDecimalArray45 = bigMatrix36.preMultiply(bigDecimalArray43);
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray45);
java.math.BigDecimal[] bigDecimalArray47 = bigMatrix28.preMultiply(bigDecimalArray45);
org.apache.commons.math.linear.BigMatrix bigMatrix48 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray47);
org.apache.commons.math.linear.BigMatrix bigMatrix49 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray47);
java.math.BigDecimal[] bigDecimalArray50 = bigMatrix1.solve(bigDecimalArray47);


Progress update: steps=6061, test inputs generated=5301, failing inputs=200      (2022-02-22T18:51:41.333Z     3.03G used)Long execution time 148 sec for
org.apache.commons.math.linear.BigMatrix bigMatrix1 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix(10100);


Progress update: steps=6325, test inputs generated=5526, failing inputs=203      (2022-02-22T18:54:29.081Z     3.05G used)Long execution time 13 sec for
java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal5 = bigDecimal3.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray6 = new java.math.BigDecimal[] { bigDecimal1, bigDecimal5 };
org.apache.commons.math.linear.BigMatrix bigMatrix7 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray6);
java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal13 = bigDecimal11.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray14 = new java.math.BigDecimal[] { bigDecimal9, bigDecimal13 };
org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray14);
java.math.BigDecimal[] bigDecimalArray16 = bigMatrix7.preMultiply(bigDecimalArray14);
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray16);
java.math.BigDecimal bigDecimal18 = bigMatrixImpl17.getDeterminant();
org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl17.inverse();
int int20 = bigMatrixImpl17.getRoundingMode();
java.math.BigDecimal bigDecimal21 = bigMatrixImpl17.getNorm();
java.math.BigDecimal bigDecimal23 = bigDecimal21.movePointRight((int)(short)1);
java.math.BigDecimal bigDecimal25 = bigDecimal21.pow(1);
java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal((long)(-1));
java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal31 = bigDecimal29.movePointLeft((int)(short)1);
double double32 = bigDecimal31.doubleValue();
java.math.BigDecimal bigDecimal34 = bigDecimal31.pow((int)(byte)0);
java.math.BigDecimal bigDecimal35 = bigDecimal27.add(bigDecimal34);
java.math.BigDecimal bigDecimal36 = bigDecimal34.abs();
java.math.BigDecimal bigDecimal37 = bigDecimal34.plus();
java.math.BigDecimal[] bigDecimalArray38 = bigDecimal21.divideAndRemainder(bigDecimal37);
java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal44 = bigDecimal42.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray45 = new java.math.BigDecimal[] { bigDecimal40, bigDecimal44 };
org.apache.commons.math.linear.BigMatrix bigMatrix46 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray45);
java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal52 = bigDecimal50.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray53 = new java.math.BigDecimal[] { bigDecimal48, bigDecimal52 };
org.apache.commons.math.linear.BigMatrix bigMatrix54 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray53);
java.math.BigDecimal[] bigDecimalArray55 = bigMatrix46.preMultiply(bigDecimalArray53);
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl56 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray55);
java.math.BigDecimal bigDecimal57 = bigMatrixImpl56.getDeterminant();
org.apache.commons.math.linear.BigMatrix bigMatrix58 = bigMatrixImpl56.transpose();
int int59 = bigMatrixImpl56.getRowDimension();
org.apache.commons.math.linear.BigMatrix bigMatrix60 = bigMatrixImpl56.transpose();
java.lang.String str61 = bigMatrixImpl56.toString();
java.math.BigDecimal bigDecimal62 = bigMatrixImpl56.getTrace();
java.math.BigDecimal bigDecimal63 = bigDecimal62.negate();
java.math.BigDecimal bigDecimal65 = java.math.BigDecimal.valueOf((double)100);
java.math.BigDecimal bigDecimal66 = bigDecimal65.negate();
java.math.BigInteger bigInteger67 = bigDecimal65.toBigInteger();
java.math.BigDecimal bigDecimal69 = bigDecimal65.setScale((int)(short)0);
java.lang.String str70 = bigDecimal65.toString();
java.lang.String str71 = bigDecimal65.toPlainString();
java.math.BigDecimal bigDecimal72 = bigDecimal63.divide(bigDecimal65);
java.math.BigDecimal bigDecimal73 = bigDecimal37.multiply(bigDecimal65);


Progress update: steps=6822, test inputs generated=5951, failing inputs=217      (2022-02-22T18:55:39.791Z     3.19G used)Long execution time 13 sec for
java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal5 = bigDecimal3.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray6 = new java.math.BigDecimal[] { bigDecimal1, bigDecimal5 };
org.apache.commons.math.linear.BigMatrix bigMatrix7 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray6);
java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal13 = bigDecimal11.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray14 = new java.math.BigDecimal[] { bigDecimal9, bigDecimal13 };
org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray14);
java.math.BigDecimal[] bigDecimalArray16 = bigMatrix7.preMultiply(bigDecimalArray14);
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray16);
java.math.BigDecimal bigDecimal18 = bigMatrixImpl17.getDeterminant();
org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl17.inverse();
int int20 = bigMatrixImpl17.getRoundingMode();
boolean boolean21 = bigMatrixImpl17.isSquare();
boolean boolean22 = bigMatrixImpl17.isSquare();
bigMatrixImpl17.setRoundingMode((int)(short)0);
java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal30 = bigDecimal28.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray31 = new java.math.BigDecimal[] { bigDecimal26, bigDecimal30 };
org.apache.commons.math.linear.BigMatrix bigMatrix32 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray31);
java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal38 = bigDecimal36.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray39 = new java.math.BigDecimal[] { bigDecimal34, bigDecimal38 };
org.apache.commons.math.linear.BigMatrix bigMatrix40 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray39);
java.math.BigDecimal[] bigDecimalArray41 = bigMatrix32.preMultiply(bigDecimalArray39);
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray41);
java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal48 = bigDecimal46.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray49 = new java.math.BigDecimal[] { bigDecimal44, bigDecimal48 };
org.apache.commons.math.linear.BigMatrix bigMatrix50 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray49);
java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal56 = bigDecimal54.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray57 = new java.math.BigDecimal[] { bigDecimal52, bigDecimal56 };
org.apache.commons.math.linear.BigMatrix bigMatrix58 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray57);
java.math.BigDecimal[] bigDecimalArray59 = bigMatrix50.preMultiply(bigDecimalArray57);
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray59);
java.math.BigDecimal bigDecimal61 = bigMatrixImpl60.getDeterminant();
org.apache.commons.math.linear.BigMatrix bigMatrix62 = bigMatrixImpl60.inverse();
java.math.BigDecimal bigDecimal63 = bigMatrixImpl60.getNorm();
int int64 = bigMatrixImpl60.getScale();
double[][] doubleArray65 = bigMatrixImpl60.getDataAsDoubleArray();
org.apache.commons.math.linear.BigMatrix bigMatrix66 = bigMatrixImpl42.multiply((org.apache.commons.math.linear.BigMatrix)bigMatrixImpl60);
java.math.BigDecimal bigDecimal68 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal70 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal72 = bigDecimal70.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray73 = new java.math.BigDecimal[] { bigDecimal68, bigDecimal72 };
org.apache.commons.math.linear.BigMatrix bigMatrix74 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray73);
java.math.BigDecimal bigDecimal76 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal78 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal80 = bigDecimal78.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray81 = new java.math.BigDecimal[] { bigDecimal76, bigDecimal80 };
org.apache.commons.math.linear.BigMatrix bigMatrix82 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray81);
java.math.BigDecimal[] bigDecimalArray83 = bigMatrix74.preMultiply(bigDecimalArray81);
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl84 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray83);
java.math.BigDecimal bigDecimal85 = bigMatrixImpl84.getDeterminant();
org.apache.commons.math.linear.BigMatrix bigMatrix86 = bigMatrixImpl84.inverse();
int int87 = bigMatrixImpl84.getRoundingMode();
int int88 = bigMatrixImpl84.getScale();
org.apache.commons.math.linear.BigMatrix bigMatrix89 = bigMatrixImpl84.transpose();
org.apache.commons.math.linear.BigMatrix bigMatrix90 = bigMatrixImpl42.add(bigMatrix89);
org.apache.commons.math.linear.BigMatrix bigMatrix91 = bigMatrixImpl42.transpose();
org.apache.commons.math.linear.BigMatrix bigMatrix92 = bigMatrixImpl17.subtract(bigMatrix91);


Progress update: steps=6857, test inputs generated=5982, failing inputs=220      (2022-02-22T18:55:41.269Z     3.58G used)
Normal method executions: 20278924
Exceptional method executions: 2193

Average method execution time (normal termination):      0.0107
Average method execution time (exceptional termination): 56.3
Approximate memory usage 3.58G
Explorer = ForwardGenerator(steps: 6857, null steps: 875, num_sequences_generated: 5982;
    allSequences: 5982, regresson seqs: 4727, error seqs: 220=220=220, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 1035;
    runtimePrimitivesSeen:149)

Error-revealing test output:
Error-revealing test count: 220
Writing error-revealing JUnit tests...
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-9/ErrorTest0.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-9/ErrorTest1.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-9/ErrorTest.java
Wrote error-revealing JUnit tests.

About to look for failing assertions in 3000 regression sequences.

Regression test output:
Regression test count: 3000
Writing regression JUnit tests...
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-9/RegressionTest0.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-9/RegressionTest1.java
                                                                                                                                                                                                       Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-9/RegressionTest2.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-9/RegressionTest3.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-9/RegressionTest4.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-9/RegressionTest5.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-9/RegressionTest6.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-9/RegressionTest7.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-9/RegressionTest8.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-9/RegressionTest9.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-9/RegressionTest10.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-9/RegressionTest11.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-9/RegressionTest12.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-9/RegressionTest13.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-9/RegressionTest14.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-9/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Invalid tests generated: 0

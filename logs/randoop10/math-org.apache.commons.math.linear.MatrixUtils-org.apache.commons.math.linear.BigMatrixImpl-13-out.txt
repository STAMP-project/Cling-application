Randoop for Java version "4.3.0, local changes, branch master, commit 7af20ae, 2022-01-31".

Will try to generate tests for 8 classes.
PUBLIC MEMBERS=222
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2022-02-22T18:45:41.912Z     215M used)
Progress update: steps=1000, test inputs generated=935, failing inputs=36      (2022-02-22T18:46:00.814Z     1.17G used)
Progress update: steps=2000, test inputs generated=1837, failing inputs=75      (2022-02-22T18:46:18.331Z     583M used)
Progress update: steps=2968, test inputs generated=2687, failing inputs=98      (2022-02-22T18:46:41.927Z     639M used)
Progress update: steps=3000, test inputs generated=2715, failing inputs=98      (2022-02-22T18:46:42.511Z     935M used)
Progress update: steps=4000, test inputs generated=3557, failing inputs=125      (2022-02-22T18:47:01.611Z     1.08G used)Long execution time 39 sec for
org.apache.commons.math.linear.BigMatrix bigMatrix1 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int)(short)25884);


Progress update: steps=4396, test inputs generated=3888, failing inputs=144      (2022-02-22T18:47:46.823Z     3.05G used)
Progress update: steps=4989, test inputs generated=4391, failing inputs=164      (2022-02-22T18:48:46.899Z     3.16G used)
Progress update: steps=5000, test inputs generated=4400, failing inputs=164      (2022-02-22T18:48:48.768Z     2.95G used)
Progress update: steps=5225, test inputs generated=4593, failing inputs=170      (2022-02-22T18:52:21.571Z     2.76G used)Long execution time 198 sec for
java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal5 = bigDecimal3.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray6 = new java.math.BigDecimal[] { bigDecimal1, bigDecimal5 };
org.apache.commons.math.linear.BigMatrix bigMatrix7 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray6);
java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal13 = bigDecimal11.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray14 = new java.math.BigDecimal[] { bigDecimal9, bigDecimal13 };
org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray14);
java.math.BigDecimal[] bigDecimalArray16 = bigMatrix7.preMultiply(bigDecimalArray14);
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray16);
java.math.BigDecimal bigDecimal18 = bigMatrixImpl17.getDeterminant();
java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal24 = bigDecimal22.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal20, bigDecimal24 };
org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray25);
java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal32 = bigDecimal30.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray33 = new java.math.BigDecimal[] { bigDecimal28, bigDecimal32 };
org.apache.commons.math.linear.BigMatrix bigMatrix34 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray33);
java.math.BigDecimal[] bigDecimalArray35 = bigMatrix26.preMultiply(bigDecimalArray33);
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray35);
java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal((long)(-1));
short short39 = bigDecimal38.shortValueExact();
java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal43 = bigDecimal41.movePointLeft((int)(short)1);
boolean boolean44 = bigDecimal38.equals((java.lang.Object)bigDecimal41);
org.apache.commons.math.linear.BigMatrix bigMatrix45 = bigMatrixImpl36.scalarAdd(bigDecimal38);
java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal((long)(-1));
java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal51 = bigDecimal49.movePointLeft((int)(short)1);
double double52 = bigDecimal51.doubleValue();
java.math.BigDecimal bigDecimal54 = bigDecimal51.pow((int)(byte)0);
java.math.BigDecimal bigDecimal55 = bigDecimal47.add(bigDecimal54);
org.apache.commons.math.linear.BigMatrix bigMatrix56 = bigMatrixImpl36.scalarMultiply(bigDecimal55);
org.apache.commons.math.linear.BigMatrix bigMatrix57 = bigMatrixImpl17.scalarAdd(bigDecimal55);
bigMatrixImpl17.setScale(0);
java.math.BigDecimal bigDecimal61 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal63 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal65 = bigDecimal63.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray66 = new java.math.BigDecimal[] { bigDecimal61, bigDecimal65 };
org.apache.commons.math.linear.BigMatrix bigMatrix67 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray66);
java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal71 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal73 = bigDecimal71.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray74 = new java.math.BigDecimal[] { bigDecimal69, bigDecimal73 };
org.apache.commons.math.linear.BigMatrix bigMatrix75 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray74);
java.math.BigDecimal[] bigDecimalArray76 = bigMatrix67.preMultiply(bigDecimalArray74);
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl77 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray76);
java.math.BigDecimal bigDecimal78 = bigMatrixImpl77.getDeterminant();
org.apache.commons.math.linear.BigMatrix bigMatrix79 = bigMatrixImpl17.solve((org.apache.commons.math.linear.BigMatrix)bigMatrixImpl77);
java.math.BigDecimal bigDecimal80 = bigMatrix79.getDeterminant();
java.math.BigDecimal[][] bigDecimalArray81 = bigMatrix79.getData();


Progress update: steps=6000, test inputs generated=5246, failing inputs=199      (2022-02-22T18:53:07.240Z     3.23G used)
Progress update: steps=6061, test inputs generated=5301, failing inputs=200      (2022-02-22T18:55:27.581Z     3.26G used)Long execution time 150 sec for
org.apache.commons.math.linear.BigMatrix bigMatrix1 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int)(short)25884);
java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal7 = bigDecimal5.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray8 = new java.math.BigDecimal[] { bigDecimal3, bigDecimal7 };
org.apache.commons.math.linear.BigMatrix bigMatrix9 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray8);
java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal15 = bigDecimal13.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray16 = new java.math.BigDecimal[] { bigDecimal11, bigDecimal15 };
org.apache.commons.math.linear.BigMatrix bigMatrix17 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray16);
java.math.BigDecimal[] bigDecimalArray18 = bigMatrix9.preMultiply(bigDecimalArray16);
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray18);
java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal((long)(-1));
short short22 = bigDecimal21.shortValueExact();
java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal26 = bigDecimal24.movePointLeft((int)(short)1);
boolean boolean27 = bigDecimal21.equals((java.lang.Object)bigDecimal24);
org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl19.scalarAdd(bigDecimal21);
java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal34 = bigDecimal32.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray35 = new java.math.BigDecimal[] { bigDecimal30, bigDecimal34 };
org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray35);
java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal((long)(short)100);
java.math.BigDecimal bigDecimal42 = bigDecimal40.movePointLeft((int)(short)1);
java.math.BigDecimal[] bigDecimalArray43 = new java.math.BigDecimal[] { bigDecimal38, bigDecimal42 };
org.apache.commons.math.linear.BigMatrix bigMatrix44 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray43);
java.math.BigDecimal[] bigDecimalArray45 = bigMatrix36.preMultiply(bigDecimalArray43);
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray45);
java.math.BigDecimal[] bigDecimalArray47 = bigMatrix28.preMultiply(bigDecimalArray45);
org.apache.commons.math.linear.BigMatrix bigMatrix48 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray47);
org.apache.commons.math.linear.BigMatrix bigMatrix49 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray47);
java.math.BigDecimal[] bigDecimalArray50 = bigMatrix1.solve(bigDecimalArray47);


Progress update: steps=6106, test inputs generated=5342, failing inputs=200      (2022-02-22T18:55:44.060Z     2.78G used)
Normal method executions: 17364698
Exceptional method executions: 1973

Average method execution time (normal termination):      0.00251
Average method execution time (exceptional termination): 75.6
Approximate memory usage 2.78G
Explorer = ForwardGenerator(steps: 6106, null steps: 764, num_sequences_generated: 5342;
    allSequences: 5342, regresson seqs: 4200, error seqs: 200=200=200, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 942;
    runtimePrimitivesSeen:139)

Error-revealing test output:
Error-revealing test count: 200
Writing error-revealing JUnit tests...
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-13/ErrorTest0.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-13/ErrorTest.java
Wrote error-revealing JUnit tests.

About to look for failing assertions in 2683 regression sequences.

Regression test output:
Regression test count: 2683
Writing regression JUnit tests...
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-13/RegressionTest0.java
                                                                                                                                                                                                       Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-13/RegressionTest1.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-13/RegressionTest2.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-13/RegressionTest3.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-13/RegressionTest4.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-13/RegressionTest5.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-13/RegressionTest6.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-13/RegressionTest7.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-13/RegressionTest8.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-13/RegressionTest9.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-13/RegressionTest10.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-13/RegressionTest11.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-13/RegressionTest12.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-13/RegressionTest13.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-13/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Invalid tests generated: 0

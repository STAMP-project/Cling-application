Randoop for Java version "4.3.0, local changes, branch master, commit 7af20ae, 2022-01-31".

Will try to generate tests for 8 classes.
PUBLIC MEMBERS=222
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2022-02-22T18:45:42.184Z     215M used)
Progress update: steps=1000, test inputs generated=940, failing inputs=79      (2022-02-22T18:45:59.900Z     1.20G used)Long execution time 33 sec for
org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int)(short)16960);


Progress update: steps=1548, test inputs generated=1436, failing inputs=93      (2022-02-22T18:46:42.199Z     3.02G used)
Progress update: steps=2000, test inputs generated=1844, failing inputs=107      (2022-02-22T18:46:54.320Z     2.57G used)
Progress update: steps=3000, test inputs generated=2744, failing inputs=132      (2022-02-22T18:47:23.476Z     2.89G used)
Progress update: steps=3362, test inputs generated=3061, failing inputs=138      (2022-02-22T18:47:42.387Z     2.63G used)
Progress update: steps=4000, test inputs generated=3613, failing inputs=150      (2022-02-22T18:48:32.722Z     3.25G used)
Progress update: steps=4183, test inputs generated=3770, failing inputs=155      (2022-02-22T18:48:42.395Z     2.89G used)
Progress update: steps=4973, test inputs generated=4457, failing inputs=179      (2022-02-22T18:49:42.395Z     2.98G used)
Progress update: steps=5000, test inputs generated=4480, failing inputs=179      (2022-02-22T18:49:43.641Z     3.18G used)Long execution time 28 sec for
java.math.BigDecimal bigDecimal0 = java.math.BigDecimal.ONE;
java.math.BigDecimal bigDecimal1 = bigDecimal0.plus();
java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.ONE;
java.math.BigDecimal bigDecimal3 = bigDecimal2.plus();
java.math.BigDecimal bigDecimal4 = bigDecimal1.remainder(bigDecimal3);
double double5 = bigDecimal1.doubleValue();
java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.ONE;
double double7 = bigDecimal6.doubleValue();
java.lang.String str8 = bigDecimal6.toEngineeringString();
java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.ONE;
java.math.BigDecimal bigDecimal10 = bigDecimal6.add(bigDecimal9);
java.math.BigDecimal bigDecimal12 = bigDecimal9.movePointLeft(3);
java.math.BigDecimal bigDecimal13 = bigDecimal1.max(bigDecimal9);
java.math.BigDecimal bigDecimal15 = bigDecimal1.movePointRight((int)(byte)1);
java.math.BigDecimal bigDecimal17 = bigDecimal15.movePointLeft((int)' ');
double[] doubleArray22 = new double[] { 1L, 0L, (byte)0, 10.0f };
double[] doubleArray27 = new double[] { 1L, 0L, (byte)0, 10.0f };
double[] doubleArray32 = new double[] { 1L, 0L, (byte)0, 10.0f };
double[] doubleArray37 = new double[] { 1L, 0L, (byte)0, 10.0f };
double[][] doubleArray38 = new double[][] { doubleArray22, doubleArray27, doubleArray32, doubleArray37 };
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray38);
double[] doubleArray44 = new double[] { 1L, 0L, (byte)0, 10.0f };
double[] doubleArray49 = new double[] { 1L, 0L, (byte)0, 10.0f };
double[] doubleArray54 = new double[] { 1L, 0L, (byte)0, 10.0f };
double[] doubleArray59 = new double[] { 1L, 0L, (byte)0, 10.0f };
double[][] doubleArray60 = new double[][] { doubleArray44, doubleArray49, doubleArray54, doubleArray59 };
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl61 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray60);
int int62 = bigMatrixImpl61.getColumnDimension();
org.apache.commons.math.linear.BigMatrix bigMatrix63 = bigMatrixImpl39.preMultiply((org.apache.commons.math.linear.BigMatrix)bigMatrixImpl61);
int int64 = bigMatrixImpl61.getScale();
org.apache.commons.math.linear.BigMatrix bigMatrix65 = bigMatrixImpl61.transpose();
java.math.BigDecimal[][] bigDecimalArray66 = bigMatrixImpl61.getDataRef();
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray66);
int int68 = bigMatrixImpl67.getRoundingMode();
java.math.BigDecimal bigDecimal69 = bigMatrixImpl67.getTrace();
java.math.BigDecimal bigDecimal72 = bigDecimal15.divide(bigDecimal69, (int)(byte)100, (int)(byte)0);
java.math.BigDecimal bigDecimal74 = java.math.BigDecimal.valueOf((long)(short)1);
java.math.BigDecimal bigDecimal75 = bigDecimal74.plus();
java.math.BigDecimal bigDecimal76 = bigDecimal69.divideToIntegralValue(bigDecimal75);


Progress update: steps=5247, test inputs generated=4702, failing inputs=185      (2022-02-22T18:50:45.226Z     2.89G used)
Progress update: steps=5647, test inputs generated=5048, failing inputs=193      (2022-02-22T18:51:45.235Z     3.37G used)
Progress update: steps=6000, test inputs generated=5352, failing inputs=198      (2022-02-22T18:52:17.170Z     3.11G used)
Progress update: steps=6359, test inputs generated=5659, failing inputs=202      (2022-02-22T18:52:45.281Z     3.22G used)
Progress update: steps=6965, test inputs generated=6176, failing inputs=216      (2022-02-22T18:53:45.282Z     3.30G used)
Progress update: steps=7000, test inputs generated=6205, failing inputs=216      (2022-02-22T18:53:49.129Z     3.30G used)
Progress update: steps=7474, test inputs generated=6611, failing inputs=224      (2022-02-22T18:54:45.529Z     3.26G used)
Progress update: steps=7866, test inputs generated=6933, failing inputs=232      (2022-02-22T18:55:42.203Z     3.34G used)
Normal method executions: 6272887
Exceptional method executions: 2607

Average method execution time (normal termination):      0.0297
Average method execution time (exceptional termination): 3.85
Approximate memory usage 3.34G
Explorer = ForwardGenerator(steps: 7866, null steps: 933, num_sequences_generated: 6933;
    allSequences: 6933, regresson seqs: 5442, error seqs: 232=232=232, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 1259;
    runtimePrimitivesSeen:169)

Error-revealing test output:
Error-revealing test count: 232
Writing error-revealing JUnit tests...
                                                                                                                                                                                                       Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-15/ErrorTest0.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-15/ErrorTest1.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-15/ErrorTest.java
Wrote error-revealing JUnit tests.

About to look for failing assertions in 3443 regression sequences.

Regression test output:
Regression test count: 3443
Writing regression JUnit tests...
Created file /experiment/results/randoop10/math-org.apache.commons.math.linear.MatrixUtils-org.apache.commons.math.linear.BigMatrixImpl-15/RegressionTest0.java
GenTests.writeTestFiles threw an exception
java.lang.OutOfMemoryError: GC overhead limit exceeded

Throwable thrown while handling command: java.lang.OutOfMemoryError: GC overhead limit exceeded
java.lang.OutOfMemoryError: GC overhead limit exceeded

Randoop failed.
Last sequence under execution: 
org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int)'a');
double double2 = realMatrix1.getNorm();
org.apache.commons.math.linear.RealMatrix realMatrix4 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int)'a');
org.apache.commons.math.linear.RealMatrix realMatrix5 = realMatrix1.multiply(realMatrix4);
int int6 = realMatrix5.getRowDimension();
org.apache.commons.math.linear.RealMatrix realMatrix7 = realMatrix5.inverse();
double double8 = realMatrix5.getNorm();
org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrix5.scalarMultiply((double)(short)1);
org.apache.commons.math.linear.RealMatrix realMatrix12 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int)'a');
double double13 = realMatrix12.getNorm();
org.apache.commons.math.linear.RealMatrix realMatrix15 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int)'a');
org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrix12.multiply(realMatrix15);
int int17 = realMatrix16.getRowDimension();
org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrix16.inverse();
double double19 = realMatrix16.getNorm();
org.apache.commons.math.linear.RealMatrix realMatrix21 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int)'a');
double double22 = realMatrix21.getNorm();
org.apache.commons.math.linear.RealMatrix realMatrix24 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int)'a');
org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrix21.multiply(realMatrix24);
int int26 = realMatrix25.getRowDimension();
org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrix16.solve(realMatrix25);
int int28 = realMatrix27.getRowDimension();
org.apache.commons.math.linear.RealMatrix realMatrix30 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int)'a');
org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrix30.transpose();
org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrix27.multiply(realMatrix30);
double[] doubleArray34 = realMatrix32.getRow(0);
org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrix32.scalarAdd(0.0d);
boolean boolean37 = realMatrix36.isSquare();
boolean boolean38 = realMatrix36.isSquare();
org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrix10.solve(realMatrix36);
double[] doubleArray44 = new double[] { 1L, 0L, (byte)0, 10.0f };
double[] doubleArray49 = new double[] { 1L, 0L, (byte)0, 10.0f };
double[] doubleArray54 = new double[] { 1L, 0L, (byte)0, 10.0f };
double[] doubleArray59 = new double[] { 1L, 0L, (byte)0, 10.0f };
double[][] doubleArray60 = new double[][] { doubleArray44, doubleArray49, doubleArray54, doubleArray59 };
org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl61 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray60);
java.lang.String str62 = bigMatrixImpl61.toString();
int int63 = bigMatrixImpl61.getColumnDimension();
int int64 = bigMatrixImpl61.getColumnDimension();
java.lang.String str65 = bigMatrixImpl61.toString();
java.math.BigDecimal bigDecimal66 = bigMatrixImpl61.getDeterminant();
java.math.BigDecimal[][] bigDecimalArray67 = bigMatrixImpl61.getData();
org.apache.commons.math.linear.RealMatrix realMatrix69 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int)'a');
double double70 = realMatrix69.getNorm();
org.apache.commons.math.linear.RealMatrix realMatrix72 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int)'a');
org.apache.commons.math.linear.RealMatrix realMatrix73 = realMatrix69.multiply(realMatrix72);
org.apache.commons.math.linear.RealMatrix realMatrix75 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int)'a');
double double76 = realMatrix75.getNorm();
org.apache.commons.math.linear.RealMatrix realMatrix78 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int)'a');
org.apache.commons.math.linear.RealMatrix realMatrix79 = realMatrix75.multiply(realMatrix78);
int int80 = realMatrix79.getRowDimension();
org.apache.commons.math.linear.RealMatrix realMatrix81 = realMatrix72.solve(realMatrix79);
boolean boolean82 = bigMatrixImpl61.equals((java.lang.Object)realMatrix81);
org.apache.commons.math.linear.RealMatrix realMatrix83 = realMatrix39.solve(realMatrix81);

Randoop for Java version "4.3.0, local changes, branch master, commit 7af20ae, 2022-01-31".
Cannot instantiate non-accessible class org.mockito.asm.MethodWriter specified via --testclass or --classlist; will use its static methods.

Will try to generate tests for 8 classes.
PUBLIC MEMBERS=92
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2022-02-22T15:55:26.476Z     226M used)
Progress update: steps=1000, test inputs generated=535, failing inputs=0      (2022-02-22T15:55:37.897Z     676M used)
Progress update: steps=2000, test inputs generated=1319, failing inputs=0      (2022-02-22T15:55:57.459Z     1.29G used)
Progress update: steps=3000, test inputs generated=2088, failing inputs=0      (2022-02-22T15:56:21.143Z     660M used)
Progress update: steps=3393, test inputs generated=2380, failing inputs=0      (2022-02-22T15:56:26.492Z     1.28G used)
Progress update: steps=4000, test inputs generated=2857, failing inputs=0      (2022-02-22T15:56:40.757Z     364M used)
Progress update: steps=5000, test inputs generated=3616, failing inputs=0      (2022-02-22T15:56:59.856Z     1.98G used)
Progress update: steps=6000, test inputs generated=4342, failing inputs=0      (2022-02-22T15:57:18.457Z     2.88G used)
Progress update: steps=6422, test inputs generated=4669, failing inputs=0      (2022-02-22T15:57:26.493Z     2.44G used)
Progress update: steps=7000, test inputs generated=5093, failing inputs=0      (2022-02-22T15:57:38.973Z     2.77G used)
Progress update: steps=8000, test inputs generated=5809, failing inputs=0      (2022-02-22T15:58:01.780Z     2.70G used)
Progress update: steps=9000, test inputs generated=6563, failing inputs=0      (2022-02-22T15:58:17.329Z     2.94G used)
Progress update: steps=9356, test inputs generated=6841, failing inputs=0      (2022-02-22T15:58:26.494Z     2.46G used)
Progress update: steps=10000, test inputs generated=7322, failing inputs=0      (2022-02-22T15:58:42.380Z     2.37G used)
Progress update: steps=11000, test inputs generated=8050, failing inputs=0      (2022-02-22T15:58:58.144Z     2.87G used)
Progress update: steps=12000, test inputs generated=8777, failing inputs=0      (2022-02-22T15:59:16.989Z     3.33G used)
Progress update: steps=12403, test inputs generated=9062, failing inputs=0      (2022-02-22T15:59:26.494Z     2.89G used)
Progress update: steps=13000, test inputs generated=9500, failing inputs=0      (2022-02-22T15:59:39.049Z     2.86G used)
Progress update: steps=14000, test inputs generated=10212, failing inputs=0      (2022-02-22T15:59:58.929Z     3.69G used)
Progress update: steps=15000, test inputs generated=10935, failing inputs=0      (2022-02-22T16:00:18.226Z     3.61G used)
Progress update: steps=15434, test inputs generated=11242, failing inputs=0      (2022-02-22T16:00:26.495Z     3.62G used)
Progress update: steps=16000, test inputs generated=11639, failing inputs=0      (2022-02-22T16:00:36.710Z     3.31G used)
Progress update: steps=17000, test inputs generated=12347, failing inputs=0      (2022-02-22T16:00:54.976Z     3.25G used)
Progress update: steps=18000, test inputs generated=13078, failing inputs=0      (2022-02-22T16:01:14.454Z     3.55G used)
Progress update: steps=18535, test inputs generated=13463, failing inputs=0      (2022-02-22T16:01:26.603Z     3.54G used)
Progress update: steps=19000, test inputs generated=13793, failing inputs=0      (2022-02-22T16:01:37.241Z     3.72G used)
Progress update: steps=20000, test inputs generated=14507, failing inputs=0      (2022-02-22T16:02:02.670Z     3.71G used)
Progress update: steps=20759, test inputs generated=15066, failing inputs=0      (2022-02-22T16:02:27.021Z     3.63G used)
Progress update: steps=21000, test inputs generated=15231, failing inputs=0      (2022-02-22T16:02:35.006Z     3.69G used)
Progress update: steps=21816, test inputs generated=15803, failing inputs=0      (2022-02-22T16:03:27.413Z     3.73G used)
Progress update: steps=22000, test inputs generated=15934, failing inputs=0      (2022-02-22T16:03:48.692Z     3.73G used)
Problem with sequence:
byte byte0 = (byte)100; // [NormalExecution 100 [class java.lang.Byte]]
org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int)(byte)100); // [NormalExecution org.mockito.asm.ClassWriter@3c2f5678 [class org.mockito.asm.ClassWriter]]
int int2 = 0; // [NormalExecution 0 [class java.lang.Integer]]
java.lang.String str3 = "L191518793"; // [NormalExecution L191518793 [class java.lang.String]]
java.lang.String str4 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str5 = "L1923853166"; // [NormalExecution L1923853166 [class java.lang.String]]
short short6 = (short)1; // [NormalExecution 1 [class java.lang.Short]]
org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int)(short)1); // [NormalExecution org.mockito.asm.ClassWriter@2fcb01f1 [class org.mockito.asm.ClassWriter]]
byte byte8 = (byte)0; // [NormalExecution 0 [class java.lang.Byte]]
int int9 = classWriter7.newConst((java.lang.Object)(byte)0); // [NormalExecution 1 [class java.lang.Integer]]
byte byte10 = (byte)-1; // [NormalExecution -1 [class java.lang.Byte]]
short short11 = (short)1; // [NormalExecution 1 [class java.lang.Short]]
java.lang.String str12 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str13 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
java.lang.String str14 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
java.lang.String str15 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
java.lang.String str16 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" }; // [NormalExecution [hi! [class java.lang.String], hi! [class java.lang.String]] [class [Ljava.lang.String;]]
classWriter7.visit((int)(byte)-1, (int)(short)1, "", "hi!", "hi!", strArray17); // [NormalExecution null]
int int19 = 100; // [NormalExecution 100 [class java.lang.Integer]]
byte byte20 = (byte)-1; // [NormalExecution -1 [class java.lang.Byte]]
java.lang.String str21 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str22 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str23 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
java.lang.String str24 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
java.lang.String str25 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" }; // [NormalExecution [hi! [class java.lang.String], hi! [class java.lang.String]] [class [Ljava.lang.String;]]
classWriter7.visit(100, (int)(byte)-1, "", "", "hi!", strArray26); // [NormalExecution null]
java.lang.String str28 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
java.lang.String str29 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
java.lang.String str30 = ""; // [NormalExecution  [class java.lang.String]]
int int31 = classWriter7.newField("hi!", "hi!", ""); // [NormalExecution 7 [class java.lang.Integer]]
byte[] byteArray32 = classWriter7.toByteArray(); // [NormalExecution [-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 3, 0, 0, 0, 0, 1, 0, 0, 7, 0, 2, 1, 0, 3, 104, 105, 33, 7, 0, 4, 12, 0, 4, 0, 2, 9, 0, 5, 0, 6, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 68, 101, 112, 114, 101, 99, 97, 116, 101, 100, -1, -1, 0, 3, 0, 5, 0, 2, 0, 5, 0, 5, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 0, 2, 0, 9, 0, 0, 0, 0] [class [B]]
org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32); // [NormalExecution org.mockito.asm.ClassReader@32f20a2f [class org.mockito.asm.ClassReader]]
int int34 = 3; // [NormalExecution 3 [class java.lang.Integer]]
int int35 = classReader33.readUnsignedShort(3); // [NormalExecution 48640 [class java.lang.Integer]]
char char36 = '4'; // [NormalExecution 4 [class java.lang.Character]]
org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader33, (int)'4'); // [NormalExecution org.mockito.asm.ClassWriter@58316b10 [class org.mockito.asm.ClassWriter]]
byte[] byteArray38 = classReader33.b; // [NormalExecution [-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 3, 0, 0, 0, 0, 1, 0, 0, 7, 0, 2, 1, 0, 3, 104, 105, 33, 7, 0, 4, 12, 0, 4, 0, 2, 9, 0, 5, 0, 6, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 68, 101, 112, 114, 101, 99, 97, 116, 101, 100, -1, -1, 0, 3, 0, 5, 0, 2, 0, 5, 0, 5, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 0, 2, 0, 9, 0, 0, 0, 0] [class [B]]
char char39 = '#'; // [NormalExecution # [class java.lang.Character]]
int int40 = classReader33.readUnsignedShort((int)'#'); // [NormalExecution 2304 [class java.lang.Integer]]
int int41 = 11; // [NormalExecution 11 [class java.lang.Integer]]
long long42 = classReader33.readLong(11); // [NormalExecution 16777223 [class java.lang.Long]]
java.lang.String[] strArray43 = classReader33.getInterfaces(); // [NormalExecution [hi! [class java.lang.String], hi! [class java.lang.String]] [class [Ljava.lang.String;]]
org.mockito.asm.MethodVisitor methodVisitor44 = classWriter1.visitMethod(0, "L191518793", "", "L1923853166", strArray43); // [NormalExecution org.mockito.asm.MethodWriter@22469fe4 [class org.mockito.asm.MethodWriter]]
methodVisitor44.visitEnd(); // [NormalExecution null]
org.mockito.asm.AnnotationVisitor annotationVisitor46 = methodVisitor44.visitAnnotationDefault(); // [NormalExecution org.mockito.asm.AnnotationWriter@608e7f2b [class org.mockito.asm.AnnotationWriter]]
org.mockito.asm.Label label47 = new org.mockito.asm.Label(); // [NormalExecution L1341744594 [class org.mockito.asm.Label]]
short short48 = (short)1; // [NormalExecution 1 [class java.lang.Short]]
org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter((int)(short)1); // [NormalExecution org.mockito.asm.ClassWriter@4ea91cc2 [class org.mockito.asm.ClassWriter]]
byte byte50 = (byte)0; // [NormalExecution 0 [class java.lang.Byte]]
int int51 = classWriter49.newConst((java.lang.Object)(byte)0); // [NormalExecution 1 [class java.lang.Integer]]
java.lang.String str52 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str53 = ""; // [NormalExecution  [class java.lang.String]]
java.lang.String str54 = ""; // [NormalExecution  [class java.lang.String]]
classWriter49.visitOuterClass("", "", ""); // [NormalExecution null]
java.lang.String str56 = "hi!"; // [NormalExecution hi! [class java.lang.String]]
int int57 = classWriter49.newClass("hi!"); // [NormalExecution 6 [class java.lang.Integer]]
label47.info = "hi!"; // [NormalExecution null]
java.lang.String str59 = label47.toString(); // [NormalExecution L1341744594 [class java.lang.String]]
methodVisitor44.visitLabel(label47); // [NormalExecution null]
java.lang.Object obj61 = label47.info; // [NormalExecution hi! [class java.lang.String]]
java.lang.String str62 = label47.toString(); // [NormalExecution L1341744594 [class java.lang.String]]
org.mockito.asm.ByteVector byteVector63 = new org.mockito.asm.ByteVector(); // [NormalExecution org.mockito.asm.ByteVector@2a004563 [class org.mockito.asm.ByteVector]]
byte byte64 = (byte)-1; // [NormalExecution -1 [class java.lang.Byte]]
org.mockito.asm.ByteVector byteVector65 = byteVector63.putShort((int)(byte)-1); // [NormalExecution org.mockito.asm.ByteVector@2a004563 [class org.mockito.asm.ByteVector]]
java.lang.String str66 = ""; // [NormalExecution  [class java.lang.String]]
org.mockito.asm.ByteVector byteVector67 = byteVector65.putUTF8(""); // [NormalExecution org.mockito.asm.ByteVector@2a004563 [class org.mockito.asm.ByteVector]]
int int68 = 1; // [NormalExecution 1 [class java.lang.Integer]]
org.mockito.asm.ByteVector byteVector69 = byteVector65.putShort(1); // [NormalExecution org.mockito.asm.ByteVector@2a004563 [class org.mockito.asm.ByteVector]]
label47.info = byteVector65; // [NormalExecution null]
java.lang.String str71 = "L1248791855"; // [NormalExecution L1248791855 [class java.lang.String]]
label47.info = "L1248791855"; // [NormalExecution null]
int int73 = label47.getOffset(); // [NormalExecution 0 [class java.lang.Integer]]
<randoop.PrimValue, value=1 [int9]>
<randoop.contract.IsNotNull@1f [strArray17]>
<randoop.contract.IsNotNull@1f [strArray26]>
<randoop.PrimValue, value=7 [int31]>
<randoop.contract.IsNotNull@1f [byteArray32]>
<<ObserverEqValue java.util.Arrays.toString : (byte[]) -> java.lang.String, value = '[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 3, 0, 0, 0, 0, 1, 0, 0, 7, 0, 2, 1, 0, 3, 104, 105, 33, 7, 0, 4, 12, 0, 4, 0, 2, 9, 0, 5, 0, 6, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 68, 101, 112, 114, 101, 99, 97, 116, 101, 100, -1, -1, 0, 3, 0, 5, 0, 2, 0, 5, 0, 5, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 0, 2, 0, 9, 0, 0, 0, 0] [class java.lang.String]' [byteArray32]>
<randoop.PrimValue, value=48640 [int35]>
<randoop.contract.IsNotNull@1f [byteArray38]>
<<ObserverEqValue java.util.Arrays.toString : (byte[]) -> java.lang.String, value = '[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 3, 0, 0, 0, 0, 1, 0, 0, 7, 0, 2, 1, 0, 3, 104, 105, 33, 7, 0, 4, 12, 0, 4, 0, 2, 9, 0, 5, 0, 6, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 68, 101, 112, 114, 101, 99, 97, 116, 101, 100, -1, -1, 0, 3, 0, 5, 0, 2, 0, 5, 0, 5, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 2, 0, 2, 0, 9, 0, 0, 0, 0] [class java.lang.String]' [byteArray38]>
<randoop.PrimValue, value=2304 [int40]>
<randoop.PrimValue, value=16777223 [long42]>
<randoop.contract.IsNotNull@1f [strArray43]>
<randoop.contract.IsNotNull@1f [methodVisitor44]>
<randoop.contract.IsNotNull@1f [annotationVisitor46]>
<randoop.PrimValue, value=1 [int51]>
<randoop.PrimValue, value=6 [int57]>
<randoop.PrimValue, value=L1341744594 [str59]>
<randoop.PrimValue, value=hi! [obj61]>
<randoop.PrimValue, value=L1341744594 [str62]>
<randoop.contract.IsNotNull@1f [byteVector65]>
<randoop.contract.IsNotNull@1f [byteVector67]>
<randoop.contract.IsNotNull@1f [byteVector69]>
<randoop.PrimValue, value=0 [int73]>
java.lang.OutOfMemoryError: GC overhead limit exceeded

createAndClassifySequences threw an exception
java.lang.OutOfMemoryError: GC overhead limit exceeded


Throwable thrown while handling command: java.lang.OutOfMemoryError: GC overhead limit exceeded
java.lang.OutOfMemoryError: GC overhead limit exceeded

Randoop failed.
Last sequence under execution: 
org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int)(byte)100);
org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int)(short)1);
int int9 = classWriter7.newConst((java.lang.Object)(byte)0);
java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
classWriter7.visit((int)(byte)-1, (int)(short)1, "", "hi!", "hi!", strArray17);
java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
classWriter7.visit(100, (int)(byte)-1, "", "", "hi!", strArray26);
int int31 = classWriter7.newField("hi!", "hi!", "");
byte[] byteArray32 = classWriter7.toByteArray();
org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
int int35 = classReader33.readUnsignedShort(3);
org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader33, (int)'4');
byte[] byteArray38 = classReader33.b;
int int40 = classReader33.readUnsignedShort((int)'#');
long long42 = classReader33.readLong(11);
java.lang.String[] strArray43 = classReader33.getInterfaces();
org.mockito.asm.MethodVisitor methodVisitor44 = classWriter1.visitMethod(0, "L191518793", "", "L1923853166", strArray43);
methodVisitor44.visitEnd();
org.mockito.asm.AnnotationVisitor annotationVisitor46 = methodVisitor44.visitAnnotationDefault();
org.mockito.asm.Label label47 = new org.mockito.asm.Label();
org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter((int)(short)1);
int int51 = classWriter49.newConst((java.lang.Object)(byte)0);
classWriter49.visitOuterClass("", "", "");
int int57 = classWriter49.newClass("hi!");
label47.info = "hi!";
java.lang.String str59 = label47.toString();
methodVisitor44.visitLabel(label47);
java.lang.Object obj61 = label47.info;
java.lang.String str62 = label47.toString();
org.mockito.asm.ByteVector byteVector63 = new org.mockito.asm.ByteVector();
org.mockito.asm.ByteVector byteVector65 = byteVector63.putShort((int)(byte)-1);
org.mockito.asm.ByteVector byteVector67 = byteVector65.putUTF8("");
org.mockito.asm.ByteVector byteVector69 = byteVector65.putShort(1);
label47.info = byteVector65;
label47.info = "L1248791855";
int int73 = label47.getOffset();

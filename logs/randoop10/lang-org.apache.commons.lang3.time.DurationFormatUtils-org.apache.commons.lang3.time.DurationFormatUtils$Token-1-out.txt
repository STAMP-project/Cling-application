Randoop for Java version "4.3.0, local changes, branch master, commit 7af20ae, 2022-01-31".
Cannot instantiate non-accessible class org.apache.commons.lang3.time.DurationFormatUtils$Token specified via --testclass or --classlist.

Will try to generate tests for 2 out of 3 classes.
PUBLIC MEMBERS=37
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2022-02-11T09:34:29.650Z     183M used)
Progress update: steps=34, test inputs generated=31, failing inputs=0      (2022-02-11T09:35:29.686Z     457M used)Long execution time 132 sec for
java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
java.util.TimeZone.setDefault(timeZone4);
java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
boolean boolean7 = timeZone4.hasSameRules(timeZone6);
java.lang.String str8 = org.apache.commons.lang3.time.DurationFormatUtils.formatPeriod((long)(short)10, (long)(byte)-1, "", true, timeZone4);


Progress update: steps=342, test inputs generated=315, failing inputs=0      (2022-02-11T09:37:43.950Z     110M used)Long execution time 127 sec for
java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
java.util.TimeZone.setDefault(timeZone4);
java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
boolean boolean7 = timeZone4.hasSameRules(timeZone6);
java.lang.String str8 = org.apache.commons.lang3.time.DurationFormatUtils.formatPeriod((long)(short)10, (long)(byte)-1, "", true, timeZone4);
java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
java.util.TimeZone.setDefault(timeZone9);
java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
boolean boolean12 = timeZone9.hasSameRules(timeZone11);
java.util.TimeZone.setDefault(timeZone9);
boolean boolean14 = timeZone4.hasSameRules(timeZone9);
java.lang.Class<?> wildcardClass15 = timeZone9.getClass();


Progress update: steps=351, test inputs generated=323, failing inputs=0      (2022-02-11T09:39:54.983Z     662M used)Long execution time 135 sec for
java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
java.util.TimeZone.setDefault(timeZone4);
java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
boolean boolean7 = timeZone4.hasSameRules(timeZone6);
java.lang.String str8 = org.apache.commons.lang3.time.DurationFormatUtils.formatPeriod((long)(short)10, (long)(byte)-1, "", true, timeZone4);
java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
java.util.TimeZone.setDefault(timeZone9);
java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
boolean boolean12 = timeZone9.hasSameRules(timeZone11);
java.util.TimeZone.setDefault(timeZone9);
boolean boolean14 = timeZone4.hasSameRules(timeZone9);
java.lang.String str15 = timeZone4.getDisplayName();


Progress update: steps=466, test inputs generated=425, failing inputs=0      (2022-02-11T09:42:10.591Z     1.02G used)Long execution time 123 sec for
java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("P-1Y11030DT23059059.9011");
java.lang.String str6 = org.apache.commons.lang3.time.DurationFormatUtils.formatPeriod((long)'a', (long)(byte)-1, "P-1Y11-130DT2374359-159.9683599965", true, timeZone5);


Progress update: steps=604, test inputs generated=555, failing inputs=0      (2022-02-11T09:44:15.072Z     358M used)Long execution time 128 sec for
java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
java.util.TimeZone.setDefault(timeZone4);
java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
boolean boolean7 = timeZone4.hasSameRules(timeZone6);
java.lang.String str8 = org.apache.commons.lang3.time.DurationFormatUtils.formatPeriod((long)(short)10, (long)(byte)-1, "", true, timeZone4);
int int9 = timeZone4.getRawOffset();


Progress update: steps=604, test inputs generated=556, failing inputs=0      (2022-02-11T09:45:25.055Z     359M used)
Normal method executions: 8152
Exceptional method executions: 97

Average method execution time (normal termination):      79.4
Average method execution time (exceptional termination): 0.131
Approximate memory usage 359M
Explorer = ForwardGenerator(steps: 604, null steps: 48, num_sequences_generated: 556;
    allSequences: 556, regresson seqs: 555, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 1;
    runtimePrimitivesSeen:106)

No error-revealing tests to output.

About to look for failing assertions in 413 regression sequences.

Regression test output:
Regression test count: 413
Writing regression JUnit tests...
                                                                                                                                                                                                       Created file /experiment/results/randoop10/lang-org.apache.commons.lang3.time.DurationFormatUtils-org.apache.commons.lang3.time.DurationFormatUtils$Token-1/RegressionTest0.java
Created file /experiment/results/randoop10/lang-org.apache.commons.lang3.time.DurationFormatUtils-org.apache.commons.lang3.time.DurationFormatUtils$Token-1/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  java.util.TimeZone.toZoneId()
  Possibly flaky:  java.util.TimeZone.getID()
  Possibly flaky:  java.util.TimeZone.getDisplayName(boolean,int)
  Possibly flaky:  java.util.TimeZone.hasSameRules(java.util.TimeZone)
  Possibly flaky:  java.util.TimeZone.getDisplayName(java.util.Locale)
  Possibly flaky:  java.util.TimeZone.setID(java.lang.String)
  Possibly flaky:  java.lang.Object.getClass()
  Possibly flaky:  java.util.TimeZone.getDefault()
  Possibly flaky:  java.util.TimeZone.setDefault(java.util.TimeZone)
  Possibly flaky:  java.util.TimeZone.getRawOffset()
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

Randoop for Java version "4.3.0, local changes, branch master, commit 7af20ae, 2022-01-31".

Will try to generate tests for 5 classes.
PUBLIC MEMBERS=296
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2022-02-11T09:34:20.348Z     204M used)
Progress update: steps=159, test inputs generated=141, failing inputs=0      (2022-02-11T09:35:20.359Z     729M used)Long execution time 127 sec for
java.lang.String str3 = org.apache.commons.lang3.time.DurationFormatUtils.formatPeriod((long)0, (long)(-1), "!ih");


Progress update: steps=1000, test inputs generated=921, failing inputs=0      (2022-02-11T09:36:40.663Z     489M used)
Progress update: steps=2000, test inputs generated=1866, failing inputs=0      (2022-02-11T09:36:50.779Z     225M used)
Progress update: steps=3000, test inputs generated=2808, failing inputs=0      (2022-02-11T09:37:00.970Z     661M used)
Progress update: steps=4000, test inputs generated=3743, failing inputs=0      (2022-02-11T09:37:10.858Z     994M used)
Progress update: steps=5000, test inputs generated=4661, failing inputs=0      (2022-02-11T09:37:20.831Z     1.09G used)
Progress update: steps=6000, test inputs generated=5585, failing inputs=0      (2022-02-11T09:37:31.151Z     1.36G used)
Progress update: steps=6032, test inputs generated=5614, failing inputs=0      (2022-02-11T09:37:31.488Z     130M used)
Progress update: steps=7000, test inputs generated=6509, failing inputs=0      (2022-02-11T09:37:40.641Z     260M used)
Progress update: steps=7013, test inputs generated=6522, failing inputs=0      (2022-02-11T09:38:31.488Z     1.09G used)Long execution time 129 sec for
java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("zho");
java.lang.String str6 = org.apache.commons.lang3.time.DurationFormatUtils.formatPeriod((long)97, (long)(short)-1, "gmt", false, timeZone5);


Progress update: steps=8000, test inputs generated=7444, failing inputs=0      (2022-02-11T09:40:00.103Z     1.16G used)
Progress update: steps=9000, test inputs generated=8367, failing inputs=0      (2022-02-11T09:40:09.125Z     85,9M used)
Progress update: steps=9248, test inputs generated=8603, failing inputs=0      (2022-02-11T09:40:50.623Z     1.16G used)Long execution time 121 sec for
java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("zho");
java.lang.String str6 = org.apache.commons.lang3.time.DurationFormatUtils.formatPeriod((long)97, (long)(short)-1, "gmt", false, timeZone5);
java.util.Locale locale9 = java.util.Locale.CHINA;
java.util.Locale locale10 = locale9.stripExtensions();
java.lang.String str11 = org.apache.commons.lang3.StringUtils.lowerCase("99.00:00:0", locale9);
boolean boolean12 = locale9.hasExtensions();
java.lang.String str13 = locale9.getScript();
java.lang.String str14 = org.apache.commons.lang3.StringUtils.lowerCase("Chine0e", locale9);
java.lang.String str15 = timeZone5.getDisplayName(locale9);


Progress update: steps=9400, test inputs generated=8742, failing inputs=0      (2022-02-11T09:43:12.410Z     87.8M used)Long execution time 121 sec for
java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("");
int int6 = timeZone5.getRawOffset();
java.lang.String str7 = timeZone5.getID();
java.lang.String str8 = org.apache.commons.lang3.time.DurationFormatUtils.formatPeriod(100L, (long)(byte)-1, "I!Chinesisch (China)I!Chinesisch (China)I!Chinesisch (China)I!Chinesisch (China)I!Chinesisch (China)I!Chinesisch (China)I!Chinesisch (China)I!Chinesisch (China)I!Chinesisch (China)I!", false, timeZone5);


Progress update: steps=9766, test inputs generated=9077, failing inputs=0      (2022-02-11T09:44:20.337Z     981M used)
Normal method executions: 1027976
Exceptional method executions: 756

Average method execution time (normal termination):      0.488
Average method execution time (exceptional termination): 0.0905
Approximate memory usage 981M
Explorer = ForwardGenerator(steps: 9766, null steps: 689, num_sequences_generated: 9077;
    allSequences: 9077, regresson seqs: 9008, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 69;
    runtimePrimitivesSeen:953)

No error-revealing tests to output.

About to look for failing assertions in 7214 regression sequences.

Regression test output:
Regression test count: 7214
Writing regression JUnit tests...
                                                                                                                                                                                                       Created file /experiment/results/randoop10/lang-org.apache.commons.lang3.time.DurationFormatUtils-org.apache.commons.lang3.StringUtils-1/RegressionTest0.java
Created file /experiment/results/randoop10/lang-org.apache.commons.lang3.time.DurationFormatUtils-org.apache.commons.lang3.StringUtils-1/RegressionTest1.java
Created file /experiment/results/randoop10/lang-org.apache.commons.lang3.time.DurationFormatUtils-org.apache.commons.lang3.StringUtils-1/RegressionTest2.java
Created file /experiment/results/randoop10/lang-org.apache.commons.lang3.time.DurationFormatUtils-org.apache.commons.lang3.StringUtils-1/RegressionTest3.java
Created file /experiment/results/randoop10/lang-org.apache.commons.lang3.time.DurationFormatUtils-org.apache.commons.lang3.StringUtils-1/RegressionTest4.java
Created file /experiment/results/randoop10/lang-org.apache.commons.lang3.time.DurationFormatUtils-org.apache.commons.lang3.StringUtils-1/RegressionTest5.java
Created file /experiment/results/randoop10/lang-org.apache.commons.lang3.time.DurationFormatUtils-org.apache.commons.lang3.StringUtils-1/RegressionTest6.java
Created file /experiment/results/randoop10/lang-org.apache.commons.lang3.time.DurationFormatUtils-org.apache.commons.lang3.StringUtils-1/RegressionTest7.java
Created file /experiment/results/randoop10/lang-org.apache.commons.lang3.time.DurationFormatUtils-org.apache.commons.lang3.StringUtils-1/RegressionTest8.java
Created file /experiment/results/randoop10/lang-org.apache.commons.lang3.time.DurationFormatUtils-org.apache.commons.lang3.StringUtils-1/RegressionTest9.java
Created file /experiment/results/randoop10/lang-org.apache.commons.lang3.time.DurationFormatUtils-org.apache.commons.lang3.StringUtils-1/RegressionTest10.java
Created file /experiment/results/randoop10/lang-org.apache.commons.lang3.time.DurationFormatUtils-org.apache.commons.lang3.StringUtils-1/RegressionTest11.java
Created file /experiment/results/randoop10/lang-org.apache.commons.lang3.time.DurationFormatUtils-org.apache.commons.lang3.StringUtils-1/RegressionTest12.java
Created file /experiment/results/randoop10/lang-org.apache.commons.lang3.time.DurationFormatUtils-org.apache.commons.lang3.StringUtils-1/RegressionTest13.java
Created file /experiment/results/randoop10/lang-org.apache.commons.lang3.time.DurationFormatUtils-org.apache.commons.lang3.StringUtils-1/RegressionTest14.java
Created file /experiment/results/randoop10/lang-org.apache.commons.lang3.time.DurationFormatUtils-org.apache.commons.lang3.StringUtils-1/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  java.util.Locale.filter(java.util.List<java.util.Locale.LanguageRange>,java.util.Collection<java.util.Locale>)
  Possibly flaky:  java.util.Locale.filterTags(java.util.List<java.util.Locale.LanguageRange>,java.util.Collection<java.lang.String>,java.util.Locale.FilteringMode)
  Possibly flaky:  java.util.Locale.filterTags(java.util.List<java.util.Locale.LanguageRange>,java.util.Collection<java.lang.String>)
  Possibly flaky:  java.util.Collections.addAll(java.util.Collection<java.util.Locale>,java.util.Locale[])
  Possibly flaky:  java.util.Locale.lookup(java.util.List<java.util.Locale.LanguageRange>,java.util.Collection<java.util.Locale>)
  Possibly flaky:  java.util.Collections.addAll(java.util.Collection<java.util.Locale.LanguageRange>,java.util.Locale.LanguageRange[])
  Possibly flaky:  java.util.Locale.getDisplayName(java.util.Locale)
  Possibly flaky:  java.util.Locale.filter(java.util.List<java.util.Locale.LanguageRange>,java.util.Collection<java.util.Locale>,java.util.Locale.FilteringMode)
  Possibly flaky:  org.apache.commons.lang3.StringUtils.join(java.lang.Iterable<java.util.Locale.LanguageRange>,java.lang.String)
  Possibly flaky:  org.apache.commons.lang3.StringUtils.join(java.lang.Iterable<java.util.Locale.LanguageRange>,char)
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

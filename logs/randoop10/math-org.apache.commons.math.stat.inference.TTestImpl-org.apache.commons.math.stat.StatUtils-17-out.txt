Randoop for Java version "4.3.0, local changes, branch master, commit 7af20ae, 2022-01-31".

Will try to generate tests for 22 classes.
PUBLIC MEMBERS=332
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2022-02-22T19:04:47.691Z     226M used)
Progress update: steps=1000, test inputs generated=678, failing inputs=0      (2022-02-22T19:04:56.575Z     628M used)
Progress update: steps=2000, test inputs generated=1401, failing inputs=0      (2022-02-22T19:05:03.211Z     56,1M used)
Progress update: steps=3000, test inputs generated=2187, failing inputs=0      (2022-02-22T19:05:09.011Z     216M used)
Progress update: steps=4000, test inputs generated=3002, failing inputs=0      (2022-02-22T19:05:14.853Z     1.34G used)
Progress update: steps=5000, test inputs generated=3803, failing inputs=0      (2022-02-22T19:05:20.472Z     1.14G used)
Progress update: steps=6000, test inputs generated=4604, failing inputs=0      (2022-02-22T19:05:25.052Z     738M used)
Progress update: steps=7000, test inputs generated=5406, failing inputs=0      (2022-02-22T19:05:30.804Z     523M used)
Progress update: steps=7594, test inputs generated=5879, failing inputs=0      (2022-02-22T19:06:14.873Z     376M used)Long execution time 41 sec for
org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
org.apache.commons.math.distribution.PoissonDistribution poissonDistribution2 = distributionFactory0.createPoissonDistribution((double)(short)10);
double double4 = poissonDistribution2.probability((int)(short)100);
double double6 = poissonDistribution2.normalApproximateProbability((int)(short)10);
double double8 = poissonDistribution2.cumulativeProbability((double)10);
double double11 = poissonDistribution2.cumulativeProbability(10, (int)'u');
double double13 = poissonDistribution2.cumulativeProbability(35.0d);
poissonDistribution2.setMean((double)' ');
double double17 = poissonDistribution2.probability(2147483646);


Progress update: steps=8000, test inputs generated=6214, failing inputs=0      (2022-02-22T19:06:16.976Z     310M used)
Progress update: steps=9000, test inputs generated=7021, failing inputs=0      (2022-02-22T19:06:20.738Z     1,21G used)Long execution time 40 sec for
org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
org.apache.commons.math.distribution.PoissonDistribution poissonDistribution2 = distributionFactory0.createPoissonDistribution((double)(short)10);
double double4 = poissonDistribution2.probability((int)(short)100);
double double6 = poissonDistribution2.normalApproximateProbability((int)(short)10);
double double8 = poissonDistribution2.cumulativeProbability((double)10);
double double11 = poissonDistribution2.cumulativeProbability(10, (int)'u');
double double13 = poissonDistribution2.cumulativeProbability(35.0d);
poissonDistribution2.setMean((double)' ');
double double17 = poissonDistribution2.probability(2147483646);
double double19 = poissonDistribution2.probability(1.9747596576179438d);


Progress update: steps=10000, test inputs generated=7820, failing inputs=0      (2022-02-22T19:07:05.818Z     872M used)
Progress update: steps=11000, test inputs generated=8638, failing inputs=0      (2022-02-22T19:07:09.619Z     843M used)
Progress update: steps=11229, test inputs generated=8825, failing inputs=0      (2022-02-22T19:07:14.874Z     145M used)Long execution time 489 sec for
org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution2 = distributionFactory0.createExponentialDistribution((double)'#');
org.apache.commons.math.distribution.TDistribution tDistribution4 = distributionFactory0.createTDistribution((double)(byte)1);
double double5 = tDistribution4.getDegreesOfFreedom();
tDistribution4.setDegreesOfFreedom((double)10L);
double double8 = tDistribution4.getDegreesOfFreedom();
org.apache.commons.math.stat.inference.TTestImpl tTestImpl9 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution4);
org.apache.commons.math.stat.inference.TTestImpl tTestImpl11 = new org.apache.commons.math.stat.inference.TTestImpl();
double[] doubleArray16 = new double[] { 100, 0.0f, 100.0d };
double double17 = tTestImpl11.tTest((double)(byte)10, doubleArray16);
double[] doubleArray23 = new double[] { (byte)0, (byte)1, (byte)100, 10 };
double double24 = tTestImpl11.t(0.23123342620157117d, doubleArray23);
double[] doubleArray30 = new double[] { 10, '#', (short)100, 10, '4' };
double double31 = org.apache.commons.math.stat.StatUtils.product(doubleArray30);
org.apache.commons.math.stat.inference.TTestImpl tTestImpl32 = new org.apache.commons.math.stat.inference.TTestImpl();
double[] doubleArray37 = new double[] { 100, 0.0f, 100.0d };
double double38 = tTestImpl32.tTest((double)(byte)10, doubleArray37);
double[] doubleArray44 = new double[] { (byte)0, (byte)1, (byte)100, 10 };
double double45 = tTestImpl32.t(0.23123342620157117d, doubleArray44);
double[] doubleArray51 = new double[] { 10, '#', (short)100, 10, '4' };
double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
org.apache.commons.math.stat.inference.TTestImpl tTestImpl53 = new org.apache.commons.math.stat.inference.TTestImpl();
double[] doubleArray58 = new double[] { 100, 0.0f, 100.0d };
double double59 = tTestImpl53.tTest((double)(byte)10, doubleArray58);
double double60 = tTestImpl32.homoscedasticTTest(doubleArray51, doubleArray58);
double double61 = tTestImpl11.t(doubleArray30, doubleArray51);
double double62 = org.apache.commons.math.stat.StatUtils.max(doubleArray30);
double double63 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray30);
double double64 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray30);
boolean boolean66 = tTestImpl9.tTest(1.883382351866275d, doubleArray30, 0.4724760014709668d);
org.apache.commons.math.distribution.DistributionFactory distributionFactory67 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution69 = distributionFactory67.createExponentialDistribution((double)'#');
org.apache.commons.math.distribution.TDistribution tDistribution71 = distributionFactory67.createTDistribution((double)(byte)1);
org.apache.commons.math.stat.inference.TTestImpl tTestImpl72 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution71);
double double74 = tDistribution71.cumulativeProbability(3333.333333333333d);
double double75 = tDistribution71.getDegreesOfFreedom();
double double76 = tDistribution71.getDegreesOfFreedom();
org.apache.commons.math.stat.inference.TTestImpl tTestImpl77 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution71);
double double78 = tDistribution71.getDegreesOfFreedom();
tTestImpl9.setDistribution(tDistribution71);
double double81 = tDistribution71.inverseCumulativeProbability(4.393620405917994E-10d);


Progress update: steps=11229, test inputs generated=8826, failing inputs=0      (2022-02-22T19:15:20.378Z     145M used)
Normal method executions: 4695511
Exceptional method executions: 2175

Average method execution time (normal termination):      0,123
Average method execution time (exceptional termination): 0,0874
Approximate memory usage 145M
Explorer = ForwardGenerator(steps: 11229, null steps: 2403, num_sequences_generated: 8826;
    allSequences: 8826, regresson seqs: 1851, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 6975;
    runtimePrimitivesSeen:409)

No error-revealing tests to output.

About to look for failing assertions in 1377 regression sequences.

Regression test output:
Regression test count: 1377
Writing regression JUnit tests...
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-17/RegressionTest0.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-17/RegressionTest1.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-17/RegressionTest2.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-17/RegressionTest3.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-17/RegressionTest4.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-17/RegressionTest5.java
                                                                                                                                                                                                       Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-17/RegressionTest6.java
Created file /experiment/results/randoop10/math-org.apache.commons.math.stat.inference.TTestImpl-org.apache.commons.math.stat.StatUtils-17/RegressionTest.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  java.util.Locale.toLanguageTag()
  Possibly flaky:  java.util.Locale.getVariant()
  Possibly flaky:  java.util.Locale.getDisplayVariant()
  Possibly flaky:  java.util.Locale.getDefault()
  Possibly flaky:  java.io.PrintWriter.printf(java.lang.String,java.lang.Object[])
  Possibly flaky:  java.io.PrintWriter.format(java.util.Locale,java.lang.String,java.lang.Object[])
  Possibly flaky:  java.util.Locale.stripExtensions()
  Possibly flaky:  java.io.PrintWriter.print(java.lang.Object)
  Possibly flaky:  java.lang.Throwable.getSuppressed()
  Possibly flaky:  java.io.PrintWriter.checkError()
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

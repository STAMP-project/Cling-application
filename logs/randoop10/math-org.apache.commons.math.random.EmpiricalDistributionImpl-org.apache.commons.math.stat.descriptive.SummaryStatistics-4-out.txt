Randoop for Java version "4.3.0, local changes, branch master, commit 7af20ae, 2022-01-31".

Will try to generate tests for 22 classes.
PUBLIC MEMBERS=264
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    runtimePrimitivesSeen:38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2022-02-22T06:55:47.662Z     226M used)
Progress update: steps=1000, test inputs generated=724, failing inputs=4      (2022-02-22T06:55:57.231Z     753M used)
Progress update: steps=2000, test inputs generated=1573, failing inputs=7      (2022-02-22T06:56:06.172Z     905M used)
Progress update: steps=3000, test inputs generated=2389, failing inputs=15      (2022-02-22T06:56:15.387Z     804M used)
Progress update: steps=4000, test inputs generated=3210, failing inputs=17      (2022-02-22T06:56:25.582Z     1.26G used)
Progress update: steps=5000, test inputs generated=4040, failing inputs=19      (2022-02-22T06:56:36.977Z     650M used)
Progress update: steps=6000, test inputs generated=4867, failing inputs=22      (2022-02-22T06:56:47.151Z     822M used)
Progress update: steps=6051, test inputs generated=4911, failing inputs=22      (2022-02-22T06:56:47.682Z     501M used)
Progress update: steps=7000, test inputs generated=5678, failing inputs=24      (2022-02-22T06:56:56.883Z     694M used)
Progress update: steps=8000, test inputs generated=6492, failing inputs=28      (2022-02-22T06:57:07.209Z     1.02G used)
Progress update: steps=9000, test inputs generated=7306, failing inputs=33      (2022-02-22T06:57:18.273Z     1.09G used)
Progress update: steps=10000, test inputs generated=8095, failing inputs=35      (2022-02-22T06:57:28.441Z     1.63G used)
Progress update: steps=11000, test inputs generated=8907, failing inputs=36      (2022-02-22T06:57:39.143Z     1.08G used)
Progress update: steps=11853, test inputs generated=9588, failing inputs=38      (2022-02-22T06:57:47.682Z     1.36G used)
Progress update: steps=12000, test inputs generated=9708, failing inputs=38      (2022-02-22T06:57:49.259Z     1.29G used)
Progress update: steps=13000, test inputs generated=10505, failing inputs=40      (2022-02-22T06:58:00.649Z     1.54G used)
Progress update: steps=14000, test inputs generated=11312, failing inputs=43      (2022-02-22T06:58:10.440Z     1.91G used)
Progress update: steps=15000, test inputs generated=12087, failing inputs=46      (2022-02-22T06:58:19.980Z     1.93G used)
Progress update: steps=16000, test inputs generated=12890, failing inputs=50      (2022-02-22T06:58:31.375Z     1.55G used)
Progress update: steps=17000, test inputs generated=13680, failing inputs=53      (2022-02-22T06:58:41.954Z     1.75G used)
Progress update: steps=17557, test inputs generated=14120, failing inputs=54      (2022-02-22T06:58:47.682Z     1.85G used)
Progress update: steps=18000, test inputs generated=14474, failing inputs=55      (2022-02-22T06:58:52.587Z     2.16G used)
Progress update: steps=19000, test inputs generated=15247, failing inputs=57      (2022-02-22T06:59:03.234Z     2.63G used)
Progress update: steps=20000, test inputs generated=16034, failing inputs=60      (2022-02-22T06:59:14.085Z     2.39G used)
Progress update: steps=21000, test inputs generated=16833, failing inputs=61      (2022-02-22T06:59:25.585Z     2.62G used)
Progress update: steps=22000, test inputs generated=17636, failing inputs=66      (2022-02-22T06:59:36.577Z     2.48G used)
Progress update: steps=23000, test inputs generated=18440, failing inputs=70      (2022-02-22T06:59:47.027Z     2.60G used)
Progress update: steps=23066, test inputs generated=18497, failing inputs=70      (2022-02-22T06:59:47.683Z     2.98G used)
Progress update: steps=24000, test inputs generated=19234, failing inputs=72      (2022-02-22T06:59:57.713Z     3.19G used)
Progress update: steps=25000, test inputs generated=20024, failing inputs=73      (2022-02-22T07:00:11.150Z     3.21G used)
Progress update: steps=26000, test inputs generated=20808, failing inputs=77      (2022-02-22T07:00:21.804Z     3.25G used)
Progress update: steps=27000, test inputs generated=21598, failing inputs=81      (2022-02-22T07:00:38.173Z     3.54G used)
Progress update: steps=27625, test inputs generated=22080, failing inputs=82      (2022-02-22T07:00:47.683Z     3.47G used)
Progress update: steps=28000, test inputs generated=22380, failing inputs=82      (2022-02-22T07:00:53.905Z     3.16G used)
Progress update: steps=29000, test inputs generated=23164, failing inputs=86      (2022-02-22T07:01:08.286Z     3.29G used)
Progress update: steps=30000, test inputs generated=23928, failing inputs=87      (2022-02-22T07:01:36.121Z     3.39G used)
Progress update: steps=30402, test inputs generated=24244, failing inputs=89      (2022-02-22T07:01:48.969Z     3.29G used)
Progress update: steps=31000, test inputs generated=24722, failing inputs=89      (2022-02-22T07:02:10.353Z     3.49G used)
Progress update: steps=31744, test inputs generated=25296, failing inputs=89      (2022-02-22T07:02:48.970Z     3.49G used)
Progress update: steps=32000, test inputs generated=25500, failing inputs=89      (2022-02-22T07:03:04.957Z     3.55G used)
Progress update: steps=32497, test inputs generated=25878, failing inputs=90      (2022-02-22T07:03:50.027Z     3.57G used)
Problem with sequence:
org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment(); // [NormalExecution org.apache.commons.math.stat.descriptive.moment.SecondMoment@9832a35b [class org.apache.commons.math.stat.descriptive.moment.SecondMoment]]
double double1 = secondMoment0.getResult(); // [NormalExecution NaN [class java.lang.Double]]
secondMoment0.clear(); // [NormalExecution null]
double double3 = secondMoment0.getResult(); // [NormalExecution NaN [class java.lang.Double]]
org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment)secondMoment0); // [NormalExecution org.apache.commons.math.stat.descriptive.moment.Mean@214f37b9 [class org.apache.commons.math.stat.descriptive.moment.Mean]]
long long5 = 364740218880L; // [NormalExecution 364740218880 [class java.lang.Long]]
secondMoment0.increment((double)364740218880L); // [NormalExecution null]
double double7 = secondMoment0.getResult(); // [NormalExecution 0.0 [class java.lang.Double]]
org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment)secondMoment0); // [NormalExecution org.apache.commons.math.stat.descriptive.moment.Mean@214f37b9 [class org.apache.commons.math.stat.descriptive.moment.Mean]]
double double9 = secondMoment0.getResult(); // [NormalExecution 0.0 [class java.lang.Double]]
org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares10 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares(); // [NormalExecution org.apache.commons.math.stat.descriptive.summary.SumOfSquares@7f0803c1 [class org.apache.commons.math.stat.descriptive.summary.SumOfSquares]]
long long11 = sumOfSquares10.getN(); // [NormalExecution 0 [class java.lang.Long]]
boolean boolean12 = false; // [NormalExecution false [class java.lang.Boolean]]
org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false); // [NormalExecution org.apache.commons.math.stat.descriptive.moment.Variance@7f0803c1 [class org.apache.commons.math.stat.descriptive.moment.Variance]]
boolean boolean14 = false; // [NormalExecution false [class java.lang.Boolean]]
org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false); // [NormalExecution org.apache.commons.math.stat.descriptive.moment.Variance@7f0803c1 [class org.apache.commons.math.stat.descriptive.moment.Variance]]
long long16 = variance15.getN(); // [NormalExecution 0 [class java.lang.Long]]
long long17 = 1L; // [NormalExecution 1 [class java.lang.Long]]
byte byte18 = (byte)1; // [NormalExecution 1 [class java.lang.Byte]]
double double19 = 10.0d; // [NormalExecution 10.0 [class java.lang.Double]]
long long20 = 10L; // [NormalExecution 10 [class java.lang.Long]]
double double21 = 1.0d; // [NormalExecution 1.0 [class java.lang.Double]]
double[] doubleArray22 = new double[] { 1L, (byte)1, 10.0d, 10L, 1.0d }; // [NormalExecution [1.0, 1.0, 10.0, 10.0, 1.0] [class [D]]
char char23 = 'a'; // [NormalExecution a [class java.lang.Character]]
double double24 = variance15.evaluate(doubleArray22, (double)'a'); // [NormalExecution 19.43999999999942 [class java.lang.Double]]
float float25 = 0.0f; // [NormalExecution 0.0 [class java.lang.Float]]
byte byte26 = (byte)0; // [NormalExecution 0 [class java.lang.Byte]]
short short27 = (short)1; // [NormalExecution 1 [class java.lang.Short]]
double double28 = variance13.evaluate(doubleArray22, (double)0.0f, (int)(byte)0, (int)(short)1); // [NormalExecution 0.0 [class java.lang.Double]]
short short29 = (short)1; // [NormalExecution 1 [class java.lang.Short]]
int int30 = 0; // [NormalExecution 0 [class java.lang.Integer]]
double double31 = sumOfSquares10.evaluate(doubleArray22, (int)(short)1, 0); // [NormalExecution NaN [class java.lang.Double]]
double double32 = sumOfSquares10.getResult(); // [NormalExecution NaN [class java.lang.Double]]
long long33 = sumOfSquares10.getN(); // [NormalExecution 0 [class java.lang.Long]]
sumOfSquares10.clear(); // [NormalExecution null]
org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl35 = new org.apache.commons.math.random.EmpiricalDistributionImpl(); // [NormalExecution org.apache.commons.math.random.EmpiricalDistributionImpl@4d0ec3b3 [class org.apache.commons.math.random.EmpiricalDistributionImpl]]
org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl35.getSampleStats(); // [NormalExecution null]
org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary37 = empiricalDistributionImpl35.getSampleStats(); // [NormalExecution null]
org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean38 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(); // [NormalExecution org.apache.commons.math.stat.descriptive.moment.GeometricMean@400003c1 [class org.apache.commons.math.stat.descriptive.moment.GeometricMean]]
short short39 = (short)100; // [NormalExecution 100 [class java.lang.Short]]
geometricMean38.increment((double)(short)100); // [NormalExecution null]
int int41 = 0; // [NormalExecution 0 [class java.lang.Integer]]
geometricMean38.increment((double)0); // [NormalExecution null]
boolean boolean43 = false; // [NormalExecution false [class java.lang.Boolean]]
org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false); // [NormalExecution org.apache.commons.math.stat.descriptive.moment.Variance@7f0803c1 [class org.apache.commons.math.stat.descriptive.moment.Variance]]
long long45 = variance44.getN(); // [NormalExecution 0 [class java.lang.Long]]
long long46 = 1L; // [NormalExecution 1 [class java.lang.Long]]
byte byte47 = (byte)1; // [NormalExecution 1 [class java.lang.Byte]]
double double48 = 10.0d; // [NormalExecution 10.0 [class java.lang.Double]]
long long49 = 10L; // [NormalExecution 10 [class java.lang.Long]]
double double50 = 1.0d; // [NormalExecution 1.0 [class java.lang.Double]]
double[] doubleArray51 = new double[] { 1L, (byte)1, 10.0d, 10L, 1.0d }; // [NormalExecution [1.0, 1.0, 10.0, 10.0, 1.0] [class [D]]
char char52 = 'a'; // [NormalExecution a [class java.lang.Character]]
double double53 = variance44.evaluate(doubleArray51, (double)'a'); // [NormalExecution 19.43999999999942 [class java.lang.Double]]
double double54 = geometricMean38.evaluate(doubleArray51); // [NormalExecution 2.51188643150958 [class java.lang.Double]]
empiricalDistributionImpl35.load(doubleArray51); // [NormalExecution null]
org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl35.getSampleStats(); // [NormalExecution SummaryStatistics:\nn: 5\nmin: 1.0\nmax: 10.0\nmean: 4.6\ngeometric mean: 2.51188643150958\nvariance: 24.3\nsum of squares: 203.0\nstandard deviation: 4.929503017546495\nsum of logs: 4.605170185988092\n [class org.apache.commons.math.stat.descriptive.SummaryStatistics]]
double double57 = empiricalDistributionImpl35.getNextValue(); // [NormalExecution 10.0 [class java.lang.Double]]
boolean boolean58 = empiricalDistributionImpl35.isLoaded(); // [NormalExecution true [class java.lang.Boolean]]
double[] doubleArray59 = empiricalDistributionImpl35.getUpperBounds(); // [NormalExecution [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 1.0] [class [D]]
int int60 = 0; // [NormalExecution 0 [class java.lang.Integer]]
int int61 = 3; // [NormalExecution 3 [class java.lang.Integer]]
double double62 = sumOfSquares10.evaluate(doubleArray59, 0, 3); // [NormalExecution 1.08 [class java.lang.Double]]
secondMoment0.incrementAll(doubleArray59); // [NormalExecution null]
double double64 = secondMoment0.getResult(); // [NormalExecution 1.3290252474344897E23 [class java.lang.Double]]
org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics65 = new org.apache.commons.math.stat.descriptive.SummaryStatistics(); // [NormalExecution SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n [class org.apache.commons.math.stat.descriptive.SummaryStatistics]]
org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary66 = summaryStatistics65.getSummary(); // [NormalExecution org.apache.commons.math.stat.descriptive.StatisticalSummaryValues@8fee3b41 [class org.apache.commons.math.stat.descriptive.StatisticalSummaryValues]]
java.lang.Class<?> wildcardClass67 = summaryStatistics65.getClass(); // [NormalExecution class org.apache.commons.math.stat.descriptive.SummaryStatistics [class java.lang.Class]]
org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics68 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance((java.lang.Class)wildcardClass67); // [NormalExecution SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n [class org.apache.commons.math.stat.descriptive.SummaryStatistics]]
org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics69 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance((java.lang.Class)wildcardClass67); // [NormalExecution SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n [class org.apache.commons.math.stat.descriptive.SummaryStatistics]]
double double70 = summaryStatistics69.getVariance(); // [NormalExecution NaN [class java.lang.Double]]
double double71 = summaryStatistics69.getGeometricMean(); // [NormalExecution NaN [class java.lang.Double]]
double double72 = summaryStatistics69.getGeometricMean(); // [NormalExecution NaN [class java.lang.Double]]
double double73 = summaryStatistics69.getSumsq(); // [NormalExecution NaN [class java.lang.Double]]
double double74 = summaryStatistics69.getMin(); // [NormalExecution NaN [class java.lang.Double]]
boolean boolean75 = secondMoment0.equals((java.lang.Object)double74); // [NormalExecution false [class java.lang.Boolean]]
<randoop.PrimValue, value=NaN [double1]>
<randoop.PrimValue, value=NaN [double3]>
<randoop.PrimValue, value=0.0 [double7]>
<randoop.PrimValue, value=0.0 [double9]>
<randoop.PrimValue, value=0 [long11]>
<randoop.PrimValue, value=0 [long16]>
<randoop.contract.IsNotNull@1f [doubleArray22]>
<<ObserverEqValue java.util.Arrays.toString : (double[]) -> java.lang.String, value = '[1.0, 1.0, 10.0, 10.0, 1.0] [class java.lang.String]' [doubleArray22]>
<randoop.PrimValue, value=19.43999999999942 [double24]>
<randoop.PrimValue, value=0.0 [double28]>
<randoop.PrimValue, value=NaN [double31]>
<randoop.PrimValue, value=NaN [double32]>
<randoop.PrimValue, value=0 [long33]>
<randoop.contract.IsNull@25 [statisticalSummary36]>
<randoop.contract.IsNull@25 [statisticalSummary37]>
<randoop.PrimValue, value=0 [long45]>
<randoop.contract.IsNotNull@1f [doubleArray51]>
<<ObserverEqValue java.util.Arrays.toString : (double[]) -> java.lang.String, value = '[1.0, 1.0, 10.0, 10.0, 1.0] [class java.lang.String]' [doubleArray51]>
<randoop.PrimValue, value=19.43999999999942 [double53]>
<randoop.PrimValue, value=2.51188643150958 [double54]>
<randoop.contract.IsNotNull@1f [statisticalSummary56]>
<randoop.PrimValue, value=10.0 [double57]>
<randoop.PrimValue, value=true [boolean58]>
<randoop.contract.IsNotNull@1f [doubleArray59]>
<randoop.PrimValue, value=1.08 [double62]>
<randoop.PrimValue, value=1.3290252474344897E23 [double64]>
<randoop.contract.IsNotNull@1f [statisticalSummary66]>
<randoop.contract.IsNotNull@1f [wildcardClass67]>
<randoop.contract.IsNotNull@1f [summaryStatistics68]>
<randoop.contract.IsNotNull@1f [summaryStatistics69]>
<randoop.PrimValue, value=NaN [double70]>
<randoop.PrimValue, value=NaN [double71]>
<randoop.PrimValue, value=NaN [double72]>
<randoop.PrimValue, value=NaN [double73]>
<randoop.PrimValue, value=NaN [double74]>
<randoop.PrimValue, value=false [boolean75]>
java.lang.OutOfMemoryError: GC overhead limit exceeded
	at java.util.Arrays.copyOfRange(Arrays.java:3664)
	at java.lang.String.<init>(String.java:207)
	at java.lang.StringBuilder.toString(StringBuilder.java:407)
	at randoop.com.github.javaparser.printer.SourcePrinter.toString(SourcePrinter.java:244)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.toString(DefaultPrettyPrinterVisitor.java:178)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinter.print(DefaultPrettyPrinter.java:105)
	at randoop.com.github.javaparser.ast.Node.toString(Node.java:322)
	at randoop.test.CompilableTestPredicate.testSource(CompilableTestPredicate.java:101)
	at randoop.test.CompilableTestPredicate.test(CompilableTestPredicate.java:81)
	at randoop.test.CompilableTestPredicate.test(CompilableTestPredicate.java:20)
	at java.util.function.Predicate.lambda$and$0(Predicate.java:69)
	at java.util.function.Predicate$$Lambda$81/1771243284.test(Unknown Source)
	at randoop.generation.AbstractGenerator.createAndClassifySequences(AbstractGenerator.java:347)
	at randoop.main.GenTests.handle(GenTests.java:510)
	at randoop.main.Main.nonStaticMain(Main.java:71)
	at randoop.main.Main.main(Main.java:31)

createAndClassifySequences threw an exception
java.lang.OutOfMemoryError: GC overhead limit exceeded
	at java.util.Arrays.copyOfRange(Arrays.java:3664)
	at java.lang.String.<init>(String.java:207)
	at java.lang.StringBuilder.toString(StringBuilder.java:407)
	at randoop.com.github.javaparser.printer.SourcePrinter.toString(SourcePrinter.java:244)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.toString(DefaultPrettyPrinterVisitor.java:178)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinter.print(DefaultPrettyPrinter.java:105)
	at randoop.com.github.javaparser.ast.Node.toString(Node.java:322)
	at randoop.test.CompilableTestPredicate.testSource(CompilableTestPredicate.java:101)
	at randoop.test.CompilableTestPredicate.test(CompilableTestPredicate.java:81)
	at randoop.test.CompilableTestPredicate.test(CompilableTestPredicate.java:20)
	at java.util.function.Predicate.lambda$and$0(Predicate.java:69)
	at java.util.function.Predicate$$Lambda$81/1771243284.test(Unknown Source)
	at randoop.generation.AbstractGenerator.createAndClassifySequences(AbstractGenerator.java:347)
	at randoop.main.GenTests.handle(GenTests.java:510)
	at randoop.main.Main.nonStaticMain(Main.java:71)
	at randoop.main.Main.main(Main.java:31)


Throwable thrown while handling command: java.lang.OutOfMemoryError: GC overhead limit exceeded
java.lang.OutOfMemoryError: GC overhead limit exceeded
	at java.util.Arrays.copyOfRange(Arrays.java:3664)
	at java.lang.String.<init>(String.java:207)
	at java.lang.StringBuilder.toString(StringBuilder.java:407)
	at randoop.com.github.javaparser.printer.SourcePrinter.toString(SourcePrinter.java:244)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinterVisitor.toString(DefaultPrettyPrinterVisitor.java:178)
	at randoop.com.github.javaparser.printer.DefaultPrettyPrinter.print(DefaultPrettyPrinter.java:105)
	at randoop.com.github.javaparser.ast.Node.toString(Node.java:322)
	at randoop.test.CompilableTestPredicate.testSource(CompilableTestPredicate.java:101)
	at randoop.test.CompilableTestPredicate.test(CompilableTestPredicate.java:81)
	at randoop.test.CompilableTestPredicate.test(CompilableTestPredicate.java:20)
	at java.util.function.Predicate.lambda$and$0(Predicate.java:69)
	at java.util.function.Predicate$$Lambda$81/1771243284.test(Unknown Source)
	at randoop.generation.AbstractGenerator.createAndClassifySequences(AbstractGenerator.java:347)
	at randoop.main.GenTests.handle(GenTests.java:510)
	at randoop.main.Main.nonStaticMain(Main.java:71)
	at randoop.main.Main.main(Main.java:31)

Randoop failed.
Last sequence under execution: 
org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
double double1 = secondMoment0.getResult();
secondMoment0.clear();
double double3 = secondMoment0.getResult();
org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment)secondMoment0);
secondMoment0.increment((double)364740218880L);
double double7 = secondMoment0.getResult();
org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment)secondMoment0);
double double9 = secondMoment0.getResult();
org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares10 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
long long11 = sumOfSquares10.getN();
org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
long long16 = variance15.getN();
double[] doubleArray22 = new double[] { 1L, (byte)1, 10.0d, 10L, 1.0d };
double double24 = variance15.evaluate(doubleArray22, (double)'a');
double double28 = variance13.evaluate(doubleArray22, (double)0.0f, (int)(byte)0, (int)(short)1);
double double31 = sumOfSquares10.evaluate(doubleArray22, (int)(short)1, 0);
double double32 = sumOfSquares10.getResult();
long long33 = sumOfSquares10.getN();
sumOfSquares10.clear();
org.apache.commons.math.random.EmpiricalDistributionImpl empiricalDistributionImpl35 = new org.apache.commons.math.random.EmpiricalDistributionImpl();
org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary36 = empiricalDistributionImpl35.getSampleStats();
org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary37 = empiricalDistributionImpl35.getSampleStats();
org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean38 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
geometricMean38.increment((double)(short)100);
geometricMean38.increment((double)0);
org.apache.commons.math.stat.descriptive.moment.Variance variance44 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
long long45 = variance44.getN();
double[] doubleArray51 = new double[] { 1L, (byte)1, 10.0d, 10L, 1.0d };
double double53 = variance44.evaluate(doubleArray51, (double)'a');
double double54 = geometricMean38.evaluate(doubleArray51);
empiricalDistributionImpl35.load(doubleArray51);
org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = empiricalDistributionImpl35.getSampleStats();
double double57 = empiricalDistributionImpl35.getNextValue();
boolean boolean58 = empiricalDistributionImpl35.isLoaded();
double[] doubleArray59 = empiricalDistributionImpl35.getUpperBounds();
double double62 = sumOfSquares10.evaluate(doubleArray59, 0, 3);
secondMoment0.incrementAll(doubleArray59);
double double64 = secondMoment0.getResult();
org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics65 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary66 = summaryStatistics65.getSummary();
java.lang.Class<?> wildcardClass67 = summaryStatistics65.getClass();
org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics68 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance((java.lang.Class)wildcardClass67);
org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics69 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance((java.lang.Class)wildcardClass67);
double double70 = summaryStatistics69.getVariance();
double double71 = summaryStatistics69.getGeometricMean();
double double72 = summaryStatistics69.getGeometricMean();
double double73 = summaryStatistics69.getSumsq();
double double74 = summaryStatistics69.getMin();
boolean boolean75 = secondMoment0.equals((java.lang.Object)double74);

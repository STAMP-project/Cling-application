entry: sources/closure-16/build/classes
entry: sources/closure-16/lib/args4j.jar
entry: sources/closure-16/lib/guava.jar
entry: sources/closure-16/lib/json.jar
entry: sources/closure-16/lib/jsr305.jar
entry: sources/closure-16/lib/protobuf-java.jar
entry: sources/closure-16/build/lib/rhino.jar
entry: sources/closure-16/lib/ant.jar
** CP: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar
* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: com.google.javascript.rhino.jstype.FunctionType
* Starting Client-0
* Connecting to master process on port 4978
* Analyzing classpath: 
  - sources/closure-16/build/classes
  - sources/closure-16/lib/args4j.jar
  - sources/closure-16/lib/guava.jar
  - sources/closure-16/lib/json.jar
  - sources/closure-16/lib/jsr305.jar
  - sources/closure-16/lib/protobuf-java.jar
  - sources/closure-16/build/lib/rhino.jar
  - sources/closure-16/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.jstype.FunctionType
* Test criterion:
  - Branch Coverage
* Total number of test goals for DYNAMOSA: 372
* Using seed 1566105289702
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 156 / 372
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.19623655913978494
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5161290322580645
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6424731182795699
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7096774193548387
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7688172043010753
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7903225806451613
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.793010752688172
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8091397849462365
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8118279569892473
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8145161290322581
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8306451612903226
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8360215053763441
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8360215053763441
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8387096774193549
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8413978494623656
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8467741935483871
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8467741935483871
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8521505376344086
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8548387096774194
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8548387096774194
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8548387096774194
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8602150537634409
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8602150537634409
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8602150537634409
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8682795698924731
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8682795698924731
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8763440860215054
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8897849462365591
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8897849462365591
* Search finished after 302s and 356 generations, 184757 statements, best individual has fitness: 41.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8897849462365591
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 372
* Number of covered goals: 331
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8897849462365591
* Generated 85 tests with total length 502
* Resulting test suite's coverage: 89%
* Generating assertions
[MASTER] 07:20:55.941 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7085% of time used, but only 5/85 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 7%
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8897849462365591
* Compiling and checking tests
[MASTER] 07:21:57.029 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...ion ((Od)ybxui2|null[)=]): ?> but was:<...ion ((Od)ybxui2|null[|undefined)): function (...[?]]): ?>
[MASTER] 07:21:57.032 [logback-1] WARN  JUnitAnalyzer - Failing test:
 SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "Od)ybxui2", (Node) null);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(functionType0.isNominalConstructor());
assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
assertFalse(functionType0.isEnumElementType());
assertFalse(functionType0.isVoidType());
assertFalse(functionType0.isNullType());
assertFalse(functionType0.isOrdinaryFunction());
assertFalse(functionType0.isNominalType());
assertTrue(functionType0.isFunctionType());
assertEquals(0, functionType0.getExtendedInterfacesCount());
assertFalse(functionType0.isStringValueType());
assertTrue(functionType0.isInterface());
assertFalse(functionType0.isParameterizedType());
assertFalse(functionType0.isAllType());
assertFalse(functionType0.isReturnTypeInferred());
assertTrue(functionType0.canBeCalled());
assertFalse(functionType0.isConstructor());
assertFalse(functionType0.isTemplateType());
assertTrue(functionType0.hasInstanceType());
assertFalse(functionType0.isFunctionPrototypeType());
assertFalse(functionType0.hasCachedValues());
assertFalse(functionType0.isNoObjectType());
assertFalse(functionType0.isResolved());
assertFalse(functionType0.isNoType());
assertFalse(functionType0.isNumberValueType());
assertFalse(functionType0.isNoResolvedType());
assertFalse(functionType0.isCheckedUnknownType());
assertFalse(functionType0.isEnumType());
assertFalse(functionType0.isBooleanValueType());
assertFalse(functionType0.isRecordType());
assertFalse(functionType0.isUnionType());
assertNotNull(functionType0);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);

FunctionType functionType1 = (FunctionType)functionType0.getPropertyType("bind");
assertFalse(functionType1.equals((Object)functionType0));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(functionType0.isNominalConstructor());
assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
assertFalse(functionType0.isEnumElementType());
assertFalse(functionType0.isVoidType());
assertFalse(functionType0.isNullType());
assertFalse(functionType0.isOrdinaryFunction());
assertFalse(functionType0.isNominalType());
assertTrue(functionType0.isFunctionType());
assertEquals(0, functionType0.getExtendedInterfacesCount());
assertFalse(functionType0.isStringValueType());
assertTrue(functionType0.isInterface());
assertFalse(functionType0.isParameterizedType());
assertFalse(functionType0.isAllType());
assertFalse(functionType0.isReturnTypeInferred());
assertTrue(functionType0.canBeCalled());
assertFalse(functionType0.isConstructor());
assertFalse(functionType0.isTemplateType());
assertTrue(functionType0.hasInstanceType());
assertFalse(functionType0.isFunctionPrototypeType());
assertTrue(functionType0.hasCachedValues());
assertFalse(functionType0.isNoObjectType());
assertFalse(functionType0.isResolved());
assertFalse(functionType0.isNoType());
assertFalse(functionType0.isNumberValueType());
assertFalse(functionType0.isNoResolvedType());
assertFalse(functionType0.isCheckedUnknownType());
assertFalse(functionType0.isEnumType());
assertFalse(functionType0.isBooleanValueType());
assertFalse(functionType0.isRecordType());
assertFalse(functionType0.isUnionType());
assertFalse(functionType1.isAllType());
assertFalse(functionType1.isBooleanValueType());
assertTrue(functionType1.isFunctionType());
assertFalse(functionType1.isReturnTypeInferred());
assertEquals(0, functionType1.getExtendedInterfacesCount());
assertTrue(functionType1.isOrdinaryFunction());
assertFalse(functionType1.isNullType());
assertFalse(functionType1.isResolved());
assertFalse(functionType1.isNominalConstructor());
assertFalse(functionType1.isEnumElementType());
assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
assertFalse(functionType1.isInterface());
assertFalse(functionType1.isTemplateType());
assertTrue(functionType1.canBeCalled());
assertFalse(functionType1.isConstructor());
assertFalse(functionType1.isNoType());
assertFalse(functionType1.isParameterizedType());
assertFalse(functionType1.hasCachedValues());
assertFalse(functionType1.isCheckedUnknownType());
assertFalse(functionType1.hasInstanceType());
assertFalse(functionType1.isNominalType());
assertFalse(functionType1.isNoObjectType());
assertFalse(functionType1.isStringValueType());
assertFalse(functionType1.isRecordType());
assertFalse(functionType1.isFunctionPrototypeType());
assertFalse(functionType1.isVoidType());
assertFalse(functionType1.isNumberValueType());
assertFalse(functionType1.isNoResolvedType());
assertFalse(functionType1.isUnionType());
assertFalse(functionType1.isEnumType());
assertNotNull(functionType1);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertNotSame(functionType0, functionType1);
assertNotSame(functionType1, functionType0);

String string0 = functionType1.toStringHelper(true);
assertFalse(functionType0.equals((Object)functionType1));
assertFalse(functionType1.equals((Object)functionType0));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(functionType0.isNominalConstructor());
assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
assertFalse(functionType0.isEnumElementType());
assertFalse(functionType0.isVoidType());
assertFalse(functionType0.isNullType());
assertFalse(functionType0.isOrdinaryFunction());
assertFalse(functionType0.isNominalType());
assertTrue(functionType0.isFunctionType());
assertEquals(0, functionType0.getExtendedInterfacesCount());
assertFalse(functionType0.isStringValueType());
assertTrue(functionType0.isInterface());
assertFalse(functionType0.isParameterizedType());
assertFalse(functionType0.isAllType());
assertFalse(functionType0.isReturnTypeInferred());
assertTrue(functionType0.canBeCalled());
assertFalse(functionType0.isConstructor());
assertFalse(functionType0.isTemplateType());
assertTrue(functionType0.hasInstanceType());
assertFalse(functionType0.isFunctionPrototypeType());
assertTrue(functionType0.hasCachedValues());
assertFalse(functionType0.isNoObjectType());
assertFalse(functionType0.isResolved());
assertFalse(functionType0.isNoType());
assertFalse(functionType0.isNumberValueType());
assertFalse(functionType0.isNoResolvedType());
assertFalse(functionType0.isCheckedUnknownType());
assertFalse(functionType0.isEnumType());
assertFalse(functionType0.isBooleanValueType());
assertFalse(functionType0.isRecordType());
assertFalse(functionType0.isUnionType());
assertFalse(functionType1.isAllType());
assertFalse(functionType1.isBooleanValueType());
assertTrue(functionType1.isFunctionType());
assertFalse(functionType1.isReturnTypeInferred());
assertEquals(0, functionType1.getExtendedInterfacesCount());
assertTrue(functionType1.isOrdinaryFunction());
assertFalse(functionType1.isNullType());
assertFalse(functionType1.isResolved());
assertFalse(functionType1.isNominalConstructor());
assertFalse(functionType1.isEnumElementType());
assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
assertFalse(functionType1.isInterface());
assertFalse(functionType1.isTemplateType());
assertTrue(functionType1.canBeCalled());
assertFalse(functionType1.isConstructor());
assertFalse(functionType1.isNoType());
assertFalse(functionType1.isParameterizedType());
assertFalse(functionType1.hasCachedValues());
assertFalse(functionType1.isCheckedUnknownType());
assertFalse(functionType1.hasInstanceType());
assertFalse(functionType1.isNominalType());
assertFalse(functionType1.isNoObjectType());
assertFalse(functionType1.isStringValueType());
assertFalse(functionType1.isRecordType());
assertFalse(functionType1.isFunctionPrototypeType());
assertFalse(functionType1.isVoidType());
assertFalse(functionType1.isNumberValueType());
assertFalse(functionType1.isNoResolvedType());
assertFalse(functionType1.isUnionType());
assertFalse(functionType1.isEnumType());
assertNotNull(string0);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertNotSame(functionType0, functionType1);
assertNotSame(functionType1, functionType0);
assertEquals("function ((Od)ybxui2|null)=): ?", string0);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing tests to file
* Writing JUnit test case 'FunctionType_ESTest' to results/evosuite5/closure-16-com.google.javascript.rhino.jstype.FunctionType-24
* Done!

* Computation finished

entry: sources/closure-16/build/classes
entry: sources/closure-16/lib/args4j.jar
entry: sources/closure-16/lib/guava.jar
entry: sources/closure-16/lib/json.jar
entry: sources/closure-16/lib/jsr305.jar
entry: sources/closure-16/lib/protobuf-java.jar
entry: sources/closure-16/build/lib/rhino.jar
entry: sources/closure-16/lib/ant.jar
** CP: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar
* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: com.google.javascript.rhino.head.regexp.NativeRegExp
* Starting Client-0
* Connecting to master process on port 12865
* Analyzing classpath: 
  - sources/closure-16/build/classes
  - sources/closure-16/lib/args4j.jar
  - sources/closure-16/lib/guava.jar
  - sources/closure-16/lib/json.jar
  - sources/closure-16/lib/jsr305.jar
  - sources/closure-16/lib/protobuf-java.jar
  - sources/closure-16/build/lib/rhino.jar
  - sources/closure-16/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.head.regexp.NativeRegExp
* Test criterion:
  - Branch Coverage
* Total number of test goals for DYNAMOSA: 1450
* Using seed 1566339963004
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 382 / 1450
[MASTER] 00:26:31.738 [logback-1] WARN  TestUsageChecker - class com.google.javascript.rhino.head.ContextFactory$1GlobalSetterImpl looks like an anonymous class, ignoring it (although reflection says false) GlobalSetterImpl
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.08206896551724138
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.09586206896551724
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.11379310344827587
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.15448275862068966
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.16137931034482758
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.17655172413793102
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.1813793103448276
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.18344827586206897
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.1889655172413793
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2006896551724138
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3027586206896552
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.30482758620689654
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.30482758620689654
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.30482758620689654
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3179310344827586
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.32
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.32275862068965516
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.32482758620689656
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.32689655172413795
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3296551724137931
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3296551724137931
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3296551724137931
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.33241379310344826
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.33241379310344826
* Search finished after 304s and 191 generations, 66017 statements, best individual has fitness: 968.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.33241379310344826
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 28%
* Total number of goals: 1450
* Number of covered goals: 402
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.33241379310344826
* Generated 59 tests with total length 176
* Resulting test suite's coverage: 33%
* Generating assertions
[MASTER] 00:32:47.349 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6854% of time used, but only 4/59 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 1%
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.33241379310344826
* Compiling and checking tests
[MASTER] 00:33:42.450 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 00:33:42.453 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeRegExp nativeRegExp0 = new NativeRegExp();
assertNotNull(nativeRegExp0);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(0, NativeRegExp.TEST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(2, ScriptableObject.DONTENUM);
assertFalse(nativeRegExp0.hasPrototypeMap());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertTrue(nativeRegExp0.isExtensible());
assertEquals("object", nativeRegExp0.getTypeOf());
assertTrue(nativeRegExp0.isEmpty());
assertFalse(nativeRegExp0.avoidObjectDetection());
assertFalse(nativeRegExp0.isSealed());

Context context0 = Context.getCurrentContext();
assertNotNull(context0);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(160, Context.VERSION_1_6);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(120, Context.VERSION_1_2);
assertEquals(170, Context.VERSION_1_7);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertFalse(context0.generateObserverCount);
assertEquals(180, Context.VERSION_1_8);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(140, Context.VERSION_1_4);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(150, Context.VERSION_1_5);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(110, Context.VERSION_1_1);
assertEquals(0, Context.VERSION_DEFAULT);
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isSealed());
assertEquals(0, context0.getLanguageVersion());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getInstructionObserverThreshold());

ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
assertNotNull(importerTopLevel0);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(160, Context.VERSION_1_6);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(120, Context.VERSION_1_2);
assertEquals(170, Context.VERSION_1_7);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertFalse(context0.generateObserverCount);
assertEquals(180, Context.VERSION_1_8);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(140, Context.VERSION_1_4);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(150, Context.VERSION_1_5);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(110, Context.VERSION_1_1);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isSealed());
assertEquals(0, context0.getLanguageVersion());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(importerTopLevel0.isEmpty());
assertTrue(importerTopLevel0.hasPrototypeMap());
assertEquals("global", importerTopLevel0.getClassName());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertFalse(importerTopLevel0.isSealed());
assertEquals("object", importerTopLevel0.getTypeOf());
assertTrue(importerTopLevel0.isExtensible());

nativeRegExp0.call(context0, importerTopLevel0, nativeRegExp0, context0.emptyArgs);

[MASTER] 00:33:50.733 [logback-1] WARN  TestSuiteGenerator - JUnit checking timed out
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'NativeRegExp_ESTest' to results/evosuite5/closure-16-com.google.javascript.rhino.head.regexp.NativeRegExp-7
* Done!

* Computation finished

entry: sources/closure-16/build/classes
entry: sources/closure-16/lib/args4j.jar
entry: sources/closure-16/lib/guava.jar
entry: sources/closure-16/lib/json.jar
entry: sources/closure-16/lib/jsr305.jar
entry: sources/closure-16/lib/protobuf-java.jar
entry: sources/closure-16/build/lib/rhino.jar
entry: sources/closure-16/lib/ant.jar
** CP: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar
* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: com.google.javascript.rhino.head.ScriptableObject
* Starting Client-0
* Connecting to master process on port 6982
* Analyzing classpath: 
  - sources/closure-16/build/classes
  - sources/closure-16/lib/args4j.jar
  - sources/closure-16/lib/guava.jar
  - sources/closure-16/lib/json.jar
  - sources/closure-16/lib/jsr305.jar
  - sources/closure-16/lib/protobuf-java.jar
  - sources/closure-16/build/lib/rhino.jar
  - sources/closure-16/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.head.ScriptableObject
* Test criterion:
  - Branch Coverage
* Total number of test goals for DYNAMOSA: 916
* Using seed 1566111938054
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 254 / 916
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.23253275109170304
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.27510917030567683
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.38973799126637554
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.4268558951965066
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.4388646288209607
[MASTER] 09:06:49.165 [logback-1] WARN  TestUsageChecker - class com.google.javascript.rhino.head.ContextFactory$1GlobalSetterImpl looks like an anonymous class, ignoring it (although reflection says false) GlobalSetterImpl
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.4606986899563319
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.47161572052401746
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.4836244541484716
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.4890829694323144
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.49563318777292575
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5010917030567685
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.517467248908297
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.537117903930131
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5425764192139738
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5491266375545851
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5491266375545851
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5513100436681223
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5513100436681223
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5513100436681223
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5524017467248908
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5524017467248908
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5786026200873362
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5851528384279476
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5873362445414847
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5873362445414847
* Search finished after 307s and 160 generations, 58769 statements, best individual has fitness: 378.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5873362445414847
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 59%
* Total number of goals: 916
* Number of covered goals: 543
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5873362445414847
* Generated 107 tests with total length 355
* Resulting test suite's coverage: 59%
* Generating assertions
[MASTER] 09:12:20.039 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.67515% of time used, but only 10/107 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 6%
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5873362445414847
* Compiling and checking tests
[MASTER] 09:13:02.914 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 09:13:02.914 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ContextFactory contextFactory0 = new ContextFactory();
Context context0 = new Context(contextFactory0);
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
ImporterTopLevel importerTopLevel1 = (ImporterTopLevel)context0.initStandardObjects((ScriptableObject) importerTopLevel0);
assertFalse(importerTopLevel1.isSealed());


[MASTER] 09:13:05.746 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 09:13:05.747 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
Class<NativeContinuation> class0 = NativeContinuation.class;
ScriptableObject.defineClass((Scriptable) importerTopLevel0, class0, false);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);


[MASTER] 09:13:09.819 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Exception was not thrown in com.google.javascript.rhino.head.DefaultErrorReporter but in com.google.javascript.rhino.head.Context.reportRuntimeError(Context.java:947): org.evosuite.runtime.mock.java.lang.MockThrowable: Property 4 not found.
[MASTER] 09:13:09.820 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("M1u;", (ClassLoader) null);
NativeArray nativeArray0 = new NativeArray((-999L));
nativeJavaPackage0.getAttributes(4, (Scriptable) nativeArray0);

[MASTER] 09:13:11.225 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 09:13:11.226 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeCall nativeCall0 = new NativeCall();
assertNotNull(nativeCall0);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals("Call", nativeCall0.getClassName());
assertFalse(nativeCall0.avoidObjectDetection());
assertTrue(nativeCall0.isExtensible());
assertFalse(nativeCall0.isSealed());
assertEquals("object", nativeCall0.getTypeOf());
assertFalse(nativeCall0.hasPrototypeMap());
assertTrue(nativeCall0.isEmpty());

ScriptableObject.isFalse(nativeCall0);

[MASTER] 09:13:12.590 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Exception was not thrown in com.google.javascript.rhino.head.DefaultErrorReporter but in com.google.javascript.rhino.head.Context.reportRuntimeError(Context.java:947): org.evosuite.runtime.mock.java.lang.MockThrowable: Cannot load class "com.google.javascript.rhino.head.FieldAndMethods" which has no zero-parameter constructor.
[MASTER] 09:13:12.590 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeCall nativeCall0 = new NativeCall();
assertNotNull(nativeCall0);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertFalse(nativeCall0.isSealed());
assertTrue(nativeCall0.isEmpty());
assertEquals("Call", nativeCall0.getClassName());
assertFalse(nativeCall0.avoidObjectDetection());
assertTrue(nativeCall0.isExtensible());
assertEquals("object", nativeCall0.getTypeOf());
assertFalse(nativeCall0.hasPrototypeMap());

Class<FieldAndMethods> class0 = FieldAndMethods.class;
ScriptableObject.defineClass((Scriptable) nativeCall0, class0);

[MASTER] 09:13:15.716 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 09:13:15.721 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ContextFactory contextFactory0 = new ContextFactory();
assertNotNull(contextFactory0);
assertFalse(contextFactory0.hasExplicitGlobal());
assertFalse(contextFactory0.isSealed());

Context context0 = new Context(contextFactory0);
assertNotNull(context0);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(140, Context.VERSION_1_4);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertFalse(context0.generateObserverCount);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(110, Context.VERSION_1_1);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(150, Context.VERSION_1_5);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(120, Context.VERSION_1_2);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(160, Context.VERSION_1_6);
assertEquals(170, Context.VERSION_1_7);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(180, Context.VERSION_1_8);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertFalse(contextFactory0.hasExplicitGlobal());
assertFalse(contextFactory0.isSealed());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getInstructionObserverThreshold());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isSealed());

ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
assertNotNull(importerTopLevel0);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(140, Context.VERSION_1_4);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertFalse(context0.generateObserverCount);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(110, Context.VERSION_1_1);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(150, Context.VERSION_1_5);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(120, Context.VERSION_1_2);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(160, Context.VERSION_1_6);
assertEquals(170, Context.VERSION_1_7);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(180, Context.VERSION_1_8);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertFalse(contextFactory0.hasExplicitGlobal());
assertFalse(contextFactory0.isSealed());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getInstructionObserverThreshold());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isSealed());
assertTrue(importerTopLevel0.hasPrototypeMap());
assertFalse(importerTopLevel0.isSealed());
assertFalse(importerTopLevel0.isEmpty());
assertEquals("global", importerTopLevel0.getClassName());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertTrue(importerTopLevel0.isExtensible());
assertEquals("object", importerTopLevel0.getTypeOf());

Object[] objectArray0 = ScriptableObject.getPropertyIds(importerTopLevel0);
assertNotNull(objectArray0);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(140, Context.VERSION_1_4);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertFalse(context0.generateObserverCount);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(110, Context.VERSION_1_1);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(150, Context.VERSION_1_5);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(120, Context.VERSION_1_2);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(160, Context.VERSION_1_6);
assertEquals(170, Context.VERSION_1_7);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(180, Context.VERSION_1_8);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, objectArray0.length);
assertFalse(contextFactory0.hasExplicitGlobal());
assertFalse(contextFactory0.isSealed());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getInstructionObserverThreshold());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isSealed());
assertTrue(importerTopLevel0.hasPrototypeMap());
assertFalse(importerTopLevel0.isSealed());
assertFalse(importerTopLevel0.isEmpty());
assertEquals("global", importerTopLevel0.getClassName());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertTrue(importerTopLevel0.isExtensible());
assertEquals("object", importerTopLevel0.getTypeOf());


[MASTER] 09:13:23.622 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Exception was not thrown in com.google.javascript.rhino.head.DefaultErrorReporter but in com.google.javascript.rhino.head.Context.reportRuntimeError(Context.java:947): org.evosuite.runtime.mock.java.lang.MockThrowable: Property e}v?o0SCy@kFGS'.'fr not found.
[MASTER] 09:13:23.623 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeCall nativeCall0 = new NativeCall();
assertNotNull(nativeCall0);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, ScriptableObject.READONLY);
assertEquals("object", nativeCall0.getTypeOf());
assertFalse(nativeCall0.hasPrototypeMap());
assertTrue(nativeCall0.isExtensible());
assertFalse(nativeCall0.avoidObjectDetection());
assertTrue(nativeCall0.isEmpty());
assertFalse(nativeCall0.isSealed());
assertEquals("Call", nativeCall0.getClassName());

nativeCall0.getAttributes("e}v?o0SCy@kFGS'.'fr", (Scriptable) null);

[MASTER] 09:13:29.195 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 09:13:29.197 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeCall nativeCall0 = new NativeCall();
assertNotNull(nativeCall0);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertFalse(nativeCall0.avoidObjectDetection());
assertTrue(nativeCall0.isEmpty());
assertEquals("Call", nativeCall0.getClassName());
assertFalse(nativeCall0.isSealed());
assertEquals("object", nativeCall0.getTypeOf());
assertFalse(nativeCall0.hasPrototypeMap());
assertTrue(nativeCall0.isExtensible());

BaseFunction baseFunction0 = new BaseFunction();
assertNotNull(baseFunction0);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);
assertEquals("Function", baseFunction0.getClassName());
assertFalse(baseFunction0.avoidObjectDetection());
assertFalse(baseFunction0.isSealed());
assertTrue(baseFunction0.isEmpty());
assertTrue(baseFunction0.isExtensible());
assertEquals("function", baseFunction0.getTypeOf());
assertFalse(baseFunction0.hasPrototypeMap());

Context context0 = Context.getContext();
assertNotNull(context0);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(140, Context.VERSION_1_4);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertFalse(context0.generateObserverCount);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(110, Context.VERSION_1_1);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(150, Context.VERSION_1_5);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(120, Context.VERSION_1_2);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(160, Context.VERSION_1_6);
assertEquals(170, Context.VERSION_1_7);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(180, Context.VERSION_1_8);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getInstructionObserverThreshold());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isSealed());

BoundFunction boundFunction0 = new BoundFunction(context0, nativeCall0, baseFunction0, nativeCall0, context0.emptyArgs);
assertNotNull(boundFunction0);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(140, Context.VERSION_1_4);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertFalse(context0.generateObserverCount);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(110, Context.VERSION_1_1);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(150, Context.VERSION_1_5);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(120, Context.VERSION_1_2);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(160, Context.VERSION_1_6);
assertEquals(170, Context.VERSION_1_7);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(180, Context.VERSION_1_8);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertFalse(nativeCall0.avoidObjectDetection());
assertTrue(nativeCall0.isEmpty());
assertEquals("Call", nativeCall0.getClassName());
assertFalse(nativeCall0.isSealed());
assertEquals("object", nativeCall0.getTypeOf());
assertFalse(nativeCall0.hasPrototypeMap());
assertTrue(nativeCall0.isExtensible());
assertEquals("Function", baseFunction0.getClassName());
assertFalse(baseFunction0.avoidObjectDetection());
assertFalse(baseFunction0.isSealed());
assertTrue(baseFunction0.isEmpty());
assertTrue(baseFunction0.isExtensible());
assertEquals("function", baseFunction0.getTypeOf());
assertFalse(baseFunction0.hasPrototypeMap());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getInstructionObserverThreshold());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isSealed());
assertFalse(boundFunction0.avoidObjectDetection());
assertFalse(boundFunction0.isSealed());
assertFalse(boundFunction0.isEmpty());
assertEquals("Function", boundFunction0.getClassName());
assertEquals(0, boundFunction0.getLength());
assertEquals("function", boundFunction0.getTypeOf());
assertFalse(boundFunction0.hasPrototypeMap());
assertTrue(boundFunction0.isExtensible());


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 5
* Writing tests to file
* Writing JUnit test case 'ScriptableObject_ESTest' to results/evosuite5/closure-16-com.google.javascript.rhino.head.ScriptableObject-29
* Done!

* Computation finished

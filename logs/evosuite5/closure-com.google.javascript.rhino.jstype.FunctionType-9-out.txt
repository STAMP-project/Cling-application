entry: sources/closure-16/build/classes
entry: sources/closure-16/lib/args4j.jar
entry: sources/closure-16/lib/guava.jar
entry: sources/closure-16/lib/json.jar
entry: sources/closure-16/lib/jsr305.jar
entry: sources/closure-16/lib/protobuf-java.jar
entry: sources/closure-16/build/lib/rhino.jar
entry: sources/closure-16/lib/ant.jar
** CP: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar
* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: com.google.javascript.rhino.jstype.FunctionType
* Starting Client-0
* Connecting to master process on port 5006
* Analyzing classpath: 
  - sources/closure-16/build/classes
  - sources/closure-16/lib/args4j.jar
  - sources/closure-16/lib/guava.jar
  - sources/closure-16/lib/json.jar
  - sources/closure-16/lib/jsr305.jar
  - sources/closure-16/lib/protobuf-java.jar
  - sources/closure-16/build/lib/rhino.jar
  - sources/closure-16/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.jstype.FunctionType
* Test criterion:
  - Branch Coverage
* Total number of test goals for DYNAMOSA: 372
* Using seed 1564038363196
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 156 / 372
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.28763440860215056
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5698924731182796
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6881720430107527
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7580645161290323
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7688172043010753
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7903225806451613
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7956989247311828
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8145161290322581
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8172043010752689
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8198924731182796
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8198924731182796
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8252688172043011
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8279569892473119
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8279569892473119
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8333333333333334
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8360215053763441
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8387096774193549
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8387096774193549
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8387096774193549
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8440860215053764
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8440860215053764
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8440860215053764
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8440860215053764
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8440860215053764
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8521505376344086
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8521505376344086
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8602150537634409
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8763440860215054
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8763440860215054
* Search finished after 301s and 400 generations, 189420 statements, best individual has fitness: 46.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8763440860215054
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 87%
* Total number of goals: 372
* Number of covered goals: 325
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8763440860215054
* Generated 87 tests with total length 501
* Resulting test suite's coverage: 88%
* Generating assertions
[MASTER] 09:12:16.579 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7612166666666667% of time used, but only 7/87 tests minimized), falling back to using all assertions
[MASTER] 09:12:31.404 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 7%
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8763440860215054
* Compiling and checking tests
[MASTER] 09:13:21.432 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 09:13:21.435 [logback-1] WARN  JUnitAnalyzer - Failing test:
 SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "/s`L3tDLV^W&2'QsW");
assertNotNull(errorFunctionType0);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(errorFunctionType0.isParameterizedType());
assertFalse(errorFunctionType0.isNumberValueType());
assertFalse(errorFunctionType0.isStringValueType());
assertFalse(errorFunctionType0.isUnionType());
assertFalse(errorFunctionType0.isNoResolvedType());
assertFalse(errorFunctionType0.hasCachedValues());
assertFalse(errorFunctionType0.isCheckedUnknownType());
assertTrue(errorFunctionType0.hasInstanceType());
assertFalse(errorFunctionType0.isEnumType());
assertFalse(errorFunctionType0.isRecordType());
assertFalse(errorFunctionType0.isFunctionPrototypeType());
assertFalse(errorFunctionType0.isResolved());
assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
assertFalse(errorFunctionType0.isVoidType());
assertFalse(errorFunctionType0.isTemplateType());
assertFalse(errorFunctionType0.isBooleanValueType());
assertFalse(errorFunctionType0.isAllType());
assertTrue(errorFunctionType0.isFunctionType());
assertFalse(errorFunctionType0.isNullType());
assertFalse(errorFunctionType0.isReturnTypeInferred());
assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
assertFalse(errorFunctionType0.isEnumElementType());
assertTrue(errorFunctionType0.canBeCalled());
assertTrue(errorFunctionType0.isNominalConstructor());
assertFalse(errorFunctionType0.isInterface());
assertFalse(errorFunctionType0.isNominalType());
assertFalse(errorFunctionType0.isNoObjectType());
assertFalse(errorFunctionType0.isNoType());
assertFalse(errorFunctionType0.isOrdinaryFunction());
assertTrue(errorFunctionType0.isConstructor());

FunctionType functionType0 = (FunctionType)errorFunctionType0.getPropertyType("bind");
assertNotNull(functionType0);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(errorFunctionType0.isParameterizedType());
assertFalse(errorFunctionType0.isNumberValueType());
assertFalse(errorFunctionType0.isStringValueType());
assertFalse(errorFunctionType0.isUnionType());
assertFalse(errorFunctionType0.isNoResolvedType());
assertFalse(errorFunctionType0.isCheckedUnknownType());
assertTrue(errorFunctionType0.hasInstanceType());
assertTrue(errorFunctionType0.hasCachedValues());
assertFalse(errorFunctionType0.isEnumType());
assertFalse(errorFunctionType0.isRecordType());
assertFalse(errorFunctionType0.isFunctionPrototypeType());
assertFalse(errorFunctionType0.isResolved());
assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
assertFalse(errorFunctionType0.isVoidType());
assertFalse(errorFunctionType0.isTemplateType());
assertFalse(errorFunctionType0.isBooleanValueType());
assertFalse(errorFunctionType0.isAllType());
assertTrue(errorFunctionType0.isFunctionType());
assertFalse(errorFunctionType0.isNullType());
assertFalse(errorFunctionType0.isReturnTypeInferred());
assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
assertFalse(errorFunctionType0.isEnumElementType());
assertTrue(errorFunctionType0.canBeCalled());
assertTrue(errorFunctionType0.isNominalConstructor());
assertFalse(errorFunctionType0.isInterface());
assertFalse(errorFunctionType0.isNominalType());
assertFalse(errorFunctionType0.isNoObjectType());
assertFalse(errorFunctionType0.isNoType());
assertFalse(errorFunctionType0.isOrdinaryFunction());
assertTrue(errorFunctionType0.isConstructor());
assertFalse(functionType0.isFunctionPrototypeType());
assertFalse(functionType0.isNoObjectType());
assertFalse(functionType0.isNoType());
assertFalse(functionType0.isRecordType());
assertTrue(functionType0.canBeCalled());
assertFalse(functionType0.isNoResolvedType());
assertFalse(functionType0.isConstructor());
assertFalse(functionType0.isReturnTypeInferred());
assertFalse(functionType0.isStringValueType());
assertFalse(functionType0.isParameterizedType());
assertFalse(functionType0.isResolved());
assertFalse(functionType0.hasCachedValues());
assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
assertEquals(0, functionType0.getExtendedInterfacesCount());
assertTrue(functionType0.isOrdinaryFunction());
assertFalse(functionType0.isNominalConstructor());
assertFalse(functionType0.isBooleanValueType());
assertFalse(functionType0.isAllType());
assertFalse(functionType0.isTemplateType());
assertFalse(functionType0.isEnumType());
assertFalse(functionType0.isVoidType());
assertFalse(functionType0.isEnumElementType());
assertFalse(functionType0.isInterface());
assertFalse(functionType0.isUnionType());
assertFalse(functionType0.isNumberValueType());
assertFalse(functionType0.isNominalType());
assertTrue(functionType0.isFunctionType());
assertFalse(functionType0.isNullType());
assertFalse(functionType0.isCheckedUnknownType());
assertFalse(functionType0.hasInstanceType());

boolean boolean0 = errorFunctionType0.isSubtype(functionType0);
assertTrue(boolean0);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(errorFunctionType0.isParameterizedType());
assertFalse(errorFunctionType0.isNumberValueType());
assertFalse(errorFunctionType0.isStringValueType());
assertFalse(errorFunctionType0.isUnionType());
assertFalse(errorFunctionType0.isNoResolvedType());
assertFalse(errorFunctionType0.isCheckedUnknownType());
assertTrue(errorFunctionType0.hasInstanceType());
assertTrue(errorFunctionType0.hasCachedValues());
assertFalse(errorFunctionType0.isEnumType());
assertFalse(errorFunctionType0.isRecordType());
assertFalse(errorFunctionType0.isFunctionPrototypeType());
assertFalse(errorFunctionType0.isResolved());
assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
assertFalse(errorFunctionType0.isVoidType());
assertFalse(errorFunctionType0.isTemplateType());
assertFalse(errorFunctionType0.isBooleanValueType());
assertFalse(errorFunctionType0.isAllType());
assertTrue(errorFunctionType0.isFunctionType());
assertFalse(errorFunctionType0.isNullType());
assertFalse(errorFunctionType0.isReturnTypeInferred());
assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
assertFalse(errorFunctionType0.isEnumElementType());
assertTrue(errorFunctionType0.canBeCalled());
assertTrue(errorFunctionType0.isNominalConstructor());
assertFalse(errorFunctionType0.isInterface());
assertFalse(errorFunctionType0.isNominalType());
assertFalse(errorFunctionType0.isNoObjectType());
assertFalse(errorFunctionType0.isNoType());
assertFalse(errorFunctionType0.isOrdinaryFunction());
assertTrue(errorFunctionType0.isConstructor());
assertFalse(functionType0.isFunctionPrototypeType());
assertTrue(functionType0.hasCachedValues());
assertFalse(functionType0.isNoObjectType());
assertFalse(functionType0.isNoType());
assertFalse(functionType0.isRecordType());
assertTrue(functionType0.canBeCalled());
assertFalse(functionType0.isNoResolvedType());
assertFalse(functionType0.isConstructor());
assertFalse(functionType0.isReturnTypeInferred());
assertFalse(functionType0.isStringValueType());
assertFalse(functionType0.isParameterizedType());
assertFalse(functionType0.isResolved());
assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
assertEquals(0, functionType0.getExtendedInterfacesCount());
assertTrue(functionType0.isOrdinaryFunction());
assertFalse(functionType0.isNominalConstructor());
assertFalse(functionType0.isBooleanValueType());
assertFalse(functionType0.isAllType());
assertFalse(functionType0.isTemplateType());
assertFalse(functionType0.isEnumType());
assertFalse(functionType0.isVoidType());
assertFalse(functionType0.isEnumElementType());
assertFalse(functionType0.isInterface());
assertFalse(functionType0.isUnionType());
assertFalse(functionType0.isNumberValueType());
assertFalse(functionType0.isNominalType());
assertTrue(functionType0.isFunctionType());
assertFalse(functionType0.isNullType());
assertFalse(functionType0.isCheckedUnknownType());
assertFalse(functionType0.hasInstanceType());


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 5
* Writing tests to file
* Writing JUnit test case 'FunctionType_ESTest' to results/evosuite5/closure-16-com.google.javascript.rhino.jstype.FunctionType-9
* Done!

* Computation finished

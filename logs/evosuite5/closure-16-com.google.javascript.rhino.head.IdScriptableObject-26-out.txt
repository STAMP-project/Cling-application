entry: sources/closure-16/build/classes
entry: sources/closure-16/lib/args4j.jar
entry: sources/closure-16/lib/guava.jar
entry: sources/closure-16/lib/json.jar
entry: sources/closure-16/lib/jsr305.jar
entry: sources/closure-16/lib/protobuf-java.jar
entry: sources/closure-16/build/lib/rhino.jar
entry: sources/closure-16/lib/ant.jar
** CP: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar
* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: com.google.javascript.rhino.head.IdScriptableObject
* Starting Client-0
* Connecting to master process on port 20108
* Analyzing classpath: 
  - sources/closure-16/build/classes
  - sources/closure-16/lib/args4j.jar
  - sources/closure-16/lib/guava.jar
  - sources/closure-16/lib/json.jar
  - sources/closure-16/lib/jsr305.jar
  - sources/closure-16/lib/protobuf-java.jar
  - sources/closure-16/build/lib/rhino.jar
  - sources/closure-16/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.head.IdScriptableObject
* Test criterion:
  - Branch Coverage
* Total number of test goals for DYNAMOSA: 251
* Using seed 1566103863462
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 87 / 251
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.29880478087649404
[MASTER] 06:51:29.793 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.head.FieldAndMethods due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.head.MemberBox due to org.evosuite.ga.ConstructionFailedException: Have no generator for java.lang.reflect.Constructor<java.lang.String> canUseFunctionalMocks=true, canBeMocked: false
[MASTER] 06:51:35.681 [logback-1] WARN  TestUsageChecker - class com.google.javascript.rhino.head.ContextFactory$1GlobalSetterImpl looks like an anonymous class, ignoring it (although reflection says false) GlobalSetterImpl
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.40239043824701193
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.43824701195219123
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.44223107569721115
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.4581673306772908
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.4581673306772908
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.4581673306772908
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.4581673306772908
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.46215139442231074
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.50199203187251
[MASTER] 06:54:48.996 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.head.FunctionObject due to org.evosuite.ga.ConstructionFailedException: Have no generator for class com.google.javascript.rhino.head.FunctionObject canUseFunctionalMocks=false, canBeMocked: false
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5298804780876494
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5298804780876494
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.545816733067729
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5697211155378487
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5697211155378487
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5697211155378487
* Search finished after 320s and 82 generations, 31761 statements, best individual has fitness: 108.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5697211155378487
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 57%
* Total number of goals: 251
* Number of covered goals: 143
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5697211155378487
* Generated 31 tests with total length 112
* Resulting test suite's coverage: 57%
* Generating assertions
[MASTER] 06:57:31.486 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.70725% of time used, but only 14/31 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 8%
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5697211155378487
* Compiling and checking tests
[MASTER] 06:57:44.449 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 06:57:44.450 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getCurrentContext();
NativeObject nativeObject0 = (NativeObject)context0.initStandardObjects((ScriptableObject) null, false);
NativeArray nativeArray0 = (NativeArray)ScriptableObject.getArrayPrototype(nativeObject0);
IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeObject0, (Object) null, 1, "language version", 14, nativeArray0);
IdScriptableObject.incompatibleCallError(idFunctionObject0);

[MASTER] 06:57:50.866 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 06:57:50.866 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ContextFactory contextFactory0 = new ContextFactory();
Context context0 = contextFactory0.enterContext();
NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
nativeArray0.getInstanceIdValue((-3501));

[MASTER] 06:57:59.647 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 06:57:59.648 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getContext();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
Object[] objectArray0 = ScriptableObject.getPropertyIds(importerTopLevel0);
assertEquals(0, objectArray0.length);


[MASTER] 06:58:07.481 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 06:58:07.482 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getCurrentContext();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
Object object0 = ScriptableObject.getProperty((Scriptable) importerTopLevel0, 4);
importerTopLevel0.initPrototypeMethod(object0, 3, "language version", 11);

[MASTER] 06:58:09.336 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 06:58:09.336 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getCurrentContext();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
Object object0 = NativeIterator.getStopIterationObject(importerTopLevel0);
ScriptableObject.isTrue(object0);
boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) importerTopLevel0, "constructor");
assertTrue(boolean0);


[MASTER] 06:58:10.878 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 06:58:10.888 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ContextFactory contextFactory0 = ContextFactory.getGlobal();
assertNotNull(contextFactory0);
assertFalse(contextFactory0.isSealed());
assertFalse(contextFactory0.hasExplicitGlobal());

Context context0 = contextFactory0.enterContext();
assertNotNull(context0);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(110, Context.VERSION_1_1);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(150, Context.VERSION_1_5);
assertEquals(120, Context.VERSION_1_2);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(160, Context.VERSION_1_6);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(170, Context.VERSION_1_7);
assertEquals(180, Context.VERSION_1_8);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(140, Context.VERSION_1_4);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertFalse(context0.generateObserverCount);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertFalse(contextFactory0.isSealed());
assertFalse(contextFactory0.hasExplicitGlobal());
assertFalse(context0.isGeneratingDebugChanged());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isSealed());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getOptimizationLevel());

ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
assertNotNull(importerTopLevel0);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(110, Context.VERSION_1_1);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(150, Context.VERSION_1_5);
assertEquals(120, Context.VERSION_1_2);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(160, Context.VERSION_1_6);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(170, Context.VERSION_1_7);
assertEquals(180, Context.VERSION_1_8);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(140, Context.VERSION_1_4);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertFalse(context0.generateObserverCount);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertFalse(contextFactory0.isSealed());
assertFalse(contextFactory0.hasExplicitGlobal());
assertFalse(context0.isGeneratingDebugChanged());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isSealed());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertEquals("global", importerTopLevel0.getClassName());
assertEquals("object", importerTopLevel0.getTypeOf());
assertTrue(importerTopLevel0.isExtensible());
assertFalse(importerTopLevel0.isSealed());
assertFalse(importerTopLevel0.isEmpty());
assertTrue(importerTopLevel0.hasPrototypeMap());

NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
assertNotNull(nativeArray0);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(110, Context.VERSION_1_1);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(150, Context.VERSION_1_5);
assertEquals(120, Context.VERSION_1_2);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(160, Context.VERSION_1_6);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(170, Context.VERSION_1_7);
assertEquals(180, Context.VERSION_1_8);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(140, Context.VERSION_1_4);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertFalse(context0.generateObserverCount);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertFalse(contextFactory0.isSealed());
assertFalse(contextFactory0.hasExplicitGlobal());
assertFalse(context0.isGeneratingDebugChanged());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isSealed());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(nativeArray0.avoidObjectDetection());
assertFalse(nativeArray0.hasPrototypeMap());
assertEquals("object", nativeArray0.getTypeOf());
assertEquals(0L, nativeArray0.getLength());
assertFalse(nativeArray0.isSealed());
assertTrue(nativeArray0.isExtensible());
assertEquals("Array", nativeArray0.getClassName());
assertTrue(nativeArray0.isEmpty());
assertEquals(0L, nativeArray0.jsGet_length());

nativeArray0.defineOwnProperty(context0, importerTopLevel0, importerTopLevel0);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(110, Context.VERSION_1_1);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(150, Context.VERSION_1_5);
assertEquals(120, Context.VERSION_1_2);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(160, Context.VERSION_1_6);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(170, Context.VERSION_1_7);
assertEquals(180, Context.VERSION_1_8);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(140, Context.VERSION_1_4);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertFalse(context0.generateObserverCount);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertFalse(contextFactory0.isSealed());
assertFalse(contextFactory0.hasExplicitGlobal());
assertFalse(context0.isGeneratingDebugChanged());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isSealed());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertEquals("global", importerTopLevel0.getClassName());
assertEquals("object", importerTopLevel0.getTypeOf());
assertTrue(importerTopLevel0.isExtensible());
assertFalse(importerTopLevel0.isSealed());
assertFalse(importerTopLevel0.isEmpty());
assertTrue(importerTopLevel0.hasPrototypeMap());
assertFalse(nativeArray0.avoidObjectDetection());
assertFalse(nativeArray0.isEmpty());
assertFalse(nativeArray0.hasPrototypeMap());
assertEquals("object", nativeArray0.getTypeOf());
assertEquals(0L, nativeArray0.getLength());
assertFalse(nativeArray0.isSealed());
assertTrue(nativeArray0.isExtensible());
assertEquals("Array", nativeArray0.getClassName());
assertEquals(0L, nativeArray0.jsGet_length());

NativeObject nativeObject0 = (NativeObject)nativeArray0.getOwnPropertyDescriptor(context0, importerTopLevel0);
assertNotNull(nativeObject0);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(110, Context.VERSION_1_1);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(150, Context.VERSION_1_5);
assertEquals(120, Context.VERSION_1_2);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(160, Context.VERSION_1_6);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(170, Context.VERSION_1_7);
assertEquals(180, Context.VERSION_1_8);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(140, Context.VERSION_1_4);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertFalse(context0.generateObserverCount);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertFalse(contextFactory0.isSealed());
assertFalse(contextFactory0.hasExplicitGlobal());
assertFalse(context0.isGeneratingDebugChanged());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isSealed());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertEquals("global", importerTopLevel0.getClassName());
assertEquals("object", importerTopLevel0.getTypeOf());
assertTrue(importerTopLevel0.isExtensible());
assertFalse(importerTopLevel0.isSealed());
assertFalse(importerTopLevel0.isEmpty());
assertTrue(importerTopLevel0.hasPrototypeMap());
assertFalse(nativeArray0.avoidObjectDetection());
assertFalse(nativeArray0.isEmpty());
assertFalse(nativeArray0.hasPrototypeMap());
assertEquals("object", nativeArray0.getTypeOf());
assertEquals(0L, nativeArray0.getLength());
assertFalse(nativeArray0.isSealed());
assertTrue(nativeArray0.isExtensible());
assertEquals("Array", nativeArray0.getClassName());
assertEquals(0L, nativeArray0.jsGet_length());
assertFalse(nativeObject0.avoidObjectDetection());
assertEquals("Object", nativeObject0.getClassName());
assertTrue(nativeObject0.isExtensible());
assertEquals("object", nativeObject0.getTypeOf());
assertFalse(nativeObject0.hasPrototypeMap());
assertFalse(nativeObject0.isSealed());
assertFalse(nativeObject0.isEmpty());


[MASTER] 06:58:14.629 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Exception was not thrown in com.google.javascript.rhino.head.DefaultErrorReporter but in com.google.javascript.rhino.head.Context.reportRuntimeError(Context.java:947): org.evosuite.runtime.mock.java.lang.MockThrowable: Property constructor not found.
[MASTER] 06:58:14.630 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
assertNotNull(nativeIterator_StopIteration0);
assertEquals(13, ScriptableObject.CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertFalse(nativeIterator_StopIteration0.isSealed());
assertTrue(nativeIterator_StopIteration0.isEmpty());
assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
assertTrue(nativeIterator_StopIteration0.isExtensible());
assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());

nativeIterator_StopIteration0.getAttributes("constructor");

[MASTER] 06:58:17.264 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 06:58:17.268 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getContext();
assertNotNull(context0);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(110, Context.VERSION_1_1);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(160, Context.VERSION_1_6);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(150, Context.VERSION_1_5);
assertEquals(170, Context.VERSION_1_7);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(120, Context.VERSION_1_2);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(180, Context.VERSION_1_8);
assertEquals(140, Context.VERSION_1_4);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertFalse(context0.generateObserverCount);
assertEquals(100, Context.VERSION_1_0);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isSealed());
assertTrue(context0.isGeneratingSource());

ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
assertNotNull(importerTopLevel0);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(110, Context.VERSION_1_1);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(160, Context.VERSION_1_6);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(150, Context.VERSION_1_5);
assertEquals(170, Context.VERSION_1_7);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(120, Context.VERSION_1_2);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(180, Context.VERSION_1_8);
assertEquals(140, Context.VERSION_1_4);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertFalse(context0.generateObserverCount);
assertEquals(100, Context.VERSION_1_0);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(0, ScriptableObject.EMPTY);
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isSealed());
assertTrue(context0.isGeneratingSource());
assertFalse(importerTopLevel0.isSealed());
assertEquals("object", importerTopLevel0.getTypeOf());
assertTrue(importerTopLevel0.isExtensible());
assertEquals("global", importerTopLevel0.getClassName());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertFalse(importerTopLevel0.isEmpty());
assertTrue(importerTopLevel0.hasPrototypeMap());

importerTopLevel0.getAttributes("language version");

[MASTER] 06:58:23.850 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 06:58:23.850 [logback-1] WARN  JUnitAnalyzer - Failing test:
 InterpreterData interpreterData0 = new InterpreterData(110, (String) null, (String) null, true);
assertNotNull(interpreterData0);
assertEquals(0, interpreterData0.getFunctionCount());
assertNull(interpreterData0.getFunctionName());
assertEquals(0, interpreterData0.getParamCount());
assertNull(interpreterData0.getSourceName());
assertFalse(interpreterData0.isTopLevel());
assertFalse(interpreterData0.isFunction());

InterpretedFunction.createScript(interpreterData0, interpreterData0);

[MASTER] 06:58:25.555 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 06:58:25.568 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeArray nativeArray0 = new NativeArray(23L);
assertNotNull(nativeArray0);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals("Array", nativeArray0.getClassName());
assertTrue(nativeArray0.isExtensible());
assertFalse(nativeArray0.hasPrototypeMap());
assertEquals("object", nativeArray0.getTypeOf());
assertFalse(nativeArray0.avoidObjectDetection());
assertEquals(23L, nativeArray0.jsGet_length());
assertTrue(nativeArray0.isEmpty());
assertEquals(23L, nativeArray0.getLength());
assertFalse(nativeArray0.isSealed());

Context context0 = Context.getCurrentContext();
assertNotNull(context0);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(130, Context.VERSION_1_3);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(150, Context.VERSION_1_5);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertFalse(context0.generateObserverCount);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(100, Context.VERSION_1_0);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(140, Context.VERSION_1_4);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(180, Context.VERSION_1_8);
assertEquals(110, Context.VERSION_1_1);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(170, Context.VERSION_1_7);
assertEquals(120, Context.VERSION_1_2);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isSealed());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertFalse(context0.isGeneratingDebugChanged());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());

NativeArray nativeArray1 = (NativeArray)context0.initStandardObjects((ScriptableObject) nativeArray0, false);
assertNotNull(nativeArray1);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(130, Context.VERSION_1_3);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(150, Context.VERSION_1_5);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertFalse(context0.generateObserverCount);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(100, Context.VERSION_1_0);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(140, Context.VERSION_1_4);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(180, Context.VERSION_1_8);
assertEquals(110, Context.VERSION_1_1);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(170, Context.VERSION_1_7);
assertEquals(120, Context.VERSION_1_2);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertSame(nativeArray0, nativeArray1);
assertSame(nativeArray1, nativeArray0);
assertEquals("Array", nativeArray0.getClassName());
assertTrue(nativeArray0.isExtensible());
assertFalse(nativeArray0.hasPrototypeMap());
assertEquals("object", nativeArray0.getTypeOf());
assertFalse(nativeArray0.avoidObjectDetection());
assertEquals(23L, nativeArray0.jsGet_length());
assertEquals(23L, nativeArray0.getLength());
assertFalse(nativeArray0.isEmpty());
assertFalse(nativeArray0.isSealed());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isSealed());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertFalse(context0.isGeneratingDebugChanged());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertEquals("Array", nativeArray1.getClassName());
assertTrue(nativeArray1.isExtensible());
assertFalse(nativeArray1.isEmpty());
assertFalse(nativeArray1.hasPrototypeMap());
assertEquals("object", nativeArray1.getTypeOf());
assertEquals(23L, nativeArray1.jsGet_length());
assertFalse(nativeArray1.isSealed());
assertFalse(nativeArray1.avoidObjectDetection());
assertEquals(23L, nativeArray1.getLength());

Object[] objectArray0 = nativeArray1.getAllIds();
assertNotNull(objectArray0);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(130, Context.VERSION_1_3);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(150, Context.VERSION_1_5);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertFalse(context0.generateObserverCount);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(100, Context.VERSION_1_0);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(140, Context.VERSION_1_4);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(180, Context.VERSION_1_8);
assertEquals(110, Context.VERSION_1_1);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(170, Context.VERSION_1_7);
assertEquals(120, Context.VERSION_1_2);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertSame(nativeArray0, nativeArray1);
assertSame(nativeArray1, nativeArray0);
assertEquals(57, objectArray0.length);
assertEquals("Array", nativeArray0.getClassName());
assertTrue(nativeArray0.isExtensible());
assertFalse(nativeArray0.hasPrototypeMap());
assertEquals("object", nativeArray0.getTypeOf());
assertFalse(nativeArray0.avoidObjectDetection());
assertEquals(23L, nativeArray0.jsGet_length());
assertEquals(23L, nativeArray0.getLength());
assertFalse(nativeArray0.isEmpty());
assertFalse(nativeArray0.isSealed());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isSealed());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertFalse(context0.isGeneratingDebugChanged());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertEquals("Array", nativeArray1.getClassName());
assertTrue(nativeArray1.isExtensible());
assertFalse(nativeArray1.isEmpty());
assertFalse(nativeArray1.hasPrototypeMap());
assertEquals("object", nativeArray1.getTypeOf());
assertEquals(23L, nativeArray1.jsGet_length());
assertFalse(nativeArray1.isSealed());
assertFalse(nativeArray1.avoidObjectDetection());
assertEquals(23L, nativeArray1.getLength());


* Writing tests to file
* Writing JUnit test case 'IdScriptableObject_ESTest' to results/evosuite5/closure-16-com.google.javascript.rhino.head.IdScriptableObject-26
* Done!

* Computation finished

[MASTER] 00:50:13.354 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 00:57:45.714 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_144_1565737065616/com/google/javascript/rhino/Node_144_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_144_1565737065616/com/google/javascript/rhino/Node_144_tmp__ESTest_scaffolding.java]]
[MASTER] 00:57:45.715 [logback-2] ERROR JUnitAnalyzer - Classpath: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar:/home/pderakhshanfar/botsing-integration-experiment/tools/evosuite.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/build/classes:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/args4j.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/guava.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/json.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/jsr305.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/protobuf-java.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/build/lib/rhino.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/ant.jar
[MASTER] 00:57:45.717 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/botsing-integration-experiment/tools/evosuite.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/build/classes:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/args4j.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/guava.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/json.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/jsr305.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/protobuf-java.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/build/lib/rhino.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/ant.jar
[MASTER] 00:57:45.725 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 129
[MASTER] 00:57:45.727 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_144_1565737065616/com/google/javascript/rhino/Node_144_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 13 22:57:45 GMT 2019
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
16: public class Node_144_tmp__ESTest extends Node_144_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(99);
21:       assertEquals(2, Node.POST_FLAG);
22:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
23:       assertEquals(37, Node.OPT_ARG_NAME);
24:       assertEquals(29, Node.JSDOC_INFO_PROP);
25:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
26:       assertEquals(30, Node.VAR_ARGS_NAME);
27:       assertEquals(1, Node.DECR_FLAG);
28:       assertEquals(32, Node.INCRDECR_PROP);
29:       assertEquals(47, Node.IS_DISPATCHER);
30:       assertEquals(12, Node.COLUMN_BITS);
31:       assertEquals(54, Node.SLASH_V);
32:       assertEquals(40, Node.ORIGINALNAME_PROP);
33:       assertEquals(50, Node.FREE_CALL);
34:       assertEquals(51, Node.STATIC_SOURCE_FILE);
35:       assertEquals(41, Node.BRACELESS_TYPE);
36:       assertEquals(46, Node.IS_NAMESPACE);
37:       assertEquals(16, Node.SOURCENAME_PROP);
38:       assertEquals(43, Node.IS_CONSTANT_NAME);
39:       assertEquals(48, Node.DIRECTIVES);
40:       assertEquals(8, Node.FLAG_NO_THROWS);
41:       assertEquals(39, Node.EMPTY_BLOCK);
42:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
43:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
44:       assertEquals(4095, Node.COLUMN_MASK);
45:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
46:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
47:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
48:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
49:       assertEquals(35, Node.PARENTHESIZED_PROP);
50:       assertEquals(54, Node.LAST_PROP);
51:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
52:       assertEquals(53, Node.INPUT_ID);
53:       assertEquals(36, Node.QUOTED_PROP);
54:       assertEquals(52, Node.LENGTH);
55:       assertEquals(15, Node.NO_SIDE_EFFECTS);
56:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
57:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
58:       assertEquals(49, Node.DIRECT_EVAL);
59:       assertNotNull(node0);
60:       assertFalse(node0.isNot());
61:       assertFalse(node0.isWith());
62:       assertFalse(node0.isExprResult());
63:       assertFalse(node0.isScript());
64:       assertFalse(node0.isObjectLit());
65:       assertFalse(node0.isAnd());
66:       assertFalse(node0.isLabelName());
67:       assertFalse(node0.isFalse());
68:       assertFalse(node0.isAssignAdd());
69:       assertFalse(node0.isLabel());
70:       assertFalse(node0.isThrow());
71:       assertEquals(99, node0.getType());
72:       assertFalse(node0.isDo());
73:       assertFalse(node0.isNew());
74:       assertFalse(node0.isContinue());
75:       assertFalse(node0.isString());
76:       assertFalse(node0.isAdd());
77:       assertFalse(node0.isOr());
78:       assertNull(node0.getSourceFileName());
79:       assertFalse(node0.isName());
80:       assertFalse(node0.isTypeOf());
81:       assertFalse(node0.isDec());
82:       assertEquals((-1), node0.getSourcePosition());
83:       assertFalse(node0.hasChildren());
84:       assertFalse(node0.isBreak());
85:       assertFalse(node0.isFromExterns());
86:       assertFalse(node0.isComma());
87:       assertFalse(node0.isDelProp());
88:       assertFalse(node0.isAssign());
89:       assertFalse(node0.isGetElem());
90:       assertFalse(node0.isGetProp());
91:       assertFalse(node0.isCall());
92:       assertFalse(node0.isReturn());
93:       assertFalse(node0.isWhile());
94:       assertFalse(node0.isRegExp());
95:       assertFalse(node0.isDefaultCase());
96:       assertFalse(node0.isDebugger());
97:       assertFalse(node0.isFunction());
98:       assertFalse(node0.isVoid());
99:       assertFalse(node0.isCatch());
100:       assertFalse(node0.isArrayLit());
101:       assertFalse(node0.isParamList());
102:       assertFalse(node0.isTrue());
103:       assertFalse(node0.isNull());
104:       assertFalse(node0.isSetterDef());
105:       assertFalse(node0.isEmpty());
106:       assertEquals(0, node0.getChildCount());
107:       assertFalse(node0.isVar());
108:       assertFalse(node0.isSwitch());
109:       assertFalse(node0.isCase());
110:       assertFalse(node0.isInc());
111:       assertFalse(node0.isIn());
112:       assertEquals((-1), node0.getLineno());
113:       assertFalse(node0.isStringKey());
114:       assertEquals((-1), node0.getCharno());
115:       assertFalse(node0.isNE());
116:       assertFalse(node0.isNumber());
117:       assertFalse(node0.isIf());
118:       assertFalse(node0.isGetterDef());
119:       assertFalse(node0.hasOneChild());
120:       assertFalse(node0.isInstanceOf());
121:       assertFalse(node0.isHook());
122:       assertFalse(node0.hasMoreThanOneChild());
123:       assertFalse(node0.isTry());
124:       assertFalse(node0.isBlock());
125:       assertFalse(node0.isThis());
126:       assertFalse(node0.isFor());
127:       
128:       Iterable<Node> iterable0 = node0.children();
129:       assertFalse(iterable0.contains(node0));
130:       assertEquals(2, Node.POST_FLAG);
131:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
132:       assertEquals(37, Node.OPT_ARG_NAME);
133:       assertEquals(29, Node.JSDOC_INFO_PROP);
134:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
135:       assertEquals(30, Node.VAR_ARGS_NAME);
136:       assertEquals(1, Node.DECR_FLAG);
137:       assertEquals(32, Node.INCRDECR_PROP);
138:       assertEquals(47, Node.IS_DISPATCHER);
139:       assertEquals(12, Node.COLUMN_BITS);
140:       assertEquals(54, Node.SLASH_V);
141:       assertEquals(40, Node.ORIGINALNAME_PROP);
142:       assertEquals(50, Node.FREE_CALL);
143:       assertEquals(51, Node.STATIC_SOURCE_FILE);
144:       assertEquals(41, Node.BRACELESS_TYPE);
145:       assertEquals(46, Node.IS_NAMESPACE);
146:       assertEquals(16, Node.SOURCENAME_PROP);
147:       assertEquals(43, Node.IS_CONSTANT_NAME);
148:       assertEquals(48, Node.DIRECTIVES);
149:       assertEquals(8, Node.FLAG_NO_THROWS);
150:       assertEquals(39, Node.EMPTY_BLOCK);
151:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
152:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
153:       assertEquals(4095, Node.COLUMN_MASK);
154:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
155:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
156:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
157:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
158:       assertEquals(35, Node.PARENTHESIZED_PROP);
159:       assertEquals(54, Node.LAST_PROP);
160:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
161:       assertEquals(53, Node.INPUT_ID);
162:       assertEquals(36, Node.QUOTED_PROP);
163:       assertEquals(52, Node.LENGTH);
164:       assertEquals(15, Node.NO_SIDE_EFFECTS);
165:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
166:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
167:       assertEquals(49, Node.DIRECT_EVAL);
168:       assertNotNull(iterable0);
169:       assertFalse(node0.isNot());
170:       assertFalse(node0.isWith());
171:       assertFalse(node0.isExprResult());
172:       assertFalse(node0.isScript());
173:       assertFalse(node0.isObjectLit());
174:       assertFalse(node0.isAnd());
175:       assertFalse(node0.isLabelName());
176:       assertFalse(node0.isFalse());
177:       assertFalse(node0.isAssignAdd());
178:       assertFalse(node0.isLabel());
179:       assertFalse(node0.isThrow());
180:       assertEquals(99, node0.getType());
181:       assertFalse(node0.isDo());
182:       assertFalse(node0.isNew());
183:       assertFalse(node0.isContinue());
184:       assertFalse(node0.isString());
185:       assertFalse(node0.isAdd());
186:       assertFalse(node0.isOr());
187:       assertNull(node0.getSourceFileName());
188:       assertFalse(node0.isName());
189:       assertFalse(node0.isTypeOf());
190:       assertFalse(node0.isDec());
191:       assertEquals((-1), node0.getSourcePosition());
192:       assertFalse(node0.hasChildren());
193:       assertFalse(node0.isBreak());
194:       assertFalse(node0.isFromExterns());
195:       assertFalse(node0.isComma());
196:       assertFalse(node0.isDelProp());
197:       assertFalse(node0.isAssign());
198:       assertFalse(node0.isGetElem());
199:       assertFalse(node0.isGetProp());
200:       assertFalse(node0.isCall());
201:       assertFalse(node0.isReturn());
202:       assertFalse(node0.isWhile());
203:       assertFalse(node0.isRegExp());
204:       assertFalse(node0.isDefaultCase());
205:       assertFalse(node0.isDebugger());
206:       assertFalse(node0.isFunction());
207:       assertFalse(node0.isVoid());
208:       assertFalse(node0.isCatch());
209:       assertFalse(node0.isArrayLit());
210:       assertFalse(node0.isParamList());
211:       assertFalse(node0.isTrue());
212:       assertFalse(node0.isNull());
213:       assertFalse(node0.isSetterDef());
214:       assertFalse(node0.isEmpty());
215:       assertEquals(0, node0.getChildCount());
216:       assertFalse(node0.isVar());
217:       assertFalse(node0.isSwitch());
218:       assertFalse(node0.isCase());
219:       assertFalse(node0.isInc());
220:       assertFalse(node0.isIn());
221:       assertEquals((-1), node0.getLineno());
222:       assertFalse(node0.isStringKey());
223:       assertEquals((-1), node0.getCharno());
224:       assertFalse(node0.isNE());
225:       assertFalse(node0.isNumber());
226:       assertFalse(node0.isIf());
227:       assertFalse(node0.isGetterDef());
228:       assertFalse(node0.hasOneChild());
229:       assertFalse(node0.isInstanceOf());
230:       assertFalse(node0.isHook());
231:       assertFalse(node0.hasMoreThanOneChild());
232:       assertFalse(node0.isTry());
233:       assertFalse(node0.isBlock());
234:       assertFalse(node0.isThis());
235:       assertFalse(node0.isFor());
236:   }
237: }
RegularFileObject[/tmp/EvoSuite_144_1565737065616/com/google/javascript/rhino/Node_144_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 13 22:57:45 GMT 2019
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class Node_144_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/botsing-integration-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_144_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.common.collect.ArrayListMultimap",
82:       "com.google.javascript.rhino.jstype.NoType",
83:       "com.google.common.collect.ListMultimap",
84:       "com.google.javascript.rhino.JSDocInfo$Visibility",
85:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
86:       "com.google.javascript.rhino.jstype.ArrowType",
87:       "com.google.javascript.rhino.SimpleErrorReporter",
88:       "com.google.common.collect.AbstractMultimap$WrappedCollection",
89:       "com.google.common.collect.Lists$RandomAccessPartition",
90:       "com.google.common.collect.Collections2",
91:       "com.google.javascript.rhino.jstype.NumberType",
92:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
93:       "com.google.common.collect.PeekingIterator",
94:       "com.google.common.collect.RegularImmutableList",
95:       "com.google.javascript.rhino.jstype.StaticScope",
96:       "com.google.javascript.rhino.jstype.InstanceObjectType",
97:       "com.google.common.collect.Lists$TransformingRandomAccessList",
98:       "com.google.javascript.rhino.Node$PropListItem",
99:       "com.google.javascript.rhino.Node$IntPropListItem",
100:       "com.google.common.collect.Sets$2",
101:       "com.google.common.collect.Sets$3",
102:       "com.google.common.collect.Maps$KeySet",
103:       "com.google.common.collect.LinkedHashMultimap",
104:       "com.google.javascript.rhino.Node",
105:       "com.google.javascript.rhino.jstype.ObjectType",
106:       "com.google.common.collect.Sets$1",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.javascript.rhino.Node$AncestorIterable$1",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.Iterators$11",
112:       "com.google.javascript.rhino.jstype.JSType$1",
113:       "com.google.common.base.Predicate",
114:       "com.google.common.collect.AbstractMultimap$AsMap",
115:       "com.google.javascript.rhino.jstype.VoidType",
116:       "com.google.common.base.Joiner",
117:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
118:       "com.google.common.collect.AbstractListMultimap",
119:       "com.google.javascript.rhino.jstype.JSType",
120:       "com.google.common.collect.ImmutableAsList",
121:       "com.google.javascript.rhino.Node$StringNode",
122:       "com.google.javascript.rhino.jstype.ProxyObjectType",
123:       "com.google.common.collect.Sets$SetView",
124:       "com.google.javascript.rhino.jstype.TemplateType",
125:       "com.google.javascript.rhino.jstype.NamedType",
126:       "com.google.common.collect.Iterators$14",
127:       "com.google.common.collect.Iterators$13",
128:       "com.google.javascript.rhino.InputId",
129:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
130:       "com.google.common.collect.Lists$Partition",
131:       "com.google.common.collect.Lists",
132:       "com.google.javascript.rhino.jstype.ParameterizedType",
133:       "com.google.javascript.rhino.Node$SideEffectFlags",
134:       "com.google.common.collect.UnmodifiableListIterator",
135:       "com.google.javascript.rhino.jstype.NullType",
136:       "com.google.common.collect.EmptyImmutableList$1",
137:       "com.google.common.collect.Lists$TransformingSequentialList",
138:       "com.google.javascript.rhino.ErrorReporter",
139:       "com.google.javascript.rhino.jstype.UnknownType",
140:       "com.google.javascript.rhino.jstype.ValueType",
141:       "com.google.javascript.rhino.Token",
142:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
143:       "com.google.javascript.rhino.jstype.StaticSourceFile",
144:       "com.google.javascript.rhino.jstype.BooleanType",
145:       "com.google.javascript.rhino.jstype.NoObjectType",
146:       "com.google.common.collect.AbstractIterator",
147:       "com.google.javascript.rhino.jstype.FunctionBuilder",
148:       "com.google.common.base.Joiner$MapJoiner",
149:       "com.google.common.collect.MapDifference",
150:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
151:       "com.google.javascript.rhino.jstype.FunctionType",
152:       "com.google.common.base.Preconditions",
153:       "com.google.common.collect.UnmodifiableIterator",
154:       "com.google.javascript.rhino.JSDocInfo",
155:       "com.google.common.collect.EmptyImmutableList",
156:       "com.google.common.base.Joiner$1",
157:       "com.google.common.base.Joiner$2",
158:       "com.google.common.collect.AbstractMultimap$WrappedList",
159:       "com.google.common.collect.ImmutableCollection",
160:       "com.google.javascript.rhino.Node$AncestorIterable",
161:       "com.google.javascript.rhino.jstype.IndexedType",
162:       "com.google.common.collect.AbstractMultimap$RandomAccessWrappedList",
163:       "com.google.common.collect.ImmutableEnumSet",
164:       "com.google.common.collect.Lists$RandomAccessListWrapper",
165:       "com.google.javascript.rhino.jstype.UnresolvedTypeExpression",
166:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
167:       "com.google.javascript.rhino.jstype.UnionType",
168:       "com.google.common.base.Objects",
169:       "com.google.javascript.rhino.Node$NumberNode",
170:       "com.google.common.collect.SingletonImmutableList",
171:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
172:       "com.google.javascript.rhino.jstype.StaticSlot",
173:       "com.google.common.collect.Iterators$6",
174:       "com.google.common.collect.BiMap",
175:       "com.google.common.collect.Iterators$7",
176:       "com.google.common.collect.AbstractSetMultimap",
177:       "com.google.common.collect.ImmutableSet",
178:       "com.google.common.base.Function",
179:       "com.google.common.collect.Lists$AbstractListWrapper",
180:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
181:       "com.google.common.collect.AbstractIndexedListIterator",
182:       "com.google.javascript.rhino.jstype.JSTypeRegistry$ResolveMode",
183:       "com.google.javascript.rhino.jstype.EnumType",
184:       "com.google.common.collect.Iterators$1",
185:       "com.google.common.collect.AbstractMultimap$SortedKeySet",
186:       "com.google.common.collect.Iterators$2",
187:       "com.google.common.collect.Iterators$3",
188:       "com.google.common.collect.Sets",
189:       "com.google.common.collect.ImmutableCollection$EmptyImmutableCollection",
190:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
191:       "com.google.javascript.rhino.Node$ObjectPropListItem",
192:       "com.google.common.collect.RegularImmutableList$1",
193:       "com.google.common.collect.Lists$StringAsImmutableList",
194:       "com.google.common.collect.Lists$2",
195:       "com.google.common.collect.AbstractMultimap$SortedAsMap",
196:       "com.google.common.collect.Lists$1",
197:       "com.google.javascript.rhino.jstype.StaticReference",
198:       "com.google.common.collect.Multiset",
199:       "com.google.common.collect.AbstractMultimap",
200:       "com.google.common.collect.Multimap",
201:       "com.google.common.collect.Iterators",
202:       "com.google.common.collect.ImmutableList",
203:       "com.google.javascript.rhino.jstype.StringType",
204:       "com.google.javascript.rhino.Node$AbstractPropListItem",
205:       "com.google.javascript.rhino.jstype.ObjectType$Property",
206:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
207:       "com.google.common.collect.AbstractMultimap$KeySet",
208:       "com.google.javascript.rhino.jstype.NoResolvedType",
209:       "com.google.javascript.rhino.jstype.JSTypeNative",
210:       "com.google.javascript.rhino.jstype.AllType",
211:       "com.google.common.collect.Maps",
212:       "com.google.common.collect.SetMultimap",
213:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
214:       "com.google.common.collect.Maps$EntryTransformer",
215:       "com.google.javascript.rhino.JSTypeExpression"
216:     );
217:   } 
218: 
219:   private static void resetClasses() {
220:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_144_tmp__ESTest_scaffolding.class.getClassLoader()); 
221: 
222:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
223:       "com.google.javascript.rhino.Node",
224:       "com.google.javascript.rhino.Node$NumberNode",
225:       "com.google.javascript.rhino.Node$StringNode",
226:       "com.google.javascript.rhino.Node$AbstractPropListItem",
227:       "com.google.javascript.rhino.Node$ObjectPropListItem",
228:       "com.google.javascript.rhino.Node$IntPropListItem",
229:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
230:       "com.google.javascript.rhino.Node$AncestorIterable",
231:       "com.google.javascript.rhino.Node$NodeMismatch",
232:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
233:       "com.google.javascript.rhino.Node$SideEffectFlags",
234:       "com.google.common.base.Preconditions",
235:       "com.google.javascript.rhino.SimpleErrorReporter",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.common.base.Joiner",
238:       "com.google.common.collect.Collections2",
239:       "com.google.common.base.Joiner$MapJoiner",
240:       "com.google.common.collect.Maps",
241:       "com.google.common.collect.AbstractMultimap",
242:       "com.google.common.collect.AbstractSetMultimap",
243:       "com.google.common.collect.LinkedHashMultimap",
244:       "com.google.common.collect.Sets",
245:       "com.google.common.collect.AbstractListMultimap",
246:       "com.google.common.collect.ArrayListMultimap",
247:       "com.google.javascript.rhino.jstype.JSTypeRegistry$ResolveMode",
248:       "com.google.javascript.rhino.jstype.JSType$1",
249:       "com.google.javascript.rhino.jstype.JSType",
250:       "com.google.javascript.rhino.jstype.ValueType",
251:       "com.google.javascript.rhino.jstype.BooleanType",
252:       "com.google.javascript.rhino.jstype.NullType",
253:       "com.google.javascript.rhino.jstype.NumberType",
254:       "com.google.javascript.rhino.jstype.StringType",
255:       "com.google.javascript.rhino.jstype.ObjectType",
256:       "com.google.javascript.rhino.jstype.UnknownType",
257:       "com.google.javascript.rhino.jstype.VoidType",
258:       "com.google.javascript.rhino.jstype.AllType",
259:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
260:       "com.google.javascript.rhino.jstype.FunctionType",
261:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
262:       "com.google.javascript.rhino.jstype.ArrowType",
263:       "com.google.common.collect.ImmutableCollection$EmptyImmutableCollection",
264:       "com.google.common.collect.ImmutableCollection",
265:       "com.google.common.collect.ImmutableList",
266:       "com.google.common.collect.UnmodifiableIterator",
267:       "com.google.common.collect.UnmodifiableListIterator",
268:       "com.google.common.collect.EmptyImmutableList$1",
269:       "com.google.common.collect.EmptyImmutableList",
270:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
271:       "com.google.javascript.rhino.jstype.InstanceObjectType",
272:       "com.google.javascript.rhino.jstype.ObjectType$Property",
273:       "com.google.common.collect.Lists",
274:       "com.google.javascript.rhino.jstype.NoObjectType",
275:       "com.google.javascript.rhino.jstype.NoType",
276:       "com.google.javascript.rhino.jstype.NoResolvedType",
277:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
278:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
279:       "com.google.javascript.rhino.jstype.UnionType",
280:       "com.google.common.collect.RegularImmutableList",
281:       "com.google.common.collect.Iterators$1",
282:       "com.google.common.collect.Iterators$2",
283:       "com.google.common.collect.Iterators",
284:       "com.google.javascript.rhino.jstype.FunctionBuilder",
285:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
286:       "com.google.javascript.rhino.JSDocInfo",
287:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
288:       "com.google.javascript.rhino.Token",
289:       "com.google.javascript.rhino.InputId",
290:       "com.google.javascript.rhino.jstype.EnumType",
291:       "com.google.javascript.rhino.jstype.EnumElementType",
292:       "com.google.javascript.rhino.jstype.ModificationVisitor",
293:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.NamedType",
296:       "com.google.javascript.rhino.Node$AncestorIterable$1",
297:       "com.google.common.collect.Multimaps$Values",
298:       "com.google.common.collect.AbstractMultimap$2",
299:       "com.google.common.collect.Multimaps$Entries",
300:       "com.google.common.collect.AbstractMultimap$4",
301:       "com.google.common.collect.AbstractMultimap$EntryIterator",
302:       "com.google.common.collect.Multimaps$Values$1",
303:       "com.google.common.collect.ImmutableSet",
304:       "com.google.common.collect.EmptyImmutableSet",
305:       "com.google.javascript.rhino.jstype.TernaryValue",
306:       "com.google.javascript.rhino.jstype.JSType$2",
307:       "com.google.javascript.rhino.jstype.JSType$TypePair",
308:       "com.google.javascript.rhino.jstype.ParameterizedType",
309:       "com.google.common.collect.AbstractIndexedListIterator",
310:       "com.google.common.collect.Iterators$12",
311:       "com.google.javascript.rhino.JSTypeExpression",
312:       "com.google.javascript.rhino.jstype.JSTypeNative",
313:       "com.google.common.base.Objects"
314:     );
315:   }
316: }

[MASTER] 00:57:45.737 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(99);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(54, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(49, Node.DIRECT_EVAL);
assertNotNull(node0);
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertEquals(99, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertNull(node0.getSourceFileName());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isFromExterns());
assertFalse(node0.isComma());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isGetProp());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isFor());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(54, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(49, Node.DIRECT_EVAL);
assertNotNull(iterable0);
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertEquals(99, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertNull(node0.getSourceFileName());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isFromExterns());
assertFalse(node0.isComma());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isGetProp());
assertFalse(node0.isCall());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isFor());



entry: sources/closure-16/build/classes
entry: sources/closure-16/lib/args4j.jar
entry: sources/closure-16/lib/guava.jar
entry: sources/closure-16/lib/json.jar
entry: sources/closure-16/lib/jsr305.jar
entry: sources/closure-16/lib/protobuf-java.jar
entry: sources/closure-16/build/lib/rhino.jar
entry: sources/closure-16/lib/ant.jar
** CP: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar
* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: com.google.javascript.rhino.head.IdScriptableObject
* Starting Client-0
* Connecting to master process on port 10491
* Analyzing classpath: 
  - sources/closure-16/build/classes
  - sources/closure-16/lib/args4j.jar
  - sources/closure-16/lib/guava.jar
  - sources/closure-16/lib/json.jar
  - sources/closure-16/lib/jsr305.jar
  - sources/closure-16/lib/protobuf-java.jar
  - sources/closure-16/build/lib/rhino.jar
  - sources/closure-16/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.head.IdScriptableObject
* Test criterion:
  - Branch Coverage
* Total number of test goals for DYNAMOSA: 251
* Using seed 1564036304773
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 87 / 251
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2749003984063745
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.4342629482071713
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.44223107569721115
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.4940239043824701
[MASTER] 08:33:28.336 [logback-1] WARN  TestUsageChecker - class com.google.javascript.rhino.head.ContextFactory$1GlobalSetterImpl looks like an anonymous class, ignoring it (although reflection says false) GlobalSetterImpl
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5059760956175299
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5219123505976095
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5258964143426295
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5378486055776892
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.545816733067729
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.549800796812749
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.549800796812749
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5577689243027888
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5737051792828686
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5816733067729084
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5816733067729084
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5896414342629482
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5896414342629482
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5896414342629482
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5896414342629482
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5896414342629482
* Search finished after 302s and 114 generations, 32760 statements, best individual has fitness: 103.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5896414342629482
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 59%
* Total number of goals: 251
* Number of covered goals: 148
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5896414342629482
* Generated 31 tests with total length 99
* Resulting test suite's coverage: 59%
* Generating assertions
[MASTER] 08:37:59.261 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6917833333333333% of time used, but only 9/31 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 4%
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5896414342629482
* Compiling and checking tests
[MASTER] 08:38:26.402 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 08:38:26.403 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getCurrentContext();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
IdFunctionObject idFunctionObject0 = new IdFunctionObject(importerTopLevel0, importerTopLevel0, 170, "language version", 458754, importerTopLevel0);
IdScriptableObject.incompatibleCallError(idFunctionObject0);

[MASTER] 08:38:30.861 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 08:38:30.861 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getContext();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
importerTopLevel0.getAttributes("importClass");

[MASTER] 08:38:34.863 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 08:38:34.864 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getContext();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
importerTopLevel0.setInstanceIdAttributes(150, 16);

[MASTER] 08:38:41.795 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 08:38:41.796 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getCurrentContext();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
nativeArray0.setInstanceIdValue(100, importerTopLevel0);

[MASTER] 08:38:44.421 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 08:38:44.422 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getContext();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
importerTopLevel0.getInstanceIdValue(6);

[MASTER] 08:38:46.261 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 08:38:46.262 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = new Context();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
Object object0 = importerTopLevel0.defaultGet("language version");
assertNotNull(object0);


[MASTER] 08:38:48.494 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 08:38:48.494 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ContextFactory contextFactory0 = ContextFactory.getGlobal();
Context context0 = new Context(contextFactory0);
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
importerTopLevel0.initPrototypeValue(628, "error reporter", contextFactory0, 8);

[MASTER] 08:38:51.728 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 08:38:51.728 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getContext();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
Object[] objectArray0 = importerTopLevel0.getIds(true);
assertEquals(59, objectArray0.length);


[MASTER] 08:38:53.159 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 08:38:53.161 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getCurrentContext();
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isSealed());
assertEquals(0, context0.getOptimizationLevel());
assertTrue(context0.isGeneratingSource());
assertNotNull(context0);
assertEquals(130, Context.VERSION_1_3);
assertEquals(180, Context.VERSION_1_8);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(140, Context.VERSION_1_4);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(100, Context.VERSION_1_0);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertFalse(context0.generateObserverCount);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(150, Context.VERSION_1_5);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(110, Context.VERSION_1_1);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(160, Context.VERSION_1_6);
assertEquals(120, Context.VERSION_1_2);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(170, Context.VERSION_1_7);

ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isSealed());
assertEquals(0, context0.getOptimizationLevel());
assertTrue(context0.isGeneratingSource());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertFalse(importerTopLevel0.isSealed());
assertTrue(importerTopLevel0.hasPrototypeMap());
assertFalse(importerTopLevel0.isEmpty());
assertEquals("global", importerTopLevel0.getClassName());
assertEquals("object", importerTopLevel0.getTypeOf());
assertTrue(importerTopLevel0.isExtensible());
assertNotNull(importerTopLevel0);
assertEquals(130, Context.VERSION_1_3);
assertEquals(180, Context.VERSION_1_8);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(140, Context.VERSION_1_4);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(100, Context.VERSION_1_0);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertFalse(context0.generateObserverCount);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(150, Context.VERSION_1_5);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(110, Context.VERSION_1_1);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(160, Context.VERSION_1_6);
assertEquals(120, Context.VERSION_1_2);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(170, Context.VERSION_1_7);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);

importerTopLevel0.defaultPut("error reporter", context0);
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isSealed());
assertEquals(0, context0.getOptimizationLevel());
assertTrue(context0.isGeneratingSource());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertFalse(importerTopLevel0.isSealed());
assertTrue(importerTopLevel0.hasPrototypeMap());
assertFalse(importerTopLevel0.isEmpty());
assertEquals("global", importerTopLevel0.getClassName());
assertEquals("object", importerTopLevel0.getTypeOf());
assertTrue(importerTopLevel0.isExtensible());
assertEquals(130, Context.VERSION_1_3);
assertEquals(180, Context.VERSION_1_8);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(140, Context.VERSION_1_4);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(100, Context.VERSION_1_0);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertFalse(context0.generateObserverCount);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(150, Context.VERSION_1_5);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(110, Context.VERSION_1_1);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(160, Context.VERSION_1_6);
assertEquals(120, Context.VERSION_1_2);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(170, Context.VERSION_1_7);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);


[MASTER] 08:38:55.325 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 08:38:55.327 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getCurrentContext();
assertEquals(0, context0.getInstructionObserverThreshold());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isSealed());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(context0.isGeneratingDebugChanged());
assertNotNull(context0);
assertEquals(150, Context.VERSION_1_5);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(100, Context.VERSION_1_0);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(120, Context.VERSION_1_2);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(110, Context.VERSION_1_1);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(180, Context.VERSION_1_8);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(140, Context.VERSION_1_4);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertFalse(context0.generateObserverCount);
assertEquals(170, Context.VERSION_1_7);
assertEquals(130, Context.VERSION_1_3);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(9, Context.FEATURE_STRICT_EVAL);

NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
assertEquals(0, context0.getInstructionObserverThreshold());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isSealed());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals("object", nativeArray0.getTypeOf());
assertFalse(nativeArray0.hasPrototypeMap());
assertEquals(0L, nativeArray0.jsGet_length());
assertFalse(nativeArray0.isSealed());
assertTrue(nativeArray0.isExtensible());
assertEquals(0L, nativeArray0.getLength());
assertFalse(nativeArray0.avoidObjectDetection());
assertEquals("Array", nativeArray0.getClassName());
assertTrue(nativeArray0.isEmpty());
assertNotNull(nativeArray0);
assertEquals(150, Context.VERSION_1_5);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(100, Context.VERSION_1_0);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(120, Context.VERSION_1_2);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(110, Context.VERSION_1_1);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(180, Context.VERSION_1_8);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(140, Context.VERSION_1_4);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertFalse(context0.generateObserverCount);
assertEquals(170, Context.VERSION_1_7);
assertEquals(130, Context.VERSION_1_3);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(0, ScriptableObject.EMPTY);

nativeArray0.activatePrototypeMap((-415));

[MASTER] 08:38:58.284 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 08:38:58.320 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getCurrentContext();
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isSealed());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertNotNull(context0);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(120, Context.VERSION_1_2);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(160, Context.VERSION_1_6);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(110, Context.VERSION_1_1);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(150, Context.VERSION_1_5);
assertEquals(180, Context.VERSION_1_8);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(170, Context.VERSION_1_7);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(140, Context.VERSION_1_4);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(100, Context.VERSION_1_0);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertFalse(context0.generateObserverCount);

ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isSealed());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals("object", importerTopLevel0.getTypeOf());
assertFalse(importerTopLevel0.isSealed());
assertTrue(importerTopLevel0.isExtensible());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertFalse(importerTopLevel0.isEmpty());
assertTrue(importerTopLevel0.hasPrototypeMap());
assertEquals("global", importerTopLevel0.getClassName());
assertNotNull(importerTopLevel0);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(120, Context.VERSION_1_2);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(160, Context.VERSION_1_6);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(110, Context.VERSION_1_1);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(150, Context.VERSION_1_5);
assertEquals(180, Context.VERSION_1_8);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(170, Context.VERSION_1_7);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(140, Context.VERSION_1_4);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(100, Context.VERSION_1_0);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertFalse(context0.generateObserverCount);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(0, ScriptableObject.EMPTY);

importerTopLevel0.defineOwnProperty(context0, importerTopLevel0, importerTopLevel0);
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isSealed());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals("object", importerTopLevel0.getTypeOf());
assertFalse(importerTopLevel0.isSealed());
assertTrue(importerTopLevel0.isExtensible());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertFalse(importerTopLevel0.isEmpty());
assertTrue(importerTopLevel0.hasPrototypeMap());
assertEquals("global", importerTopLevel0.getClassName());
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(120, Context.VERSION_1_2);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(160, Context.VERSION_1_6);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(110, Context.VERSION_1_1);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(150, Context.VERSION_1_5);
assertEquals(180, Context.VERSION_1_8);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(170, Context.VERSION_1_7);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(140, Context.VERSION_1_4);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(100, Context.VERSION_1_0);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertFalse(context0.generateObserverCount);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(0, ScriptableObject.EMPTY);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 4
* Writing tests to file
* Writing JUnit test case 'IdScriptableObject_ESTest' to results/evosuite5/closure-16-com.google.javascript.rhino.head.IdScriptableObject-5
* Done!

* Computation finished

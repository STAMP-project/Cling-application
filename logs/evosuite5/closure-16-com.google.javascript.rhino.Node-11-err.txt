[MASTER] 00:44:37.908 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 00:51:39.122 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_117_1565736698914/com/google/javascript/rhino/Node_117_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_117_1565736698914/com/google/javascript/rhino/Node_117_tmp__ESTest_scaffolding.java]]
[MASTER] 00:51:39.130 [logback-2] ERROR JUnitAnalyzer - Classpath: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar:/home/pderakhshanfar/botsing-integration-experiment/tools/evosuite.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/build/classes:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/args4j.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/guava.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/json.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/jsr305.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/protobuf-java.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/build/lib/rhino.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/ant.jar
[MASTER] 00:51:39.132 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/botsing-integration-experiment/tools/evosuite.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/build/classes:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/args4j.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/guava.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/json.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/jsr305.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/protobuf-java.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/build/lib/rhino.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/ant.jar
[MASTER] 00:51:39.146 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 235
[MASTER] 00:51:39.170 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_117_1565736698914/com/google/javascript/rhino/Node_117_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 13 22:51:38 GMT 2019
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
16: public class Node_117_tmp__ESTest extends Node_117_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(110);
21:       assertNotNull(node0);
22:       assertFalse(node0.isBlock());
23:       assertFalse(node0.isAdd());
24:       assertFalse(node0.isNew());
25:       assertFalse(node0.isWhile());
26:       assertFalse(node0.isDo());
27:       assertFalse(node0.isContinue());
28:       assertFalse(node0.isCall());
29:       assertFalse(node0.isVar());
30:       assertFalse(node0.hasMoreThanOneChild());
31:       assertFalse(node0.isLabel());
32:       assertFalse(node0.isNull());
33:       assertFalse(node0.isSetterDef());
34:       assertEquals(110, node0.getType());
35:       assertEquals((-1), node0.getLineno());
36:       assertFalse(node0.isName());
37:       assertFalse(node0.isAssignAdd());
38:       assertFalse(node0.isOr());
39:       assertNull(node0.getSourceFileName());
40:       assertFalse(node0.isScript());
41:       assertFalse(node0.hasOneChild());
42:       assertFalse(node0.isTry());
43:       assertFalse(node0.isDefaultCase());
44:       assertFalse(node0.isCatch());
45:       assertFalse(node0.isFor());
46:       assertFalse(node0.isArrayLit());
47:       assertFalse(node0.isInstanceOf());
48:       assertEquals(0, node0.getChildCount());
49:       assertFalse(node0.isRegExp());
50:       assertFalse(node0.isWith());
51:       assertFalse(node0.isParamList());
52:       assertFalse(node0.isThis());
53:       assertFalse(node0.isLabelName());
54:       assertFalse(node0.isStringKey());
55:       assertFalse(node0.isCase());
56:       assertFalse(node0.isGetterDef());
57:       assertFalse(node0.isNumber());
58:       assertEquals((-1), node0.getCharno());
59:       assertFalse(node0.isInc());
60:       assertFalse(node0.isThrow());
61:       assertFalse(node0.isHook());
62:       assertFalse(node0.isFalse());
63:       assertFalse(node0.isNE());
64:       assertFalse(node0.isBreak());
65:       assertFalse(node0.isDelProp());
66:       assertFalse(node0.isIf());
67:       assertFalse(node0.isEmpty());
68:       assertFalse(node0.isIn());
69:       assertFalse(node0.isDebugger());
70:       assertFalse(node0.isFunction());
71:       assertFalse(node0.isTrue());
72:       assertFalse(node0.isVoid());
73:       assertFalse(node0.isExprResult());
74:       assertFalse(node0.isGetElem());
75:       assertFalse(node0.isAssign());
76:       assertFalse(node0.isDec());
77:       assertFalse(node0.isTypeOf());
78:       assertFalse(node0.isFromExterns());
79:       assertFalse(node0.isComma());
80:       assertEquals((-1), node0.getSourcePosition());
81:       assertFalse(node0.hasChildren());
82:       assertFalse(node0.isGetProp());
83:       assertFalse(node0.isReturn());
84:       assertFalse(node0.isObjectLit());
85:       assertFalse(node0.isAnd());
86:       assertFalse(node0.isString());
87:       assertTrue(node0.isSwitch());
88:       assertFalse(node0.isNot());
89:       assertEquals(8, Node.FLAG_NO_THROWS);
90:       assertEquals(39, Node.EMPTY_BLOCK);
91:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
92:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
93:       assertEquals(48, Node.DIRECTIVES);
94:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
95:       assertEquals(16, Node.SOURCENAME_PROP);
96:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
97:       assertEquals(52, Node.LENGTH);
98:       assertEquals(36, Node.QUOTED_PROP);
99:       assertEquals(41, Node.BRACELESS_TYPE);
100:       assertEquals(50, Node.FREE_CALL);
101:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
102:       assertEquals(54, Node.LAST_PROP);
103:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
104:       assertEquals(49, Node.DIRECT_EVAL);
105:       assertEquals(1, Node.DECR_FLAG);
106:       assertEquals(4095, Node.COLUMN_MASK);
107:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
108:       assertEquals(12, Node.COLUMN_BITS);
109:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
110:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
111:       assertEquals(37, Node.OPT_ARG_NAME);
112:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
113:       assertEquals(32, Node.INCRDECR_PROP);
114:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
115:       assertEquals(29, Node.JSDOC_INFO_PROP);
116:       assertEquals(46, Node.IS_NAMESPACE);
117:       assertEquals(51, Node.STATIC_SOURCE_FILE);
118:       assertEquals(35, Node.PARENTHESIZED_PROP);
119:       assertEquals(43, Node.IS_CONSTANT_NAME);
120:       assertEquals(53, Node.INPUT_ID);
121:       assertEquals(54, Node.SLASH_V);
122:       assertEquals(15, Node.NO_SIDE_EFFECTS);
123:       assertEquals(40, Node.ORIGINALNAME_PROP);
124:       assertEquals(47, Node.IS_DISPATCHER);
125:       assertEquals(2, Node.POST_FLAG);
126:       assertEquals(30, Node.VAR_ARGS_NAME);
127:       
128:       Iterable<Node> iterable0 = node0.children();
129:       assertNotNull(iterable0);
130:       assertFalse(node0.isBlock());
131:       assertFalse(node0.isAdd());
132:       assertFalse(node0.isNew());
133:       assertFalse(node0.isWhile());
134:       assertFalse(node0.isDo());
135:       assertFalse(node0.isContinue());
136:       assertFalse(node0.isCall());
137:       assertFalse(node0.isVar());
138:       assertFalse(node0.hasMoreThanOneChild());
139:       assertFalse(node0.isLabel());
140:       assertFalse(node0.isNull());
141:       assertFalse(node0.isSetterDef());
142:       assertEquals(110, node0.getType());
143:       assertEquals((-1), node0.getLineno());
144:       assertFalse(node0.isName());
145:       assertFalse(node0.isAssignAdd());
146:       assertFalse(node0.isOr());
147:       assertNull(node0.getSourceFileName());
148:       assertFalse(node0.isScript());
149:       assertFalse(node0.hasOneChild());
150:       assertFalse(node0.isTry());
151:       assertFalse(node0.isDefaultCase());
152:       assertFalse(node0.isCatch());
153:       assertFalse(node0.isFor());
154:       assertFalse(node0.isArrayLit());
155:       assertFalse(node0.isInstanceOf());
156:       assertEquals(0, node0.getChildCount());
157:       assertFalse(node0.isRegExp());
158:       assertFalse(node0.isWith());
159:       assertFalse(node0.isParamList());
160:       assertFalse(node0.isThis());
161:       assertFalse(node0.isLabelName());
162:       assertFalse(node0.isStringKey());
163:       assertFalse(node0.isCase());
164:       assertFalse(node0.isGetterDef());
165:       assertFalse(node0.isNumber());
166:       assertEquals((-1), node0.getCharno());
167:       assertFalse(node0.isInc());
168:       assertFalse(node0.isThrow());
169:       assertFalse(node0.isHook());
170:       assertFalse(node0.isFalse());
171:       assertFalse(node0.isNE());
172:       assertFalse(node0.isBreak());
173:       assertFalse(node0.isDelProp());
174:       assertFalse(node0.isIf());
175:       assertFalse(node0.isEmpty());
176:       assertFalse(node0.isIn());
177:       assertFalse(node0.isDebugger());
178:       assertFalse(node0.isFunction());
179:       assertFalse(node0.isTrue());
180:       assertFalse(node0.isVoid());
181:       assertFalse(node0.isExprResult());
182:       assertFalse(node0.isGetElem());
183:       assertFalse(node0.isAssign());
184:       assertFalse(node0.isDec());
185:       assertFalse(node0.isTypeOf());
186:       assertFalse(node0.isFromExterns());
187:       assertFalse(node0.isComma());
188:       assertEquals((-1), node0.getSourcePosition());
189:       assertFalse(node0.hasChildren());
190:       assertFalse(node0.isGetProp());
191:       assertFalse(node0.isReturn());
192:       assertFalse(node0.isObjectLit());
193:       assertFalse(node0.isAnd());
194:       assertFalse(node0.isString());
195:       assertTrue(node0.isSwitch());
196:       assertFalse(node0.isNot());
197:       assertEquals(8, Node.FLAG_NO_THROWS);
198:       assertEquals(39, Node.EMPTY_BLOCK);
199:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
200:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
201:       assertEquals(48, Node.DIRECTIVES);
202:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
203:       assertEquals(16, Node.SOURCENAME_PROP);
204:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
205:       assertEquals(52, Node.LENGTH);
206:       assertEquals(36, Node.QUOTED_PROP);
207:       assertEquals(41, Node.BRACELESS_TYPE);
208:       assertEquals(50, Node.FREE_CALL);
209:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
210:       assertEquals(54, Node.LAST_PROP);
211:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
212:       assertEquals(49, Node.DIRECT_EVAL);
213:       assertEquals(1, Node.DECR_FLAG);
214:       assertEquals(4095, Node.COLUMN_MASK);
215:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
216:       assertEquals(12, Node.COLUMN_BITS);
217:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
218:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
219:       assertEquals(37, Node.OPT_ARG_NAME);
220:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
221:       assertEquals(32, Node.INCRDECR_PROP);
222:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
223:       assertEquals(29, Node.JSDOC_INFO_PROP);
224:       assertEquals(46, Node.IS_NAMESPACE);
225:       assertEquals(51, Node.STATIC_SOURCE_FILE);
226:       assertEquals(35, Node.PARENTHESIZED_PROP);
227:       assertEquals(43, Node.IS_CONSTANT_NAME);
228:       assertEquals(53, Node.INPUT_ID);
229:       assertEquals(54, Node.SLASH_V);
230:       assertEquals(15, Node.NO_SIDE_EFFECTS);
231:       assertEquals(40, Node.ORIGINALNAME_PROP);
232:       assertEquals(47, Node.IS_DISPATCHER);
233:       assertEquals(2, Node.POST_FLAG);
234:       assertEquals(30, Node.VAR_ARGS_NAME);
235:       assertFalse(iterable0.contains(node0));
236:   }
237: }
RegularFileObject[/tmp/EvoSuite_117_1565736698914/com/google/javascript/rhino/Node_117_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 13 22:51:38 GMT 2019
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class Node_117_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/botsing-integration-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_117_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.common.collect.ArrayListMultimap",
82:       "com.google.javascript.rhino.jstype.NoType",
83:       "com.google.common.collect.ListMultimap",
84:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
85:       "com.google.javascript.rhino.jstype.ArrowType",
86:       "com.google.javascript.rhino.SimpleErrorReporter",
87:       "com.google.common.collect.AbstractMultimap$WrappedCollection",
88:       "com.google.common.collect.Lists$RandomAccessPartition",
89:       "com.google.common.collect.Collections2",
90:       "com.google.javascript.rhino.jstype.NumberType",
91:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
92:       "com.google.common.collect.PeekingIterator",
93:       "com.google.common.collect.RegularImmutableList",
94:       "com.google.javascript.rhino.jstype.StaticScope",
95:       "com.google.javascript.rhino.jstype.InstanceObjectType",
96:       "com.google.common.collect.Lists$TransformingRandomAccessList",
97:       "com.google.javascript.rhino.Node$PropListItem",
98:       "com.google.common.collect.Sets$2",
99:       "com.google.javascript.rhino.Node$IntPropListItem",
100:       "com.google.common.collect.Maps$KeySet",
101:       "com.google.common.collect.Sets$3",
102:       "com.google.common.collect.LinkedHashMultimap",
103:       "com.google.javascript.rhino.Node",
104:       "com.google.javascript.rhino.jstype.ObjectType",
105:       "com.google.common.collect.Sets$1",
106:       "com.google.javascript.rhino.Node$NodeMismatch",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.javascript.rhino.jstype.ModificationVisitor",
109:       "com.google.javascript.rhino.Node$AncestorIterable$1",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.Iterators$11",
112:       "com.google.javascript.rhino.jstype.JSType$1",
113:       "com.google.common.base.Predicate",
114:       "com.google.common.collect.AbstractMultimap$AsMap",
115:       "com.google.javascript.rhino.jstype.VoidType",
116:       "com.google.common.base.Joiner",
117:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
118:       "com.google.common.collect.AbstractListMultimap",
119:       "com.google.javascript.rhino.jstype.JSType",
120:       "com.google.common.collect.ImmutableAsList",
121:       "com.google.javascript.rhino.Node$StringNode",
122:       "com.google.javascript.rhino.jstype.ProxyObjectType",
123:       "com.google.common.collect.Sets$SetView",
124:       "com.google.javascript.rhino.jstype.TemplateType",
125:       "com.google.javascript.rhino.jstype.NamedType",
126:       "com.google.common.collect.Iterators$14",
127:       "com.google.common.collect.Iterators$13",
128:       "com.google.javascript.rhino.InputId",
129:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
130:       "com.google.common.collect.Lists$Partition",
131:       "com.google.common.collect.Lists",
132:       "com.google.javascript.rhino.jstype.ParameterizedType",
133:       "com.google.javascript.rhino.Node$SideEffectFlags",
134:       "com.google.common.collect.UnmodifiableListIterator",
135:       "com.google.javascript.rhino.jstype.NullType",
136:       "com.google.common.collect.EmptyImmutableList$1",
137:       "com.google.common.collect.Lists$TransformingSequentialList",
138:       "com.google.javascript.rhino.ErrorReporter",
139:       "com.google.javascript.rhino.jstype.UnknownType",
140:       "com.google.javascript.rhino.jstype.ValueType",
141:       "com.google.javascript.rhino.Token",
142:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
143:       "com.google.javascript.rhino.jstype.StaticSourceFile",
144:       "com.google.javascript.rhino.jstype.BooleanType",
145:       "com.google.javascript.rhino.jstype.NoObjectType",
146:       "com.google.common.collect.AbstractIterator",
147:       "com.google.javascript.rhino.jstype.FunctionBuilder",
148:       "com.google.common.base.Joiner$MapJoiner",
149:       "com.google.javascript.rhino.jstype.JSType$TypePair",
150:       "com.google.common.collect.MapDifference",
151:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
152:       "com.google.javascript.rhino.jstype.FunctionType",
153:       "com.google.common.base.Preconditions",
154:       "com.google.common.collect.UnmodifiableIterator",
155:       "com.google.javascript.rhino.JSDocInfo",
156:       "com.google.common.collect.EmptyImmutableList",
157:       "com.google.common.base.Joiner$1",
158:       "com.google.common.base.Joiner$2",
159:       "com.google.common.collect.AbstractMultimap$WrappedList",
160:       "com.google.common.collect.ImmutableCollection",
161:       "com.google.javascript.rhino.jstype.TernaryValue",
162:       "com.google.javascript.rhino.Node$AncestorIterable",
163:       "com.google.javascript.rhino.jstype.IndexedType",
164:       "com.google.common.collect.AbstractMultimap$RandomAccessWrappedList",
165:       "com.google.common.collect.ImmutableEnumSet",
166:       "com.google.common.collect.Lists$RandomAccessListWrapper",
167:       "com.google.javascript.rhino.jstype.UnresolvedTypeExpression",
168:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
169:       "com.google.javascript.rhino.jstype.EnumElementType",
170:       "com.google.javascript.rhino.jstype.UnionType",
171:       "com.google.common.base.Objects",
172:       "com.google.javascript.rhino.Node$NumberNode",
173:       "com.google.common.collect.SingletonImmutableList",
174:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
175:       "com.google.javascript.rhino.jstype.StaticSlot",
176:       "com.google.common.collect.Iterators$6",
177:       "com.google.common.collect.BiMap",
178:       "com.google.common.collect.Iterators$7",
179:       "com.google.common.collect.AbstractSetMultimap",
180:       "com.google.common.base.Function",
181:       "com.google.common.collect.ImmutableSet",
182:       "com.google.common.collect.Lists$AbstractListWrapper",
183:       "com.google.common.collect.AbstractIndexedListIterator",
184:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
185:       "com.google.javascript.rhino.jstype.JSTypeRegistry$ResolveMode",
186:       "com.google.javascript.rhino.jstype.EnumType",
187:       "com.google.common.collect.Iterators$1",
188:       "com.google.common.collect.AbstractMultimap$SortedKeySet",
189:       "com.google.common.collect.Iterators$2",
190:       "com.google.common.collect.Iterators$3",
191:       "com.google.common.collect.Sets",
192:       "com.google.common.collect.ImmutableCollection$EmptyImmutableCollection",
193:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
194:       "com.google.javascript.rhino.Node$ObjectPropListItem",
195:       "com.google.common.collect.RegularImmutableList$1",
196:       "com.google.common.collect.Lists$StringAsImmutableList",
197:       "com.google.common.collect.Lists$2",
198:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
199:       "com.google.common.collect.AbstractMultimap$SortedAsMap",
200:       "com.google.common.collect.Lists$1",
201:       "com.google.javascript.rhino.jstype.StaticReference",
202:       "com.google.common.collect.Multiset",
203:       "com.google.common.collect.AbstractMultimap",
204:       "com.google.common.collect.Multimap",
205:       "com.google.common.collect.Iterators",
206:       "com.google.common.collect.ImmutableList",
207:       "com.google.javascript.rhino.jstype.StringType",
208:       "com.google.javascript.rhino.Node$AbstractPropListItem",
209:       "com.google.javascript.rhino.jstype.ObjectType$Property",
210:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
211:       "com.google.common.collect.AbstractMultimap$KeySet",
212:       "com.google.javascript.rhino.jstype.Visitor",
213:       "com.google.javascript.rhino.jstype.NoResolvedType",
214:       "com.google.javascript.rhino.jstype.JSTypeNative",
215:       "com.google.javascript.rhino.jstype.AllType",
216:       "com.google.common.collect.Maps",
217:       "com.google.common.collect.SetMultimap",
218:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
219:       "com.google.common.collect.Maps$EntryTransformer"
220:     );
221:   } 
222: 
223:   private static void resetClasses() {
224:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_117_tmp__ESTest_scaffolding.class.getClassLoader()); 
225: 
226:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
227:       "com.google.javascript.rhino.Node",
228:       "com.google.javascript.rhino.Node$NumberNode",
229:       "com.google.javascript.rhino.Node$StringNode",
230:       "com.google.javascript.rhino.Node$AbstractPropListItem",
231:       "com.google.javascript.rhino.Node$ObjectPropListItem",
232:       "com.google.javascript.rhino.Node$IntPropListItem",
233:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
234:       "com.google.javascript.rhino.Node$AncestorIterable",
235:       "com.google.javascript.rhino.Node$NodeMismatch",
236:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
237:       "com.google.javascript.rhino.Node$SideEffectFlags",
238:       "com.google.common.base.Preconditions",
239:       "com.google.javascript.rhino.SimpleErrorReporter",
240:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
241:       "com.google.common.base.Joiner",
242:       "com.google.common.collect.Collections2",
243:       "com.google.common.base.Joiner$MapJoiner",
244:       "com.google.common.collect.Maps",
245:       "com.google.common.collect.AbstractMultimap",
246:       "com.google.common.collect.AbstractSetMultimap",
247:       "com.google.common.collect.LinkedHashMultimap",
248:       "com.google.common.collect.Sets",
249:       "com.google.common.collect.AbstractListMultimap",
250:       "com.google.common.collect.ArrayListMultimap",
251:       "com.google.javascript.rhino.jstype.JSTypeRegistry$ResolveMode",
252:       "com.google.javascript.rhino.jstype.JSType$1",
253:       "com.google.javascript.rhino.jstype.JSType",
254:       "com.google.javascript.rhino.jstype.ValueType",
255:       "com.google.javascript.rhino.jstype.BooleanType",
256:       "com.google.javascript.rhino.jstype.NullType",
257:       "com.google.javascript.rhino.jstype.NumberType",
258:       "com.google.javascript.rhino.jstype.StringType",
259:       "com.google.javascript.rhino.jstype.ObjectType",
260:       "com.google.javascript.rhino.jstype.UnknownType",
261:       "com.google.javascript.rhino.jstype.VoidType",
262:       "com.google.javascript.rhino.jstype.AllType",
263:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
264:       "com.google.javascript.rhino.jstype.FunctionType",
265:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
266:       "com.google.javascript.rhino.jstype.ArrowType",
267:       "com.google.common.collect.ImmutableCollection$EmptyImmutableCollection",
268:       "com.google.common.collect.ImmutableCollection",
269:       "com.google.common.collect.ImmutableList",
270:       "com.google.common.collect.UnmodifiableIterator",
271:       "com.google.common.collect.UnmodifiableListIterator",
272:       "com.google.common.collect.EmptyImmutableList$1",
273:       "com.google.common.collect.EmptyImmutableList",
274:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
275:       "com.google.javascript.rhino.jstype.InstanceObjectType",
276:       "com.google.javascript.rhino.jstype.ObjectType$Property",
277:       "com.google.common.collect.Lists",
278:       "com.google.javascript.rhino.jstype.NoObjectType",
279:       "com.google.javascript.rhino.jstype.NoType",
280:       "com.google.javascript.rhino.jstype.NoResolvedType",
281:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
282:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
283:       "com.google.javascript.rhino.jstype.UnionType",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.Iterators$1",
286:       "com.google.common.collect.Iterators$2",
287:       "com.google.common.collect.Iterators",
288:       "com.google.javascript.rhino.jstype.FunctionBuilder",
289:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
290:       "com.google.javascript.rhino.jstype.ModificationVisitor",
291:       "com.google.javascript.rhino.Token",
292:       "com.google.javascript.rhino.jstype.EnumType",
293:       "com.google.javascript.rhino.jstype.EnumElementType",
294:       "com.google.javascript.rhino.JSDocInfo",
295:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
296:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
297:       "com.google.javascript.rhino.InputId",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.NamedType",
300:       "com.google.javascript.rhino.Node$AncestorIterable$1",
301:       "com.google.javascript.rhino.JSTypeExpression",
302:       "com.google.common.collect.AbstractIndexedListIterator",
303:       "com.google.common.collect.Iterators$12",
304:       "com.google.javascript.rhino.jstype.ParameterizedType",
305:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
306:       "com.google.javascript.rhino.jstype.TernaryValue",
307:       "com.google.javascript.rhino.jstype.JSType$2",
308:       "com.google.javascript.rhino.jstype.JSType$TypePair",
309:       "com.google.common.collect.Multimaps$Values",
310:       "com.google.common.collect.AbstractMultimap$2",
311:       "com.google.common.collect.Multimaps$Entries",
312:       "com.google.common.collect.AbstractMultimap$4",
313:       "com.google.common.collect.AbstractMultimap$EntryIterator",
314:       "com.google.common.collect.Multimaps$Values$1",
315:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
316:       "com.google.common.collect.ImmutableSet",
317:       "com.google.common.collect.EmptyImmutableSet",
318:       "com.google.javascript.rhino.JSDocInfo$Marker",
319:       "com.google.common.collect.AbstractMultimap$WrappedCollection",
320:       "com.google.common.collect.AbstractMultimap$WrappedList",
321:       "com.google.common.collect.AbstractMultimap$RandomAccessWrappedList",
322:       "com.google.common.collect.AbstractMultimap$WrappedCollection$WrappedIterator",
323:       "com.google.javascript.rhino.jstype.JSTypeNative",
324:       "com.google.common.base.Objects"
325:     );
326:   }
327: }

[MASTER] 00:51:39.176 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(110);
assertNotNull(node0);
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(110, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertNull(node0.getSourceFileName());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFromExterns());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertTrue(node0.isSwitch());
assertFalse(node0.isNot());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(54, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(110, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertNull(node0.getSourceFileName());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isNE());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFromExterns());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertTrue(node0.isSwitch());
assertFalse(node0.isNot());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(54, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(iterable0.contains(node0));



entry: sources/closure-16/build/classes
entry: sources/closure-16/lib/args4j.jar
entry: sources/closure-16/lib/guava.jar
entry: sources/closure-16/lib/json.jar
entry: sources/closure-16/lib/jsr305.jar
entry: sources/closure-16/lib/protobuf-java.jar
entry: sources/closure-16/build/lib/rhino.jar
entry: sources/closure-16/lib/ant.jar
** CP: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar
* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: com.google.javascript.rhino.head.Context
* Starting Client-0
* Connecting to master process on port 14677
* Analyzing classpath: 
  - sources/closure-16/build/classes
  - sources/closure-16/lib/args4j.jar
  - sources/closure-16/lib/guava.jar
  - sources/closure-16/lib/json.jar
  - sources/closure-16/lib/jsr305.jar
  - sources/closure-16/lib/protobuf-java.jar
  - sources/closure-16/build/lib/rhino.jar
  - sources/closure-16/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.head.Context
* Test criterion:
  - Branch Coverage
* Total number of test goals for DYNAMOSA: 397
* Using seed 1564039568504
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 249 / 397
[MASTER] 09:26:30.379 [logback-1] WARN  TestUsageChecker - class com.google.javascript.rhino.head.ContextFactory$1GlobalSetterImpl looks like an anonymous class, ignoring it (although reflection says false) GlobalSetterImpl
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.345088161209068
[MASTER] 09:26:34.870 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.head.NativeJavaClass due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.head.NativeJavaObject due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.head.NativeJavaPackage due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5869017632241813
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7027707808564232
[MASTER] 09:27:02.157 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.head.NativeJavaMethod due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.head.MemberBox due to org.evosuite.ga.ConstructionFailedException: Have no generator for java.lang.reflect.Constructor<java.lang.reflect.InvocationTargetException> canUseFunctionalMocks=true, canBeMocked: false
[MASTER] 09:27:02.226 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.head.IdFunctionObject due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.head.NativeCall due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.head.NativeJavaArray due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7581863979848866
[MASTER] 09:27:03.228 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.head.NativeWith due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.head.BaseFunction due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.head.FieldAndMethods due to org.evosuite.ga.ConstructionFailedException: Have no generator for class java.lang.reflect.Field canUseFunctionalMocks=true, canBeMocked: false
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7758186397984886
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.783375314861461
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7984886649874056
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8060453400503779
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8085642317380353
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8085642317380353
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8110831234256927
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8261964735516373
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8261964735516373
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8312342569269522
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8337531486146096
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.836272040302267
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.836272040302267
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.836272040302267
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.836272040302267
[MASTER] 09:30:07.687 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.head.FieldAndMethods due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.head.FunctionObject due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.head.MemberBox due to org.evosuite.ga.ConstructionFailedException: Have no generator for java.lang.reflect.Constructor<com.google.javascript.rhino.head.Interpreter> canUseFunctionalMocks=true, canBeMocked: false
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.836272040302267
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.836272040302267
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.836272040302267
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.836272040302267
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.836272040302267
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.836272040302267
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.836272040302267
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8387909319899244
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8387909319899244
* Search finished after 319s and 519 generations, 129413 statements, best individual has fitness: 64.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8387909319899244
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 75%
* Total number of goals: 397
* Number of covered goals: 296
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8387909319899244
* Generated 148 tests with total length 396
* Resulting test suite's coverage: 84%
* Generating assertions
[MASTER] 09:32:42.832 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.8682166666666666% of time used, but only 8/148 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 5%
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8387909319899244
* Compiling and checking tests
[MASTER] 09:33:05.130 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 09:33:05.131 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ContextFactory contextFactory0 = ContextFactory.getGlobal();
Context context0 = Context.enter((Context) null, contextFactory0);
NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
Object object0 = Context.call((ContextFactory) null, (Callable) nativeJavaTopPackage0, (Scriptable) nativeJavaTopPackage0, (Scriptable) nativeJavaTopPackage0, context0.emptyArgs);
assertNull(object0);


[MASTER] 09:33:09.083 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 09:33:09.084 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = new Context();
Context.toNumber(context0);
assertEquals(0, context0.getLanguageVersion());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());


[MASTER] 09:33:14.299 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 09:33:14.299 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = new Context();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
context0.newObject((Scriptable) importerTopLevel0, "language version");

[MASTER] 09:33:15.917 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 09:33:15.918 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = new Context();
NativeBoolean nativeBoolean0 = new NativeBoolean(false);
context0.getElements(nativeBoolean0);
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getLanguageVersion());
assertTrue(context0.isGeneratingSource());
assertFalse(context0.generateObserverCount);
assertEquals(0, context0.getOptimizationLevel());


[MASTER] 09:33:17.664 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 09:33:17.665 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getCurrentContext();
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isSealed());
assertEquals(0, context0.getOptimizationLevel());
assertTrue(context0.isGeneratingSource());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(0, context0.getInstructionObserverThreshold());
assertNotNull(context0);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(150, Context.VERSION_1_5);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(160, Context.VERSION_1_6);
assertEquals(110, Context.VERSION_1_1);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(170, Context.VERSION_1_7);
assertEquals(120, Context.VERSION_1_2);
assertFalse(context0.generateObserverCount);
assertEquals(180, Context.VERSION_1_8);
assertEquals(130, Context.VERSION_1_3);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(140, Context.VERSION_1_4);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(9, Context.FEATURE_STRICT_EVAL);

Context.toObject((Object) context0, (Scriptable) null);

[MASTER] 09:33:18.834 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 09:33:18.836 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
assertFalse(nativeIterator_StopIteration0.isSealed());
assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
assertTrue(nativeIterator_StopIteration0.isEmpty());
assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
assertTrue(nativeIterator_StopIteration0.isExtensible());
assertNotNull(nativeIterator_StopIteration0);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);

boolean boolean0 = Context.toBoolean(nativeIterator_StopIteration0);
assertTrue(boolean0);
assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
assertFalse(nativeIterator_StopIteration0.isSealed());
assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
assertTrue(nativeIterator_StopIteration0.isEmpty());
assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
assertTrue(nativeIterator_StopIteration0.isExtensible());
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);


[MASTER] 09:33:21.443 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 09:33:21.449 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = new Context();
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isSealed());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(0, context0.getOptimizationLevel());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getInstructionObserverThreshold());
assertNotNull(context0);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(140, Context.VERSION_1_4);
assertEquals(180, Context.VERSION_1_8);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(170, Context.VERSION_1_7);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(120, Context.VERSION_1_2);
assertEquals(160, Context.VERSION_1_6);
assertEquals(110, Context.VERSION_1_1);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(150, Context.VERSION_1_5);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertFalse(context0.generateObserverCount);
assertEquals(100, Context.VERSION_1_0);

ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isSealed());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(0, context0.getOptimizationLevel());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(importerTopLevel0.isSealed());
assertEquals("object", importerTopLevel0.getTypeOf());
assertTrue(importerTopLevel0.isExtensible());
assertFalse(importerTopLevel0.isEmpty());
assertTrue(importerTopLevel0.hasPrototypeMap());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertEquals("global", importerTopLevel0.getClassName());
assertNotNull(importerTopLevel0);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(140, Context.VERSION_1_4);
assertEquals(180, Context.VERSION_1_8);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(170, Context.VERSION_1_7);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(120, Context.VERSION_1_2);
assertEquals(160, Context.VERSION_1_6);
assertEquals(110, Context.VERSION_1_1);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(150, Context.VERSION_1_5);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertFalse(context0.generateObserverCount);
assertEquals(100, Context.VERSION_1_0);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);

NativeObject nativeObject0 = (NativeObject)context0.newObject((Scriptable) importerTopLevel0);
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isSealed());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(0, context0.getOptimizationLevel());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(importerTopLevel0.isSealed());
assertEquals("object", importerTopLevel0.getTypeOf());
assertTrue(importerTopLevel0.isExtensible());
assertFalse(importerTopLevel0.isEmpty());
assertTrue(importerTopLevel0.hasPrototypeMap());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertEquals("global", importerTopLevel0.getClassName());
assertFalse(nativeObject0.isSealed());
assertFalse(nativeObject0.hasPrototypeMap());
assertEquals("object", nativeObject0.getTypeOf());
assertTrue(nativeObject0.isExtensible());
assertEquals("Object", nativeObject0.getClassName());
assertFalse(nativeObject0.avoidObjectDetection());
assertTrue(nativeObject0.isEmpty());
assertNotNull(nativeObject0);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(140, Context.VERSION_1_4);
assertEquals(180, Context.VERSION_1_8);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(170, Context.VERSION_1_7);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(120, Context.VERSION_1_2);
assertEquals(160, Context.VERSION_1_6);
assertEquals(110, Context.VERSION_1_1);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(150, Context.VERSION_1_5);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertFalse(context0.generateObserverCount);
assertEquals(100, Context.VERSION_1_0);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, ScriptableObject.DONTENUM);

context0.resumeContinuation(importerTopLevel0, nativeObject0, nativeObject0);

[MASTER] 09:33:22.755 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 09:33:22.759 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getCurrentContext();
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isSealed());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebugChanged());
assertTrue(context0.isGeneratingSource());
assertNotNull(context0);
assertEquals(180, Context.VERSION_1_8);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(140, Context.VERSION_1_4);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(160, Context.VERSION_1_6);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(120, Context.VERSION_1_2);
assertEquals(170, Context.VERSION_1_7);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(150, Context.VERSION_1_5);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(110, Context.VERSION_1_1);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(100, Context.VERSION_1_0);
assertFalse(context0.generateObserverCount);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);

NativeObject nativeObject0 = (NativeObject)context0.initStandardObjects();
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isSealed());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebugChanged());
assertTrue(context0.isGeneratingSource());
assertEquals("Object", nativeObject0.getClassName());
assertTrue(nativeObject0.isExtensible());
assertFalse(nativeObject0.hasPrototypeMap());
assertEquals("object", nativeObject0.getTypeOf());
assertFalse(nativeObject0.isSealed());
assertFalse(nativeObject0.avoidObjectDetection());
assertFalse(nativeObject0.isEmpty());
assertNotNull(nativeObject0);
assertEquals(180, Context.VERSION_1_8);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(140, Context.VERSION_1_4);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(160, Context.VERSION_1_6);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(120, Context.VERSION_1_2);
assertEquals(170, Context.VERSION_1_7);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(150, Context.VERSION_1_5);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(110, Context.VERSION_1_1);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(100, Context.VERSION_1_0);
assertFalse(context0.generateObserverCount);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);

NativeObject nativeObject1 = (NativeObject)context0.initStandardObjects((ScriptableObject) nativeObject0);
assertSame(nativeObject0, nativeObject1);
assertSame(nativeObject1, nativeObject0);
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isSealed());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebugChanged());
assertTrue(context0.isGeneratingSource());
assertEquals("Object", nativeObject0.getClassName());
assertTrue(nativeObject0.isExtensible());
assertFalse(nativeObject0.hasPrototypeMap());
assertEquals("object", nativeObject0.getTypeOf());
assertFalse(nativeObject0.isSealed());
assertFalse(nativeObject0.avoidObjectDetection());
assertFalse(nativeObject0.isEmpty());
assertFalse(nativeObject1.hasPrototypeMap());
assertEquals("object", nativeObject1.getTypeOf());
assertTrue(nativeObject1.isExtensible());
assertFalse(nativeObject1.isEmpty());
assertFalse(nativeObject1.isSealed());
assertFalse(nativeObject1.avoidObjectDetection());
assertEquals("Object", nativeObject1.getClassName());
assertNotNull(nativeObject1);
assertEquals(180, Context.VERSION_1_8);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(140, Context.VERSION_1_4);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(160, Context.VERSION_1_6);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(120, Context.VERSION_1_2);
assertEquals(170, Context.VERSION_1_7);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(150, Context.VERSION_1_5);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(110, Context.VERSION_1_1);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(100, Context.VERSION_1_0);
assertFalse(context0.generateObserverCount);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(13, ScriptableObject.CONST);


[MASTER] 09:33:24.070 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Exception was not thrown in com.google.javascript.rhino.head.DefaultErrorReporter but in com.google.javascript.rhino.head.Context.reportError(Context.java:905): org.evosuite.runtime.mock.java.lang.MockThrowable: language version
[MASTER] 09:33:24.074 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context.reportError("language version");

[MASTER] 09:33:26.517 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 09:33:26.518 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getCurrentContext();
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebugChanged());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isSealed());
assertNotNull(context0);
assertEquals(150, Context.VERSION_1_5);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(110, Context.VERSION_1_1);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(100, Context.VERSION_1_0);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertFalse(context0.generateObserverCount);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(180, Context.VERSION_1_8);
assertEquals(140, Context.VERSION_1_4);
assertEquals(170, Context.VERSION_1_7);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(160, Context.VERSION_1_6);
assertEquals(120, Context.VERSION_1_2);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);

NativeContinuation nativeContinuation0 = new NativeContinuation();
assertTrue(nativeContinuation0.isEmpty());
assertEquals("Continuation", nativeContinuation0.getClassName());
assertEquals("object", nativeContinuation0.getTypeOf());
assertFalse(nativeContinuation0.hasPrototypeMap());
assertTrue(nativeContinuation0.isExtensible());
assertFalse(nativeContinuation0.isSealed());
assertFalse(nativeContinuation0.avoidObjectDetection());
assertNotNull(nativeContinuation0);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);

context0.evaluateString(nativeContinuation0, "F", "F", 1, "F");

[MASTER] 09:33:30.846 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 09:33:30.847 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getCurrentContext();
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getOptimizationLevel());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebugChanged());
assertFalse(context0.isSealed());
assertNotNull(context0);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(100, Context.VERSION_1_0);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(110, Context.VERSION_1_1);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(150, Context.VERSION_1_5);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(180, Context.VERSION_1_8);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(130, Context.VERSION_1_3);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(170, Context.VERSION_1_7);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(120, Context.VERSION_1_2);
assertFalse(context0.generateObserverCount);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(140, Context.VERSION_1_4);

NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
assertFalse(nativeIterator_StopIteration0.isSealed());
assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
assertTrue(nativeIterator_StopIteration0.isExtensible());
assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
assertTrue(nativeIterator_StopIteration0.isEmpty());
assertNotNull(nativeIterator_StopIteration0);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);

Class<Arguments> class0 = Arguments.class;
Context.toObject((Object) context0, (Scriptable) nativeIterator_StopIteration0, (Class<?>) class0);

[MASTER] 09:33:36.369 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 09:33:36.371 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getContext();
assertFalse(context0.isSealed());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getInstructionObserverThreshold());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(context0.isGeneratingDebugChanged());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getLanguageVersion());
assertNotNull(context0);
assertEquals(150, Context.VERSION_1_5);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(110, Context.VERSION_1_1);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(160, Context.VERSION_1_6);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(120, Context.VERSION_1_2);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(170, Context.VERSION_1_7);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(180, Context.VERSION_1_8);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(140, Context.VERSION_1_4);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertFalse(context0.generateObserverCount);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(100, Context.VERSION_1_0);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(8, Context.FEATURE_STRICT_VARS);

boolean boolean0 = context0.isGeneratingDebug();
assertFalse(boolean0);
assertFalse(context0.isSealed());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getInstructionObserverThreshold());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(context0.isGeneratingDebugChanged());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getLanguageVersion());
assertEquals(150, Context.VERSION_1_5);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(110, Context.VERSION_1_1);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(160, Context.VERSION_1_6);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(120, Context.VERSION_1_2);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(170, Context.VERSION_1_7);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(180, Context.VERSION_1_8);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(140, Context.VERSION_1_4);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertFalse(context0.generateObserverCount);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(100, Context.VERSION_1_0);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(8, Context.FEATURE_STRICT_VARS);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 5
* Writing tests to file
* Writing JUnit test case 'Context_ESTest' to results/evosuite5/closure-16-com.google.javascript.rhino.head.Context-6
* Done!

* Computation finished

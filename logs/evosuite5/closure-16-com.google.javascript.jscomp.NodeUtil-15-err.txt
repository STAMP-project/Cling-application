[MASTER] 19:11:33.737 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_113_1566407493438/com/google/javascript/jscomp/NodeUtil_113_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_113_1566407493438/com/google/javascript/jscomp/NodeUtil_113_tmp__ESTest_scaffolding.java]]
[MASTER] 19:11:33.737 [logback-2] ERROR JUnitAnalyzer - Classpath: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/tools/evosuite.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/classes:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/args4j.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/guava.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/json.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/jsr305.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/protobuf-java.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/lib/rhino.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/ant.jar
[MASTER] 19:11:33.737 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/rq3/botsing-integration-experiment/tools/evosuite.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/classes:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/args4j.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/guava.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/json.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/jsr305.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/protobuf-java.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/lib/rhino.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/ant.jar
[MASTER] 19:11:33.742 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 139
[MASTER] 19:11:33.771 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_113_1566407493438/com/google/javascript/jscomp/NodeUtil_113_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Aug 21 17:11:33 GMT 2019
4:  */
5: 
6: package com.google.javascript.jscomp;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.jscomp.Compiler;
12: import com.google.javascript.jscomp.ControlFlowGraph;
13: import com.google.javascript.jscomp.NodeTraversal;
14: import com.google.javascript.jscomp.NodeUtil;
15: import com.google.javascript.jscomp.SourceInformationAnnotator;
16: import com.google.javascript.rhino.Node;
17: import java.util.Deque;
18: import java.util.LinkedList;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
24: public class NodeUtil_113_tmp__ESTest extends NodeUtil_113_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       Node node0 = Node.newString("\u000B");
29:       assertNotNull(node0);
30:       assertEquals(40, node0.getType());
31:       assertFalse(node0.isTrue());
32:       assertFalse(node0.isVoid());
33:       assertFalse(node0.isDefaultCase());
34:       assertEquals(0, node0.getChildCount());
35:       assertFalse(node0.isArrayLit());
36:       assertFalse(node0.isCatch());
37:       assertFalse(node0.isFunction());
38:       assertFalse(node0.isRegExp());
39:       assertFalse(node0.isEmpty());
40:       assertFalse(node0.isDelProp());
41:       assertFalse(node0.isVar());
42:       assertFalse(node0.isNull());
43:       assertFalse(node0.isNE());
44:       assertFalse(node0.isName());
45:       assertFalse(node0.isIf());
46:       assertFalse(node0.isAdd());
47:       assertFalse(node0.isNew());
48:       assertFalse(node0.isSetterDef());
49:       assertNull(node0.getSourceFileName());
50:       assertFalse(node0.isIn());
51:       assertFalse(node0.isWhile());
52:       assertFalse(node0.isReturn());
53:       assertFalse(node0.isCall());
54:       assertFalse(node0.isTypeOf());
55:       assertFalse(node0.isFalse());
56:       assertFalse(node0.isContinue());
57:       assertFalse(node0.isAssign());
58:       assertFalse(node0.isDec());
59:       assertEquals((-1), node0.getSourcePosition());
60:       assertFalse(node0.hasChildren());
61:       assertFalse(node0.isFromExterns());
62:       assertFalse(node0.isDebugger());
63:       assertFalse(node0.isGetProp());
64:       assertFalse(node0.isObjectLit());
65:       assertFalse(node0.isWith());
66:       assertFalse(node0.isNot());
67:       assertFalse(node0.isAnd());
68:       assertFalse(node0.isExprResult());
69:       assertFalse(node0.isComma());
70:       assertFalse(node0.isInstanceOf());
71:       assertFalse(node0.isGetElem());
72:       assertFalse(node0.isBreak());
73:       assertFalse(node0.isThrow());
74:       assertFalse(node0.isAssignAdd());
75:       assertFalse(node0.isOr());
76:       assertFalse(node0.isInc());
77:       assertFalse(node0.isDo());
78:       assertFalse(node0.isCase());
79:       assertFalse(node0.isSwitch());
80:       assertTrue(node0.isString());
81:       assertEquals((-1), node0.getLineno());
82:       assertFalse(node0.isBlock());
83:       assertFalse(node0.isHook());
84:       assertFalse(node0.isLabel());
85:       assertFalse(node0.hasMoreThanOneChild());
86:       assertFalse(node0.isLabelName());
87:       assertFalse(node0.isFor());
88:       assertFalse(node0.isGetterDef());
89:       assertEquals((-1), node0.getSourceOffset());
90:       assertFalse(node0.isThis());
91:       assertFalse(node0.isParamList());
92:       assertFalse(node0.isStringKey());
93:       assertFalse(node0.isTry());
94:       assertFalse(node0.hasOneChild());
95:       assertEquals((-1), node0.getCharno());
96:       assertFalse(node0.isScript());
97:       assertFalse(node0.isNumber());
98:       assertEquals(29, Node.JSDOC_INFO_PROP);
99:       assertEquals(47, Node.IS_DISPATCHER);
100:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
101:       assertEquals(32, Node.INCRDECR_PROP);
102:       assertEquals(46, Node.IS_NAMESPACE);
103:       assertEquals(53, Node.INPUT_ID);
104:       assertEquals(35, Node.PARENTHESIZED_PROP);
105:       assertEquals(51, Node.STATIC_SOURCE_FILE);
106:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
107:       assertEquals(30, Node.VAR_ARGS_NAME);
108:       assertEquals(16, Node.SOURCENAME_PROP);
109:       assertEquals(15, Node.NO_SIDE_EFFECTS);
110:       assertEquals(54, Node.SLASH_V);
111:       assertEquals(43, Node.IS_CONSTANT_NAME);
112:       assertEquals(40, Node.ORIGINALNAME_PROP);
113:       assertEquals(2, Node.POST_FLAG);
114:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
115:       assertEquals(50, Node.FREE_CALL);
116:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
117:       assertEquals(52, Node.LENGTH);
118:       assertEquals(41, Node.BRACELESS_TYPE);
119:       assertEquals(8, Node.FLAG_NO_THROWS);
120:       assertEquals(39, Node.EMPTY_BLOCK);
121:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
122:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
123:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
124:       assertEquals(49, Node.DIRECT_EVAL);
125:       assertEquals(1, Node.DECR_FLAG);
126:       assertEquals(36, Node.QUOTED_PROP);
127:       assertEquals(12, Node.COLUMN_BITS);
128:       assertEquals(54, Node.LAST_PROP);
129:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
130:       assertEquals(48, Node.DIRECTIVES);
131:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
132:       assertEquals(37, Node.OPT_ARG_NAME);
133:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
134:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
135:       assertEquals(4095, Node.COLUMN_MASK);
136:       
137:       Iterable<Node> iterable0 = node0.children();
138:       assertNotNull(iterable0);
139:       assertFalse(iterable0.contains(node0));
140:       assertEquals(40, node0.getType());
141:       assertFalse(node0.isTrue());
142:       assertFalse(node0.isVoid());
143:       assertFalse(node0.isDefaultCase());
144:       assertEquals(0, node0.getChildCount());
145:       assertFalse(node0.isArrayLit());
146:       assertFalse(node0.isCatch());
147:       assertFalse(node0.isFunction());
148:       assertFalse(node0.isRegExp());
149:       assertFalse(node0.isEmpty());
150:       assertFalse(node0.isDelProp());
151:       assertFalse(node0.isVar());
152:       assertFalse(node0.isNull());
153:       assertFalse(node0.isNE());
154:       assertFalse(node0.isName());
155:       assertFalse(node0.isIf());
156:       assertFalse(node0.isAdd());
157:       assertFalse(node0.isNew());
158:       assertFalse(node0.isSetterDef());
159:       assertNull(node0.getSourceFileName());
160:       assertFalse(node0.isIn());
161:       assertFalse(node0.isWhile());
162:       assertFalse(node0.isReturn());
163:       assertFalse(node0.isCall());
164:       assertFalse(node0.isTypeOf());
165:       assertFalse(node0.isFalse());
166:       assertFalse(node0.isContinue());
167:       assertFalse(node0.isAssign());
168:       assertFalse(node0.isDec());
169:       assertEquals((-1), node0.getSourcePosition());
170:       assertFalse(node0.hasChildren());
171:       assertFalse(node0.isFromExterns());
172:       assertFalse(node0.isDebugger());
173:       assertFalse(node0.isGetProp());
174:       assertFalse(node0.isObjectLit());
175:       assertFalse(node0.isWith());
176:       assertFalse(node0.isNot());
177:       assertFalse(node0.isAnd());
178:       assertFalse(node0.isExprResult());
179:       assertFalse(node0.isComma());
180:       assertFalse(node0.isInstanceOf());
181:       assertFalse(node0.isGetElem());
182:       assertFalse(node0.isBreak());
183:       assertFalse(node0.isThrow());
184:       assertFalse(node0.isAssignAdd());
185:       assertFalse(node0.isOr());
186:       assertFalse(node0.isInc());
187:       assertFalse(node0.isDo());
188:       assertFalse(node0.isCase());
189:       assertFalse(node0.isSwitch());
190:       assertTrue(node0.isString());
191:       assertEquals((-1), node0.getLineno());
192:       assertFalse(node0.isBlock());
193:       assertFalse(node0.isHook());
194:       assertFalse(node0.isLabel());
195:       assertFalse(node0.hasMoreThanOneChild());
196:       assertFalse(node0.isLabelName());
197:       assertFalse(node0.isFor());
198:       assertFalse(node0.isGetterDef());
199:       assertEquals((-1), node0.getSourceOffset());
200:       assertFalse(node0.isThis());
201:       assertFalse(node0.isParamList());
202:       assertFalse(node0.isStringKey());
203:       assertFalse(node0.isTry());
204:       assertFalse(node0.hasOneChild());
205:       assertEquals((-1), node0.getCharno());
206:       assertFalse(node0.isScript());
207:       assertFalse(node0.isNumber());
208:       assertEquals(29, Node.JSDOC_INFO_PROP);
209:       assertEquals(47, Node.IS_DISPATCHER);
210:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
211:       assertEquals(32, Node.INCRDECR_PROP);
212:       assertEquals(46, Node.IS_NAMESPACE);
213:       assertEquals(53, Node.INPUT_ID);
214:       assertEquals(35, Node.PARENTHESIZED_PROP);
215:       assertEquals(51, Node.STATIC_SOURCE_FILE);
216:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
217:       assertEquals(30, Node.VAR_ARGS_NAME);
218:       assertEquals(16, Node.SOURCENAME_PROP);
219:       assertEquals(15, Node.NO_SIDE_EFFECTS);
220:       assertEquals(54, Node.SLASH_V);
221:       assertEquals(43, Node.IS_CONSTANT_NAME);
222:       assertEquals(40, Node.ORIGINALNAME_PROP);
223:       assertEquals(2, Node.POST_FLAG);
224:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
225:       assertEquals(50, Node.FREE_CALL);
226:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
227:       assertEquals(52, Node.LENGTH);
228:       assertEquals(41, Node.BRACELESS_TYPE);
229:       assertEquals(8, Node.FLAG_NO_THROWS);
230:       assertEquals(39, Node.EMPTY_BLOCK);
231:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
232:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
233:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
234:       assertEquals(49, Node.DIRECT_EVAL);
235:       assertEquals(1, Node.DECR_FLAG);
236:       assertEquals(36, Node.QUOTED_PROP);
237:       assertEquals(12, Node.COLUMN_BITS);
238:       assertEquals(54, Node.LAST_PROP);
239:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
240:       assertEquals(48, Node.DIRECTIVES);
241:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
242:       assertEquals(37, Node.OPT_ARG_NAME);
243:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
244:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
245:       assertEquals(4095, Node.COLUMN_MASK);
246:       
247:       NodeUtil.getPureBooleanValue(node0);
248:       assertEquals(40, node0.getType());
249:       assertFalse(node0.isTrue());
250:       assertFalse(node0.isVoid());
251:       assertFalse(node0.isDefaultCase());
252:       assertEquals(0, node0.getChildCount());
253:       assertFalse(node0.isArrayLit());
254:       assertFalse(node0.isCatch());
255:       assertFalse(node0.isFunction());
256:       assertFalse(node0.isRegExp());
257:       assertFalse(node0.isEmpty());
258:       assertFalse(node0.isDelProp());
259:       assertFalse(node0.isVar());
260:       assertFalse(node0.isNull());
261:       assertFalse(node0.isNE());
262:       assertFalse(node0.isName());
263:       assertFalse(node0.isIf());
264:       assertFalse(node0.isAdd());
265:       assertFalse(node0.isNew());
266:       assertFalse(node0.isSetterDef());
267:       assertNull(node0.getSourceFileName());
268:       assertFalse(node0.isIn());
269:       assertFalse(node0.isWhile());
270:       assertFalse(node0.isReturn());
271:       assertFalse(node0.isCall());
272:       assertFalse(node0.isTypeOf());
273:       assertFalse(node0.isFalse());
274:       assertFalse(node0.isContinue());
275:       assertFalse(node0.isAssign());
276:       assertFalse(node0.isDec());
277:       assertEquals((-1), node0.getSourcePosition());
278:       assertFalse(node0.hasChildren());
279:       assertFalse(node0.isFromExterns());
280:       assertFalse(node0.isDebugger());
281:       assertFalse(node0.isGetProp());
282:       assertFalse(node0.isObjectLit());
283:       assertFalse(node0.isWith());
284:       assertFalse(node0.isNot());
285:       assertFalse(node0.isAnd());
286:       assertFalse(node0.isExprResult());
287:       assertFalse(node0.isComma());
288:       assertFalse(node0.isInstanceOf());
289:       assertFalse(node0.isGetElem());
290:       assertFalse(node0.isBreak());
291:       assertFalse(node0.isThrow());
292:       assertFalse(node0.isAssignAdd());
293:       assertFalse(node0.isOr());
294:       assertFalse(node0.isInc());
295:       assertFalse(node0.isDo());
296:       assertFalse(node0.isCase());
297:       assertFalse(node0.isSwitch());
298:       assertTrue(node0.isString());
299:       assertEquals((-1), node0.getLineno());
300:       assertFalse(node0.isBlock());
301:       assertFalse(node0.isHook());
302:       assertFalse(node0.isLabel());
303:       assertFalse(node0.hasMoreThanOneChild());
304:       assertFalse(node0.isLabelName());
305:       assertFalse(node0.isFor());
306:       assertFalse(node0.isGetterDef());
307:       assertEquals((-1), node0.getSourceOffset());
308:       assertFalse(node0.isThis());
309:       assertFalse(node0.isParamList());
310:       assertFalse(node0.isStringKey());
311:       assertFalse(node0.isTry());
312:       assertFalse(node0.hasOneChild());
313:       assertEquals((-1), node0.getCharno());
314:       assertFalse(node0.isScript());
315:       assertFalse(node0.isNumber());
316:       assertEquals(29, Node.JSDOC_INFO_PROP);
317:       assertEquals(47, Node.IS_DISPATCHER);
318:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
319:       assertEquals(32, Node.INCRDECR_PROP);
320:       assertEquals(46, Node.IS_NAMESPACE);
321:       assertEquals(53, Node.INPUT_ID);
322:       assertEquals(35, Node.PARENTHESIZED_PROP);
323:       assertEquals(51, Node.STATIC_SOURCE_FILE);
324:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
325:       assertEquals(30, Node.VAR_ARGS_NAME);
326:       assertEquals(16, Node.SOURCENAME_PROP);
327:       assertEquals(15, Node.NO_SIDE_EFFECTS);
328:       assertEquals(54, Node.SLASH_V);
329:       assertEquals(43, Node.IS_CONSTANT_NAME);
330:       assertEquals(40, Node.ORIGINALNAME_PROP);
331:       assertEquals(2, Node.POST_FLAG);
332:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
333:       assertEquals(50, Node.FREE_CALL);
334:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
335:       assertEquals(52, Node.LENGTH);
336:       assertEquals(41, Node.BRACELESS_TYPE);
337:       assertEquals(8, Node.FLAG_NO_THROWS);
338:       assertEquals(39, Node.EMPTY_BLOCK);
339:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
340:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
341:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
342:       assertEquals(49, Node.DIRECT_EVAL);
343:       assertEquals(1, Node.DECR_FLAG);
344:       assertEquals(36, Node.QUOTED_PROP);
345:       assertEquals(12, Node.COLUMN_BITS);
346:       assertEquals(54, Node.LAST_PROP);
347:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
348:       assertEquals(48, Node.DIRECTIVES);
349:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
350:       assertEquals(37, Node.OPT_ARG_NAME);
351:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
352:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
353:       assertEquals(4095, Node.COLUMN_MASK);
354:       
355:       int int0 = NodeUtil.getInverseOperator(46);
356:       assertEquals((-1), int0);
357:       
358:       int int1 = NodeUtil.precedence(16);
359:       assertFalse(int1 == int0);
360:       assertEquals(9, int1);
361:       
362:       boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
363:       assertEquals(40, node0.getType());
364:       assertFalse(node0.isTrue());
365:       assertFalse(node0.isVoid());
366:       assertFalse(node0.isDefaultCase());
367:       assertEquals(0, node0.getChildCount());
368:       assertFalse(node0.isArrayLit());
369:       assertFalse(node0.isCatch());
370:       assertFalse(node0.isFunction());
371:       assertFalse(node0.isRegExp());
372:       assertFalse(node0.isEmpty());
373:       assertFalse(node0.isDelProp());
374:       assertFalse(node0.isVar());
375:       assertFalse(node0.isNull());
376:       assertFalse(node0.isNE());
377:       assertFalse(node0.isName());
378:       assertFalse(node0.isIf());
379:       assertFalse(node0.isAdd());
380:       assertFalse(node0.isNew());
381:       assertFalse(node0.isSetterDef());
382:       assertNull(node0.getSourceFileName());
383:       assertFalse(node0.isIn());
384:       assertFalse(node0.isWhile());
385:       assertFalse(node0.isReturn());
386:       assertFalse(node0.isCall());
387:       assertFalse(node0.isTypeOf());
388:       assertFalse(node0.isFalse());
389:       assertFalse(node0.isContinue());
390:       assertFalse(node0.isAssign());
391:       assertFalse(node0.isDec());
392:       assertEquals((-1), node0.getSourcePosition());
393:       assertFalse(node0.hasChildren());
394:       assertFalse(node0.isFromExterns());
395:       assertFalse(node0.isDebugger());
396:       assertFalse(node0.isGetProp());
397:       assertFalse(node0.isObjectLit());
398:       assertFalse(node0.isWith());
399:       assertFalse(node0.isNot());
400:       assertFalse(node0.isAnd());
401:       assertFalse(node0.isExprResult());
402:       assertFalse(node0.isComma());
403:       assertFalse(node0.isInstanceOf());
404:       assertFalse(node0.isGetElem());
405:       assertFalse(node0.isBreak());
406:       assertFalse(node0.isThrow());
407:       assertFalse(node0.isAssignAdd());
408:       assertFalse(node0.isOr());
409:       assertFalse(node0.isInc());
410:       assertFalse(node0.isDo());
411:       assertFalse(node0.isCase());
412:       assertFalse(node0.isSwitch());
413:       assertTrue(node0.isString());
414:       assertEquals((-1), node0.getLineno());
415:       assertFalse(node0.isBlock());
416:       assertFalse(node0.isHook());
417:       assertFalse(node0.isLabel());
418:       assertFalse(node0.hasMoreThanOneChild());
419:       assertFalse(node0.isLabelName());
420:       assertFalse(node0.isFor());
421:       assertFalse(node0.isGetterDef());
422:       assertEquals((-1), node0.getSourceOffset());
423:       assertFalse(node0.isThis());
424:       assertFalse(node0.isParamList());
425:       assertFalse(node0.isStringKey());
426:       assertFalse(node0.isTry());
427:       assertFalse(node0.hasOneChild());
428:       assertEquals((-1), node0.getCharno());
429:       assertFalse(node0.isScript());
430:       assertFalse(node0.isNumber());
431:       assertTrue(boolean0);
432:       assertEquals(29, Node.JSDOC_INFO_PROP);
433:       assertEquals(47, Node.IS_DISPATCHER);
434:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
435:       assertEquals(32, Node.INCRDECR_PROP);
436:       assertEquals(46, Node.IS_NAMESPACE);
437:       assertEquals(53, Node.INPUT_ID);
438:       assertEquals(35, Node.PARENTHESIZED_PROP);
439:       assertEquals(51, Node.STATIC_SOURCE_FILE);
440:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
441:       assertEquals(30, Node.VAR_ARGS_NAME);
442:       assertEquals(16, Node.SOURCENAME_PROP);
443:       assertEquals(15, Node.NO_SIDE_EFFECTS);
444:       assertEquals(54, Node.SLASH_V);
445:       assertEquals(43, Node.IS_CONSTANT_NAME);
446:       assertEquals(40, Node.ORIGINALNAME_PROP);
447:       assertEquals(2, Node.POST_FLAG);
448:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
449:       assertEquals(50, Node.FREE_CALL);
450:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
451:       assertEquals(52, Node.LENGTH);
452:       assertEquals(41, Node.BRACELESS_TYPE);
453:       assertEquals(8, Node.FLAG_NO_THROWS);
454:       assertEquals(39, Node.EMPTY_BLOCK);
455:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
456:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
457:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
458:       assertEquals(49, Node.DIRECT_EVAL);
459:       assertEquals(1, Node.DECR_FLAG);
460:       assertEquals(36, Node.QUOTED_PROP);
461:       assertEquals(12, Node.COLUMN_BITS);
462:       assertEquals(54, Node.LAST_PROP);
463:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
464:       assertEquals(48, Node.DIRECTIVES);
465:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
466:       assertEquals(37, Node.OPT_ARG_NAME);
467:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
468:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
469:       assertEquals(4095, Node.COLUMN_MASK);
470:       
471:       boolean boolean1 = NodeUtil.isExprCall(node0);
472:       assertFalse(boolean1 == boolean0);
473:       assertEquals(40, node0.getType());
474:       assertFalse(node0.isTrue());
475:       assertFalse(node0.isVoid());
476:       assertFalse(node0.isDefaultCase());
477:       assertEquals(0, node0.getChildCount());
478:       assertFalse(node0.isArrayLit());
479:       assertFalse(node0.isCatch());
480:       assertFalse(node0.isFunction());
481:       assertFalse(node0.isRegExp());
482:       assertFalse(node0.isEmpty());
483:       assertFalse(node0.isDelProp());
484:       assertFalse(node0.isVar());
485:       assertFalse(node0.isNull());
486:       assertFalse(node0.isNE());
487:       assertFalse(node0.isName());
488:       assertFalse(node0.isIf());
489:       assertFalse(node0.isAdd());
490:       assertFalse(node0.isNew());
491:       assertFalse(node0.isSetterDef());
492:       assertNull(node0.getSourceFileName());
493:       assertFalse(node0.isIn());
494:       assertFalse(node0.isWhile());
495:       assertFalse(node0.isReturn());
496:       assertFalse(node0.isCall());
497:       assertFalse(node0.isTypeOf());
498:       assertFalse(node0.isFalse());
499:       assertFalse(node0.isContinue());
500:       assertFalse(node0.isAssign());
501:       assertFalse(node0.isDec());
502:       assertEquals((-1), node0.getSourcePosition());
503:       assertFalse(node0.hasChildren());
504:       assertFalse(node0.isFromExterns());
505:       assertFalse(node0.isDebugger());
506:       assertFalse(node0.isGetProp());
507:       assertFalse(node0.isObjectLit());
508:       assertFalse(node0.isWith());
509:       assertFalse(node0.isNot());
510:       assertFalse(node0.isAnd());
511:       assertFalse(node0.isExprResult());
512:       assertFalse(node0.isComma());
513:       assertFalse(node0.isInstanceOf());
514:       assertFalse(node0.isGetElem());
515:       assertFalse(node0.isBreak());
516:       assertFalse(node0.isThrow());
517:       assertFalse(node0.isAssignAdd());
518:       assertFalse(node0.isOr());
519:       assertFalse(node0.isInc());
520:       assertFalse(node0.isDo());
521:       assertFalse(node0.isCase());
522:       assertFalse(node0.isSwitch());
523:       assertTrue(node0.isString());
524:       assertEquals((-1), node0.getLineno());
525:       assertFalse(node0.isBlock());
526:       assertFalse(node0.isHook());
527:       assertFalse(node0.isLabel());
528:       assertFalse(node0.hasMoreThanOneChild());
529:       assertFalse(node0.isLabelName());
530:       assertFalse(node0.isFor());
531:       assertFalse(node0.isGetterDef());
532:       assertEquals((-1), node0.getSourceOffset());
533:       assertFalse(node0.isThis());
534:       assertFalse(node0.isParamList());
535:       assertFalse(node0.isStringKey());
536:       assertFalse(node0.isTry());
537:       assertFalse(node0.hasOneChild());
538:       assertEquals((-1), node0.getCharno());
539:       assertFalse(node0.isScript());
540:       assertFalse(node0.isNumber());
541:       assertFalse(boolean1);
542:       assertEquals(29, Node.JSDOC_INFO_PROP);
543:       assertEquals(47, Node.IS_DISPATCHER);
544:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
545:       assertEquals(32, Node.INCRDECR_PROP);
546:       assertEquals(46, Node.IS_NAMESPACE);
547:       assertEquals(53, Node.INPUT_ID);
548:       assertEquals(35, Node.PARENTHESIZED_PROP);
549:       assertEquals(51, Node.STATIC_SOURCE_FILE);
550:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
551:       assertEquals(30, Node.VAR_ARGS_NAME);
552:       assertEquals(16, Node.SOURCENAME_PROP);
553:       assertEquals(15, Node.NO_SIDE_EFFECTS);
554:       assertEquals(54, Node.SLASH_V);
555:       assertEquals(43, Node.IS_CONSTANT_NAME);
556:       assertEquals(40, Node.ORIGINALNAME_PROP);
557:       assertEquals(2, Node.POST_FLAG);
558:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
559:       assertEquals(50, Node.FREE_CALL);
560:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
561:       assertEquals(52, Node.LENGTH);
562:       assertEquals(41, Node.BRACELESS_TYPE);
563:       assertEquals(8, Node.FLAG_NO_THROWS);
564:       assertEquals(39, Node.EMPTY_BLOCK);
565:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
566:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
567:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
568:       assertEquals(49, Node.DIRECT_EVAL);
569:       assertEquals(1, Node.DECR_FLAG);
570:       assertEquals(36, Node.QUOTED_PROP);
571:       assertEquals(12, Node.COLUMN_BITS);
572:       assertEquals(54, Node.LAST_PROP);
573:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
574:       assertEquals(48, Node.DIRECTIVES);
575:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
576:       assertEquals(37, Node.OPT_ARG_NAME);
577:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
578:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
579:       assertEquals(4095, Node.COLUMN_MASK);
580:       
581:       Compiler compiler0 = new Compiler();
582:       assertNotNull(compiler0);
583:       assertEquals(0.0, compiler0.getProgress(), 0.01);
584:       
585:       SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("\u000B", false);
586:       assertNotNull(sourceInformationAnnotator0);
587:       
588:       NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
589:       assertNotNull(nodeTraversal0);
590:       assertEquals(0.0, compiler0.getProgress(), 0.01);
591:       assertEquals("", nodeTraversal0.getSourceName());
592:       assertEquals(0, nodeTraversal0.getLineNumber());
593:       
594:       LinkedList<ControlFlowGraph<Node>> linkedList0 = new LinkedList<ControlFlowGraph<Node>>();
595:       assertNotNull(linkedList0);
596:       assertEquals(0, linkedList0.size());
597:       
598:       nodeTraversal0.cfgs = (Deque<ControlFlowGraph<Node>>) linkedList0;
599:       assertEquals(0.0, compiler0.getProgress(), 0.01);
600:       assertEquals("", nodeTraversal0.getSourceName());
601:       assertEquals(0, nodeTraversal0.getLineNumber());
602:       assertEquals(0, linkedList0.size());
603:       assertEquals(0, nodeTraversal0.cfgs.size());
604:       
605:       Compiler compiler1 = nodeTraversal0.getCompiler();
606:       assertNotNull(compiler1);
607:       assertSame(compiler0, compiler1);
608:       assertSame(compiler1, compiler0);
609:       assertEquals(0.0, compiler0.getProgress(), 0.01);
610:       assertEquals("", nodeTraversal0.getSourceName());
611:       assertEquals(0, nodeTraversal0.getLineNumber());
612:       assertEquals(0.0, compiler1.getProgress(), 0.01);
613:       
614:       boolean boolean2 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler1);
615:       assertTrue(boolean2 == boolean1);
616:       assertFalse(boolean2 == boolean0);
617:       assertSame(compiler0, compiler1);
618:       assertSame(compiler1, compiler0);
619:       assertEquals(40, node0.getType());
620:       assertFalse(node0.isTrue());
621:       assertFalse(node0.isVoid());
622:       assertFalse(node0.isDefaultCase());
623:       assertEquals(0, node0.getChildCount());
624:       assertFalse(node0.isArrayLit());
625:       assertFalse(node0.isCatch());
626:       assertFalse(node0.isFunction());
627:       assertFalse(node0.isRegExp());
628:       assertFalse(node0.isEmpty());
629:       assertFalse(node0.isDelProp());
630:       assertFalse(node0.isVar());
631:       assertFalse(node0.isNull());
632:       assertFalse(node0.isNE());
633:       assertFalse(node0.isName());
634:       assertFalse(node0.isIf());
635:       assertFalse(node0.isAdd());
636:       assertFalse(node0.isNew());
637:       assertFalse(node0.isSetterDef());
638:       assertNull(node0.getSourceFileName());
639:       assertFalse(node0.isIn());
640:       assertFalse(node0.isWhile());
641:       assertFalse(node0.isReturn());
642:       assertFalse(node0.isCall());
643:       assertFalse(node0.isTypeOf());
644:       assertFalse(node0.isFalse());
645:       assertFalse(node0.isContinue());
646:       assertFalse(node0.isAssign());
647:       assertFalse(node0.isDec());
648:       assertEquals((-1), node0.getSourcePosition());
649:       assertFalse(node0.hasChildren());
650:       assertFalse(node0.isFromExterns());
651:       assertFalse(node0.isDebugger());
652:       assertFalse(node0.isGetProp());
653:       assertFalse(node0.isObjectLit());
654:       assertFalse(node0.isWith());
655:       assertFalse(node0.isNot());
656:       assertFalse(node0.isAnd());
657:       assertFalse(node0.isExprResult());
658:       assertFalse(node0.isComma());
659:       assertFalse(node0.isInstanceOf());
660:       assertFalse(node0.isGetElem());
661:       assertFalse(node0.isBreak());
662:       assertFalse(node0.isThrow());
663:       assertFalse(node0.isAssignAdd());
664:       assertFalse(node0.isOr());
665:       assertFalse(node0.isInc());
666:       assertFalse(node0.isDo());
667:       assertFalse(node0.isCase());
668:       assertFalse(node0.isSwitch());
669:       assertTrue(node0.isString());
670:       assertEquals((-1), node0.getLineno());
671:       assertFalse(node0.isBlock());
672:       assertFalse(node0.isHook());
673:       assertFalse(node0.isLabel());
674:       assertFalse(node0.hasMoreThanOneChild());
675:       assertFalse(node0.isLabelName());
676:       assertFalse(node0.isFor());
677:       assertFalse(node0.isGetterDef());
678:       assertEquals((-1), node0.getSourceOffset());
679:       assertFalse(node0.isThis());
680:       assertFalse(node0.isParamList());
681:       assertFalse(node0.isStringKey());
682:       assertFalse(node0.isTry());
683:       assertFalse(node0.hasOneChild());
684:       assertEquals((-1), node0.getCharno());
685:       assertFalse(node0.isScript());
686:       assertFalse(node0.isNumber());
687:       assertEquals(0.0, compiler0.getProgress(), 0.01);
688:       assertEquals("", nodeTraversal0.getSourceName());
689:       assertEquals(0, nodeTraversal0.getLineNumber());
690:       assertEquals(0.0, compiler1.getProgress(), 0.01);
691:       assertFalse(boolean2);
692:       assertEquals(29, Node.JSDOC_INFO_PROP);
693:       assertEquals(47, Node.IS_DISPATCHER);
694:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
695:       assertEquals(32, Node.INCRDECR_PROP);
696:       assertEquals(46, Node.IS_NAMESPACE);
697:       assertEquals(53, Node.INPUT_ID);
698:       assertEquals(35, Node.PARENTHESIZED_PROP);
699:       assertEquals(51, Node.STATIC_SOURCE_FILE);
700:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
701:       assertEquals(30, Node.VAR_ARGS_NAME);
702:       assertEquals(16, Node.SOURCENAME_PROP);
703:       assertEquals(15, Node.NO_SIDE_EFFECTS);
704:       assertEquals(54, Node.SLASH_V);
705:       assertEquals(43, Node.IS_CONSTANT_NAME);
706:       assertEquals(40, Node.ORIGINALNAME_PROP);
707:       assertEquals(2, Node.POST_FLAG);
708:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
709:       assertEquals(50, Node.FREE_CALL);
710:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
711:       assertEquals(52, Node.LENGTH);
712:       assertEquals(41, Node.BRACELESS_TYPE);
713:       assertEquals(8, Node.FLAG_NO_THROWS);
714:       assertEquals(39, Node.EMPTY_BLOCK);
715:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
716:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
717:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
718:       assertEquals(49, Node.DIRECT_EVAL);
719:       assertEquals(1, Node.DECR_FLAG);
720:       assertEquals(36, Node.QUOTED_PROP);
721:       assertEquals(12, Node.COLUMN_BITS);
722:       assertEquals(54, Node.LAST_PROP);
723:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
724:       assertEquals(48, Node.DIRECTIVES);
725:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
726:       assertEquals(37, Node.OPT_ARG_NAME);
727:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
728:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
729:       assertEquals(4095, Node.COLUMN_MASK);
730:       
731:       Double double0 = NodeUtil.getNumberValue(node0);
732:       assertNull(double0);
733:       assertEquals(40, node0.getType());
734:       assertFalse(node0.isTrue());
735:       assertFalse(node0.isVoid());
736:       assertFalse(node0.isDefaultCase());
737:       assertEquals(0, node0.getChildCount());
738:       assertFalse(node0.isArrayLit());
739:       assertFalse(node0.isCatch());
740:       assertFalse(node0.isFunction());
741:       assertFalse(node0.isRegExp());
742:       assertFalse(node0.isEmpty());
743:       assertFalse(node0.isDelProp());
744:       assertFalse(node0.isVar());
745:       assertFalse(node0.isNull());
746:       assertFalse(node0.isNE());
747:       assertFalse(node0.isName());
748:       assertFalse(node0.isIf());
749:       assertFalse(node0.isAdd());
750:       assertFalse(node0.isNew());
751:       assertFalse(node0.isSetterDef());
752:       assertNull(node0.getSourceFileName());
753:       assertFalse(node0.isIn());
754:       assertFalse(node0.isWhile());
755:       assertFalse(node0.isReturn());
756:       assertFalse(node0.isCall());
757:       assertFalse(node0.isTypeOf());
758:       assertFalse(node0.isFalse());
759:       assertFalse(node0.isContinue());
760:       assertFalse(node0.isAssign());
761:       assertFalse(node0.isDec());
762:       assertEquals((-1), node0.getSourcePosition());
763:       assertFalse(node0.hasChildren());
764:       assertFalse(node0.isFromExterns());
765:       assertFalse(node0.isDebugger());
766:       assertFalse(node0.isGetProp());
767:       assertFalse(node0.isObjectLit());
768:       assertFalse(node0.isWith());
769:       assertFalse(node0.isNot());
770:       assertFalse(node0.isAnd());
771:       assertFalse(node0.isExprResult());
772:       assertFalse(node0.isComma());
773:       assertFalse(node0.isInstanceOf());
774:       assertFalse(node0.isGetElem());
775:       assertFalse(node0.isBreak());
776:       assertFalse(node0.isThrow());
777:       assertFalse(node0.isAssignAdd());
778:       assertFalse(node0.isOr());
779:       assertFalse(node0.isInc());
780:       assertFalse(node0.isDo());
781:       assertFalse(node0.isCase());
782:       assertFalse(node0.isSwitch());
783:       assertTrue(node0.isString());
784:       assertEquals((-1), node0.getLineno());
785:       assertFalse(node0.isBlock());
786:       assertFalse(node0.isHook());
787:       assertFalse(node0.isLabel());
788:       assertFalse(node0.hasMoreThanOneChild());
789:       assertFalse(node0.isLabelName());
790:       assertFalse(node0.isFor());
791:       assertFalse(node0.isGetterDef());
792:       assertEquals((-1), node0.getSourceOffset());
793:       assertFalse(node0.isThis());
794:       assertFalse(node0.isParamList());
795:       assertFalse(node0.isStringKey());
796:       assertFalse(node0.isTry());
797:       assertFalse(node0.hasOneChild());
798:       assertEquals((-1), node0.getCharno());
799:       assertFalse(node0.isScript());
800:       assertFalse(node0.isNumber());
801:       assertEquals(29, Node.JSDOC_INFO_PROP);
802:       assertEquals(47, Node.IS_DISPATCHER);
803:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
804:       assertEquals(32, Node.INCRDECR_PROP);
805:       assertEquals(46, Node.IS_NAMESPACE);
806:       assertEquals(53, Node.INPUT_ID);
807:       assertEquals(35, Node.PARENTHESIZED_PROP);
808:       assertEquals(51, Node.STATIC_SOURCE_FILE);
809:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
810:       assertEquals(30, Node.VAR_ARGS_NAME);
811:       assertEquals(16, Node.SOURCENAME_PROP);
812:       assertEquals(15, Node.NO_SIDE_EFFECTS);
813:       assertEquals(54, Node.SLASH_V);
814:       assertEquals(43, Node.IS_CONSTANT_NAME);
815:       assertEquals(40, Node.ORIGINALNAME_PROP);
816:       assertEquals(2, Node.POST_FLAG);
817:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
818:       assertEquals(50, Node.FREE_CALL);
819:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
820:       assertEquals(52, Node.LENGTH);
821:       assertEquals(41, Node.BRACELESS_TYPE);
822:       assertEquals(8, Node.FLAG_NO_THROWS);
823:       assertEquals(39, Node.EMPTY_BLOCK);
824:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
825:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
826:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
827:       assertEquals(49, Node.DIRECT_EVAL);
828:       assertEquals(1, Node.DECR_FLAG);
829:       assertEquals(36, Node.QUOTED_PROP);
830:       assertEquals(12, Node.COLUMN_BITS);
831:       assertEquals(54, Node.LAST_PROP);
832:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
833:       assertEquals(48, Node.DIRECTIVES);
834:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
835:       assertEquals(37, Node.OPT_ARG_NAME);
836:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
837:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
838:       assertEquals(4095, Node.COLUMN_MASK);
839:       
840:       boolean boolean3 = NodeUtil.isAssignmentOp(node0);
841:       assertTrue(boolean3 == boolean2);
842:       assertTrue(boolean3 == boolean1);
843:       assertFalse(boolean3 == boolean0);
844:       assertEquals(40, node0.getType());
845:       assertFalse(node0.isTrue());
846:       assertFalse(node0.isVoid());
847:       assertFalse(node0.isDefaultCase());
848:       assertEquals(0, node0.getChildCount());
849:       assertFalse(node0.isArrayLit());
850:       assertFalse(node0.isCatch());
851:       assertFalse(node0.isFunction());
852:       assertFalse(node0.isRegExp());
853:       assertFalse(node0.isEmpty());
854:       assertFalse(node0.isDelProp());
855:       assertFalse(node0.isVar());
856:       assertFalse(node0.isNull());
857:       assertFalse(node0.isNE());
858:       assertFalse(node0.isName());
859:       assertFalse(node0.isIf());
860:       assertFalse(node0.isAdd());
861:       assertFalse(node0.isNew());
862:       assertFalse(node0.isSetterDef());
863:       assertNull(node0.getSourceFileName());
864:       assertFalse(node0.isIn());
865:       assertFalse(node0.isWhile());
866:       assertFalse(node0.isReturn());
867:       assertFalse(node0.isCall());
868:       assertFalse(node0.isTypeOf());
869:       assertFalse(node0.isFalse());
870:       assertFalse(node0.isContinue());
871:       assertFalse(node0.isAssign());
872:       assertFalse(node0.isDec());
873:       assertEquals((-1), node0.getSourcePosition());
874:       assertFalse(node0.hasChildren());
875:       assertFalse(node0.isFromExterns());
876:       assertFalse(node0.isDebugger());
877:       assertFalse(node0.isGetProp());
878:       assertFalse(node0.isObjectLit());
879:       assertFalse(node0.isWith());
880:       assertFalse(node0.isNot());
881:       assertFalse(node0.isAnd());
882:       assertFalse(node0.isExprResult());
883:       assertFalse(node0.isComma());
884:       assertFalse(node0.isInstanceOf());
885:       assertFalse(node0.isGetElem());
886:       assertFalse(node0.isBreak());
887:       assertFalse(node0.isThrow());
888:       assertFalse(node0.isAssignAdd());
889:       assertFalse(node0.isOr());
890:       assertFalse(node0.isInc());
891:       assertFalse(node0.isDo());
892:       assertFalse(node0.isCase());
893:       assertFalse(node0.isSwitch());
894:       assertTrue(node0.isString());
895:       assertEquals((-1), node0.getLineno());
896:       assertFalse(node0.isBlock());
897:       assertFalse(node0.isHook());
898:       assertFalse(node0.isLabel());
899:       assertFalse(node0.hasMoreThanOneChild());
900:       assertFalse(node0.isLabelName());
901:       assertFalse(node0.isFor());
902:       assertFalse(node0.isGetterDef());
903:       assertEquals((-1), node0.getSourceOffset());
904:       assertFalse(node0.isThis());
905:       assertFalse(node0.isParamList());
906:       assertFalse(node0.isStringKey());
907:       assertFalse(node0.isTry());
908:       assertFalse(node0.hasOneChild());
909:       assertEquals((-1), node0.getCharno());
910:       assertFalse(node0.isScript());
911:       assertFalse(node0.isNumber());
912:       assertFalse(boolean3);
913:       assertEquals(29, Node.JSDOC_INFO_PROP);
914:       assertEquals(47, Node.IS_DISPATCHER);
915:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
916:       assertEquals(32, Node.INCRDECR_PROP);
917:       assertEquals(46, Node.IS_NAMESPACE);
918:       assertEquals(53, Node.INPUT_ID);
919:       assertEquals(35, Node.PARENTHESIZED_PROP);
920:       assertEquals(51, Node.STATIC_SOURCE_FILE);
921:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
922:       assertEquals(30, Node.VAR_ARGS_NAME);
923:       assertEquals(16, Node.SOURCENAME_PROP);
924:       assertEquals(15, Node.NO_SIDE_EFFECTS);
925:       assertEquals(54, Node.SLASH_V);
926:       assertEquals(43, Node.IS_CONSTANT_NAME);
927:       assertEquals(40, Node.ORIGINALNAME_PROP);
928:       assertEquals(2, Node.POST_FLAG);
929:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
930:       assertEquals(50, Node.FREE_CALL);
931:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
932:       assertEquals(52, Node.LENGTH);
933:       assertEquals(41, Node.BRACELESS_TYPE);
934:       assertEquals(8, Node.FLAG_NO_THROWS);
935:       assertEquals(39, Node.EMPTY_BLOCK);
936:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
937:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
938:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
939:       assertEquals(49, Node.DIRECT_EVAL);
940:       assertEquals(1, Node.DECR_FLAG);
941:       assertEquals(36, Node.QUOTED_PROP);
942:       assertEquals(12, Node.COLUMN_BITS);
943:       assertEquals(54, Node.LAST_PROP);
944:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
945:       assertEquals(48, Node.DIRECTIVES);
946:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
947:       assertEquals(37, Node.OPT_ARG_NAME);
948:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
949:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
950:       assertEquals(4095, Node.COLUMN_MASK);
951:       
952:       // Undeclared exception!
953:       try { 
954:         NodeUtil.isLValue(node0);
955:         fail("Expecting exception: IllegalArgumentException");
956:       
957:       } catch(IllegalArgumentException e) {
958:          //
959:          // no message in exception (getMessage() returned null)
960:          //
961:          verifyException("com.google.common.base.Preconditions", e);
962:       }
963:   }
964: }
RegularFileObject[/tmp/EvoSuite_113_1566407493438/com/google/javascript/jscomp/NodeUtil_113_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Aug 21 17:11:33 GMT 2019
5:  */
6: 
7: package com.google.javascript.jscomp;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NodeUtil_113_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.jscomp.NodeUtil"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/rq3/botsing-integration-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NodeUtil_113_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.common.collect.ArrayListMultimap",
82:       "com.google.javascript.jscomp.CoalesceVariableNames",
83:       "com.google.common.collect.Collections2",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.jscomp.NodeTraversal$Callback",
86:       "com.google.javascript.rhino.head.jdk13.VMBridge_jdk13",
87:       "com.google.javascript.jscomp.CheckSideEffects",
88:       "com.google.javascript.rhino.head.ast.Yield",
89:       "com.google.javascript.jscomp.SimpleDefinitionFinder",
90:       "com.google.javascript.jscomp.graph.Graph",
91:       "com.google.javascript.rhino.jstype.StaticScope",
92:       "com.google.javascript.rhino.jstype.InstanceObjectType",
93:       "com.google.javascript.jscomp.graph.Annotatable",
94:       "com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher",
95:       "com.google.common.collect.AbstractMapBasedMultiset$1",
96:       "com.google.javascript.jscomp.JSModule",
97:       "com.google.javascript.rhino.jstype.ObjectType",
98:       "com.google.common.collect.ImmutableSet$ArrayImmutableSet",
99:       "com.google.javascript.rhino.JSDocInfo$Marker",
100:       "com.google.common.collect.RegularImmutableMap",
101:       "com.google.javascript.rhino.Node$NodeMismatch",
102:       "com.google.javascript.rhino.jstype.RecordType",
103:       "com.google.javascript.rhino.head.ast.Jump",
104:       "com.google.javascript.jscomp.PeepholeSimplifyRegExp",
105:       "com.google.javascript.jscomp.Tracer",
106:       "com.google.javascript.jscomp.HotSwapCompilerPass",
107:       "com.google.javascript.jscomp.SourceFile$Builder",
108:       "com.google.javascript.jscomp.CodingConvention$SubclassType",
109:       "com.google.javascript.rhino.jstype.JSType$1",
110:       "com.google.javascript.jscomp.CodingConvention",
111:       "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
112:       "com.google.javascript.jscomp.SourceMap$DetailLevel",
113:       "com.google.javascript.jscomp.MemoizedScopeCreator",
114:       "com.google.javascript.rhino.head.ast.EmptyStatement",
115:       "com.google.javascript.jscomp.CompilerOptions$1",
116:       "com.google.common.base.Joiner",
117:       "com.google.javascript.jscomp.CheckAccessControls",
118:       "com.google.javascript.jscomp.CheckDebuggerStatement",
119:       "com.google.common.collect.SingletonImmutableMap",
120:       "com.google.javascript.jscomp.CleanupPasses",
121:       "com.google.javascript.rhino.head.ast.XmlFragment",
122:       "com.google.javascript.rhino.jstype.ProxyObjectType",
123:       "com.google.javascript.jscomp.CompilerOptions$Reach",
124:       "com.google.javascript.jscomp.PassConfig$State",
125:       "com.google.javascript.rhino.head.ast.CatchClause",
126:       "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
127:       "com.google.javascript.rhino.InputId",
128:       "com.google.common.collect.RegularImmutableMap$LinkedEntry",
129:       "com.google.common.collect.Lists$Partition",
130:       "com.google.javascript.rhino.head.ast.AstRoot",
131:       "com.google.javascript.rhino.head.ast.NewExpression",
132:       "com.google.javascript.rhino.ErrorReporter",
133:       "com.google.javascript.rhino.jstype.ValueType",
134:       "com.google.javascript.rhino.Token",
135:       "com.google.javascript.rhino.head.ast.ParenthesizedExpression",
136:       "com.google.javascript.jscomp.VerboseMessageFormatter",
137:       "com.google.javascript.rhino.jstype.BooleanType",
138:       "com.google.javascript.jscomp.CssRenamingMap",
139:       "com.google.javascript.rhino.head.Context$ClassShutterSetter",
140:       "com.google.common.base.CharMatcher$5",
141:       "com.google.common.base.CharMatcher$4",
142:       "com.google.javascript.jscomp.CombinedCompilerPass",
143:       "com.google.common.base.CharMatcher$3",
144:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$ContextualRenamer",
145:       "com.google.common.base.CharMatcher$2",
146:       "com.google.common.base.CharMatcher$9",
147:       "com.google.common.base.CharMatcher$8",
148:       "com.google.common.base.CharMatcher$7",
149:       "com.google.javascript.rhino.head.ast.Label",
150:       "com.google.common.base.CharMatcher$6",
151:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
152:       "com.google.javascript.jscomp.SuppressDocWarningsGuard",
153:       "com.google.javascript.jscomp.MessageFormatter",
154:       "com.google.javascript.rhino.JSDocInfo",
155:       "com.google.javascript.jscomp.SourceExcerptProvider$ExcerptFormatter",
156:       "com.google.common.base.CharMatcher$1",
157:       "com.google.javascript.jscomp.parsing.Config",
158:       "com.google.common.collect.EmptyImmutableList",
159:       "com.google.common.collect.ImmutableEntry",
160:       "com.google.javascript.rhino.head.CompilerEnvirons",
161:       "com.google.common.base.Joiner$1",
162:       "com.google.common.base.Joiner$2",
163:       "com.google.javascript.jscomp.ErrorHandler",
164:       "com.google.javascript.rhino.head.Callable",
165:       "com.google.javascript.jscomp.GoogleCodingConvention",
166:       "com.google.javascript.jscomp.SourceFile$Preloaded",
167:       "com.google.common.collect.ImmutableCollection",
168:       "com.google.javascript.rhino.ScriptRuntime",
169:       "com.google.javascript.rhino.head.ast.ScriptNode",
170:       "com.google.javascript.rhino.head.ast.XmlString",
171:       "com.google.javascript.jscomp.StrictModeCheck",
172:       "com.google.javascript.rhino.head.ast.WhileLoop",
173:       "com.google.javascript.jscomp.DefinitionsRemover$Definition",
174:       "com.google.javascript.jscomp.Result",
175:       "com.google.javascript.jscomp.CodingConventions$1",
176:       "com.google.javascript.jscomp.CodingConvention$ObjectLiteralCast",
177:       "com.google.javascript.jscomp.CodingConvention$SubclassRelationship",
178:       "com.google.javascript.jscomp.CompilerPass",
179:       "com.google.javascript.rhino.jstype.EnumElementType",
180:       "com.google.javascript.jscomp.NodeUtil$MatchDeclaration",
181:       "com.google.javascript.jscomp.NodeUtil$VarCollector",
182:       "com.google.javascript.jscomp.VariableRenamingPolicy",
183:       "com.google.javascript.rhino.head.ast.IfStatement",
184:       "com.google.javascript.jscomp.CodeChangeHandler",
185:       "com.google.common.collect.Lists$AbstractListWrapper",
186:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$Renamer",
187:       "com.google.javascript.jscomp.FunctionTypeBuilder",
188:       "com.google.javascript.jscomp.FunctionInformationMap",
189:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
190:       "com.google.common.collect.AbstractMapBasedMultiset",
191:       "com.google.javascript.jscomp.NodeUtil$MayBeStringResultPredicate",
192:       "com.google.javascript.rhino.jstype.EnumType",
193:       "com.google.javascript.jscomp.JsMessageVisitor$MalformedException",
194:       "com.google.javascript.rhino.head.Evaluator",
195:       "com.google.javascript.jscomp.CodingConventions$DefaultCodingConvention",
196:       "com.google.common.base.CharMatcher$LookupTable",
197:       "com.google.javascript.rhino.head.ast.XmlElemRef",
198:       "com.google.javascript.rhino.head.ast.VariableDeclaration",
199:       "com.google.javascript.rhino.head.TokenStream",
200:       "com.google.common.collect.RegularImmutableList$1",
201:       "com.google.javascript.rhino.head.ast.ObjectLiteral",
202:       "com.google.common.collect.Lists$2",
203:       "com.google.javascript.jscomp.JSSourceFile",
204:       "com.google.javascript.jscomp.CodingConventions",
205:       "com.google.common.collect.Lists$1",
206:       "com.google.javascript.rhino.jstype.StaticReference",
207:       "com.google.javascript.jscomp.PreprocessorSymbolTable",
208:       "com.google.common.collect.Multiset",
209:       "com.google.javascript.rhino.head.ast.InfixExpression",
210:       "com.google.javascript.rhino.head.BaseFunction",
211:       "com.google.common.base.Supplier",
212:       "com.google.protobuf.MessageOrBuilder",
213:       "com.google.javascript.jscomp.GlobalVarReferenceMap",
214:       "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
215:       "com.google.javascript.rhino.head.ast.XmlPropRef",
216:       "com.google.javascript.jscomp.TypeValidator",
217:       "com.google.common.collect.ImmutableList",
218:       "com.google.protobuf.GeneratedMessage",
219:       "com.google.javascript.rhino.jstype.ObjectType$Property",
220:       "com.google.javascript.rhino.Node$AbstractPropListItem",
221:       "com.google.common.collect.AbstractMultimap$KeySet",
222:       "com.google.javascript.jscomp.graph.UndiGraph",
223:       "com.google.javascript.rhino.head.ast.VariableInitializer",
224:       "com.google.javascript.rhino.jstype.NoResolvedType",
225:       "com.google.javascript.rhino.head.ast.ThrowStatement",
226:       "com.google.protobuf.MessageLiteOrBuilder",
227:       "com.google.javascript.jscomp.NodeTraversal$AbstractNodeTypePruningCallback",
228:       "com.google.javascript.jscomp.DefaultPassConfig$99",
229:       "com.google.protobuf.MessageLite",
230:       "com.google.javascript.jscomp.DefaultPassConfig$98",
231:       "com.google.common.collect.Maps$EntryTransformer",
232:       "com.google.javascript.jscomp.DefaultPassConfig$95",
233:       "com.google.javascript.jscomp.DefaultPassConfig$94",
234:       "com.google.javascript.jscomp.DefaultPassConfig$96",
235:       "com.google.javascript.jscomp.CustomPassExecutionTime",
236:       "com.google.javascript.jscomp.DefaultPassConfig$91",
237:       "com.google.javascript.jscomp.DefaultPassConfig$90",
238:       "com.google.javascript.jscomp.SyntacticScopeCreator",
239:       "com.google.javascript.jscomp.graph.GraphColoring",
240:       "com.google.javascript.jscomp.DefaultPassConfig$93",
241:       "com.google.javascript.jscomp.DefaultPassConfig$92",
242:       "com.google.javascript.rhino.head.debug.DebuggableScript",
243:       "com.google.javascript.jscomp.CompilerOptions$TweakProcessing",
244:       "com.google.common.collect.Hashing",
245:       "com.google.javascript.rhino.head.DefaultErrorReporter",
246:       "com.google.javascript.rhino.jstype.NoType",
247:       "com.google.javascript.jscomp.SourceMap$Format",
248:       "com.google.javascript.rhino.head.Script",
249:       "com.google.common.collect.AbstractMultimap$WrappedCollection",
250:       "com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider",
251:       "com.google.javascript.rhino.TokenStream",
252:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
253:       "com.google.javascript.jscomp.DefaultPassConfig$88",
254:       "com.google.javascript.jscomp.DefaultPassConfig$87",
255:       "com.google.javascript.jscomp.DefaultPassConfig$89",
256:       "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments",
257:       "com.google.javascript.jscomp.DefaultPassConfig$84",
258:       "com.google.javascript.rhino.head.ast.Comment",
259:       "com.google.javascript.jscomp.DefaultPassConfig$83",
260:       "com.google.javascript.jscomp.DefaultPassConfig$86",
261:       "com.google.javascript.jscomp.DefaultPassConfig$85",
262:       "com.google.javascript.jscomp.CodingConventions$Proxy",
263:       "com.google.javascript.jscomp.DefaultPassConfig$80",
264:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt",
265:       "com.google.javascript.jscomp.StatementFusion",
266:       "com.google.javascript.jscomp.DefaultPassConfig$82",
267:       "com.google.javascript.jscomp.DefaultPassConfig$81",
268:       "com.google.common.collect.LinkedHashMultimap",
269:       "com.google.javascript.jscomp.InferJSDocInfo",
270:       "com.google.javascript.rhino.head.optimizer.Codegen",
271:       "com.google.javascript.rhino.head.ast.FunctionCall",
272:       "com.google.javascript.jscomp.RhinoErrorReporter$NewRhinoErrorReporter",
273:       "com.google.javascript.jscomp.NodeUtil",
274:       "com.google.common.collect.RegularImmutableSet",
275:       "com.google.javascript.jscomp.DefaultPassConfig$77",
276:       "com.google.javascript.jscomp.JsMessageVisitor",
277:       "com.google.javascript.jscomp.DefaultPassConfig$76",
278:       "com.google.javascript.jscomp.DefaultPassConfig$79",
279:       "com.google.javascript.jscomp.DefaultPassConfig$78",
280:       "com.google.javascript.jscomp.DefaultPassConfig$73",
281:       "com.google.javascript.jscomp.DefaultPassConfig$72",
282:       "com.google.javascript.jscomp.DefaultPassConfig$75",
283:       "com.google.javascript.rhino.head.EcmaError",
284:       "com.google.javascript.rhino.head.FunctionObject",
285:       "com.google.javascript.jscomp.DefaultPassConfig$74",
286:       "com.google.javascript.jscomp.DefaultPassConfig$71",
287:       "com.google.javascript.jscomp.DefaultPassConfig$70",
288:       "com.google.javascript.rhino.head.NativeContinuation",
289:       "com.google.javascript.rhino.head.xml.XMLObject",
290:       "com.google.javascript.rhino.head.Node$NodeIterator",
291:       "com.google.common.collect.ImmutableAsList",
292:       "com.google.javascript.jscomp.PassConfig",
293:       "com.google.javascript.jscomp.ConcreteType$ConcreteInstanceType",
294:       "com.google.common.collect.SingletonImmutableSet",
295:       "com.google.javascript.jscomp.DefaultPassConfig$69",
296:       "com.google.javascript.jscomp.Normalize$NormalizeStatements",
297:       "com.google.javascript.rhino.head.InterpretedFunction",
298:       "com.google.javascript.jscomp.DefaultPassConfig$66",
299:       "com.google.javascript.jscomp.DefaultPassConfig$65",
300:       "com.google.javascript.jscomp.DefaultPassConfig$68",
301:       "com.google.javascript.jscomp.DefaultPassConfig$67",
302:       "com.google.javascript.rhino.jstype.ParameterizedType",
303:       "com.google.javascript.jscomp.DefaultPassConfig$62",
304:       "com.google.javascript.jscomp.DefaultPassConfig$61",
305:       "com.google.javascript.rhino.Node$SideEffectFlags",
306:       "com.google.javascript.jscomp.DefaultPassConfig$64",
307:       "com.google.javascript.jscomp.DefaultPassConfig$63",
308:       "com.google.javascript.jscomp.DefaultPassConfig$60",
309:       "com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceMap",
310:       "com.google.javascript.rhino.jstype.NullType",
311:       "com.google.common.collect.EmptyImmutableList$1",
312:       "com.google.javascript.jscomp.LightweightMessageFormatter",
313:       "com.google.javascript.jscomp.Compiler$CodeBuilder",
314:       "com.google.javascript.jscomp.FunctionInformationMapOrBuilder",
315:       "com.google.javascript.jscomp.DefaultPassConfig$HotSwapPassFactory",
316:       "com.google.javascript.jscomp.ClosureCodingConvention$AssertInstanceofSpec",
317:       "com.google.javascript.rhino.jstype.NoObjectType",
318:       "com.google.javascript.jscomp.CleanupPasses$1",
319:       "com.google.common.collect.AbstractIterator",
320:       "com.google.javascript.rhino.head.ScriptableObject$GetterSlot",
321:       "com.google.javascript.jscomp.BasicErrorManager$ErrorWithLevel",
322:       "com.google.common.base.CharMatcher$And",
323:       "com.google.javascript.jscomp.DiagnosticType",
324:       "com.google.javascript.jscomp.DefaultPassConfig$59",
325:       "com.google.javascript.jscomp.DefaultPassConfig$58",
326:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler$NullAliasTransformation",
327:       "com.google.javascript.jscomp.graph.DiGraph$DiGraphNode",
328:       "com.google.javascript.jscomp.CleanupPasses$3",
329:       "com.google.javascript.jscomp.CleanupPasses$2",
330:       "com.google.javascript.jscomp.PrepareAst",
331:       "com.google.javascript.jscomp.DefaultPassConfig$55",
332:       "com.google.javascript.rhino.head.ast.ForLoop",
333:       "com.google.javascript.jscomp.DefaultPassConfig$54",
334:       "com.google.javascript.jscomp.DefaultPassConfig$57",
335:       "com.google.javascript.jscomp.DefaultPassConfig$56",
336:       "com.google.common.io.OutputSupplier",
337:       "com.google.javascript.jscomp.DefaultPassConfig$51",
338:       "com.google.javascript.jscomp.DefaultPassConfig$50",
339:       "com.google.javascript.jscomp.CompilerInput",
340:       "com.google.javascript.jscomp.DefaultPassConfig$53",
341:       "com.google.javascript.jscomp.DefaultPassConfig$52",
342:       "com.google.javascript.rhino.head.ast.FunctionNode",
343:       "com.google.javascript.jscomp.AbstractCompiler",
344:       "com.google.javascript.jscomp.ProcessClosurePrimitives",
345:       "com.google.common.collect.UnmodifiableIterator",
346:       "com.google.javascript.jscomp.ExploitAssigns",
347:       "com.google.javascript.rhino.head.Context",
348:       "com.google.common.io.InputSupplier",
349:       "com.google.javascript.jscomp.DiagnosticGroup",
350:       "com.google.common.collect.ImmutableSet$TransformedImmutableSet",
351:       "com.google.common.collect.AbstractMultimap$WrappedList",
352:       "com.google.javascript.jscomp.CodeChangeHandler$RecentChange",
353:       "com.google.javascript.jscomp.NodeUtil$Visitor",
354:       "com.google.javascript.jscomp.SyntacticScopeCreator$RedeclarationHandler",
355:       "com.google.javascript.rhino.head.NativeBoolean",
356:       "com.google.javascript.jscomp.DefaultPassConfig$48",
357:       "com.google.javascript.rhino.Node$AncestorIterable",
358:       "com.google.javascript.jscomp.DefaultPassConfig$47",
359:       "com.google.common.collect.AbstractMultimap$RandomAccessWrappedList",
360:       "com.google.javascript.rhino.head.ast.Name",
361:       "com.google.javascript.jscomp.DefaultPassConfig$49",
362:       "com.google.common.collect.ImmutableEnumSet",
363:       "com.google.javascript.jscomp.DefaultPassConfig$44",
364:       "com.google.javascript.jscomp.DefaultPassConfig$43",
365:       "com.google.javascript.jscomp.DefaultPassConfig$46",
366:       "com.google.javascript.jscomp.DefaultPassConfig$45",
367:       "com.google.javascript.jscomp.DefaultPassConfig$40",
368:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax$1",
369:       "com.google.common.collect.HashMultiset",
370:       "com.google.javascript.rhino.jstype.UnresolvedTypeExpression",
371:       "com.google.javascript.jscomp.DefaultPassConfig$42",
372:       "com.google.javascript.jscomp.DefaultPassConfig$41",
373:       "com.google.protobuf.AbstractMessageLite",
374:       "com.google.javascript.jscomp.ErrorManager",
375:       "com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate",
376:       "com.google.common.collect.SingletonImmutableList",
377:       "com.google.javascript.rhino.head.ast.ConditionalExpression",
378:       "com.google.javascript.jscomp.CheckLevel",
379:       "com.google.javascript.rhino.jstype.StaticSlot",
380:       "com.google.javascript.rhino.head.ast.PropertyGet",
381:       "com.google.common.collect.AbstractSetMultimap",
382:       "com.google.javascript.rhino.head.ContextFactory",
383:       "com.google.javascript.jscomp.CoalesceVariableNames$1",
384:       "com.google.common.base.Function",
385:       "com.google.javascript.rhino.head.VMBridge",
386:       "com.google.common.collect.ImmutableMap",
387:       "com.google.javascript.jscomp.DefaultPassConfig$37",
388:       "com.google.common.collect.Multiset$Entry",
389:       "com.google.javascript.jscomp.DefaultPassConfig$36",
390:       "com.google.javascript.jscomp.DefaultPassConfig$39",
391:       "com.google.javascript.jscomp.DefaultPassConfig$38",
392:       "com.google.javascript.jscomp.DefaultPassConfig$33",
393:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
394:       "com.google.javascript.jscomp.DefaultPassConfig$32",
395:       "com.google.javascript.jscomp.DefaultPassConfig$35",
396:       "com.google.javascript.jscomp.DefaultPassConfig$34",
397:       "com.google.javascript.rhino.head.ast.Loop",
398:       "com.google.javascript.jscomp.DefaultPassConfig$31",
399:       "com.google.javascript.jscomp.CrossModuleMethodMotion$IdGenerator",
400:       "com.google.javascript.jscomp.Region",
401:       "com.google.javascript.jscomp.DefaultPassConfig$30",
402:       "com.google.javascript.rhino.IR",
403:       "com.google.javascript.rhino.head.ast.GeneratorExpressionLoop",
404:       "com.google.javascript.jscomp.NodeTraversal$AbstractPostOrderCallback",
405:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
406:       "com.google.javascript.jscomp.DefaultPassConfig",
407:       "com.google.javascript.jscomp.Normalize",
408:       "com.google.javascript.jscomp.CompilerOptions$TracerMode",
409:       "com.google.javascript.jscomp.RhinoErrorReporter$OldRhinoErrorReporter",
410:       "com.google.javascript.jscomp.DefinitionProvider",
411:       "com.google.javascript.jscomp.DefaultPassConfig$29",
412:       "com.google.common.collect.AbstractMultiset",
413:       "com.google.javascript.jscomp.DefaultPassConfig$26",
414:       "com.google.javascript.jscomp.DefaultPassConfig$25",
415:       "com.google.javascript.jscomp.DefaultPassConfig$28",
416:       "com.google.common.collect.Iterators",
417:       "com.google.javascript.jscomp.DefaultPassConfig$27",
418:       "com.google.javascript.rhino.head.IdFunctionCall",
419:       "com.google.javascript.jscomp.DefaultPassConfig$22",
420:       "com.google.javascript.jscomp.DefaultPassConfig$21",
421:       "com.google.javascript.jscomp.DefaultPassConfig$24",
422:       "com.google.javascript.jscomp.DefaultPassConfig$23",
423:       "com.google.javascript.jscomp.ProcessTweaks$TweakFunction",
424:       "com.google.javascript.rhino.head.ast.SwitchStatement",
425:       "com.google.javascript.jscomp.DependencyOptions",
426:       "com.google.javascript.jscomp.DefaultPassConfig$20",
427:       "com.google.common.collect.Multisets$EntrySet",
428:       "com.google.javascript.rhino.head.ast.DoLoop",
429:       "com.google.javascript.jscomp.SourceFile$OnDisk",
430:       "com.google.javascript.rhino.head.ScriptRuntime",
431:       "com.google.javascript.jscomp.DefaultPassConfig$19",
432:       "com.google.javascript.jscomp.DefaultPassConfig$18",
433:       "com.google.javascript.rhino.jstype.JSTypeNative",
434:       "com.google.javascript.rhino.jstype.AllType",
435:       "com.google.javascript.jscomp.DefaultPassConfig$15",
436:       "com.google.javascript.jscomp.DefaultPassConfig$14",
437:       "com.google.common.collect.Maps",
438:       "com.google.common.primitives.Ints",
439:       "com.google.javascript.jscomp.NodeTraversal$AbstractShallowStatementCallback",
440:       "com.google.javascript.jscomp.DefaultPassConfig$17",
441:       "com.google.common.collect.SetMultimap",
442:       "com.google.javascript.rhino.head.ast.ExpressionStatement",
443:       "com.google.javascript.jscomp.DefaultPassConfig$16",
444:       "com.google.javascript.jscomp.DefaultPassConfig$7",
445:       "com.google.javascript.jscomp.DefaultPassConfig$11",
446:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
447:       "com.google.javascript.jscomp.DefaultPassConfig$8",
448:       "com.google.javascript.jscomp.DefaultPassConfig$10",
449:       "com.google.javascript.jscomp.DefaultPassConfig$5",
450:       "com.google.javascript.jscomp.DefaultPassConfig$13",
451:       "com.google.javascript.jscomp.DefaultPassConfig$6",
452:       "com.google.javascript.jscomp.DefaultPassConfig$12",
453:       "com.google.javascript.rhino.JSTypeExpression",
454:       "com.google.javascript.jscomp.DefaultPassConfig$9",
455:       "com.google.javascript.rhino.head.ScriptableObject",
456:       "com.google.javascript.rhino.head.IdScriptableObject",
457:       "com.google.javascript.rhino.head.NativeFunction",
458:       "com.google.common.collect.RegularImmutableMap$Values",
459:       "com.google.javascript.jscomp.DefaultPassConfig$3",
460:       "com.google.javascript.jscomp.DefaultPassConfig$4",
461:       "com.google.javascript.jscomp.DefaultPassConfig$1",
462:       "com.google.javascript.jscomp.DefaultPassConfig$2",
463:       "com.google.javascript.rhino.head.ast.ObjectProperty",
464:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
465:       "com.google.javascript.rhino.head.Icode",
466:       "com.google.javascript.jscomp.type.ReverseAbstractInterpreter",
467:       "com.google.javascript.jscomp.graph.GraphColoring$GreedyGraphColoring",
468:       "com.google.javascript.jscomp.CompilerOptions$LanguageMode",
469:       "com.google.javascript.rhino.head.ast.UnaryExpression",
470:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
471:       "com.google.javascript.rhino.jstype.ArrowType",
472:       "com.google.javascript.rhino.SimpleErrorReporter",
473:       "com.google.common.collect.Lists$RandomAccessPartition",
474:       "com.google.javascript.jscomp.type.FlowScope",
475:       "com.google.javascript.rhino.head.WrappedException",
476:       "com.google.javascript.jscomp.graph.GraphNode",
477:       "com.google.javascript.jscomp.TightenTypes$ConcreteScope",
478:       "com.google.javascript.rhino.jstype.NumberType",
479:       "com.google.javascript.rhino.head.debug.DebuggableObject",
480:       "com.google.javascript.rhino.head.Function",
481:       "com.google.javascript.jscomp.PassFactory",
482:       "com.google.javascript.rhino.Node$IntPropListItem",
483:       "com.google.common.collect.Sets$2",
484:       "com.google.common.collect.Sets$3",
485:       "com.google.javascript.rhino.head.ast.LetNode",
486:       "com.google.common.collect.Sets$1",
487:       "com.google.javascript.jscomp.parsing.IRFactory$1",
488:       "com.google.javascript.jscomp.TypeInferencePass",
489:       "com.google.javascript.jscomp.ControlFlowGraph",
490:       "com.google.javascript.jscomp.graph.GraphvizGraph",
491:       "com.google.javascript.rhino.head.ContextFactory$Listener",
492:       "com.google.javascript.rhino.head.NativeCall",
493:       "com.google.common.collect.AbstractMapEntry",
494:       "com.google.javascript.rhino.Node$AncestorIterable$1",
495:       "com.google.common.collect.Iterators$12",
496:       "com.google.common.collect.Iterators$11",
497:       "com.google.javascript.jscomp.ClosureCodingConvention",
498:       "com.google.common.base.Predicate",
499:       "com.google.common.collect.AbstractMultimap$AsMap",
500:       "com.google.javascript.jscomp.ControlStructureCheck",
501:       "com.google.javascript.jscomp.VariableReferenceCheck",
502:       "com.google.javascript.jscomp.WarningsGuard",
503:       "com.google.javascript.jscomp.SourceMap",
504:       "com.google.javascript.rhino.head.ast.ForInLoop",
505:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
506:       "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
507:       "com.google.common.collect.AbstractListMultimap",
508:       "com.google.javascript.jscomp.LightweightMessageFormatter$LineNumberingFormatter",
509:       "com.google.javascript.jscomp.CompilerOptions",
510:       "com.google.javascript.rhino.Node$StringNode",
511:       "com.google.javascript.rhino.jstype.TemplateType",
512:       "com.google.javascript.rhino.jstype.NamedType",
513:       "com.google.common.collect.Iterators$14",
514:       "com.google.common.collect.Iterators$13",
515:       "com.google.common.collect.Lists",
516:       "com.google.javascript.jscomp.CheckProvides",
517:       "com.google.javascript.rhino.head.ast.Block",
518:       "com.google.common.collect.UnmodifiableListIterator",
519:       "com.google.javascript.rhino.head.ast.SwitchCase",
520:       "com.google.common.io.ByteArrayDataInput",
521:       "com.google.javascript.jscomp.RhinoErrorReporter",
522:       "com.google.javascript.jscomp.CompilerOptions$AliasTransformation",
523:       "com.google.javascript.rhino.jstype.UnknownType",
524:       "com.google.common.base.Charsets",
525:       "com.google.javascript.rhino.head.ast.StringLiteral",
526:       "com.google.javascript.jscomp.CheckGlobalNames",
527:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
528:       "com.google.javascript.rhino.jstype.StaticSourceFile",
529:       "org.mozilla.classfile.ClassFileWriter$ClassFileFormatException",
530:       "com.google.javascript.rhino.head.ScriptableObject$Slot",
531:       "com.google.javascript.rhino.head.ast.ReturnStatement",
532:       "com.google.javascript.jscomp.ConcreteType$ConcreteFunctionType",
533:       "com.google.common.base.CharMatcher",
534:       "com.google.javascript.rhino.jstype.JSType$TypePair",
535:       "com.google.common.base.Joiner$MapJoiner",
536:       "com.google.javascript.jscomp.CheckRegExp",
537:       "com.google.javascript.jscomp.CheckGlobalThis",
538:       "com.google.common.collect.RegularImmutableMap$NonTerminalEntry",
539:       "com.google.common.collect.AbstractMultiset$EntrySet",
540:       "com.google.javascript.jscomp.ConcreteType$Factory",
541:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt$2",
542:       "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
543:       "com.google.common.base.Preconditions",
544:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt$1",
545:       "com.google.javascript.rhino.head.ast.ArrayLiteral",
546:       "com.google.javascript.rhino.head.ast.RegExpLiteral",
547:       "com.google.javascript.jscomp.BasicErrorManager",
548:       "com.google.javascript.jscomp.SourceFile$Generator",
549:       "com.google.javascript.jscomp.PerformanceTracker",
550:       "com.google.javascript.rhino.jstype.IndexedType",
551:       "com.google.javascript.jscomp.NodeUtil$MatchNodeType",
552:       "com.google.javascript.jscomp.ComposeWarningsGuard$GuardComparator",
553:       "com.google.javascript.jscomp.ProcessDefines",
554:       "com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph",
555:       "com.google.javascript.rhino.head.NativeArray",
556:       "com.google.javascript.jscomp.PeepholeFoldConstants",
557:       "com.google.javascript.rhino.Node$NumberNode",
558:       "com.google.javascript.jscomp.Scope",
559:       "com.google.common.io.ByteArrayDataOutput",
560:       "com.google.javascript.rhino.head.Parser",
561:       "com.google.common.collect.Iterators$6",
562:       "com.google.javascript.jscomp.ErrorFormat$2",
563:       "com.google.javascript.jscomp.SourceInformationAnnotator",
564:       "com.google.common.collect.BiMap",
565:       "com.google.common.collect.Iterators$7",
566:       "com.google.javascript.rhino.head.NativeString",
567:       "com.google.javascript.jscomp.ErrorFormat$3",
568:       "com.google.javascript.jscomp.ErrorFormat$4",
569:       "com.google.javascript.rhino.head.ast.XmlRef",
570:       "com.google.common.collect.ImmutableSet",
571:       "com.google.javascript.jscomp.PeepholeReplaceKnownMethods",
572:       "com.google.javascript.jscomp.AbstractPeepholeOptimization",
573:       "com.google.javascript.rhino.jstype.JSTypeRegistry$ResolveMode",
574:       "com.google.javascript.rhino.head.ast.ElementGet",
575:       "com.google.common.collect.Iterators$1",
576:       "com.google.javascript.jscomp.DisambiguateProperties$Warnings",
577:       "com.google.common.collect.Iterators$2",
578:       "com.google.common.collect.Iterators$3",
579:       "com.google.javascript.jscomp.parsing.Annotation",
580:       "com.google.javascript.jscomp.AbstractMessageFormatter",
581:       "com.google.javascript.jscomp.DefinitionSite",
582:       "com.google.common.collect.Lists$StringAsImmutableList",
583:       "com.google.javascript.rhino.head.JavaScriptException",
584:       "com.google.javascript.rhino.head.ast.IdeErrorReporter",
585:       "com.google.javascript.jscomp.ProcessTweaks",
586:       "com.google.javascript.jscomp.NodeUtil$1",
587:       "com.google.javascript.rhino.head.ast.TryStatement",
588:       "com.google.javascript.jscomp.parsing.IRFactory",
589:       "com.google.javascript.rhino.head.TopLevel",
590:       "com.google.javascript.jscomp.ErrorFormat$1",
591:       "com.google.javascript.jscomp.Compiler$3",
592:       "com.google.javascript.jscomp.PrepareAst$PrepareAnnotations",
593:       "com.google.common.collect.AbstractMultimap",
594:       "com.google.common.base.Predicates$ObjectPredicate$1",
595:       "com.google.common.collect.EmptyImmutableSet",
596:       "com.google.javascript.jscomp.UseSite",
597:       "com.google.common.io.Files",
598:       "com.google.javascript.jscomp.NodeUtil$MatchNotFunction",
599:       "com.google.javascript.jscomp.LinkedFlowScope$FlatFlowScopeCache",
600:       "com.google.javascript.jscomp.parsing.Config$LanguageMode",
601:       "com.google.javascript.rhino.head.ast.ArrayComprehension",
602:       "com.google.javascript.jscomp.OptimizeCalls$CallGraphCompilerPass",
603:       "com.google.protobuf.AbstractMessage",
604:       "com.google.javascript.jscomp.CodingConvention$Bind",
605:       "com.google.javascript.rhino.head.ScriptRuntime$1",
606:       "com.google.javascript.jscomp.PassFactory$1",
607:       "com.google.javascript.rhino.head.ObjToIntMap",
608:       "com.google.javascript.jscomp.PeepholeRemoveDeadCode",
609:       "com.google.common.collect.ImmutableMap$Builder",
610:       "com.google.javascript.rhino.head.ConstProperties",
611:       "com.google.javascript.jscomp.deps.SortedDependencies$MissingProvideException",
612:       "com.google.common.base.Predicates$ObjectPredicate$4",
613:       "com.google.javascript.jscomp.ReorderConstantExpression",
614:       "com.google.common.base.Predicates$ObjectPredicate$3",
615:       "com.google.javascript.jscomp.LinkedFlowScope",
616:       "com.google.common.base.Predicates$ObjectPredicate$2",
617:       "com.google.javascript.jscomp.NodeUtil$MatchNameNode",
618:       "com.google.javascript.jscomp.graph.LinkedUndirectedGraph",
619:       "com.google.common.collect.ListMultimap",
620:       "com.google.javascript.rhino.JSDocInfo$Visibility",
621:       "com.google.javascript.rhino.head.ast.DestructuringForm",
622:       "com.google.javascript.jscomp.SourceMap$Format$4",
623:       "com.google.javascript.jscomp.SourceMap$Format$3",
624:       "com.google.javascript.jscomp.SourceMap$Format$2",
625:       "com.google.javascript.jscomp.SourceMap$Format$1",
626:       "com.google.javascript.jscomp.SourceAst",
627:       "com.google.javascript.rhino.jstype.TernaryValue$1",
628:       "com.google.common.base.Predicates$ObjectPredicate",
629:       "com.google.common.collect.RegularImmutableList",
630:       "com.google.javascript.jscomp.MessageBundle",
631:       "com.google.javascript.rhino.jstype.TernaryValue$3",
632:       "com.google.javascript.rhino.jstype.TernaryValue$2",
633:       "com.google.javascript.jscomp.CheckUnreachableCode",
634:       "com.google.javascript.jscomp.SourceExcerptProvider",
635:       "com.google.common.collect.Lists$TransformingRandomAccessList",
636:       "com.google.javascript.rhino.head.ScriptableObject$RelinkedSlot",
637:       "com.google.javascript.jscomp.ReferenceCollectingCallback$Behavior",
638:       "com.google.javascript.rhino.Node$PropListItem",
639:       "com.google.common.collect.RegularImmutableMap$KeySet",
640:       "com.google.common.collect.Maps$KeySet",
641:       "com.google.javascript.rhino.Node",
642:       "com.google.javascript.rhino.head.RhinoException",
643:       "com.google.javascript.rhino.head.ast.EmptyExpression",
644:       "com.google.javascript.rhino.head.ast.XmlLiteral",
645:       "com.google.javascript.rhino.head.ast.ContinueStatement",
646:       "com.google.javascript.jscomp.LoggerErrorManager",
647:       "com.google.javascript.jscomp.ComposeWarningsGuard",
648:       "com.google.javascript.jscomp.NodeTraversal",
649:       "com.google.javascript.rhino.head.ErrorReporter",
650:       "com.google.javascript.jscomp.NodeTraversal$AbstractScopedCallback",
651:       "com.google.common.collect.Multisets",
652:       "com.google.javascript.jscomp.VariableMap",
653:       "com.google.javascript.jscomp.JsAst",
654:       "com.google.javascript.rhino.head.ast.XmlMemberGet",
655:       "com.google.javascript.jscomp.ErrorFormat",
656:       "com.google.javascript.rhino.head.ast.Scope",
657:       "com.google.javascript.jscomp.AbstractCompiler$LifeCycleStage",
658:       "com.google.javascript.jscomp.ConcreteType",
659:       "com.google.javascript.rhino.head.Scriptable",
660:       "com.google.javascript.jscomp.JqueryCodingConvention",
661:       "com.google.common.io.ByteStreams",
662:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
663:       "com.google.javascript.jscomp.NodeUtil$BooleanResultPredicate",
664:       "com.google.javascript.jscomp.TightenTypes",
665:       "com.google.javascript.rhino.jstype.VoidType",
666:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler",
667:       "com.google.javascript.rhino.jstype.JSType",
668:       "com.google.common.io.ByteProcessor",
669:       "com.google.javascript.jscomp.ControlFlowGraph$Branch",
670:       "com.google.javascript.jscomp.ConvertToDottedProperties",
671:       "com.google.common.collect.Sets$SetView",
672:       "com.google.javascript.jscomp.SyntheticAst",
673:       "com.google.javascript.jscomp.DiagnosticGroups",
674:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
675:       "com.google.javascript.jscomp.ScopeCreator",
676:       "com.google.common.collect.RegularImmutableMap$TerminalEntry",
677:       "com.google.common.base.Predicates",
678:       "com.google.javascript.jscomp.graph.AdjacencyGraph",
679:       "com.google.javascript.jscomp.deps.SortedDependencies$CircularDependencyException",
680:       "com.google.common.collect.Lists$TransformingSequentialList",
681:       "com.google.javascript.rhino.head.NativeNumber",
682:       "com.google.javascript.jscomp.SourceFile",
683:       "com.google.javascript.rhino.head.ast.BreakStatement",
684:       "com.google.javascript.jscomp.PropertyRenamingPolicy",
685:       "com.google.javascript.rhino.jstype.FunctionBuilder",
686:       "com.google.javascript.jscomp.CodingConvention$DelegateRelationship",
687:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax$FoldArrayAction",
688:       "com.google.javascript.rhino.head.ast.WithStatement",
689:       "com.google.javascript.rhino.head.ScriptRuntime$MessageProvider",
690:       "com.google.common.collect.MapDifference",
691:       "com.google.javascript.jscomp.CompilerOptions$AliasTransformationHandler",
692:       "com.google.javascript.jscomp.CodingConvention$AssertionFunctionSpec",
693:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
694:       "com.google.javascript.jscomp.SourceFile$Generated",
695:       "com.google.javascript.rhino.jstype.FunctionType",
696:       "com.google.javascript.rhino.head.ast.AstNode",
697:       "com.google.javascript.jscomp.Compiler",
698:       "com.google.javascript.jscomp.PassConfig$PassConfigDelegate",
699:       "com.google.javascript.jscomp.NodeTraversal$ScopedCallback",
700:       "com.google.javascript.jscomp.TypedScopeCreator",
701:       "com.google.common.base.CharMatcher$12",
702:       "com.google.common.base.CharMatcher$11",
703:       "com.google.javascript.rhino.head.Node",
704:       "com.google.common.base.CharMatcher$10",
705:       "com.google.javascript.rhino.jstype.TernaryValue",
706:       "com.google.common.io.Files$1",
707:       "com.google.javascript.jscomp.JSError",
708:       "com.google.common.base.CharMatcher$15",
709:       "com.google.common.base.CharMatcher$14",
710:       "com.google.common.collect.Lists$RandomAccessListWrapper",
711:       "com.google.common.base.CharMatcher$13",
712:       "com.google.common.base.Platform",
713:       "com.google.javascript.jscomp.TypedScopeCreator$GlobalScopeBuilder",
714:       "com.google.javascript.jscomp.PeepholeFoldWithTypes",
715:       "com.google.javascript.rhino.head.ast.KeywordLiteral",
716:       "com.google.javascript.jscomp.NodeTraversal$AbstractShallowCallback",
717:       "com.google.javascript.rhino.head.ast.Assignment",
718:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
719:       "com.google.javascript.rhino.jstype.UnionType",
720:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
721:       "com.google.javascript.rhino.head.ast.LabeledStatement",
722:       "com.google.javascript.jscomp.ControlFlowAnalysis",
723:       "com.google.javascript.jscomp.graph.LatticeElement",
724:       "com.google.common.collect.AbstractIndexedListIterator",
725:       "com.google.javascript.rhino.head.ast.XmlExpression",
726:       "com.google.javascript.jscomp.JSModuleGraph",
727:       "com.google.javascript.jscomp.GatherRawExports",
728:       "com.google.common.collect.AbstractMultimap$SortedKeySet",
729:       "com.google.javascript.jscomp.SyntacticScopeCreator$DefaultRedeclarationHandler",
730:       "com.google.common.collect.Sets",
731:       "com.google.common.collect.ImmutableCollection$EmptyImmutableCollection",
732:       "com.google.javascript.rhino.head.Kit",
733:       "com.google.javascript.jscomp.TypedScopeCreator$LocalScopeBuilder",
734:       "com.google.javascript.jscomp.BasicErrorManager$LeveledJSErrorComparator",
735:       "com.google.javascript.rhino.Node$ObjectPropListItem",
736:       "com.google.javascript.rhino.head.jdk15.VMBridge_jdk15",
737:       "com.google.javascript.rhino.head.ContextAction",
738:       "com.google.javascript.rhino.head.EvaluatorException",
739:       "com.google.javascript.jscomp.ProcessCommonJSModules",
740:       "com.google.javascript.rhino.head.ast.NumberLiteral",
741:       "com.google.common.collect.AbstractMultimap$SortedAsMap",
742:       "com.google.javascript.jscomp.Compiler$IntermediateState",
743:       "com.google.javascript.rhino.head.ast.ErrorNode",
744:       "com.google.common.collect.EmptyImmutableMap",
745:       "com.google.common.collect.Multimap",
746:       "com.google.javascript.jscomp.SourceMap$DetailLevel$2",
747:       "com.google.javascript.jscomp.SourceMap$DetailLevel$1",
748:       "com.google.javascript.jscomp.VarCheck",
749:       "com.google.javascript.jscomp.CompilerOptions$DevMode",
750:       "com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder",
751:       "com.google.javascript.rhino.head.Interpreter",
752:       "com.google.javascript.rhino.jstype.StringType",
753:       "com.google.javascript.rhino.head.ImporterTopLevel",
754:       "com.google.javascript.rhino.jstype.StaticSymbolTable",
755:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
756:       "com.google.javascript.jscomp.JSModuleGraph$ModuleDependenceException",
757:       "com.google.javascript.jscomp.graph.DiGraph",
758:       "com.google.common.base.Platform$1",
759:       "com.google.javascript.jscomp.parsing.ParserRunner",
760:       "com.google.common.collect.RegularImmutableMap$EntrySet",
761:       "com.google.javascript.rhino.head.ast.GeneratorExpression",
762:       "com.google.javascript.rhino.head.ast.XmlDotQuery",
763:       "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement",
764:       "com.google.javascript.jscomp.ConstCheck",
765:       "com.google.javascript.rhino.jstype.Visitor",
766:       "com.google.javascript.jscomp.TypeCheck",
767:       "com.google.javascript.jscomp.SymbolTable",
768:       "com.google.javascript.jscomp.deps.DependencyInfo",
769:       "com.google.javascript.jscomp.Compiler$10",
770:       "com.google.javascript.jscomp.WarningsGuard$Priority",
771:       "com.google.javascript.rhino.head.ContextFactory$GlobalSetter",
772:       "com.google.common.base.CharMatcher$Or",
773:       "com.google.javascript.rhino.head.ast.NodeVisitor",
774:       "com.google.protobuf.Message",
775:       "com.google.javascript.rhino.head.ast.ArrayComprehensionLoop",
776:       "com.google.javascript.rhino.head.Parser$ParserException",
777:       "com.google.javascript.rhino.head.NativeObject"
778:     );
779:   } 
780: 
781:   private static void resetClasses() {
782:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NodeUtil_113_tmp__ESTest_scaffolding.class.getClassLoader()); 
783: 
784:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
785:       "com.google.common.collect.ImmutableCollection$EmptyImmutableCollection",
786:       "com.google.common.collect.ImmutableCollection",
787:       "com.google.common.collect.ImmutableSet",
788:       "com.google.common.collect.Hashing",
789:       "com.google.common.collect.ImmutableSet$ArrayImmutableSet",
790:       "com.google.common.collect.RegularImmutableSet",
791:       "com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate",
792:       "com.google.javascript.jscomp.NodeUtil$BooleanResultPredicate",
793:       "com.google.javascript.jscomp.NodeUtil$MayBeStringResultPredicate",
794:       "com.google.javascript.jscomp.NodeUtil$MatchNotFunction",
795:       "com.google.javascript.jscomp.NodeUtil",
796:       "com.google.javascript.jscomp.NodeUtil$MatchNodeType",
797:       "com.google.javascript.jscomp.NodeUtil$MatchNameNode",
798:       "com.google.javascript.jscomp.NodeUtil$VarCollector",
799:       "com.google.javascript.rhino.jstype.TernaryValue",
800:       "com.google.common.base.Predicates$ObjectPredicate",
801:       "com.google.javascript.rhino.Node",
802:       "com.google.javascript.rhino.Node$StringNode",
803:       "com.google.common.base.Preconditions",
804:       "com.google.javascript.jscomp.AbstractPeepholeOptimization",
805:       "com.google.javascript.jscomp.ReorderConstantExpression",
806:       "com.google.javascript.jscomp.AbstractMessageFormatter",
807:       "com.google.javascript.jscomp.LightweightMessageFormatter$LineNumberingFormatter",
808:       "com.google.javascript.jscomp.LightweightMessageFormatter",
809:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt",
810:       "com.google.javascript.jscomp.BasicErrorManager",
811:       "com.google.javascript.jscomp.LoggerErrorManager",
812:       "com.google.javascript.jscomp.BasicErrorManager$LeveledJSErrorComparator",
813:       "com.google.common.collect.Sets",
814:       "com.google.javascript.jscomp.DiagnosticType",
815:       "com.google.javascript.jscomp.AbstractCompiler",
816:       "com.google.javascript.jscomp.Compiler",
817:       "com.google.javascript.jscomp.AbstractCompiler$LifeCycleStage",
818:       "com.google.common.base.Joiner",
819:       "com.google.common.collect.Collections2",
820:       "com.google.common.base.Joiner$MapJoiner",
821:       "com.google.common.collect.Maps",
822:       "com.google.javascript.jscomp.CodingConventions$Proxy",
823:       "com.google.javascript.jscomp.ClosureCodingConvention",
824:       "com.google.javascript.jscomp.CodingConventions",
825:       "com.google.javascript.jscomp.CodingConventions$DefaultCodingConvention",
826:       "com.google.common.collect.ImmutableList",
827:       "com.google.common.collect.UnmodifiableIterator",
828:       "com.google.common.collect.UnmodifiableListIterator",
829:       "com.google.common.collect.EmptyImmutableList$1",
830:       "com.google.common.collect.EmptyImmutableList",
831:       "com.google.common.collect.Iterators$1",
832:       "com.google.common.collect.Iterators$2",
833:       "com.google.common.collect.Iterators",
834:       "com.google.javascript.jscomp.RhinoErrorReporter",
835:       "com.google.javascript.jscomp.RhinoErrorReporter$OldRhinoErrorReporter",
836:       "com.google.javascript.rhino.head.Kit",
837:       "com.google.javascript.rhino.head.optimizer.Codegen",
838:       "com.google.javascript.rhino.head.Icode",
839:       "com.google.javascript.rhino.head.Interpreter",
840:       "com.google.javascript.rhino.head.Context",
841:       "com.google.javascript.rhino.head.ContextFactory",
842:       "com.google.javascript.rhino.head.ScriptableObject",
843:       "com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider",
844:       "com.google.javascript.rhino.head.ScriptRuntime",
845:       "com.google.javascript.rhino.head.jdk13.VMBridge_jdk13",
846:       "com.google.javascript.rhino.head.jdk15.VMBridge_jdk15",
847:       "com.google.javascript.rhino.head.VMBridge",
848:       "com.google.javascript.rhino.ScriptRuntime",
849:       "com.google.common.collect.ImmutableMap",
850:       "com.google.common.collect.RegularImmutableMap",
851:       "com.google.common.collect.AbstractMapEntry",
852:       "com.google.common.collect.ImmutableEntry",
853:       "com.google.common.collect.RegularImmutableMap$TerminalEntry",
854:       "com.google.javascript.jscomp.RhinoErrorReporter$NewRhinoErrorReporter",
855:       "com.google.javascript.jscomp.PassFactory",
856:       "com.google.javascript.jscomp.Compiler$3",
857:       "com.google.javascript.jscomp.CodeChangeHandler$RecentChange",
858:       "com.google.common.collect.Lists",
859:       "com.google.javascript.jscomp.InlineProperties$PropertyInfo",
860:       "com.google.javascript.jscomp.InlineProperties",
861:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
862:       "com.google.javascript.rhino.SimpleErrorReporter",
863:       "com.google.common.collect.AbstractMultimap",
864:       "com.google.common.collect.AbstractSetMultimap",
865:       "com.google.common.collect.LinkedHashMultimap",
866:       "com.google.common.collect.AbstractListMultimap",
867:       "com.google.common.collect.ArrayListMultimap",
868:       "com.google.javascript.rhino.jstype.JSTypeRegistry$ResolveMode",
869:       "com.google.javascript.rhino.jstype.JSTypeNative",
870:       "com.google.javascript.rhino.jstype.JSType$1",
871:       "com.google.javascript.rhino.jstype.JSType",
872:       "com.google.javascript.rhino.jstype.ValueType",
873:       "com.google.javascript.rhino.jstype.BooleanType",
874:       "com.google.javascript.rhino.jstype.NullType",
875:       "com.google.javascript.rhino.jstype.NumberType",
876:       "com.google.javascript.rhino.jstype.StringType",
877:       "com.google.javascript.rhino.jstype.ObjectType",
878:       "com.google.javascript.rhino.jstype.UnknownType",
879:       "com.google.javascript.rhino.jstype.VoidType",
880:       "com.google.javascript.rhino.jstype.AllType",
881:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
882:       "com.google.javascript.rhino.jstype.FunctionType",
883:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
884:       "com.google.javascript.rhino.Node$AbstractPropListItem",
885:       "com.google.javascript.rhino.Node$IntPropListItem",
886:       "com.google.javascript.rhino.jstype.ArrowType",
887:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
888:       "com.google.javascript.rhino.jstype.InstanceObjectType",
889:       "com.google.javascript.rhino.jstype.ObjectType$Property",
890:       "com.google.javascript.rhino.jstype.NoObjectType",
891:       "com.google.javascript.rhino.jstype.NoType",
892:       "com.google.javascript.rhino.jstype.NoResolvedType",
893:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
894:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
895:       "com.google.javascript.rhino.jstype.UnionType",
896:       "com.google.common.collect.RegularImmutableList",
897:       "com.google.javascript.rhino.jstype.FunctionBuilder",
898:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
899:       "com.google.javascript.rhino.Token",
900:       "com.google.javascript.rhino.IR",
901:       "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments",
902:       "com.google.javascript.jscomp.GoogleCodingConvention",
903:       "com.google.javascript.jscomp.NodeTraversal$AbstractPostOrderCallback",
904:       "com.google.javascript.jscomp.CoalesceVariableNames$1",
905:       "com.google.javascript.jscomp.CoalesceVariableNames",
906:       "com.google.javascript.jscomp.NodeTraversal",
907:       "com.google.javascript.jscomp.SyntacticScopeCreator",
908:       "com.google.javascript.jscomp.SyntacticScopeCreator$DefaultRedeclarationHandler",
909:       "com.google.javascript.rhino.Node$ObjectPropListItem",
910:       "com.google.javascript.jscomp.JqueryCodingConvention",
911:       "com.google.javascript.rhino.Node$NumberNode",
912:       "com.google.javascript.jscomp.JSModule",
913:       "com.google.javascript.jscomp.VerboseMessageFormatter",
914:       "com.google.javascript.jscomp.PrintStreamErrorManager",
915:       "com.google.javascript.jscomp.PeepholeRemoveDeadCode",
916:       "com.google.javascript.jscomp.ErrorFormat",
917:       "com.google.javascript.jscomp.ControlFlowAnalysis",
918:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler$NullAliasTransformation",
919:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler",
920:       "com.google.javascript.jscomp.CompilerOptions",
921:       "com.google.javascript.jscomp.DependencyOptions",
922:       "com.google.javascript.jscomp.ProcessCommonJSModules",
923:       "com.google.javascript.jscomp.WarningsGuard",
924:       "com.google.javascript.jscomp.ComposeWarningsGuard",
925:       "com.google.common.primitives.Ints",
926:       "com.google.javascript.jscomp.ComposeWarningsGuard$GuardComparator",
927:       "com.google.javascript.jscomp.SourceMap$DetailLevel",
928:       "com.google.javascript.jscomp.SourceMap$Format",
929:       "com.google.javascript.jscomp.CompilerOptions$LanguageMode",
930:       "com.google.javascript.jscomp.CompilerOptions$DevMode",
931:       "com.google.javascript.jscomp.VariableRenamingPolicy",
932:       "com.google.javascript.jscomp.PropertyRenamingPolicy",
933:       "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
934:       "com.google.javascript.jscomp.CompilerOptions$TweakProcessing",
935:       "com.google.javascript.jscomp.CompilerOptions$TracerMode",
936:       "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement",
937:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
938:       "com.google.javascript.rhino.TokenStream",
939:       "com.google.javascript.jscomp.SyntheticAst",
940:       "com.google.javascript.rhino.InputId",
941:       "com.google.javascript.jscomp.SourceFile",
942:       "com.google.javascript.jscomp.CompilerInput",
943:       "com.google.javascript.jscomp.JsAst",
944:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
945:       "com.google.javascript.jscomp.StatementFusion",
946:       "com.google.javascript.jscomp.ExploitAssigns",
947:       "com.google.javascript.jscomp.Normalize",
948:       "com.google.javascript.jscomp.CheckGlobalThis",
949:       "com.google.javascript.jscomp.DiagnosticGroup",
950:       "com.google.common.collect.SingletonImmutableSet",
951:       "com.google.javascript.jscomp.CheckAccessControls",
952:       "com.google.common.collect.AbstractIndexedListIterator",
953:       "com.google.common.collect.Iterators$11",
954:       "com.google.javascript.jscomp.TypeValidator",
955:       "com.google.javascript.jscomp.VarCheck",
956:       "com.google.javascript.jscomp.CheckGlobalNames",
957:       "com.google.javascript.jscomp.VariableReferenceCheck",
958:       "com.google.javascript.jscomp.ProcessDefines",
959:       "com.google.common.base.CharMatcher$11",
960:       "com.google.common.base.CharMatcher$12",
961:       "com.google.common.base.CharMatcher$Or",
962:       "com.google.common.base.Platform$1",
963:       "com.google.common.base.Platform",
964:       "com.google.common.base.CharMatcher$LookupTable",
965:       "com.google.common.base.CharMatcher$15",
966:       "com.google.common.base.CharMatcher$8",
967:       "com.google.common.base.CharMatcher$1",
968:       "com.google.common.base.CharMatcher$2",
969:       "com.google.common.base.CharMatcher$3",
970:       "com.google.common.base.CharMatcher$4",
971:       "com.google.common.base.CharMatcher$5",
972:       "com.google.common.base.CharMatcher$6",
973:       "com.google.common.base.CharMatcher$7",
974:       "com.google.common.base.CharMatcher",
975:       "com.google.javascript.jscomp.ProcessTweaks$TweakFunction",
976:       "com.google.javascript.jscomp.ProcessTweaks",
977:       "com.google.javascript.jscomp.TypedScopeCreator",
978:       "com.google.javascript.jscomp.FunctionTypeBuilder",
979:       "com.google.javascript.jscomp.TypeCheck",
980:       "com.google.javascript.jscomp.CheckDebuggerStatement",
981:       "com.google.javascript.jscomp.CheckRegExp",
982:       "com.google.javascript.jscomp.CheckSideEffects",
983:       "com.google.javascript.jscomp.CheckUnreachableCode",
984:       "com.google.javascript.jscomp.ConstCheck",
985:       "com.google.javascript.jscomp.DisambiguateProperties$Warnings",
986:       "com.google.javascript.jscomp.ControlStructureCheck",
987:       "com.google.javascript.jscomp.StrictModeCheck",
988:       "com.google.javascript.jscomp.CheckProvides",
989:       "com.google.javascript.jscomp.JsMessageVisitor",
990:       "com.google.javascript.jscomp.DiagnosticGroups",
991:       "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
992:       "com.google.javascript.jscomp.WarningsGuard$Priority",
993:       "com.google.javascript.jscomp.SuppressDocWarningsGuard",
994:       "com.google.common.collect.RegularImmutableMap$NonTerminalEntry",
995:       "com.google.common.collect.RegularImmutableMap$EntrySet",
996:       "com.google.javascript.jscomp.SourceFile$Builder",
997:       "com.google.common.base.Charsets",
998:       "com.google.javascript.jscomp.SourceFile$Preloaded",
999:       "com.google.javascript.jscomp.Compiler$10",
1000:       "com.google.javascript.jscomp.parsing.Config$LanguageMode",
1001:       "com.google.javascript.jscomp.parsing.ParserRunner",
1002:       "com.google.javascript.jscomp.parsing.Config",
1003:       "com.google.common.collect.ImmutableMap$Builder",
1004:       "com.google.javascript.jscomp.parsing.Annotation",
1005:       "com.google.javascript.rhino.head.DefaultErrorReporter",
1006:       "com.google.javascript.rhino.head.CompilerEnvirons",
1007:       "com.google.javascript.rhino.head.Parser",
1008:       "com.google.javascript.rhino.head.TokenStream",
1009:       "com.google.javascript.rhino.head.ObjToIntMap",
1010:       "com.google.javascript.rhino.head.Node",
1011:       "com.google.javascript.rhino.head.ast.AstNode",
1012:       "com.google.javascript.rhino.head.ast.Jump",
1013:       "com.google.javascript.rhino.head.ast.Scope",
1014:       "com.google.javascript.rhino.head.ast.ScriptNode",
1015:       "com.google.javascript.rhino.head.ast.AstRoot",
1016:       "com.google.javascript.jscomp.parsing.IRFactory",
1017:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
1018:       "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
1019:       "com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher",
1020:       "com.google.javascript.jscomp.parsing.IRFactory$1",
1021:       "com.google.javascript.rhino.head.Node$NodeIterator",
1022:       "com.google.javascript.jscomp.PrepareAst",
1023:       "com.google.javascript.jscomp.PrepareAst$PrepareAnnotations",
1024:       "com.google.javascript.jscomp.Normalize$NormalizeStatements",
1025:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
1026:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$ContextualRenamer",
1027:       "com.google.common.collect.AbstractMultiset",
1028:       "com.google.common.collect.AbstractMapBasedMultiset",
1029:       "com.google.common.collect.HashMultiset",
1030:       "com.google.common.collect.Multisets",
1031:       "com.google.common.collect.Multisets$EntrySet",
1032:       "com.google.common.collect.AbstractMultiset$EntrySet",
1033:       "com.google.common.collect.AbstractMapBasedMultiset$1",
1034:       "com.google.javascript.jscomp.PeepholeFoldWithTypes",
1035:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax$1",
1036:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
1037:       "com.google.javascript.jscomp.PeepholeFoldConstants",
1038:       "com.google.javascript.jscomp.TightenTypes",
1039:       "com.google.javascript.jscomp.TightenTypes$ConcreteScope",
1040:       "com.google.javascript.rhino.head.ast.Name",
1041:       "com.google.javascript.rhino.head.ast.ExpressionStatement",
1042:       "com.google.javascript.jscomp.FunctionRewriter",
1043:       "com.google.javascript.jscomp.SimpleDefinitionFinder",
1044:       "com.google.javascript.rhino.jstype.EnumType",
1045:       "com.google.javascript.rhino.jstype.EnumElementType",
1046:       "com.google.javascript.jscomp.ControlFlowAnalysis$1",
1047:       "com.google.common.collect.HashMultimap",
1048:       "com.google.javascript.jscomp.PeepholeSimplifyRegExp",
1049:       "com.google.javascript.jscomp.PeepholeReplaceKnownMethods",
1050:       "com.google.javascript.rhino.Node$AncestorIterable",
1051:       "com.google.javascript.rhino.Node$AncestorIterable$1",
1052:       "com.google.javascript.jscomp.Compiler$1",
1053:       "com.google.javascript.jscomp.Compiler$2",
1054:       "com.google.javascript.jscomp.Tracer$1",
1055:       "com.google.javascript.jscomp.Tracer$Stat",
1056:       "com.google.javascript.jscomp.Tracer",
1057:       "com.google.javascript.jscomp.Tracer$ThreadTrace",
1058:       "com.google.javascript.jscomp.CodingConvention$AssertionFunctionSpec",
1059:       "com.google.javascript.jscomp.ClosureCodingConvention$AssertInstanceofSpec",
1060:       "com.google.common.base.Predicates",
1061:       "com.google.javascript.rhino.jstype.ModificationVisitor",
1062:       "com.google.javascript.jscomp.Compiler$IntermediateState",
1063:       "com.google.javascript.jscomp.PassConfig",
1064:       "com.google.javascript.jscomp.DefaultPassConfig",
1065:       "com.google.javascript.jscomp.CrossModuleMethodMotion$IdGenerator",
1066:       "com.google.javascript.jscomp.DefaultPassConfig$HotSwapPassFactory",
1067:       "com.google.javascript.jscomp.DefaultPassConfig$1",
1068:       "com.google.javascript.jscomp.DefaultPassConfig$2",
1069:       "com.google.javascript.jscomp.DefaultPassConfig$3",
1070:       "com.google.javascript.jscomp.DefaultPassConfig$4",
1071:       "com.google.javascript.jscomp.DefaultPassConfig$5",
1072:       "com.google.javascript.jscomp.DefaultPassConfig$6",
1073:       "com.google.javascript.jscomp.DefaultPassConfig$7",
1074:       "com.google.javascript.jscomp.DefaultPassConfig$8",
1075:       "com.google.javascript.jscomp.DefaultPassConfig$9",
1076:       "com.google.javascript.jscomp.DefaultPassConfig$10",
1077:       "com.google.javascript.jscomp.DefaultPassConfig$11",
1078:       "com.google.javascript.jscomp.DefaultPassConfig$12",
1079:       "com.google.javascript.jscomp.DefaultPassConfig$13",
1080:       "com.google.javascript.jscomp.DefaultPassConfig$14",
1081:       "com.google.javascript.jscomp.DefaultPassConfig$15",
1082:       "com.google.javascript.jscomp.DefaultPassConfig$16",
1083:       "com.google.javascript.jscomp.DefaultPassConfig$17",
1084:       "com.google.javascript.jscomp.DefaultPassConfig$18",
1085:       "com.google.javascript.jscomp.DefaultPassConfig$19",
1086:       "com.google.javascript.jscomp.DefaultPassConfig$20",
1087:       "com.google.javascript.jscomp.DefaultPassConfig$21",
1088:       "com.google.javascript.jscomp.DefaultPassConfig$22",
1089:       "com.google.javascript.jscomp.DefaultPassConfig$23",
1090:       "com.google.javascript.jscomp.DefaultPassConfig$24",
1091:       "com.google.javascript.jscomp.DefaultPassConfig$25",
1092:       "com.google.javascript.jscomp.DefaultPassConfig$26",
1093:       "com.google.javascript.jscomp.DefaultPassConfig$27",
1094:       "com.google.javascript.jscomp.DefaultPassConfig$28",
1095:       "com.google.javascript.jscomp.DefaultPassConfig$29",
1096:       "com.google.javascript.jscomp.DefaultPassConfig$30",
1097:       "com.google.javascript.jscomp.DefaultPassConfig$31",
1098:       "com.google.javascript.jscomp.DefaultPassConfig$32",
1099:       "com.google.javascript.jscomp.DefaultPassConfig$33",
1100:       "com.google.javascript.jscomp.DefaultPassConfig$34",
1101:       "com.google.javascript.jscomp.DefaultPassConfig$35",
1102:       "com.google.javascript.jscomp.DefaultPassConfig$36",
1103:       "com.google.javascript.jscomp.DefaultPassConfig$37",
1104:       "com.google.javascript.jscomp.DefaultPassConfig$38",
1105:       "com.google.javascript.jscomp.DefaultPassConfig$39",
1106:       "com.google.javascript.jscomp.DefaultPassConfig$40",
1107:       "com.google.javascript.jscomp.DefaultPassConfig$41",
1108:       "com.google.javascript.jscomp.DefaultPassConfig$42",
1109:       "com.google.javascript.jscomp.DefaultPassConfig$43",
1110:       "com.google.javascript.jscomp.DefaultPassConfig$44",
1111:       "com.google.javascript.jscomp.DefaultPassConfig$45",
1112:       "com.google.javascript.jscomp.DefaultPassConfig$46",
1113:       "com.google.javascript.jscomp.DefaultPassConfig$47",
1114:       "com.google.javascript.jscomp.DefaultPassConfig$48",
1115:       "com.google.javascript.jscomp.DefaultPassConfig$49",
1116:       "com.google.javascript.jscomp.DefaultPassConfig$50",
1117:       "com.google.javascript.jscomp.DefaultPassConfig$51",
1118:       "com.google.javascript.jscomp.DefaultPassConfig$52",
1119:       "com.google.javascript.jscomp.DefaultPassConfig$53",
1120:       "com.google.javascript.jscomp.DefaultPassConfig$54",
1121:       "com.google.javascript.jscomp.DefaultPassConfig$55",
1122:       "com.google.javascript.jscomp.DefaultPassConfig$56",
1123:       "com.google.javascript.jscomp.DefaultPassConfig$57",
1124:       "com.google.javascript.jscomp.DefaultPassConfig$58",
1125:       "com.google.javascript.jscomp.DefaultPassConfig$59",
1126:       "com.google.javascript.jscomp.DefaultPassConfig$60",
1127:       "com.google.javascript.jscomp.DefaultPassConfig$61",
1128:       "com.google.javascript.jscomp.DefaultPassConfig$62",
1129:       "com.google.javascript.jscomp.DefaultPassConfig$63",
1130:       "com.google.javascript.jscomp.DefaultPassConfig$64",
1131:       "com.google.javascript.jscomp.DefaultPassConfig$65",
1132:       "com.google.javascript.jscomp.DefaultPassConfig$66",
1133:       "com.google.javascript.jscomp.DefaultPassConfig$67",
1134:       "com.google.javascript.jscomp.DefaultPassConfig$68",
1135:       "com.google.javascript.jscomp.DefaultPassConfig$69",
1136:       "com.google.javascript.jscomp.DefaultPassConfig$70",
1137:       "com.google.javascript.jscomp.DefaultPassConfig$71",
1138:       "com.google.javascript.jscomp.DefaultPassConfig$72",
1139:       "com.google.javascript.jscomp.DefaultPassConfig$73",
1140:       "com.google.javascript.jscomp.DefaultPassConfig$74",
1141:       "com.google.javascript.jscomp.DefaultPassConfig$75",
1142:       "com.google.javascript.jscomp.DefaultPassConfig$76",
1143:       "com.google.javascript.jscomp.DefaultPassConfig$77",
1144:       "com.google.javascript.jscomp.DefaultPassConfig$78",
1145:       "com.google.javascript.jscomp.DefaultPassConfig$79",
1146:       "com.google.javascript.jscomp.DefaultPassConfig$80",
1147:       "com.google.javascript.jscomp.DefaultPassConfig$81",
1148:       "com.google.javascript.jscomp.DefaultPassConfig$82",
1149:       "com.google.javascript.jscomp.DefaultPassConfig$83",
1150:       "com.google.javascript.jscomp.DefaultPassConfig$84",
1151:       "com.google.javascript.jscomp.DefaultPassConfig$85",
1152:       "com.google.javascript.jscomp.DefaultPassConfig$86",
1153:       "com.google.javascript.jscomp.DefaultPassConfig$87",
1154:       "com.google.javascript.jscomp.DefaultPassConfig$88",
1155:       "com.google.javascript.jscomp.DefaultPassConfig$89",
1156:       "com.google.javascript.jscomp.DefaultPassConfig$90",
1157:       "com.google.javascript.jscomp.DefaultPassConfig$91",
1158:       "com.google.javascript.jscomp.DefaultPassConfig$92",
1159:       "com.google.javascript.jscomp.DefaultPassConfig$93",
1160:       "com.google.javascript.jscomp.DefaultPassConfig$94",
1161:       "com.google.javascript.jscomp.DefaultPassConfig$98",
1162:       "com.google.javascript.jscomp.DefaultPassConfig$99",
1163:       "com.google.javascript.jscomp.PassConfig$State",
1164:       "com.google.javascript.jscomp.DefaultPassConfig$32$1",
1165:       "com.google.javascript.jscomp.GroupVariableDeclarations",
1166:       "com.google.javascript.jscomp.LinkedFlowScope",
1167:       "com.google.javascript.jscomp.LinkedFlowScope$FlatFlowScopeCache",
1168:       "com.google.common.collect.EmptyImmutableMap",
1169:       "com.google.common.io.CharStreams",
1170:       "com.google.javascript.jscomp.MemoizedScopeCreator",
1171:       "com.google.javascript.jscomp.NodeUtil$MatchDeclaration",
1172:       "com.google.common.collect.Iterators$12",
1173:       "com.google.javascript.rhino.Node$SideEffectFlags",
1174:       "com.google.javascript.jscomp.CleanupPasses",
1175:       "com.google.javascript.jscomp.CleanupPasses$1",
1176:       "com.google.javascript.jscomp.CleanupPasses$2",
1177:       "com.google.javascript.jscomp.CleanupPasses$3",
1178:       "com.google.javascript.jscomp.PassConfig$PassConfigDelegate",
1179:       "com.google.javascript.rhino.Node$NodeMismatch",
1180:       "com.google.javascript.jscomp.JSError",
1181:       "com.google.javascript.jscomp.BasicErrorManager$ErrorWithLevel",
1182:       "com.google.javascript.rhino.head.Parser$ParserException",
1183:       "com.google.javascript.rhino.head.ast.EmptyStatement",
1184:       "com.google.javascript.rhino.head.RhinoException",
1185:       "com.google.javascript.rhino.head.EvaluatorException",
1186:       "com.google.javascript.jscomp.GatherRawExports",
1187:       "com.google.javascript.jscomp.FindExportableNodes",
1188:       "com.google.javascript.jscomp.RemoveUnusedClassProperties",
1189:       "com.google.common.collect.LinkedListMultimap",
1190:       "com.google.common.collect.LinkedHashMultiset",
1191:       "com.google.common.collect.ImmutableMultimap",
1192:       "com.google.common.collect.ImmutableSetMultimap",
1193:       "com.google.common.collect.EmptyImmutableSetMultimap",
1194:       "com.google.common.collect.EmptyImmutableSet",
1195:       "com.google.javascript.jscomp.Denormalize",
1196:       "com.google.javascript.jscomp.FunctionNames",
1197:       "com.google.javascript.jscomp.FunctionNames$FunctionListExtractor",
1198:       "com.google.javascript.jscomp.RecordFunctionInformation",
1199:       "com.google.protobuf.AbstractMessageLite",
1200:       "com.google.protobuf.AbstractMessage",
1201:       "com.google.protobuf.GeneratedMessage",
1202:       "com.google.protobuf.UnknownFieldSet",
1203:       "com.google.javascript.jscomp.FunctionInformationMap",
1204:       "com.google.protobuf.AbstractMessageLite$Builder",
1205:       "com.google.protobuf.AbstractMessage$Builder",
1206:       "com.google.protobuf.GeneratedMessage$Builder",
1207:       "com.google.javascript.jscomp.FunctionInformationMap$Builder",
1208:       "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator",
1209:       "com.google.javascript.jscomp.SourceFile$OnDisk",
1210:       "com.google.common.io.Files",
1211:       "com.google.common.io.Files$1",
1212:       "com.google.common.io.ByteStreams",
1213:       "com.google.javascript.jscomp.CheckMissingReturn$1",
1214:       "com.google.javascript.jscomp.CheckMissingReturn$2",
1215:       "com.google.javascript.jscomp.CheckMissingReturn",
1216:       "com.google.javascript.jscomp.RenameLabels",
1217:       "com.google.javascript.jscomp.RenameLabels$DefaultNameSupplier",
1218:       "com.google.javascript.jscomp.NameGenerator",
1219:       "com.google.javascript.jscomp.RenameLabels$ProcessLabels",
1220:       "com.google.javascript.jscomp.RenameLabels$LabelNamespace",
1221:       "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
1222:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter$1",
1223:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter$2",
1224:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter$3",
1225:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter$4",
1226:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
1227:       "com.google.javascript.jscomp.SourceInformationAnnotator",
1228:       "com.google.javascript.rhino.head.ast.InfixExpression",
1229:       "com.google.javascript.rhino.head.ast.PropertyGet",
1230:       "com.google.javascript.rhino.head.ast.UnaryExpression",
1231:       "com.google.javascript.jscomp.JSSourceFile",
1232:       "com.google.javascript.jscomp.SourceFile$Generated",
1233:       "com.google.javascript.rhino.head.ast.FunctionCall",
1234:       "com.google.javascript.jscomp.Scope$1",
1235:       "com.google.javascript.jscomp.Scope",
1236:       "com.google.javascript.jscomp.ExpandJqueryAliases",
1237:       "com.google.javascript.jscomp.Compiler$6",
1238:       "com.google.javascript.jscomp.GlobalNamespace",
1239:       "com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace",
1240:       "com.google.javascript.jscomp.Normalize$PropagateConstantAnnotationsOverVars",
1241:       "com.google.javascript.jscomp.CheckAccidentalSemicolon",
1242:       "com.google.javascript.jscomp.XtbMessageBundle$SecureEntityResolver",
1243:       "com.google.javascript.jscomp.XtbMessageBundle",
1244:       "com.google.javascript.jscomp.GoogleJsMessageIdGenerator",
1245:       "com.google.javascript.jscomp.XtbMessageBundle$Handler",
1246:       "com.google.javascript.jscomp.graph.Graph",
1247:       "com.google.javascript.jscomp.graph.DiGraph",
1248:       "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
1249:       "com.google.javascript.jscomp.ControlFlowGraph",
1250:       "com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph",
1251:       "com.google.javascript.jscomp.graph.LinkedDirectedGraph$LinkedDirectedGraphNode",
1252:       "com.google.javascript.jscomp.graph.LinkedDirectedGraph$AnnotatedLinkedDirectedGraphNode",
1253:       "com.google.javascript.jscomp.GlobalNamespace$Name$Type",
1254:       "com.google.common.collect.ImmutableListMultimap",
1255:       "com.google.common.collect.ImmutableMultimap$Builder",
1256:       "com.google.common.collect.ImmutableListMultimap$Builder",
1257:       "com.google.common.collect.ImmutableMultimap$BuilderMultimap",
1258:       "com.google.javascript.rhino.JSDocInfo",
1259:       "com.google.javascript.jscomp.Normalize$VerifyConstants",
1260:       "com.google.javascript.rhino.head.ast.ErrorNode",
1261:       "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter",
1262:       "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter$1",
1263:       "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter$2",
1264:       "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter$RestrictByTypeOfResultVisitor",
1265:       "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter$RestrictByTrueTypeOfResultVisitor",
1266:       "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$1",
1267:       "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter$RestrictByFalseTypeOfResultVisitor",
1268:       "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$2",
1269:       "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$3",
1270:       "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$4",
1271:       "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$13",
1272:       "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$12",
1273:       "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$11",
1274:       "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$10",
1275:       "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$9",
1276:       "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$8",
1277:       "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$7",
1278:       "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$6",
1279:       "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$5",
1280:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter$5",
1281:       "com.google.javascript.jscomp.ReferenceCollectingCallback$1",
1282:       "com.google.javascript.jscomp.ReferenceCollectingCallback",
1283:       "com.google.javascript.jscomp.MethodCompilerPass",
1284:       "com.google.javascript.jscomp.InlineSimpleMethods$1",
1285:       "com.google.javascript.jscomp.InlineSimpleMethods",
1286:       "com.google.javascript.jscomp.InvocationsCallback",
1287:       "com.google.javascript.jscomp.InlineSimpleMethods$InlineTrivialAccessors",
1288:       "com.google.javascript.jscomp.InferJSDocInfo",
1289:       "com.google.javascript.jscomp.OptimizeArgumentsArray",
1290:       "com.google.javascript.jscomp.Denormalize$StripConstantAnnotations",
1291:       "com.google.javascript.jscomp.ConvertToDottedProperties",
1292:       "com.google.javascript.jscomp.FlowSensitiveInlineVariables$1",
1293:       "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
1294:       "com.google.javascript.jscomp.WhitelistWarningsGuard",
1295:       "com.google.common.io.LineReader",
1296:       "com.google.common.io.LineBuffer",
1297:       "com.google.common.io.LineReader$1",
1298:       "com.google.common.io.Closeables",
1299:       "com.google.javascript.jscomp.DeadAssignmentsElimination$1",
1300:       "com.google.javascript.jscomp.DeadAssignmentsElimination",
1301:       "com.google.javascript.jscomp.CollapseProperties",
1302:       "com.google.javascript.jscomp.MethodCompilerPass$GetExternMethods",
1303:       "com.google.javascript.jscomp.MethodCompilerPass$GatherSignatures",
1304:       "com.google.javascript.rhino.head.ast.NumberLiteral",
1305:       "com.google.javascript.rhino.head.ast.Assignment",
1306:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
1307:       "com.google.javascript.jscomp.CheckSideEffects$StripProtection",
1308:       "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback$CopySideEffectSubexpressions",
1309:       "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback",
1310:       "com.google.javascript.jscomp.CheckMissingGetCssName",
1311:       "com.google.javascript.jscomp.JSModuleGraph",
1312:       "com.google.javascript.jscomp.UnreachableCodeElimination",
1313:       "com.google.javascript.jscomp.ReplaceStrings",
1314:       "com.google.javascript.jscomp.NameReferenceGraph$Reference",
1315:       "com.google.javascript.rhino.head.Token",
1316:       "com.google.javascript.jscomp.NodeTraversal$AbstractShallowCallback",
1317:       "com.google.javascript.jscomp.FieldCleanupPass$QualifiedNameSearchTraversal",
1318:       "com.google.javascript.jscomp.AliasStrings",
1319:       "com.google.javascript.rhino.jstype.ProxyObjectType",
1320:       "com.google.javascript.rhino.jstype.NamedType",
1321:       "com.google.javascript.jscomp.LineNumberCheck",
1322:       "com.google.javascript.rhino.jstype.SimpleSlot",
1323:       "com.google.javascript.jscomp.Result",
1324:       "com.google.javascript.jscomp.LoggerErrorManager$1",
1325:       "com.google.javascript.jscomp.JSError$1",
1326:       "com.google.javascript.jscomp.AbstractMessageFormatter$1",
1327:       "com.google.javascript.jscomp.AbstractMessageFormatter$Color",
1328:       "com.google.javascript.rhino.head.ast.ArrayLiteral",
1329:       "com.google.javascript.jscomp.CombinedCompilerPass",
1330:       "com.google.javascript.jscomp.Compiler$4",
1331:       "com.google.javascript.jscomp.StrictWarningsGuard",
1332:       "com.google.javascript.jscomp.ProcessClosurePrimitives",
1333:       "com.google.javascript.jscomp.GlobalNamespace$Ref",
1334:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
1335:     );
1336:   }
1337: }

[MASTER] 19:11:33.836 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("\u000B");
assertNotNull(node0);
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertNull(node0.getSourceFileName());
assertFalse(node0.isIn());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isFromExterns());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isInc());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertNull(node0.getSourceFileName());
assertFalse(node0.isIn());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isFromExterns());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isInc());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

NodeUtil.getPureBooleanValue(node0);
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertNull(node0.getSourceFileName());
assertFalse(node0.isIn());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isFromExterns());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isInc());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

int int0 = NodeUtil.getInverseOperator(46);
assertEquals((-1), int0);

int int1 = NodeUtil.precedence(16);
assertFalse(int1 == int0);
assertEquals(9, int1);

boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertNull(node0.getSourceFileName());
assertFalse(node0.isIn());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isFromExterns());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isInc());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertTrue(boolean0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

boolean boolean1 = NodeUtil.isExprCall(node0);
assertFalse(boolean1 == boolean0);
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertNull(node0.getSourceFileName());
assertFalse(node0.isIn());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isFromExterns());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isInc());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(boolean1);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

Compiler compiler0 = new Compiler();
assertNotNull(compiler0);
assertEquals(0.0, compiler0.getProgress(), 0.01);

SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("\u000B", false);
assertNotNull(sourceInformationAnnotator0);

NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0);
assertNotNull(nodeTraversal0);
assertEquals(0.0, compiler0.getProgress(), 0.01);
assertEquals("", nodeTraversal0.getSourceName());
assertEquals(0, nodeTraversal0.getLineNumber());

LinkedList<ControlFlowGraph<Node>> linkedList0 = new LinkedList<ControlFlowGraph<Node>>();
assertNotNull(linkedList0);
assertEquals(0, linkedList0.size());

nodeTraversal0.cfgs = (Deque<ControlFlowGraph<Node>>) linkedList0;
assertEquals(0.0, compiler0.getProgress(), 0.01);
assertEquals("", nodeTraversal0.getSourceName());
assertEquals(0, nodeTraversal0.getLineNumber());
assertEquals(0, linkedList0.size());
assertEquals(0, nodeTraversal0.cfgs.size());

Compiler compiler1 = nodeTraversal0.getCompiler();
assertNotNull(compiler1);
assertSame(compiler0, compiler1);
assertSame(compiler1, compiler0);
assertEquals(0.0, compiler0.getProgress(), 0.01);
assertEquals("", nodeTraversal0.getSourceName());
assertEquals(0, nodeTraversal0.getLineNumber());
assertEquals(0.0, compiler1.getProgress(), 0.01);

boolean boolean2 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler1);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);
assertSame(compiler0, compiler1);
assertSame(compiler1, compiler0);
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertNull(node0.getSourceFileName());
assertFalse(node0.isIn());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isFromExterns());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isInc());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals(0.0, compiler0.getProgress(), 0.01);
assertEquals("", nodeTraversal0.getSourceName());
assertEquals(0, nodeTraversal0.getLineNumber());
assertEquals(0.0, compiler1.getProgress(), 0.01);
assertFalse(boolean2);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

Double double0 = NodeUtil.getNumberValue(node0);
assertNull(double0);
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertNull(node0.getSourceFileName());
assertFalse(node0.isIn());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isFromExterns());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isInc());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

boolean boolean3 = NodeUtil.isAssignmentOp(node0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertFalse(boolean3 == boolean0);
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isName());
assertFalse(node0.isIf());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertNull(node0.getSourceFileName());
assertFalse(node0.isIn());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.isTypeOf());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isFromExterns());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isInc());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(boolean3);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

NodeUtil.isLValue(node0);

[MASTER] 19:11:47.264 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_156_1566407507041/com/google/javascript/jscomp/NodeUtil_156_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_156_1566407507041/com/google/javascript/jscomp/NodeUtil_156_tmp__ESTest_scaffolding.java]]
[MASTER] 19:11:47.264 [logback-2] ERROR JUnitAnalyzer - Classpath: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/tools/evosuite.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/classes:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/args4j.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/guava.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/json.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/jsr305.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/protobuf-java.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/lib/rhino.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/ant.jar
[MASTER] 19:11:47.264 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/rq3/botsing-integration-experiment/tools/evosuite.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/classes:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/args4j.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/guava.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/json.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/jsr305.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/protobuf-java.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/lib/rhino.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/ant.jar
[MASTER] 19:11:47.265 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 137
[MASTER] 19:11:47.288 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_156_1566407507041/com/google/javascript/jscomp/NodeUtil_156_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Aug 21 17:11:47 GMT 2019
4:  */
5: 
6: package com.google.javascript.jscomp;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.jscomp.NodeUtil;
11: import com.google.javascript.rhino.Node;
12: import java.util.ArrayList;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
18: public class NodeUtil_156_tmp__ESTest extends NodeUtil_156_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       String string0 = NodeUtil.getStringValue((-4785.552123184762));
23:       assertNotNull(string0);
24:       assertEquals("-4785.552123184762", string0);
25:       
26:       Node node0 = Node.newString("-4785.552123184762");
27:       assertNotNull(node0);
28:       assertFalse(node0.isInstanceOf());
29:       assertFalse(node0.isGetProp());
30:       assertFalse(node0.isAnd());
31:       assertFalse(node0.isScript());
32:       assertFalse(node0.isObjectLit());
33:       assertFalse(node0.isNot());
34:       assertFalse(node0.isThrow());
35:       assertFalse(node0.isLabelName());
36:       assertFalse(node0.isSwitch());
37:       assertFalse(node0.isFalse());
38:       assertFalse(node0.isLabel());
39:       assertFalse(node0.isReturn());
40:       assertFalse(node0.isFromExterns());
41:       assertFalse(node0.isDo());
42:       assertFalse(node0.isAssignAdd());
43:       assertEquals((-1), node0.getSourcePosition());
44:       assertFalse(node0.isEmpty());
45:       assertFalse(node0.isOr());
46:       assertFalse(node0.isTrue());
47:       assertFalse(node0.isVoid());
48:       assertFalse(node0.isName());
49:       assertFalse(node0.hasChildren());
50:       assertFalse(node0.isBreak());
51:       assertFalse(node0.isDelProp());
52:       assertFalse(node0.isWhile());
53:       assertFalse(node0.isDec());
54:       assertFalse(node0.isGetElem());
55:       assertFalse(node0.isExprResult());
56:       assertFalse(node0.isCall());
57:       assertFalse(node0.isComma());
58:       assertFalse(node0.isAssign());
59:       assertFalse(node0.isTypeOf());
60:       assertEquals(0, node0.getChildCount());
61:       assertFalse(node0.isParamList());
62:       assertFalse(node0.isNull());
63:       assertFalse(node0.isSetterDef());
64:       assertFalse(node0.isDebugger());
65:       assertNull(node0.getSourceFileName());
66:       assertFalse(node0.isVar());
67:       assertFalse(node0.isAdd());
68:       assertFalse(node0.isArrayLit());
69:       assertFalse(node0.isStringKey());
70:       assertFalse(node0.isNew());
71:       assertFalse(node0.isDefaultCase());
72:       assertEquals(40, node0.getType());
73:       assertFalse(node0.isContinue());
74:       assertFalse(node0.isFunction());
75:       assertFalse(node0.isIn());
76:       assertEquals((-1), node0.getLineno());
77:       assertFalse(node0.isIf());
78:       assertFalse(node0.isGetterDef());
79:       assertEquals((-1), node0.getSourceOffset());
80:       assertFalse(node0.isNE());
81:       assertFalse(node0.isCase());
82:       assertFalse(node0.isInc());
83:       assertEquals((-1), node0.getCharno());
84:       assertFalse(node0.isNumber());
85:       assertFalse(node0.hasOneChild());
86:       assertFalse(node0.isBlock());
87:       assertFalse(node0.isHook());
88:       assertFalse(node0.isTry());
89:       assertTrue(node0.isString());
90:       assertFalse(node0.isFor());
91:       assertFalse(node0.isThis());
92:       assertFalse(node0.isCatch());
93:       assertFalse(node0.isRegExp());
94:       assertFalse(node0.hasMoreThanOneChild());
95:       assertFalse(node0.isWith());
96:       assertEquals(53, Node.INPUT_ID);
97:       assertEquals(35, Node.PARENTHESIZED_PROP);
98:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
99:       assertEquals(54, Node.LAST_PROP);
100:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
101:       assertEquals(47, Node.IS_DISPATCHER);
102:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
103:       assertEquals(2, Node.POST_FLAG);
104:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
105:       assertEquals(4095, Node.COLUMN_MASK);
106:       assertEquals(32, Node.INCRDECR_PROP);
107:       assertEquals(46, Node.IS_NAMESPACE);
108:       assertEquals(51, Node.STATIC_SOURCE_FILE);
109:       assertEquals(12, Node.COLUMN_BITS);
110:       assertEquals(1, Node.DECR_FLAG);
111:       assertEquals(16, Node.SOURCENAME_PROP);
112:       assertEquals(43, Node.IS_CONSTANT_NAME);
113:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
114:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
115:       assertEquals(50, Node.FREE_CALL);
116:       assertEquals(41, Node.BRACELESS_TYPE);
117:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
118:       assertEquals(54, Node.SLASH_V);
119:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
120:       assertEquals(30, Node.VAR_ARGS_NAME);
121:       assertEquals(40, Node.ORIGINALNAME_PROP);
122:       assertEquals(37, Node.OPT_ARG_NAME);
123:       assertEquals(48, Node.DIRECTIVES);
124:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
125:       assertEquals(49, Node.DIRECT_EVAL);
126:       assertEquals(29, Node.JSDOC_INFO_PROP);
127:       assertEquals(36, Node.QUOTED_PROP);
128:       assertEquals(15, Node.NO_SIDE_EFFECTS);
129:       assertEquals(39, Node.EMPTY_BLOCK);
130:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
131:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
132:       assertEquals(52, Node.LENGTH);
133:       assertEquals(8, Node.FLAG_NO_THROWS);
134:       
135:       Iterable<Node> iterable0 = new ArrayList<Node>();
136:       assertNotNull(iterable0);
137:       assertFalse(iterable0.contains(node0));
138:       
139:       boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
140:       assertFalse(node0.isInstanceOf());
141:       assertFalse(node0.isGetProp());
142:       assertFalse(node0.isAnd());
143:       assertFalse(node0.isScript());
144:       assertFalse(node0.isObjectLit());
145:       assertFalse(node0.isNot());
146:       assertFalse(node0.isThrow());
147:       assertFalse(node0.isLabelName());
148:       assertFalse(node0.isSwitch());
149:       assertFalse(node0.isFalse());
150:       assertFalse(node0.isLabel());
151:       assertFalse(node0.isReturn());
152:       assertFalse(node0.isFromExterns());
153:       assertFalse(node0.isDo());
154:       assertFalse(node0.isAssignAdd());
155:       assertEquals((-1), node0.getSourcePosition());
156:       assertFalse(node0.isEmpty());
157:       assertFalse(node0.isOr());
158:       assertFalse(node0.isTrue());
159:       assertFalse(node0.isVoid());
160:       assertFalse(node0.isName());
161:       assertFalse(node0.hasChildren());
162:       assertFalse(node0.isBreak());
163:       assertFalse(node0.isDelProp());
164:       assertFalse(node0.isWhile());
165:       assertFalse(node0.isDec());
166:       assertFalse(node0.isGetElem());
167:       assertFalse(node0.isExprResult());
168:       assertFalse(node0.isCall());
169:       assertFalse(node0.isComma());
170:       assertFalse(node0.isAssign());
171:       assertFalse(node0.isTypeOf());
172:       assertEquals(0, node0.getChildCount());
173:       assertFalse(node0.isParamList());
174:       assertFalse(node0.isNull());
175:       assertFalse(node0.isSetterDef());
176:       assertFalse(node0.isDebugger());
177:       assertNull(node0.getSourceFileName());
178:       assertFalse(node0.isVar());
179:       assertFalse(node0.isAdd());
180:       assertFalse(node0.isArrayLit());
181:       assertFalse(node0.isStringKey());
182:       assertFalse(node0.isNew());
183:       assertFalse(node0.isDefaultCase());
184:       assertEquals(40, node0.getType());
185:       assertFalse(node0.isContinue());
186:       assertFalse(node0.isFunction());
187:       assertFalse(node0.isIn());
188:       assertEquals((-1), node0.getLineno());
189:       assertFalse(node0.isIf());
190:       assertFalse(node0.isGetterDef());
191:       assertEquals((-1), node0.getSourceOffset());
192:       assertFalse(node0.isNE());
193:       assertFalse(node0.isCase());
194:       assertFalse(node0.isInc());
195:       assertEquals((-1), node0.getCharno());
196:       assertFalse(node0.isNumber());
197:       assertFalse(node0.hasOneChild());
198:       assertFalse(node0.isBlock());
199:       assertFalse(node0.isHook());
200:       assertFalse(node0.isTry());
201:       assertTrue(node0.isString());
202:       assertFalse(node0.isFor());
203:       assertFalse(node0.isThis());
204:       assertFalse(node0.isCatch());
205:       assertFalse(node0.isRegExp());
206:       assertFalse(node0.hasMoreThanOneChild());
207:       assertFalse(node0.isWith());
208:       assertTrue(boolean0);
209:       assertEquals(53, Node.INPUT_ID);
210:       assertEquals(35, Node.PARENTHESIZED_PROP);
211:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
212:       assertEquals(54, Node.LAST_PROP);
213:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
214:       assertEquals(47, Node.IS_DISPATCHER);
215:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
216:       assertEquals(2, Node.POST_FLAG);
217:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
218:       assertEquals(4095, Node.COLUMN_MASK);
219:       assertEquals(32, Node.INCRDECR_PROP);
220:       assertEquals(46, Node.IS_NAMESPACE);
221:       assertEquals(51, Node.STATIC_SOURCE_FILE);
222:       assertEquals(12, Node.COLUMN_BITS);
223:       assertEquals(1, Node.DECR_FLAG);
224:       assertEquals(16, Node.SOURCENAME_PROP);
225:       assertEquals(43, Node.IS_CONSTANT_NAME);
226:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
227:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
228:       assertEquals(50, Node.FREE_CALL);
229:       assertEquals(41, Node.BRACELESS_TYPE);
230:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
231:       assertEquals(54, Node.SLASH_V);
232:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
233:       assertEquals(30, Node.VAR_ARGS_NAME);
234:       assertEquals(40, Node.ORIGINALNAME_PROP);
235:       assertEquals(37, Node.OPT_ARG_NAME);
236:       assertEquals(48, Node.DIRECTIVES);
237:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
238:       assertEquals(49, Node.DIRECT_EVAL);
239:       assertEquals(29, Node.JSDOC_INFO_PROP);
240:       assertEquals(36, Node.QUOTED_PROP);
241:       assertEquals(15, Node.NO_SIDE_EFFECTS);
242:       assertEquals(39, Node.EMPTY_BLOCK);
243:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
244:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
245:       assertEquals(52, Node.LENGTH);
246:       assertEquals(8, Node.FLAG_NO_THROWS);
247:       
248:       String string1 = NodeUtil.opToStr(107);
249:       assertNull(string1);
250:       
251:       Node node1 = new Node(38);
252:       assertNotNull(node1);
253:       assertFalse(node1.equals((Object)node0));
254:       assertFalse(node1.isString());
255:       assertFalse(node1.isInc());
256:       assertEquals((-1), node1.getCharno());
257:       assertFalse(node1.isSwitch());
258:       assertFalse(node1.isIf());
259:       assertFalse(node1.isEmpty());
260:       assertFalse(node1.isNE());
261:       assertTrue(node1.isName());
262:       assertFalse(node1.isFalse());
263:       assertFalse(node1.isIn());
264:       assertFalse(node1.isThrow());
265:       assertFalse(node1.isExprResult());
266:       assertFalse(node1.isTrue());
267:       assertFalse(node1.isDebugger());
268:       assertFalse(node1.isNot());
269:       assertFalse(node1.isObjectLit());
270:       assertFalse(node1.isFunction());
271:       assertFalse(node1.isVoid());
272:       assertFalse(node1.isAnd());
273:       assertFalse(node1.isDelProp());
274:       assertFalse(node1.hasChildren());
275:       assertFalse(node1.isBreak());
276:       assertFalse(node1.isDec());
277:       assertEquals((-1), node1.getSourcePosition());
278:       assertFalse(node1.isGetElem());
279:       assertFalse(node1.isComma());
280:       assertFalse(node1.isAssign());
281:       assertFalse(node1.isTypeOf());
282:       assertFalse(node1.isReturn());
283:       assertFalse(node1.isGetProp());
284:       assertFalse(node1.isFromExterns());
285:       assertFalse(node1.isWhile());
286:       assertFalse(node1.isContinue());
287:       assertFalse(node1.hasMoreThanOneChild());
288:       assertEquals((-1), node1.getLineno());
289:       assertFalse(node1.isCall());
290:       assertFalse(node1.isStringKey());
291:       assertFalse(node1.isNull());
292:       assertFalse(node1.isSetterDef());
293:       assertFalse(node1.isOr());
294:       assertNull(node1.getSourceFileName());
295:       assertEquals(0, node1.getChildCount());
296:       assertFalse(node1.isVar());
297:       assertFalse(node1.isLabel());
298:       assertFalse(node1.isAdd());
299:       assertFalse(node1.isNew());
300:       assertFalse(node1.isDo());
301:       assertFalse(node1.isAssignAdd());
302:       assertFalse(node1.isDefaultCase());
303:       assertEquals(38, node1.getType());
304:       assertFalse(node1.isScript());
305:       assertFalse(node1.isWith());
306:       assertFalse(node1.isRegExp());
307:       assertFalse(node1.isInstanceOf());
308:       assertFalse(node1.isArrayLit());
309:       assertFalse(node1.isCatch());
310:       assertFalse(node1.isParamList());
311:       assertFalse(node1.isLabelName());
312:       assertFalse(node1.isGetterDef());
313:       assertEquals((-1), node1.getSourceOffset());
314:       assertFalse(node1.isFor());
315:       assertFalse(node1.isThis());
316:       assertFalse(node1.isNumber());
317:       assertFalse(node1.hasOneChild());
318:       assertFalse(node1.isBlock());
319:       assertFalse(node1.isHook());
320:       assertFalse(node1.isCase());
321:       assertFalse(node1.isTry());
322:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
323:       assertEquals(39, Node.EMPTY_BLOCK);
324:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
325:       assertEquals(50, Node.FREE_CALL);
326:       assertEquals(8, Node.FLAG_NO_THROWS);
327:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
328:       assertEquals(43, Node.IS_CONSTANT_NAME);
329:       assertEquals(16, Node.SOURCENAME_PROP);
330:       assertEquals(30, Node.VAR_ARGS_NAME);
331:       assertEquals(46, Node.IS_NAMESPACE);
332:       assertEquals(51, Node.STATIC_SOURCE_FILE);
333:       assertEquals(41, Node.BRACELESS_TYPE);
334:       assertEquals(40, Node.ORIGINALNAME_PROP);
335:       assertEquals(54, Node.SLASH_V);
336:       assertEquals(47, Node.IS_DISPATCHER);
337:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
338:       assertEquals(29, Node.JSDOC_INFO_PROP);
339:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
340:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
341:       assertEquals(2, Node.POST_FLAG);
342:       assertEquals(32, Node.INCRDECR_PROP);
343:       assertEquals(12, Node.COLUMN_BITS);
344:       assertEquals(53, Node.INPUT_ID);
345:       assertEquals(35, Node.PARENTHESIZED_PROP);
346:       assertEquals(1, Node.DECR_FLAG);
347:       assertEquals(36, Node.QUOTED_PROP);
348:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
349:       assertEquals(15, Node.NO_SIDE_EFFECTS);
350:       assertEquals(54, Node.LAST_PROP);
351:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
352:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
353:       assertEquals(52, Node.LENGTH);
354:       assertEquals(4095, Node.COLUMN_MASK);
355:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
356:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
357:       assertEquals(48, Node.DIRECTIVES);
358:       assertEquals(37, Node.OPT_ARG_NAME);
359:       assertEquals(49, Node.DIRECT_EVAL);
360:       
361:       boolean boolean1 = NodeUtil.isLoopStructure(node0);
362:       assertFalse(node0.equals((Object)node1));
363:       assertFalse(boolean1 == boolean0);
364:       assertFalse(node0.isInstanceOf());
365:       assertFalse(node0.isGetProp());
366:       assertFalse(node0.isAnd());
367:       assertFalse(node0.isScript());
368:       assertFalse(node0.isObjectLit());
369:       assertFalse(node0.isNot());
370:       assertFalse(node0.isThrow());
371:       assertFalse(node0.isLabelName());
372:       assertFalse(node0.isSwitch());
373:       assertFalse(node0.isFalse());
374:       assertFalse(node0.isLabel());
375:       assertFalse(node0.isReturn());
376:       assertFalse(node0.isFromExterns());
377:       assertFalse(node0.isDo());
378:       assertFalse(node0.isAssignAdd());
379:       assertEquals((-1), node0.getSourcePosition());
380:       assertFalse(node0.isEmpty());
381:       assertFalse(node0.isOr());
382:       assertFalse(node0.isTrue());
383:       assertFalse(node0.isVoid());
384:       assertFalse(node0.isName());
385:       assertFalse(node0.hasChildren());
386:       assertFalse(node0.isBreak());
387:       assertFalse(node0.isDelProp());
388:       assertFalse(node0.isWhile());
389:       assertFalse(node0.isDec());
390:       assertFalse(node0.isGetElem());
391:       assertFalse(node0.isExprResult());
392:       assertFalse(node0.isCall());
393:       assertFalse(node0.isComma());
394:       assertFalse(node0.isAssign());
395:       assertFalse(node0.isTypeOf());
396:       assertEquals(0, node0.getChildCount());
397:       assertFalse(node0.isParamList());
398:       assertFalse(node0.isNull());
399:       assertFalse(node0.isSetterDef());
400:       assertFalse(node0.isDebugger());
401:       assertNull(node0.getSourceFileName());
402:       assertFalse(node0.isVar());
403:       assertFalse(node0.isAdd());
404:       assertFalse(node0.isArrayLit());
405:       assertFalse(node0.isStringKey());
406:       assertFalse(node0.isNew());
407:       assertFalse(node0.isDefaultCase());
408:       assertEquals(40, node0.getType());
409:       assertFalse(node0.isContinue());
410:       assertFalse(node0.isFunction());
411:       assertFalse(node0.isIn());
412:       assertEquals((-1), node0.getLineno());
413:       assertFalse(node0.isIf());
414:       assertFalse(node0.isGetterDef());
415:       assertEquals((-1), node0.getSourceOffset());
416:       assertFalse(node0.isNE());
417:       assertFalse(node0.isCase());
418:       assertFalse(node0.isInc());
419:       assertEquals((-1), node0.getCharno());
420:       assertFalse(node0.isNumber());
421:       assertFalse(node0.hasOneChild());
422:       assertFalse(node0.isBlock());
423:       assertFalse(node0.isHook());
424:       assertFalse(node0.isTry());
425:       assertTrue(node0.isString());
426:       assertFalse(node0.isFor());
427:       assertFalse(node0.isThis());
428:       assertFalse(node0.isCatch());
429:       assertFalse(node0.isRegExp());
430:       assertFalse(node0.hasMoreThanOneChild());
431:       assertFalse(node0.isWith());
432:       assertFalse(boolean1);
433:       assertEquals(53, Node.INPUT_ID);
434:       assertEquals(35, Node.PARENTHESIZED_PROP);
435:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
436:       assertEquals(54, Node.LAST_PROP);
437:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
438:       assertEquals(47, Node.IS_DISPATCHER);
439:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
440:       assertEquals(2, Node.POST_FLAG);
441:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
442:       assertEquals(4095, Node.COLUMN_MASK);
443:       assertEquals(32, Node.INCRDECR_PROP);
444:       assertEquals(46, Node.IS_NAMESPACE);
445:       assertEquals(51, Node.STATIC_SOURCE_FILE);
446:       assertEquals(12, Node.COLUMN_BITS);
447:       assertEquals(1, Node.DECR_FLAG);
448:       assertEquals(16, Node.SOURCENAME_PROP);
449:       assertEquals(43, Node.IS_CONSTANT_NAME);
450:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
451:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
452:       assertEquals(50, Node.FREE_CALL);
453:       assertEquals(41, Node.BRACELESS_TYPE);
454:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
455:       assertEquals(54, Node.SLASH_V);
456:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
457:       assertEquals(30, Node.VAR_ARGS_NAME);
458:       assertEquals(40, Node.ORIGINALNAME_PROP);
459:       assertEquals(37, Node.OPT_ARG_NAME);
460:       assertEquals(48, Node.DIRECTIVES);
461:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
462:       assertEquals(49, Node.DIRECT_EVAL);
463:       assertEquals(29, Node.JSDOC_INFO_PROP);
464:       assertEquals(36, Node.QUOTED_PROP);
465:       assertEquals(15, Node.NO_SIDE_EFFECTS);
466:       assertEquals(39, Node.EMPTY_BLOCK);
467:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
468:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
469:       assertEquals(52, Node.LENGTH);
470:       assertEquals(8, Node.FLAG_NO_THROWS);
471:   }
472: }
RegularFileObject[/tmp/EvoSuite_156_1566407507041/com/google/javascript/jscomp/NodeUtil_156_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Aug 21 17:11:47 GMT 2019
5:  */
6: 
7: package com.google.javascript.jscomp;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NodeUtil_156_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.jscomp.NodeUtil"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/rq3/botsing-integration-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NodeUtil_156_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.common.collect.ArrayListMultimap",
82:       "com.google.javascript.jscomp.CoalesceVariableNames",
83:       "com.google.common.collect.Collections2",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.jscomp.NodeTraversal$Callback",
86:       "com.google.javascript.rhino.head.jdk13.VMBridge_jdk13",
87:       "com.google.javascript.jscomp.CheckSideEffects",
88:       "com.google.javascript.rhino.head.ast.Yield",
89:       "com.google.javascript.jscomp.SimpleDefinitionFinder",
90:       "com.google.javascript.jscomp.graph.Graph",
91:       "com.google.javascript.rhino.jstype.StaticScope",
92:       "com.google.javascript.rhino.jstype.InstanceObjectType",
93:       "com.google.javascript.jscomp.graph.Annotatable",
94:       "com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher",
95:       "com.google.common.collect.AbstractMapBasedMultiset$1",
96:       "com.google.javascript.jscomp.JSModule",
97:       "com.google.javascript.rhino.jstype.ObjectType",
98:       "com.google.common.collect.ImmutableSet$ArrayImmutableSet",
99:       "com.google.javascript.rhino.JSDocInfo$Marker",
100:       "com.google.common.collect.RegularImmutableMap",
101:       "com.google.javascript.rhino.Node$NodeMismatch",
102:       "com.google.javascript.rhino.jstype.RecordType",
103:       "com.google.javascript.rhino.head.ast.Jump",
104:       "com.google.javascript.jscomp.PeepholeSimplifyRegExp",
105:       "com.google.javascript.jscomp.Tracer",
106:       "com.google.javascript.jscomp.HotSwapCompilerPass",
107:       "com.google.javascript.jscomp.SourceFile$Builder",
108:       "com.google.javascript.jscomp.CodingConvention$SubclassType",
109:       "com.google.javascript.rhino.jstype.JSType$1",
110:       "com.google.javascript.jscomp.CodingConvention",
111:       "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
112:       "com.google.javascript.jscomp.SourceMap$DetailLevel",
113:       "com.google.javascript.jscomp.MemoizedScopeCreator",
114:       "com.google.javascript.rhino.head.ast.EmptyStatement",
115:       "com.google.javascript.jscomp.CompilerOptions$1",
116:       "com.google.common.base.Joiner",
117:       "com.google.javascript.jscomp.CheckAccessControls",
118:       "com.google.javascript.jscomp.CheckDebuggerStatement",
119:       "com.google.common.collect.SingletonImmutableMap",
120:       "com.google.javascript.jscomp.CleanupPasses",
121:       "com.google.javascript.rhino.head.ast.XmlFragment",
122:       "com.google.javascript.rhino.jstype.ProxyObjectType",
123:       "com.google.javascript.jscomp.CompilerOptions$Reach",
124:       "com.google.javascript.jscomp.PassConfig$State",
125:       "com.google.javascript.rhino.head.ast.CatchClause",
126:       "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
127:       "com.google.javascript.rhino.InputId",
128:       "com.google.common.collect.RegularImmutableMap$LinkedEntry",
129:       "com.google.common.collect.Lists$Partition",
130:       "com.google.javascript.rhino.head.ast.AstRoot",
131:       "com.google.javascript.rhino.head.ast.NewExpression",
132:       "com.google.javascript.rhino.ErrorReporter",
133:       "com.google.javascript.rhino.jstype.ValueType",
134:       "com.google.javascript.rhino.Token",
135:       "com.google.javascript.rhino.head.ast.ParenthesizedExpression",
136:       "com.google.javascript.jscomp.VerboseMessageFormatter",
137:       "com.google.javascript.rhino.jstype.BooleanType",
138:       "com.google.javascript.jscomp.CssRenamingMap",
139:       "com.google.javascript.rhino.head.Context$ClassShutterSetter",
140:       "com.google.common.base.CharMatcher$5",
141:       "com.google.common.base.CharMatcher$4",
142:       "com.google.javascript.jscomp.CombinedCompilerPass",
143:       "com.google.common.base.CharMatcher$3",
144:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$ContextualRenamer",
145:       "com.google.common.base.CharMatcher$2",
146:       "com.google.common.base.CharMatcher$9",
147:       "com.google.common.base.CharMatcher$8",
148:       "com.google.common.base.CharMatcher$7",
149:       "com.google.javascript.rhino.head.ast.Label",
150:       "com.google.common.base.CharMatcher$6",
151:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
152:       "com.google.javascript.jscomp.SuppressDocWarningsGuard",
153:       "com.google.javascript.jscomp.MessageFormatter",
154:       "com.google.javascript.rhino.JSDocInfo",
155:       "com.google.javascript.jscomp.SourceExcerptProvider$ExcerptFormatter",
156:       "com.google.common.base.CharMatcher$1",
157:       "com.google.javascript.jscomp.parsing.Config",
158:       "com.google.common.collect.EmptyImmutableList",
159:       "com.google.common.collect.ImmutableEntry",
160:       "com.google.javascript.rhino.head.CompilerEnvirons",
161:       "com.google.common.base.Joiner$1",
162:       "com.google.common.base.Joiner$2",
163:       "com.google.javascript.jscomp.ErrorHandler",
164:       "com.google.javascript.rhino.head.Callable",
165:       "com.google.javascript.jscomp.GoogleCodingConvention",
166:       "com.google.javascript.jscomp.SourceFile$Preloaded",
167:       "com.google.common.collect.ImmutableCollection",
168:       "com.google.javascript.rhino.ScriptRuntime",
169:       "com.google.javascript.rhino.head.ast.ScriptNode",
170:       "com.google.javascript.rhino.head.ast.XmlString",
171:       "com.google.javascript.jscomp.StrictModeCheck",
172:       "com.google.javascript.rhino.head.ast.WhileLoop",
173:       "com.google.javascript.jscomp.DefinitionsRemover$Definition",
174:       "com.google.javascript.jscomp.Result",
175:       "com.google.javascript.jscomp.CodingConventions$1",
176:       "com.google.javascript.jscomp.CodingConvention$ObjectLiteralCast",
177:       "com.google.javascript.jscomp.CodingConvention$SubclassRelationship",
178:       "com.google.javascript.jscomp.CompilerPass",
179:       "com.google.javascript.rhino.jstype.EnumElementType",
180:       "com.google.javascript.jscomp.NodeUtil$MatchDeclaration",
181:       "com.google.javascript.jscomp.NodeUtil$VarCollector",
182:       "com.google.javascript.jscomp.VariableRenamingPolicy",
183:       "com.google.javascript.rhino.head.ast.IfStatement",
184:       "com.google.javascript.jscomp.CodeChangeHandler",
185:       "com.google.common.collect.Lists$AbstractListWrapper",
186:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$Renamer",
187:       "com.google.javascript.jscomp.FunctionTypeBuilder",
188:       "com.google.javascript.jscomp.FunctionInformationMap",
189:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
190:       "com.google.common.collect.AbstractMapBasedMultiset",
191:       "com.google.javascript.jscomp.NodeUtil$MayBeStringResultPredicate",
192:       "com.google.javascript.rhino.jstype.EnumType",
193:       "com.google.javascript.jscomp.JsMessageVisitor$MalformedException",
194:       "com.google.javascript.rhino.head.Evaluator",
195:       "com.google.javascript.jscomp.CodingConventions$DefaultCodingConvention",
196:       "com.google.common.base.CharMatcher$LookupTable",
197:       "com.google.javascript.rhino.head.ast.XmlElemRef",
198:       "com.google.javascript.rhino.head.ast.VariableDeclaration",
199:       "com.google.javascript.rhino.head.TokenStream",
200:       "com.google.common.collect.RegularImmutableList$1",
201:       "com.google.javascript.rhino.head.ast.ObjectLiteral",
202:       "com.google.common.collect.Lists$2",
203:       "com.google.javascript.jscomp.JSSourceFile",
204:       "com.google.javascript.jscomp.CodingConventions",
205:       "com.google.common.collect.Lists$1",
206:       "com.google.javascript.rhino.jstype.StaticReference",
207:       "com.google.javascript.jscomp.PreprocessorSymbolTable",
208:       "com.google.common.collect.Multiset",
209:       "com.google.javascript.rhino.head.ast.InfixExpression",
210:       "com.google.javascript.rhino.head.BaseFunction",
211:       "com.google.common.base.Supplier",
212:       "com.google.protobuf.MessageOrBuilder",
213:       "com.google.javascript.jscomp.GlobalVarReferenceMap",
214:       "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
215:       "com.google.javascript.rhino.head.ast.XmlPropRef",
216:       "com.google.javascript.jscomp.TypeValidator",
217:       "com.google.common.collect.ImmutableList",
218:       "com.google.protobuf.GeneratedMessage",
219:       "com.google.javascript.rhino.jstype.ObjectType$Property",
220:       "com.google.javascript.rhino.Node$AbstractPropListItem",
221:       "com.google.common.collect.AbstractMultimap$KeySet",
222:       "com.google.javascript.jscomp.graph.UndiGraph",
223:       "com.google.javascript.rhino.head.ast.VariableInitializer",
224:       "com.google.javascript.rhino.jstype.NoResolvedType",
225:       "com.google.javascript.rhino.head.ast.ThrowStatement",
226:       "com.google.protobuf.MessageLiteOrBuilder",
227:       "com.google.javascript.jscomp.NodeTraversal$AbstractNodeTypePruningCallback",
228:       "com.google.javascript.jscomp.DefaultPassConfig$99",
229:       "com.google.protobuf.MessageLite",
230:       "com.google.javascript.jscomp.DefaultPassConfig$98",
231:       "com.google.common.collect.Maps$EntryTransformer",
232:       "com.google.javascript.jscomp.DefaultPassConfig$95",
233:       "com.google.javascript.jscomp.DefaultPassConfig$94",
234:       "com.google.javascript.jscomp.DefaultPassConfig$96",
235:       "com.google.javascript.jscomp.CustomPassExecutionTime",
236:       "com.google.javascript.jscomp.DefaultPassConfig$91",
237:       "com.google.javascript.jscomp.DefaultPassConfig$90",
238:       "com.google.javascript.jscomp.SyntacticScopeCreator",
239:       "com.google.javascript.jscomp.graph.GraphColoring",
240:       "com.google.javascript.jscomp.DefaultPassConfig$93",
241:       "com.google.javascript.jscomp.DefaultPassConfig$92",
242:       "com.google.javascript.rhino.head.debug.DebuggableScript",
243:       "com.google.javascript.jscomp.CompilerOptions$TweakProcessing",
244:       "com.google.common.collect.Hashing",
245:       "com.google.javascript.rhino.head.DefaultErrorReporter",
246:       "com.google.javascript.rhino.jstype.NoType",
247:       "com.google.javascript.jscomp.SourceMap$Format",
248:       "com.google.javascript.rhino.head.Script",
249:       "com.google.common.collect.AbstractMultimap$WrappedCollection",
250:       "com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider",
251:       "com.google.javascript.rhino.TokenStream",
252:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
253:       "com.google.javascript.jscomp.DefaultPassConfig$88",
254:       "com.google.javascript.jscomp.DefaultPassConfig$87",
255:       "com.google.javascript.jscomp.DefaultPassConfig$89",
256:       "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments",
257:       "com.google.javascript.jscomp.DefaultPassConfig$84",
258:       "com.google.javascript.rhino.head.ast.Comment",
259:       "com.google.javascript.jscomp.DefaultPassConfig$83",
260:       "com.google.javascript.jscomp.DefaultPassConfig$86",
261:       "com.google.javascript.jscomp.DefaultPassConfig$85",
262:       "com.google.javascript.jscomp.CodingConventions$Proxy",
263:       "com.google.javascript.jscomp.DefaultPassConfig$80",
264:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt",
265:       "com.google.javascript.jscomp.StatementFusion",
266:       "com.google.javascript.jscomp.DefaultPassConfig$82",
267:       "com.google.javascript.jscomp.DefaultPassConfig$81",
268:       "com.google.common.collect.LinkedHashMultimap",
269:       "com.google.javascript.jscomp.InferJSDocInfo",
270:       "com.google.javascript.rhino.head.optimizer.Codegen",
271:       "com.google.javascript.rhino.head.ast.FunctionCall",
272:       "com.google.javascript.jscomp.RhinoErrorReporter$NewRhinoErrorReporter",
273:       "com.google.javascript.jscomp.NodeUtil",
274:       "com.google.common.collect.RegularImmutableSet",
275:       "com.google.javascript.jscomp.DefaultPassConfig$77",
276:       "com.google.javascript.jscomp.JsMessageVisitor",
277:       "com.google.javascript.jscomp.DefaultPassConfig$76",
278:       "com.google.javascript.jscomp.DefaultPassConfig$79",
279:       "com.google.javascript.jscomp.DefaultPassConfig$78",
280:       "com.google.javascript.jscomp.DefaultPassConfig$73",
281:       "com.google.javascript.jscomp.DefaultPassConfig$72",
282:       "com.google.javascript.jscomp.DefaultPassConfig$75",
283:       "com.google.javascript.rhino.head.EcmaError",
284:       "com.google.javascript.rhino.head.FunctionObject",
285:       "com.google.javascript.jscomp.DefaultPassConfig$74",
286:       "com.google.javascript.jscomp.DefaultPassConfig$71",
287:       "com.google.javascript.jscomp.DefaultPassConfig$70",
288:       "com.google.javascript.rhino.head.NativeContinuation",
289:       "com.google.javascript.rhino.head.xml.XMLObject",
290:       "com.google.javascript.rhino.head.Node$NodeIterator",
291:       "com.google.common.collect.ImmutableAsList",
292:       "com.google.javascript.jscomp.PassConfig",
293:       "com.google.javascript.jscomp.ConcreteType$ConcreteInstanceType",
294:       "com.google.common.collect.SingletonImmutableSet",
295:       "com.google.javascript.jscomp.DefaultPassConfig$69",
296:       "com.google.javascript.jscomp.Normalize$NormalizeStatements",
297:       "com.google.javascript.rhino.head.InterpretedFunction",
298:       "com.google.javascript.jscomp.DefaultPassConfig$66",
299:       "com.google.javascript.jscomp.DefaultPassConfig$65",
300:       "com.google.javascript.jscomp.DefaultPassConfig$68",
301:       "com.google.javascript.jscomp.DefaultPassConfig$67",
302:       "com.google.javascript.rhino.jstype.ParameterizedType",
303:       "com.google.javascript.jscomp.DefaultPassConfig$62",
304:       "com.google.javascript.jscomp.DefaultPassConfig$61",
305:       "com.google.javascript.rhino.Node$SideEffectFlags",
306:       "com.google.javascript.jscomp.DefaultPassConfig$64",
307:       "com.google.javascript.jscomp.DefaultPassConfig$63",
308:       "com.google.javascript.jscomp.DefaultPassConfig$60",
309:       "com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceMap",
310:       "com.google.javascript.rhino.jstype.NullType",
311:       "com.google.common.collect.EmptyImmutableList$1",
312:       "com.google.javascript.jscomp.LightweightMessageFormatter",
313:       "com.google.javascript.jscomp.Compiler$CodeBuilder",
314:       "com.google.javascript.jscomp.FunctionInformationMapOrBuilder",
315:       "com.google.javascript.jscomp.DefaultPassConfig$HotSwapPassFactory",
316:       "com.google.javascript.jscomp.ClosureCodingConvention$AssertInstanceofSpec",
317:       "com.google.javascript.rhino.jstype.NoObjectType",
318:       "com.google.javascript.jscomp.CleanupPasses$1",
319:       "com.google.common.collect.AbstractIterator",
320:       "com.google.javascript.rhino.head.ScriptableObject$GetterSlot",
321:       "com.google.javascript.jscomp.BasicErrorManager$ErrorWithLevel",
322:       "com.google.common.base.CharMatcher$And",
323:       "com.google.javascript.jscomp.DiagnosticType",
324:       "com.google.javascript.jscomp.DefaultPassConfig$59",
325:       "com.google.javascript.jscomp.DefaultPassConfig$58",
326:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler$NullAliasTransformation",
327:       "com.google.javascript.jscomp.graph.DiGraph$DiGraphNode",
328:       "com.google.javascript.jscomp.CleanupPasses$3",
329:       "com.google.javascript.jscomp.CleanupPasses$2",
330:       "com.google.javascript.jscomp.PrepareAst",
331:       "com.google.javascript.jscomp.DefaultPassConfig$55",
332:       "com.google.javascript.rhino.head.ast.ForLoop",
333:       "com.google.javascript.jscomp.DefaultPassConfig$54",
334:       "com.google.javascript.jscomp.DefaultPassConfig$57",
335:       "com.google.javascript.jscomp.DefaultPassConfig$56",
336:       "com.google.common.io.OutputSupplier",
337:       "com.google.javascript.jscomp.DefaultPassConfig$51",
338:       "com.google.javascript.jscomp.DefaultPassConfig$50",
339:       "com.google.javascript.jscomp.CompilerInput",
340:       "com.google.javascript.jscomp.DefaultPassConfig$53",
341:       "com.google.javascript.jscomp.DefaultPassConfig$52",
342:       "com.google.javascript.rhino.head.ast.FunctionNode",
343:       "com.google.javascript.jscomp.AbstractCompiler",
344:       "com.google.javascript.jscomp.ProcessClosurePrimitives",
345:       "com.google.common.collect.UnmodifiableIterator",
346:       "com.google.javascript.jscomp.ExploitAssigns",
347:       "com.google.javascript.rhino.head.Context",
348:       "com.google.common.io.InputSupplier",
349:       "com.google.javascript.jscomp.DiagnosticGroup",
350:       "com.google.common.collect.ImmutableSet$TransformedImmutableSet",
351:       "com.google.common.collect.AbstractMultimap$WrappedList",
352:       "com.google.javascript.jscomp.CodeChangeHandler$RecentChange",
353:       "com.google.javascript.jscomp.NodeUtil$Visitor",
354:       "com.google.javascript.jscomp.SyntacticScopeCreator$RedeclarationHandler",
355:       "com.google.javascript.rhino.head.NativeBoolean",
356:       "com.google.javascript.jscomp.DefaultPassConfig$48",
357:       "com.google.javascript.rhino.Node$AncestorIterable",
358:       "com.google.javascript.jscomp.DefaultPassConfig$47",
359:       "com.google.common.collect.AbstractMultimap$RandomAccessWrappedList",
360:       "com.google.javascript.rhino.head.ast.Name",
361:       "com.google.javascript.jscomp.DefaultPassConfig$49",
362:       "com.google.common.collect.ImmutableEnumSet",
363:       "com.google.javascript.jscomp.DefaultPassConfig$44",
364:       "com.google.javascript.jscomp.DefaultPassConfig$43",
365:       "com.google.javascript.jscomp.DefaultPassConfig$46",
366:       "com.google.javascript.jscomp.DefaultPassConfig$45",
367:       "com.google.javascript.jscomp.DefaultPassConfig$40",
368:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax$1",
369:       "com.google.common.collect.HashMultiset",
370:       "com.google.javascript.rhino.jstype.UnresolvedTypeExpression",
371:       "com.google.javascript.jscomp.DefaultPassConfig$42",
372:       "com.google.javascript.jscomp.DefaultPassConfig$41",
373:       "com.google.protobuf.AbstractMessageLite",
374:       "com.google.javascript.jscomp.ErrorManager",
375:       "com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate",
376:       "com.google.common.collect.SingletonImmutableList",
377:       "com.google.javascript.rhino.head.ast.ConditionalExpression",
378:       "com.google.javascript.jscomp.CheckLevel",
379:       "com.google.javascript.rhino.jstype.StaticSlot",
380:       "com.google.javascript.rhino.head.ast.PropertyGet",
381:       "com.google.common.collect.AbstractSetMultimap",
382:       "com.google.javascript.rhino.head.ContextFactory",
383:       "com.google.javascript.jscomp.CoalesceVariableNames$1",
384:       "com.google.common.base.Function",
385:       "com.google.javascript.rhino.head.VMBridge",
386:       "com.google.common.collect.ImmutableMap",
387:       "com.google.javascript.jscomp.DefaultPassConfig$37",
388:       "com.google.common.collect.Multiset$Entry",
389:       "com.google.javascript.jscomp.DefaultPassConfig$36",
390:       "com.google.javascript.jscomp.DefaultPassConfig$39",
391:       "com.google.javascript.jscomp.DefaultPassConfig$38",
392:       "com.google.javascript.jscomp.DefaultPassConfig$33",
393:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
394:       "com.google.javascript.jscomp.DefaultPassConfig$32",
395:       "com.google.javascript.jscomp.DefaultPassConfig$35",
396:       "com.google.javascript.jscomp.DefaultPassConfig$34",
397:       "com.google.javascript.rhino.head.ast.Loop",
398:       "com.google.javascript.jscomp.DefaultPassConfig$31",
399:       "com.google.javascript.jscomp.CrossModuleMethodMotion$IdGenerator",
400:       "com.google.javascript.jscomp.Region",
401:       "com.google.javascript.jscomp.DefaultPassConfig$30",
402:       "com.google.javascript.rhino.IR",
403:       "com.google.javascript.rhino.head.ast.GeneratorExpressionLoop",
404:       "com.google.javascript.jscomp.NodeTraversal$AbstractPostOrderCallback",
405:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
406:       "com.google.javascript.jscomp.DefaultPassConfig",
407:       "com.google.javascript.jscomp.Normalize",
408:       "com.google.javascript.jscomp.CompilerOptions$TracerMode",
409:       "com.google.javascript.jscomp.RhinoErrorReporter$OldRhinoErrorReporter",
410:       "com.google.javascript.jscomp.DefinitionProvider",
411:       "com.google.javascript.jscomp.DefaultPassConfig$29",
412:       "com.google.common.collect.AbstractMultiset",
413:       "com.google.javascript.jscomp.DefaultPassConfig$26",
414:       "com.google.javascript.jscomp.DefaultPassConfig$25",
415:       "com.google.javascript.jscomp.DefaultPassConfig$28",
416:       "com.google.common.collect.Iterators",
417:       "com.google.javascript.jscomp.DefaultPassConfig$27",
418:       "com.google.javascript.rhino.head.IdFunctionCall",
419:       "com.google.javascript.jscomp.DefaultPassConfig$22",
420:       "com.google.javascript.jscomp.DefaultPassConfig$21",
421:       "com.google.javascript.jscomp.DefaultPassConfig$24",
422:       "com.google.javascript.jscomp.DefaultPassConfig$23",
423:       "com.google.javascript.jscomp.ProcessTweaks$TweakFunction",
424:       "com.google.javascript.rhino.head.ast.SwitchStatement",
425:       "com.google.javascript.jscomp.DependencyOptions",
426:       "com.google.javascript.jscomp.DefaultPassConfig$20",
427:       "com.google.common.collect.Multisets$EntrySet",
428:       "com.google.javascript.rhino.head.ast.DoLoop",
429:       "com.google.javascript.jscomp.SourceFile$OnDisk",
430:       "com.google.javascript.rhino.head.ScriptRuntime",
431:       "com.google.javascript.jscomp.DefaultPassConfig$19",
432:       "com.google.javascript.jscomp.DefaultPassConfig$18",
433:       "com.google.javascript.rhino.jstype.JSTypeNative",
434:       "com.google.javascript.rhino.jstype.AllType",
435:       "com.google.javascript.jscomp.DefaultPassConfig$15",
436:       "com.google.javascript.jscomp.DefaultPassConfig$14",
437:       "com.google.common.collect.Maps",
438:       "com.google.common.primitives.Ints",
439:       "com.google.javascript.jscomp.NodeTraversal$AbstractShallowStatementCallback",
440:       "com.google.javascript.jscomp.DefaultPassConfig$17",
441:       "com.google.common.collect.SetMultimap",
442:       "com.google.javascript.rhino.head.ast.ExpressionStatement",
443:       "com.google.javascript.jscomp.DefaultPassConfig$16",
444:       "com.google.javascript.jscomp.DefaultPassConfig$7",
445:       "com.google.javascript.jscomp.DefaultPassConfig$11",
446:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
447:       "com.google.javascript.jscomp.DefaultPassConfig$8",
448:       "com.google.javascript.jscomp.DefaultPassConfig$10",
449:       "com.google.javascript.jscomp.DefaultPassConfig$5",
450:       "com.google.javascript.jscomp.DefaultPassConfig$13",
451:       "com.google.javascript.jscomp.DefaultPassConfig$6",
452:       "com.google.javascript.jscomp.DefaultPassConfig$12",
453:       "com.google.javascript.rhino.JSTypeExpression",
454:       "com.google.javascript.jscomp.DefaultPassConfig$9",
455:       "com.google.javascript.rhino.head.ScriptableObject",
456:       "com.google.javascript.rhino.head.IdScriptableObject",
457:       "com.google.javascript.rhino.head.NativeFunction",
458:       "com.google.common.collect.RegularImmutableMap$Values",
459:       "com.google.javascript.jscomp.DefaultPassConfig$3",
460:       "com.google.javascript.jscomp.DefaultPassConfig$4",
461:       "com.google.javascript.jscomp.DefaultPassConfig$1",
462:       "com.google.javascript.jscomp.DefaultPassConfig$2",
463:       "com.google.javascript.rhino.head.ast.ObjectProperty",
464:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
465:       "com.google.javascript.rhino.head.Icode",
466:       "com.google.javascript.jscomp.type.ReverseAbstractInterpreter",
467:       "com.google.javascript.jscomp.graph.GraphColoring$GreedyGraphColoring",
468:       "com.google.javascript.jscomp.CompilerOptions$LanguageMode",
469:       "com.google.javascript.rhino.head.ast.UnaryExpression",
470:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
471:       "com.google.javascript.rhino.jstype.ArrowType",
472:       "com.google.javascript.rhino.SimpleErrorReporter",
473:       "com.google.common.collect.Lists$RandomAccessPartition",
474:       "com.google.javascript.jscomp.type.FlowScope",
475:       "com.google.javascript.rhino.head.WrappedException",
476:       "com.google.javascript.jscomp.graph.GraphNode",
477:       "com.google.javascript.jscomp.TightenTypes$ConcreteScope",
478:       "com.google.javascript.rhino.jstype.NumberType",
479:       "com.google.javascript.rhino.head.debug.DebuggableObject",
480:       "com.google.javascript.rhino.head.Function",
481:       "com.google.javascript.jscomp.PassFactory",
482:       "com.google.javascript.rhino.Node$IntPropListItem",
483:       "com.google.common.collect.Sets$2",
484:       "com.google.common.collect.Sets$3",
485:       "com.google.javascript.rhino.head.ast.LetNode",
486:       "com.google.common.collect.Sets$1",
487:       "com.google.javascript.jscomp.parsing.IRFactory$1",
488:       "com.google.javascript.jscomp.TypeInferencePass",
489:       "com.google.javascript.jscomp.ControlFlowGraph",
490:       "com.google.javascript.jscomp.graph.GraphvizGraph",
491:       "com.google.javascript.rhino.head.ContextFactory$Listener",
492:       "com.google.javascript.rhino.head.NativeCall",
493:       "com.google.common.collect.AbstractMapEntry",
494:       "com.google.javascript.rhino.Node$AncestorIterable$1",
495:       "com.google.common.collect.Iterators$12",
496:       "com.google.common.collect.Iterators$11",
497:       "com.google.javascript.jscomp.ClosureCodingConvention",
498:       "com.google.common.base.Predicate",
499:       "com.google.common.collect.AbstractMultimap$AsMap",
500:       "com.google.javascript.jscomp.ControlStructureCheck",
501:       "com.google.javascript.jscomp.VariableReferenceCheck",
502:       "com.google.javascript.jscomp.WarningsGuard",
503:       "com.google.javascript.jscomp.SourceMap",
504:       "com.google.javascript.rhino.head.ast.ForInLoop",
505:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
506:       "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
507:       "com.google.common.collect.AbstractListMultimap",
508:       "com.google.javascript.jscomp.LightweightMessageFormatter$LineNumberingFormatter",
509:       "com.google.javascript.jscomp.CompilerOptions",
510:       "com.google.javascript.rhino.Node$StringNode",
511:       "com.google.javascript.rhino.jstype.TemplateType",
512:       "com.google.javascript.rhino.jstype.NamedType",
513:       "com.google.common.collect.Iterators$14",
514:       "com.google.common.collect.Iterators$13",
515:       "com.google.common.collect.Lists",
516:       "com.google.javascript.jscomp.CheckProvides",
517:       "com.google.javascript.rhino.head.ast.Block",
518:       "com.google.common.collect.UnmodifiableListIterator",
519:       "com.google.javascript.rhino.head.ast.SwitchCase",
520:       "com.google.common.io.ByteArrayDataInput",
521:       "com.google.javascript.jscomp.RhinoErrorReporter",
522:       "com.google.javascript.jscomp.CompilerOptions$AliasTransformation",
523:       "com.google.javascript.rhino.jstype.UnknownType",
524:       "com.google.common.base.Charsets",
525:       "com.google.javascript.rhino.head.ast.StringLiteral",
526:       "com.google.javascript.jscomp.CheckGlobalNames",
527:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
528:       "com.google.javascript.rhino.jstype.StaticSourceFile",
529:       "org.mozilla.classfile.ClassFileWriter$ClassFileFormatException",
530:       "com.google.javascript.rhino.head.ScriptableObject$Slot",
531:       "com.google.javascript.rhino.head.ast.ReturnStatement",
532:       "com.google.javascript.jscomp.ConcreteType$ConcreteFunctionType",
533:       "com.google.common.base.CharMatcher",
534:       "com.google.javascript.rhino.jstype.JSType$TypePair",
535:       "com.google.common.base.Joiner$MapJoiner",
536:       "com.google.javascript.jscomp.CheckRegExp",
537:       "com.google.javascript.jscomp.CheckGlobalThis",
538:       "com.google.common.collect.RegularImmutableMap$NonTerminalEntry",
539:       "com.google.common.collect.AbstractMultiset$EntrySet",
540:       "com.google.javascript.jscomp.ConcreteType$Factory",
541:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt$2",
542:       "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
543:       "com.google.common.base.Preconditions",
544:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt$1",
545:       "com.google.javascript.rhino.head.ast.ArrayLiteral",
546:       "com.google.javascript.rhino.head.ast.RegExpLiteral",
547:       "com.google.javascript.jscomp.BasicErrorManager",
548:       "com.google.javascript.jscomp.SourceFile$Generator",
549:       "com.google.javascript.jscomp.PerformanceTracker",
550:       "com.google.javascript.rhino.jstype.IndexedType",
551:       "com.google.javascript.jscomp.NodeUtil$MatchNodeType",
552:       "com.google.javascript.jscomp.ComposeWarningsGuard$GuardComparator",
553:       "com.google.javascript.jscomp.ProcessDefines",
554:       "com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph",
555:       "com.google.javascript.rhino.head.NativeArray",
556:       "com.google.javascript.jscomp.PeepholeFoldConstants",
557:       "com.google.javascript.rhino.Node$NumberNode",
558:       "com.google.javascript.jscomp.Scope",
559:       "com.google.common.io.ByteArrayDataOutput",
560:       "com.google.javascript.rhino.head.Parser",
561:       "com.google.common.collect.Iterators$6",
562:       "com.google.javascript.jscomp.ErrorFormat$2",
563:       "com.google.javascript.jscomp.SourceInformationAnnotator",
564:       "com.google.common.collect.BiMap",
565:       "com.google.common.collect.Iterators$7",
566:       "com.google.javascript.rhino.head.NativeString",
567:       "com.google.javascript.jscomp.ErrorFormat$3",
568:       "com.google.javascript.jscomp.ErrorFormat$4",
569:       "com.google.javascript.rhino.head.ast.XmlRef",
570:       "com.google.common.collect.ImmutableSet",
571:       "com.google.javascript.jscomp.PeepholeReplaceKnownMethods",
572:       "com.google.javascript.jscomp.AbstractPeepholeOptimization",
573:       "com.google.javascript.rhino.jstype.JSTypeRegistry$ResolveMode",
574:       "com.google.javascript.rhino.head.ast.ElementGet",
575:       "com.google.common.collect.Iterators$1",
576:       "com.google.javascript.jscomp.DisambiguateProperties$Warnings",
577:       "com.google.common.collect.Iterators$2",
578:       "com.google.common.collect.Iterators$3",
579:       "com.google.javascript.jscomp.parsing.Annotation",
580:       "com.google.javascript.jscomp.AbstractMessageFormatter",
581:       "com.google.javascript.jscomp.DefinitionSite",
582:       "com.google.common.collect.Lists$StringAsImmutableList",
583:       "com.google.javascript.rhino.head.JavaScriptException",
584:       "com.google.javascript.rhino.head.ast.IdeErrorReporter",
585:       "com.google.javascript.jscomp.ProcessTweaks",
586:       "com.google.javascript.jscomp.NodeUtil$1",
587:       "com.google.javascript.rhino.head.ast.TryStatement",
588:       "com.google.javascript.jscomp.parsing.IRFactory",
589:       "com.google.javascript.rhino.head.TopLevel",
590:       "com.google.javascript.jscomp.ErrorFormat$1",
591:       "com.google.javascript.jscomp.Compiler$3",
592:       "com.google.javascript.jscomp.PrepareAst$PrepareAnnotations",
593:       "com.google.common.collect.AbstractMultimap",
594:       "com.google.common.base.Predicates$ObjectPredicate$1",
595:       "com.google.common.collect.EmptyImmutableSet",
596:       "com.google.javascript.jscomp.UseSite",
597:       "com.google.common.io.Files",
598:       "com.google.javascript.jscomp.NodeUtil$MatchNotFunction",
599:       "com.google.javascript.jscomp.LinkedFlowScope$FlatFlowScopeCache",
600:       "com.google.javascript.jscomp.parsing.Config$LanguageMode",
601:       "com.google.javascript.rhino.head.ast.ArrayComprehension",
602:       "com.google.javascript.jscomp.OptimizeCalls$CallGraphCompilerPass",
603:       "com.google.protobuf.AbstractMessage",
604:       "com.google.javascript.jscomp.CodingConvention$Bind",
605:       "com.google.javascript.rhino.head.ScriptRuntime$1",
606:       "com.google.javascript.jscomp.PassFactory$1",
607:       "com.google.javascript.rhino.head.ObjToIntMap",
608:       "com.google.javascript.jscomp.PeepholeRemoveDeadCode",
609:       "com.google.common.collect.ImmutableMap$Builder",
610:       "com.google.javascript.rhino.head.ConstProperties",
611:       "com.google.javascript.jscomp.deps.SortedDependencies$MissingProvideException",
612:       "com.google.common.base.Predicates$ObjectPredicate$4",
613:       "com.google.javascript.jscomp.ReorderConstantExpression",
614:       "com.google.common.base.Predicates$ObjectPredicate$3",
615:       "com.google.javascript.jscomp.LinkedFlowScope",
616:       "com.google.common.base.Predicates$ObjectPredicate$2",
617:       "com.google.javascript.jscomp.NodeUtil$MatchNameNode",
618:       "com.google.javascript.jscomp.graph.LinkedUndirectedGraph",
619:       "com.google.common.collect.ListMultimap",
620:       "com.google.javascript.rhino.JSDocInfo$Visibility",
621:       "com.google.javascript.rhino.head.ast.DestructuringForm",
622:       "com.google.javascript.jscomp.SourceMap$Format$4",
623:       "com.google.javascript.jscomp.SourceMap$Format$3",
624:       "com.google.javascript.jscomp.SourceMap$Format$2",
625:       "com.google.javascript.jscomp.SourceMap$Format$1",
626:       "com.google.javascript.jscomp.SourceAst",
627:       "com.google.javascript.rhino.jstype.TernaryValue$1",
628:       "com.google.common.base.Predicates$ObjectPredicate",
629:       "com.google.common.collect.RegularImmutableList",
630:       "com.google.javascript.jscomp.MessageBundle",
631:       "com.google.javascript.rhino.jstype.TernaryValue$3",
632:       "com.google.javascript.rhino.jstype.TernaryValue$2",
633:       "com.google.javascript.jscomp.CheckUnreachableCode",
634:       "com.google.javascript.jscomp.SourceExcerptProvider",
635:       "com.google.common.collect.Lists$TransformingRandomAccessList",
636:       "com.google.javascript.rhino.head.ScriptableObject$RelinkedSlot",
637:       "com.google.javascript.jscomp.ReferenceCollectingCallback$Behavior",
638:       "com.google.javascript.rhino.Node$PropListItem",
639:       "com.google.common.collect.RegularImmutableMap$KeySet",
640:       "com.google.common.collect.Maps$KeySet",
641:       "com.google.javascript.rhino.Node",
642:       "com.google.javascript.rhino.head.RhinoException",
643:       "com.google.javascript.rhino.head.ast.EmptyExpression",
644:       "com.google.javascript.rhino.head.ast.XmlLiteral",
645:       "com.google.javascript.rhino.head.ast.ContinueStatement",
646:       "com.google.javascript.jscomp.LoggerErrorManager",
647:       "com.google.javascript.jscomp.ComposeWarningsGuard",
648:       "com.google.javascript.jscomp.NodeTraversal",
649:       "com.google.javascript.rhino.head.ErrorReporter",
650:       "com.google.javascript.jscomp.NodeTraversal$AbstractScopedCallback",
651:       "com.google.common.collect.Multisets",
652:       "com.google.javascript.jscomp.VariableMap",
653:       "com.google.javascript.jscomp.JsAst",
654:       "com.google.javascript.rhino.head.ast.XmlMemberGet",
655:       "com.google.javascript.jscomp.ErrorFormat",
656:       "com.google.javascript.rhino.head.ast.Scope",
657:       "com.google.javascript.jscomp.AbstractCompiler$LifeCycleStage",
658:       "com.google.javascript.jscomp.ConcreteType",
659:       "com.google.javascript.rhino.head.Scriptable",
660:       "com.google.javascript.jscomp.JqueryCodingConvention",
661:       "com.google.common.io.ByteStreams",
662:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
663:       "com.google.javascript.jscomp.NodeUtil$BooleanResultPredicate",
664:       "com.google.javascript.jscomp.TightenTypes",
665:       "com.google.javascript.rhino.jstype.VoidType",
666:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler",
667:       "com.google.javascript.rhino.jstype.JSType",
668:       "com.google.common.io.ByteProcessor",
669:       "com.google.javascript.jscomp.ControlFlowGraph$Branch",
670:       "com.google.javascript.jscomp.ConvertToDottedProperties",
671:       "com.google.common.collect.Sets$SetView",
672:       "com.google.javascript.jscomp.SyntheticAst",
673:       "com.google.javascript.jscomp.DiagnosticGroups",
674:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
675:       "com.google.javascript.jscomp.ScopeCreator",
676:       "com.google.common.collect.RegularImmutableMap$TerminalEntry",
677:       "com.google.common.base.Predicates",
678:       "com.google.javascript.jscomp.graph.AdjacencyGraph",
679:       "com.google.javascript.jscomp.deps.SortedDependencies$CircularDependencyException",
680:       "com.google.common.collect.Lists$TransformingSequentialList",
681:       "com.google.javascript.rhino.head.NativeNumber",
682:       "com.google.javascript.jscomp.SourceFile",
683:       "com.google.javascript.rhino.head.ast.BreakStatement",
684:       "com.google.javascript.jscomp.PropertyRenamingPolicy",
685:       "com.google.javascript.rhino.jstype.FunctionBuilder",
686:       "com.google.javascript.jscomp.CodingConvention$DelegateRelationship",
687:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax$FoldArrayAction",
688:       "com.google.javascript.rhino.head.ast.WithStatement",
689:       "com.google.javascript.rhino.head.ScriptRuntime$MessageProvider",
690:       "com.google.common.collect.MapDifference",
691:       "com.google.javascript.jscomp.CompilerOptions$AliasTransformationHandler",
692:       "com.google.javascript.jscomp.CodingConvention$AssertionFunctionSpec",
693:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
694:       "com.google.javascript.jscomp.SourceFile$Generated",
695:       "com.google.javascript.rhino.jstype.FunctionType",
696:       "com.google.javascript.rhino.head.ast.AstNode",
697:       "com.google.javascript.jscomp.Compiler",
698:       "com.google.javascript.jscomp.PassConfig$PassConfigDelegate",
699:       "com.google.javascript.jscomp.NodeTraversal$ScopedCallback",
700:       "com.google.javascript.jscomp.TypedScopeCreator",
701:       "com.google.common.base.CharMatcher$12",
702:       "com.google.common.base.CharMatcher$11",
703:       "com.google.javascript.rhino.head.Node",
704:       "com.google.common.base.CharMatcher$10",
705:       "com.google.javascript.rhino.jstype.TernaryValue",
706:       "com.google.common.io.Files$1",
707:       "com.google.javascript.jscomp.JSError",
708:       "com.google.common.base.CharMatcher$15",
709:       "com.google.common.base.CharMatcher$14",
710:       "com.google.common.collect.Lists$RandomAccessListWrapper",
711:       "com.google.common.base.CharMatcher$13",
712:       "com.google.common.base.Platform",
713:       "com.google.javascript.jscomp.TypedScopeCreator$GlobalScopeBuilder",
714:       "com.google.javascript.jscomp.PeepholeFoldWithTypes",
715:       "com.google.javascript.rhino.head.ast.KeywordLiteral",
716:       "com.google.javascript.jscomp.NodeTraversal$AbstractShallowCallback",
717:       "com.google.javascript.rhino.head.ast.Assignment",
718:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
719:       "com.google.javascript.rhino.jstype.UnionType",
720:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
721:       "com.google.javascript.rhino.head.ast.LabeledStatement",
722:       "com.google.javascript.jscomp.ControlFlowAnalysis",
723:       "com.google.javascript.jscomp.graph.LatticeElement",
724:       "com.google.common.collect.AbstractIndexedListIterator",
725:       "com.google.javascript.rhino.head.ast.XmlExpression",
726:       "com.google.javascript.jscomp.JSModuleGraph",
727:       "com.google.javascript.jscomp.GatherRawExports",
728:       "com.google.common.collect.AbstractMultimap$SortedKeySet",
729:       "com.google.javascript.jscomp.SyntacticScopeCreator$DefaultRedeclarationHandler",
730:       "com.google.common.collect.Sets",
731:       "com.google.common.collect.ImmutableCollection$EmptyImmutableCollection",
732:       "com.google.javascript.rhino.head.Kit",
733:       "com.google.javascript.jscomp.TypedScopeCreator$LocalScopeBuilder",
734:       "com.google.javascript.jscomp.BasicErrorManager$LeveledJSErrorComparator",
735:       "com.google.javascript.rhino.Node$ObjectPropListItem",
736:       "com.google.javascript.rhino.head.jdk15.VMBridge_jdk15",
737:       "com.google.javascript.rhino.head.ContextAction",
738:       "com.google.javascript.rhino.head.EvaluatorException",
739:       "com.google.javascript.jscomp.ProcessCommonJSModules",
740:       "com.google.javascript.rhino.head.ast.NumberLiteral",
741:       "com.google.common.collect.AbstractMultimap$SortedAsMap",
742:       "com.google.javascript.jscomp.Compiler$IntermediateState",
743:       "com.google.javascript.rhino.head.ast.ErrorNode",
744:       "com.google.common.collect.EmptyImmutableMap",
745:       "com.google.common.collect.Multimap",
746:       "com.google.javascript.jscomp.SourceMap$DetailLevel$2",
747:       "com.google.javascript.jscomp.SourceMap$DetailLevel$1",
748:       "com.google.javascript.jscomp.VarCheck",
749:       "com.google.javascript.jscomp.CompilerOptions$DevMode",
750:       "com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder",
751:       "com.google.javascript.rhino.head.Interpreter",
752:       "com.google.javascript.rhino.jstype.StringType",
753:       "com.google.javascript.rhino.head.ImporterTopLevel",
754:       "com.google.javascript.rhino.jstype.StaticSymbolTable",
755:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
756:       "com.google.javascript.jscomp.JSModuleGraph$ModuleDependenceException",
757:       "com.google.javascript.jscomp.graph.DiGraph",
758:       "com.google.common.base.Platform$1",
759:       "com.google.javascript.jscomp.parsing.ParserRunner",
760:       "com.google.common.collect.RegularImmutableMap$EntrySet",
761:       "com.google.javascript.rhino.head.ast.GeneratorExpression",
762:       "com.google.javascript.rhino.head.ast.XmlDotQuery",
763:       "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement",
764:       "com.google.javascript.jscomp.ConstCheck",
765:       "com.google.javascript.rhino.jstype.Visitor",
766:       "com.google.javascript.jscomp.TypeCheck",
767:       "com.google.javascript.jscomp.SymbolTable",
768:       "com.google.javascript.jscomp.deps.DependencyInfo",
769:       "com.google.javascript.jscomp.Compiler$10",
770:       "com.google.javascript.jscomp.WarningsGuard$Priority",
771:       "com.google.javascript.rhino.head.ContextFactory$GlobalSetter",
772:       "com.google.common.base.CharMatcher$Or",
773:       "com.google.javascript.rhino.head.ast.NodeVisitor",
774:       "com.google.protobuf.Message",
775:       "com.google.javascript.rhino.head.ast.ArrayComprehensionLoop",
776:       "com.google.javascript.rhino.head.Parser$ParserException",
777:       "com.google.javascript.rhino.head.NativeObject"
778:     );
779:   } 
780: 
781:   private static void resetClasses() {
782:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NodeUtil_156_tmp__ESTest_scaffolding.class.getClassLoader()); 
783: 
784:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
785:       "com.google.common.collect.ImmutableCollection$EmptyImmutableCollection",
786:       "com.google.common.collect.ImmutableCollection",
787:       "com.google.common.collect.ImmutableSet",
788:       "com.google.common.collect.Hashing",
789:       "com.google.common.collect.ImmutableSet$ArrayImmutableSet",
790:       "com.google.common.collect.RegularImmutableSet",
791:       "com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate",
792:       "com.google.javascript.jscomp.NodeUtil$BooleanResultPredicate",
793:       "com.google.javascript.jscomp.NodeUtil$MayBeStringResultPredicate",
794:       "com.google.javascript.jscomp.NodeUtil$MatchNotFunction",
795:       "com.google.javascript.jscomp.NodeUtil",
796:       "com.google.javascript.jscomp.NodeUtil$MatchNodeType",
797:       "com.google.javascript.jscomp.NodeUtil$MatchNameNode",
798:       "com.google.javascript.jscomp.NodeUtil$VarCollector",
799:       "com.google.javascript.rhino.jstype.TernaryValue",
800:       "com.google.common.base.Predicates$ObjectPredicate",
801:       "com.google.javascript.rhino.Node",
802:       "com.google.javascript.rhino.Node$StringNode",
803:       "com.google.common.base.Preconditions",
804:       "com.google.javascript.jscomp.AbstractPeepholeOptimization",
805:       "com.google.javascript.jscomp.ReorderConstantExpression",
806:       "com.google.javascript.jscomp.AbstractMessageFormatter",
807:       "com.google.javascript.jscomp.LightweightMessageFormatter$LineNumberingFormatter",
808:       "com.google.javascript.jscomp.LightweightMessageFormatter",
809:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt",
810:       "com.google.javascript.jscomp.BasicErrorManager",
811:       "com.google.javascript.jscomp.LoggerErrorManager",
812:       "com.google.javascript.jscomp.BasicErrorManager$LeveledJSErrorComparator",
813:       "com.google.common.collect.Sets",
814:       "com.google.javascript.jscomp.DiagnosticType",
815:       "com.google.javascript.jscomp.AbstractCompiler",
816:       "com.google.javascript.jscomp.Compiler",
817:       "com.google.javascript.jscomp.AbstractCompiler$LifeCycleStage",
818:       "com.google.common.base.Joiner",
819:       "com.google.common.collect.Collections2",
820:       "com.google.common.base.Joiner$MapJoiner",
821:       "com.google.common.collect.Maps",
822:       "com.google.javascript.jscomp.CodingConventions$Proxy",
823:       "com.google.javascript.jscomp.ClosureCodingConvention",
824:       "com.google.javascript.jscomp.CodingConventions",
825:       "com.google.javascript.jscomp.CodingConventions$DefaultCodingConvention",
826:       "com.google.common.collect.ImmutableList",
827:       "com.google.common.collect.UnmodifiableIterator",
828:       "com.google.common.collect.UnmodifiableListIterator",
829:       "com.google.common.collect.EmptyImmutableList$1",
830:       "com.google.common.collect.EmptyImmutableList",
831:       "com.google.common.collect.Iterators$1",
832:       "com.google.common.collect.Iterators$2",
833:       "com.google.common.collect.Iterators",
834:       "com.google.javascript.jscomp.RhinoErrorReporter",
835:       "com.google.javascript.jscomp.RhinoErrorReporter$OldRhinoErrorReporter",
836:       "com.google.javascript.rhino.head.Kit",
837:       "com.google.javascript.rhino.head.optimizer.Codegen",
838:       "com.google.javascript.rhino.head.Icode",
839:       "com.google.javascript.rhino.head.Interpreter",
840:       "com.google.javascript.rhino.head.Context",
841:       "com.google.javascript.rhino.head.ContextFactory",
842:       "com.google.javascript.rhino.head.ScriptableObject",
843:       "com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider",
844:       "com.google.javascript.rhino.head.ScriptRuntime",
845:       "com.google.javascript.rhino.head.jdk13.VMBridge_jdk13",
846:       "com.google.javascript.rhino.head.jdk15.VMBridge_jdk15",
847:       "com.google.javascript.rhino.head.VMBridge",
848:       "com.google.javascript.rhino.ScriptRuntime",
849:       "com.google.common.collect.ImmutableMap",
850:       "com.google.common.collect.RegularImmutableMap",
851:       "com.google.common.collect.AbstractMapEntry",
852:       "com.google.common.collect.ImmutableEntry",
853:       "com.google.common.collect.RegularImmutableMap$TerminalEntry",
854:       "com.google.javascript.jscomp.RhinoErrorReporter$NewRhinoErrorReporter",
855:       "com.google.javascript.jscomp.PassFactory",
856:       "com.google.javascript.jscomp.Compiler$3",
857:       "com.google.javascript.jscomp.CodeChangeHandler$RecentChange",
858:       "com.google.common.collect.Lists",
859:       "com.google.javascript.jscomp.InlineProperties$PropertyInfo",
860:       "com.google.javascript.jscomp.InlineProperties",
861:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
862:       "com.google.javascript.rhino.SimpleErrorReporter",
863:       "com.google.common.collect.AbstractMultimap",
864:       "com.google.common.collect.AbstractSetMultimap",
865:       "com.google.common.collect.LinkedHashMultimap",
866:       "com.google.common.collect.AbstractListMultimap",
867:       "com.google.common.collect.ArrayListMultimap",
868:       "com.google.javascript.rhino.jstype.JSTypeRegistry$ResolveMode",
869:       "com.google.javascript.rhino.jstype.JSTypeNative",
870:       "com.google.javascript.rhino.jstype.JSType$1",
871:       "com.google.javascript.rhino.jstype.JSType",
872:       "com.google.javascript.rhino.jstype.ValueType",
873:       "com.google.javascript.rhino.jstype.BooleanType",
874:       "com.google.javascript.rhino.jstype.NullType",
875:       "com.google.javascript.rhino.jstype.NumberType",
876:       "com.google.javascript.rhino.jstype.StringType",
877:       "com.google.javascript.rhino.jstype.ObjectType",
878:       "com.google.javascript.rhino.jstype.UnknownType",
879:       "com.google.javascript.rhino.jstype.VoidType",
880:       "com.google.javascript.rhino.jstype.AllType",
881:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
882:       "com.google.javascript.rhino.jstype.FunctionType",
883:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
884:       "com.google.javascript.rhino.Node$AbstractPropListItem",
885:       "com.google.javascript.rhino.Node$IntPropListItem",
886:       "com.google.javascript.rhino.jstype.ArrowType",
887:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
888:       "com.google.javascript.rhino.jstype.InstanceObjectType",
889:       "com.google.javascript.rhino.jstype.ObjectType$Property",
890:       "com.google.javascript.rhino.jstype.NoObjectType",
891:       "com.google.javascript.rhino.jstype.NoType",
892:       "com.google.javascript.rhino.jstype.NoResolvedType",
893:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
894:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
895:       "com.google.javascript.rhino.jstype.UnionType",
896:       "com.google.common.collect.RegularImmutableList",
897:       "com.google.javascript.rhino.jstype.FunctionBuilder",
898:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
899:       "com.google.javascript.rhino.Token",
900:       "com.google.javascript.rhino.IR",
901:       "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments",
902:       "com.google.javascript.jscomp.GoogleCodingConvention",
903:       "com.google.javascript.jscomp.NodeTraversal$AbstractPostOrderCallback",
904:       "com.google.javascript.jscomp.CoalesceVariableNames$1",
905:       "com.google.javascript.jscomp.CoalesceVariableNames",
906:       "com.google.javascript.jscomp.NodeTraversal",
907:       "com.google.javascript.jscomp.SyntacticScopeCreator",
908:       "com.google.javascript.jscomp.SyntacticScopeCreator$DefaultRedeclarationHandler",
909:       "com.google.javascript.rhino.Node$ObjectPropListItem",
910:       "com.google.javascript.jscomp.JqueryCodingConvention",
911:       "com.google.javascript.rhino.Node$NumberNode",
912:       "com.google.javascript.jscomp.JSModule",
913:       "com.google.javascript.jscomp.VerboseMessageFormatter",
914:       "com.google.javascript.jscomp.PrintStreamErrorManager",
915:       "com.google.javascript.jscomp.PeepholeRemoveDeadCode",
916:       "com.google.javascript.jscomp.ErrorFormat",
917:       "com.google.javascript.jscomp.ControlFlowAnalysis",
918:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler$NullAliasTransformation",
919:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler",
920:       "com.google.javascript.jscomp.CompilerOptions",
921:       "com.google.javascript.jscomp.DependencyOptions",
922:       "com.google.javascript.jscomp.ProcessCommonJSModules",
923:       "com.google.javascript.jscomp.WarningsGuard",
924:       "com.google.javascript.jscomp.ComposeWarningsGuard",
925:       "com.google.common.primitives.Ints",
926:       "com.google.javascript.jscomp.ComposeWarningsGuard$GuardComparator",
927:       "com.google.javascript.jscomp.SourceMap$DetailLevel",
928:       "com.google.javascript.jscomp.SourceMap$Format",
929:       "com.google.javascript.jscomp.CompilerOptions$LanguageMode",
930:       "com.google.javascript.jscomp.CompilerOptions$DevMode",
931:       "com.google.javascript.jscomp.VariableRenamingPolicy",
932:       "com.google.javascript.jscomp.PropertyRenamingPolicy",
933:       "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
934:       "com.google.javascript.jscomp.CompilerOptions$TweakProcessing",
935:       "com.google.javascript.jscomp.CompilerOptions$TracerMode",
936:       "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement",
937:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
938:       "com.google.javascript.rhino.TokenStream",
939:       "com.google.javascript.jscomp.SyntheticAst",
940:       "com.google.javascript.rhino.InputId",
941:       "com.google.javascript.jscomp.SourceFile",
942:       "com.google.javascript.jscomp.CompilerInput",
943:       "com.google.javascript.jscomp.JsAst",
944:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
945:       "com.google.javascript.jscomp.StatementFusion",
946:       "com.google.javascript.jscomp.ExploitAssigns",
947:       "com.google.javascript.jscomp.Normalize",
948:       "com.google.javascript.jscomp.CheckGlobalThis",
949:       "com.google.javascript.jscomp.DiagnosticGroup",
950:       "com.google.common.collect.SingletonImmutableSet",
951:       "com.google.javascript.jscomp.CheckAccessControls",
952:       "com.google.common.collect.AbstractIndexedListIterator",
953:       "com.google.common.collect.Iterators$11",
954:       "com.google.javascript.jscomp.TypeValidator",
955:       "com.google.javascript.jscomp.VarCheck",
956:       "com.google.javascript.jscomp.CheckGlobalNames",
957:       "com.google.javascript.jscomp.VariableReferenceCheck",
958:       "com.google.javascript.jscomp.ProcessDefines",
959:       "com.google.common.base.CharMatcher$11",
960:       "com.google.common.base.CharMatcher$12",
961:       "com.google.common.base.CharMatcher$Or",
962:       "com.google.common.base.Platform$1",
963:       "com.google.common.base.Platform",
964:       "com.google.common.base.CharMatcher$LookupTable",
965:       "com.google.common.base.CharMatcher$15",
966:       "com.google.common.base.CharMatcher$8",
967:       "com.google.common.base.CharMatcher$1",
968:       "com.google.common.base.CharMatcher$2",
969:       "com.google.common.base.CharMatcher$3",
970:       "com.google.common.base.CharMatcher$4",
971:       "com.google.common.base.CharMatcher$5",
972:       "com.google.common.base.CharMatcher$6",
973:       "com.google.common.base.CharMatcher$7",
974:       "com.google.common.base.CharMatcher",
975:       "com.google.javascript.jscomp.ProcessTweaks$TweakFunction",
976:       "com.google.javascript.jscomp.ProcessTweaks",
977:       "com.google.javascript.jscomp.TypedScopeCreator",
978:       "com.google.javascript.jscomp.FunctionTypeBuilder",
979:       "com.google.javascript.jscomp.TypeCheck",
980:       "com.google.javascript.jscomp.CheckDebuggerStatement",
981:       "com.google.javascript.jscomp.CheckRegExp",
982:       "com.google.javascript.jscomp.CheckSideEffects",
983:       "com.google.javascript.jscomp.CheckUnreachableCode",
984:       "com.google.javascript.jscomp.ConstCheck",
985:       "com.google.javascript.jscomp.DisambiguateProperties$Warnings",
986:       "com.google.javascript.jscomp.ControlStructureCheck",
987:       "com.google.javascript.jscomp.StrictModeCheck",
988:       "com.google.javascript.jscomp.CheckProvides",
989:       "com.google.javascript.jscomp.JsMessageVisitor",
990:       "com.google.javascript.jscomp.DiagnosticGroups",
991:       "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
992:       "com.google.javascript.jscomp.WarningsGuard$Priority",
993:       "com.google.javascript.jscomp.SuppressDocWarningsGuard",
994:       "com.google.common.collect.RegularImmutableMap$NonTerminalEntry",
995:       "com.google.common.collect.RegularImmutableMap$EntrySet",
996:       "com.google.javascript.jscomp.SourceFile$Builder",
997:       "com.google.common.base.Charsets",
998:       "com.google.javascript.jscomp.SourceFile$Preloaded",
999:       "com.google.javascript.jscomp.Compiler$10",
1000:       "com.google.javascript.jscomp.parsing.Config$LanguageMode",
1001:       "com.google.javascript.jscomp.parsing.ParserRunner",
1002:       "com.google.javascript.jscomp.parsing.Config",
1003:       "com.google.common.collect.ImmutableMap$Builder",
1004:       "com.google.javascript.jscomp.parsing.Annotation",
1005:       "com.google.javascript.rhino.head.DefaultErrorReporter",
1006:       "com.google.javascript.rhino.head.CompilerEnvirons",
1007:       "com.google.javascript.rhino.head.Parser",
1008:       "com.google.javascript.rhino.head.TokenStream",
1009:       "com.google.javascript.rhino.head.ObjToIntMap",
1010:       "com.google.javascript.rhino.head.Node",
1011:       "com.google.javascript.rhino.head.ast.AstNode",
1012:       "com.google.javascript.rhino.head.ast.Jump",
1013:       "com.google.javascript.rhino.head.ast.Scope",
1014:       "com.google.javascript.rhino.head.ast.ScriptNode",
1015:       "com.google.javascript.rhino.head.ast.AstRoot",
1016:       "com.google.javascript.jscomp.parsing.IRFactory",
1017:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
1018:       "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
1019:       "com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher",
1020:       "com.google.javascript.jscomp.parsing.IRFactory$1",
1021:       "com.google.javascript.rhino.head.Node$NodeIterator",
1022:       "com.google.javascript.jscomp.PrepareAst",
1023:       "com.google.javascript.jscomp.PrepareAst$PrepareAnnotations",
1024:       "com.google.javascript.jscomp.Normalize$NormalizeStatements",
1025:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
1026:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$ContextualRenamer",
1027:       "com.google.common.collect.AbstractMultiset",
1028:       "com.google.common.collect.AbstractMapBasedMultiset",
1029:       "com.google.common.collect.HashMultiset",
1030:       "com.google.common.collect.Multisets",
1031:       "com.google.common.collect.Multisets$EntrySet",
1032:       "com.google.common.collect.AbstractMultiset$EntrySet",
1033:       "com.google.common.collect.AbstractMapBasedMultiset$1",
1034:       "com.google.javascript.jscomp.PeepholeFoldWithTypes",
1035:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax$1",
1036:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
1037:       "com.google.javascript.jscomp.PeepholeFoldConstants",
1038:       "com.google.javascript.jscomp.TightenTypes",
1039:       "com.google.javascript.jscomp.TightenTypes$ConcreteScope",
1040:       "com.google.javascript.rhino.head.ast.Name",
1041:       "com.google.javascript.rhino.head.ast.ExpressionStatement",
1042:       "com.google.javascript.jscomp.FunctionRewriter",
1043:       "com.google.javascript.jscomp.SimpleDefinitionFinder",
1044:       "com.google.javascript.rhino.jstype.EnumType",
1045:       "com.google.javascript.rhino.jstype.EnumElementType",
1046:       "com.google.javascript.jscomp.ControlFlowAnalysis$1",
1047:       "com.google.common.collect.HashMultimap",
1048:       "com.google.javascript.jscomp.PeepholeSimplifyRegExp",
1049:       "com.google.javascript.jscomp.PeepholeReplaceKnownMethods",
1050:       "com.google.javascript.rhino.Node$AncestorIterable",
1051:       "com.google.javascript.rhino.Node$AncestorIterable$1",
1052:       "com.google.javascript.jscomp.Compiler$1",
1053:       "com.google.javascript.jscomp.Compiler$2",
1054:       "com.google.javascript.jscomp.Tracer$1",
1055:       "com.google.javascript.jscomp.Tracer$Stat",
1056:       "com.google.javascript.jscomp.Tracer",
1057:       "com.google.javascript.jscomp.Tracer$ThreadTrace",
1058:       "com.google.javascript.jscomp.CodingConvention$AssertionFunctionSpec",
1059:       "com.google.javascript.jscomp.ClosureCodingConvention$AssertInstanceofSpec",
1060:       "com.google.common.base.Predicates",
1061:       "com.google.javascript.rhino.jstype.ModificationVisitor",
1062:       "com.google.javascript.jscomp.Compiler$IntermediateState",
1063:       "com.google.javascript.jscomp.PassConfig",
1064:       "com.google.javascript.jscomp.DefaultPassConfig",
1065:       "com.google.javascript.jscomp.CrossModuleMethodMotion$IdGenerator",
1066:       "com.google.javascript.jscomp.DefaultPassConfig$HotSwapPassFactory",
1067:       "com.google.javascript.jscomp.DefaultPassConfig$1",
1068:       "com.google.javascript.jscomp.DefaultPassConfig$2",
1069:       "com.google.javascript.jscomp.DefaultPassConfig$3",
1070:       "com.google.javascript.jscomp.DefaultPassConfig$4",
1071:       "com.google.javascript.jscomp.DefaultPassConfig$5",
1072:       "com.google.javascript.jscomp.DefaultPassConfig$6",
1073:       "com.google.javascript.jscomp.DefaultPassConfig$7",
1074:       "com.google.javascript.jscomp.DefaultPassConfig$8",
1075:       "com.google.javascript.jscomp.DefaultPassConfig$9",
1076:       "com.google.javascript.jscomp.DefaultPassConfig$10",
1077:       "com.google.javascript.jscomp.DefaultPassConfig$11",
1078:       "com.google.javascript.jscomp.DefaultPassConfig$12",
1079:       "com.google.javascript.jscomp.DefaultPassConfig$13",
1080:       "com.google.javascript.jscomp.DefaultPassConfig$14",
1081:       "com.google.javascript.jscomp.DefaultPassConfig$15",
1082:       "com.google.javascript.jscomp.DefaultPassConfig$16",
1083:       "com.google.javascript.jscomp.DefaultPassConfig$17",
1084:       "com.google.javascript.jscomp.DefaultPassConfig$18",
1085:       "com.google.javascript.jscomp.DefaultPassConfig$19",
1086:       "com.google.javascript.jscomp.DefaultPassConfig$20",
1087:       "com.google.javascript.jscomp.DefaultPassConfig$21",
1088:       "com.google.javascript.jscomp.DefaultPassConfig$22",
1089:       "com.google.javascript.jscomp.DefaultPassConfig$23",
1090:       "com.google.javascript.jscomp.DefaultPassConfig$24",
1091:       "com.google.javascript.jscomp.DefaultPassConfig$25",
1092:       "com.google.javascript.jscomp.DefaultPassConfig$26",
1093:       "com.google.javascript.jscomp.DefaultPassConfig$27",
1094:       "com.google.javascript.jscomp.DefaultPassConfig$28",
1095:       "com.google.javascript.jscomp.DefaultPassConfig$29",
1096:       "com.google.javascript.jscomp.DefaultPassConfig$30",
1097:       "com.google.javascript.jscomp.DefaultPassConfig$31",
1098:       "com.google.javascript.jscomp.DefaultPassConfig$32",
1099:       "com.google.javascript.jscomp.DefaultPassConfig$33",
1100:       "com.google.javascript.jscomp.DefaultPassConfig$34",
1101:       "com.google.javascript.jscomp.DefaultPassConfig$35",
1102:       "com.google.javascript.jscomp.DefaultPassConfig$36",
1103:       "com.google.javascript.jscomp.DefaultPassConfig$37",
1104:       "com.google.javascript.jscomp.DefaultPassConfig$38",
1105:       "com.google.javascript.jscomp.DefaultPassConfig$39",
1106:       "com.google.javascript.jscomp.DefaultPassConfig$40",
1107:       "com.google.javascript.jscomp.DefaultPassConfig$41",
1108:       "com.google.javascript.jscomp.DefaultPassConfig$42",
1109:       "com.google.javascript.jscomp.DefaultPassConfig$43",
1110:       "com.google.javascript.jscomp.DefaultPassConfig$44",
1111:       "com.google.javascript.jscomp.DefaultPassConfig$45",
1112:       "com.google.javascript.jscomp.DefaultPassConfig$46",
1113:       "com.google.javascript.jscomp.DefaultPassConfig$47",
1114:       "com.google.javascript.jscomp.DefaultPassConfig$48",
1115:       "com.google.javascript.jscomp.DefaultPassConfig$49",
1116:       "com.google.javascript.jscomp.DefaultPassConfig$50",
1117:       "com.google.javascript.jscomp.DefaultPassConfig$51",
1118:       "com.google.javascript.jscomp.DefaultPassConfig$52",
1119:       "com.google.javascript.jscomp.DefaultPassConfig$53",
1120:       "com.google.javascript.jscomp.DefaultPassConfig$54",
1121:       "com.google.javascript.jscomp.DefaultPassConfig$55",
1122:       "com.google.javascript.jscomp.DefaultPassConfig$56",
1123:       "com.google.javascript.jscomp.DefaultPassConfig$57",
1124:       "com.google.javascript.jscomp.DefaultPassConfig$58",
1125:       "com.google.javascript.jscomp.DefaultPassConfig$59",
1126:       "com.google.javascript.jscomp.DefaultPassConfig$60",
1127:       "com.google.javascript.jscomp.DefaultPassConfig$61",
1128:       "com.google.javascript.jscomp.DefaultPassConfig$62",
1129:       "com.google.javascript.jscomp.DefaultPassConfig$63",
1130:       "com.google.javascript.jscomp.DefaultPassConfig$64",
1131:       "com.google.javascript.jscomp.DefaultPassConfig$65",
1132:       "com.google.javascript.jscomp.DefaultPassConfig$66",
1133:       "com.google.javascript.jscomp.DefaultPassConfig$67",
1134:       "com.google.javascript.jscomp.DefaultPassConfig$68",
1135:       "com.google.javascript.jscomp.DefaultPassConfig$69",
1136:       "com.google.javascript.jscomp.DefaultPassConfig$70",
1137:       "com.google.javascript.jscomp.DefaultPassConfig$71",
1138:       "com.google.javascript.jscomp.DefaultPassConfig$72",
1139:       "com.google.javascript.jscomp.DefaultPassConfig$73",
1140:       "com.google.javascript.jscomp.DefaultPassConfig$74",
1141:       "com.google.javascript.jscomp.DefaultPassConfig$75",
1142:       "com.google.javascript.jscomp.DefaultPassConfig$76",
1143:       "com.google.javascript.jscomp.DefaultPassConfig$77",
1144:       "com.google.javascript.jscomp.DefaultPassConfig$78",
1145:       "com.google.javascript.jscomp.DefaultPassConfig$79",
1146:       "com.google.javascript.jscomp.DefaultPassConfig$80",
1147:       "com.google.javascript.jscomp.DefaultPassConfig$81",
1148:       "com.google.javascript.jscomp.DefaultPassConfig$82",
1149:       "com.google.javascript.jscomp.DefaultPassConfig$83",
1150:       "com.google.javascript.jscomp.DefaultPassConfig$84",
1151:       "com.google.javascript.jscomp.DefaultPassConfig$85",
1152:       "com.google.javascript.jscomp.DefaultPassConfig$86",
1153:       "com.google.javascript.jscomp.DefaultPassConfig$87",
1154:       "com.google.javascript.jscomp.DefaultPassConfig$88",
1155:       "com.google.javascript.jscomp.DefaultPassConfig$89",
1156:       "com.google.javascript.jscomp.DefaultPassConfig$90",
1157:       "com.google.javascript.jscomp.DefaultPassConfig$91",
1158:       "com.google.javascript.jscomp.DefaultPassConfig$92",
1159:       "com.google.javascript.jscomp.DefaultPassConfig$93",
1160:       "com.google.javascript.jscomp.DefaultPassConfig$94",
1161:       "com.google.javascript.jscomp.DefaultPassConfig$98",
1162:       "com.google.javascript.jscomp.DefaultPassConfig$99",
1163:       "com.google.javascript.jscomp.PassConfig$State",
1164:       "com.google.javascript.jscomp.DefaultPassConfig$32$1",
1165:       "com.google.javascript.jscomp.GroupVariableDeclarations",
1166:       "com.google.javascript.jscomp.LinkedFlowScope",
1167:       "com.google.javascript.jscomp.LinkedFlowScope$FlatFlowScopeCache",
1168:       "com.google.common.collect.EmptyImmutableMap",
1169:       "com.google.common.io.CharStreams",
1170:       "com.google.javascript.jscomp.MemoizedScopeCreator",
1171:       "com.google.javascript.jscomp.NodeUtil$MatchDeclaration",
1172:       "com.google.common.collect.Iterators$12",
1173:       "com.google.javascript.rhino.Node$SideEffectFlags",
1174:       "com.google.javascript.jscomp.CleanupPasses",
1175:       "com.google.javascript.jscomp.CleanupPasses$1",
1176:       "com.google.javascript.jscomp.CleanupPasses$2",
1177:       "com.google.javascript.jscomp.CleanupPasses$3",
1178:       "com.google.javascript.jscomp.PassConfig$PassConfigDelegate",
1179:       "com.google.javascript.rhino.Node$NodeMismatch",
1180:       "com.google.javascript.jscomp.JSError",
1181:       "com.google.javascript.jscomp.BasicErrorManager$ErrorWithLevel",
1182:       "com.google.javascript.rhino.head.Parser$ParserException",
1183:       "com.google.javascript.rhino.head.ast.EmptyStatement",
1184:       "com.google.javascript.rhino.head.RhinoException",
1185:       "com.google.javascript.rhino.head.EvaluatorException",
1186:       "com.google.javascript.jscomp.GatherRawExports",
1187:       "com.google.javascript.jscomp.FindExportableNodes",
1188:       "com.google.javascript.jscomp.RemoveUnusedClassProperties",
1189:       "com.google.common.collect.LinkedListMultimap",
1190:       "com.google.common.collect.LinkedHashMultiset",
1191:       "com.google.common.collect.ImmutableMultimap",
1192:       "com.google.common.collect.ImmutableSetMultimap",
1193:       "com.google.common.collect.EmptyImmutableSetMultimap",
1194:       "com.google.common.collect.EmptyImmutableSet",
1195:       "com.google.javascript.jscomp.Denormalize",
1196:       "com.google.javascript.jscomp.FunctionNames",
1197:       "com.google.javascript.jscomp.FunctionNames$FunctionListExtractor",
1198:       "com.google.javascript.jscomp.RecordFunctionInformation",
1199:       "com.google.protobuf.AbstractMessageLite",
1200:       "com.google.protobuf.AbstractMessage",
1201:       "com.google.protobuf.GeneratedMessage",
1202:       "com.google.protobuf.UnknownFieldSet",
1203:       "com.google.javascript.jscomp.FunctionInformationMap",
1204:       "com.google.protobuf.AbstractMessageLite$Builder",
1205:       "com.google.protobuf.AbstractMessage$Builder",
1206:       "com.google.protobuf.GeneratedMessage$Builder",
1207:       "com.google.javascript.jscomp.FunctionInformationMap$Builder",
1208:       "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator",
1209:       "com.google.javascript.jscomp.SourceFile$OnDisk",
1210:       "com.google.common.io.Files",
1211:       "com.google.common.io.Files$1",
1212:       "com.google.common.io.ByteStreams",
1213:       "com.google.javascript.jscomp.CheckMissingReturn$1",
1214:       "com.google.javascript.jscomp.CheckMissingReturn$2",
1215:       "com.google.javascript.jscomp.CheckMissingReturn",
1216:       "com.google.javascript.jscomp.RenameLabels",
1217:       "com.google.javascript.jscomp.RenameLabels$DefaultNameSupplier",
1218:       "com.google.javascript.jscomp.NameGenerator",
1219:       "com.google.javascript.jscomp.RenameLabels$ProcessLabels",
1220:       "com.google.javascript.jscomp.RenameLabels$LabelNamespace",
1221:       "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
1222:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter$1",
1223:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter$2",
1224:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter$3",
1225:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter$4",
1226:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
1227:       "com.google.javascript.jscomp.SourceInformationAnnotator",
1228:       "com.google.javascript.rhino.head.ast.InfixExpression",
1229:       "com.google.javascript.rhino.head.ast.PropertyGet",
1230:       "com.google.javascript.rhino.head.ast.UnaryExpression",
1231:       "com.google.javascript.jscomp.JSSourceFile",
1232:       "com.google.javascript.jscomp.SourceFile$Generated",
1233:       "com.google.javascript.rhino.head.ast.FunctionCall",
1234:       "com.google.javascript.jscomp.Scope$1",
1235:       "com.google.javascript.jscomp.Scope",
1236:       "com.google.javascript.jscomp.ExpandJqueryAliases",
1237:       "com.google.javascript.jscomp.Compiler$6",
1238:       "com.google.javascript.jscomp.GlobalNamespace",
1239:       "com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace",
1240:       "com.google.javascript.jscomp.Normalize$PropagateConstantAnnotationsOverVars",
1241:       "com.google.javascript.jscomp.CheckAccidentalSemicolon",
1242:       "com.google.javascript.jscomp.XtbMessageBundle$SecureEntityResolver",
1243:       "com.google.javascript.jscomp.XtbMessageBundle",
1244:       "com.google.javascript.jscomp.GoogleJsMessageIdGenerator",
1245:       "com.google.javascript.jscomp.XtbMessageBundle$Handler",
1246:       "com.google.javascript.jscomp.graph.Graph",
1247:       "com.google.javascript.jscomp.graph.DiGraph",
1248:       "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
1249:       "com.google.javascript.jscomp.ControlFlowGraph",
1250:       "com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph",
1251:       "com.google.javascript.jscomp.graph.LinkedDirectedGraph$LinkedDirectedGraphNode",
1252:       "com.google.javascript.jscomp.graph.LinkedDirectedGraph$AnnotatedLinkedDirectedGraphNode",
1253:       "com.google.javascript.jscomp.GlobalNamespace$Name$Type",
1254:       "com.google.common.collect.ImmutableListMultimap",
1255:       "com.google.common.collect.ImmutableMultimap$Builder",
1256:       "com.google.common.collect.ImmutableListMultimap$Builder",
1257:       "com.google.common.collect.ImmutableMultimap$BuilderMultimap",
1258:       "com.google.javascript.rhino.JSDocInfo",
1259:       "com.google.javascript.jscomp.Normalize$VerifyConstants",
1260:       "com.google.javascript.rhino.head.ast.ErrorNode",
1261:       "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter",
1262:       "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter$1",
1263:       "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter$2",
1264:       "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter$RestrictByTypeOfResultVisitor",
1265:       "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter$RestrictByTrueTypeOfResultVisitor",
1266:       "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$1",
1267:       "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter$RestrictByFalseTypeOfResultVisitor",
1268:       "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$2",
1269:       "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$3",
1270:       "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$4",
1271:       "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$13",
1272:       "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$12",
1273:       "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$11",
1274:       "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$10",
1275:       "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$9",
1276:       "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$8",
1277:       "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$7",
1278:       "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$6",
1279:       "com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter$5",
1280:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter$5",
1281:       "com.google.javascript.jscomp.ReferenceCollectingCallback$1",
1282:       "com.google.javascript.jscomp.ReferenceCollectingCallback",
1283:       "com.google.javascript.jscomp.MethodCompilerPass",
1284:       "com.google.javascript.jscomp.InlineSimpleMethods$1",
1285:       "com.google.javascript.jscomp.InlineSimpleMethods",
1286:       "com.google.javascript.jscomp.InvocationsCallback",
1287:       "com.google.javascript.jscomp.InlineSimpleMethods$InlineTrivialAccessors",
1288:       "com.google.javascript.jscomp.InferJSDocInfo",
1289:       "com.google.javascript.jscomp.OptimizeArgumentsArray",
1290:       "com.google.javascript.jscomp.Denormalize$StripConstantAnnotations",
1291:       "com.google.javascript.jscomp.ConvertToDottedProperties",
1292:       "com.google.javascript.jscomp.FlowSensitiveInlineVariables$1",
1293:       "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
1294:       "com.google.javascript.jscomp.WhitelistWarningsGuard",
1295:       "com.google.common.io.LineReader",
1296:       "com.google.common.io.LineBuffer",
1297:       "com.google.common.io.LineReader$1",
1298:       "com.google.common.io.Closeables",
1299:       "com.google.javascript.jscomp.DeadAssignmentsElimination$1",
1300:       "com.google.javascript.jscomp.DeadAssignmentsElimination",
1301:       "com.google.javascript.jscomp.CollapseProperties",
1302:       "com.google.javascript.jscomp.MethodCompilerPass$GetExternMethods",
1303:       "com.google.javascript.jscomp.MethodCompilerPass$GatherSignatures",
1304:       "com.google.javascript.rhino.head.ast.NumberLiteral",
1305:       "com.google.javascript.rhino.head.ast.Assignment",
1306:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
1307:       "com.google.javascript.jscomp.CheckSideEffects$StripProtection",
1308:       "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback$CopySideEffectSubexpressions",
1309:       "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback",
1310:       "com.google.javascript.jscomp.CheckMissingGetCssName",
1311:       "com.google.javascript.jscomp.JSModuleGraph",
1312:       "com.google.javascript.jscomp.UnreachableCodeElimination",
1313:       "com.google.javascript.jscomp.ReplaceStrings",
1314:       "com.google.javascript.jscomp.NameReferenceGraph$Reference",
1315:       "com.google.javascript.rhino.head.Token",
1316:       "com.google.javascript.jscomp.NodeTraversal$AbstractShallowCallback",
1317:       "com.google.javascript.jscomp.FieldCleanupPass$QualifiedNameSearchTraversal",
1318:       "com.google.javascript.jscomp.AliasStrings",
1319:       "com.google.javascript.rhino.jstype.ProxyObjectType",
1320:       "com.google.javascript.rhino.jstype.NamedType",
1321:       "com.google.javascript.jscomp.LineNumberCheck",
1322:       "com.google.javascript.rhino.jstype.SimpleSlot",
1323:       "com.google.javascript.jscomp.Result",
1324:       "com.google.javascript.jscomp.LoggerErrorManager$1",
1325:       "com.google.javascript.jscomp.JSError$1",
1326:       "com.google.javascript.jscomp.AbstractMessageFormatter$1",
1327:       "com.google.javascript.jscomp.AbstractMessageFormatter$Color",
1328:       "com.google.javascript.rhino.head.ast.ArrayLiteral",
1329:       "com.google.javascript.jscomp.CombinedCompilerPass",
1330:       "com.google.javascript.jscomp.Compiler$4",
1331:       "com.google.javascript.jscomp.StrictWarningsGuard",
1332:       "com.google.javascript.jscomp.ProcessClosurePrimitives",
1333:       "com.google.javascript.jscomp.GlobalNamespace$Ref",
1334:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
1335:     );
1336:   }
1337: }

[MASTER] 19:11:47.336 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
String string0 = NodeUtil.getStringValue((-4785.552123184762));
assertNotNull(string0);
assertEquals("-4785.552123184762", string0);

Node node0 = Node.newString("-4785.552123184762");
assertNotNull(node0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isThrow());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isFromExterns());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertNull(node0.getSourceFileName());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals(53, Node.INPUT_ID);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(54, Node.LAST_PROP);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

Iterable<Node> iterable0 = new ArrayList<Node>();
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));

boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isThrow());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isFromExterns());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertNull(node0.getSourceFileName());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertTrue(boolean0);
assertEquals(53, Node.INPUT_ID);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(54, Node.LAST_PROP);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

String string1 = NodeUtil.opToStr(107);
assertNull(string1);

Node node1 = new Node(38);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertTrue(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isAnd());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetElem());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isFromExterns());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isOr());
assertNull(node1.getSourceFileName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertEquals(38, node1.getType());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getSourceOffset());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);

boolean boolean1 = NodeUtil.isLoopStructure(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(boolean1 == boolean0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isThrow());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isFromExterns());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.hasChildren());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDebugger());
assertNull(node0.getSourceFileName());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(boolean1);
assertEquals(53, Node.INPUT_ID);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(54, Node.LAST_PROP);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);



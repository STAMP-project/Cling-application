entry: sources/closure-16/build/classes
entry: sources/closure-16/lib/args4j.jar
entry: sources/closure-16/lib/guava.jar
entry: sources/closure-16/lib/json.jar
entry: sources/closure-16/lib/jsr305.jar
entry: sources/closure-16/lib/protobuf-java.jar
entry: sources/closure-16/build/lib/rhino.jar
entry: sources/closure-16/lib/ant.jar
** CP: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar
* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: com.google.javascript.rhino.head.IdScriptableObject
* Starting Client-0
* Connecting to master process on port 20471
* Analyzing classpath: 
  - sources/closure-16/build/classes
  - sources/closure-16/lib/args4j.jar
  - sources/closure-16/lib/guava.jar
  - sources/closure-16/lib/json.jar
  - sources/closure-16/lib/jsr305.jar
  - sources/closure-16/lib/protobuf-java.jar
  - sources/closure-16/build/lib/rhino.jar
  - sources/closure-16/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.head.IdScriptableObject
* Test criterion:
  - Branch Coverage
* Total number of test goals for DYNAMOSA: 251
* Using seed 1564036359256
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 87 / 251
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.24701195219123506
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3545816733067729
[MASTER] 08:33:30.332 [logback-1] WARN  TestUsageChecker - class com.google.javascript.rhino.head.ContextFactory$1GlobalSetterImpl looks like an anonymous class, ignoring it (although reflection says false) GlobalSetterImpl
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.38247011952191234
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.41434262948207173
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.43824701195219123
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5298804780876494
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5418326693227091
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5418326693227091
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5617529880478087
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5737051792828686
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5737051792828686
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5776892430278885
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5816733067729084
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5816733067729084
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5816733067729084
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5816733067729084
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5816733067729084
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5816733067729084
* Search finished after 301s and 71 generations, 24135 statements, best individual has fitness: 105.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5816733067729084
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 58%
* Total number of goals: 251
* Number of covered goals: 145
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5816733067729084
* Generated 30 tests with total length 109
* Resulting test suite's coverage: 58%
* Generating assertions
[MASTER] 08:38:54.008 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6757% of time used, but only 14/30 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 9%
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5816733067729084
* Compiling and checking tests
[MASTER] 08:39:09.663 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 08:39:09.664 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getContext();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
importerTopLevel0.setInstanceIdAttributes(140, 806);

[MASTER] 08:39:12.612 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 08:39:12.612 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = new Context();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
IdFunctionObject idFunctionObject0 = new IdFunctionObject(importerTopLevel0, importerTopLevel0, 140, "language version", 160, importerTopLevel0);
IdScriptableObject.incompatibleCallError(idFunctionObject0);

[MASTER] 08:39:14.839 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 08:39:14.839 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getContext();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
IdFunctionObject idFunctionObject0 = nativeArray0.exportAsJSClass(180, nativeArray0, false);
importerTopLevel0.execIdCall(idFunctionObject0, context0, nativeArray0, idFunctionObject0, context0.emptyArgs);

[MASTER] 08:39:16.734 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 08:39:16.734 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getCurrentContext();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
importerTopLevel0.setInstanceIdValue(12, context0.VERSION_1_5);

[MASTER] 08:39:23.705 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 08:39:23.707 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getContext();
NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
nativeIterator_StopIteration0.initPrototypeValue(175, "FUNCTION", context0.FEATURE_NON_ECMA_GET_YEAR, 65535);

[MASTER] 08:39:25.482 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 08:39:25.483 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getCurrentContext();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
importerTopLevel0.getIds(false);

[MASTER] 08:39:27.565 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 08:39:27.565 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.enter();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
IdFunctionObject idFunctionObject0 = nativeArray0.exportAsJSClass(1, importerTopLevel0, false);
assertFalse(idFunctionObject0.isEmpty());
assertFalse(idFunctionObject0.isSealed());

idFunctionObject0.defaultPut("error reporter", "error reporter");
assertEquals(1, idFunctionObject0.getLength());


[MASTER] 08:39:35.997 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 08:39:35.997 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getCurrentContext();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
nativeArray0.defineOwnProperty(context0, importerTopLevel0, importerTopLevel0);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);


[MASTER] 08:39:38.136 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 08:39:38.145 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getCurrentContext();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
IdFunctionObject idFunctionObject0 = nativeArray0.exportAsJSClass(13, importerTopLevel0, false);
assertFalse(idFunctionObject0.isEmpty());

Object[] objectArray0 = nativeArray0.getAllIds();
assertEquals(14, objectArray0.length);


[MASTER] 08:39:39.302 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 08:39:39.302 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.enter();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
IdFunctionObject idFunctionObject0 = nativeArray0.exportAsJSClass(1, importerTopLevel0, false);
nativeArray0.defineOwnProperty(context0, "language version", idFunctionObject0);
assertFalse(idFunctionObject0.isEmpty());
assertEquals(1, idFunctionObject0.getArity());
assertFalse(idFunctionObject0.isSealed());

Object[] objectArray0 = nativeArray0.getAllIds();
assertEquals(3, objectArray0.length);


[MASTER] 08:39:44.947 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 08:39:44.951 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getCurrentContext();
assertNotNull(context0);
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isSealed());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(180, Context.VERSION_1_8);
assertEquals(140, Context.VERSION_1_4);
assertEquals(100, Context.VERSION_1_0);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertFalse(context0.generateObserverCount);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(150, Context.VERSION_1_5);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(110, Context.VERSION_1_1);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(170, Context.VERSION_1_7);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(160, Context.VERSION_1_6);
assertEquals(120, Context.VERSION_1_2);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);

ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
assertNotNull(importerTopLevel0);
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isSealed());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertFalse(importerTopLevel0.isSealed());
assertEquals("object", importerTopLevel0.getTypeOf());
assertTrue(importerTopLevel0.isExtensible());
assertEquals("global", importerTopLevel0.getClassName());
assertFalse(importerTopLevel0.isEmpty());
assertTrue(importerTopLevel0.hasPrototypeMap());
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(180, Context.VERSION_1_8);
assertEquals(140, Context.VERSION_1_4);
assertEquals(100, Context.VERSION_1_0);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertFalse(context0.generateObserverCount);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(150, Context.VERSION_1_5);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(110, Context.VERSION_1_1);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(170, Context.VERSION_1_7);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(160, Context.VERSION_1_6);
assertEquals(120, Context.VERSION_1_2);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);

NativeBoolean nativeBoolean0 = new NativeBoolean(false);
assertNotNull(nativeBoolean0);
assertFalse(nativeBoolean0.avoidObjectDetection());
assertEquals("Boolean", nativeBoolean0.getClassName());
assertTrue(nativeBoolean0.isEmpty());
assertTrue(nativeBoolean0.isExtensible());
assertEquals("object", nativeBoolean0.getTypeOf());
assertFalse(nativeBoolean0.hasPrototypeMap());
assertFalse(nativeBoolean0.isSealed());
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);

importerTopLevel0.getAttributes("language version", (Scriptable) nativeBoolean0);

[MASTER] 08:39:47.011 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Exception was not thrown in com.google.javascript.rhino.head.DefaultErrorReporter but in com.google.javascript.rhino.head.Context.reportRuntimeError(Context.java:947): org.evosuite.runtime.mock.java.lang.MockThrowable: Property T}/bMT not found.
[MASTER] 08:39:47.011 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
assertNotNull(nativeIterator_StopIteration0);
assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
assertTrue(nativeIterator_StopIteration0.isEmpty());
assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
assertFalse(nativeIterator_StopIteration0.isSealed());
assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
assertTrue(nativeIterator_StopIteration0.isExtensible());
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, ScriptableObject.READONLY);

nativeIterator_StopIteration0.getAttributes("T}/bMT");

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 4
* Writing tests to file
* Writing JUnit test case 'IdScriptableObject_ESTest' to results/evosuite5/closure-16-com.google.javascript.rhino.head.IdScriptableObject-6
* Done!

* Computation finished

entry: sources/math-100/target/classes
** CP: sources/math-100/target/classes
* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.apache.commons.math.optimization.DirectSearchOptimizer
* Starting Client-0
* Connecting to master process on port 17036
* Analyzing classpath: 
  - sources/math-100/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math.optimization.DirectSearchOptimizer
* Test criterion:
  - Branch Coverage
* Total number of test goals for DYNAMOSA: 55
* Using seed 1564008787591
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 31 / 55
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7272727272727273
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9636363636363636
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9636363636363636
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9636363636363636
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9636363636363636
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9636363636363636
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9636363636363636
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9636363636363636
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9636363636363636
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9636363636363636
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9818181818181818
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9818181818181818
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9818181818181818
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9818181818181818
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9818181818181818
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9818181818181818
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9818181818181818
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9818181818181818
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9818181818181818
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9818181818181818
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9818181818181818
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9818181818181818
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9818181818181818
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9818181818181818
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9818181818181818
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9818181818181818
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9818181818181818
* Search finished after 302s and 251 generations, 177019 statements, best individual has fitness: 1.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9818181818181818
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 98%
* Total number of goals: 55
* Number of covered goals: 54
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9818181818181818
* Generated 9 tests with total length 62
* Resulting test suite's coverage: 98%
* Generating assertions
* Resulting test suite's mutation score: 22%
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9818181818181818
* Compiling and checking tests
[MASTER] 00:58:58.466 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<0.6> but was:<0.0>
[MASTER] 00:58:58.467 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NelderMead nelderMead0 = new NelderMead();
CostFunction costFunction0 = mock(CostFunction.class, new ViolatedAssumptionAnswer());
doReturn(1405.5044, 1405.5044, 1405.5044, 1405.5044, 1405.5044).when(costFunction0).cost(any(double[].class));
ConvergenceChecker convergenceChecker0 = mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
doReturn(false, false, true, true, true).when(convergenceChecker0).converged(any(org.apache.commons.math.optimization.PointCostPair[].class));
JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
RandomAdaptor randomAdaptor0 = new RandomAdaptor(jDKRandomGenerator0);
GaussianRandomGenerator gaussianRandomGenerator0 = new GaussianRandomGenerator(randomAdaptor0);
UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(8, gaussianRandomGenerator0);
nelderMead0.minimize(costFunction0, 5, convergenceChecker0, (RandomVectorGenerator) uncorrelatedRandomVectorGenerator0, 5);
assertEquals(0.6, gaussianRandomGenerator0.nextNormalizedDouble(), 0.01);
assertEquals(0.7, randomAdaptor0.nextGaussian(), 0.01);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 6
* Writing tests to file
* Writing JUnit test case 'DirectSearchOptimizer_ESTest' to results/evosuite5/math-100-org.apache.commons.math.optimization.DirectSearchOptimizer-3
* Done!

* Computation finished

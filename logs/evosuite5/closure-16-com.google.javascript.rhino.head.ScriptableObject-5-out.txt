entry: sources/closure-16/build/classes
entry: sources/closure-16/lib/args4j.jar
entry: sources/closure-16/lib/guava.jar
entry: sources/closure-16/lib/json.jar
entry: sources/closure-16/lib/jsr305.jar
entry: sources/closure-16/lib/protobuf-java.jar
entry: sources/closure-16/build/lib/rhino.jar
entry: sources/closure-16/lib/ant.jar
** CP: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar
* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: com.google.javascript.rhino.head.ScriptableObject
* Starting Client-0
* Connecting to master process on port 18149
* Analyzing classpath: 
  - sources/closure-16/build/classes
  - sources/closure-16/lib/args4j.jar
  - sources/closure-16/lib/guava.jar
  - sources/closure-16/lib/json.jar
  - sources/closure-16/lib/jsr305.jar
  - sources/closure-16/lib/protobuf-java.jar
  - sources/closure-16/build/lib/rhino.jar
  - sources/closure-16/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.head.ScriptableObject
* Test criterion:
  - Branch Coverage
* Total number of test goals for DYNAMOSA: 916
* Using seed 1564041204090
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 254 / 916
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.16812227074235808
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.18340611353711792
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2292576419213974
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.30131004366812225
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3569868995633188
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.36790393013100436
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.39847161572052403
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.41593886462882096
[MASTER] 09:55:40.764 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.head.Arguments due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.head.NativeCall due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.42139737991266374
[MASTER] 09:55:49.378 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for class com.google.javascript.rhino.head.Arguments canUseFunctionalMocks=true, canBeMocked: false
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.43122270742358076
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.43122270742358076
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.43777292576419213
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.45305676855895194
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.45524017467248906
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.45524017467248906
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.45633187772925765
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.49344978165938863
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.49563318777292575
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5021834061135371
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5054585152838428
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.509825327510917
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.509825327510917
* Search finished after 304s and 50 generations, 23419 statements, best individual has fitness: 449.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.509825327510917
* Minimizing test suite
[MASTER] 10:00:26.448 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
[MASTER] 10:00:26.448 [logback-1] WARN  TimeController - Phase MINIMIZATION lasted too long, 23 seconds more than allowed.
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 51%
* Total number of goals: 916
* Number of covered goals: 471
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.509825327510917
* Generated 112 tests with total length 1070
* Resulting test suite's coverage: 51%
* Generating assertions
[MASTER] 10:01:39.529 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.9071% of time used, but only 5/112 tests minimized), falling back to using all assertions
[MASTER] 10:01:50.252 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 4%
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.509825327510917
* Compiling and checking tests
[MASTER] 10:01:51.135 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 6 seconds more than allowed.
[MASTER] 10:02:37.776 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 10:02:37.777 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeBoolean nativeBoolean0 = new NativeBoolean(false);
boolean boolean0 = ScriptableObject.isFalse(nativeBoolean0);
assertFalse(boolean0);

ScriptableObject.ensureScriptable(nativeBoolean0);
NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("UCP,Q$DzK,zhCjaV");
NativeContinuation nativeContinuation0 = new NativeContinuation();
Object object0 = nativeContinuation0.get((Object) nativeJavaPackage0);
assertNull(object0);

NativeArray nativeArray0 = new NativeArray((-2924L));
assertFalse(nativeArray0.isSealed());

nativeContinuation0.delete("UCP,Q$DzK,zhCjaV");
assertTrue(nativeContinuation0.isExtensible());


[MASTER] 10:02:39.657 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 10:02:39.657 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Interpreter interpreter0 = new Interpreter();
InterpreterData interpreterData0 = interpreter0.itsData;
InterpretedFunction interpretedFunction0 = InterpretedFunction.createScript((InterpreterData) null, (Object) null);
NativeGenerator nativeGenerator0 = NativeGenerator.init(interpretedFunction0, false);
IdFunctionObject idFunctionObject0 = new IdFunctionObject(interpretedFunction0, interpreter0, 1, "msg.method.not.found", 36729865, nativeGenerator0);
NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
ScriptableObject.buildDataDescriptor(idFunctionObject0, nativeIterator_StopIteration0, 774);
nativeIterator_StopIteration0.initPrototypeConstructor(idFunctionObject0);

[MASTER] 10:02:44.413 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 10:02:44.413 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getContext();
context0.getApplicationClassLoader();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
importerTopLevel0.getAllIds();
NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
NativeArray nativeArray1 = new NativeArray(context0.emptyArgs);
assertFalse(nativeArray1.isSealed());


[MASTER] 10:02:46.698 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 10:02:46.714 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Interpreter interpreter0 = new Interpreter();
assertNotNull(interpreter0);

InterpreterData interpreterData0 = interpreter0.itsData;
assertNull(interpreterData0);

InterpretedFunction interpretedFunction0 = InterpretedFunction.createScript((InterpreterData) null, (Object) null);
assertNotNull(interpretedFunction0);
assertEquals("function", interpretedFunction0.getTypeOf());
assertTrue(interpretedFunction0.isExtensible());
assertEquals("Function", interpretedFunction0.getClassName());
assertTrue(interpretedFunction0.isEmpty());
assertFalse(interpretedFunction0.isSealed());
assertFalse(interpretedFunction0.avoidObjectDetection());
assertFalse(interpretedFunction0.hasPrototypeMap());
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);

NativeGenerator nativeGenerator0 = NativeGenerator.init(interpretedFunction0, false);
assertNotNull(nativeGenerator0);
assertEquals("function", interpretedFunction0.getTypeOf());
assertTrue(interpretedFunction0.isExtensible());
assertEquals("Function", interpretedFunction0.getClassName());
assertTrue(interpretedFunction0.isEmpty());
assertFalse(interpretedFunction0.isSealed());
assertFalse(interpretedFunction0.avoidObjectDetection());
assertFalse(interpretedFunction0.hasPrototypeMap());
assertFalse(nativeGenerator0.isSealed());
assertEquals("object", nativeGenerator0.getTypeOf());
assertTrue(nativeGenerator0.isEmpty());
assertFalse(nativeGenerator0.avoidObjectDetection());
assertTrue(nativeGenerator0.hasPrototypeMap());
assertTrue(nativeGenerator0.isExtensible());
assertEquals("Generator", nativeGenerator0.getClassName());
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, NativeGenerator.GENERATOR_SEND);
assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, NativeGenerator.GENERATOR_THROW);

NativeBoolean nativeBoolean0 = new NativeBoolean(false);
assertNotNull(nativeBoolean0);
assertFalse(nativeBoolean0.isSealed());
assertFalse(nativeBoolean0.avoidObjectDetection());
assertEquals("Boolean", nativeBoolean0.getClassName());
assertTrue(nativeBoolean0.isExtensible());
assertTrue(nativeBoolean0.isEmpty());
assertFalse(nativeBoolean0.hasPrototypeMap());
assertEquals("object", nativeBoolean0.getTypeOf());
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);

nativeBoolean0.defineConst("newChild had siblings in addChildBefore", interpretedFunction0);
assertEquals("function", interpretedFunction0.getTypeOf());
assertTrue(interpretedFunction0.isExtensible());
assertFalse(interpretedFunction0.isEmpty());
assertEquals("Function", interpretedFunction0.getClassName());
assertFalse(interpretedFunction0.isSealed());
assertFalse(interpretedFunction0.avoidObjectDetection());
assertFalse(interpretedFunction0.hasPrototypeMap());
assertFalse(nativeBoolean0.isSealed());
assertFalse(nativeBoolean0.avoidObjectDetection());
assertEquals("Boolean", nativeBoolean0.getClassName());
assertTrue(nativeBoolean0.isExtensible());
assertTrue(nativeBoolean0.isEmpty());
assertFalse(nativeBoolean0.hasPrototypeMap());
assertEquals("object", nativeBoolean0.getTypeOf());
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);

ContextFactory contextFactory0 = new ContextFactory();
assertNotNull(contextFactory0);
assertFalse(contextFactory0.hasExplicitGlobal());
assertFalse(contextFactory0.isSealed());

ContextFactory contextFactory1 = ContextFactory.getGlobal();
assertNotNull(contextFactory1);
assertFalse(contextFactory1.equals((Object)contextFactory0));
assertFalse(contextFactory1.hasExplicitGlobal());
assertFalse(contextFactory1.isSealed());
assertNotSame(contextFactory1, contextFactory0);

ContextFactory contextFactory2 = ContextFactory.getGlobal();
assertNotNull(contextFactory2);
assertFalse(contextFactory2.equals((Object)contextFactory0));
assertFalse(contextFactory2.isSealed());
assertFalse(contextFactory2.hasExplicitGlobal());
assertSame(contextFactory2, contextFactory1);
assertNotSame(contextFactory2, contextFactory0);

Context context0 = new Context(contextFactory2);
assertNotNull(context0);
assertFalse(contextFactory2.equals((Object)contextFactory0));
assertFalse(contextFactory2.isSealed());
assertFalse(contextFactory2.hasExplicitGlobal());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(0, context0.getInstructionObserverThreshold());
assertTrue(context0.isGeneratingSource());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertFalse(context0.isSealed());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(140, Context.VERSION_1_4);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(180, Context.VERSION_1_8);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(170, Context.VERSION_1_7);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(120, Context.VERSION_1_2);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(150, Context.VERSION_1_5);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(160, Context.VERSION_1_6);
assertEquals(110, Context.VERSION_1_1);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertFalse(context0.generateObserverCount);
assertEquals(100, Context.VERSION_1_0);

Context context1 = contextFactory2.enterContext(context0);
assertNotNull(context1);
assertFalse(contextFactory2.equals((Object)contextFactory0));
assertFalse(context1.equals((Object)context0));
assertFalse(contextFactory2.isSealed());
assertFalse(contextFactory2.hasExplicitGlobal());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(0, context0.getInstructionObserverThreshold());
assertTrue(context0.isGeneratingSource());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertFalse(context0.isSealed());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertFalse(context1.isGeneratingDebugChanged());
assertTrue(context1.isGeneratingSource());
assertEquals(0, context1.getOptimizationLevel());
assertFalse(context1.isGeneratingDebug());
assertFalse(context1.isSealed());
assertEquals(0, context1.getLanguageVersion());
assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
assertEquals(0, context1.getInstructionObserverThreshold());
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(140, Context.VERSION_1_4);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(180, Context.VERSION_1_8);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(170, Context.VERSION_1_7);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(120, Context.VERSION_1_2);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(150, Context.VERSION_1_5);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(160, Context.VERSION_1_6);
assertEquals(110, Context.VERSION_1_1);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertFalse(context0.generateObserverCount);
assertEquals(100, Context.VERSION_1_0);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(140, Context.VERSION_1_4);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(180, Context.VERSION_1_8);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(170, Context.VERSION_1_7);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(120, Context.VERSION_1_2);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(160, Context.VERSION_1_6);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(110, Context.VERSION_1_1);
assertEquals(150, Context.VERSION_1_5);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(100, Context.VERSION_1_0);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertFalse(context1.generateObserverCount);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertSame(contextFactory2, contextFactory1);
assertNotSame(contextFactory2, contextFactory0);
assertNotSame(context0, context1);
assertNotSame(context1, context0);

NativeObject nativeObject0 = (NativeObject)interpretedFunction0.getOwnPropertyDescriptor(context0, "newChild had siblings in addChildBefore");
assertNotNull(nativeObject0);
assertFalse(contextFactory2.equals((Object)contextFactory0));
assertFalse(context0.equals((Object)context1));
assertEquals("function", interpretedFunction0.getTypeOf());
assertTrue(interpretedFunction0.isExtensible());
assertFalse(interpretedFunction0.isEmpty());
assertEquals("Function", interpretedFunction0.getClassName());
assertFalse(interpretedFunction0.isSealed());
assertFalse(interpretedFunction0.avoidObjectDetection());
assertFalse(interpretedFunction0.hasPrototypeMap());
assertFalse(contextFactory2.isSealed());
assertFalse(contextFactory2.hasExplicitGlobal());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(0, context0.getInstructionObserverThreshold());
assertTrue(context0.isGeneratingSource());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertFalse(context0.isSealed());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertFalse(nativeObject0.isSealed());
assertFalse(nativeObject0.isEmpty());
assertFalse(nativeObject0.avoidObjectDetection());
assertEquals("Object", nativeObject0.getClassName());
assertTrue(nativeObject0.isExtensible());
assertEquals("object", nativeObject0.getTypeOf());
assertFalse(nativeObject0.hasPrototypeMap());
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(140, Context.VERSION_1_4);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(180, Context.VERSION_1_8);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(170, Context.VERSION_1_7);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(120, Context.VERSION_1_2);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(150, Context.VERSION_1_5);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(160, Context.VERSION_1_6);
assertEquals(110, Context.VERSION_1_1);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertFalse(context0.generateObserverCount);
assertEquals(100, Context.VERSION_1_0);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertSame(contextFactory2, contextFactory1);
assertNotSame(contextFactory2, contextFactory0);
assertNotSame(context0, context1);


[MASTER] 10:02:48.669 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 10:02:48.675 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Interpreter interpreter0 = new Interpreter();
assertNotNull(interpreter0);

InterpreterData interpreterData0 = interpreter0.itsData;
assertNull(interpreterData0);

InterpretedFunction interpretedFunction0 = InterpretedFunction.createScript((InterpreterData) null, (Object) null);
assertNotNull(interpretedFunction0);
assertEquals("function", interpretedFunction0.getTypeOf());
assertEquals("Function", interpretedFunction0.getClassName());
assertFalse(interpretedFunction0.avoidObjectDetection());
assertTrue(interpretedFunction0.isExtensible());
assertFalse(interpretedFunction0.isSealed());
assertFalse(interpretedFunction0.hasPrototypeMap());
assertTrue(interpretedFunction0.isEmpty());
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);

NativeGenerator nativeGenerator0 = NativeGenerator.init(interpretedFunction0, false);
assertNotNull(nativeGenerator0);
assertEquals("function", interpretedFunction0.getTypeOf());
assertEquals("Function", interpretedFunction0.getClassName());
assertFalse(interpretedFunction0.avoidObjectDetection());
assertTrue(interpretedFunction0.isExtensible());
assertFalse(interpretedFunction0.isSealed());
assertFalse(interpretedFunction0.hasPrototypeMap());
assertTrue(interpretedFunction0.isEmpty());
assertTrue(nativeGenerator0.isEmpty());
assertFalse(nativeGenerator0.isSealed());
assertFalse(nativeGenerator0.avoidObjectDetection());
assertEquals("object", nativeGenerator0.getTypeOf());
assertEquals("Generator", nativeGenerator0.getClassName());
assertTrue(nativeGenerator0.isExtensible());
assertTrue(nativeGenerator0.hasPrototypeMap());
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
assertEquals(0, NativeGenerator.GENERATOR_SEND);
assertEquals(1, NativeGenerator.GENERATOR_THROW);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);

String[] stringArray0 = new String[3];
stringArray0[0] = "jsGet_length";
NativeBoolean nativeBoolean0 = new NativeBoolean(false);
assertNotNull(nativeBoolean0);
assertFalse(nativeBoolean0.avoidObjectDetection());
assertTrue(nativeBoolean0.isExtensible());
assertFalse(nativeBoolean0.hasPrototypeMap());
assertFalse(nativeBoolean0.isSealed());
assertEquals("object", nativeBoolean0.getTypeOf());
assertTrue(nativeBoolean0.isEmpty());
assertEquals("Boolean", nativeBoolean0.getClassName());
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);

nativeBoolean0.defineConst("newChild had siblings in addChildBefore", interpretedFunction0);
assertEquals("function", interpretedFunction0.getTypeOf());
assertEquals("Function", interpretedFunction0.getClassName());
assertFalse(interpretedFunction0.isEmpty());
assertFalse(interpretedFunction0.avoidObjectDetection());
assertTrue(interpretedFunction0.isExtensible());
assertFalse(interpretedFunction0.isSealed());
assertFalse(interpretedFunction0.hasPrototypeMap());
assertFalse(nativeBoolean0.avoidObjectDetection());
assertTrue(nativeBoolean0.isExtensible());
assertFalse(nativeBoolean0.hasPrototypeMap());
assertFalse(nativeBoolean0.isSealed());
assertEquals("object", nativeBoolean0.getTypeOf());
assertTrue(nativeBoolean0.isEmpty());
assertEquals("Boolean", nativeBoolean0.getClassName());
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);

ContextFactory contextFactory0 = new ContextFactory();
assertNotNull(contextFactory0);
assertFalse(contextFactory0.isSealed());
assertFalse(contextFactory0.hasExplicitGlobal());

ContextFactory contextFactory1 = ContextFactory.getGlobal();
assertNotNull(contextFactory1);
assertFalse(contextFactory1.equals((Object)contextFactory0));
assertFalse(contextFactory1.isSealed());
assertFalse(contextFactory1.hasExplicitGlobal());
assertNotSame(contextFactory1, contextFactory0);

ContextFactory contextFactory2 = new ContextFactory();
assertNotNull(contextFactory2);
assertFalse(contextFactory2.equals((Object)contextFactory1));
assertFalse(contextFactory2.equals((Object)contextFactory0));
assertFalse(contextFactory2.isSealed());
assertFalse(contextFactory2.hasExplicitGlobal());

Context context0 = new Context(contextFactory2);
assertNotNull(context0);
assertFalse(contextFactory2.equals((Object)contextFactory1));
assertFalse(contextFactory2.equals((Object)contextFactory0));
assertFalse(contextFactory2.isSealed());
assertFalse(contextFactory2.hasExplicitGlobal());
assertFalse(context0.isSealed());
assertEquals(0, context0.getInstructionObserverThreshold());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(0, context0.getOptimizationLevel());
assertTrue(context0.isGeneratingSource());
assertEquals(6, Context.FEATURE_E4X);
assertEquals(110, Context.VERSION_1_1);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(120, Context.VERSION_1_2);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(170, Context.VERSION_1_7);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(180, Context.VERSION_1_8);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(140, Context.VERSION_1_4);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertFalse(context0.generateObserverCount);
assertEquals(100, Context.VERSION_1_0);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(150, Context.VERSION_1_5);
assertEquals(8, Context.FEATURE_STRICT_VARS);

Context context1 = contextFactory1.enterContext(context0);
assertNotNull(context1);
assertFalse(contextFactory1.equals((Object)contextFactory2));
assertFalse(contextFactory1.equals((Object)contextFactory0));
assertFalse(contextFactory2.equals((Object)contextFactory1));
assertFalse(contextFactory2.equals((Object)contextFactory0));
assertFalse(context1.equals((Object)context0));
assertFalse(contextFactory1.isSealed());
assertFalse(contextFactory1.hasExplicitGlobal());
assertFalse(contextFactory2.isSealed());
assertFalse(contextFactory2.hasExplicitGlobal());
assertFalse(context0.isSealed());
assertEquals(0, context0.getInstructionObserverThreshold());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(0, context0.getOptimizationLevel());
assertTrue(context0.isGeneratingSource());
assertFalse(context1.isGeneratingDebugChanged());
assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
assertFalse(context1.isGeneratingDebug());
assertEquals(0, context1.getInstructionObserverThreshold());
assertEquals(0, context1.getLanguageVersion());
assertFalse(context1.isSealed());
assertEquals(0, context1.getOptimizationLevel());
assertTrue(context1.isGeneratingSource());
assertEquals(6, Context.FEATURE_E4X);
assertEquals(110, Context.VERSION_1_1);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(120, Context.VERSION_1_2);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(170, Context.VERSION_1_7);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(180, Context.VERSION_1_8);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(140, Context.VERSION_1_4);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertFalse(context0.generateObserverCount);
assertEquals(100, Context.VERSION_1_0);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(150, Context.VERSION_1_5);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(100, Context.VERSION_1_0);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(140, Context.VERSION_1_4);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertFalse(context1.generateObserverCount);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(120, Context.VERSION_1_2);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(170, Context.VERSION_1_7);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(130, Context.VERSION_1_3);
assertEquals(180, Context.VERSION_1_8);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(150, Context.VERSION_1_5);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(110, Context.VERSION_1_1);
assertEquals(160, Context.VERSION_1_6);
assertNotSame(contextFactory1, contextFactory2);
assertNotSame(contextFactory1, contextFactory0);
assertNotSame(contextFactory2, contextFactory1);
assertNotSame(contextFactory2, contextFactory0);
assertNotSame(context0, context1);
assertNotSame(context1, context0);

NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
assertNotNull(nativeJavaClass0);
assertEquals("JavaClass", nativeJavaClass0.getClassName());

NativeGenerator nativeGenerator1 = new NativeGenerator(nativeJavaClass0, interpretedFunction0, nativeGenerator0);
assertNotNull(nativeGenerator1);
assertFalse(nativeGenerator1.equals((Object)nativeGenerator0));
assertEquals("function", interpretedFunction0.getTypeOf());
assertEquals("Function", interpretedFunction0.getClassName());
assertFalse(interpretedFunction0.isEmpty());
assertFalse(interpretedFunction0.avoidObjectDetection());
assertTrue(interpretedFunction0.isExtensible());
assertFalse(interpretedFunction0.isSealed());
assertFalse(interpretedFunction0.hasPrototypeMap());
assertTrue(nativeGenerator0.isEmpty());
assertFalse(nativeGenerator0.isSealed());
assertFalse(nativeGenerator0.avoidObjectDetection());
assertEquals("object", nativeGenerator0.getTypeOf());
assertEquals("Generator", nativeGenerator0.getClassName());
assertTrue(nativeGenerator0.isExtensible());
assertTrue(nativeGenerator0.hasPrototypeMap());
assertEquals("JavaClass", nativeJavaClass0.getClassName());
assertTrue(nativeGenerator1.isExtensible());
assertTrue(nativeGenerator1.isEmpty());
assertFalse(nativeGenerator1.isSealed());
assertEquals("Generator", nativeGenerator1.getClassName());
assertFalse(nativeGenerator1.hasPrototypeMap());
assertEquals("object", nativeGenerator1.getTypeOf());
assertFalse(nativeGenerator1.avoidObjectDetection());
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
assertEquals(0, NativeGenerator.GENERATOR_SEND);
assertEquals(1, NativeGenerator.GENERATOR_THROW);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, NativeGenerator.GENERATOR_THROW);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, NativeGenerator.GENERATOR_SEND);
assertEquals(2, NativeGenerator.GENERATOR_CLOSE);

interpretedFunction0.getOwnPropertyDescriptor(context1, nativeGenerator1);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing tests to file
* Writing JUnit test case 'ScriptableObject_ESTest' to results/evosuite5/closure-16-com.google.javascript.rhino.head.ScriptableObject-5
* Done!

* Computation finished

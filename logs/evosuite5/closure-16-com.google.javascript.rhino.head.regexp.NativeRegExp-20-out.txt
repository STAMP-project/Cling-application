entry: sources/closure-16/build/classes
entry: sources/closure-16/lib/args4j.jar
entry: sources/closure-16/lib/guava.jar
entry: sources/closure-16/lib/json.jar
entry: sources/closure-16/lib/jsr305.jar
entry: sources/closure-16/lib/protobuf-java.jar
entry: sources/closure-16/build/lib/rhino.jar
entry: sources/closure-16/lib/ant.jar
** CP: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar
* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: com.google.javascript.rhino.head.regexp.NativeRegExp
* Starting Client-0
* Connecting to master process on port 9322
* Analyzing classpath: 
  - sources/closure-16/build/classes
  - sources/closure-16/lib/args4j.jar
  - sources/closure-16/lib/guava.jar
  - sources/closure-16/lib/json.jar
  - sources/closure-16/lib/jsr305.jar
  - sources/closure-16/lib/protobuf-java.jar
  - sources/closure-16/build/lib/rhino.jar
  - sources/closure-16/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.head.regexp.NativeRegExp
* Test criterion:
  - Branch Coverage
* Total number of test goals for DYNAMOSA: 1450
* Using seed 1566407505870
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 382 / 1450
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.08137931034482758
[MASTER] 19:12:48.140 [logback-1] WARN  TestUsageChecker - class com.google.javascript.rhino.head.ContextFactory$1GlobalSetterImpl looks like an anonymous class, ignoring it (although reflection says false) GlobalSetterImpl
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.12827586206896552
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.20344827586206896
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2620689655172414
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.27379310344827584
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.27793103448275863
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.28206896551724137
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.28344827586206894
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.29310344827586204
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.29310344827586204
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.30896551724137933
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3096551724137931
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3117241379310345
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3193103448275862
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3193103448275862
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.32
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.32
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.32
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3310344827586207
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3310344827586207
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3317241379310345
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3331034482758621
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3331034482758621
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3331034482758621
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3331034482758621
* Search finished after 317s and 207 generations, 66812 statements, best individual has fitness: 967.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3331034482758621
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 27%
* Total number of goals: 1450
* Number of covered goals: 397
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3331034482758621
* Generated 67 tests with total length 199
* Resulting test suite's coverage: 33%
* Generating assertions
[MASTER] 19:18:38.236 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7174333333333334% of time used, but only 17/67 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 3%
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3331034482758621
* Compiling and checking tests
[MASTER] 19:19:01.297 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 19:19:01.298 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = new Context();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.Object;
Scriptable scriptable0 = importerTopLevel0.getBuiltinPrototype(topLevel_Builtins0);
RECompiled rECompiled0 = new RECompiled();
NativeRegExp nativeRegExp0 = new NativeRegExp(scriptable0, rECompiled0);
NativeArray nativeArray0 = new NativeArray((-1500L));
nativeRegExp0.setInstanceIdValue(5, nativeArray0);

[MASTER] 19:19:12.311 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Exception was not thrown in com.google.javascript.rhino.head.regexp.NativeRegExp but in com.google.javascript.rhino.head.ScriptRuntime.getRegExpProxy(ScriptRuntime.java:3848): java.lang.NullPointerException
[MASTER] 19:19:12.311 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeRegExp nativeRegExp0 = new NativeRegExp();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
Context context0 = Context.getCurrentContext();
nativeRegExp0.construct(context0, importerTopLevel0, context0.emptyArgs);

[MASTER] 19:19:13.396 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 19:19:13.397 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = new Context();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'NativeRegExp_ESTest' to results/evosuite5/closure-16-com.google.javascript.rhino.head.regexp.NativeRegExp-20
* Done!

* Computation finished

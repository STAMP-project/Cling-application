entry: sources/closure-16/build/classes
entry: sources/closure-16/lib/args4j.jar
entry: sources/closure-16/lib/guava.jar
entry: sources/closure-16/lib/json.jar
entry: sources/closure-16/lib/jsr305.jar
entry: sources/closure-16/lib/protobuf-java.jar
entry: sources/closure-16/build/lib/rhino.jar
entry: sources/closure-16/lib/ant.jar
** CP: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar
* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: com.google.javascript.rhino.jstype.FunctionType
* Starting Client-0
* Connecting to master process on port 8776
* Analyzing classpath: 
  - sources/closure-16/build/classes
  - sources/closure-16/lib/args4j.jar
  - sources/closure-16/lib/guava.jar
  - sources/closure-16/lib/json.jar
  - sources/closure-16/lib/jsr305.jar
  - sources/closure-16/lib/protobuf-java.jar
  - sources/closure-16/build/lib/rhino.jar
  - sources/closure-16/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.jstype.FunctionType
* Test criterion:
  - Branch Coverage
* Total number of test goals for DYNAMOSA: 372
* Using seed 1566105466908
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 156 / 372
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.27419354838709675
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5403225806451613
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5913978494623656
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6263440860215054
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6532258064516129
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6801075268817204
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7419354838709677
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7526881720430108
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7688172043010753
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7741935483870968
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7768817204301075
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7768817204301075
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7795698924731183
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7795698924731183
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7795698924731183
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7795698924731183
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7795698924731183
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7795698924731183
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.782258064516129
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.782258064516129
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7956989247311828
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7956989247311828
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8333333333333334
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8333333333333334
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8467741935483871
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8467741935483871
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8467741935483871
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8467741935483871
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8467741935483871
* Search finished after 301s and 302 generations, 158569 statements, best individual has fitness: 57.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8467741935483871
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 85%
* Total number of goals: 372
* Number of covered goals: 316
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8467741935483871
* Generated 90 tests with total length 475
* Resulting test suite's coverage: 85%
* Generating assertions
[MASTER] 07:23:57.760 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7416833333333334% of time used, but only 6/90 tests minimized), falling back to using all assertions
[MASTER] 07:24:13.292 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 6%
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8467741935483871
* Compiling and checking tests
[MASTER] 07:24:58.528 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<function ((1|null[)=]): ?> but was:<function ((1|null[|undefined)): function (...[?]]): ?>
[MASTER] 07:24:58.531 [logback-1] WARN  JUnitAnalyzer - Failing test:
 SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("1", (Node) null);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(functionType0.isConstructor());
assertFalse(functionType0.isNoType());
assertFalse(functionType0.isNumberValueType());
assertFalse(functionType0.isUnionType());
assertFalse(functionType0.isStringValueType());
assertFalse(functionType0.isNoObjectType());
assertFalse(functionType0.hasCachedValues());
assertFalse(functionType0.isCheckedUnknownType());
assertTrue(functionType0.hasInstanceType());
assertFalse(functionType0.isParameterizedType());
assertFalse(functionType0.isVoidType());
assertFalse(functionType0.isEnumType());
assertFalse(functionType0.isResolved());
assertFalse(functionType0.isFunctionPrototypeType());
assertFalse(functionType0.isRecordType());
assertFalse(functionType0.isNoResolvedType());
assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
assertFalse(functionType0.isBooleanValueType());
assertFalse(functionType0.isAllType());
assertFalse(functionType0.isNullType());
assertTrue(functionType0.isInterface());
assertFalse(functionType0.isOrdinaryFunction());
assertFalse(functionType0.isTemplateType());
assertTrue(functionType0.isFunctionType());
assertEquals(0, functionType0.getExtendedInterfacesCount());
assertFalse(functionType0.isReturnTypeInferred());
assertTrue(functionType0.canBeCalled());
assertFalse(functionType0.isNominalConstructor());
assertFalse(functionType0.isNominalType());
assertFalse(functionType0.isEnumElementType());
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertNotNull(functionType0);

FunctionType functionType1 = (FunctionType)functionType0.getPropertyType("bind");
assertFalse(functionType1.equals((Object)functionType0));
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(functionType0.isConstructor());
assertFalse(functionType0.isNoType());
assertFalse(functionType0.isNumberValueType());
assertFalse(functionType0.isUnionType());
assertFalse(functionType0.isStringValueType());
assertFalse(functionType0.isNoObjectType());
assertFalse(functionType0.isCheckedUnknownType());
assertTrue(functionType0.hasInstanceType());
assertTrue(functionType0.hasCachedValues());
assertFalse(functionType0.isParameterizedType());
assertFalse(functionType0.isVoidType());
assertFalse(functionType0.isEnumType());
assertFalse(functionType0.isResolved());
assertFalse(functionType0.isFunctionPrototypeType());
assertFalse(functionType0.isRecordType());
assertFalse(functionType0.isNoResolvedType());
assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
assertFalse(functionType0.isBooleanValueType());
assertFalse(functionType0.isAllType());
assertFalse(functionType0.isNullType());
assertTrue(functionType0.isInterface());
assertFalse(functionType0.isOrdinaryFunction());
assertFalse(functionType0.isTemplateType());
assertTrue(functionType0.isFunctionType());
assertEquals(0, functionType0.getExtendedInterfacesCount());
assertFalse(functionType0.isReturnTypeInferred());
assertTrue(functionType0.canBeCalled());
assertFalse(functionType0.isNominalConstructor());
assertFalse(functionType0.isNominalType());
assertFalse(functionType0.isEnumElementType());
assertFalse(functionType1.isConstructor());
assertFalse(functionType1.isNoType());
assertFalse(functionType1.isNumberValueType());
assertFalse(functionType1.isUnionType());
assertFalse(functionType1.isStringValueType());
assertFalse(functionType1.isNoObjectType());
assertFalse(functionType1.hasCachedValues());
assertFalse(functionType1.hasInstanceType());
assertFalse(functionType1.isParameterizedType());
assertFalse(functionType1.isCheckedUnknownType());
assertTrue(functionType1.canBeCalled());
assertFalse(functionType1.isNominalConstructor());
assertFalse(functionType1.isNominalType());
assertFalse(functionType1.isInterface());
assertFalse(functionType1.isEnumElementType());
assertFalse(functionType1.isAllType());
assertFalse(functionType1.isNullType());
assertFalse(functionType1.isTemplateType());
assertTrue(functionType1.isFunctionType());
assertFalse(functionType1.isBooleanValueType());
assertEquals(0, functionType1.getExtendedInterfacesCount());
assertTrue(functionType1.isOrdinaryFunction());
assertFalse(functionType1.isReturnTypeInferred());
assertFalse(functionType1.isVoidType());
assertFalse(functionType1.isResolved());
assertFalse(functionType1.isEnumType());
assertFalse(functionType1.isFunctionPrototypeType());
assertFalse(functionType1.isRecordType());
assertFalse(functionType1.isNoResolvedType());
assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertNotSame(functionType0, functionType1);
assertNotSame(functionType1, functionType0);
assertNotNull(functionType1);

String string0 = functionType1.toStringHelper(true);
assertFalse(functionType0.equals((Object)functionType1));
assertFalse(functionType1.equals((Object)functionType0));
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(functionType0.isConstructor());
assertFalse(functionType0.isNoType());
assertFalse(functionType0.isNumberValueType());
assertFalse(functionType0.isUnionType());
assertFalse(functionType0.isStringValueType());
assertFalse(functionType0.isNoObjectType());
assertFalse(functionType0.isCheckedUnknownType());
assertTrue(functionType0.hasInstanceType());
assertTrue(functionType0.hasCachedValues());
assertFalse(functionType0.isParameterizedType());
assertFalse(functionType0.isVoidType());
assertFalse(functionType0.isEnumType());
assertFalse(functionType0.isResolved());
assertFalse(functionType0.isFunctionPrototypeType());
assertFalse(functionType0.isRecordType());
assertFalse(functionType0.isNoResolvedType());
assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
assertFalse(functionType0.isBooleanValueType());
assertFalse(functionType0.isAllType());
assertFalse(functionType0.isNullType());
assertTrue(functionType0.isInterface());
assertFalse(functionType0.isOrdinaryFunction());
assertFalse(functionType0.isTemplateType());
assertTrue(functionType0.isFunctionType());
assertEquals(0, functionType0.getExtendedInterfacesCount());
assertFalse(functionType0.isReturnTypeInferred());
assertTrue(functionType0.canBeCalled());
assertFalse(functionType0.isNominalConstructor());
assertFalse(functionType0.isNominalType());
assertFalse(functionType0.isEnumElementType());
assertFalse(functionType1.isConstructor());
assertFalse(functionType1.isNoType());
assertFalse(functionType1.isNumberValueType());
assertFalse(functionType1.isUnionType());
assertFalse(functionType1.isStringValueType());
assertFalse(functionType1.isNoObjectType());
assertFalse(functionType1.hasCachedValues());
assertFalse(functionType1.hasInstanceType());
assertFalse(functionType1.isParameterizedType());
assertFalse(functionType1.isCheckedUnknownType());
assertTrue(functionType1.canBeCalled());
assertFalse(functionType1.isNominalConstructor());
assertFalse(functionType1.isNominalType());
assertFalse(functionType1.isInterface());
assertFalse(functionType1.isEnumElementType());
assertFalse(functionType1.isAllType());
assertFalse(functionType1.isNullType());
assertFalse(functionType1.isTemplateType());
assertTrue(functionType1.isFunctionType());
assertFalse(functionType1.isBooleanValueType());
assertEquals(0, functionType1.getExtendedInterfacesCount());
assertTrue(functionType1.isOrdinaryFunction());
assertFalse(functionType1.isReturnTypeInferred());
assertFalse(functionType1.isVoidType());
assertFalse(functionType1.isResolved());
assertFalse(functionType1.isEnumType());
assertFalse(functionType1.isFunctionPrototypeType());
assertFalse(functionType1.isRecordType());
assertFalse(functionType1.isNoResolvedType());
assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertNotSame(functionType0, functionType1);
assertNotSame(functionType1, functionType0);
assertEquals("function ((1|null)=): ?", string0);
assertNotNull(string0);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 6
* Writing tests to file
* Writing JUnit test case 'FunctionType_ESTest' to results/evosuite5/closure-16-com.google.javascript.rhino.jstype.FunctionType-26
* Done!

* Computation finished

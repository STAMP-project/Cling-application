entry: sources/time-14/build/classes
entry: defects4j/framework/projects/Time/lib/joda-convert-1.2.jar
** CP: sources/time-14/build/classes:defects4j/framework/projects/Time/lib/joda-convert-1.2.jar
* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.joda.time.format.DateTimeFormat
* Starting Client-0
* Connecting to master process on port 19968
* Analyzing classpath: 
  - sources/time-14/build/classes
  - defects4j/framework/projects/Time/lib/joda-convert-1.2.jar
* Finished analyzing classpath
* Generating tests for class org.joda.time.format.DateTimeFormat
* Test criterion:
  - Branch Coverage
* Total number of test goals for DYNAMOSA: 434
* Using seed 1565728993467
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 64 / 434
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5737327188940092
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6566820276497696
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7373271889400922
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7695852534562212
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7880184331797235
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8064516129032258
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8225806451612904
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.836405529953917
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8456221198156681
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8571428571428571
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8617511520737328
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8732718894009217
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8732718894009217
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8755760368663594
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8755760368663594
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8778801843317973
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8824884792626728
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8824884792626728
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8847926267281107
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8847926267281107
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8847926267281107
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8847926267281107
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8847926267281107
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8847926267281107
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8847926267281107
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8847926267281107
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8870967741935484
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8870967741935484
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8870967741935484
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8870967741935484
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8870967741935484
* Search finished after 302s and 1067 generations, 210492 statements, best individual has fitness: 49.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8870967741935484
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 84%
* Total number of goals: 434
* Number of covered goals: 363
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8870967741935484
* Generated 79 tests with total length 99
* Resulting test suite's coverage: 89%
* Generating assertions
[MASTER] 22:49:26.262 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.8125% of time used, but only 7/79 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 3%
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8870967741935484
* Compiling and checking tests
[MASTER] 22:50:12.470 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[�:��:�� � ]> but was:<[2/14/��]>
[MASTER] 22:50:12.471 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DateTimeFormatter dateTimeFormatter0 = DateTimeFormat.shortDate();
assertNotNull(dateTimeFormatter0);
assertNull(dateTimeFormatter0.getPivotYear());
assertEquals(2000, dateTimeFormatter0.getDefaultYear());
assertTrue(dateTimeFormatter0.isParser());
assertTrue(dateTimeFormatter0.isPrinter());
assertFalse(dateTimeFormatter0.isOffsetParsed());

CharArrayWriter charArrayWriter0 = new CharArrayWriter();
assertNotNull(charArrayWriter0);
assertEquals("", charArrayWriter0.toString());
assertEquals(0, charArrayWriter0.size());

DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
assertNotNull(dateTimeZone0);
assertEquals("Europe/Amsterdam", dateTimeZone0.getID());
assertEquals("Europe/Amsterdam", dateTimeZone0.toString());

MonthDay monthDay0 = new MonthDay(dateTimeZone0);
assertNotNull(monthDay0);
assertEquals("Europe/Amsterdam", dateTimeZone0.getID());
assertEquals("Europe/Amsterdam", dateTimeZone0.toString());
assertEquals(2, monthDay0.getMonthOfYear());
assertEquals(2, monthDay0.size());
assertEquals(14, monthDay0.getDayOfMonth());
assertEquals(1, MonthDay.DAY_OF_MONTH);
assertEquals(0, MonthDay.MONTH_OF_YEAR);

dateTimeFormatter0.printTo((Writer) charArrayWriter0, (ReadablePartial) monthDay0);
assertNull(dateTimeFormatter0.getPivotYear());
assertEquals(2000, dateTimeFormatter0.getDefaultYear());
assertTrue(dateTimeFormatter0.isParser());
assertTrue(dateTimeFormatter0.isPrinter());
assertFalse(dateTimeFormatter0.isOffsetParsed());
assertEquals("\uFFFD:\uFFFD\uFFFD:\uFFFD\uFFFD \uFFFD ", charArrayWriter0.toString());
assertEquals(10, charArrayWriter0.size());
assertEquals("Europe/Amsterdam", dateTimeZone0.getID());
assertEquals("Europe/Amsterdam", dateTimeZone0.toString());
assertEquals(2, monthDay0.getMonthOfYear());
assertEquals(2, monthDay0.size());
assertEquals(14, monthDay0.getDayOfMonth());
assertEquals(1, MonthDay.DAY_OF_MONTH);
assertEquals(0, MonthDay.MONTH_OF_YEAR);


[MASTER] 22:50:15.789 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[12:59:57 AM +01:00]> but was:<[Jan 1, 1970 12:59:57 AM]>
[MASTER] 22:50:15.790 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DateTimeFormatter dateTimeFormatter0 = DateTimeFormat.mediumDateTime();
assertNotNull(dateTimeFormatter0);
assertTrue(dateTimeFormatter0.isPrinter());
assertEquals(2000, dateTimeFormatter0.getDefaultYear());
assertFalse(dateTimeFormatter0.isOffsetParsed());
assertNull(dateTimeFormatter0.getPivotYear());
assertTrue(dateTimeFormatter0.isParser());

String string0 = dateTimeFormatter0.print((-2815L));
assertNotNull(string0);
assertTrue(dateTimeFormatter0.isPrinter());
assertEquals(2000, dateTimeFormatter0.getDefaultYear());
assertFalse(dateTimeFormatter0.isOffsetParsed());
assertNull(dateTimeFormatter0.getPivotYear());
assertTrue(dateTimeFormatter0.isParser());
assertEquals("12:59:57 AM +01:00", string0);


[MASTER] 22:50:21.604 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<yyyy['年'M'月'd'日]'> but was:<yyyy[/M/d ahh'時'mm'分'ss'秒]'>
[MASTER] 22:50:21.606 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Locale locale0 = Locale.TAIWAN;
assertNotNull(locale0);
assertEquals("zh", locale0.getLanguage());
assertEquals("TWN", locale0.getISO3Country());
assertEquals("zho", locale0.getISO3Language());
assertEquals("zh_TW", locale0.toString());
assertEquals("TW", locale0.getCountry());
assertEquals("", locale0.getVariant());

String string0 = DateTimeFormat.patternForStyle("ML", locale0);
assertNotNull(string0);
assertEquals("zh", locale0.getLanguage());
assertEquals("TWN", locale0.getISO3Country());
assertEquals("zho", locale0.getISO3Language());
assertEquals("zh_TW", locale0.toString());
assertEquals("TW", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", string0);


[MASTER] 22:50:23.136 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<MMM[M d, yyyy]> but was:<MMM[ d, yyyy h:mm:ss a z]>
[MASTER] 22:50:23.137 [logback-1] WARN  JUnitAnalyzer - Failing test:
 String string0 = DateTimeFormat.patternForStyle("ML", (Locale) null);
assertNotNull(string0);
assertEquals("MMMM d, yyyy", string0);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 23
* Writing tests to file
* Writing JUnit test case 'DateTimeFormat_ESTest' to results/evosuite5/time-14-org.joda.time.format.DateTimeFormat-16
* Done!

* Computation finished

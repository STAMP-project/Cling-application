entry: sources/closure-16/build/classes
entry: sources/closure-16/lib/args4j.jar
entry: sources/closure-16/lib/guava.jar
entry: sources/closure-16/lib/json.jar
entry: sources/closure-16/lib/jsr305.jar
entry: sources/closure-16/lib/protobuf-java.jar
entry: sources/closure-16/build/lib/rhino.jar
entry: sources/closure-16/lib/ant.jar
** CP: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar
* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: com.google.javascript.rhino.head.ScriptableObject
* Starting Client-0
* Connecting to master process on port 9446
* Analyzing classpath: 
  - sources/closure-16/build/classes
  - sources/closure-16/lib/args4j.jar
  - sources/closure-16/lib/guava.jar
  - sources/closure-16/lib/json.jar
  - sources/closure-16/lib/jsr305.jar
  - sources/closure-16/lib/protobuf-java.jar
  - sources/closure-16/build/lib/rhino.jar
  - sources/closure-16/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.head.ScriptableObject
* Test criterion:
  - Branch Coverage
* Total number of test goals for DYNAMOSA: 916
* Using seed 1566111657016
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 254 / 916
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.18013100436681223
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.24672489082969432
[MASTER] 09:01:35.200 [logback-1] WARN  TestUsageChecker - class com.google.javascript.rhino.head.ContextFactory$1GlobalSetterImpl looks like an anonymous class, ignoring it (although reflection says false) GlobalSetterImpl
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3165938864628821
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3548034934497817
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.36572052401746724
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3951965065502183
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.43777292576419213
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.44541484716157204
[MASTER] 09:02:46.545 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.head.NativeJavaMethod due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.head.MemberBox due to org.evosuite.ga.ConstructionFailedException: Have no generator for java.lang.reflect.Constructor<com.google.javascript.rhino.head.Delegator> canUseFunctionalMocks=true, canBeMocked: false
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.47489082969432317
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.48799126637554585
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.49890829694323147
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5305676855895196
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.537117903930131
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5393013100436681
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5425764192139738
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5425764192139738
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5524017467248908
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5578602620087336
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5611353711790393
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5709606986899564
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5775109170305677
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5862445414847162
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5862445414847162
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5927947598253275
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5927947598253275
* Search finished after 301s and 122 generations, 44951 statements, best individual has fitness: 373.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5927947598253275
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 58%
* Total number of goals: 916
* Number of covered goals: 528
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5927947598253275
* Generated 104 tests with total length 353
* Resulting test suite's coverage: 59%
* Generating assertions
[MASTER] 09:08:09.105 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7057666666666667% of time used, but only 9/104 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 3%
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5927947598253275
* Compiling and checking tests
[MASTER] 09:08:29.818 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 09:08:29.819 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getCurrentContext();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
importerTopLevel0.sealObject();

[MASTER] 09:08:34.760 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 09:08:34.760 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeCall nativeCall0 = new NativeCall();
Class<ImporterTopLevel> class0 = ImporterTopLevel.class;
ScriptableObject.defineClass((Scriptable) nativeCall0, class0, true, true);
Context context0 = new Context();
context0.initStandardObjects((ScriptableObject) nativeCall0);

[MASTER] 09:08:36.572 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 09:08:36.572 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ContextFactory contextFactory0 = ContextFactory.getGlobal();
Context context0 = new Context(contextFactory0);
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
context0.initStandardObjects((ScriptableObject) importerTopLevel0);

[MASTER] 09:08:47.019 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 09:08:47.019 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ContextFactory contextFactory0 = new ContextFactory();
Context context0 = new Context(contextFactory0);
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
importerTopLevel0.getAllIds();

[MASTER] 09:08:48.536 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Exception was not thrown in com.google.javascript.rhino.head.DefaultErrorReporter but in com.google.javascript.rhino.head.Context.reportRuntimeError(Context.java:947): org.evosuite.runtime.mock.java.lang.MockThrowable: Property 13 not found.
[MASTER] 09:08:48.537 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeCall nativeCall0 = new NativeCall();
assertNotNull(nativeCall0);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, ScriptableObject.READONLY);
assertTrue(nativeCall0.isExtensible());
assertFalse(nativeCall0.isSealed());
assertEquals("Call", nativeCall0.getClassName());
assertFalse(nativeCall0.avoidObjectDetection());
assertTrue(nativeCall0.isEmpty());
assertFalse(nativeCall0.hasPrototypeMap());
assertEquals("object", nativeCall0.getTypeOf());

NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeCall0, false);
assertNotNull(nativeGenerator0);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, NativeGenerator.GENERATOR_THROW);
assertEquals(0, NativeGenerator.GENERATOR_SEND);
assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertTrue(nativeCall0.isExtensible());
assertFalse(nativeCall0.isSealed());
assertEquals("Call", nativeCall0.getClassName());
assertFalse(nativeCall0.avoidObjectDetection());
assertTrue(nativeCall0.isEmpty());
assertFalse(nativeCall0.hasPrototypeMap());
assertEquals("object", nativeCall0.getTypeOf());
assertEquals("Generator", nativeGenerator0.getClassName());
assertEquals("object", nativeGenerator0.getTypeOf());
assertFalse(nativeGenerator0.isSealed());
assertTrue(nativeGenerator0.isEmpty());
assertTrue(nativeGenerator0.hasPrototypeMap());
assertFalse(nativeGenerator0.avoidObjectDetection());
assertTrue(nativeGenerator0.isExtensible());

NativeObject nativeObject0 = (NativeObject)ScriptableObject.buildDataDescriptor(nativeCall0, nativeGenerator0, (-227));
assertNotNull(nativeObject0);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, NativeGenerator.GENERATOR_THROW);
assertEquals(0, NativeGenerator.GENERATOR_SEND);
assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(1, ScriptableObject.READONLY);
assertTrue(nativeCall0.isExtensible());
assertFalse(nativeCall0.isSealed());
assertEquals("Call", nativeCall0.getClassName());
assertFalse(nativeCall0.avoidObjectDetection());
assertTrue(nativeCall0.isEmpty());
assertFalse(nativeCall0.hasPrototypeMap());
assertEquals("object", nativeCall0.getTypeOf());
assertEquals("Generator", nativeGenerator0.getClassName());
assertEquals("object", nativeGenerator0.getTypeOf());
assertFalse(nativeGenerator0.isSealed());
assertTrue(nativeGenerator0.isEmpty());
assertTrue(nativeGenerator0.hasPrototypeMap());
assertFalse(nativeGenerator0.avoidObjectDetection());
assertTrue(nativeGenerator0.isExtensible());
assertFalse(nativeObject0.isSealed());
assertFalse(nativeObject0.avoidObjectDetection());
assertFalse(nativeObject0.isEmpty());
assertTrue(nativeObject0.isExtensible());
assertEquals("Object", nativeObject0.getClassName());
assertFalse(nativeObject0.hasPrototypeMap());
assertEquals("object", nativeObject0.getTypeOf());

nativeObject0.getAttributes(13, (Scriptable) nativeGenerator0);

[MASTER] 09:08:49.862 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 09:08:49.866 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeCall nativeCall0 = new NativeCall();
assertNotNull(nativeCall0);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertFalse(nativeCall0.hasPrototypeMap());
assertEquals("object", nativeCall0.getTypeOf());
assertTrue(nativeCall0.isExtensible());
assertTrue(nativeCall0.isEmpty());
assertFalse(nativeCall0.avoidObjectDetection());
assertEquals("Call", nativeCall0.getClassName());
assertFalse(nativeCall0.isSealed());

ContextFactory contextFactory0 = ContextFactory.getGlobal();
assertNotNull(contextFactory0);
assertFalse(contextFactory0.isSealed());
assertFalse(contextFactory0.hasExplicitGlobal());

Context context0 = new Context(contextFactory0);
assertNotNull(context0);
assertFalse(context0.generateObserverCount);
assertEquals(130, Context.VERSION_1_3);
assertEquals(180, Context.VERSION_1_8);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(140, Context.VERSION_1_4);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(110, Context.VERSION_1_1);
assertEquals(160, Context.VERSION_1_6);
assertEquals(120, Context.VERSION_1_2);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(170, Context.VERSION_1_7);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(150, Context.VERSION_1_5);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(100, Context.VERSION_1_0);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertFalse(contextFactory0.isSealed());
assertFalse(contextFactory0.hasExplicitGlobal());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isSealed());
assertEquals(0, context0.getOptimizationLevel());
assertTrue(context0.isGeneratingSource());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getLanguageVersion());

BaseFunction baseFunction0 = new BaseFunction();
assertNotNull(baseFunction0);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertFalse(baseFunction0.avoidObjectDetection());
assertEquals("Function", baseFunction0.getClassName());
assertFalse(baseFunction0.isSealed());
assertTrue(baseFunction0.isExtensible());
assertTrue(baseFunction0.isEmpty());
assertFalse(baseFunction0.hasPrototypeMap());
assertEquals("function", baseFunction0.getTypeOf());

BoundFunction boundFunction0 = new BoundFunction(context0, baseFunction0, baseFunction0, baseFunction0, context0.emptyArgs);
assertNotNull(boundFunction0);
assertFalse(context0.generateObserverCount);
assertEquals(130, Context.VERSION_1_3);
assertEquals(180, Context.VERSION_1_8);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(140, Context.VERSION_1_4);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(110, Context.VERSION_1_1);
assertEquals(160, Context.VERSION_1_6);
assertEquals(120, Context.VERSION_1_2);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(170, Context.VERSION_1_7);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(150, Context.VERSION_1_5);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(100, Context.VERSION_1_0);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertFalse(contextFactory0.isSealed());
assertFalse(contextFactory0.hasExplicitGlobal());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isSealed());
assertEquals(0, context0.getOptimizationLevel());
assertTrue(context0.isGeneratingSource());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getLanguageVersion());
assertFalse(baseFunction0.avoidObjectDetection());
assertEquals("Function", baseFunction0.getClassName());
assertFalse(baseFunction0.isSealed());
assertTrue(baseFunction0.isExtensible());
assertTrue(baseFunction0.isEmpty());
assertFalse(baseFunction0.hasPrototypeMap());
assertEquals("function", baseFunction0.getTypeOf());
assertEquals(0, boundFunction0.getLength());
assertEquals("function", boundFunction0.getTypeOf());
assertTrue(boundFunction0.isExtensible());
assertFalse(boundFunction0.hasPrototypeMap());
assertFalse(boundFunction0.isSealed());
assertFalse(boundFunction0.isEmpty());
assertEquals("Function", boundFunction0.getClassName());
assertFalse(boundFunction0.avoidObjectDetection());

nativeCall0.defineOwnProperty(context0, (Object) boundFunction0, (ScriptableObject) baseFunction0, false);

[MASTER] 09:08:54.400 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Exception was not thrown in com.google.javascript.rhino.head.DefaultErrorReporter but in com.google.javascript.rhino.head.Context.reportRuntimeError(Context.java:947): org.evosuite.runtime.mock.java.lang.MockThrowable: Property D]:&-D`Wedni@8%8sN not found.
[MASTER] 09:08:54.401 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BaseFunction baseFunction0 = new BaseFunction();
assertNotNull(baseFunction0);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertTrue(baseFunction0.isExtensible());
assertEquals("function", baseFunction0.getTypeOf());
assertFalse(baseFunction0.hasPrototypeMap());
assertTrue(baseFunction0.isEmpty());
assertEquals("Function", baseFunction0.getClassName());
assertFalse(baseFunction0.isSealed());
assertFalse(baseFunction0.avoidObjectDetection());

NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
assertNotNull(nativeIterator_StopIteration0);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
assertTrue(nativeIterator_StopIteration0.isExtensible());
assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
assertTrue(nativeIterator_StopIteration0.isEmpty());
assertFalse(nativeIterator_StopIteration0.isSealed());
assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());

nativeIterator_StopIteration0.getAttributes("D]:&-D`Wedni@8%8sN", (Scriptable) baseFunction0);

[MASTER] 09:08:56.776 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 09:08:56.777 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ContextFactory contextFactory0 = new ContextFactory();
assertNotNull(contextFactory0);
assertFalse(contextFactory0.hasExplicitGlobal());
assertFalse(contextFactory0.isSealed());

NativeNumber nativeNumber0 = new NativeNumber(1.0000000001561232E9);
assertNotNull(nativeNumber0);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertFalse(nativeNumber0.hasPrototypeMap());
assertEquals("object", nativeNumber0.getTypeOf());
assertTrue(nativeNumber0.isExtensible());
assertEquals("Number", nativeNumber0.getClassName());
assertFalse(nativeNumber0.isSealed());
assertFalse(nativeNumber0.avoidObjectDetection());
assertTrue(nativeNumber0.isEmpty());

Context context0 = Context.getCurrentContext();
assertNull(context0);

ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
nativeNumber0.defineOwnProperty(context0, contextFactory0, importerTopLevel0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'ScriptableObject_ESTest' to results/evosuite5/closure-16-com.google.javascript.rhino.head.ScriptableObject-27
* Done!

* Computation finished

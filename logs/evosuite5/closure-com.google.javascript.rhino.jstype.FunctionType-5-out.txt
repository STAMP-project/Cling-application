entry: sources/closure-16/build/classes
entry: sources/closure-16/lib/args4j.jar
entry: sources/closure-16/lib/guava.jar
entry: sources/closure-16/lib/json.jar
entry: sources/closure-16/lib/jsr305.jar
entry: sources/closure-16/lib/protobuf-java.jar
entry: sources/closure-16/build/lib/rhino.jar
entry: sources/closure-16/lib/ant.jar
** CP: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar
* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: com.google.javascript.rhino.jstype.FunctionType
* Starting Client-0
* Connecting to master process on port 10180
* Analyzing classpath: 
  - sources/closure-16/build/classes
  - sources/closure-16/lib/args4j.jar
  - sources/closure-16/lib/guava.jar
  - sources/closure-16/lib/json.jar
  - sources/closure-16/lib/jsr305.jar
  - sources/closure-16/lib/protobuf-java.jar
  - sources/closure-16/build/lib/rhino.jar
  - sources/closure-16/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.jstype.FunctionType
* Test criterion:
  - Branch Coverage
* Total number of test goals for DYNAMOSA: 372
* Using seed 1564038175570
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 156 / 372
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.1935483870967742
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3844086021505376
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.543010752688172
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6505376344086021
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6881720430107527
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7204301075268817
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.760752688172043
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.782258064516129
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7849462365591398
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8225806451612904
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8387096774193549
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8413978494623656
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8467741935483871
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8521505376344086
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8575268817204301
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8709677419354839
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8709677419354839
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8817204301075269
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8870967741935484
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8897849462365591
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8897849462365591
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8951612903225806
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9274193548387096
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9327956989247311
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9327956989247311
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9327956989247311
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9327956989247311
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9381720430107527
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9381720430107527
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9381720430107527
* Search finished after 302s and 373 generations, 207732 statements, best individual has fitness: 23.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9381720430107527
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 94%
* Total number of goals: 372
* Number of covered goals: 348
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9381720430107527
* Generated 91 tests with total length 521
* Resulting test suite's coverage: 94%
* Generating assertions
[MASTER] 09:09:04.823 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6989666666666666% of time used, but only 6/91 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 8%
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9381720430107527
* Compiling and checking tests
[MASTER] 09:09:55.624 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<function ((bind|null[)=, *=, *=, *=]): bind> but was:<function ((bind|null[|undefined), *=, *=, *=): function (...[?]]): bind>
[MASTER] 09:09:55.626 [logback-1] WARN  JUnitAnalyzer - Failing test:
 SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "bind");
assertNotNull(errorFunctionType0);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(errorFunctionType0.isConstructor());
assertFalse(errorFunctionType0.hasCachedValues());
assertFalse(errorFunctionType0.isFunctionPrototypeType());
assertTrue(errorFunctionType0.hasInstanceType());
assertFalse(errorFunctionType0.isRecordType());
assertFalse(errorFunctionType0.isNoResolvedType());
assertFalse(errorFunctionType0.isUnionType());
assertTrue(errorFunctionType0.canBeCalled());
assertFalse(errorFunctionType0.isStringValueType());
assertFalse(errorFunctionType0.isReturnTypeInferred());
assertFalse(errorFunctionType0.isParameterizedType());
assertFalse(errorFunctionType0.isResolved());
assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
assertFalse(errorFunctionType0.isOrdinaryFunction());
assertFalse(errorFunctionType0.isVoidType());
assertFalse(errorFunctionType0.isBooleanValueType());
assertFalse(errorFunctionType0.isEnumElementType());
assertFalse(errorFunctionType0.isAllType());
assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
assertFalse(errorFunctionType0.isTemplateType());
assertFalse(errorFunctionType0.isEnumType());
assertFalse(errorFunctionType0.isInterface());
assertFalse(errorFunctionType0.isCheckedUnknownType());
assertFalse(errorFunctionType0.isNumberValueType());
assertFalse(errorFunctionType0.isNominalType());
assertTrue(errorFunctionType0.isFunctionType());
assertFalse(errorFunctionType0.isNoType());
assertFalse(errorFunctionType0.isNoObjectType());
assertTrue(errorFunctionType0.isNominalConstructor());
assertFalse(errorFunctionType0.isNullType());

FunctionType functionType0 = (FunctionType)errorFunctionType0.getPropertyType("bind");
assertNotNull(functionType0);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(errorFunctionType0.isConstructor());
assertFalse(errorFunctionType0.isFunctionPrototypeType());
assertTrue(errorFunctionType0.hasCachedValues());
assertTrue(errorFunctionType0.hasInstanceType());
assertFalse(errorFunctionType0.isRecordType());
assertFalse(errorFunctionType0.isNoResolvedType());
assertFalse(errorFunctionType0.isUnionType());
assertTrue(errorFunctionType0.canBeCalled());
assertFalse(errorFunctionType0.isStringValueType());
assertFalse(errorFunctionType0.isReturnTypeInferred());
assertFalse(errorFunctionType0.isParameterizedType());
assertFalse(errorFunctionType0.isResolved());
assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
assertFalse(errorFunctionType0.isOrdinaryFunction());
assertFalse(errorFunctionType0.isVoidType());
assertFalse(errorFunctionType0.isBooleanValueType());
assertFalse(errorFunctionType0.isEnumElementType());
assertFalse(errorFunctionType0.isAllType());
assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
assertFalse(errorFunctionType0.isTemplateType());
assertFalse(errorFunctionType0.isEnumType());
assertFalse(errorFunctionType0.isInterface());
assertFalse(errorFunctionType0.isCheckedUnknownType());
assertFalse(errorFunctionType0.isNumberValueType());
assertFalse(errorFunctionType0.isNominalType());
assertTrue(errorFunctionType0.isFunctionType());
assertFalse(errorFunctionType0.isNoType());
assertFalse(errorFunctionType0.isNoObjectType());
assertTrue(errorFunctionType0.isNominalConstructor());
assertFalse(errorFunctionType0.isNullType());
assertTrue(functionType0.canBeCalled());
assertFalse(functionType0.isRecordType());
assertFalse(functionType0.isReturnTypeInferred());
assertFalse(functionType0.hasInstanceType());
assertFalse(functionType0.hasCachedValues());
assertFalse(functionType0.isResolved());
assertFalse(functionType0.isBooleanValueType());
assertFalse(functionType0.isUnionType());
assertFalse(functionType0.isNumberValueType());
assertFalse(functionType0.isFunctionPrototypeType());
assertFalse(functionType0.isEnumType());
assertFalse(functionType0.isNoResolvedType());
assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
assertFalse(functionType0.isVoidType());
assertFalse(functionType0.isNominalConstructor());
assertFalse(functionType0.isNominalType());
assertTrue(functionType0.isOrdinaryFunction());
assertFalse(functionType0.isStringValueType());
assertEquals(0, functionType0.getExtendedInterfacesCount());
assertFalse(functionType0.isCheckedUnknownType());
assertFalse(functionType0.isNullType());
assertFalse(functionType0.isNoType());
assertFalse(functionType0.isConstructor());
assertTrue(functionType0.isFunctionType());
assertFalse(functionType0.isNoObjectType());
assertFalse(functionType0.isAllType());
assertFalse(functionType0.isParameterizedType());
assertFalse(functionType0.isInterface());
assertFalse(functionType0.isEnumElementType());
assertFalse(functionType0.isTemplateType());

String string0 = functionType0.toAnnotationString();
assertNotNull(string0);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(errorFunctionType0.isConstructor());
assertFalse(errorFunctionType0.isFunctionPrototypeType());
assertTrue(errorFunctionType0.hasCachedValues());
assertTrue(errorFunctionType0.hasInstanceType());
assertFalse(errorFunctionType0.isRecordType());
assertFalse(errorFunctionType0.isNoResolvedType());
assertFalse(errorFunctionType0.isUnionType());
assertTrue(errorFunctionType0.canBeCalled());
assertFalse(errorFunctionType0.isStringValueType());
assertFalse(errorFunctionType0.isReturnTypeInferred());
assertFalse(errorFunctionType0.isParameterizedType());
assertFalse(errorFunctionType0.isResolved());
assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
assertFalse(errorFunctionType0.isOrdinaryFunction());
assertFalse(errorFunctionType0.isVoidType());
assertFalse(errorFunctionType0.isBooleanValueType());
assertFalse(errorFunctionType0.isEnumElementType());
assertFalse(errorFunctionType0.isAllType());
assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
assertFalse(errorFunctionType0.isTemplateType());
assertFalse(errorFunctionType0.isEnumType());
assertFalse(errorFunctionType0.isInterface());
assertFalse(errorFunctionType0.isCheckedUnknownType());
assertFalse(errorFunctionType0.isNumberValueType());
assertFalse(errorFunctionType0.isNominalType());
assertTrue(errorFunctionType0.isFunctionType());
assertFalse(errorFunctionType0.isNoType());
assertFalse(errorFunctionType0.isNoObjectType());
assertTrue(errorFunctionType0.isNominalConstructor());
assertFalse(errorFunctionType0.isNullType());
assertTrue(functionType0.canBeCalled());
assertFalse(functionType0.isRecordType());
assertFalse(functionType0.isReturnTypeInferred());
assertFalse(functionType0.hasInstanceType());
assertFalse(functionType0.hasCachedValues());
assertFalse(functionType0.isResolved());
assertFalse(functionType0.isBooleanValueType());
assertFalse(functionType0.isUnionType());
assertFalse(functionType0.isNumberValueType());
assertFalse(functionType0.isFunctionPrototypeType());
assertFalse(functionType0.isEnumType());
assertFalse(functionType0.isNoResolvedType());
assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
assertFalse(functionType0.isVoidType());
assertFalse(functionType0.isNominalConstructor());
assertFalse(functionType0.isNominalType());
assertTrue(functionType0.isOrdinaryFunction());
assertFalse(functionType0.isStringValueType());
assertEquals(0, functionType0.getExtendedInterfacesCount());
assertFalse(functionType0.isCheckedUnknownType());
assertFalse(functionType0.isNullType());
assertFalse(functionType0.isNoType());
assertFalse(functionType0.isConstructor());
assertTrue(functionType0.isFunctionType());
assertFalse(functionType0.isNoObjectType());
assertFalse(functionType0.isAllType());
assertFalse(functionType0.isParameterizedType());
assertFalse(functionType0.isInterface());
assertFalse(functionType0.isEnumElementType());
assertFalse(functionType0.isTemplateType());
assertEquals("function ((bind|null)=, *=, *=, *=): bind", string0);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 4
* Writing tests to file
* Writing JUnit test case 'FunctionType_ESTest' to results/evosuite5/closure-16-com.google.javascript.rhino.jstype.FunctionType-5
* Done!

* Computation finished

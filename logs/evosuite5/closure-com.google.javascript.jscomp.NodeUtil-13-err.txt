[MASTER] 19:10:53.510 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_122_1566407452953/com/google/javascript/jscomp/NodeUtil_122_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_122_1566407452953/com/google/javascript/jscomp/NodeUtil_122_tmp__ESTest_scaffolding.java]]
[MASTER] 19:10:53.510 [logback-2] ERROR JUnitAnalyzer - Classpath: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/tools/evosuite.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/classes:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/args4j.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/guava.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/json.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/jsr305.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/protobuf-java.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/lib/rhino.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/ant.jar
[MASTER] 19:10:53.510 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/rq3/botsing-integration-experiment/tools/evosuite.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/classes:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/args4j.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/guava.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/json.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/jsr305.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/protobuf-java.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/lib/rhino.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/ant.jar
[MASTER] 19:10:53.527 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 397
[MASTER] 19:10:53.530 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable1 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 514
[MASTER] 19:10:53.550 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_122_1566407452953/com/google/javascript/jscomp/NodeUtil_122_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Aug 21 17:10:52 GMT 2019
4:  */
5: 
6: package com.google.javascript.jscomp;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.jscomp.Compiler;
11: import com.google.javascript.jscomp.CompilerOptions;
12: import com.google.javascript.jscomp.NodeUtil;
13: import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
14: import com.google.javascript.rhino.Node;
15: import com.google.javascript.rhino.SimpleErrorReporter;
16: import com.google.javascript.rhino.jstype.JSType;
17: import com.google.javascript.rhino.jstype.JSTypeRegistry;
18: import com.google.javascript.rhino.jstype.StaticSourceFile;
19: import java.util.List;
20: import java.util.Stack;
21: import java.util.Vector;
22: import org.evosuite.runtime.EvoRunner;
23: import org.evosuite.runtime.EvoRunnerParameters;
24: import org.evosuite.runtime.testdata.FileSystemHandling;
25: import org.junit.runner.RunWith;
26: 
27: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
28: public class NodeUtil_122_tmp__ESTest extends NodeUtil_122_tmp__ESTest_scaffolding {
29: 
30:   @Test(timeout = 4000)
31:   public void test0()  throws Throwable  {
32:       FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
33:       assertNotNull(fileSystemHandling0);
34:       
35:       NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
36:       assertNotNull(nodeUtil_MayBeStringResultPredicate0);
37:       
38:       PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
39:       assertNotNull(peepholeSubstituteAlternateSyntax0);
40:       
41:       Compiler compiler0 = new Compiler();
42:       assertNotNull(compiler0);
43:       assertEquals(0.0, compiler0.getProgress(), 0.01);
44:       
45:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
46:       assertNotNull(simpleErrorReporter0);
47:       
48:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
49:       assertNotNull(jSTypeRegistry0);
50:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
51:       
52:       Vector<JSType> vector0 = new Vector<JSType>();
53:       assertNotNull(vector0);
54:       assertEquals(0, vector0.size());
55:       assertEquals("[]", vector0.toString());
56:       assertEquals(10, vector0.capacity());
57:       assertTrue(vector0.isEmpty());
58:       
59:       Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
60:       assertNotNull(node0);
61:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
62:       assertEquals(0, vector0.size());
63:       assertEquals("[]", vector0.toString());
64:       assertEquals(10, vector0.capacity());
65:       assertTrue(vector0.isEmpty());
66:       assertFalse(node0.isGetProp());
67:       assertFalse(node0.isComma());
68:       assertFalse(node0.isThis());
69:       assertFalse(node0.isBreak());
70:       assertFalse(node0.isThrow());
71:       assertFalse(node0.isHook());
72:       assertFalse(node0.isInstanceOf());
73:       assertFalse(node0.isFalse());
74:       assertFalse(node0.isWith());
75:       assertEquals((-1), node0.getCharno());
76:       assertFalse(node0.isScript());
77:       assertFalse(node0.hasOneChild());
78:       assertFalse(node0.isSwitch());
79:       assertFalse(node0.isAnd());
80:       assertFalse(node0.isObjectLit());
81:       assertFalse(node0.isCase());
82:       assertEquals((-1), node0.getSourcePosition());
83:       assertFalse(node0.isString());
84:       assertFalse(node0.isNot());
85:       assertTrue(node0.isParamList());
86:       assertFalse(node0.isNumber());
87:       assertFalse(node0.isFromExterns());
88:       assertFalse(node0.isLabel());
89:       assertFalse(node0.isReturn());
90:       assertFalse(node0.isDelProp());
91:       assertFalse(node0.isAssignAdd());
92:       assertFalse(node0.isLabelName());
93:       assertFalse(node0.isArrayLit());
94:       assertFalse(node0.isGetElem());
95:       assertFalse(node0.hasChildren());
96:       assertFalse(node0.isDec());
97:       assertFalse(node0.isAssign());
98:       assertFalse(node0.isTypeOf());
99:       assertFalse(node0.isVoid());
100:       assertFalse(node0.isNew());
101:       assertFalse(node0.isAdd());
102:       assertFalse(node0.isTrue());
103:       assertFalse(node0.isExprResult());
104:       assertFalse(node0.isDefaultCase());
105:       assertFalse(node0.isDo());
106:       assertFalse(node0.isEmpty());
107:       assertNull(node0.getSourceFileName());
108:       assertFalse(node0.isOr());
109:       assertEquals(83, node0.getType());
110:       assertFalse(node0.isSetterDef());
111:       assertFalse(node0.isNull());
112:       assertFalse(node0.isName());
113:       assertFalse(node0.isCatch());
114:       assertFalse(node0.isVar());
115:       assertFalse(node0.isCall());
116:       assertEquals(0, node0.getChildCount());
117:       assertFalse(node0.isRegExp());
118:       assertFalse(node0.isFunction());
119:       assertFalse(node0.isDebugger());
120:       assertFalse(node0.isBlock());
121:       assertFalse(node0.isWhile());
122:       assertFalse(node0.isTry());
123:       assertFalse(node0.isStringKey());
124:       assertEquals((-1), node0.getSourceOffset());
125:       assertFalse(node0.isGetterDef());
126:       assertFalse(node0.isNE());
127:       assertFalse(node0.isIf());
128:       assertEquals((-1), node0.getLineno());
129:       assertFalse(node0.isContinue());
130:       assertFalse(node0.isFor());
131:       assertFalse(node0.hasMoreThanOneChild());
132:       assertFalse(node0.isInc());
133:       assertFalse(node0.isIn());
134:       assertEquals(49, Node.DIRECT_EVAL);
135:       assertEquals(30, Node.VAR_ARGS_NAME);
136:       assertEquals(51, Node.STATIC_SOURCE_FILE);
137:       assertEquals(1, Node.DECR_FLAG);
138:       assertEquals(32, Node.INCRDECR_PROP);
139:       assertEquals(46, Node.IS_NAMESPACE);
140:       assertEquals(12, Node.COLUMN_BITS);
141:       assertEquals(54, Node.SLASH_V);
142:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
143:       assertEquals(52, Node.LENGTH);
144:       assertEquals(15, Node.NO_SIDE_EFFECTS);
145:       assertEquals(29, Node.JSDOC_INFO_PROP);
146:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
147:       assertEquals(40, Node.ORIGINALNAME_PROP);
148:       assertEquals(50, Node.FREE_CALL);
149:       assertEquals(41, Node.BRACELESS_TYPE);
150:       assertEquals(47, Node.IS_DISPATCHER);
151:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
152:       assertEquals(2, Node.POST_FLAG);
153:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
154:       assertEquals(16, Node.SOURCENAME_PROP);
155:       assertEquals(43, Node.IS_CONSTANT_NAME);
156:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
157:       assertEquals(35, Node.PARENTHESIZED_PROP);
158:       assertEquals(8, Node.FLAG_NO_THROWS);
159:       assertEquals(39, Node.EMPTY_BLOCK);
160:       assertEquals(53, Node.INPUT_ID);
161:       assertEquals(36, Node.QUOTED_PROP);
162:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
163:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
164:       assertEquals(37, Node.OPT_ARG_NAME);
165:       assertEquals(48, Node.DIRECTIVES);
166:       assertEquals(54, Node.LAST_PROP);
167:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
168:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
169:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
170:       assertEquals(4095, Node.COLUMN_MASK);
171:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
172:       
173:       Node node1 = new Node(19, node0, node0, node0, node0);
174:       assertNotNull(node1);
175:       assertFalse(node1.equals((Object)node0));
176:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
177:       assertEquals(0, vector0.size());
178:       assertEquals("[]", vector0.toString());
179:       assertEquals(10, vector0.capacity());
180:       assertTrue(vector0.isEmpty());
181:       assertFalse(node0.isGetProp());
182:       assertFalse(node0.isComma());
183:       assertFalse(node0.isThis());
184:       assertFalse(node0.isBreak());
185:       assertFalse(node0.isThrow());
186:       assertFalse(node0.isHook());
187:       assertFalse(node0.isInstanceOf());
188:       assertFalse(node0.isFalse());
189:       assertFalse(node0.isWith());
190:       assertEquals((-1), node0.getCharno());
191:       assertFalse(node0.isScript());
192:       assertFalse(node0.hasOneChild());
193:       assertFalse(node0.isSwitch());
194:       assertFalse(node0.isAnd());
195:       assertFalse(node0.isObjectLit());
196:       assertFalse(node0.isCase());
197:       assertEquals((-1), node0.getSourcePosition());
198:       assertFalse(node0.isString());
199:       assertFalse(node0.isNot());
200:       assertTrue(node0.isParamList());
201:       assertFalse(node0.isNumber());
202:       assertFalse(node0.isFromExterns());
203:       assertFalse(node0.isLabel());
204:       assertFalse(node0.isReturn());
205:       assertFalse(node0.isDelProp());
206:       assertFalse(node0.isAssignAdd());
207:       assertFalse(node0.isLabelName());
208:       assertFalse(node0.isArrayLit());
209:       assertFalse(node0.isGetElem());
210:       assertFalse(node0.hasChildren());
211:       assertFalse(node0.isDec());
212:       assertFalse(node0.isAssign());
213:       assertFalse(node0.isTypeOf());
214:       assertFalse(node0.isVoid());
215:       assertFalse(node0.isNew());
216:       assertFalse(node0.isAdd());
217:       assertFalse(node0.isTrue());
218:       assertFalse(node0.isExprResult());
219:       assertFalse(node0.isDefaultCase());
220:       assertFalse(node0.isDo());
221:       assertFalse(node0.isEmpty());
222:       assertNull(node0.getSourceFileName());
223:       assertFalse(node0.isOr());
224:       assertEquals(83, node0.getType());
225:       assertFalse(node0.isSetterDef());
226:       assertFalse(node0.isNull());
227:       assertFalse(node0.isName());
228:       assertFalse(node0.isCatch());
229:       assertFalse(node0.isVar());
230:       assertFalse(node0.isCall());
231:       assertEquals(0, node0.getChildCount());
232:       assertFalse(node0.isRegExp());
233:       assertFalse(node0.isFunction());
234:       assertFalse(node0.isDebugger());
235:       assertFalse(node0.isBlock());
236:       assertFalse(node0.isWhile());
237:       assertFalse(node0.isTry());
238:       assertFalse(node0.isStringKey());
239:       assertEquals((-1), node0.getSourceOffset());
240:       assertFalse(node0.isGetterDef());
241:       assertFalse(node0.isNE());
242:       assertFalse(node0.isIf());
243:       assertEquals((-1), node0.getLineno());
244:       assertFalse(node0.isContinue());
245:       assertFalse(node0.isFor());
246:       assertFalse(node0.hasMoreThanOneChild());
247:       assertFalse(node0.isInc());
248:       assertFalse(node0.isIn());
249:       assertFalse(node1.isExprResult());
250:       assertFalse(node1.isLabelName());
251:       assertFalse(node1.isWith());
252:       assertFalse(node1.isGetElem());
253:       assertFalse(node1.isTypeOf());
254:       assertFalse(node1.isAssign());
255:       assertFalse(node1.isDec());
256:       assertEquals((-1), node1.getLineno());
257:       assertFalse(node1.isLabel());
258:       assertFalse(node1.isAssignAdd());
259:       assertFalse(node1.isInstanceOf());
260:       assertFalse(node1.isDo());
261:       assertFalse(node1.isOr());
262:       assertFalse(node1.isAdd());
263:       assertFalse(node1.isBlock());
264:       assertFalse(node1.isHook());
265:       assertFalse(node1.isVar());
266:       assertFalse(node1.isSwitch());
267:       assertFalse(node1.isNew());
268:       assertFalse(node1.isThis());
269:       assertFalse(node1.hasMoreThanOneChild());
270:       assertEquals(1, node1.getChildCount());
271:       assertFalse(node1.isParamList());
272:       assertFalse(node1.isCase());
273:       assertFalse(node1.isGetterDef());
274:       assertEquals((-1), node1.getSourceOffset());
275:       assertFalse(node1.isScript());
276:       assertFalse(node1.isStringKey());
277:       assertEquals((-1), node1.getCharno());
278:       assertFalse(node1.isNumber());
279:       assertFalse(node1.isArrayLit());
280:       assertFalse(node1.isVoid());
281:       assertFalse(node1.isTry());
282:       assertTrue(node1.hasOneChild());
283:       assertFalse(node1.isDefaultCase());
284:       assertFalse(node1.isFor());
285:       assertFalse(node1.isFunction());
286:       assertFalse(node1.isRegExp());
287:       assertFalse(node1.isIn());
288:       assertTrue(node1.hasChildren());
289:       assertFalse(node1.isCatch());
290:       assertFalse(node1.isSetterDef());
291:       assertFalse(node1.isDelProp());
292:       assertFalse(node1.isIf());
293:       assertFalse(node1.isNull());
294:       assertFalse(node1.isEmpty());
295:       assertFalse(node1.isNE());
296:       assertFalse(node1.isTrue());
297:       assertEquals(19, node1.getType());
298:       assertNull(node1.getSourceFileName());
299:       assertFalse(node1.isInc());
300:       assertFalse(node1.isCall());
301:       assertFalse(node1.isName());
302:       assertFalse(node1.isWhile());
303:       assertFalse(node1.isBreak());
304:       assertFalse(node1.isThrow());
305:       assertFalse(node1.isComma());
306:       assertFalse(node1.isFalse());
307:       assertFalse(node1.isContinue());
308:       assertFalse(node1.isReturn());
309:       assertFalse(node1.isAnd());
310:       assertFalse(node1.isFromExterns());
311:       assertFalse(node1.isGetProp());
312:       assertFalse(node1.isString());
313:       assertFalse(node1.isObjectLit());
314:       assertFalse(node1.isDebugger());
315:       assertEquals((-1), node1.getSourcePosition());
316:       assertFalse(node1.isNot());
317:       assertEquals(49, Node.DIRECT_EVAL);
318:       assertEquals(30, Node.VAR_ARGS_NAME);
319:       assertEquals(51, Node.STATIC_SOURCE_FILE);
320:       assertEquals(1, Node.DECR_FLAG);
321:       assertEquals(32, Node.INCRDECR_PROP);
322:       assertEquals(46, Node.IS_NAMESPACE);
323:       assertEquals(12, Node.COLUMN_BITS);
324:       assertEquals(54, Node.SLASH_V);
325:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
326:       assertEquals(52, Node.LENGTH);
327:       assertEquals(15, Node.NO_SIDE_EFFECTS);
328:       assertEquals(29, Node.JSDOC_INFO_PROP);
329:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
330:       assertEquals(40, Node.ORIGINALNAME_PROP);
331:       assertEquals(50, Node.FREE_CALL);
332:       assertEquals(41, Node.BRACELESS_TYPE);
333:       assertEquals(47, Node.IS_DISPATCHER);
334:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
335:       assertEquals(2, Node.POST_FLAG);
336:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
337:       assertEquals(16, Node.SOURCENAME_PROP);
338:       assertEquals(43, Node.IS_CONSTANT_NAME);
339:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
340:       assertEquals(35, Node.PARENTHESIZED_PROP);
341:       assertEquals(8, Node.FLAG_NO_THROWS);
342:       assertEquals(39, Node.EMPTY_BLOCK);
343:       assertEquals(53, Node.INPUT_ID);
344:       assertEquals(36, Node.QUOTED_PROP);
345:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
346:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
347:       assertEquals(37, Node.OPT_ARG_NAME);
348:       assertEquals(48, Node.DIRECTIVES);
349:       assertEquals(54, Node.LAST_PROP);
350:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
351:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
352:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
353:       assertEquals(4095, Node.COLUMN_MASK);
354:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
355:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
356:       assertEquals(50, Node.FREE_CALL);
357:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
358:       assertEquals(48, Node.DIRECTIVES);
359:       assertEquals(41, Node.BRACELESS_TYPE);
360:       assertEquals(8, Node.FLAG_NO_THROWS);
361:       assertEquals(39, Node.EMPTY_BLOCK);
362:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
363:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
364:       assertEquals(52, Node.LENGTH);
365:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
366:       assertEquals(49, Node.DIRECT_EVAL);
367:       assertEquals(36, Node.QUOTED_PROP);
368:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
369:       assertEquals(54, Node.LAST_PROP);
370:       assertEquals(1, Node.DECR_FLAG);
371:       assertEquals(12, Node.COLUMN_BITS);
372:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
373:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
374:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
375:       assertEquals(4095, Node.COLUMN_MASK);
376:       assertEquals(29, Node.JSDOC_INFO_PROP);
377:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
378:       assertEquals(47, Node.IS_DISPATCHER);
379:       assertEquals(37, Node.OPT_ARG_NAME);
380:       assertEquals(32, Node.INCRDECR_PROP);
381:       assertEquals(46, Node.IS_NAMESPACE);
382:       assertEquals(51, Node.STATIC_SOURCE_FILE);
383:       assertEquals(53, Node.INPUT_ID);
384:       assertEquals(35, Node.PARENTHESIZED_PROP);
385:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
386:       assertEquals(16, Node.SOURCENAME_PROP);
387:       assertEquals(30, Node.VAR_ARGS_NAME);
388:       assertEquals(15, Node.NO_SIDE_EFFECTS);
389:       assertEquals(54, Node.SLASH_V);
390:       assertEquals(43, Node.IS_CONSTANT_NAME);
391:       assertEquals(40, Node.ORIGINALNAME_PROP);
392:       assertEquals(2, Node.POST_FLAG);
393:       
394:       simpleErrorReporter0.error("Nu/m{@gYC:Qye", "R#", 39, (-1330));
395:       Iterable<Node> iterable0 = node0.children();
396:       assertNotNull(iterable0);
397:       assertFalse(iterable0.contains(node1));
398:       assertFalse(node0.equals((Object)node1));
399:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
400:       assertEquals(0, vector0.size());
401:       assertEquals("[]", vector0.toString());
402:       assertEquals(10, vector0.capacity());
403:       assertTrue(vector0.isEmpty());
404:       assertFalse(node0.isGetProp());
405:       assertFalse(node0.isComma());
406:       assertFalse(node0.isThis());
407:       assertFalse(node0.isBreak());
408:       assertFalse(node0.isThrow());
409:       assertFalse(node0.isHook());
410:       assertFalse(node0.isInstanceOf());
411:       assertFalse(node0.isFalse());
412:       assertFalse(node0.isWith());
413:       assertEquals((-1), node0.getCharno());
414:       assertFalse(node0.isScript());
415:       assertFalse(node0.hasOneChild());
416:       assertFalse(node0.isSwitch());
417:       assertFalse(node0.isAnd());
418:       assertFalse(node0.isObjectLit());
419:       assertFalse(node0.isCase());
420:       assertEquals((-1), node0.getSourcePosition());
421:       assertFalse(node0.isString());
422:       assertFalse(node0.isNot());
423:       assertTrue(node0.isParamList());
424:       assertFalse(node0.isNumber());
425:       assertFalse(node0.isFromExterns());
426:       assertFalse(node0.isLabel());
427:       assertFalse(node0.isReturn());
428:       assertFalse(node0.isDelProp());
429:       assertFalse(node0.isAssignAdd());
430:       assertFalse(node0.isLabelName());
431:       assertFalse(node0.isArrayLit());
432:       assertFalse(node0.isGetElem());
433:       assertFalse(node0.hasChildren());
434:       assertFalse(node0.isDec());
435:       assertFalse(node0.isAssign());
436:       assertFalse(node0.isTypeOf());
437:       assertFalse(node0.isVoid());
438:       assertFalse(node0.isNew());
439:       assertFalse(node0.isAdd());
440:       assertFalse(node0.isTrue());
441:       assertFalse(node0.isExprResult());
442:       assertFalse(node0.isDefaultCase());
443:       assertFalse(node0.isDo());
444:       assertFalse(node0.isEmpty());
445:       assertNull(node0.getSourceFileName());
446:       assertFalse(node0.isOr());
447:       assertEquals(83, node0.getType());
448:       assertFalse(node0.isSetterDef());
449:       assertFalse(node0.isNull());
450:       assertFalse(node0.isName());
451:       assertFalse(node0.isCatch());
452:       assertFalse(node0.isVar());
453:       assertFalse(node0.isCall());
454:       assertEquals(0, node0.getChildCount());
455:       assertFalse(node0.isRegExp());
456:       assertFalse(node0.isFunction());
457:       assertFalse(node0.isDebugger());
458:       assertFalse(node0.isBlock());
459:       assertFalse(node0.isWhile());
460:       assertFalse(node0.isTry());
461:       assertFalse(node0.isStringKey());
462:       assertEquals((-1), node0.getSourceOffset());
463:       assertFalse(node0.isGetterDef());
464:       assertFalse(node0.isNE());
465:       assertFalse(node0.isIf());
466:       assertEquals((-1), node0.getLineno());
467:       assertFalse(node0.isContinue());
468:       assertFalse(node0.isFor());
469:       assertFalse(node0.hasMoreThanOneChild());
470:       assertFalse(node0.isInc());
471:       assertFalse(node0.isIn());
472:       assertEquals(49, Node.DIRECT_EVAL);
473:       assertEquals(30, Node.VAR_ARGS_NAME);
474:       assertEquals(51, Node.STATIC_SOURCE_FILE);
475:       assertEquals(1, Node.DECR_FLAG);
476:       assertEquals(32, Node.INCRDECR_PROP);
477:       assertEquals(46, Node.IS_NAMESPACE);
478:       assertEquals(12, Node.COLUMN_BITS);
479:       assertEquals(54, Node.SLASH_V);
480:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
481:       assertEquals(52, Node.LENGTH);
482:       assertEquals(15, Node.NO_SIDE_EFFECTS);
483:       assertEquals(29, Node.JSDOC_INFO_PROP);
484:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
485:       assertEquals(40, Node.ORIGINALNAME_PROP);
486:       assertEquals(50, Node.FREE_CALL);
487:       assertEquals(41, Node.BRACELESS_TYPE);
488:       assertEquals(47, Node.IS_DISPATCHER);
489:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
490:       assertEquals(2, Node.POST_FLAG);
491:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
492:       assertEquals(16, Node.SOURCENAME_PROP);
493:       assertEquals(43, Node.IS_CONSTANT_NAME);
494:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
495:       assertEquals(35, Node.PARENTHESIZED_PROP);
496:       assertEquals(8, Node.FLAG_NO_THROWS);
497:       assertEquals(39, Node.EMPTY_BLOCK);
498:       assertEquals(53, Node.INPUT_ID);
499:       assertEquals(36, Node.QUOTED_PROP);
500:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
501:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
502:       assertEquals(37, Node.OPT_ARG_NAME);
503:       assertEquals(48, Node.DIRECTIVES);
504:       assertEquals(54, Node.LAST_PROP);
505:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
506:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
507:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
508:       assertEquals(4095, Node.COLUMN_MASK);
509:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
510:       assertNotSame(node0, node1);
511:       
512:       Iterable<Node> iterable1 = node0.children();
513:       assertNotNull(iterable1);
514:       assertFalse(iterable1.contains(node1));
515:       assertFalse(node0.equals((Object)node1));
516:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
517:       assertEquals(0, vector0.size());
518:       assertEquals("[]", vector0.toString());
519:       assertEquals(10, vector0.capacity());
520:       assertTrue(vector0.isEmpty());
521:       assertFalse(node0.isGetProp());
522:       assertFalse(node0.isComma());
523:       assertFalse(node0.isThis());
524:       assertFalse(node0.isBreak());
525:       assertFalse(node0.isThrow());
526:       assertFalse(node0.isHook());
527:       assertFalse(node0.isInstanceOf());
528:       assertFalse(node0.isFalse());
529:       assertFalse(node0.isWith());
530:       assertEquals((-1), node0.getCharno());
531:       assertFalse(node0.isScript());
532:       assertFalse(node0.hasOneChild());
533:       assertFalse(node0.isSwitch());
534:       assertFalse(node0.isAnd());
535:       assertFalse(node0.isObjectLit());
536:       assertFalse(node0.isCase());
537:       assertEquals((-1), node0.getSourcePosition());
538:       assertFalse(node0.isString());
539:       assertFalse(node0.isNot());
540:       assertTrue(node0.isParamList());
541:       assertFalse(node0.isNumber());
542:       assertFalse(node0.isFromExterns());
543:       assertFalse(node0.isLabel());
544:       assertFalse(node0.isReturn());
545:       assertFalse(node0.isDelProp());
546:       assertFalse(node0.isAssignAdd());
547:       assertFalse(node0.isLabelName());
548:       assertFalse(node0.isArrayLit());
549:       assertFalse(node0.isGetElem());
550:       assertFalse(node0.hasChildren());
551:       assertFalse(node0.isDec());
552:       assertFalse(node0.isAssign());
553:       assertFalse(node0.isTypeOf());
554:       assertFalse(node0.isVoid());
555:       assertFalse(node0.isNew());
556:       assertFalse(node0.isAdd());
557:       assertFalse(node0.isTrue());
558:       assertFalse(node0.isExprResult());
559:       assertFalse(node0.isDefaultCase());
560:       assertFalse(node0.isDo());
561:       assertFalse(node0.isEmpty());
562:       assertNull(node0.getSourceFileName());
563:       assertFalse(node0.isOr());
564:       assertEquals(83, node0.getType());
565:       assertFalse(node0.isSetterDef());
566:       assertFalse(node0.isNull());
567:       assertFalse(node0.isName());
568:       assertFalse(node0.isCatch());
569:       assertFalse(node0.isVar());
570:       assertFalse(node0.isCall());
571:       assertEquals(0, node0.getChildCount());
572:       assertFalse(node0.isRegExp());
573:       assertFalse(node0.isFunction());
574:       assertFalse(node0.isDebugger());
575:       assertFalse(node0.isBlock());
576:       assertFalse(node0.isWhile());
577:       assertFalse(node0.isTry());
578:       assertFalse(node0.isStringKey());
579:       assertEquals((-1), node0.getSourceOffset());
580:       assertFalse(node0.isGetterDef());
581:       assertFalse(node0.isNE());
582:       assertFalse(node0.isIf());
583:       assertEquals((-1), node0.getLineno());
584:       assertFalse(node0.isContinue());
585:       assertFalse(node0.isFor());
586:       assertFalse(node0.hasMoreThanOneChild());
587:       assertFalse(node0.isInc());
588:       assertFalse(node0.isIn());
589:       assertEquals(49, Node.DIRECT_EVAL);
590:       assertEquals(30, Node.VAR_ARGS_NAME);
591:       assertEquals(51, Node.STATIC_SOURCE_FILE);
592:       assertEquals(1, Node.DECR_FLAG);
593:       assertEquals(32, Node.INCRDECR_PROP);
594:       assertEquals(46, Node.IS_NAMESPACE);
595:       assertEquals(12, Node.COLUMN_BITS);
596:       assertEquals(54, Node.SLASH_V);
597:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
598:       assertEquals(52, Node.LENGTH);
599:       assertEquals(15, Node.NO_SIDE_EFFECTS);
600:       assertEquals(29, Node.JSDOC_INFO_PROP);
601:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
602:       assertEquals(40, Node.ORIGINALNAME_PROP);
603:       assertEquals(50, Node.FREE_CALL);
604:       assertEquals(41, Node.BRACELESS_TYPE);
605:       assertEquals(47, Node.IS_DISPATCHER);
606:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
607:       assertEquals(2, Node.POST_FLAG);
608:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
609:       assertEquals(16, Node.SOURCENAME_PROP);
610:       assertEquals(43, Node.IS_CONSTANT_NAME);
611:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
612:       assertEquals(35, Node.PARENTHESIZED_PROP);
613:       assertEquals(8, Node.FLAG_NO_THROWS);
614:       assertEquals(39, Node.EMPTY_BLOCK);
615:       assertEquals(53, Node.INPUT_ID);
616:       assertEquals(36, Node.QUOTED_PROP);
617:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
618:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
619:       assertEquals(37, Node.OPT_ARG_NAME);
620:       assertEquals(48, Node.DIRECTIVES);
621:       assertEquals(54, Node.LAST_PROP);
622:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
623:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
624:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
625:       assertEquals(4095, Node.COLUMN_MASK);
626:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
627:       assertNotSame(node0, node1);
628:       assertSame(iterable1, iterable0);
629:       
630:       boolean boolean0 = NodeUtil.containsFunction(node0);
631:       assertFalse(node0.equals((Object)node1));
632:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
633:       assertEquals(0, vector0.size());
634:       assertEquals("[]", vector0.toString());
635:       assertEquals(10, vector0.capacity());
636:       assertTrue(vector0.isEmpty());
637:       assertFalse(node0.isGetProp());
638:       assertFalse(node0.isComma());
639:       assertFalse(node0.isThis());
640:       assertFalse(node0.isBreak());
641:       assertFalse(node0.isThrow());
642:       assertFalse(node0.isHook());
643:       assertFalse(node0.isInstanceOf());
644:       assertFalse(node0.isFalse());
645:       assertFalse(node0.isWith());
646:       assertEquals((-1), node0.getCharno());
647:       assertFalse(node0.isScript());
648:       assertFalse(node0.hasOneChild());
649:       assertFalse(node0.isSwitch());
650:       assertFalse(node0.isAnd());
651:       assertFalse(node0.isObjectLit());
652:       assertFalse(node0.isCase());
653:       assertEquals((-1), node0.getSourcePosition());
654:       assertFalse(node0.isString());
655:       assertFalse(node0.isNot());
656:       assertTrue(node0.isParamList());
657:       assertFalse(node0.isNumber());
658:       assertFalse(node0.isFromExterns());
659:       assertFalse(node0.isLabel());
660:       assertFalse(node0.isReturn());
661:       assertFalse(node0.isDelProp());
662:       assertFalse(node0.isAssignAdd());
663:       assertFalse(node0.isLabelName());
664:       assertFalse(node0.isArrayLit());
665:       assertFalse(node0.isGetElem());
666:       assertFalse(node0.hasChildren());
667:       assertFalse(node0.isDec());
668:       assertFalse(node0.isAssign());
669:       assertFalse(node0.isTypeOf());
670:       assertFalse(node0.isVoid());
671:       assertFalse(node0.isNew());
672:       assertFalse(node0.isAdd());
673:       assertFalse(node0.isTrue());
674:       assertFalse(node0.isExprResult());
675:       assertFalse(node0.isDefaultCase());
676:       assertFalse(node0.isDo());
677:       assertFalse(node0.isEmpty());
678:       assertNull(node0.getSourceFileName());
679:       assertFalse(node0.isOr());
680:       assertEquals(83, node0.getType());
681:       assertFalse(node0.isSetterDef());
682:       assertFalse(node0.isNull());
683:       assertFalse(node0.isName());
684:       assertFalse(node0.isCatch());
685:       assertFalse(node0.isVar());
686:       assertFalse(node0.isCall());
687:       assertEquals(0, node0.getChildCount());
688:       assertFalse(node0.isRegExp());
689:       assertFalse(node0.isFunction());
690:       assertFalse(node0.isDebugger());
691:       assertFalse(node0.isBlock());
692:       assertFalse(node0.isWhile());
693:       assertFalse(node0.isTry());
694:       assertFalse(node0.isStringKey());
695:       assertEquals((-1), node0.getSourceOffset());
696:       assertFalse(node0.isGetterDef());
697:       assertFalse(node0.isNE());
698:       assertFalse(node0.isIf());
699:       assertEquals((-1), node0.getLineno());
700:       assertFalse(node0.isContinue());
701:       assertFalse(node0.isFor());
702:       assertFalse(node0.hasMoreThanOneChild());
703:       assertFalse(node0.isInc());
704:       assertFalse(node0.isIn());
705:       assertFalse(boolean0);
706:       assertEquals(49, Node.DIRECT_EVAL);
707:       assertEquals(30, Node.VAR_ARGS_NAME);
708:       assertEquals(51, Node.STATIC_SOURCE_FILE);
709:       assertEquals(1, Node.DECR_FLAG);
710:       assertEquals(32, Node.INCRDECR_PROP);
711:       assertEquals(46, Node.IS_NAMESPACE);
712:       assertEquals(12, Node.COLUMN_BITS);
713:       assertEquals(54, Node.SLASH_V);
714:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
715:       assertEquals(52, Node.LENGTH);
716:       assertEquals(15, Node.NO_SIDE_EFFECTS);
717:       assertEquals(29, Node.JSDOC_INFO_PROP);
718:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
719:       assertEquals(40, Node.ORIGINALNAME_PROP);
720:       assertEquals(50, Node.FREE_CALL);
721:       assertEquals(41, Node.BRACELESS_TYPE);
722:       assertEquals(47, Node.IS_DISPATCHER);
723:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
724:       assertEquals(2, Node.POST_FLAG);
725:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
726:       assertEquals(16, Node.SOURCENAME_PROP);
727:       assertEquals(43, Node.IS_CONSTANT_NAME);
728:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
729:       assertEquals(35, Node.PARENTHESIZED_PROP);
730:       assertEquals(8, Node.FLAG_NO_THROWS);
731:       assertEquals(39, Node.EMPTY_BLOCK);
732:       assertEquals(53, Node.INPUT_ID);
733:       assertEquals(36, Node.QUOTED_PROP);
734:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
735:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
736:       assertEquals(37, Node.OPT_ARG_NAME);
737:       assertEquals(48, Node.DIRECTIVES);
738:       assertEquals(54, Node.LAST_PROP);
739:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
740:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
741:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
742:       assertEquals(4095, Node.COLUMN_MASK);
743:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
744:       assertNotSame(node0, node1);
745:       
746:       Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
747:       assertNotNull(node2);
748:       assertFalse(node2.equals((Object)node1));
749:       assertFalse(node2.equals((Object)node0));
750:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
751:       assertEquals(0, vector0.size());
752:       assertEquals("[]", vector0.toString());
753:       assertEquals(10, vector0.capacity());
754:       assertTrue(vector0.isEmpty());
755:       assertFalse(node2.isSetterDef());
756:       assertFalse(node2.isNull());
757:       assertFalse(node2.isName());
758:       assertFalse(node2.isVar());
759:       assertFalse(node2.isCatch());
760:       assertFalse(node2.isCall());
761:       assertFalse(node2.isBlock());
762:       assertEquals(0, node2.getChildCount());
763:       assertFalse(node2.isFunction());
764:       assertFalse(node2.isWhile());
765:       assertFalse(node2.isTry());
766:       assertFalse(node2.isArrayLit());
767:       assertFalse(node2.isStringKey());
768:       assertFalse(node2.isGetterDef());
769:       assertFalse(node2.isDebugger());
770:       assertFalse(node2.isTypeOf());
771:       assertFalse(node2.isAssignAdd());
772:       assertFalse(node2.isEmpty());
773:       assertFalse(node2.isLabelName());
774:       assertFalse(node2.isDelProp());
775:       assertFalse(node2.isGetElem());
776:       assertFalse(node2.isFromExterns());
777:       assertFalse(node2.isLabel());
778:       assertFalse(node2.isAssign());
779:       assertFalse(node2.isReturn());
780:       assertFalse(node2.hasChildren());
781:       assertFalse(node2.isDec());
782:       assertFalse(node2.isTrue());
783:       assertFalse(node2.isExprResult());
784:       assertFalse(node2.isDefaultCase());
785:       assertFalse(node2.isDo());
786:       assertFalse(node2.isAdd());
787:       assertFalse(node2.isVoid());
788:       assertFalse(node2.isNew());
789:       assertNull(node2.getSourceFileName());
790:       assertFalse(node2.isOr());
791:       assertFalse(node2.isComma());
792:       assertEquals(83, node2.getType());
793:       assertFalse(node2.isThis());
794:       assertFalse(node2.isGetProp());
795:       assertFalse(node2.isBreak());
796:       assertFalse(node2.isInstanceOf());
797:       assertFalse(node2.isFalse());
798:       assertFalse(node2.isThrow());
799:       assertFalse(node2.isWith());
800:       assertFalse(node2.isHook());
801:       assertFalse(node2.isSwitch());
802:       assertFalse(node2.isScript());
803:       assertFalse(node2.isString());
804:       assertFalse(node2.hasOneChild());
805:       assertFalse(node2.isCase());
806:       assertFalse(node2.isObjectLit());
807:       assertTrue(node2.isParamList());
808:       assertFalse(node2.isAnd());
809:       assertFalse(node2.isNot());
810:       assertEquals((-1), node2.getSourcePosition());
811:       assertEquals((-1), node2.getCharno());
812:       assertFalse(node2.isNE());
813:       assertFalse(node2.isIf());
814:       assertFalse(node2.isNumber());
815:       assertEquals((-1), node2.getSourceOffset());
816:       assertEquals((-1), node2.getLineno());
817:       assertFalse(node2.hasMoreThanOneChild());
818:       assertFalse(node2.isContinue());
819:       assertFalse(node2.isFor());
820:       assertFalse(node2.isInc());
821:       assertFalse(node2.isRegExp());
822:       assertFalse(node2.isIn());
823:       assertEquals(51, Node.STATIC_SOURCE_FILE);
824:       assertEquals(46, Node.IS_NAMESPACE);
825:       assertEquals(12, Node.COLUMN_BITS);
826:       assertEquals(49, Node.DIRECT_EVAL);
827:       assertEquals(1, Node.DECR_FLAG);
828:       assertEquals(32, Node.INCRDECR_PROP);
829:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
830:       assertEquals(15, Node.NO_SIDE_EFFECTS);
831:       assertEquals(54, Node.SLASH_V);
832:       assertEquals(29, Node.JSDOC_INFO_PROP);
833:       assertEquals(52, Node.LENGTH);
834:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
835:       assertEquals(41, Node.BRACELESS_TYPE);
836:       assertEquals(40, Node.ORIGINALNAME_PROP);
837:       assertEquals(2, Node.POST_FLAG);
838:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
839:       assertEquals(47, Node.IS_DISPATCHER);
840:       assertEquals(30, Node.VAR_ARGS_NAME);
841:       assertEquals(4095, Node.COLUMN_MASK);
842:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
843:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
844:       assertEquals(48, Node.DIRECTIVES);
845:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
846:       assertEquals(43, Node.IS_CONSTANT_NAME);
847:       assertEquals(36, Node.QUOTED_PROP);
848:       assertEquals(35, Node.PARENTHESIZED_PROP);
849:       assertEquals(16, Node.SOURCENAME_PROP);
850:       assertEquals(39, Node.EMPTY_BLOCK);
851:       assertEquals(53, Node.INPUT_ID);
852:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
853:       assertEquals(50, Node.FREE_CALL);
854:       assertEquals(8, Node.FLAG_NO_THROWS);
855:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
856:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
857:       assertEquals(37, Node.OPT_ARG_NAME);
858:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
859:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
860:       assertEquals(54, Node.LAST_PROP);
861:       assertNotSame(node2, node1);
862:       assertNotSame(node2, node0);
863:       
864:       Stack<CompilerOptions.TracerMode> stack0 = new Stack<CompilerOptions.TracerMode>();
865:       assertNotNull(stack0);
866:       assertTrue(stack0.empty());
867:       assertTrue(stack0.isEmpty());
868:       assertEquals(10, stack0.capacity());
869:       assertEquals("[]", stack0.toString());
870:       assertEquals(0, stack0.size());
871:       
872:       boolean boolean1 = NodeUtil.isSimpleOperatorType(33);
873:       assertFalse(boolean1 == boolean0);
874:       assertTrue(boolean1);
875:       
876:       StaticSourceFile staticSourceFile0 = NodeUtil.getSourceFile(node0);
877:       assertNull(staticSourceFile0);
878:       assertFalse(node0.equals((Object)node2));
879:       assertFalse(node0.equals((Object)node1));
880:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
881:       assertEquals(0, vector0.size());
882:       assertEquals("[]", vector0.toString());
883:       assertEquals(10, vector0.capacity());
884:       assertTrue(vector0.isEmpty());
885:       assertFalse(node0.isGetProp());
886:       assertFalse(node0.isComma());
887:       assertFalse(node0.isThis());
888:       assertFalse(node0.isBreak());
889:       assertFalse(node0.isThrow());
890:       assertFalse(node0.isHook());
891:       assertFalse(node0.isInstanceOf());
892:       assertFalse(node0.isFalse());
893:       assertFalse(node0.isWith());
894:       assertEquals((-1), node0.getCharno());
895:       assertFalse(node0.isScript());
896:       assertFalse(node0.hasOneChild());
897:       assertFalse(node0.isSwitch());
898:       assertFalse(node0.isAnd());
899:       assertFalse(node0.isObjectLit());
900:       assertFalse(node0.isCase());
901:       assertEquals((-1), node0.getSourcePosition());
902:       assertFalse(node0.isString());
903:       assertFalse(node0.isNot());
904:       assertTrue(node0.isParamList());
905:       assertFalse(node0.isNumber());
906:       assertFalse(node0.isFromExterns());
907:       assertFalse(node0.isLabel());
908:       assertFalse(node0.isReturn());
909:       assertFalse(node0.isDelProp());
910:       assertFalse(node0.isAssignAdd());
911:       assertFalse(node0.isLabelName());
912:       assertFalse(node0.isArrayLit());
913:       assertFalse(node0.isGetElem());
914:       assertFalse(node0.hasChildren());
915:       assertFalse(node0.isDec());
916:       assertFalse(node0.isAssign());
917:       assertFalse(node0.isTypeOf());
918:       assertFalse(node0.isVoid());
919:       assertFalse(node0.isNew());
920:       assertFalse(node0.isAdd());
921:       assertFalse(node0.isTrue());
922:       assertFalse(node0.isExprResult());
923:       assertFalse(node0.isDefaultCase());
924:       assertFalse(node0.isDo());
925:       assertFalse(node0.isEmpty());
926:       assertNull(node0.getSourceFileName());
927:       assertFalse(node0.isOr());
928:       assertEquals(83, node0.getType());
929:       assertFalse(node0.isSetterDef());
930:       assertFalse(node0.isNull());
931:       assertFalse(node0.isName());
932:       assertFalse(node0.isCatch());
933:       assertFalse(node0.isVar());
934:       assertFalse(node0.isCall());
935:       assertEquals(0, node0.getChildCount());
936:       assertFalse(node0.isRegExp());
937:       assertFalse(node0.isFunction());
938:       assertFalse(node0.isDebugger());
939:       assertFalse(node0.isBlock());
940:       assertFalse(node0.isWhile());
941:       assertFalse(node0.isTry());
942:       assertFalse(node0.isStringKey());
943:       assertEquals((-1), node0.getSourceOffset());
944:       assertFalse(node0.isGetterDef());
945:       assertFalse(node0.isNE());
946:       assertFalse(node0.isIf());
947:       assertEquals((-1), node0.getLineno());
948:       assertFalse(node0.isContinue());
949:       assertFalse(node0.isFor());
950:       assertFalse(node0.hasMoreThanOneChild());
951:       assertFalse(node0.isInc());
952:       assertFalse(node0.isIn());
953:       assertEquals(49, Node.DIRECT_EVAL);
954:       assertEquals(30, Node.VAR_ARGS_NAME);
955:       assertEquals(51, Node.STATIC_SOURCE_FILE);
956:       assertEquals(1, Node.DECR_FLAG);
957:       assertEquals(32, Node.INCRDECR_PROP);
958:       assertEquals(46, Node.IS_NAMESPACE);
959:       assertEquals(12, Node.COLUMN_BITS);
960:       assertEquals(54, Node.SLASH_V);
961:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
962:       assertEquals(52, Node.LENGTH);
963:       assertEquals(15, Node.NO_SIDE_EFFECTS);
964:       assertEquals(29, Node.JSDOC_INFO_PROP);
965:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
966:       assertEquals(40, Node.ORIGINALNAME_PROP);
967:       assertEquals(50, Node.FREE_CALL);
968:       assertEquals(41, Node.BRACELESS_TYPE);
969:       assertEquals(47, Node.IS_DISPATCHER);
970:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
971:       assertEquals(2, Node.POST_FLAG);
972:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
973:       assertEquals(16, Node.SOURCENAME_PROP);
974:       assertEquals(43, Node.IS_CONSTANT_NAME);
975:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
976:       assertEquals(35, Node.PARENTHESIZED_PROP);
977:       assertEquals(8, Node.FLAG_NO_THROWS);
978:       assertEquals(39, Node.EMPTY_BLOCK);
979:       assertEquals(53, Node.INPUT_ID);
980:       assertEquals(36, Node.QUOTED_PROP);
981:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
982:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
983:       assertEquals(37, Node.OPT_ARG_NAME);
984:       assertEquals(48, Node.DIRECTIVES);
985:       assertEquals(54, Node.LAST_PROP);
986:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
987:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
988:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
989:       assertEquals(4095, Node.COLUMN_MASK);
990:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
991:       assertNotSame(node0, node2);
992:       assertNotSame(node0, node1);
993:       
994:       String string0 = NodeUtil.opToStr(85);
995:       assertNull(string0);
996:   }
997: }
RegularFileObject[/tmp/EvoSuite_122_1566407452953/com/google/javascript/jscomp/NodeUtil_122_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Aug 21 17:10:53 GMT 2019
5:  */
6: 
7: package com.google.javascript.jscomp;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NodeUtil_122_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.jscomp.NodeUtil"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/rq3/botsing-integration-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NodeUtil_122_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.common.collect.ArrayListMultimap",
82:       "com.google.javascript.jscomp.Tracer$1",
83:       "com.google.common.collect.Collections2",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.jscomp.NodeTraversal$Callback",
86:       "com.google.javascript.rhino.head.jdk13.VMBridge_jdk13",
87:       "com.google.javascript.jscomp.CheckSideEffects",
88:       "com.google.javascript.rhino.head.ast.Yield",
89:       "com.google.javascript.jscomp.SimpleDefinitionFinder",
90:       "com.google.javascript.jscomp.Scope$Arguments",
91:       "com.google.javascript.jscomp.graph.Graph",
92:       "com.google.javascript.rhino.jstype.StaticScope",
93:       "com.google.javascript.rhino.jstype.InstanceObjectType",
94:       "com.google.javascript.jscomp.graph.Annotatable",
95:       "com.google.common.collect.AbstractMapBasedMultiset$1",
96:       "com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher",
97:       "com.google.javascript.jscomp.JSModule",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.ImmutableSet$ArrayImmutableSet",
100:       "com.google.javascript.rhino.JSDocInfo$Marker",
101:       "com.google.common.collect.RegularImmutableMap",
102:       "com.google.javascript.rhino.Node$NodeMismatch",
103:       "com.google.javascript.rhino.jstype.RecordType",
104:       "com.google.javascript.rhino.head.ast.Jump",
105:       "com.google.javascript.jscomp.Tracer",
106:       "com.google.javascript.jscomp.HotSwapCompilerPass",
107:       "com.google.javascript.jscomp.SourceFile$Builder",
108:       "com.google.javascript.jscomp.CodingConvention$SubclassType",
109:       "com.google.javascript.rhino.jstype.JSType$1",
110:       "com.google.javascript.rhino.jstype.JSType$2",
111:       "com.google.javascript.jscomp.CodingConvention",
112:       "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
113:       "com.google.javascript.jscomp.SourceMap$DetailLevel",
114:       "com.google.javascript.jscomp.MemoizedScopeCreator",
115:       "com.google.javascript.rhino.head.ast.EmptyStatement",
116:       "com.google.javascript.jscomp.CompilerOptions$1",
117:       "com.google.javascript.jscomp.SourceExcerptProvider$1",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.jscomp.CheckAccessControls",
120:       "com.google.javascript.jscomp.CheckDebuggerStatement",
121:       "com.google.common.collect.SingletonImmutableMap",
122:       "com.google.javascript.jscomp.ReplaceIdGenerators",
123:       "com.google.javascript.jscomp.CleanupPasses",
124:       "com.google.javascript.rhino.head.ast.XmlFragment",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.javascript.jscomp.graph.FixedPointGraphTraversal$EdgeCallback",
127:       "com.google.javascript.jscomp.CompilerOptions$Reach",
128:       "com.google.javascript.jscomp.PassConfig$State",
129:       "com.google.javascript.rhino.head.ast.CatchClause",
130:       "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.common.collect.RegularImmutableMap$LinkedEntry",
133:       "com.google.common.collect.Lists$Partition",
134:       "com.google.javascript.rhino.head.ast.AstRoot",
135:       "com.google.javascript.rhino.head.ast.NewExpression",
136:       "com.google.common.collect.Count",
137:       "com.google.javascript.rhino.ErrorReporter",
138:       "com.google.javascript.rhino.jstype.ValueType",
139:       "com.google.javascript.rhino.Token",
140:       "com.google.javascript.rhino.head.ast.ParenthesizedExpression",
141:       "com.google.javascript.rhino.jstype.BooleanType",
142:       "com.google.javascript.jscomp.CssRenamingMap",
143:       "com.google.javascript.rhino.head.Context$ClassShutterSetter",
144:       "com.google.common.base.CharMatcher$5",
145:       "com.google.common.base.CharMatcher$4",
146:       "com.google.common.base.CharMatcher$3",
147:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$ContextualRenamer",
148:       "com.google.common.base.CharMatcher$2",
149:       "com.google.common.base.CharMatcher$9",
150:       "com.google.common.base.CharMatcher$8",
151:       "com.google.common.base.CharMatcher$7",
152:       "com.google.javascript.rhino.head.ast.Label",
153:       "com.google.common.base.CharMatcher$6",
154:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
155:       "com.google.javascript.jscomp.SuppressDocWarningsGuard",
156:       "com.google.javascript.jscomp.MessageFormatter",
157:       "com.google.javascript.rhino.JSDocInfo",
158:       "com.google.javascript.jscomp.SourceExcerptProvider$ExcerptFormatter",
159:       "com.google.common.base.CharMatcher$1",
160:       "com.google.javascript.jscomp.parsing.Config",
161:       "com.google.common.collect.EmptyImmutableList",
162:       "com.google.common.collect.ImmutableEntry",
163:       "com.google.javascript.rhino.head.CompilerEnvirons",
164:       "com.google.common.base.Joiner$1",
165:       "com.google.common.base.Joiner$2",
166:       "com.google.javascript.jscomp.ErrorHandler",
167:       "com.google.javascript.rhino.head.Callable",
168:       "com.google.javascript.jscomp.GoogleCodingConvention",
169:       "com.google.javascript.jscomp.SourceFile$Preloaded",
170:       "com.google.common.collect.ImmutableCollection",
171:       "com.google.javascript.rhino.ScriptRuntime",
172:       "com.google.javascript.rhino.head.ast.ScriptNode",
173:       "com.google.javascript.rhino.head.ast.XmlString",
174:       "com.google.javascript.jscomp.StrictModeCheck",
175:       "com.google.javascript.rhino.head.ast.WhileLoop",
176:       "com.google.javascript.jscomp.DefinitionsRemover$Definition",
177:       "com.google.javascript.jscomp.Result",
178:       "com.google.javascript.jscomp.CodingConventions$1",
179:       "com.google.javascript.jscomp.CodingConvention$ObjectLiteralCast",
180:       "com.google.javascript.jscomp.CodingConvention$SubclassRelationship",
181:       "com.google.javascript.jscomp.CompilerPass",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.jscomp.NodeUtil$MatchDeclaration",
184:       "com.google.javascript.jscomp.NodeUtil$VarCollector",
185:       "com.google.javascript.jscomp.VariableRenamingPolicy",
186:       "com.google.common.collect.ImmutableCollection$Builder",
187:       "com.google.javascript.rhino.head.ast.IfStatement",
188:       "com.google.javascript.jscomp.CodeChangeHandler",
189:       "com.google.common.collect.Lists$AbstractListWrapper",
190:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$Renamer",
191:       "com.google.javascript.jscomp.FunctionTypeBuilder",
192:       "com.google.javascript.jscomp.FunctionInformationMap",
193:       "com.google.common.collect.AbstractMapBasedMultiset",
194:       "com.google.javascript.jscomp.NodeUtil$MayBeStringResultPredicate",
195:       "com.google.javascript.rhino.jstype.EnumType",
196:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
197:       "com.google.javascript.jscomp.JsMessageVisitor$MalformedException",
198:       "com.google.javascript.rhino.head.Evaluator",
199:       "com.google.javascript.jscomp.CodingConventions$DefaultCodingConvention",
200:       "com.google.common.base.CharMatcher$LookupTable",
201:       "com.google.javascript.rhino.head.ast.XmlElemRef",
202:       "com.google.javascript.rhino.head.ast.VariableDeclaration",
203:       "com.google.javascript.rhino.head.TokenStream",
204:       "com.google.common.collect.RegularImmutableList$1",
205:       "com.google.javascript.rhino.head.ast.ObjectLiteral",
206:       "com.google.common.collect.Lists$2",
207:       "com.google.javascript.jscomp.JSSourceFile",
208:       "com.google.javascript.jscomp.CodingConventions",
209:       "com.google.common.collect.Lists$1",
210:       "com.google.javascript.rhino.jstype.StaticReference",
211:       "com.google.common.collect.Multiset",
212:       "com.google.javascript.rhino.head.ast.InfixExpression",
213:       "com.google.javascript.rhino.head.BaseFunction",
214:       "com.google.common.base.Supplier",
215:       "com.google.protobuf.MessageOrBuilder",
216:       "com.google.javascript.jscomp.GlobalVarReferenceMap",
217:       "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
218:       "com.google.javascript.rhino.head.ast.XmlPropRef",
219:       "com.google.javascript.jscomp.TypeValidator",
220:       "com.google.common.collect.ImmutableList",
221:       "com.google.protobuf.GeneratedMessage",
222:       "com.google.javascript.rhino.jstype.ObjectType$Property",
223:       "com.google.javascript.rhino.Node$AbstractPropListItem",
224:       "com.google.javascript.jscomp.Tracer$InternalClock",
225:       "com.google.common.collect.AbstractMultimap$KeySet",
226:       "com.google.javascript.jscomp.SourceMap$LocationMapping",
227:       "com.google.javascript.rhino.head.ast.VariableInitializer",
228:       "com.google.javascript.rhino.jstype.NoResolvedType",
229:       "com.google.javascript.rhino.head.ast.ThrowStatement",
230:       "com.google.protobuf.MessageLiteOrBuilder",
231:       "com.google.javascript.jscomp.NodeTraversal$AbstractNodeTypePruningCallback",
232:       "com.google.javascript.jscomp.DefaultPassConfig$99",
233:       "com.google.protobuf.MessageLite",
234:       "com.google.javascript.jscomp.DefaultPassConfig$98",
235:       "com.google.common.collect.Maps$EntryTransformer",
236:       "com.google.javascript.jscomp.DefaultPassConfig$95",
237:       "com.google.common.collect.Ordering",
238:       "com.google.javascript.jscomp.DefaultPassConfig$94",
239:       "com.google.javascript.jscomp.DefaultPassConfig$96",
240:       "com.google.javascript.jscomp.CustomPassExecutionTime",
241:       "com.google.javascript.jscomp.DefaultPassConfig$91",
242:       "com.google.javascript.jscomp.SyntacticScopeCreator",
243:       "com.google.javascript.jscomp.DefaultPassConfig$90",
244:       "com.google.javascript.jscomp.DefaultPassConfig$93",
245:       "com.google.javascript.jscomp.DefaultPassConfig$92",
246:       "com.google.javascript.rhino.head.debug.DebuggableScript",
247:       "com.google.javascript.jscomp.CompilerOptions$TweakProcessing",
248:       "com.google.common.collect.Hashing",
249:       "com.google.javascript.rhino.head.DefaultErrorReporter",
250:       "com.google.javascript.jscomp.SourceMap$Format",
251:       "com.google.javascript.rhino.jstype.NoType",
252:       "com.google.javascript.rhino.head.Script",
253:       "com.google.common.collect.AbstractMultimap$WrappedCollection",
254:       "com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider",
255:       "com.google.javascript.rhino.TokenStream",
256:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
257:       "com.google.javascript.jscomp.DefaultPassConfig$88",
258:       "com.google.javascript.jscomp.DefaultPassConfig$87",
259:       "com.google.javascript.jscomp.DefaultPassConfig$89",
260:       "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments",
261:       "com.google.javascript.rhino.head.ast.Comment",
262:       "com.google.javascript.jscomp.DefaultPassConfig$84",
263:       "com.google.javascript.jscomp.DefaultPassConfig$83",
264:       "com.google.javascript.jscomp.DefaultPassConfig$86",
265:       "com.google.javascript.jscomp.DefaultPassConfig$85",
266:       "com.google.javascript.jscomp.CodingConventions$Proxy",
267:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt",
268:       "com.google.javascript.jscomp.DefaultPassConfig$80",
269:       "com.google.javascript.jscomp.DefaultPassConfig$82",
270:       "com.google.javascript.jscomp.DefaultPassConfig$81",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.javascript.rhino.head.optimizer.Codegen",
273:       "com.google.javascript.rhino.head.ast.FunctionCall",
274:       "com.google.javascript.jscomp.RhinoErrorReporter$NewRhinoErrorReporter",
275:       "com.google.javascript.jscomp.NodeUtil",
276:       "com.google.common.collect.RegularImmutableSet",
277:       "com.google.javascript.jscomp.JsMessageVisitor",
278:       "com.google.javascript.jscomp.DefaultPassConfig$77",
279:       "com.google.javascript.jscomp.DefaultPassConfig$76",
280:       "com.google.javascript.jscomp.DefaultPassConfig$79",
281:       "com.google.javascript.jscomp.DefaultPassConfig$78",
282:       "com.google.javascript.jscomp.DefaultPassConfig$73",
283:       "com.google.javascript.jscomp.DefaultPassConfig$72",
284:       "com.google.javascript.rhino.head.EcmaError",
285:       "com.google.javascript.rhino.head.FunctionObject",
286:       "com.google.javascript.jscomp.DefaultPassConfig$75",
287:       "com.google.javascript.jscomp.DefaultPassConfig$74",
288:       "com.google.javascript.jscomp.DefaultPassConfig$71",
289:       "com.google.javascript.jscomp.DefaultPassConfig$70",
290:       "com.google.javascript.rhino.head.NativeContinuation",
291:       "com.google.javascript.rhino.head.xml.XMLObject",
292:       "com.google.javascript.rhino.head.Node$NodeIterator",
293:       "com.google.common.collect.ImmutableAsList",
294:       "com.google.javascript.jscomp.PassConfig",
295:       "com.google.javascript.jscomp.ConcreteType$ConcreteInstanceType",
296:       "com.google.common.collect.SingletonImmutableSet",
297:       "com.google.javascript.jscomp.AbstractMessageFormatter$Color",
298:       "com.google.javascript.jscomp.Normalize$NormalizeStatements",
299:       "com.google.javascript.jscomp.DefaultPassConfig$69",
300:       "com.google.javascript.rhino.head.InterpretedFunction",
301:       "com.google.javascript.jscomp.DefaultPassConfig$66",
302:       "com.google.javascript.jscomp.DefaultPassConfig$65",
303:       "com.google.javascript.jscomp.DefaultPassConfig$68",
304:       "com.google.javascript.jscomp.DefaultPassConfig$67",
305:       "com.google.javascript.rhino.jstype.ParameterizedType",
306:       "com.google.javascript.jscomp.DefaultPassConfig$62",
307:       "com.google.javascript.jscomp.DefaultPassConfig$61",
308:       "com.google.javascript.rhino.Node$SideEffectFlags",
309:       "com.google.javascript.jscomp.DefaultPassConfig$64",
310:       "com.google.javascript.jscomp.DefaultPassConfig$63",
311:       "com.google.javascript.jscomp.DefaultPassConfig$60",
312:       "com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceMap",
313:       "com.google.javascript.rhino.jstype.NullType",
314:       "com.google.javascript.jscomp.LightweightMessageFormatter",
315:       "com.google.common.collect.EmptyImmutableList$1",
316:       "com.google.javascript.jscomp.Compiler$CodeBuilder",
317:       "com.google.javascript.jscomp.FunctionInformationMapOrBuilder",
318:       "com.google.javascript.jscomp.DefaultPassConfig$HotSwapPassFactory",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.common.collect.AbstractIterator",
321:       "com.google.javascript.rhino.head.ScriptableObject$GetterSlot",
322:       "com.google.javascript.jscomp.BasicErrorManager$ErrorWithLevel",
323:       "com.google.common.base.CharMatcher$And",
324:       "com.google.javascript.jscomp.DiagnosticType",
325:       "com.google.javascript.jscomp.DefaultPassConfig$59",
326:       "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback$SideEffectAccumulator",
327:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler$NullAliasTransformation",
328:       "com.google.javascript.jscomp.DefaultPassConfig$58",
329:       "com.google.javascript.jscomp.graph.DiGraph$DiGraphNode",
330:       "com.google.javascript.jscomp.PrepareAst",
331:       "com.google.javascript.rhino.head.ast.ForLoop",
332:       "com.google.javascript.jscomp.DefaultPassConfig$55",
333:       "com.google.javascript.jscomp.DefaultPassConfig$54",
334:       "com.google.javascript.jscomp.DefaultPassConfig$57",
335:       "com.google.javascript.jscomp.DefaultPassConfig$56",
336:       "com.google.common.io.OutputSupplier",
337:       "com.google.javascript.jscomp.DefaultPassConfig$51",
338:       "com.google.javascript.jscomp.DefaultPassConfig$50",
339:       "com.google.javascript.jscomp.CompilerInput",
340:       "com.google.javascript.jscomp.DefaultPassConfig$53",
341:       "com.google.javascript.rhino.head.ast.FunctionNode",
342:       "com.google.javascript.jscomp.DefaultPassConfig$52",
343:       "com.google.javascript.jscomp.AbstractCompiler",
344:       "com.google.common.collect.UnmodifiableIterator",
345:       "com.google.javascript.jscomp.ExploitAssigns",
346:       "com.google.javascript.rhino.head.Context",
347:       "com.google.common.io.InputSupplier",
348:       "com.google.javascript.jscomp.DiagnosticGroup",
349:       "com.google.common.collect.ImmutableSet$TransformedImmutableSet",
350:       "com.google.common.collect.AbstractMultimap$WrappedList",
351:       "com.google.javascript.jscomp.CodeChangeHandler$RecentChange",
352:       "com.google.javascript.jscomp.NodeUtil$Visitor",
353:       "com.google.javascript.jscomp.SyntacticScopeCreator$RedeclarationHandler",
354:       "com.google.javascript.rhino.head.NativeBoolean",
355:       "com.google.javascript.jscomp.DefaultPassConfig$48",
356:       "com.google.javascript.rhino.Node$AncestorIterable",
357:       "com.google.common.collect.AbstractMultimap$RandomAccessWrappedList",
358:       "com.google.javascript.rhino.head.ast.Name",
359:       "com.google.javascript.jscomp.DefaultPassConfig$47",
360:       "com.google.common.collect.ImmutableEnumSet",
361:       "com.google.javascript.jscomp.DefaultPassConfig$49",
362:       "com.google.javascript.jscomp.DefaultPassConfig$44",
363:       "com.google.javascript.jscomp.DefaultPassConfig$43",
364:       "com.google.javascript.jscomp.DefaultPassConfig$46",
365:       "com.google.javascript.jscomp.DefaultPassConfig$45",
366:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax$1",
367:       "com.google.javascript.jscomp.DefaultPassConfig$40",
368:       "com.google.common.collect.HashMultiset",
369:       "com.google.javascript.rhino.jstype.UnresolvedTypeExpression",
370:       "com.google.javascript.jscomp.DefaultPassConfig$42",
371:       "com.google.javascript.jscomp.DefaultPassConfig$41",
372:       "com.google.protobuf.AbstractMessageLite",
373:       "com.google.javascript.jscomp.ErrorManager",
374:       "com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate",
375:       "com.google.common.collect.SingletonImmutableList",
376:       "com.google.javascript.rhino.head.ast.ConditionalExpression",
377:       "com.google.javascript.jscomp.CheckLevel",
378:       "com.google.javascript.rhino.jstype.StaticSlot",
379:       "com.google.common.collect.LinkedListMultimap",
380:       "com.google.javascript.rhino.head.ast.PropertyGet",
381:       "com.google.common.collect.AbstractSetMultimap",
382:       "com.google.javascript.rhino.head.ContextFactory",
383:       "com.google.common.base.Function",
384:       "com.google.javascript.rhino.head.VMBridge",
385:       "com.google.common.collect.ImmutableMap",
386:       "com.google.common.collect.Multiset$Entry",
387:       "com.google.javascript.jscomp.DefaultPassConfig$37",
388:       "com.google.javascript.jscomp.DefaultPassConfig$36",
389:       "com.google.javascript.jscomp.DefaultPassConfig$39",
390:       "com.google.javascript.jscomp.DefaultPassConfig$38",
391:       "com.google.javascript.jscomp.DefaultPassConfig$33",
392:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
393:       "com.google.javascript.jscomp.DefaultPassConfig$32",
394:       "com.google.javascript.jscomp.DefaultPassConfig$35",
395:       "com.google.javascript.jscomp.DefaultPassConfig$34",
396:       "com.google.javascript.rhino.head.ast.Loop",
397:       "com.google.javascript.jscomp.DefaultPassConfig$31",
398:       "com.google.javascript.jscomp.CrossModuleMethodMotion$IdGenerator",
399:       "com.google.javascript.jscomp.Region",
400:       "com.google.javascript.jscomp.DefaultPassConfig$30",
401:       "com.google.javascript.rhino.IR",
402:       "com.google.javascript.rhino.head.ast.GeneratorExpressionLoop",
403:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
404:       "com.google.javascript.jscomp.NodeTraversal$AbstractPostOrderCallback",
405:       "com.google.javascript.jscomp.DefaultPassConfig",
406:       "com.google.javascript.jscomp.Normalize",
407:       "com.google.javascript.jscomp.CompilerOptions$TracerMode",
408:       "com.google.javascript.jscomp.RhinoErrorReporter$OldRhinoErrorReporter",
409:       "com.google.javascript.jscomp.DefinitionProvider",
410:       "com.google.javascript.jscomp.NameAnalyzer$1",
411:       "com.google.common.collect.AbstractMultiset",
412:       "com.google.javascript.jscomp.DefaultPassConfig$29",
413:       "com.google.javascript.jscomp.DefaultPassConfig$26",
414:       "com.google.javascript.jscomp.DefaultPassConfig$25",
415:       "com.google.common.collect.Iterators",
416:       "com.google.javascript.jscomp.DefaultPassConfig$28",
417:       "com.google.javascript.rhino.head.IdFunctionCall",
418:       "com.google.javascript.jscomp.DefaultPassConfig$27",
419:       "com.google.javascript.jscomp.DefaultPassConfig$22",
420:       "com.google.javascript.jscomp.DefaultPassConfig$21",
421:       "com.google.javascript.jscomp.DefaultPassConfig$24",
422:       "com.google.javascript.jscomp.DefaultPassConfig$23",
423:       "com.google.javascript.jscomp.ProcessTweaks$TweakFunction",
424:       "com.google.javascript.rhino.head.ast.SwitchStatement",
425:       "com.google.javascript.jscomp.DependencyOptions",
426:       "com.google.common.collect.Multisets$EntrySet",
427:       "com.google.javascript.jscomp.DefaultPassConfig$20",
428:       "com.google.javascript.rhino.head.ast.DoLoop",
429:       "com.google.javascript.jscomp.SourceFile$OnDisk",
430:       "com.google.javascript.rhino.head.ScriptRuntime",
431:       "com.google.javascript.jscomp.DefaultPassConfig$19",
432:       "com.google.javascript.jscomp.DefaultPassConfig$18",
433:       "com.google.javascript.rhino.jstype.JSTypeNative",
434:       "com.google.javascript.rhino.jstype.AllType",
435:       "com.google.javascript.jscomp.DefaultPassConfig$15",
436:       "com.google.common.collect.Maps",
437:       "com.google.common.primitives.Ints",
438:       "com.google.javascript.jscomp.DefaultPassConfig$14",
439:       "com.google.javascript.jscomp.NodeTraversal$AbstractShallowStatementCallback",
440:       "com.google.common.collect.SetMultimap",
441:       "com.google.javascript.rhino.head.ast.ExpressionStatement",
442:       "com.google.javascript.jscomp.DefaultPassConfig$17",
443:       "com.google.javascript.jscomp.DefaultPassConfig$16",
444:       "com.google.common.collect.ImmutableSet$SerializedForm",
445:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
446:       "com.google.javascript.jscomp.DefaultPassConfig$7",
447:       "com.google.javascript.jscomp.DefaultPassConfig$11",
448:       "com.google.javascript.jscomp.DefaultPassConfig$8",
449:       "com.google.javascript.jscomp.DefaultPassConfig$10",
450:       "com.google.javascript.jscomp.DefaultPassConfig$5",
451:       "com.google.javascript.jscomp.DefaultPassConfig$13",
452:       "com.google.javascript.jscomp.DefaultPassConfig$6",
453:       "com.google.javascript.jscomp.DefaultPassConfig$12",
454:       "com.google.javascript.rhino.JSTypeExpression",
455:       "com.google.javascript.jscomp.DefaultPassConfig$9",
456:       "com.google.javascript.jscomp.PrintStreamErrorManager",
457:       "com.google.javascript.jscomp.Tracer$Stat",
458:       "com.google.javascript.rhino.head.ScriptableObject",
459:       "com.google.javascript.rhino.head.IdScriptableObject",
460:       "com.google.javascript.rhino.head.NativeFunction",
461:       "com.google.common.collect.RegularImmutableMap$Values",
462:       "com.google.javascript.jscomp.DefaultPassConfig$3",
463:       "com.google.javascript.jscomp.DefaultPassConfig$4",
464:       "com.google.javascript.jscomp.DefaultPassConfig$1",
465:       "com.google.javascript.jscomp.DefaultPassConfig$2",
466:       "com.google.javascript.rhino.head.ast.ObjectProperty",
467:       "com.google.javascript.rhino.head.Icode",
468:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
469:       "com.google.javascript.jscomp.type.ReverseAbstractInterpreter",
470:       "com.google.javascript.jscomp.CompilerOptions$LanguageMode",
471:       "com.google.javascript.rhino.head.ast.UnaryExpression",
472:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
473:       "com.google.javascript.rhino.jstype.ArrowType",
474:       "com.google.javascript.rhino.SimpleErrorReporter",
475:       "com.google.common.collect.Lists$RandomAccessPartition",
476:       "com.google.javascript.jscomp.type.FlowScope",
477:       "com.google.javascript.rhino.head.WrappedException",
478:       "com.google.javascript.jscomp.TightenTypes$ConcreteScope",
479:       "com.google.javascript.jscomp.graph.GraphNode",
480:       "com.google.javascript.rhino.jstype.NumberType",
481:       "com.google.javascript.rhino.head.debug.DebuggableObject",
482:       "com.google.javascript.rhino.head.Function",
483:       "com.google.common.collect.LinkedHashMultiset",
484:       "com.google.javascript.jscomp.PassFactory",
485:       "com.google.common.collect.Sets$2",
486:       "com.google.javascript.rhino.Node$IntPropListItem",
487:       "com.google.common.collect.Sets$3",
488:       "com.google.javascript.rhino.head.ast.LetNode",
489:       "com.google.common.collect.Sets$1",
490:       "com.google.javascript.jscomp.parsing.IRFactory$1",
491:       "com.google.common.collect.AbstractSortedSetMultimap",
492:       "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator",
493:       "com.google.javascript.jscomp.ControlFlowGraph",
494:       "com.google.javascript.jscomp.graph.GraphvizGraph",
495:       "com.google.javascript.rhino.head.ContextFactory$Listener",
496:       "com.google.javascript.rhino.head.NativeCall",
497:       "com.google.javascript.rhino.jstype.ModificationVisitor",
498:       "com.google.common.collect.AbstractMapEntry",
499:       "com.google.javascript.rhino.Node$AncestorIterable$1",
500:       "com.google.common.collect.Iterators$12",
501:       "com.google.common.collect.Iterators$11",
502:       "com.google.javascript.jscomp.ClosureCodingConvention",
503:       "com.google.common.base.Predicate",
504:       "com.google.javascript.jscomp.ReplaceIdGenerators$NameSupplier",
505:       "com.google.common.collect.AbstractMultimap$AsMap",
506:       "com.google.javascript.jscomp.ControlStructureCheck",
507:       "com.google.javascript.jscomp.VariableReferenceCheck",
508:       "com.google.javascript.jscomp.WarningsGuard",
509:       "com.google.javascript.jscomp.SourceMap",
510:       "com.google.javascript.rhino.head.ast.ForInLoop",
511:       "com.google.javascript.jscomp.Tracer$AtomicTracerStatMap",
512:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
513:       "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
514:       "com.google.common.collect.AbstractListMultimap",
515:       "com.google.javascript.jscomp.LightweightMessageFormatter$LineNumberingFormatter",
516:       "com.google.javascript.jscomp.CompilerOptions",
517:       "com.google.javascript.rhino.Node$StringNode",
518:       "com.google.javascript.rhino.jstype.TemplateType",
519:       "com.google.javascript.rhino.jstype.NamedType",
520:       "com.google.common.collect.Iterators$14",
521:       "com.google.common.collect.Iterators$13",
522:       "com.google.common.collect.Lists",
523:       "com.google.javascript.jscomp.CheckProvides",
524:       "com.google.javascript.rhino.head.ast.Block",
525:       "com.google.common.collect.UnmodifiableListIterator",
526:       "com.google.javascript.rhino.head.ast.SwitchCase",
527:       "com.google.common.io.ByteArrayDataInput",
528:       "com.google.javascript.jscomp.RhinoErrorReporter",
529:       "com.google.javascript.jscomp.CompilerOptions$AliasTransformation",
530:       "com.google.javascript.rhino.jstype.UnknownType",
531:       "com.google.common.base.Charsets",
532:       "com.google.javascript.rhino.head.ast.StringLiteral",
533:       "com.google.javascript.jscomp.CheckGlobalNames",
534:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
535:       "com.google.javascript.rhino.jstype.StaticSourceFile",
536:       "org.mozilla.classfile.ClassFileWriter$ClassFileFormatException",
537:       "com.google.javascript.rhino.head.ScriptableObject$Slot",
538:       "com.google.javascript.rhino.head.ast.ReturnStatement",
539:       "com.google.javascript.jscomp.ConcreteType$ConcreteFunctionType",
540:       "com.google.common.base.CharMatcher",
541:       "com.google.javascript.rhino.jstype.JSType$TypePair",
542:       "com.google.common.base.Joiner$MapJoiner",
543:       "com.google.javascript.jscomp.CheckRegExp",
544:       "com.google.javascript.jscomp.CheckGlobalThis",
545:       "com.google.common.collect.RegularImmutableMap$NonTerminalEntry",
546:       "com.google.common.collect.AbstractMultiset$EntrySet",
547:       "com.google.javascript.jscomp.ConcreteType$Factory",
548:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt$2",
549:       "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
550:       "com.google.common.base.Preconditions",
551:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt$1",
552:       "com.google.javascript.rhino.head.ast.ArrayLiteral",
553:       "com.google.javascript.rhino.head.ast.RegExpLiteral",
554:       "com.google.javascript.rhino.head.Token",
555:       "com.google.javascript.jscomp.BasicErrorManager",
556:       "com.google.javascript.jscomp.SourceFile$Generator",
557:       "com.google.javascript.jscomp.PerformanceTracker",
558:       "com.google.javascript.rhino.jstype.IndexedType",
559:       "com.google.javascript.jscomp.NodeUtil$MatchNodeType",
560:       "com.google.javascript.jscomp.ComposeWarningsGuard$GuardComparator",
561:       "com.google.javascript.jscomp.ProcessDefines",
562:       "com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph",
563:       "com.google.javascript.rhino.head.NativeArray",
564:       "com.google.javascript.jscomp.PeepholeFoldConstants",
565:       "com.google.javascript.rhino.Node$NumberNode",
566:       "com.google.javascript.jscomp.Scope",
567:       "com.google.common.io.ByteArrayDataOutput",
568:       "com.google.javascript.rhino.head.Parser",
569:       "com.google.common.collect.Iterators$6",
570:       "com.google.javascript.jscomp.ErrorFormat$2",
571:       "com.google.javascript.jscomp.Scope$Var",
572:       "com.google.common.collect.BiMap",
573:       "com.google.common.collect.Iterators$7",
574:       "com.google.javascript.jscomp.ErrorFormat$3",
575:       "com.google.javascript.rhino.head.NativeString",
576:       "com.google.javascript.jscomp.ErrorFormat$4",
577:       "com.google.javascript.rhino.head.ast.XmlRef",
578:       "com.google.common.collect.ImmutableSet",
579:       "com.google.common.collect.SortedSetMultimap",
580:       "com.google.javascript.jscomp.PeepholeReplaceKnownMethods",
581:       "com.google.javascript.jscomp.AbstractPeepholeOptimization",
582:       "com.google.javascript.rhino.jstype.JSTypeRegistry$ResolveMode",
583:       "com.google.javascript.rhino.head.ast.ElementGet",
584:       "com.google.common.collect.Iterators$1",
585:       "com.google.javascript.jscomp.DisambiguateProperties$Warnings",
586:       "com.google.common.collect.Iterators$2",
587:       "com.google.common.collect.Iterators$3",
588:       "com.google.javascript.jscomp.parsing.Annotation",
589:       "com.google.javascript.jscomp.AbstractMessageFormatter",
590:       "com.google.javascript.jscomp.DefinitionSite",
591:       "com.google.common.collect.Lists$StringAsImmutableList",
592:       "com.google.javascript.rhino.head.JavaScriptException",
593:       "com.google.javascript.rhino.head.ast.IdeErrorReporter",
594:       "com.google.javascript.jscomp.ProcessTweaks",
595:       "com.google.javascript.jscomp.NodeUtil$1",
596:       "com.google.javascript.rhino.head.ast.TryStatement",
597:       "com.google.javascript.jscomp.parsing.IRFactory",
598:       "com.google.javascript.jscomp.ErrorFormat$1",
599:       "com.google.javascript.rhino.head.TopLevel",
600:       "com.google.javascript.jscomp.Compiler$3",
601:       "com.google.javascript.jscomp.PrepareAst$PrepareAnnotations",
602:       "com.google.javascript.jscomp.NameAnalyzer",
603:       "com.google.javascript.jscomp.Scope$1",
604:       "com.google.common.collect.AbstractMultimap",
605:       "com.google.common.base.Predicates$ObjectPredicate$1",
606:       "com.google.common.collect.EmptyImmutableSet",
607:       "com.google.javascript.jscomp.UseSite",
608:       "com.google.common.io.Files",
609:       "com.google.javascript.jscomp.NodeUtil$MatchNotFunction",
610:       "com.google.javascript.jscomp.LinkedFlowScope$FlatFlowScopeCache",
611:       "com.google.javascript.jscomp.parsing.Config$LanguageMode",
612:       "com.google.javascript.rhino.head.ast.ArrayComprehension",
613:       "com.google.javascript.jscomp.OptimizeCalls$CallGraphCompilerPass",
614:       "com.google.javascript.jscomp.CodingConvention$Bind",
615:       "com.google.protobuf.AbstractMessage",
616:       "com.google.javascript.rhino.head.ScriptRuntime$1",
617:       "com.google.javascript.jscomp.PassFactory$1",
618:       "com.google.javascript.rhino.head.ObjToIntMap",
619:       "com.google.javascript.jscomp.PeepholeRemoveDeadCode",
620:       "com.google.common.collect.ImmutableMap$Builder",
621:       "com.google.javascript.rhino.head.ConstProperties",
622:       "com.google.javascript.jscomp.deps.SortedDependencies$MissingProvideException",
623:       "com.google.common.base.Predicates$ObjectPredicate$4",
624:       "com.google.javascript.jscomp.ReorderConstantExpression",
625:       "com.google.common.base.Predicates$ObjectPredicate$3",
626:       "com.google.javascript.jscomp.LinkedFlowScope",
627:       "com.google.common.base.Predicates$ObjectPredicate$2",
628:       "com.google.javascript.jscomp.NodeUtil$MatchNameNode",
629:       "com.google.common.collect.LinkedListMultimap$Node",
630:       "com.google.common.collect.ListMultimap",
631:       "com.google.javascript.rhino.JSDocInfo$Visibility",
632:       "com.google.javascript.rhino.head.ast.DestructuringForm",
633:       "com.google.javascript.jscomp.SourceMap$Format$4",
634:       "com.google.javascript.jscomp.SourceMap$Format$3",
635:       "com.google.javascript.jscomp.SourceMap$Format$2",
636:       "com.google.javascript.jscomp.SourceMap$Format$1",
637:       "com.google.javascript.jscomp.SourceAst",
638:       "com.google.common.base.Predicates$ObjectPredicate",
639:       "com.google.javascript.rhino.jstype.TernaryValue$1",
640:       "com.google.common.collect.RegularImmutableList",
641:       "com.google.javascript.jscomp.MessageBundle",
642:       "com.google.javascript.rhino.jstype.TernaryValue$3",
643:       "com.google.javascript.rhino.jstype.TernaryValue$2",
644:       "com.google.javascript.jscomp.CheckUnreachableCode",
645:       "com.google.javascript.jscomp.SourceExcerptProvider",
646:       "com.google.common.collect.Lists$TransformingRandomAccessList",
647:       "com.google.javascript.rhino.head.ScriptableObject$RelinkedSlot",
648:       "com.google.javascript.jscomp.ReferenceCollectingCallback$Behavior",
649:       "com.google.javascript.rhino.Node$PropListItem",
650:       "com.google.common.collect.RegularImmutableMap$KeySet",
651:       "com.google.common.collect.Maps$KeySet",
652:       "com.google.javascript.rhino.Node",
653:       "com.google.javascript.rhino.head.RhinoException",
654:       "com.google.javascript.rhino.head.ast.EmptyExpression",
655:       "com.google.javascript.rhino.SourcePosition",
656:       "com.google.javascript.rhino.head.ast.XmlLiteral",
657:       "com.google.javascript.rhino.head.ast.ContinueStatement",
658:       "com.google.javascript.jscomp.LoggerErrorManager",
659:       "com.google.javascript.jscomp.ComposeWarningsGuard",
660:       "com.google.javascript.jscomp.NodeTraversal",
661:       "com.google.javascript.rhino.head.ErrorReporter",
662:       "com.google.javascript.jscomp.NodeTraversal$AbstractScopedCallback",
663:       "com.google.common.collect.Multisets",
664:       "com.google.javascript.jscomp.VariableMap",
665:       "com.google.javascript.jscomp.JsAst",
666:       "com.google.javascript.rhino.head.ast.XmlMemberGet",
667:       "com.google.javascript.jscomp.ErrorFormat",
668:       "com.google.javascript.rhino.head.ast.Scope",
669:       "com.google.javascript.jscomp.AbstractCompiler$LifeCycleStage",
670:       "com.google.javascript.jscomp.ConcreteType",
671:       "com.google.javascript.rhino.head.Scriptable",
672:       "com.google.javascript.jscomp.JqueryCodingConvention",
673:       "com.google.common.io.ByteStreams",
674:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
675:       "com.google.javascript.jscomp.NodeUtil$BooleanResultPredicate",
676:       "com.google.javascript.jscomp.SourceMap$1",
677:       "com.google.javascript.jscomp.TightenTypes",
678:       "com.google.javascript.rhino.jstype.VoidType",
679:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler",
680:       "com.google.javascript.rhino.jstype.JSType",
681:       "com.google.common.io.ByteProcessor",
682:       "com.google.javascript.jscomp.ControlFlowGraph$Branch",
683:       "com.google.common.collect.Sets$SetView",
684:       "com.google.common.collect.ImmutableSet$Builder",
685:       "com.google.javascript.jscomp.SyntheticAst",
686:       "com.google.javascript.jscomp.DiagnosticGroups",
687:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
688:       "com.google.javascript.jscomp.ScopeCreator",
689:       "com.google.common.collect.RegularImmutableMap$TerminalEntry",
690:       "com.google.common.base.Predicates",
691:       "com.google.javascript.jscomp.graph.AdjacencyGraph",
692:       "com.google.javascript.jscomp.deps.SortedDependencies$CircularDependencyException",
693:       "com.google.common.collect.Lists$TransformingSequentialList",
694:       "com.google.javascript.rhino.head.NativeNumber",
695:       "com.google.javascript.jscomp.SourceFile",
696:       "com.google.javascript.rhino.head.ast.BreakStatement",
697:       "com.google.javascript.jscomp.PropertyRenamingPolicy",
698:       "com.google.javascript.jscomp.AstChangeProxy$ChangeListener",
699:       "com.google.javascript.rhino.jstype.FunctionBuilder",
700:       "com.google.javascript.jscomp.CodingConvention$DelegateRelationship",
701:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax$FoldArrayAction",
702:       "com.google.javascript.rhino.head.ast.WithStatement",
703:       "com.google.javascript.rhino.head.ScriptRuntime$MessageProvider",
704:       "com.google.common.collect.MapDifference",
705:       "com.google.javascript.jscomp.CompilerOptions$AliasTransformationHandler",
706:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
707:       "com.google.javascript.jscomp.SourceFile$Generated",
708:       "com.google.javascript.rhino.jstype.FunctionType",
709:       "com.google.javascript.rhino.head.ast.AstNode",
710:       "com.google.javascript.jscomp.Compiler",
711:       "com.google.javascript.jscomp.NodeTraversal$ScopedCallback",
712:       "com.google.javascript.jscomp.TypedScopeCreator",
713:       "com.google.common.base.CharMatcher$12",
714:       "com.google.common.base.CharMatcher$11",
715:       "com.google.javascript.rhino.head.Node",
716:       "com.google.common.base.CharMatcher$10",
717:       "com.google.javascript.rhino.jstype.TernaryValue",
718:       "com.google.common.io.Files$1",
719:       "com.google.javascript.jscomp.JSError",
720:       "com.google.common.base.CharMatcher$15",
721:       "com.google.common.base.CharMatcher$14",
722:       "com.google.common.collect.Lists$RandomAccessListWrapper",
723:       "com.google.common.base.CharMatcher$13",
724:       "com.google.common.base.Platform",
725:       "com.google.javascript.jscomp.TypedScopeCreator$GlobalScopeBuilder",
726:       "com.google.javascript.jscomp.PeepholeFoldWithTypes",
727:       "com.google.javascript.rhino.head.ast.KeywordLiteral",
728:       "com.google.javascript.jscomp.NodeTraversal$AbstractShallowCallback",
729:       "com.google.common.collect.TreeMultimap",
730:       "com.google.javascript.rhino.head.ast.Assignment",
731:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
732:       "com.google.javascript.rhino.jstype.UnionType",
733:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
734:       "com.google.javascript.rhino.head.ast.LabeledStatement",
735:       "com.google.javascript.jscomp.ControlFlowAnalysis",
736:       "com.google.javascript.jscomp.graph.LatticeElement",
737:       "com.google.common.collect.AbstractIndexedListIterator",
738:       "com.google.javascript.rhino.head.ast.XmlExpression",
739:       "com.google.javascript.jscomp.JSModuleGraph",
740:       "com.google.common.collect.AbstractMultimap$SortedKeySet",
741:       "com.google.javascript.jscomp.SyntacticScopeCreator$DefaultRedeclarationHandler",
742:       "com.google.common.collect.Sets",
743:       "com.google.common.collect.ImmutableCollection$EmptyImmutableCollection",
744:       "com.google.javascript.jscomp.TypedScopeCreator$LocalScopeBuilder",
745:       "com.google.javascript.rhino.head.Kit",
746:       "com.google.javascript.jscomp.BasicErrorManager$LeveledJSErrorComparator",
747:       "com.google.javascript.rhino.Node$ObjectPropListItem",
748:       "com.google.javascript.rhino.head.jdk15.VMBridge_jdk15",
749:       "com.google.javascript.rhino.head.ContextAction",
750:       "com.google.javascript.rhino.head.EvaluatorException",
751:       "com.google.javascript.jscomp.ProcessCommonJSModules",
752:       "com.google.javascript.rhino.head.ast.NumberLiteral",
753:       "com.google.common.collect.AbstractMultimap$SortedAsMap",
754:       "com.google.javascript.jscomp.Compiler$IntermediateState",
755:       "com.google.javascript.jscomp.AstChangeProxy",
756:       "com.google.javascript.jscomp.SymbolTable$2",
757:       "com.google.javascript.rhino.head.ast.ErrorNode",
758:       "com.google.common.collect.EmptyImmutableMap",
759:       "com.google.javascript.jscomp.SymbolTable$3",
760:       "com.google.javascript.jscomp.SymbolTable$4",
761:       "com.google.common.collect.Multimap",
762:       "com.google.javascript.jscomp.SourceMap$DetailLevel$2",
763:       "com.google.javascript.jscomp.SourceMap$DetailLevel$1",
764:       "com.google.javascript.jscomp.VarCheck",
765:       "com.google.javascript.jscomp.CompilerOptions$DevMode",
766:       "com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder",
767:       "com.google.javascript.rhino.head.Interpreter",
768:       "com.google.javascript.rhino.jstype.StringType",
769:       "com.google.javascript.rhino.head.ImporterTopLevel",
770:       "com.google.javascript.rhino.jstype.StaticSymbolTable",
771:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
772:       "com.google.javascript.jscomp.JSModuleGraph$ModuleDependenceException",
773:       "com.google.javascript.jscomp.graph.DiGraph",
774:       "com.google.common.base.Platform$1",
775:       "com.google.javascript.jscomp.parsing.ParserRunner",
776:       "com.google.common.collect.RegularImmutableMap$EntrySet",
777:       "com.google.javascript.rhino.head.ast.GeneratorExpression",
778:       "com.google.javascript.rhino.head.ast.XmlDotQuery",
779:       "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement",
780:       "com.google.javascript.jscomp.ConstCheck",
781:       "com.google.javascript.rhino.jstype.Visitor",
782:       "com.google.javascript.jscomp.TypeCheck",
783:       "com.google.javascript.jscomp.SymbolTable",
784:       "com.google.javascript.jscomp.deps.DependencyInfo",
785:       "com.google.javascript.jscomp.Compiler$10",
786:       "com.google.javascript.jscomp.WarningsGuard$Priority",
787:       "com.google.javascript.rhino.head.ContextFactory$GlobalSetter",
788:       "com.google.common.base.CharMatcher$Or",
789:       "com.google.javascript.rhino.head.ast.NodeVisitor",
790:       "com.google.protobuf.Message",
791:       "com.google.javascript.rhino.head.ast.ArrayComprehensionLoop",
792:       "com.google.javascript.rhino.head.Parser$ParserException",
793:       "com.google.common.collect.Table",
794:       "com.google.javascript.rhino.head.NativeObject"
795:     );
796:   } 
797: 
798:   private static void resetClasses() {
799:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NodeUtil_122_tmp__ESTest_scaffolding.class.getClassLoader()); 
800: 
801:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
802:       "com.google.common.collect.ImmutableCollection$EmptyImmutableCollection",
803:       "com.google.common.collect.ImmutableCollection",
804:       "com.google.common.collect.ImmutableSet",
805:       "com.google.common.collect.Hashing",
806:       "com.google.common.collect.ImmutableSet$ArrayImmutableSet",
807:       "com.google.common.collect.RegularImmutableSet",
808:       "com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate",
809:       "com.google.javascript.jscomp.NodeUtil$BooleanResultPredicate",
810:       "com.google.javascript.jscomp.NodeUtil$MayBeStringResultPredicate",
811:       "com.google.javascript.jscomp.NodeUtil$MatchNotFunction",
812:       "com.google.javascript.jscomp.NodeUtil",
813:       "com.google.javascript.jscomp.NodeUtil$MatchNodeType",
814:       "com.google.javascript.jscomp.NodeUtil$MatchNameNode",
815:       "com.google.javascript.jscomp.NodeUtil$VarCollector",
816:       "com.google.javascript.rhino.jstype.TernaryValue",
817:       "com.google.common.base.Predicates$ObjectPredicate",
818:       "com.google.javascript.rhino.TokenStream",
819:       "com.google.javascript.jscomp.AbstractPeepholeOptimization",
820:       "com.google.javascript.jscomp.PeepholeFoldWithTypes",
821:       "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments",
822:       "com.google.javascript.jscomp.CodingConventions$Proxy",
823:       "com.google.javascript.jscomp.GoogleCodingConvention",
824:       "com.google.javascript.jscomp.DiagnosticType",
825:       "com.google.javascript.jscomp.ClosureCodingConvention",
826:       "com.google.javascript.jscomp.CodingConventions",
827:       "com.google.javascript.jscomp.CodingConventions$DefaultCodingConvention",
828:       "com.google.common.collect.Sets",
829:       "com.google.common.base.Joiner",
830:       "com.google.common.base.Preconditions",
831:       "com.google.common.collect.Collections2",
832:       "com.google.common.base.Joiner$MapJoiner",
833:       "com.google.common.collect.Maps",
834:       "com.google.common.collect.ImmutableList",
835:       "com.google.common.collect.UnmodifiableIterator",
836:       "com.google.common.collect.UnmodifiableListIterator",
837:       "com.google.common.collect.EmptyImmutableList$1",
838:       "com.google.common.collect.EmptyImmutableList",
839:       "com.google.common.collect.Iterators$1",
840:       "com.google.common.collect.Iterators$2",
841:       "com.google.common.collect.Iterators",
842:       "com.google.javascript.jscomp.SourceFile",
843:       "com.google.javascript.jscomp.JSSourceFile",
844:       "com.google.javascript.jscomp.SourceFile$Builder",
845:       "com.google.common.base.Charsets",
846:       "com.google.javascript.jscomp.SourceFile$OnDisk",
847:       "com.google.javascript.jscomp.JsAst",
848:       "com.google.javascript.rhino.InputId",
849:       "com.google.common.io.Files",
850:       "com.google.common.io.Files$1",
851:       "com.google.common.io.ByteStreams",
852:       "com.google.javascript.jscomp.AbstractCompiler",
853:       "com.google.javascript.jscomp.JSError",
854:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax$1",
855:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
856:       "com.google.javascript.jscomp.Compiler",
857:       "com.google.javascript.jscomp.RhinoErrorReporter",
858:       "com.google.javascript.jscomp.RhinoErrorReporter$OldRhinoErrorReporter",
859:       "com.google.javascript.rhino.head.Kit",
860:       "com.google.javascript.rhino.head.optimizer.Codegen",
861:       "com.google.javascript.rhino.head.Icode",
862:       "com.google.javascript.rhino.head.Interpreter",
863:       "com.google.javascript.rhino.head.Context",
864:       "com.google.javascript.rhino.head.ContextFactory",
865:       "com.google.javascript.rhino.head.ScriptableObject",
866:       "com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider",
867:       "com.google.javascript.rhino.head.ScriptRuntime",
868:       "com.google.javascript.rhino.head.jdk13.VMBridge_jdk13",
869:       "com.google.javascript.rhino.head.jdk15.VMBridge_jdk15",
870:       "com.google.javascript.rhino.head.VMBridge",
871:       "com.google.javascript.rhino.ScriptRuntime",
872:       "com.google.common.collect.ImmutableMap",
873:       "com.google.common.collect.RegularImmutableMap",
874:       "com.google.common.collect.AbstractMapEntry",
875:       "com.google.common.collect.ImmutableEntry",
876:       "com.google.common.collect.RegularImmutableMap$TerminalEntry",
877:       "com.google.javascript.jscomp.RhinoErrorReporter$NewRhinoErrorReporter",
878:       "com.google.javascript.jscomp.PassFactory",
879:       "com.google.javascript.jscomp.Compiler$3",
880:       "com.google.javascript.jscomp.CodeChangeHandler$RecentChange",
881:       "com.google.common.collect.Lists",
882:       "com.google.javascript.jscomp.NodeTraversal",
883:       "com.google.javascript.jscomp.SyntacticScopeCreator",
884:       "com.google.javascript.jscomp.SyntacticScopeCreator$DefaultRedeclarationHandler",
885:       "com.google.javascript.rhino.SimpleErrorReporter",
886:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
887:       "com.google.common.collect.AbstractMultimap",
888:       "com.google.common.collect.AbstractSetMultimap",
889:       "com.google.common.collect.LinkedHashMultimap",
890:       "com.google.common.collect.AbstractListMultimap",
891:       "com.google.common.collect.ArrayListMultimap",
892:       "com.google.javascript.rhino.jstype.JSTypeRegistry$ResolveMode",
893:       "com.google.javascript.rhino.jstype.JSTypeNative",
894:       "com.google.javascript.rhino.jstype.JSType$1",
895:       "com.google.javascript.rhino.jstype.JSType",
896:       "com.google.javascript.rhino.jstype.ValueType",
897:       "com.google.javascript.rhino.jstype.BooleanType",
898:       "com.google.javascript.rhino.jstype.NullType",
899:       "com.google.javascript.rhino.jstype.NumberType",
900:       "com.google.javascript.rhino.jstype.StringType",
901:       "com.google.javascript.rhino.jstype.ObjectType",
902:       "com.google.javascript.rhino.jstype.UnknownType",
903:       "com.google.javascript.rhino.jstype.VoidType",
904:       "com.google.javascript.rhino.jstype.AllType",
905:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
906:       "com.google.javascript.rhino.jstype.FunctionType",
907:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
908:       "com.google.javascript.rhino.Node",
909:       "com.google.javascript.rhino.Node$StringNode",
910:       "com.google.javascript.rhino.Node$AbstractPropListItem",
911:       "com.google.javascript.rhino.Node$IntPropListItem",
912:       "com.google.javascript.rhino.jstype.ArrowType",
913:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
914:       "com.google.javascript.rhino.jstype.InstanceObjectType",
915:       "com.google.javascript.rhino.jstype.ObjectType$Property",
916:       "com.google.javascript.rhino.jstype.NoObjectType",
917:       "com.google.javascript.rhino.jstype.NoType",
918:       "com.google.javascript.rhino.jstype.NoResolvedType",
919:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
920:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
921:       "com.google.javascript.rhino.jstype.UnionType",
922:       "com.google.common.collect.RegularImmutableList",
923:       "com.google.javascript.rhino.jstype.FunctionBuilder",
924:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
925:       "com.google.javascript.jscomp.SymbolTable",
926:       "com.google.javascript.rhino.Token",
927:       "com.google.javascript.jscomp.TightenTypes",
928:       "com.google.javascript.rhino.Node$NumberNode",
929:       "com.google.javascript.rhino.IR",
930:       "com.google.javascript.rhino.Node$SideEffectFlags",
931:       "com.google.javascript.jscomp.ExploitAssigns",
932:       "com.google.javascript.jscomp.Compiler$IntermediateState",
933:       "com.google.javascript.jscomp.PassConfig",
934:       "com.google.javascript.jscomp.DefaultPassConfig",
935:       "com.google.javascript.jscomp.CrossModuleMethodMotion$IdGenerator",
936:       "com.google.javascript.jscomp.DefaultPassConfig$HotSwapPassFactory",
937:       "com.google.javascript.jscomp.DefaultPassConfig$1",
938:       "com.google.javascript.jscomp.DefaultPassConfig$2",
939:       "com.google.javascript.jscomp.DefaultPassConfig$3",
940:       "com.google.javascript.jscomp.DefaultPassConfig$4",
941:       "com.google.javascript.jscomp.DefaultPassConfig$5",
942:       "com.google.javascript.jscomp.DefaultPassConfig$6",
943:       "com.google.javascript.jscomp.DefaultPassConfig$7",
944:       "com.google.javascript.jscomp.DefaultPassConfig$8",
945:       "com.google.javascript.jscomp.DefaultPassConfig$9",
946:       "com.google.javascript.jscomp.DefaultPassConfig$10",
947:       "com.google.javascript.jscomp.DefaultPassConfig$11",
948:       "com.google.javascript.jscomp.DefaultPassConfig$12",
949:       "com.google.javascript.jscomp.DefaultPassConfig$13",
950:       "com.google.javascript.jscomp.DefaultPassConfig$14",
951:       "com.google.javascript.jscomp.DefaultPassConfig$15",
952:       "com.google.javascript.jscomp.DefaultPassConfig$16",
953:       "com.google.javascript.jscomp.DefaultPassConfig$17",
954:       "com.google.javascript.jscomp.DefaultPassConfig$18",
955:       "com.google.javascript.jscomp.DefaultPassConfig$19",
956:       "com.google.javascript.jscomp.DefaultPassConfig$20",
957:       "com.google.javascript.jscomp.DefaultPassConfig$21",
958:       "com.google.javascript.jscomp.DefaultPassConfig$22",
959:       "com.google.javascript.jscomp.DefaultPassConfig$23",
960:       "com.google.javascript.jscomp.DefaultPassConfig$24",
961:       "com.google.javascript.jscomp.DefaultPassConfig$25",
962:       "com.google.javascript.jscomp.DefaultPassConfig$26",
963:       "com.google.javascript.jscomp.DefaultPassConfig$27",
964:       "com.google.javascript.jscomp.DefaultPassConfig$28",
965:       "com.google.javascript.jscomp.DefaultPassConfig$29",
966:       "com.google.javascript.jscomp.DefaultPassConfig$30",
967:       "com.google.javascript.jscomp.DefaultPassConfig$31",
968:       "com.google.javascript.jscomp.DefaultPassConfig$32",
969:       "com.google.javascript.jscomp.DefaultPassConfig$33",
970:       "com.google.javascript.jscomp.DefaultPassConfig$34",
971:       "com.google.javascript.jscomp.DefaultPassConfig$35",
972:       "com.google.javascript.jscomp.DefaultPassConfig$36",
973:       "com.google.javascript.jscomp.DefaultPassConfig$37",
974:       "com.google.javascript.jscomp.DefaultPassConfig$38",
975:       "com.google.javascript.jscomp.DefaultPassConfig$39",
976:       "com.google.javascript.jscomp.DefaultPassConfig$40",
977:       "com.google.javascript.jscomp.DefaultPassConfig$41",
978:       "com.google.javascript.jscomp.DefaultPassConfig$42",
979:       "com.google.javascript.jscomp.DefaultPassConfig$43",
980:       "com.google.javascript.jscomp.DefaultPassConfig$44",
981:       "com.google.javascript.jscomp.DefaultPassConfig$45",
982:       "com.google.javascript.jscomp.DefaultPassConfig$46",
983:       "com.google.javascript.jscomp.DefaultPassConfig$47",
984:       "com.google.javascript.jscomp.DefaultPassConfig$48",
985:       "com.google.javascript.jscomp.DefaultPassConfig$49",
986:       "com.google.javascript.jscomp.DefaultPassConfig$50",
987:       "com.google.javascript.jscomp.DefaultPassConfig$51",
988:       "com.google.javascript.jscomp.DefaultPassConfig$52",
989:       "com.google.javascript.jscomp.DefaultPassConfig$53",
990:       "com.google.javascript.jscomp.DefaultPassConfig$54",
991:       "com.google.javascript.jscomp.DefaultPassConfig$55",
992:       "com.google.javascript.jscomp.DefaultPassConfig$56",
993:       "com.google.javascript.jscomp.DefaultPassConfig$57",
994:       "com.google.javascript.jscomp.DefaultPassConfig$58",
995:       "com.google.javascript.jscomp.DefaultPassConfig$59",
996:       "com.google.javascript.jscomp.DefaultPassConfig$60",
997:       "com.google.javascript.jscomp.DefaultPassConfig$61",
998:       "com.google.javascript.jscomp.DefaultPassConfig$62",
999:       "com.google.javascript.jscomp.DefaultPassConfig$63",
1000:       "com.google.javascript.jscomp.DefaultPassConfig$64",
1001:       "com.google.javascript.jscomp.DefaultPassConfig$65",
1002:       "com.google.javascript.jscomp.DefaultPassConfig$66",
1003:       "com.google.javascript.jscomp.DefaultPassConfig$67",
1004:       "com.google.javascript.jscomp.DefaultPassConfig$68",
1005:       "com.google.javascript.jscomp.DefaultPassConfig$69",
1006:       "com.google.javascript.jscomp.DefaultPassConfig$70",
1007:       "com.google.javascript.jscomp.DefaultPassConfig$71",
1008:       "com.google.javascript.jscomp.DefaultPassConfig$72",
1009:       "com.google.javascript.jscomp.DefaultPassConfig$73",
1010:       "com.google.javascript.jscomp.DefaultPassConfig$74",
1011:       "com.google.javascript.jscomp.DefaultPassConfig$75",
1012:       "com.google.javascript.jscomp.DefaultPassConfig$76",
1013:       "com.google.javascript.jscomp.DefaultPassConfig$77",
1014:       "com.google.javascript.jscomp.DefaultPassConfig$78",
1015:       "com.google.javascript.jscomp.DefaultPassConfig$79",
1016:       "com.google.javascript.jscomp.DefaultPassConfig$80",
1017:       "com.google.javascript.jscomp.DefaultPassConfig$81",
1018:       "com.google.javascript.jscomp.DefaultPassConfig$82",
1019:       "com.google.javascript.jscomp.DefaultPassConfig$83",
1020:       "com.google.javascript.jscomp.DefaultPassConfig$84",
1021:       "com.google.javascript.jscomp.DefaultPassConfig$85",
1022:       "com.google.javascript.jscomp.DefaultPassConfig$86",
1023:       "com.google.javascript.jscomp.DefaultPassConfig$87",
1024:       "com.google.javascript.jscomp.DefaultPassConfig$88",
1025:       "com.google.javascript.jscomp.DefaultPassConfig$89",
1026:       "com.google.javascript.jscomp.DefaultPassConfig$90",
1027:       "com.google.javascript.jscomp.DefaultPassConfig$91",
1028:       "com.google.javascript.jscomp.DefaultPassConfig$92",
1029:       "com.google.javascript.jscomp.DefaultPassConfig$93",
1030:       "com.google.javascript.jscomp.DefaultPassConfig$94",
1031:       "com.google.javascript.jscomp.DefaultPassConfig$98",
1032:       "com.google.javascript.jscomp.DefaultPassConfig$99",
1033:       "com.google.javascript.jscomp.PassConfig$State",
1034:       "com.google.javascript.jscomp.StatementFusion",
1035:       "com.google.common.io.CharStreams",
1036:       "com.google.javascript.jscomp.CompilerOptions$TracerMode",
1037:       "com.google.javascript.jscomp.ControlFlowAnalysis",
1038:       "com.google.javascript.jscomp.PeepholeReplaceKnownMethods",
1039:       "com.google.javascript.jscomp.MethodCompilerPass",
1040:       "com.google.javascript.jscomp.InlineSimpleMethods$1",
1041:       "com.google.javascript.jscomp.InlineSimpleMethods",
1042:       "com.google.javascript.jscomp.NodeTraversal$AbstractPostOrderCallback",
1043:       "com.google.javascript.jscomp.InvocationsCallback",
1044:       "com.google.javascript.jscomp.InlineSimpleMethods$InlineTrivialAccessors",
1045:       "com.google.javascript.jscomp.PeepholeRemoveDeadCode",
1046:       "com.google.javascript.jscomp.Normalize$PropagateConstantAnnotationsOverVars",
1047:       "com.google.javascript.jscomp.NodeUtil$MatchDeclaration",
1048:       "com.google.javascript.jscomp.ReorderConstantExpression",
1049:       "com.google.javascript.jscomp.CreateSyntheticBlocks",
1050:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler$NullAliasTransformation",
1051:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler",
1052:       "com.google.javascript.jscomp.CompilerOptions",
1053:       "com.google.javascript.jscomp.DependencyOptions",
1054:       "com.google.javascript.jscomp.ProcessCommonJSModules",
1055:       "com.google.javascript.jscomp.WarningsGuard",
1056:       "com.google.javascript.jscomp.ComposeWarningsGuard",
1057:       "com.google.common.primitives.Ints",
1058:       "com.google.javascript.jscomp.ComposeWarningsGuard$GuardComparator",
1059:       "com.google.javascript.jscomp.SourceMap$DetailLevel",
1060:       "com.google.javascript.jscomp.SourceMap$Format",
1061:       "com.google.javascript.jscomp.CompilerOptions$LanguageMode",
1062:       "com.google.javascript.jscomp.CompilerOptions$DevMode",
1063:       "com.google.javascript.jscomp.VariableRenamingPolicy",
1064:       "com.google.javascript.jscomp.PropertyRenamingPolicy",
1065:       "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
1066:       "com.google.javascript.jscomp.CompilerOptions$TweakProcessing",
1067:       "com.google.javascript.jscomp.ErrorFormat",
1068:       "com.google.javascript.jscomp.JSModule",
1069:       "com.google.javascript.jscomp.BasicErrorManager",
1070:       "com.google.javascript.jscomp.LoggerErrorManager",
1071:       "com.google.javascript.jscomp.AbstractMessageFormatter",
1072:       "com.google.javascript.jscomp.LightweightMessageFormatter$LineNumberingFormatter",
1073:       "com.google.javascript.jscomp.LightweightMessageFormatter",
1074:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt",
1075:       "com.google.javascript.jscomp.BasicErrorManager$LeveledJSErrorComparator",
1076:       "com.google.javascript.jscomp.CheckGlobalThis",
1077:       "com.google.javascript.jscomp.DiagnosticGroup",
1078:       "com.google.common.collect.SingletonImmutableSet",
1079:       "com.google.javascript.jscomp.CheckAccessControls",
1080:       "com.google.common.collect.AbstractIndexedListIterator",
1081:       "com.google.common.collect.Iterators$11",
1082:       "com.google.javascript.jscomp.TypeValidator",
1083:       "com.google.javascript.jscomp.VarCheck",
1084:       "com.google.javascript.jscomp.CheckGlobalNames",
1085:       "com.google.javascript.jscomp.VariableReferenceCheck",
1086:       "com.google.javascript.jscomp.ProcessDefines",
1087:       "com.google.common.base.CharMatcher$11",
1088:       "com.google.common.base.CharMatcher$12",
1089:       "com.google.common.base.CharMatcher$Or",
1090:       "com.google.common.base.Platform$1",
1091:       "com.google.common.base.Platform",
1092:       "com.google.common.base.CharMatcher$LookupTable",
1093:       "com.google.common.base.CharMatcher$15",
1094:       "com.google.common.base.CharMatcher$8",
1095:       "com.google.common.base.CharMatcher$1",
1096:       "com.google.common.base.CharMatcher$2",
1097:       "com.google.common.base.CharMatcher$3",
1098:       "com.google.common.base.CharMatcher$4",
1099:       "com.google.common.base.CharMatcher$5",
1100:       "com.google.common.base.CharMatcher$6",
1101:       "com.google.common.base.CharMatcher$7",
1102:       "com.google.common.base.CharMatcher",
1103:       "com.google.javascript.jscomp.ProcessTweaks$TweakFunction",
1104:       "com.google.javascript.jscomp.ProcessTweaks",
1105:       "com.google.javascript.jscomp.TypedScopeCreator",
1106:       "com.google.javascript.jscomp.FunctionTypeBuilder",
1107:       "com.google.javascript.jscomp.TypeCheck",
1108:       "com.google.javascript.jscomp.CheckDebuggerStatement",
1109:       "com.google.javascript.jscomp.CheckRegExp",
1110:       "com.google.javascript.jscomp.CheckSideEffects",
1111:       "com.google.javascript.jscomp.CheckUnreachableCode",
1112:       "com.google.javascript.jscomp.ConstCheck",
1113:       "com.google.javascript.jscomp.DisambiguateProperties$Warnings",
1114:       "com.google.javascript.jscomp.ControlStructureCheck",
1115:       "com.google.javascript.jscomp.StrictModeCheck",
1116:       "com.google.javascript.jscomp.CheckProvides",
1117:       "com.google.javascript.jscomp.JsMessageVisitor",
1118:       "com.google.javascript.jscomp.DiagnosticGroups",
1119:       "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
1120:       "com.google.javascript.jscomp.WarningsGuard$Priority",
1121:       "com.google.javascript.jscomp.SuppressDocWarningsGuard",
1122:       "com.google.common.collect.RegularImmutableMap$NonTerminalEntry",
1123:       "com.google.common.collect.RegularImmutableMap$EntrySet",
1124:       "com.google.javascript.jscomp.SourceFile$Preloaded",
1125:       "com.google.javascript.jscomp.CompilerInput",
1126:       "com.google.javascript.jscomp.Compiler$1",
1127:       "com.google.javascript.jscomp.Compiler$2",
1128:       "com.google.javascript.jscomp.Tracer$1",
1129:       "com.google.javascript.jscomp.Tracer$Stat",
1130:       "com.google.javascript.jscomp.Tracer",
1131:       "com.google.javascript.jscomp.Tracer$ThreadTrace",
1132:       "com.google.javascript.jscomp.Normalize",
1133:       "com.google.javascript.jscomp.Compiler$10",
1134:       "com.google.javascript.jscomp.parsing.Config$LanguageMode",
1135:       "com.google.javascript.jscomp.parsing.ParserRunner",
1136:       "com.google.javascript.jscomp.parsing.Config",
1137:       "com.google.common.collect.ImmutableMap$Builder",
1138:       "com.google.javascript.jscomp.parsing.Annotation",
1139:       "com.google.javascript.rhino.head.DefaultErrorReporter",
1140:       "com.google.javascript.rhino.head.CompilerEnvirons",
1141:       "com.google.javascript.rhino.head.Parser",
1142:       "com.google.javascript.rhino.head.TokenStream",
1143:       "com.google.javascript.rhino.head.ObjToIntMap",
1144:       "com.google.javascript.rhino.head.Node",
1145:       "com.google.javascript.rhino.head.ast.AstNode",
1146:       "com.google.javascript.rhino.head.ast.Jump",
1147:       "com.google.javascript.rhino.head.ast.Scope",
1148:       "com.google.javascript.rhino.head.ast.ScriptNode",
1149:       "com.google.javascript.rhino.head.ast.AstRoot",
1150:       "com.google.javascript.jscomp.parsing.IRFactory",
1151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
1152:       "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
1153:       "com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher",
1154:       "com.google.javascript.rhino.Node$ObjectPropListItem",
1155:       "com.google.javascript.jscomp.parsing.IRFactory$1",
1156:       "com.google.javascript.rhino.head.Node$NodeIterator",
1157:       "com.google.javascript.jscomp.PrepareAst",
1158:       "com.google.javascript.jscomp.PrepareAst$PrepareAnnotations",
1159:       "com.google.javascript.jscomp.Normalize$NormalizeStatements",
1160:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
1161:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$ContextualRenamer",
1162:       "com.google.common.collect.AbstractMultiset",
1163:       "com.google.common.collect.AbstractMapBasedMultiset",
1164:       "com.google.common.collect.HashMultiset",
1165:       "com.google.common.collect.Multisets",
1166:       "com.google.common.collect.Multisets$EntrySet",
1167:       "com.google.common.collect.AbstractMultiset$EntrySet",
1168:       "com.google.common.collect.AbstractMapBasedMultiset$1",
1169:       "com.google.common.base.Predicates",
1170:       "com.google.javascript.rhino.head.ast.ExpressionStatement",
1171:       "com.google.javascript.jscomp.BasicErrorManager$ErrorWithLevel",
1172:       "com.google.javascript.rhino.head.Parser$ParserException",
1173:       "com.google.javascript.rhino.head.ast.EmptyStatement",
1174:       "com.google.javascript.rhino.head.RhinoException",
1175:       "com.google.javascript.rhino.head.EvaluatorException",
1176:       "com.google.javascript.jscomp.PeepholeSimplifyRegExp",
1177:       "com.google.javascript.jscomp.VerboseMessageFormatter",
1178:       "com.google.javascript.jscomp.JqueryCodingConvention",
1179:       "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement",
1180:       "com.google.javascript.jscomp.PrintStreamErrorManager",
1181:       "com.google.javascript.rhino.head.ast.NumberLiteral",
1182:       "com.google.javascript.jscomp.PeepholeFoldConstants",
1183:       "com.google.javascript.jscomp.ExpandJqueryAliases",
1184:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
1185:       "com.google.javascript.jscomp.FindExportableNodes",
1186:       "com.google.javascript.jscomp.ConvertToDottedProperties",
1187:       "com.google.javascript.rhino.Node$AncestorIterable",
1188:       "com.google.javascript.jscomp.SyntheticAst",
1189:       "com.google.javascript.jscomp.ControlFlowAnalysis$1",
1190:       "com.google.common.collect.HashMultimap",
1191:       "com.google.javascript.jscomp.PreprocessorSymbolTable",
1192:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
1193:       "com.google.javascript.jscomp.CleanupPasses",
1194:       "com.google.javascript.jscomp.CleanupPasses$1",
1195:       "com.google.javascript.jscomp.CleanupPasses$2",
1196:       "com.google.javascript.jscomp.CleanupPasses$3",
1197:       "com.google.javascript.jscomp.InferJSDocInfo",
1198:       "com.google.javascript.jscomp.TightenTypes$ConcreteScope",
1199:       "com.google.common.collect.AbstractSortedSetMultimap",
1200:       "com.google.common.collect.TreeMultimap",
1201:       "com.google.common.collect.Ordering",
1202:       "com.google.common.collect.NaturalOrdering",
1203:       "com.google.common.collect.Maps$KeySet",
1204:       "com.google.common.collect.AbstractMultimap$KeySet",
1205:       "com.google.common.collect.AbstractMultimap$SortedKeySet",
1206:       "com.google.common.collect.Multimaps$Entries",
1207:       "com.google.common.collect.Multimaps$EntrySet",
1208:       "com.google.common.collect.AbstractMultimap$3",
1209:       "com.google.common.collect.AbstractMultimap$EntryIterator",
1210:       "com.google.javascript.rhino.head.ast.Name",
1211:       "com.google.javascript.rhino.head.ast.InfixExpression",
1212:       "com.google.javascript.rhino.head.ast.PropertyGet",
1213:       "com.google.javascript.jscomp.SimpleDefinitionFinder",
1214:       "com.google.javascript.rhino.jstype.EnumType",
1215:       "com.google.javascript.rhino.jstype.EnumElementType",
1216:       "com.google.javascript.rhino.jstype.ModificationVisitor",
1217:       "com.google.javascript.rhino.Node$AncestorIterable$1",
1218:       "com.google.javascript.jscomp.DeadAssignmentsElimination$1",
1219:       "com.google.javascript.jscomp.DeadAssignmentsElimination",
1220:       "com.google.javascript.jscomp.ProcessClosurePrimitives",
1221:       "com.google.javascript.jscomp.ProcessClosurePrimitives$ProvidedName",
1222:       "com.google.javascript.jscomp.LinkedFlowScope",
1223:       "com.google.javascript.jscomp.LinkedFlowScope$FlatFlowScopeCache",
1224:       "com.google.common.collect.EmptyImmutableMap",
1225:       "com.google.javascript.jscomp.CheckMissingGetCssName",
1226:       "com.google.javascript.jscomp.Scope$1",
1227:       "com.google.javascript.jscomp.Scope",
1228:       "com.google.javascript.jscomp.Scope$Var",
1229:       "com.google.javascript.jscomp.Scope$Arguments",
1230:       "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback$CopySideEffectSubexpressions",
1231:       "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback",
1232:       "com.google.common.collect.ImmutableMultimap",
1233:       "com.google.common.collect.ImmutableListMultimap",
1234:       "com.google.common.collect.EmptyImmutableListMultimap",
1235:       "com.google.common.collect.LinkedListMultimap",
1236:       "com.google.common.collect.LinkedHashMultiset",
1237:       "com.google.javascript.jscomp.ReferenceCollectingCallback$1",
1238:       "com.google.javascript.jscomp.ReferenceCollectingCallback",
1239:       "com.google.javascript.jscomp.WhitelistWarningsGuard",
1240:       "com.google.common.io.LineReader",
1241:       "com.google.common.io.LineBuffer",
1242:       "com.google.common.io.LineReader$1",
1243:       "com.google.common.io.Closeables",
1244:       "com.google.common.collect.ImmutableSetMultimap",
1245:       "com.google.common.collect.EmptyImmutableSetMultimap",
1246:       "com.google.javascript.jscomp.Denormalize",
1247:       "com.google.javascript.jscomp.EmptyMessageBundle",
1248:       "com.google.javascript.jscomp.CheckSideEffects$StripProtection",
1249:       "com.google.javascript.rhino.head.ast.UnaryExpression",
1250:       "com.google.javascript.jscomp.FlowSensitiveInlineVariables$1",
1251:       "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
1252:       "com.google.javascript.jscomp.InlineProperties$PropertyInfo",
1253:       "com.google.javascript.jscomp.InlineProperties",
1254:       "com.google.javascript.rhino.jstype.SimpleSlot",
1255:       "com.google.javascript.jscomp.JSModuleGraph",
1256:       "com.google.javascript.rhino.JSDocInfo",
1257:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
1258:       "com.google.javascript.jscomp.RemoveUnusedClassProperties",
1259:       "com.google.javascript.rhino.jstype.ProxyObjectType",
1260:       "com.google.javascript.rhino.jstype.NamedType",
1261:       "com.google.javascript.jscomp.PassConfig$PassConfigDelegate",
1262:       "com.google.javascript.jscomp.NameAnalyzer$1",
1263:       "com.google.javascript.jscomp.NameAnalyzer",
1264:       "com.google.javascript.jscomp.LineNumberCheck",
1265:       "com.google.javascript.jscomp.SourceFile$Generated",
1266:       "com.google.common.collect.Multimaps$Values",
1267:       "com.google.common.collect.AbstractMultimap$2",
1268:       "com.google.javascript.jscomp.OptimizeArgumentsArray",
1269:       "com.google.javascript.jscomp.Normalize$VerifyConstants",
1270:       "com.google.javascript.jscomp.Compiler$6",
1271:       "com.google.javascript.jscomp.CodeChangeHandler$ForbiddenChange",
1272:       "com.google.javascript.jscomp.FunctionNames",
1273:       "com.google.javascript.jscomp.FunctionNames$FunctionListExtractor",
1274:       "com.google.javascript.jscomp.RecordFunctionInformation",
1275:       "com.google.protobuf.AbstractMessageLite",
1276:       "com.google.protobuf.AbstractMessage",
1277:       "com.google.protobuf.GeneratedMessage",
1278:       "com.google.protobuf.UnknownFieldSet",
1279:       "com.google.javascript.jscomp.FunctionInformationMap",
1280:       "com.google.protobuf.AbstractMessageLite$Builder",
1281:       "com.google.protobuf.AbstractMessage$Builder",
1282:       "com.google.protobuf.GeneratedMessage$Builder",
1283:       "com.google.javascript.jscomp.FunctionInformationMap$Builder",
1284:       "com.google.javascript.jscomp.VariableMap",
1285:       "com.google.common.io.ByteStreams$1",
1286:       "com.google.common.io.CharStreams$2",
1287:       "com.google.javascript.jscomp.ExternExportsPass",
1288:       "com.google.common.collect.SingletonImmutableList",
1289:       "com.google.javascript.jscomp.RenameLabels$DefaultNameSupplier",
1290:       "com.google.javascript.jscomp.NameGenerator",
1291:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$InlineRenamer",
1292:       "com.google.javascript.jscomp.graph.Graph",
1293:       "com.google.javascript.jscomp.graph.DiGraph",
1294:       "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
1295:       "com.google.javascript.jscomp.NameReferenceGraph",
1296:       "com.google.javascript.jscomp.NameReferenceGraph$Name",
1297:       "com.google.javascript.jscomp.MinimizeExitPoints",
1298:       "com.google.javascript.jscomp.ObjectPropertyStringPreprocess",
1299:       "com.google.javascript.jscomp.RemoveTryCatch",
1300:       "com.google.javascript.jscomp.RemoveTryCatch$RemoveTryCatchCode",
1301:       "com.google.javascript.jscomp.GlobalNamespace",
1302:       "com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace",
1303:       "com.google.javascript.jscomp.CheckAccidentalSemicolon",
1304:       "com.google.javascript.jscomp.Denormalize$StripConstantAnnotations",
1305:       "com.google.common.collect.ImmutableMultimap$Builder",
1306:       "com.google.common.collect.ImmutableSetMultimap$Builder",
1307:       "com.google.common.collect.ImmutableMultimap$BuilderMultimap",
1308:       "com.google.common.collect.ImmutableSetMultimap$BuilderMultimap",
1309:       "com.google.common.collect.AbstractMultimap$AsMap",
1310:       "com.google.common.collect.Maps$EntrySet",
1311:       "com.google.common.collect.AbstractMultimap$AsMap$AsMapEntries",
1312:       "com.google.common.collect.AbstractMultimap$AsMap$AsMapIterator",
1313:       "com.google.common.collect.AbstractMultimap$WrappedCollection",
1314:       "com.google.common.collect.AbstractMultimap$WrappedSet",
1315:       "com.google.common.collect.AbstractMultimap$WrappedCollection$WrappedIterator",
1316:       "com.google.javascript.jscomp.LinkedFlowScope$LinkedFlowSlot",
1317:       "com.google.common.collect.EmptyImmutableSet",
1318:       "com.google.javascript.rhino.Node$NodeMismatch",
1319:       "com.google.common.base.Predicates$OrPredicate",
1320:       "com.google.javascript.jscomp.Compiler$CodeBuilder",
1321:       "com.google.javascript.rhino.head.ast.Assignment",
1322:       "com.google.javascript.jscomp.SourceInformationAnnotator",
1323:       "com.google.javascript.rhino.head.ast.FunctionCall",
1324:       "com.google.javascript.rhino.head.Token",
1325:       "com.google.javascript.jscomp.CheckMissingReturn$1",
1326:       "com.google.javascript.jscomp.CheckMissingReturn$2",
1327:       "com.google.javascript.jscomp.CheckMissingReturn",
1328:       "com.google.javascript.jscomp.CombinedCompilerPass",
1329:       "com.google.common.collect.Iterators$13",
1330:       "com.google.common.collect.ForwardingObject",
1331:       "com.google.common.collect.ForwardingCollection",
1332:       "com.google.common.collect.ForwardingSet",
1333:       "com.google.common.collect.LinkedHashMultimap$SetDecorator",
1334:       "com.google.common.collect.LinkedHashMultimap$SetDecorator$1",
1335:       "com.google.common.collect.ImmutableListMultimap$Builder",
1336:       "com.google.javascript.jscomp.TypeInferencePass",
1337:       "com.google.javascript.jscomp.CoalesceVariableNames$1",
1338:       "com.google.javascript.jscomp.CoalesceVariableNames",
1339:       "com.google.javascript.rhino.jstype.ParameterizedType",
1340:       "com.google.javascript.jscomp.Compiler$4",
1341:       "com.google.javascript.jscomp.GlobalNamespace$Ref",
1342:       "com.google.javascript.jscomp.NodeTraversal$AbstractShallowCallback",
1343:       "com.google.javascript.jscomp.FieldCleanupPass$QualifiedNameSearchTraversal",
1344:       "com.google.javascript.jscomp.MoveFunctionDeclarations",
1345:       "com.google.javascript.jscomp.ReplaceIdGenerators",
1346:       "com.google.javascript.jscomp.AbstractMessageFormatter$1",
1347:       "com.google.javascript.jscomp.AbstractMessageFormatter$Color",
1348:       "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator",
1349:       "com.google.common.collect.LinkedListMultimap$3",
1350:       "com.google.common.collect.LinkedListMultimap$NodeIterator",
1351:       "com.google.common.collect.LinkedListMultimap$3$1",
1352:       "com.google.javascript.rhino.head.ast.ErrorNode",
1353:       "com.google.javascript.jscomp.GlobalNamespace$Name$Type",
1354:       "com.google.javascript.jscomp.NameReferenceGraph$Reference",
1355:       "com.google.javascript.jscomp.GatherRawExports",
1356:       "com.google.common.collect.AbstractMultimap$4",
1357:       "com.google.common.collect.Multimaps$Values$1",
1358:       "com.google.common.collect.AbstractMultimap$SortedAsMap",
1359:       "com.google.javascript.jscomp.RenameProperties$1",
1360:       "com.google.javascript.jscomp.RenameProperties",
1361:       "com.google.javascript.jscomp.LoggerErrorManager$1",
1362:       "com.google.javascript.jscomp.Compiler$8",
1363:       "com.google.common.collect.Iterators$12",
1364:       "com.google.javascript.jscomp.CodingConvention$AssertionFunctionSpec",
1365:       "com.google.javascript.jscomp.ClosureCodingConvention$AssertInstanceofSpec",
1366:       "com.google.javascript.jscomp.MethodCompilerPass$GetExternMethods",
1367:       "com.google.javascript.jscomp.MethodCompilerPass$GatherSignatures",
1368:       "com.google.javascript.jscomp.CustomPassExecutionTime",
1369:       "com.google.common.collect.AbstractIterator",
1370:       "com.google.common.collect.Iterators$7",
1371:       "com.google.common.collect.AbstractIterator$State",
1372:       "com.google.javascript.jscomp.XtbMessageBundle$SecureEntityResolver",
1373:       "com.google.javascript.jscomp.XtbMessageBundle",
1374:       "com.google.javascript.jscomp.GoogleJsMessageIdGenerator",
1375:       "com.google.javascript.jscomp.XtbMessageBundle$Handler",
1376:       "com.google.javascript.jscomp.Compiler$5",
1377:       "com.google.javascript.jscomp.AbstractCompiler$LifeCycleStage",
1378:       "com.google.common.collect.Count",
1379:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
1380:     );
1381:   }
1382: }

[MASTER] 19:10:53.614 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
assertNotNull(nodeUtil_MayBeStringResultPredicate0);

PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
assertNotNull(peepholeSubstituteAlternateSyntax0);

Compiler compiler0 = new Compiler();
assertNotNull(compiler0);
assertEquals(0.0, compiler0.getProgress(), 0.01);

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

Vector<JSType> vector0 = new Vector<JSType>();
assertNotNull(vector0);
assertEquals(0, vector0.size());
assertEquals("[]", vector0.toString());
assertEquals(10, vector0.capacity());
assertTrue(vector0.isEmpty());

Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
assertNotNull(node0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals("[]", vector0.toString());
assertEquals(10, vector0.capacity());
assertTrue(vector0.isEmpty());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertTrue(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isFromExterns());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertNull(node0.getSourceFileName());
assertFalse(node0.isOr());
assertEquals(83, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(44, Node.IS_OPTIONAL_PARAM);

Node node1 = new Node(19, node0, node0, node0, node0);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals("[]", vector0.toString());
assertEquals(10, vector0.capacity());
assertTrue(vector0.isEmpty());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertTrue(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isFromExterns());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertNull(node0.getSourceFileName());
assertFalse(node0.isOr());
assertEquals(83, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertFalse(node1.isWith());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isThis());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getSourceOffset());
assertFalse(node1.isScript());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertEquals(19, node1.getType());
assertNull(node1.getSourceFileName());
assertFalse(node1.isInc());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isWhile());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isAnd());
assertFalse(node1.isFromExterns());
assertFalse(node1.isGetProp());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(54, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);

simpleErrorReporter0.error("Nu/m{@gYC:Qye", "R#", 39, (-1330));
Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(iterable0.contains(node1));
assertFalse(node0.equals((Object)node1));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals("[]", vector0.toString());
assertEquals(10, vector0.capacity());
assertTrue(vector0.isEmpty());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertTrue(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isFromExterns());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertNull(node0.getSourceFileName());
assertFalse(node0.isOr());
assertEquals(83, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertNotSame(node0, node1);

Iterable<Node> iterable1 = node0.children();
assertNotNull(iterable1);
assertFalse(iterable1.contains(node1));
assertFalse(node0.equals((Object)node1));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals("[]", vector0.toString());
assertEquals(10, vector0.capacity());
assertTrue(vector0.isEmpty());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertTrue(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isFromExterns());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertNull(node0.getSourceFileName());
assertFalse(node0.isOr());
assertEquals(83, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertNotSame(node0, node1);
assertSame(iterable1, iterable0);

boolean boolean0 = NodeUtil.containsFunction(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals("[]", vector0.toString());
assertEquals(10, vector0.capacity());
assertTrue(vector0.isEmpty());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertTrue(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isFromExterns());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertNull(node0.getSourceFileName());
assertFalse(node0.isOr());
assertEquals(83, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(boolean0);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertNotSame(node0, node1);

Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
assertNotNull(node2);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals("[]", vector0.toString());
assertEquals(10, vector0.capacity());
assertTrue(vector0.isEmpty());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertFalse(node2.isBlock());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFunction());
assertFalse(node2.isWhile());
assertFalse(node2.isTry());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabelName());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetElem());
assertFalse(node2.isFromExterns());
assertFalse(node2.isLabel());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isVoid());
assertFalse(node2.isNew());
assertNull(node2.getSourceFileName());
assertFalse(node2.isOr());
assertFalse(node2.isComma());
assertEquals(83, node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isWith());
assertFalse(node2.isHook());
assertFalse(node2.isSwitch());
assertFalse(node2.isScript());
assertFalse(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isObjectLit());
assertTrue(node2.isParamList());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertEquals((-1), node2.getSourcePosition());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourceOffset());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isFor());
assertFalse(node2.isInc());
assertFalse(node2.isRegExp());
assertFalse(node2.isIn());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.LAST_PROP);
assertNotSame(node2, node1);
assertNotSame(node2, node0);

Stack<CompilerOptions.TracerMode> stack0 = new Stack<CompilerOptions.TracerMode>();
assertNotNull(stack0);
assertTrue(stack0.empty());
assertTrue(stack0.isEmpty());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertEquals(0, stack0.size());

boolean boolean1 = NodeUtil.isSimpleOperatorType(33);
assertFalse(boolean1 == boolean0);
assertTrue(boolean1);

StaticSourceFile staticSourceFile0 = NodeUtil.getSourceFile(node0);
assertNull(staticSourceFile0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, vector0.size());
assertEquals("[]", vector0.toString());
assertEquals(10, vector0.capacity());
assertTrue(vector0.isEmpty());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCase());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertTrue(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isFromExterns());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertNull(node0.getSourceFileName());
assertFalse(node0.isOr());
assertEquals(83, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertNotSame(node0, node2);
assertNotSame(node0, node1);

String string0 = NodeUtil.opToStr(85);
assertNull(string0);


[MASTER] 19:11:00.774 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_139_1566407459105/com/google/javascript/jscomp/NodeUtil_139_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_139_1566407459105/com/google/javascript/jscomp/NodeUtil_139_tmp__ESTest_scaffolding.java]]
[MASTER] 19:11:00.790 [logback-2] ERROR JUnitAnalyzer - Classpath: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/tools/evosuite.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/classes:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/args4j.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/guava.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/json.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/jsr305.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/protobuf-java.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/lib/rhino.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/ant.jar
[MASTER] 19:11:00.790 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/rq3/botsing-integration-experiment/tools/evosuite.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/classes:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/args4j.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/guava.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/json.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/jsr305.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/protobuf-java.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/lib/rhino.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/ant.jar
[MASTER] 19:11:00.791 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 413
[MASTER] 19:11:00.795 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_139_1566407459105/com/google/javascript/jscomp/NodeUtil_139_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Aug 21 17:10:59 GMT 2019
4:  */
5: 
6: package com.google.javascript.jscomp;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.jscomp.Compiler;
11: import com.google.javascript.jscomp.CompilerOptions;
12: import com.google.javascript.jscomp.ExploitAssigns;
13: import com.google.javascript.jscomp.NodeTraversal;
14: import com.google.javascript.jscomp.NodeUtil;
15: import com.google.javascript.jscomp.PassConfig;
16: import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
17: import com.google.javascript.jscomp.ReorderConstantExpression;
18: import com.google.javascript.rhino.Node;
19: import com.google.javascript.rhino.SimpleErrorReporter;
20: import com.google.javascript.rhino.jstype.BooleanLiteralSet;
21: import com.google.javascript.rhino.jstype.FunctionType;
22: import com.google.javascript.rhino.jstype.JSType;
23: import com.google.javascript.rhino.jstype.JSTypeRegistry;
24: import com.google.javascript.rhino.jstype.ModificationVisitor;
25: import java.util.List;
26: import java.util.Vector;
27: import org.evosuite.runtime.EvoRunner;
28: import org.evosuite.runtime.EvoRunnerParameters;
29: import org.junit.runner.RunWith;
30: 
31: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
32: public class NodeUtil_139_tmp__ESTest extends NodeUtil_139_tmp__ESTest_scaffolding {
33: 
34:   @Test(timeout = 4000)
35:   public void test0()  throws Throwable  {
36:       ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
37:       assertNotNull(reorderConstantExpression0);
38:       
39:       NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(3);
40:       assertNotNull(nodeUtil_MatchNodeType0);
41:       
42:       PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
43:       assertNotNull(peepholeSubstituteAlternateSyntax0);
44:       
45:       Compiler compiler0 = new Compiler();
46:       assertNotNull(compiler0);
47:       assertEquals(0.0, compiler0.getProgress(), 0.01);
48:       
49:       PassConfig passConfig0 = compiler0.getPassConfig();
50:       assertNotNull(passConfig0);
51:       assertEquals(0.0, compiler0.getProgress(), 0.01);
52:       
53:       NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
54:       assertNotNull(nodeTraversal0);
55:       assertEquals(0.0, compiler0.getProgress(), 0.01);
56:       assertEquals("", nodeTraversal0.getSourceName());
57:       assertEquals(0, nodeTraversal0.getLineNumber());
58:       
59:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
60:       assertNotNull(simpleErrorReporter0);
61:       
62:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
63:       assertNotNull(jSTypeRegistry0);
64:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
65:       
66:       Vector<JSType> vector0 = new Vector<JSType>();
67:       assertNotNull(vector0);
68:       assertEquals(10, vector0.capacity());
69:       assertEquals("[]", vector0.toString());
70:       assertTrue(vector0.isEmpty());
71:       assertEquals(0, vector0.size());
72:       
73:       Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
74:       assertNotNull(node0);
75:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
76:       assertEquals(10, vector0.capacity());
77:       assertEquals("[]", vector0.toString());
78:       assertTrue(vector0.isEmpty());
79:       assertEquals(0, vector0.size());
80:       assertFalse(node0.isGetElem());
81:       assertFalse(node0.hasOneChild());
82:       assertFalse(node0.isLabelName());
83:       assertFalse(node0.isExprResult());
84:       assertFalse(node0.isLabel());
85:       assertFalse(node0.isReturn());
86:       assertFalse(node0.hasChildren());
87:       assertFalse(node0.isDec());
88:       assertFalse(node0.isTypeOf());
89:       assertFalse(node0.isAssign());
90:       assertFalse(node0.isWith());
91:       assertFalse(node0.hasMoreThanOneChild());
92:       assertFalse(node0.isAnd());
93:       assertFalse(node0.isObjectLit());
94:       assertFalse(node0.isContinue());
95:       assertFalse(node0.isWhile());
96:       assertFalse(node0.isFromExterns());
97:       assertFalse(node0.isScript());
98:       assertFalse(node0.isGetProp());
99:       assertEquals((-1), node0.getSourcePosition());
100:       assertFalse(node0.isNot());
101:       assertTrue(node0.isParamList());
102:       assertFalse(node0.isNumber());
103:       assertFalse(node0.isCall());
104:       assertFalse(node0.isStringKey());
105:       assertFalse(node0.isVar());
106:       assertFalse(node0.isBreak());
107:       assertFalse(node0.isName());
108:       assertFalse(node0.isComma());
109:       assertEquals(0, node0.getChildCount());
110:       assertFalse(node0.isAssignAdd());
111:       assertFalse(node0.isDo());
112:       assertFalse(node0.isDefaultCase());
113:       assertFalse(node0.isTrue());
114:       assertFalse(node0.isNew());
115:       assertFalse(node0.isNull());
116:       assertFalse(node0.isAdd());
117:       assertNull(node0.getSourceFileName());
118:       assertFalse(node0.isOr());
119:       assertEquals(83, node0.getType());
120:       assertFalse(node0.isEmpty());
121:       assertFalse(node0.isArrayLit());
122:       assertEquals((-1), node0.getSourceOffset());
123:       assertFalse(node0.isFor());
124:       assertFalse(node0.isDelProp());
125:       assertFalse(node0.isIf());
126:       assertFalse(node0.isTry());
127:       assertFalse(node0.isVoid());
128:       assertFalse(node0.isRegExp());
129:       assertFalse(node0.isFunction());
130:       assertFalse(node0.isCase());
131:       assertFalse(node0.isSwitch());
132:       assertFalse(node0.isDebugger());
133:       assertEquals((-1), node0.getCharno());
134:       assertFalse(node0.isString());
135:       assertFalse(node0.isGetterDef());
136:       assertFalse(node0.isThrow());
137:       assertFalse(node0.isHook());
138:       assertFalse(node0.isBlock());
139:       assertFalse(node0.isThis());
140:       assertFalse(node0.isInstanceOf());
141:       assertFalse(node0.isFalse());
142:       assertFalse(node0.isCatch());
143:       assertEquals((-1), node0.getLineno());
144:       assertFalse(node0.isNE());
145:       assertFalse(node0.isInc());
146:       assertFalse(node0.isSetterDef());
147:       assertFalse(node0.isIn());
148:       assertEquals(8, Node.FLAG_NO_THROWS);
149:       assertEquals(39, Node.EMPTY_BLOCK);
150:       assertEquals(48, Node.DIRECTIVES);
151:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
152:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
153:       assertEquals(50, Node.FREE_CALL);
154:       assertEquals(41, Node.BRACELESS_TYPE);
155:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
156:       assertEquals(52, Node.LENGTH);
157:       assertEquals(54, Node.SLASH_V);
158:       assertEquals(35, Node.PARENTHESIZED_PROP);
159:       assertEquals(16, Node.SOURCENAME_PROP);
160:       assertEquals(43, Node.IS_CONSTANT_NAME);
161:       assertEquals(40, Node.ORIGINALNAME_PROP);
162:       assertEquals(30, Node.VAR_ARGS_NAME);
163:       assertEquals(37, Node.OPT_ARG_NAME);
164:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
165:       assertEquals(2, Node.POST_FLAG);
166:       assertEquals(32, Node.INCRDECR_PROP);
167:       assertEquals(46, Node.IS_NAMESPACE);
168:       assertEquals(47, Node.IS_DISPATCHER);
169:       assertEquals(12, Node.COLUMN_BITS);
170:       assertEquals(51, Node.STATIC_SOURCE_FILE);
171:       assertEquals(1, Node.DECR_FLAG);
172:       assertEquals(15, Node.NO_SIDE_EFFECTS);
173:       assertEquals(29, Node.JSDOC_INFO_PROP);
174:       assertEquals(53, Node.INPUT_ID);
175:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
176:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
177:       assertEquals(54, Node.LAST_PROP);
178:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
179:       assertEquals(36, Node.QUOTED_PROP);
180:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
181:       assertEquals(49, Node.DIRECT_EVAL);
182:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
183:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
184:       assertEquals(4095, Node.COLUMN_MASK);
185:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
186:       
187:       ExploitAssigns exploitAssigns0 = new ExploitAssigns();
188:       assertNotNull(exploitAssigns0);
189:       
190:       Node node1 = new Node(37, node0, node0, node0, node0);
191:       assertNotNull(node1);
192:       assertFalse(node1.equals((Object)node0));
193:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
194:       assertEquals(10, vector0.capacity());
195:       assertEquals("[]", vector0.toString());
196:       assertTrue(vector0.isEmpty());
197:       assertEquals(0, vector0.size());
198:       assertFalse(node0.isGetElem());
199:       assertFalse(node0.hasOneChild());
200:       assertFalse(node0.isLabelName());
201:       assertFalse(node0.isExprResult());
202:       assertFalse(node0.isLabel());
203:       assertFalse(node0.isReturn());
204:       assertFalse(node0.hasChildren());
205:       assertFalse(node0.isDec());
206:       assertFalse(node0.isTypeOf());
207:       assertFalse(node0.isAssign());
208:       assertFalse(node0.isWith());
209:       assertFalse(node0.hasMoreThanOneChild());
210:       assertFalse(node0.isAnd());
211:       assertFalse(node0.isObjectLit());
212:       assertFalse(node0.isContinue());
213:       assertFalse(node0.isWhile());
214:       assertFalse(node0.isFromExterns());
215:       assertFalse(node0.isScript());
216:       assertFalse(node0.isGetProp());
217:       assertEquals((-1), node0.getSourcePosition());
218:       assertFalse(node0.isNot());
219:       assertTrue(node0.isParamList());
220:       assertFalse(node0.isNumber());
221:       assertFalse(node0.isCall());
222:       assertFalse(node0.isStringKey());
223:       assertFalse(node0.isVar());
224:       assertFalse(node0.isBreak());
225:       assertFalse(node0.isName());
226:       assertFalse(node0.isComma());
227:       assertEquals(0, node0.getChildCount());
228:       assertFalse(node0.isAssignAdd());
229:       assertFalse(node0.isDo());
230:       assertFalse(node0.isDefaultCase());
231:       assertFalse(node0.isTrue());
232:       assertFalse(node0.isNew());
233:       assertFalse(node0.isNull());
234:       assertFalse(node0.isAdd());
235:       assertNull(node0.getSourceFileName());
236:       assertFalse(node0.isOr());
237:       assertEquals(83, node0.getType());
238:       assertFalse(node0.isEmpty());
239:       assertFalse(node0.isArrayLit());
240:       assertEquals((-1), node0.getSourceOffset());
241:       assertFalse(node0.isFor());
242:       assertFalse(node0.isDelProp());
243:       assertFalse(node0.isIf());
244:       assertFalse(node0.isTry());
245:       assertFalse(node0.isVoid());
246:       assertFalse(node0.isRegExp());
247:       assertFalse(node0.isFunction());
248:       assertFalse(node0.isCase());
249:       assertFalse(node0.isSwitch());
250:       assertFalse(node0.isDebugger());
251:       assertEquals((-1), node0.getCharno());
252:       assertFalse(node0.isString());
253:       assertFalse(node0.isGetterDef());
254:       assertFalse(node0.isThrow());
255:       assertFalse(node0.isHook());
256:       assertFalse(node0.isBlock());
257:       assertFalse(node0.isThis());
258:       assertFalse(node0.isInstanceOf());
259:       assertFalse(node0.isFalse());
260:       assertFalse(node0.isCatch());
261:       assertEquals((-1), node0.getLineno());
262:       assertFalse(node0.isNE());
263:       assertFalse(node0.isInc());
264:       assertFalse(node0.isSetterDef());
265:       assertFalse(node0.isIn());
266:       assertFalse(node1.isThrow());
267:       assertFalse(node1.isBreak());
268:       assertFalse(node1.isComma());
269:       assertFalse(node1.isFalse());
270:       assertFalse(node1.isGetProp());
271:       assertFalse(node1.isInc());
272:       assertFalse(node1.isThis());
273:       assertFalse(node1.isHook());
274:       assertFalse(node1.isInstanceOf());
275:       assertEquals(37, node1.getType());
276:       assertFalse(node1.isIn());
277:       assertFalse(node1.isWith());
278:       assertTrue(node1.hasChildren());
279:       assertFalse(node1.isExprResult());
280:       assertTrue(node1.isCall());
281:       assertFalse(node1.isNE());
282:       assertFalse(node1.isDelProp());
283:       assertFalse(node1.isIf());
284:       assertFalse(node1.isAssign());
285:       assertFalse(node1.isGetElem());
286:       assertTrue(node1.hasOneChild());
287:       assertEquals((-1), node1.getSourcePosition());
288:       assertFalse(node1.isTypeOf());
289:       assertFalse(node1.isDec());
290:       assertFalse(node1.isReturn());
291:       assertFalse(node1.isFromExterns());
292:       assertFalse(node1.isNot());
293:       assertFalse(node1.isObjectLit());
294:       assertFalse(node1.isString());
295:       assertFalse(node1.isContinue());
296:       assertFalse(node1.isFunction());
297:       assertFalse(node1.isDebugger());
298:       assertFalse(node1.isAnd());
299:       assertFalse(node1.isName());
300:       assertFalse(node1.isStringKey());
301:       assertNull(node1.getSourceFileName());
302:       assertFalse(node1.isNew());
303:       assertFalse(node1.isAdd());
304:       assertFalse(node1.isBlock());
305:       assertFalse(node1.isSetterDef());
306:       assertFalse(node1.isVar());
307:       assertFalse(node1.isWhile());
308:       assertFalse(node1.isDo());
309:       assertFalse(node1.isRegExp());
310:       assertFalse(node1.isCatch());
311:       assertFalse(node1.hasMoreThanOneChild());
312:       assertEquals((-1), node1.getLineno());
313:       assertFalse(node1.isOr());
314:       assertFalse(node1.isTrue());
315:       assertFalse(node1.isNull());
316:       assertFalse(node1.isVoid());
317:       assertFalse(node1.isEmpty());
318:       assertFalse(node1.isLabelName());
319:       assertFalse(node1.isFor());
320:       assertEquals((-1), node1.getSourceOffset());
321:       assertFalse(node1.isGetterDef());
322:       assertFalse(node1.isNumber());
323:       assertFalse(node1.isLabel());
324:       assertFalse(node1.isTry());
325:       assertEquals(1, node1.getChildCount());
326:       assertFalse(node1.isAssignAdd());
327:       assertFalse(node1.isDefaultCase());
328:       assertFalse(node1.isCase());
329:       assertFalse(node1.isScript());
330:       assertEquals((-1), node1.getCharno());
331:       assertFalse(node1.isArrayLit());
332:       assertFalse(node1.isParamList());
333:       assertFalse(node1.isSwitch());
334:       assertEquals(8, Node.FLAG_NO_THROWS);
335:       assertEquals(39, Node.EMPTY_BLOCK);
336:       assertEquals(48, Node.DIRECTIVES);
337:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
338:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
339:       assertEquals(50, Node.FREE_CALL);
340:       assertEquals(41, Node.BRACELESS_TYPE);
341:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
342:       assertEquals(52, Node.LENGTH);
343:       assertEquals(54, Node.SLASH_V);
344:       assertEquals(35, Node.PARENTHESIZED_PROP);
345:       assertEquals(16, Node.SOURCENAME_PROP);
346:       assertEquals(43, Node.IS_CONSTANT_NAME);
347:       assertEquals(40, Node.ORIGINALNAME_PROP);
348:       assertEquals(30, Node.VAR_ARGS_NAME);
349:       assertEquals(37, Node.OPT_ARG_NAME);
350:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
351:       assertEquals(2, Node.POST_FLAG);
352:       assertEquals(32, Node.INCRDECR_PROP);
353:       assertEquals(46, Node.IS_NAMESPACE);
354:       assertEquals(47, Node.IS_DISPATCHER);
355:       assertEquals(12, Node.COLUMN_BITS);
356:       assertEquals(51, Node.STATIC_SOURCE_FILE);
357:       assertEquals(1, Node.DECR_FLAG);
358:       assertEquals(15, Node.NO_SIDE_EFFECTS);
359:       assertEquals(29, Node.JSDOC_INFO_PROP);
360:       assertEquals(53, Node.INPUT_ID);
361:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
362:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
363:       assertEquals(54, Node.LAST_PROP);
364:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
365:       assertEquals(36, Node.QUOTED_PROP);
366:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
367:       assertEquals(49, Node.DIRECT_EVAL);
368:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
369:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
370:       assertEquals(4095, Node.COLUMN_MASK);
371:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
372:       assertEquals(37, Node.OPT_ARG_NAME);
373:       assertEquals(32, Node.INCRDECR_PROP);
374:       assertEquals(2, Node.POST_FLAG);
375:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
376:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
377:       assertEquals(49, Node.DIRECT_EVAL);
378:       assertEquals(51, Node.STATIC_SOURCE_FILE);
379:       assertEquals(46, Node.IS_NAMESPACE);
380:       assertEquals(54, Node.SLASH_V);
381:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
382:       assertEquals(41, Node.BRACELESS_TYPE);
383:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
384:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
385:       assertEquals(1, Node.DECR_FLAG);
386:       assertEquals(12, Node.COLUMN_BITS);
387:       assertEquals(54, Node.LAST_PROP);
388:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
389:       assertEquals(48, Node.DIRECTIVES);
390:       assertEquals(4095, Node.COLUMN_MASK);
391:       assertEquals(8, Node.FLAG_NO_THROWS);
392:       assertEquals(39, Node.EMPTY_BLOCK);
393:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
394:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
395:       assertEquals(50, Node.FREE_CALL);
396:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
397:       assertEquals(43, Node.IS_CONSTANT_NAME);
398:       assertEquals(36, Node.QUOTED_PROP);
399:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
400:       assertEquals(16, Node.SOURCENAME_PROP);
401:       assertEquals(53, Node.INPUT_ID);
402:       assertEquals(35, Node.PARENTHESIZED_PROP);
403:       assertEquals(52, Node.LENGTH);
404:       assertEquals(15, Node.NO_SIDE_EFFECTS);
405:       assertEquals(40, Node.ORIGINALNAME_PROP);
406:       assertEquals(29, Node.JSDOC_INFO_PROP);
407:       assertEquals(30, Node.VAR_ARGS_NAME);
408:       assertEquals(47, Node.IS_DISPATCHER);
409:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
410:       
411:       Iterable<Node> iterable0 = node0.children();
412:       assertNotNull(iterable0);
413:       assertFalse(iterable0.contains(node0));
414:       assertFalse(node0.equals((Object)node1));
415:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
416:       assertEquals(10, vector0.capacity());
417:       assertEquals("[]", vector0.toString());
418:       assertTrue(vector0.isEmpty());
419:       assertEquals(0, vector0.size());
420:       assertFalse(node0.isGetElem());
421:       assertFalse(node0.hasOneChild());
422:       assertFalse(node0.isLabelName());
423:       assertFalse(node0.isExprResult());
424:       assertFalse(node0.isLabel());
425:       assertFalse(node0.isReturn());
426:       assertFalse(node0.hasChildren());
427:       assertFalse(node0.isDec());
428:       assertFalse(node0.isTypeOf());
429:       assertFalse(node0.isAssign());
430:       assertFalse(node0.isWith());
431:       assertFalse(node0.hasMoreThanOneChild());
432:       assertFalse(node0.isAnd());
433:       assertFalse(node0.isObjectLit());
434:       assertFalse(node0.isContinue());
435:       assertFalse(node0.isWhile());
436:       assertFalse(node0.isFromExterns());
437:       assertFalse(node0.isScript());
438:       assertFalse(node0.isGetProp());
439:       assertEquals((-1), node0.getSourcePosition());
440:       assertFalse(node0.isNot());
441:       assertTrue(node0.isParamList());
442:       assertFalse(node0.isNumber());
443:       assertFalse(node0.isCall());
444:       assertFalse(node0.isStringKey());
445:       assertFalse(node0.isVar());
446:       assertFalse(node0.isBreak());
447:       assertFalse(node0.isName());
448:       assertFalse(node0.isComma());
449:       assertEquals(0, node0.getChildCount());
450:       assertFalse(node0.isAssignAdd());
451:       assertFalse(node0.isDo());
452:       assertFalse(node0.isDefaultCase());
453:       assertFalse(node0.isTrue());
454:       assertFalse(node0.isNew());
455:       assertFalse(node0.isNull());
456:       assertFalse(node0.isAdd());
457:       assertNull(node0.getSourceFileName());
458:       assertFalse(node0.isOr());
459:       assertEquals(83, node0.getType());
460:       assertFalse(node0.isEmpty());
461:       assertFalse(node0.isArrayLit());
462:       assertEquals((-1), node0.getSourceOffset());
463:       assertFalse(node0.isFor());
464:       assertFalse(node0.isDelProp());
465:       assertFalse(node0.isIf());
466:       assertFalse(node0.isTry());
467:       assertFalse(node0.isVoid());
468:       assertFalse(node0.isRegExp());
469:       assertFalse(node0.isFunction());
470:       assertFalse(node0.isCase());
471:       assertFalse(node0.isSwitch());
472:       assertFalse(node0.isDebugger());
473:       assertEquals((-1), node0.getCharno());
474:       assertFalse(node0.isString());
475:       assertFalse(node0.isGetterDef());
476:       assertFalse(node0.isThrow());
477:       assertFalse(node0.isHook());
478:       assertFalse(node0.isBlock());
479:       assertFalse(node0.isThis());
480:       assertFalse(node0.isInstanceOf());
481:       assertFalse(node0.isFalse());
482:       assertFalse(node0.isCatch());
483:       assertEquals((-1), node0.getLineno());
484:       assertFalse(node0.isNE());
485:       assertFalse(node0.isInc());
486:       assertFalse(node0.isSetterDef());
487:       assertFalse(node0.isIn());
488:       assertEquals(8, Node.FLAG_NO_THROWS);
489:       assertEquals(39, Node.EMPTY_BLOCK);
490:       assertEquals(48, Node.DIRECTIVES);
491:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
492:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
493:       assertEquals(50, Node.FREE_CALL);
494:       assertEquals(41, Node.BRACELESS_TYPE);
495:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
496:       assertEquals(52, Node.LENGTH);
497:       assertEquals(54, Node.SLASH_V);
498:       assertEquals(35, Node.PARENTHESIZED_PROP);
499:       assertEquals(16, Node.SOURCENAME_PROP);
500:       assertEquals(43, Node.IS_CONSTANT_NAME);
501:       assertEquals(40, Node.ORIGINALNAME_PROP);
502:       assertEquals(30, Node.VAR_ARGS_NAME);
503:       assertEquals(37, Node.OPT_ARG_NAME);
504:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
505:       assertEquals(2, Node.POST_FLAG);
506:       assertEquals(32, Node.INCRDECR_PROP);
507:       assertEquals(46, Node.IS_NAMESPACE);
508:       assertEquals(47, Node.IS_DISPATCHER);
509:       assertEquals(12, Node.COLUMN_BITS);
510:       assertEquals(51, Node.STATIC_SOURCE_FILE);
511:       assertEquals(1, Node.DECR_FLAG);
512:       assertEquals(15, Node.NO_SIDE_EFFECTS);
513:       assertEquals(29, Node.JSDOC_INFO_PROP);
514:       assertEquals(53, Node.INPUT_ID);
515:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
516:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
517:       assertEquals(54, Node.LAST_PROP);
518:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
519:       assertEquals(36, Node.QUOTED_PROP);
520:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
521:       assertEquals(49, Node.DIRECT_EVAL);
522:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
523:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
524:       assertEquals(4095, Node.COLUMN_MASK);
525:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
526:       
527:       ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
528:       assertNotNull(modificationVisitor0);
529:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
530:       
531:       JSType jSType0 = modificationVisitor0.caseNullType();
532:       assertNotNull(jSType0);
533:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
534:       assertFalse(jSType0.isNoType());
535:       assertFalse(jSType0.isNoObjectType());
536:       assertFalse(jSType0.isRecordType());
537:       assertFalse(jSType0.isUnionType());
538:       assertFalse(jSType0.isNoResolvedType());
539:       assertFalse(jSType0.isOrdinaryFunction());
540:       assertFalse(jSType0.isResolved());
541:       assertFalse(jSType0.isStringValueType());
542:       assertFalse(jSType0.isParameterizedType());
543:       assertFalse(jSType0.isInterface());
544:       assertFalse(jSType0.isBooleanValueType());
545:       assertTrue(jSType0.isNullType());
546:       assertFalse(jSType0.matchesObjectContext());
547:       assertFalse(jSType0.isNominalConstructor());
548:       assertFalse(jSType0.isEnumType());
549:       assertFalse(jSType0.isFunctionPrototypeType());
550:       assertFalse(jSType0.isEnumElementType());
551:       assertTrue(jSType0.matchesStringContext());
552:       assertFalse(jSType0.isVoidType());
553:       assertFalse(jSType0.isTemplateType());
554:       assertFalse(jSType0.isAllType());
555:       assertTrue(jSType0.isNullable());
556:       assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
557:       assertTrue(jSType0.matchesNumberContext());
558:       assertFalse(jSType0.isFunctionType());
559:       assertEquals("null", jSType0.getDisplayName());
560:       assertFalse(jSType0.isNumberValueType());
561:       assertFalse(jSType0.isNominalType());
562:       assertFalse(jSType0.isConstructor());
563:       assertFalse(jSType0.isCheckedUnknownType());
564:       assertEquals(0, JSType.NOT_ENUMDECL);
565:       assertEquals(1, JSType.ENUMDECL);
566:       
567:       JSType[] jSTypeArray0 = new JSType[5];
568:       jSTypeArray0[0] = jSType0;
569:       jSTypeArray0[1] = jSType0;
570:       jSTypeArray0[2] = jSType0;
571:       jSTypeArray0[3] = jSType0;
572:       jSTypeArray0[4] = jSType0;
573:       FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSType0, jSTypeArray0);
574:       assertNotNull(functionType0);
575:       assertFalse(functionType0.hasCachedValues());
576:       assertFalse(functionType0.isNoObjectType());
577:       assertFalse(functionType0.isNoType());
578:       assertTrue(functionType0.hasInstanceType());
579:       assertTrue(functionType0.isConstructor());
580:       assertTrue(functionType0.isObject());
581:       assertFalse(functionType0.isParameterizedType());
582:       assertFalse(functionType0.isStringValueType());
583:       assertFalse(functionType0.isResolved());
584:       assertFalse(functionType0.isReturnTypeInferred());
585:       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
586:       assertFalse(functionType0.isNominalType());
587:       assertFalse(functionType0.isInterface());
588:       assertFalse(functionType0.isTemplateType());
589:       assertFalse(functionType0.isAllType());
590:       assertFalse(functionType0.isEnumElementType());
591:       assertTrue(functionType0.canBeCalled());
592:       assertEquals(0, functionType0.getExtendedInterfacesCount());
593:       assertFalse(functionType0.isOrdinaryFunction());
594:       assertFalse(functionType0.isNominalConstructor());
595:       assertTrue(functionType0.isFunctionType());
596:       assertFalse(functionType0.isNullType());
597:       assertFalse(functionType0.isCheckedUnknownType());
598:       assertFalse(functionType0.isVoidType());
599:       assertFalse(functionType0.isEnumType());
600:       assertFalse(functionType0.isFunctionPrototypeType());
601:       assertFalse(functionType0.isNumberValueType());
602:       assertFalse(functionType0.isUnionType());
603:       assertFalse(functionType0.isBooleanValueType());
604:       assertFalse(functionType0.isRecordType());
605:       assertFalse(functionType0.isNoResolvedType());
606:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
607:       assertFalse(jSType0.isNoType());
608:       assertFalse(jSType0.isNoObjectType());
609:       assertFalse(jSType0.isRecordType());
610:       assertFalse(jSType0.isUnionType());
611:       assertFalse(jSType0.isNoResolvedType());
612:       assertFalse(jSType0.isOrdinaryFunction());
613:       assertFalse(jSType0.isResolved());
614:       assertFalse(jSType0.isStringValueType());
615:       assertFalse(jSType0.isParameterizedType());
616:       assertFalse(jSType0.isInterface());
617:       assertFalse(jSType0.isBooleanValueType());
618:       assertTrue(jSType0.isNullType());
619:       assertFalse(jSType0.matchesObjectContext());
620:       assertFalse(jSType0.isNominalConstructor());
621:       assertFalse(jSType0.isEnumType());
622:       assertFalse(jSType0.isFunctionPrototypeType());
623:       assertFalse(jSType0.isEnumElementType());
624:       assertTrue(jSType0.matchesStringContext());
625:       assertFalse(jSType0.isVoidType());
626:       assertFalse(jSType0.isTemplateType());
627:       assertFalse(jSType0.isAllType());
628:       assertTrue(jSType0.isNullable());
629:       assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
630:       assertTrue(jSType0.matchesNumberContext());
631:       assertFalse(jSType0.isFunctionType());
632:       assertEquals("null", jSType0.getDisplayName());
633:       assertFalse(jSType0.isNumberValueType());
634:       assertFalse(jSType0.isNominalType());
635:       assertFalse(jSType0.isConstructor());
636:       assertFalse(jSType0.isCheckedUnknownType());
637:       assertEquals(1, JSType.ENUMDECL);
638:       assertEquals(0, JSType.NOT_ENUMDECL);
639:       assertEquals(0, JSType.NOT_ENUMDECL);
640:       assertEquals(1, JSType.ENUMDECL);
641:       
642:       Node node2 = compiler0.parseTestCode("Infinity");
643:       assertNotNull(node2);
644:       assertFalse(node2.equals((Object)node0));
645:       assertFalse(node2.equals((Object)node1));
646:       assertEquals(0, compiler0.getWarningCount());
647:       assertFalse(compiler0.hasErrors());
648:       assertFalse(compiler0.isIdeMode());
649:       assertFalse(compiler0.acceptConstKeyword());
650:       assertEquals(0, compiler0.getErrorCount());
651:       assertEquals(0.0, compiler0.getProgress(), 0.01);
652:       assertFalse(compiler0.isTypeCheckingEnabled());
653:       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
654:       assertFalse(node2.isAssign());
655:       assertFalse(node2.isDec());
656:       assertFalse(node2.isNumber());
657:       assertFalse(node2.isAssignAdd());
658:       assertEquals("[testcode]", node2.getSourceFileName());
659:       assertFalse(node2.isFromExterns());
660:       assertFalse(node2.hasMoreThanOneChild());
661:       assertFalse(node2.isInstanceOf());
662:       assertFalse(node2.isOr());
663:       assertFalse(node2.isWith());
664:       assertFalse(node2.isReturn());
665:       assertFalse(node2.isComma());
666:       assertFalse(node2.isExprResult());
667:       assertFalse(node2.isTypeOf());
668:       assertEquals(0, node2.getCharno());
669:       assertFalse(node2.isGetElem());
670:       assertFalse(node2.isBreak());
671:       assertFalse(node2.isVar());
672:       assertFalse(node2.isHook());
673:       assertFalse(node2.isStringKey());
674:       assertEquals(4096, node2.getSourcePosition());
675:       assertFalse(node2.isBlock());
676:       assertFalse(node2.isThis());
677:       assertFalse(node2.isDo());
678:       assertFalse(node2.isAdd());
679:       assertFalse(node2.isNew());
680:       assertFalse(node2.isCase());
681:       assertFalse(node2.isLabel());
682:       assertFalse(node2.isSwitch());
683:       assertFalse(node2.isParamList());
684:       assertFalse(node2.isLabelName());
685:       assertFalse(node2.isArrayLit());
686:       assertTrue(node2.isScript());
687:       assertFalse(node2.isGetterDef());
688:       assertTrue(node2.hasOneChild());
689:       assertFalse(node2.isFor());
690:       assertFalse(node2.isDebugger());
691:       assertFalse(node2.isDefaultCase());
692:       assertFalse(node2.isEmpty());
693:       assertFalse(node2.isTry());
694:       assertFalse(node2.isCatch());
695:       assertFalse(node2.isIn());
696:       assertEquals(1, node2.getChildCount());
697:       assertFalse(node2.isNE());
698:       assertFalse(node2.isTrue());
699:       assertFalse(node2.isNull());
700:       assertEquals(132, node2.getType());
701:       assertFalse(node2.isRegExp());
702:       assertFalse(node2.isIf());
703:       assertTrue(node2.hasChildren());
704:       assertEquals(1, node2.getLineno());
705:       assertFalse(node2.isDelProp());
706:       assertFalse(node2.isName());
707:       assertFalse(node2.isVoid());
708:       assertFalse(node2.isCall());
709:       assertFalse(node2.isFalse());
710:       assertFalse(node2.isThrow());
711:       assertFalse(node2.isSetterDef());
712:       assertFalse(node2.isInc());
713:       assertFalse(node2.isString());
714:       assertFalse(node2.isWhile());
715:       assertEquals(0, node2.getSourceOffset());
716:       assertFalse(node2.isGetProp());
717:       assertFalse(node2.isObjectLit());
718:       assertFalse(node2.isContinue());
719:       assertFalse(node2.isAnd());
720:       assertFalse(node2.isNot());
721:       assertFalse(node2.isFunction());
722:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
723:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
724:       assertEquals(39, Node.EMPTY_BLOCK);
725:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
726:       assertEquals(50, Node.FREE_CALL);
727:       assertEquals(8, Node.FLAG_NO_THROWS);
728:       assertEquals(4095, Node.COLUMN_MASK);
729:       assertEquals(41, Node.BRACELESS_TYPE);
730:       assertEquals(40, Node.ORIGINALNAME_PROP);
731:       assertEquals(48, Node.DIRECTIVES);
732:       assertEquals(43, Node.IS_CONSTANT_NAME);
733:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
734:       assertEquals(54, Node.SLASH_V);
735:       assertEquals(16, Node.SOURCENAME_PROP);
736:       assertEquals(54, Node.LAST_PROP);
737:       assertEquals(12, Node.COLUMN_BITS);
738:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
739:       assertEquals(32, Node.INCRDECR_PROP);
740:       assertEquals(1, Node.DECR_FLAG);
741:       assertEquals(2, Node.POST_FLAG);
742:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
743:       assertEquals(37, Node.OPT_ARG_NAME);
744:       assertEquals(47, Node.IS_DISPATCHER);
745:       assertEquals(29, Node.JSDOC_INFO_PROP);
746:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
747:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
748:       assertEquals(51, Node.STATIC_SOURCE_FILE);
749:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
750:       assertEquals(46, Node.IS_NAMESPACE);
751:       assertEquals(49, Node.DIRECT_EVAL);
752:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
753:       assertEquals(36, Node.QUOTED_PROP);
754:       assertEquals(35, Node.PARENTHESIZED_PROP);
755:       assertEquals(15, Node.NO_SIDE_EFFECTS);
756:       assertEquals(53, Node.INPUT_ID);
757:       assertEquals(30, Node.VAR_ARGS_NAME);
758:       assertEquals(52, Node.LENGTH);
759:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
760:       
761:       Node node3 = new Node(35, node1, node2, node2, node1);
762:       assertNotNull(node3);
763:       assertFalse(node2.equals((Object)node0));
764:       assertFalse(node2.equals((Object)node1));
765:       assertFalse(node3.equals((Object)node1));
766:       assertFalse(node3.equals((Object)node2));
767:       assertFalse(node3.equals((Object)node0));
768:       assertFalse(node0.equals((Object)node1));
769:       assertFalse(node0.equals((Object)node2));
770:       assertFalse(node1.equals((Object)node0));
771:       assertFalse(node1.equals((Object)node2));
772:       assertEquals(0, compiler0.getWarningCount());
773:       assertFalse(compiler0.hasErrors());
774:       assertFalse(compiler0.isIdeMode());
775:       assertFalse(compiler0.acceptConstKeyword());
776:       assertEquals(0, compiler0.getErrorCount());
777:       assertEquals(0.0, compiler0.getProgress(), 0.01);
778:       assertFalse(compiler0.isTypeCheckingEnabled());
779:       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
780:       assertFalse(node2.isAssign());
781:       assertFalse(node2.isDec());
782:       assertFalse(node2.isNumber());
783:       assertFalse(node2.isAssignAdd());
784:       assertEquals("[testcode]", node2.getSourceFileName());
785:       assertFalse(node2.isFromExterns());
786:       assertFalse(node2.hasMoreThanOneChild());
787:       assertFalse(node2.isInstanceOf());
788:       assertFalse(node2.isOr());
789:       assertFalse(node2.isWith());
790:       assertFalse(node2.isReturn());
791:       assertFalse(node2.isComma());
792:       assertFalse(node2.isExprResult());
793:       assertFalse(node2.isTypeOf());
794:       assertEquals(0, node2.getCharno());
795:       assertFalse(node2.isGetElem());
796:       assertFalse(node2.isBreak());
797:       assertFalse(node2.isVar());
798:       assertFalse(node2.isHook());
799:       assertFalse(node2.isStringKey());
800:       assertEquals(4096, node2.getSourcePosition());
801:       assertFalse(node2.isBlock());
802:       assertFalse(node2.isThis());
803:       assertFalse(node2.isDo());
804:       assertFalse(node2.isAdd());
805:       assertFalse(node2.isNew());
806:       assertFalse(node2.isCase());
807:       assertFalse(node2.isLabel());
808:       assertFalse(node2.isSwitch());
809:       assertFalse(node2.isParamList());
810:       assertFalse(node2.isLabelName());
811:       assertFalse(node2.isArrayLit());
812:       assertTrue(node2.isScript());
813:       assertFalse(node2.isGetterDef());
814:       assertTrue(node2.hasOneChild());
815:       assertFalse(node2.isFor());
816:       assertFalse(node2.isDebugger());
817:       assertFalse(node2.isDefaultCase());
818:       assertFalse(node2.isEmpty());
819:       assertFalse(node2.isTry());
820:       assertFalse(node2.isCatch());
821:       assertFalse(node2.isIn());
822:       assertEquals(1, node2.getChildCount());
823:       assertFalse(node2.isNE());
824:       assertFalse(node2.isTrue());
825:       assertFalse(node2.isNull());
826:       assertEquals(132, node2.getType());
827:       assertFalse(node2.isRegExp());
828:       assertFalse(node2.isIf());
829:       assertTrue(node2.hasChildren());
830:       assertEquals(1, node2.getLineno());
831:       assertFalse(node2.isDelProp());
832:       assertFalse(node2.isName());
833:       assertFalse(node2.isVoid());
834:       assertFalse(node2.isCall());
835:       assertFalse(node2.isFalse());
836:       assertFalse(node2.isThrow());
837:       assertFalse(node2.isSetterDef());
838:       assertFalse(node2.isInc());
839:       assertFalse(node2.isString());
840:       assertFalse(node2.isWhile());
841:       assertEquals(0, node2.getSourceOffset());
842:       assertFalse(node2.isGetProp());
843:       assertFalse(node2.isObjectLit());
844:       assertFalse(node2.isContinue());
845:       assertFalse(node2.isAnd());
846:       assertFalse(node2.isNot());
847:       assertFalse(node2.isFunction());
848:       assertEquals((-1), node3.getCharno());
849:       assertFalse(node3.isSwitch());
850:       assertFalse(node3.isHook());
851:       assertFalse(node3.isThrow());
852:       assertFalse(node3.isFalse());
853:       assertFalse(node3.isBreak());
854:       assertFalse(node3.isGetProp());
855:       assertEquals(1, node3.getChildCount());
856:       assertFalse(node3.isComma());
857:       assertFalse(node3.isThis());
858:       assertFalse(node3.isAnd());
859:       assertFalse(node3.isNot());
860:       assertEquals((-1), node3.getSourceOffset());
861:       assertFalse(node3.isCase());
862:       assertFalse(node3.isObjectLit());
863:       assertFalse(node3.isGetterDef());
864:       assertFalse(node3.isScript());
865:       assertFalse(node3.isString());
866:       assertFalse(node3.isVoid());
867:       assertFalse(node3.isDefaultCase());
868:       assertFalse(node3.isTrue());
869:       assertFalse(node3.isLabelName());
870:       assertTrue(node3.hasOneChild());
871:       assertFalse(node3.isDelProp());
872:       assertFalse(node3.isAssign());
873:       assertFalse(node3.isDec());
874:       assertFalse(node3.isTypeOf());
875:       assertFalse(node3.isArrayLit());
876:       assertFalse(node3.isExprResult());
877:       assertFalse(node3.isLabel());
878:       assertFalse(node3.isAssignAdd());
879:       assertFalse(node3.isOr());
880:       assertFalse(node3.isNull());
881:       assertFalse(node3.isEmpty());
882:       assertFalse(node3.isDo());
883:       assertNull(node3.getSourceFileName());
884:       assertFalse(node3.isAdd());
885:       assertFalse(node3.isBlock());
886:       assertFalse(node3.isNew());
887:       assertFalse(node3.isVar());
888:       assertFalse(node3.isWhile());
889:       assertFalse(node3.isStringKey());
890:       assertFalse(node3.isName());
891:       assertEquals(35, node3.getType());
892:       assertFalse(node3.hasMoreThanOneChild());
893:       assertFalse(node3.isCall());
894:       assertFalse(node3.isContinue());
895:       assertFalse(node3.isReturn());
896:       assertFalse(node3.isFromExterns());
897:       assertEquals((-1), node3.getSourcePosition());
898:       assertFalse(node3.isParamList());
899:       assertFalse(node3.isNumber());
900:       assertFalse(node3.isTry());
901:       assertFalse(node3.isDebugger());
902:       assertFalse(node3.isFor());
903:       assertFalse(node3.isWith());
904:       assertFalse(node3.isRegExp());
905:       assertFalse(node3.isFunction());
906:       assertFalse(node3.isInstanceOf());
907:       assertFalse(node3.isCatch());
908:       assertTrue(node3.hasChildren());
909:       assertEquals((-1), node3.getLineno());
910:       assertFalse(node3.isIf());
911:       assertTrue(node3.isGetElem());
912:       assertFalse(node3.isNE());
913:       assertFalse(node3.isInc());
914:       assertFalse(node3.isSetterDef());
915:       assertFalse(node3.isIn());
916:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
917:       assertEquals(10, vector0.capacity());
918:       assertEquals("[]", vector0.toString());
919:       assertTrue(vector0.isEmpty());
920:       assertEquals(0, vector0.size());
921:       assertFalse(node0.isGetElem());
922:       assertFalse(node0.hasOneChild());
923:       assertFalse(node0.isLabelName());
924:       assertFalse(node0.isExprResult());
925:       assertFalse(node0.isLabel());
926:       assertFalse(node0.isReturn());
927:       assertFalse(node0.hasChildren());
928:       assertFalse(node0.isDec());
929:       assertFalse(node0.isTypeOf());
930:       assertFalse(node0.isAssign());
931:       assertFalse(node0.isWith());
932:       assertFalse(node0.hasMoreThanOneChild());
933:       assertFalse(node0.isAnd());
934:       assertFalse(node0.isObjectLit());
935:       assertFalse(node0.isContinue());
936:       assertFalse(node0.isWhile());
937:       assertFalse(node0.isFromExterns());
938:       assertFalse(node0.isScript());
939:       assertFalse(node0.isGetProp());
940:       assertEquals((-1), node0.getSourcePosition());
941:       assertFalse(node0.isNot());
942:       assertTrue(node0.isParamList());
943:       assertFalse(node0.isNumber());
944:       assertFalse(node0.isCall());
945:       assertFalse(node0.isStringKey());
946:       assertFalse(node0.isVar());
947:       assertFalse(node0.isBreak());
948:       assertFalse(node0.isName());
949:       assertFalse(node0.isComma());
950:       assertEquals(0, node0.getChildCount());
951:       assertFalse(node0.isAssignAdd());
952:       assertFalse(node0.isDo());
953:       assertFalse(node0.isDefaultCase());
954:       assertFalse(node0.isTrue());
955:       assertFalse(node0.isNew());
956:       assertFalse(node0.isNull());
957:       assertFalse(node0.isAdd());
958:       assertNull(node0.getSourceFileName());
959:       assertFalse(node0.isOr());
960:       assertEquals(83, node0.getType());
961:       assertFalse(node0.isEmpty());
962:       assertFalse(node0.isArrayLit());
963:       assertEquals((-1), node0.getSourceOffset());
964:       assertFalse(node0.isFor());
965:       assertFalse(node0.isDelProp());
966:       assertFalse(node0.isIf());
967:       assertFalse(node0.isTry());
968:       assertFalse(node0.isVoid());
969:       assertFalse(node0.isRegExp());
970:       assertFalse(node0.isFunction());
971:       assertFalse(node0.isCase());
972:       assertFalse(node0.isSwitch());
973:       assertFalse(node0.isDebugger());
974:       assertEquals((-1), node0.getCharno());
975:       assertFalse(node0.isString());
976:       assertFalse(node0.isGetterDef());
977:       assertFalse(node0.isThrow());
978:       assertFalse(node0.isHook());
979:       assertFalse(node0.isBlock());
980:       assertFalse(node0.isThis());
981:       assertFalse(node0.isInstanceOf());
982:       assertFalse(node0.isFalse());
983:       assertFalse(node0.isCatch());
984:       assertEquals((-1), node0.getLineno());
985:       assertFalse(node0.isNE());
986:       assertFalse(node0.isInc());
987:       assertFalse(node0.isSetterDef());
988:       assertFalse(node0.isIn());
989:       assertFalse(node1.isThrow());
990:       assertFalse(node1.isBreak());
991:       assertFalse(node1.isComma());
992:       assertFalse(node1.isFalse());
993:       assertFalse(node1.isGetProp());
994:       assertFalse(node1.isInc());
995:       assertFalse(node1.isThis());
996:       assertFalse(node1.isHook());
997:       assertFalse(node1.isInstanceOf());
998:       assertEquals(37, node1.getType());
999:       assertFalse(node1.isIn());
1000:       assertFalse(node1.isWith());
1001:       assertTrue(node1.hasChildren());
1002:       assertFalse(node1.isExprResult());
1003:       assertTrue(node1.isCall());
1004:       assertFalse(node1.isNE());
1005:       assertFalse(node1.isDelProp());
1006:       assertFalse(node1.isIf());
1007:       assertFalse(node1.isAssign());
1008:       assertFalse(node1.isGetElem());
1009:       assertTrue(node1.hasOneChild());
1010:       assertEquals((-1), node1.getSourcePosition());
1011:       assertFalse(node1.isTypeOf());
1012:       assertFalse(node1.isDec());
1013:       assertFalse(node1.isReturn());
1014:       assertFalse(node1.isFromExterns());
1015:       assertFalse(node1.isNot());
1016:       assertFalse(node1.isObjectLit());
1017:       assertFalse(node1.isString());
1018:       assertFalse(node1.isContinue());
1019:       assertFalse(node1.isFunction());
1020:       assertFalse(node1.isDebugger());
1021:       assertFalse(node1.isAnd());
1022:       assertFalse(node1.isName());
1023:       assertFalse(node1.isStringKey());
1024:       assertNull(node1.getSourceFileName());
1025:       assertFalse(node1.isNew());
1026:       assertFalse(node1.isAdd());
1027:       assertFalse(node1.isBlock());
1028:       assertFalse(node1.isSetterDef());
1029:       assertFalse(node1.isVar());
1030:       assertFalse(node1.isWhile());
1031:       assertFalse(node1.isDo());
1032:       assertFalse(node1.isRegExp());
1033:       assertFalse(node1.isCatch());
1034:       assertFalse(node1.hasMoreThanOneChild());
1035:       assertEquals((-1), node1.getLineno());
1036:       assertFalse(node1.isOr());
1037:       assertFalse(node1.isTrue());
1038:       assertFalse(node1.isNull());
1039:       assertFalse(node1.isVoid());
1040:       assertFalse(node1.isEmpty());
1041:       assertFalse(node1.isLabelName());
1042:       assertFalse(node1.isFor());
1043:       assertEquals((-1), node1.getSourceOffset());
1044:       assertFalse(node1.isGetterDef());
1045:       assertFalse(node1.isNumber());
1046:       assertFalse(node1.isLabel());
1047:       assertFalse(node1.isTry());
1048:       assertEquals(1, node1.getChildCount());
1049:       assertFalse(node1.isAssignAdd());
1050:       assertFalse(node1.isDefaultCase());
1051:       assertFalse(node1.isCase());
1052:       assertFalse(node1.isScript());
1053:       assertEquals((-1), node1.getCharno());
1054:       assertFalse(node1.isArrayLit());
1055:       assertFalse(node1.isParamList());
1056:       assertFalse(node1.isSwitch());
1057:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1058:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1059:       assertEquals(39, Node.EMPTY_BLOCK);
1060:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1061:       assertEquals(50, Node.FREE_CALL);
1062:       assertEquals(8, Node.FLAG_NO_THROWS);
1063:       assertEquals(4095, Node.COLUMN_MASK);
1064:       assertEquals(41, Node.BRACELESS_TYPE);
1065:       assertEquals(40, Node.ORIGINALNAME_PROP);
1066:       assertEquals(48, Node.DIRECTIVES);
1067:       assertEquals(43, Node.IS_CONSTANT_NAME);
1068:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1069:       assertEquals(54, Node.SLASH_V);
1070:       assertEquals(16, Node.SOURCENAME_PROP);
1071:       assertEquals(54, Node.LAST_PROP);
1072:       assertEquals(12, Node.COLUMN_BITS);
1073:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
1074:       assertEquals(32, Node.INCRDECR_PROP);
1075:       assertEquals(1, Node.DECR_FLAG);
1076:       assertEquals(2, Node.POST_FLAG);
1077:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1078:       assertEquals(37, Node.OPT_ARG_NAME);
1079:       assertEquals(47, Node.IS_DISPATCHER);
1080:       assertEquals(29, Node.JSDOC_INFO_PROP);
1081:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1082:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1083:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1084:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
1085:       assertEquals(46, Node.IS_NAMESPACE);
1086:       assertEquals(49, Node.DIRECT_EVAL);
1087:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1088:       assertEquals(36, Node.QUOTED_PROP);
1089:       assertEquals(35, Node.PARENTHESIZED_PROP);
1090:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1091:       assertEquals(53, Node.INPUT_ID);
1092:       assertEquals(30, Node.VAR_ARGS_NAME);
1093:       assertEquals(52, Node.LENGTH);
1094:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1095:       assertEquals(29, Node.JSDOC_INFO_PROP);
1096:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1097:       assertEquals(2, Node.POST_FLAG);
1098:       assertEquals(47, Node.IS_DISPATCHER);
1099:       assertEquals(53, Node.INPUT_ID);
1100:       assertEquals(32, Node.INCRDECR_PROP);
1101:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1102:       assertEquals(35, Node.PARENTHESIZED_PROP);
1103:       assertEquals(30, Node.VAR_ARGS_NAME);
1104:       assertEquals(43, Node.IS_CONSTANT_NAME);
1105:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1106:       assertEquals(16, Node.SOURCENAME_PROP);
1107:       assertEquals(46, Node.IS_NAMESPACE);
1108:       assertEquals(54, Node.SLASH_V);
1109:       assertEquals(40, Node.ORIGINALNAME_PROP);
1110:       assertEquals(50, Node.FREE_CALL);
1111:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1112:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1113:       assertEquals(41, Node.BRACELESS_TYPE);
1114:       assertEquals(52, Node.LENGTH);
1115:       assertEquals(8, Node.FLAG_NO_THROWS);
1116:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1117:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1118:       assertEquals(39, Node.EMPTY_BLOCK);
1119:       assertEquals(49, Node.DIRECT_EVAL);
1120:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
1121:       assertEquals(1, Node.DECR_FLAG);
1122:       assertEquals(12, Node.COLUMN_BITS);
1123:       assertEquals(36, Node.QUOTED_PROP);
1124:       assertEquals(54, Node.LAST_PROP);
1125:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1126:       assertEquals(48, Node.DIRECTIVES);
1127:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1128:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1129:       assertEquals(4095, Node.COLUMN_MASK);
1130:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1131:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
1132:       assertEquals(37, Node.OPT_ARG_NAME);
1133:       assertEquals(8, Node.FLAG_NO_THROWS);
1134:       assertEquals(39, Node.EMPTY_BLOCK);
1135:       assertEquals(48, Node.DIRECTIVES);
1136:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1137:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1138:       assertEquals(50, Node.FREE_CALL);
1139:       assertEquals(41, Node.BRACELESS_TYPE);
1140:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1141:       assertEquals(52, Node.LENGTH);
1142:       assertEquals(54, Node.SLASH_V);
1143:       assertEquals(35, Node.PARENTHESIZED_PROP);
1144:       assertEquals(16, Node.SOURCENAME_PROP);
1145:       assertEquals(43, Node.IS_CONSTANT_NAME);
1146:       assertEquals(40, Node.ORIGINALNAME_PROP);
1147:       assertEquals(30, Node.VAR_ARGS_NAME);
1148:       assertEquals(37, Node.OPT_ARG_NAME);
1149:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1150:       assertEquals(2, Node.POST_FLAG);
1151:       assertEquals(32, Node.INCRDECR_PROP);
1152:       assertEquals(46, Node.IS_NAMESPACE);
1153:       assertEquals(47, Node.IS_DISPATCHER);
1154:       assertEquals(12, Node.COLUMN_BITS);
1155:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1156:       assertEquals(1, Node.DECR_FLAG);
1157:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1158:       assertEquals(29, Node.JSDOC_INFO_PROP);
1159:       assertEquals(53, Node.INPUT_ID);
1160:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1161:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1162:       assertEquals(54, Node.LAST_PROP);
1163:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1164:       assertEquals(36, Node.QUOTED_PROP);
1165:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
1166:       assertEquals(49, Node.DIRECT_EVAL);
1167:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1168:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1169:       assertEquals(4095, Node.COLUMN_MASK);
1170:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
1171:       assertEquals(37, Node.OPT_ARG_NAME);
1172:       assertEquals(32, Node.INCRDECR_PROP);
1173:       assertEquals(2, Node.POST_FLAG);
1174:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1175:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1176:       assertEquals(49, Node.DIRECT_EVAL);
1177:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1178:       assertEquals(46, Node.IS_NAMESPACE);
1179:       assertEquals(54, Node.SLASH_V);
1180:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1181:       assertEquals(41, Node.BRACELESS_TYPE);
1182:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1183:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
1184:       assertEquals(1, Node.DECR_FLAG);
1185:       assertEquals(12, Node.COLUMN_BITS);
1186:       assertEquals(54, Node.LAST_PROP);
1187:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
1188:       assertEquals(48, Node.DIRECTIVES);
1189:       assertEquals(4095, Node.COLUMN_MASK);
1190:       assertEquals(8, Node.FLAG_NO_THROWS);
1191:       assertEquals(39, Node.EMPTY_BLOCK);
1192:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1193:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1194:       assertEquals(50, Node.FREE_CALL);
1195:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1196:       assertEquals(43, Node.IS_CONSTANT_NAME);
1197:       assertEquals(36, Node.QUOTED_PROP);
1198:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1199:       assertEquals(16, Node.SOURCENAME_PROP);
1200:       assertEquals(53, Node.INPUT_ID);
1201:       assertEquals(35, Node.PARENTHESIZED_PROP);
1202:       assertEquals(52, Node.LENGTH);
1203:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1204:       assertEquals(40, Node.ORIGINALNAME_PROP);
1205:       assertEquals(29, Node.JSDOC_INFO_PROP);
1206:       assertEquals(30, Node.VAR_ARGS_NAME);
1207:       assertEquals(47, Node.IS_DISPATCHER);
1208:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1209:       
1210:       Node node4 = node2.removeChildren();
1211:       assertNotNull(node4);
1212:       assertFalse(node2.equals((Object)node0));
1213:       assertFalse(node2.equals((Object)node3));
1214:       assertFalse(node2.equals((Object)node1));
1215:       assertFalse(node4.equals((Object)node3));
1216:       assertFalse(node4.equals((Object)node0));
1217:       assertFalse(node4.equals((Object)node1));
1218:       assertFalse(node4.equals((Object)node2));
1219:       assertEquals(0, compiler0.getWarningCount());
1220:       assertFalse(compiler0.hasErrors());
1221:       assertFalse(compiler0.isIdeMode());
1222:       assertFalse(compiler0.acceptConstKeyword());
1223:       assertEquals(0, compiler0.getErrorCount());
1224:       assertEquals(0.0, compiler0.getProgress(), 0.01);
1225:       assertFalse(compiler0.isTypeCheckingEnabled());
1226:       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
1227:       assertFalse(node2.isAssign());
1228:       assertFalse(node2.hasChildren());
1229:       assertFalse(node2.isDec());
1230:       assertFalse(node2.isNumber());
1231:       assertFalse(node2.isAssignAdd());
1232:       assertEquals("[testcode]", node2.getSourceFileName());
1233:       assertFalse(node2.isFromExterns());
1234:       assertFalse(node2.hasOneChild());
1235:       assertFalse(node2.hasMoreThanOneChild());
1236:       assertFalse(node2.isInstanceOf());
1237:       assertFalse(node2.isOr());
1238:       assertFalse(node2.isWith());
1239:       assertFalse(node2.isReturn());
1240:       assertFalse(node2.isComma());
1241:       assertFalse(node2.isExprResult());
1242:       assertFalse(node2.isTypeOf());
1243:       assertEquals(0, node2.getCharno());
1244:       assertFalse(node2.isGetElem());
1245:       assertFalse(node2.isBreak());
1246:       assertFalse(node2.isVar());
1247:       assertFalse(node2.isHook());
1248:       assertFalse(node2.isStringKey());
1249:       assertEquals(4096, node2.getSourcePosition());
1250:       assertFalse(node2.isBlock());
1251:       assertFalse(node2.isThis());
1252:       assertFalse(node2.isDo());
1253:       assertFalse(node2.isAdd());
1254:       assertFalse(node2.isNew());
1255:       assertFalse(node2.isCase());
1256:       assertFalse(node2.isLabel());
1257:       assertEquals(0, node2.getChildCount());
1258:       assertFalse(node2.isSwitch());
1259:       assertFalse(node2.isParamList());
1260:       assertFalse(node2.isLabelName());
1261:       assertFalse(node2.isArrayLit());
1262:       assertTrue(node2.isScript());
1263:       assertFalse(node2.isGetterDef());
1264:       assertFalse(node2.isFor());
1265:       assertFalse(node2.isDebugger());
1266:       assertFalse(node2.isDefaultCase());
1267:       assertFalse(node2.isEmpty());
1268:       assertFalse(node2.isTry());
1269:       assertFalse(node2.isCatch());
1270:       assertFalse(node2.isIn());
1271:       assertFalse(node2.isNE());
1272:       assertFalse(node2.isTrue());
1273:       assertFalse(node2.isNull());
1274:       assertEquals(132, node2.getType());
1275:       assertFalse(node2.isRegExp());
1276:       assertFalse(node2.isIf());
1277:       assertEquals(1, node2.getLineno());
1278:       assertFalse(node2.isDelProp());
1279:       assertFalse(node2.isName());
1280:       assertFalse(node2.isVoid());
1281:       assertFalse(node2.isCall());
1282:       assertFalse(node2.isFalse());
1283:       assertFalse(node2.isThrow());
1284:       assertFalse(node2.isSetterDef());
1285:       assertFalse(node2.isInc());
1286:       assertFalse(node2.isString());
1287:       assertFalse(node2.isWhile());
1288:       assertEquals(0, node2.getSourceOffset());
1289:       assertFalse(node2.isGetProp());
1290:       assertFalse(node2.isObjectLit());
1291:       assertFalse(node2.isContinue());
1292:       assertFalse(node2.isAnd());
1293:       assertFalse(node2.isNot());
1294:       assertFalse(node2.isFunction());
1295:       assertFalse(node4.isGetElem());
1296:       assertFalse(node4.isAssign());
1297:       assertFalse(node4.isDec());
1298:       assertFalse(node4.isLabelName());
1299:       assertFalse(node4.isTypeOf());
1300:       assertFalse(node4.isNumber());
1301:       assertFalse(node4.isLabel());
1302:       assertFalse(node4.isAssignAdd());
1303:       assertFalse(node4.isFromExterns());
1304:       assertFalse(node4.isReturn());
1305:       assertFalse(node4.isContinue());
1306:       assertFalse(node4.isObjectLit());
1307:       assertFalse(node4.isNot());
1308:       assertEquals("[testcode]", node4.getSourceFileName());
1309:       assertFalse(node4.isScript());
1310:       assertFalse(node4.isAnd());
1311:       assertFalse(node4.isName());
1312:       assertFalse(node4.isStringKey());
1313:       assertEquals(4096, node4.getSourcePosition());
1314:       assertFalse(node4.isBreak());
1315:       assertFalse(node4.isCall());
1316:       assertFalse(node4.isNew());
1317:       assertFalse(node4.isAdd());
1318:       assertFalse(node4.isGetProp());
1319:       assertFalse(node4.isComma());
1320:       assertFalse(node4.isWhile());
1321:       assertFalse(node4.isVar());
1322:       assertFalse(node4.isDo());
1323:       assertEquals(1, node4.getLineno());
1324:       assertFalse(node4.isOr());
1325:       assertFalse(node4.isVoid());
1326:       assertFalse(node4.isNull());
1327:       assertFalse(node4.isTrue());
1328:       assertFalse(node4.isFor());
1329:       assertFalse(node4.isDelProp());
1330:       assertFalse(node4.isGetterDef());
1331:       assertFalse(node4.isArrayLit());
1332:       assertFalse(node4.isEmpty());
1333:       assertEquals(1, node4.getChildCount());
1334:       assertFalse(node4.isFunction());
1335:       assertFalse(node4.isTry());
1336:       assertFalse(node4.isDefaultCase());
1337:       assertTrue(node4.hasOneChild());
1338:       assertFalse(node4.isCase());
1339:       assertFalse(node4.isString());
1340:       assertFalse(node4.isDebugger());
1341:       assertFalse(node4.isSwitch());
1342:       assertFalse(node4.isParamList());
1343:       assertFalse(node4.isFalse());
1344:       assertEquals(0, node4.getSourceOffset());
1345:       assertFalse(node4.isSetterDef());
1346:       assertFalse(node4.isBlock());
1347:       assertFalse(node4.isHook());
1348:       assertFalse(node4.isThis());
1349:       assertFalse(node4.isThrow());
1350:       assertFalse(node4.isWith());
1351:       assertFalse(node4.isInstanceOf());
1352:       assertFalse(node4.isRegExp());
1353:       assertFalse(node4.isIn());
1354:       assertFalse(node4.hasMoreThanOneChild());
1355:       assertFalse(node4.isInc());
1356:       assertEquals(130, node4.getType());
1357:       assertTrue(node4.hasChildren());
1358:       assertFalse(node4.isCatch());
1359:       assertTrue(node4.isExprResult());
1360:       assertFalse(node4.isIf());
1361:       assertEquals(0, node4.getCharno());
1362:       assertFalse(node4.isNE());
1363:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1364:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1365:       assertEquals(39, Node.EMPTY_BLOCK);
1366:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1367:       assertEquals(50, Node.FREE_CALL);
1368:       assertEquals(8, Node.FLAG_NO_THROWS);
1369:       assertEquals(4095, Node.COLUMN_MASK);
1370:       assertEquals(41, Node.BRACELESS_TYPE);
1371:       assertEquals(40, Node.ORIGINALNAME_PROP);
1372:       assertEquals(48, Node.DIRECTIVES);
1373:       assertEquals(43, Node.IS_CONSTANT_NAME);
1374:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1375:       assertEquals(54, Node.SLASH_V);
1376:       assertEquals(16, Node.SOURCENAME_PROP);
1377:       assertEquals(54, Node.LAST_PROP);
1378:       assertEquals(12, Node.COLUMN_BITS);
1379:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
1380:       assertEquals(32, Node.INCRDECR_PROP);
1381:       assertEquals(1, Node.DECR_FLAG);
1382:       assertEquals(2, Node.POST_FLAG);
1383:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1384:       assertEquals(37, Node.OPT_ARG_NAME);
1385:       assertEquals(47, Node.IS_DISPATCHER);
1386:       assertEquals(29, Node.JSDOC_INFO_PROP);
1387:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1388:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1389:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1390:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
1391:       assertEquals(46, Node.IS_NAMESPACE);
1392:       assertEquals(49, Node.DIRECT_EVAL);
1393:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1394:       assertEquals(36, Node.QUOTED_PROP);
1395:       assertEquals(35, Node.PARENTHESIZED_PROP);
1396:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1397:       assertEquals(53, Node.INPUT_ID);
1398:       assertEquals(30, Node.VAR_ARGS_NAME);
1399:       assertEquals(52, Node.LENGTH);
1400:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1401:       assertEquals(48, Node.DIRECTIVES);
1402:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1403:       assertEquals(8, Node.FLAG_NO_THROWS);
1404:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1405:       assertEquals(39, Node.EMPTY_BLOCK);
1406:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1407:       assertEquals(50, Node.FREE_CALL);
1408:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1409:       assertEquals(43, Node.IS_CONSTANT_NAME);
1410:       assertEquals(41, Node.BRACELESS_TYPE);
1411:       assertEquals(36, Node.QUOTED_PROP);
1412:       assertEquals(16, Node.SOURCENAME_PROP);
1413:       assertEquals(53, Node.INPUT_ID);
1414:       assertEquals(54, Node.SLASH_V);
1415:       assertEquals(52, Node.LENGTH);
1416:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1417:       assertEquals(40, Node.ORIGINALNAME_PROP);
1418:       assertEquals(35, Node.PARENTHESIZED_PROP);
1419:       assertEquals(30, Node.VAR_ARGS_NAME);
1420:       assertEquals(2, Node.POST_FLAG);
1421:       assertEquals(47, Node.IS_DISPATCHER);
1422:       assertEquals(32, Node.INCRDECR_PROP);
1423:       assertEquals(37, Node.OPT_ARG_NAME);
1424:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1425:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1426:       assertEquals(29, Node.JSDOC_INFO_PROP);
1427:       assertEquals(49, Node.DIRECT_EVAL);
1428:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1429:       assertEquals(46, Node.IS_NAMESPACE);
1430:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1431:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1432:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
1433:       assertEquals(1, Node.DECR_FLAG);
1434:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
1435:       assertEquals(4095, Node.COLUMN_MASK);
1436:       assertEquals(12, Node.COLUMN_BITS);
1437:       assertEquals(54, Node.LAST_PROP);
1438:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1439:       
1440:       Double double0 = NodeUtil.getNumberValue(node0);
1441:       assertNull(double0);
1442:       assertFalse(node0.equals((Object)node4));
1443:       assertFalse(node0.equals((Object)node1));
1444:       assertFalse(node0.equals((Object)node2));
1445:       assertFalse(node0.equals((Object)node3));
1446:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1447:       assertEquals(10, vector0.capacity());
1448:       assertEquals("[]", vector0.toString());
1449:       assertTrue(vector0.isEmpty());
1450:       assertEquals(0, vector0.size());
1451:       assertFalse(node0.isGetElem());
1452:       assertFalse(node0.hasOneChild());
1453:       assertFalse(node0.isLabelName());
1454:       assertFalse(node0.isExprResult());
1455:       assertFalse(node0.isLabel());
1456:       assertFalse(node0.isReturn());
1457:       assertFalse(node0.hasChildren());
1458:       assertFalse(node0.isDec());
1459:       assertFalse(node0.isTypeOf());
1460:       assertFalse(node0.isAssign());
1461:       assertFalse(node0.isWith());
1462:       assertFalse(node0.hasMoreThanOneChild());
1463:       assertFalse(node0.isAnd());
1464:       assertFalse(node0.isObjectLit());
1465:       assertFalse(node0.isContinue());
1466:       assertFalse(node0.isWhile());
1467:       assertFalse(node0.isFromExterns());
1468:       assertFalse(node0.isScript());
1469:       assertFalse(node0.isGetProp());
1470:       assertEquals((-1), node0.getSourcePosition());
1471:       assertFalse(node0.isNot());
1472:       assertTrue(node0.isParamList());
1473:       assertFalse(node0.isNumber());
1474:       assertFalse(node0.isCall());
1475:       assertFalse(node0.isStringKey());
1476:       assertFalse(node0.isVar());
1477:       assertFalse(node0.isBreak());
1478:       assertFalse(node0.isName());
1479:       assertFalse(node0.isComma());
1480:       assertEquals(0, node0.getChildCount());
1481:       assertFalse(node0.isAssignAdd());
1482:       assertFalse(node0.isDo());
1483:       assertFalse(node0.isDefaultCase());
1484:       assertFalse(node0.isTrue());
1485:       assertFalse(node0.isNew());
1486:       assertFalse(node0.isNull());
1487:       assertFalse(node0.isAdd());
1488:       assertNull(node0.getSourceFileName());
1489:       assertFalse(node0.isOr());
1490:       assertEquals(83, node0.getType());
1491:       assertFalse(node0.isEmpty());
1492:       assertFalse(node0.isArrayLit());
1493:       assertEquals((-1), node0.getSourceOffset());
1494:       assertFalse(node0.isFor());
1495:       assertFalse(node0.isDelProp());
1496:       assertFalse(node0.isIf());
1497:       assertFalse(node0.isTry());
1498:       assertFalse(node0.isVoid());
1499:       assertFalse(node0.isRegExp());
1500:       assertFalse(node0.isFunction());
1501:       assertFalse(node0.isCase());
1502:       assertFalse(node0.isSwitch());
1503:       assertFalse(node0.isDebugger());
1504:       assertEquals((-1), node0.getCharno());
1505:       assertFalse(node0.isString());
1506:       assertFalse(node0.isGetterDef());
1507:       assertFalse(node0.isThrow());
1508:       assertFalse(node0.isHook());
1509:       assertFalse(node0.isBlock());
1510:       assertFalse(node0.isThis());
1511:       assertFalse(node0.isInstanceOf());
1512:       assertFalse(node0.isFalse());
1513:       assertFalse(node0.isCatch());
1514:       assertEquals((-1), node0.getLineno());
1515:       assertFalse(node0.isNE());
1516:       assertFalse(node0.isInc());
1517:       assertFalse(node0.isSetterDef());
1518:       assertFalse(node0.isIn());
1519:       assertEquals(8, Node.FLAG_NO_THROWS);
1520:       assertEquals(39, Node.EMPTY_BLOCK);
1521:       assertEquals(48, Node.DIRECTIVES);
1522:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1523:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1524:       assertEquals(50, Node.FREE_CALL);
1525:       assertEquals(41, Node.BRACELESS_TYPE);
1526:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1527:       assertEquals(52, Node.LENGTH);
1528:       assertEquals(54, Node.SLASH_V);
1529:       assertEquals(35, Node.PARENTHESIZED_PROP);
1530:       assertEquals(16, Node.SOURCENAME_PROP);
1531:       assertEquals(43, Node.IS_CONSTANT_NAME);
1532:       assertEquals(40, Node.ORIGINALNAME_PROP);
1533:       assertEquals(30, Node.VAR_ARGS_NAME);
1534:       assertEquals(37, Node.OPT_ARG_NAME);
1535:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1536:       assertEquals(2, Node.POST_FLAG);
1537:       assertEquals(32, Node.INCRDECR_PROP);
1538:       assertEquals(46, Node.IS_NAMESPACE);
1539:       assertEquals(47, Node.IS_DISPATCHER);
1540:       assertEquals(12, Node.COLUMN_BITS);
1541:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1542:       assertEquals(1, Node.DECR_FLAG);
1543:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1544:       assertEquals(29, Node.JSDOC_INFO_PROP);
1545:       assertEquals(53, Node.INPUT_ID);
1546:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1547:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1548:       assertEquals(54, Node.LAST_PROP);
1549:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1550:       assertEquals(36, Node.QUOTED_PROP);
1551:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
1552:       assertEquals(49, Node.DIRECT_EVAL);
1553:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1554:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1555:       assertEquals(4095, Node.COLUMN_MASK);
1556:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
1557:       
1558:       boolean boolean0 = NodeUtil.mayEffectMutableState(node3, compiler0);
1559:       assertFalse(node2.equals((Object)node4));
1560:       assertFalse(node2.equals((Object)node0));
1561:       assertFalse(node2.equals((Object)node3));
1562:       assertFalse(node2.equals((Object)node1));
1563:       assertFalse(node3.equals((Object)node1));
1564:       assertFalse(node3.equals((Object)node2));
1565:       assertFalse(node3.equals((Object)node0));
1566:       assertFalse(node3.equals((Object)node4));
1567:       assertFalse(node0.equals((Object)node4));
1568:       assertFalse(node0.equals((Object)node1));
1569:       assertFalse(node0.equals((Object)node2));
1570:       assertFalse(node0.equals((Object)node3));
1571:       assertFalse(node1.equals((Object)node0));
1572:       assertFalse(node1.equals((Object)node4));
1573:       assertFalse(node1.equals((Object)node3));
1574:       assertFalse(node1.equals((Object)node2));
1575:       assertEquals(0, compiler0.getWarningCount());
1576:       assertFalse(compiler0.hasErrors());
1577:       assertFalse(compiler0.isIdeMode());
1578:       assertFalse(compiler0.acceptConstKeyword());
1579:       assertEquals(0, compiler0.getErrorCount());
1580:       assertEquals(0.0, compiler0.getProgress(), 0.01);
1581:       assertFalse(compiler0.isTypeCheckingEnabled());
1582:       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
1583:       assertFalse(node2.isAssign());
1584:       assertFalse(node2.hasChildren());
1585:       assertFalse(node2.isDec());
1586:       assertFalse(node2.isNumber());
1587:       assertFalse(node2.isAssignAdd());
1588:       assertEquals("[testcode]", node2.getSourceFileName());
1589:       assertFalse(node2.isFromExterns());
1590:       assertFalse(node2.hasOneChild());
1591:       assertFalse(node2.hasMoreThanOneChild());
1592:       assertFalse(node2.isInstanceOf());
1593:       assertFalse(node2.isOr());
1594:       assertFalse(node2.isWith());
1595:       assertFalse(node2.isReturn());
1596:       assertFalse(node2.isComma());
1597:       assertFalse(node2.isExprResult());
1598:       assertFalse(node2.isTypeOf());
1599:       assertEquals(0, node2.getCharno());
1600:       assertFalse(node2.isGetElem());
1601:       assertFalse(node2.isBreak());
1602:       assertFalse(node2.isVar());
1603:       assertFalse(node2.isHook());
1604:       assertFalse(node2.isStringKey());
1605:       assertEquals(4096, node2.getSourcePosition());
1606:       assertFalse(node2.isBlock());
1607:       assertFalse(node2.isThis());
1608:       assertFalse(node2.isDo());
1609:       assertFalse(node2.isAdd());
1610:       assertFalse(node2.isNew());
1611:       assertFalse(node2.isCase());
1612:       assertFalse(node2.isLabel());
1613:       assertEquals(0, node2.getChildCount());
1614:       assertFalse(node2.isSwitch());
1615:       assertFalse(node2.isParamList());
1616:       assertFalse(node2.isLabelName());
1617:       assertFalse(node2.isArrayLit());
1618:       assertTrue(node2.isScript());
1619:       assertFalse(node2.isGetterDef());
1620:       assertFalse(node2.isFor());
1621:       assertFalse(node2.isDebugger());
1622:       assertFalse(node2.isDefaultCase());
1623:       assertFalse(node2.isEmpty());
1624:       assertFalse(node2.isTry());
1625:       assertFalse(node2.isCatch());
1626:       assertFalse(node2.isIn());
1627:       assertFalse(node2.isNE());
1628:       assertFalse(node2.isTrue());
1629:       assertFalse(node2.isNull());
1630:       assertEquals(132, node2.getType());
1631:       assertFalse(node2.isRegExp());
1632:       assertFalse(node2.isIf());
1633:       assertEquals(1, node2.getLineno());
1634:       assertFalse(node2.isDelProp());
1635:       assertFalse(node2.isName());
1636:       assertFalse(node2.isVoid());
1637:       assertFalse(node2.isCall());
1638:       assertFalse(node2.isFalse());
1639:       assertFalse(node2.isThrow());
1640:       assertFalse(node2.isSetterDef());
1641:       assertFalse(node2.isInc());
1642:       assertFalse(node2.isString());
1643:       assertFalse(node2.isWhile());
1644:       assertEquals(0, node2.getSourceOffset());
1645:       assertFalse(node2.isGetProp());
1646:       assertFalse(node2.isObjectLit());
1647:       assertFalse(node2.isContinue());
1648:       assertFalse(node2.isAnd());
1649:       assertFalse(node2.isNot());
1650:       assertFalse(node2.isFunction());
1651:       assertEquals((-1), node3.getCharno());
1652:       assertFalse(node3.isSwitch());
1653:       assertFalse(node3.isHook());
1654:       assertFalse(node3.isThrow());
1655:       assertFalse(node3.isFalse());
1656:       assertFalse(node3.isBreak());
1657:       assertFalse(node3.isGetProp());
1658:       assertEquals(1, node3.getChildCount());
1659:       assertFalse(node3.isComma());
1660:       assertFalse(node3.isThis());
1661:       assertFalse(node3.isAnd());
1662:       assertFalse(node3.isNot());
1663:       assertEquals((-1), node3.getSourceOffset());
1664:       assertFalse(node3.isCase());
1665:       assertFalse(node3.isObjectLit());
1666:       assertFalse(node3.isGetterDef());
1667:       assertFalse(node3.isScript());
1668:       assertFalse(node3.isString());
1669:       assertFalse(node3.isVoid());
1670:       assertFalse(node3.isDefaultCase());
1671:       assertFalse(node3.isTrue());
1672:       assertFalse(node3.isLabelName());
1673:       assertTrue(node3.hasOneChild());
1674:       assertFalse(node3.isDelProp());
1675:       assertFalse(node3.isAssign());
1676:       assertFalse(node3.isDec());
1677:       assertFalse(node3.isTypeOf());
1678:       assertFalse(node3.isArrayLit());
1679:       assertFalse(node3.isExprResult());
1680:       assertFalse(node3.isLabel());
1681:       assertFalse(node3.isAssignAdd());
1682:       assertFalse(node3.isOr());
1683:       assertFalse(node3.isNull());
1684:       assertFalse(node3.isEmpty());
1685:       assertFalse(node3.isDo());
1686:       assertNull(node3.getSourceFileName());
1687:       assertFalse(node3.isAdd());
1688:       assertFalse(node3.isBlock());
1689:       assertFalse(node3.isNew());
1690:       assertFalse(node3.isVar());
1691:       assertFalse(node3.isWhile());
1692:       assertFalse(node3.isStringKey());
1693:       assertFalse(node3.isName());
1694:       assertEquals(35, node3.getType());
1695:       assertFalse(node3.hasMoreThanOneChild());
1696:       assertFalse(node3.isCall());
1697:       assertFalse(node3.isContinue());
1698:       assertFalse(node3.isReturn());
1699:       assertFalse(node3.isFromExterns());
1700:       assertEquals((-1), node3.getSourcePosition());
1701:       assertFalse(node3.isParamList());
1702:       assertFalse(node3.isNumber());
1703:       assertFalse(node3.isTry());
1704:       assertFalse(node3.isDebugger());
1705:       assertFalse(node3.isFor());
1706:       assertFalse(node3.isWith());
1707:       assertFalse(node3.isRegExp());
1708:       assertFalse(node3.isFunction());
1709:       assertFalse(node3.isInstanceOf());
1710:       assertFalse(node3.isCatch());
1711:       assertTrue(node3.hasChildren());
1712:       assertEquals((-1), node3.getLineno());
1713:       assertFalse(node3.isIf());
1714:       assertTrue(node3.isGetElem());
1715:       assertFalse(node3.isNE());
1716:       assertFalse(node3.isInc());
1717:       assertFalse(node3.isSetterDef());
1718:       assertFalse(node3.isIn());
1719:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1720:       assertEquals(10, vector0.capacity());
1721:       assertEquals("[]", vector0.toString());
1722:       assertTrue(vector0.isEmpty());
1723:       assertEquals(0, vector0.size());
1724:       assertFalse(node0.isGetElem());
1725:       assertFalse(node0.hasOneChild());
1726:       assertFalse(node0.isLabelName());
1727:       assertFalse(node0.isExprResult());
1728:       assertFalse(node0.isLabel());
1729:       assertFalse(node0.isReturn());
1730:       assertFalse(node0.hasChildren());
1731:       assertFalse(node0.isDec());
1732:       assertFalse(node0.isTypeOf());
1733:       assertFalse(node0.isAssign());
1734:       assertFalse(node0.isWith());
1735:       assertFalse(node0.hasMoreThanOneChild());
1736:       assertFalse(node0.isAnd());
1737:       assertFalse(node0.isObjectLit());
1738:       assertFalse(node0.isContinue());
1739:       assertFalse(node0.isWhile());
1740:       assertFalse(node0.isFromExterns());
1741:       assertFalse(node0.isScript());
1742:       assertFalse(node0.isGetProp());
1743:       assertEquals((-1), node0.getSourcePosition());
1744:       assertFalse(node0.isNot());
1745:       assertTrue(node0.isParamList());
1746:       assertFalse(node0.isNumber());
1747:       assertFalse(node0.isCall());
1748:       assertFalse(node0.isStringKey());
1749:       assertFalse(node0.isVar());
1750:       assertFalse(node0.isBreak());
1751:       assertFalse(node0.isName());
1752:       assertFalse(node0.isComma());
1753:       assertEquals(0, node0.getChildCount());
1754:       assertFalse(node0.isAssignAdd());
1755:       assertFalse(node0.isDo());
1756:       assertFalse(node0.isDefaultCase());
1757:       assertFalse(node0.isTrue());
1758:       assertFalse(node0.isNew());
1759:       assertFalse(node0.isNull());
1760:       assertFalse(node0.isAdd());
1761:       assertNull(node0.getSourceFileName());
1762:       assertFalse(node0.isOr());
1763:       assertEquals(83, node0.getType());
1764:       assertFalse(node0.isEmpty());
1765:       assertFalse(node0.isArrayLit());
1766:       assertEquals((-1), node0.getSourceOffset());
1767:       assertFalse(node0.isFor());
1768:       assertFalse(node0.isDelProp());
1769:       assertFalse(node0.isIf());
1770:       assertFalse(node0.isTry());
1771:       assertFalse(node0.isVoid());
1772:       assertFalse(node0.isRegExp());
1773:       assertFalse(node0.isFunction());
1774:       assertFalse(node0.isCase());
1775:       assertFalse(node0.isSwitch());
1776:       assertFalse(node0.isDebugger());
1777:       assertEquals((-1), node0.getCharno());
1778:       assertFalse(node0.isString());
1779:       assertFalse(node0.isGetterDef());
1780:       assertFalse(node0.isThrow());
1781:       assertFalse(node0.isHook());
1782:       assertFalse(node0.isBlock());
1783:       assertFalse(node0.isThis());
1784:       assertFalse(node0.isInstanceOf());
1785:       assertFalse(node0.isFalse());
1786:       assertFalse(node0.isCatch());
1787:       assertEquals((-1), node0.getLineno());
1788:       assertFalse(node0.isNE());
1789:       assertFalse(node0.isInc());
1790:       assertFalse(node0.isSetterDef());
1791:       assertFalse(node0.isIn());
1792:       assertFalse(node1.isThrow());
1793:       assertFalse(node1.isBreak());
1794:       assertFalse(node1.isComma());
1795:       assertFalse(node1.isFalse());
1796:       assertFalse(node1.isGetProp());
1797:       assertFalse(node1.isInc());
1798:       assertFalse(node1.isThis());
1799:       assertFalse(node1.isHook());
1800:       assertFalse(node1.isInstanceOf());
1801:       assertEquals(37, node1.getType());
1802:       assertFalse(node1.isIn());
1803:       assertFalse(node1.isWith());
1804:       assertTrue(node1.hasChildren());
1805:       assertFalse(node1.isExprResult());
1806:       assertTrue(node1.isCall());
1807:       assertFalse(node1.isNE());
1808:       assertFalse(node1.isDelProp());
1809:       assertFalse(node1.isIf());
1810:       assertFalse(node1.isAssign());
1811:       assertFalse(node1.isGetElem());
1812:       assertTrue(node1.hasOneChild());
1813:       assertEquals((-1), node1.getSourcePosition());
1814:       assertFalse(node1.isTypeOf());
1815:       assertFalse(node1.isDec());
1816:       assertFalse(node1.isReturn());
1817:       assertFalse(node1.isFromExterns());
1818:       assertFalse(node1.isNot());
1819:       assertFalse(node1.isObjectLit());
1820:       assertFalse(node1.isString());
1821:       assertFalse(node1.isContinue());
1822:       assertFalse(node1.isFunction());
1823:       assertFalse(node1.isDebugger());
1824:       assertFalse(node1.isAnd());
1825:       assertFalse(node1.isName());
1826:       assertFalse(node1.isStringKey());
1827:       assertNull(node1.getSourceFileName());
1828:       assertFalse(node1.isNew());
1829:       assertFalse(node1.isAdd());
1830:       assertFalse(node1.isBlock());
1831:       assertFalse(node1.isSetterDef());
1832:       assertFalse(node1.isVar());
1833:       assertFalse(node1.isWhile());
1834:       assertFalse(node1.isDo());
1835:       assertFalse(node1.isRegExp());
1836:       assertFalse(node1.isCatch());
1837:       assertFalse(node1.hasMoreThanOneChild());
1838:       assertEquals((-1), node1.getLineno());
1839:       assertFalse(node1.isOr());
1840:       assertFalse(node1.isTrue());
1841:       assertFalse(node1.isNull());
1842:       assertFalse(node1.isVoid());
1843:       assertFalse(node1.isEmpty());
1844:       assertFalse(node1.isLabelName());
1845:       assertFalse(node1.isFor());
1846:       assertEquals((-1), node1.getSourceOffset());
1847:       assertFalse(node1.isGetterDef());
1848:       assertFalse(node1.isNumber());
1849:       assertFalse(node1.isLabel());
1850:       assertFalse(node1.isTry());
1851:       assertEquals(1, node1.getChildCount());
1852:       assertFalse(node1.isAssignAdd());
1853:       assertFalse(node1.isDefaultCase());
1854:       assertFalse(node1.isCase());
1855:       assertFalse(node1.isScript());
1856:       assertEquals((-1), node1.getCharno());
1857:       assertFalse(node1.isArrayLit());
1858:       assertFalse(node1.isParamList());
1859:       assertFalse(node1.isSwitch());
1860:       assertTrue(boolean0);
1861:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1862:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1863:       assertEquals(39, Node.EMPTY_BLOCK);
1864:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1865:       assertEquals(50, Node.FREE_CALL);
1866:       assertEquals(8, Node.FLAG_NO_THROWS);
1867:       assertEquals(4095, Node.COLUMN_MASK);
1868:       assertEquals(41, Node.BRACELESS_TYPE);
1869:       assertEquals(40, Node.ORIGINALNAME_PROP);
1870:       assertEquals(48, Node.DIRECTIVES);
1871:       assertEquals(43, Node.IS_CONSTANT_NAME);
1872:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1873:       assertEquals(54, Node.SLASH_V);
1874:       assertEquals(16, Node.SOURCENAME_PROP);
1875:       assertEquals(54, Node.LAST_PROP);
1876:       assertEquals(12, Node.COLUMN_BITS);
1877:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
1878:       assertEquals(32, Node.INCRDECR_PROP);
1879:       assertEquals(1, Node.DECR_FLAG);
1880:       assertEquals(2, Node.POST_FLAG);
1881:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1882:       assertEquals(37, Node.OPT_ARG_NAME);
1883:       assertEquals(47, Node.IS_DISPATCHER);
1884:       assertEquals(29, Node.JSDOC_INFO_PROP);
1885:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1886:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1887:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1888:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
1889:       assertEquals(46, Node.IS_NAMESPACE);
1890:       assertEquals(49, Node.DIRECT_EVAL);
1891:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1892:       assertEquals(36, Node.QUOTED_PROP);
1893:       assertEquals(35, Node.PARENTHESIZED_PROP);
1894:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1895:       assertEquals(53, Node.INPUT_ID);
1896:       assertEquals(30, Node.VAR_ARGS_NAME);
1897:       assertEquals(52, Node.LENGTH);
1898:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1899:       assertEquals(29, Node.JSDOC_INFO_PROP);
1900:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1901:       assertEquals(2, Node.POST_FLAG);
1902:       assertEquals(47, Node.IS_DISPATCHER);
1903:       assertEquals(53, Node.INPUT_ID);
1904:       assertEquals(32, Node.INCRDECR_PROP);
1905:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1906:       assertEquals(35, Node.PARENTHESIZED_PROP);
1907:       assertEquals(30, Node.VAR_ARGS_NAME);
1908:       assertEquals(43, Node.IS_CONSTANT_NAME);
1909:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1910:       assertEquals(16, Node.SOURCENAME_PROP);
1911:       assertEquals(46, Node.IS_NAMESPACE);
1912:       assertEquals(54, Node.SLASH_V);
1913:       assertEquals(40, Node.ORIGINALNAME_PROP);
1914:       assertEquals(50, Node.FREE_CALL);
1915:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1916:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1917:       assertEquals(41, Node.BRACELESS_TYPE);
1918:       assertEquals(52, Node.LENGTH);
1919:       assertEquals(8, Node.FLAG_NO_THROWS);
1920:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1921:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1922:       assertEquals(39, Node.EMPTY_BLOCK);
1923:       assertEquals(49, Node.DIRECT_EVAL);
1924:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
1925:       assertEquals(1, Node.DECR_FLAG);
1926:       assertEquals(12, Node.COLUMN_BITS);
1927:       assertEquals(36, Node.QUOTED_PROP);
1928:       assertEquals(54, Node.LAST_PROP);
1929:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1930:       assertEquals(48, Node.DIRECTIVES);
1931:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1932:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1933:       assertEquals(4095, Node.COLUMN_MASK);
1934:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1935:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
1936:       assertEquals(37, Node.OPT_ARG_NAME);
1937:       assertEquals(8, Node.FLAG_NO_THROWS);
1938:       assertEquals(39, Node.EMPTY_BLOCK);
1939:       assertEquals(48, Node.DIRECTIVES);
1940:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1941:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1942:       assertEquals(50, Node.FREE_CALL);
1943:       assertEquals(41, Node.BRACELESS_TYPE);
1944:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1945:       assertEquals(52, Node.LENGTH);
1946:       assertEquals(54, Node.SLASH_V);
1947:       assertEquals(35, Node.PARENTHESIZED_PROP);
1948:       assertEquals(16, Node.SOURCENAME_PROP);
1949:       assertEquals(43, Node.IS_CONSTANT_NAME);
1950:       assertEquals(40, Node.ORIGINALNAME_PROP);
1951:       assertEquals(30, Node.VAR_ARGS_NAME);
1952:       assertEquals(37, Node.OPT_ARG_NAME);
1953:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1954:       assertEquals(2, Node.POST_FLAG);
1955:       assertEquals(32, Node.INCRDECR_PROP);
1956:       assertEquals(46, Node.IS_NAMESPACE);
1957:       assertEquals(47, Node.IS_DISPATCHER);
1958:       assertEquals(12, Node.COLUMN_BITS);
1959:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1960:       assertEquals(1, Node.DECR_FLAG);
1961:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1962:       assertEquals(29, Node.JSDOC_INFO_PROP);
1963:       assertEquals(53, Node.INPUT_ID);
1964:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1965:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1966:       assertEquals(54, Node.LAST_PROP);
1967:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1968:       assertEquals(36, Node.QUOTED_PROP);
1969:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
1970:       assertEquals(49, Node.DIRECT_EVAL);
1971:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1972:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1973:       assertEquals(4095, Node.COLUMN_MASK);
1974:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
1975:       assertEquals(37, Node.OPT_ARG_NAME);
1976:       assertEquals(32, Node.INCRDECR_PROP);
1977:       assertEquals(2, Node.POST_FLAG);
1978:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1979:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1980:       assertEquals(49, Node.DIRECT_EVAL);
1981:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1982:       assertEquals(46, Node.IS_NAMESPACE);
1983:       assertEquals(54, Node.SLASH_V);
1984:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1985:       assertEquals(41, Node.BRACELESS_TYPE);
1986:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1987:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
1988:       assertEquals(1, Node.DECR_FLAG);
1989:       assertEquals(12, Node.COLUMN_BITS);
1990:       assertEquals(54, Node.LAST_PROP);
1991:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
1992:       assertEquals(48, Node.DIRECTIVES);
1993:       assertEquals(4095, Node.COLUMN_MASK);
1994:       assertEquals(8, Node.FLAG_NO_THROWS);
1995:       assertEquals(39, Node.EMPTY_BLOCK);
1996:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1997:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1998:       assertEquals(50, Node.FREE_CALL);
1999:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2000:       assertEquals(43, Node.IS_CONSTANT_NAME);
2001:       assertEquals(36, Node.QUOTED_PROP);
2002:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2003:       assertEquals(16, Node.SOURCENAME_PROP);
2004:       assertEquals(53, Node.INPUT_ID);
2005:       assertEquals(35, Node.PARENTHESIZED_PROP);
2006:       assertEquals(52, Node.LENGTH);
2007:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2008:       assertEquals(40, Node.ORIGINALNAME_PROP);
2009:       assertEquals(29, Node.JSDOC_INFO_PROP);
2010:       assertEquals(30, Node.VAR_ARGS_NAME);
2011:       assertEquals(47, Node.IS_DISPATCHER);
2012:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2013:       
2014:       String string0 = NodeUtil.getBestLValueName(node2);
2015:       assertNull(string0);
2016:       assertFalse(node2.equals((Object)node4));
2017:       assertFalse(node2.equals((Object)node0));
2018:       assertFalse(node2.equals((Object)node3));
2019:       assertFalse(node2.equals((Object)node1));
2020:       assertEquals(0, compiler0.getWarningCount());
2021:       assertFalse(compiler0.hasErrors());
2022:       assertFalse(compiler0.isIdeMode());
2023:       assertFalse(compiler0.acceptConstKeyword());
2024:       assertEquals(0, compiler0.getErrorCount());
2025:       assertEquals(0.0, compiler0.getProgress(), 0.01);
2026:       assertFalse(compiler0.isTypeCheckingEnabled());
2027:       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
2028:       assertFalse(node2.isAssign());
2029:       assertFalse(node2.hasChildren());
2030:       assertFalse(node2.isDec());
2031:       assertFalse(node2.isNumber());
2032:       assertFalse(node2.isAssignAdd());
2033:       assertEquals("[testcode]", node2.getSourceFileName());
2034:       assertFalse(node2.isFromExterns());
2035:       assertFalse(node2.hasOneChild());
2036:       assertFalse(node2.hasMoreThanOneChild());
2037:       assertFalse(node2.isInstanceOf());
2038:       assertFalse(node2.isOr());
2039:       assertFalse(node2.isWith());
2040:       assertFalse(node2.isReturn());
2041:       assertFalse(node2.isComma());
2042:       assertFalse(node2.isExprResult());
2043:       assertFalse(node2.isTypeOf());
2044:       assertEquals(0, node2.getCharno());
2045:       assertFalse(node2.isGetElem());
2046:       assertFalse(node2.isBreak());
2047:       assertFalse(node2.isVar());
2048:       assertFalse(node2.isHook());
2049:       assertFalse(node2.isStringKey());
2050:       assertEquals(4096, node2.getSourcePosition());
2051:       assertFalse(node2.isBlock());
2052:       assertFalse(node2.isThis());
2053:       assertFalse(node2.isDo());
2054:       assertFalse(node2.isAdd());
2055:       assertFalse(node2.isNew());
2056:       assertFalse(node2.isCase());
2057:       assertFalse(node2.isLabel());
2058:       assertEquals(0, node2.getChildCount());
2059:       assertFalse(node2.isSwitch());
2060:       assertFalse(node2.isParamList());
2061:       assertFalse(node2.isLabelName());
2062:       assertFalse(node2.isArrayLit());
2063:       assertTrue(node2.isScript());
2064:       assertFalse(node2.isGetterDef());
2065:       assertFalse(node2.isFor());
2066:       assertFalse(node2.isDebugger());
2067:       assertFalse(node2.isDefaultCase());
2068:       assertFalse(node2.isEmpty());
2069:       assertFalse(node2.isTry());
2070:       assertFalse(node2.isCatch());
2071:       assertFalse(node2.isIn());
2072:       assertFalse(node2.isNE());
2073:       assertFalse(node2.isTrue());
2074:       assertFalse(node2.isNull());
2075:       assertEquals(132, node2.getType());
2076:       assertFalse(node2.isRegExp());
2077:       assertFalse(node2.isIf());
2078:       assertEquals(1, node2.getLineno());
2079:       assertFalse(node2.isDelProp());
2080:       assertFalse(node2.isName());
2081:       assertFalse(node2.isVoid());
2082:       assertFalse(node2.isCall());
2083:       assertFalse(node2.isFalse());
2084:       assertFalse(node2.isThrow());
2085:       assertFalse(node2.isSetterDef());
2086:       assertFalse(node2.isInc());
2087:       assertFalse(node2.isString());
2088:       assertFalse(node2.isWhile());
2089:       assertEquals(0, node2.getSourceOffset());
2090:       assertFalse(node2.isGetProp());
2091:       assertFalse(node2.isObjectLit());
2092:       assertFalse(node2.isContinue());
2093:       assertFalse(node2.isAnd());
2094:       assertFalse(node2.isNot());
2095:       assertFalse(node2.isFunction());
2096:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2097:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2098:       assertEquals(39, Node.EMPTY_BLOCK);
2099:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2100:       assertEquals(50, Node.FREE_CALL);
2101:       assertEquals(8, Node.FLAG_NO_THROWS);
2102:       assertEquals(4095, Node.COLUMN_MASK);
2103:       assertEquals(41, Node.BRACELESS_TYPE);
2104:       assertEquals(40, Node.ORIGINALNAME_PROP);
2105:       assertEquals(48, Node.DIRECTIVES);
2106:       assertEquals(43, Node.IS_CONSTANT_NAME);
2107:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2108:       assertEquals(54, Node.SLASH_V);
2109:       assertEquals(16, Node.SOURCENAME_PROP);
2110:       assertEquals(54, Node.LAST_PROP);
2111:       assertEquals(12, Node.COLUMN_BITS);
2112:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
2113:       assertEquals(32, Node.INCRDECR_PROP);
2114:       assertEquals(1, Node.DECR_FLAG);
2115:       assertEquals(2, Node.POST_FLAG);
2116:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2117:       assertEquals(37, Node.OPT_ARG_NAME);
2118:       assertEquals(47, Node.IS_DISPATCHER);
2119:       assertEquals(29, Node.JSDOC_INFO_PROP);
2120:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2121:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2122:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2123:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
2124:       assertEquals(46, Node.IS_NAMESPACE);
2125:       assertEquals(49, Node.DIRECT_EVAL);
2126:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2127:       assertEquals(36, Node.QUOTED_PROP);
2128:       assertEquals(35, Node.PARENTHESIZED_PROP);
2129:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2130:       assertEquals(53, Node.INPUT_ID);
2131:       assertEquals(30, Node.VAR_ARGS_NAME);
2132:       assertEquals(52, Node.LENGTH);
2133:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2134:       
2135:       boolean boolean1 = NodeUtil.isRelationalOperation(node3);
2136:       assertFalse(node2.equals((Object)node4));
2137:       assertFalse(node2.equals((Object)node0));
2138:       assertFalse(node2.equals((Object)node3));
2139:       assertFalse(node2.equals((Object)node1));
2140:       assertFalse(node3.equals((Object)node1));
2141:       assertFalse(node3.equals((Object)node2));
2142:       assertFalse(node3.equals((Object)node0));
2143:       assertFalse(node3.equals((Object)node4));
2144:       assertFalse(node0.equals((Object)node4));
2145:       assertFalse(node0.equals((Object)node1));
2146:       assertFalse(node0.equals((Object)node2));
2147:       assertFalse(node0.equals((Object)node3));
2148:       assertFalse(node1.equals((Object)node0));
2149:       assertFalse(node1.equals((Object)node4));
2150:       assertFalse(node1.equals((Object)node3));
2151:       assertFalse(node1.equals((Object)node2));
2152:       assertFalse(boolean1 == boolean0);
2153:       assertEquals(0, compiler0.getWarningCount());
2154:       assertFalse(compiler0.hasErrors());
2155:       assertFalse(compiler0.isIdeMode());
2156:       assertFalse(compiler0.acceptConstKeyword());
2157:       assertEquals(0, compiler0.getErrorCount());
2158:       assertEquals(0.0, compiler0.getProgress(), 0.01);
2159:       assertFalse(compiler0.isTypeCheckingEnabled());
2160:       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
2161:       assertFalse(node2.isAssign());
2162:       assertFalse(node2.hasChildren());
2163:       assertFalse(node2.isDec());
2164:       assertFalse(node2.isNumber());
2165:       assertFalse(node2.isAssignAdd());
2166:       assertEquals("[testcode]", node2.getSourceFileName());
2167:       assertFalse(node2.isFromExterns());
2168:       assertFalse(node2.hasOneChild());
2169:       assertFalse(node2.hasMoreThanOneChild());
2170:       assertFalse(node2.isInstanceOf());
2171:       assertFalse(node2.isOr());
2172:       assertFalse(node2.isWith());
2173:       assertFalse(node2.isReturn());
2174:       assertFalse(node2.isComma());
2175:       assertFalse(node2.isExprResult());
2176:       assertFalse(node2.isTypeOf());
2177:       assertEquals(0, node2.getCharno());
2178:       assertFalse(node2.isGetElem());
2179:       assertFalse(node2.isBreak());
2180:       assertFalse(node2.isVar());
2181:       assertFalse(node2.isHook());
2182:       assertFalse(node2.isStringKey());
2183:       assertEquals(4096, node2.getSourcePosition());
2184:       assertFalse(node2.isBlock());
2185:       assertFalse(node2.isThis());
2186:       assertFalse(node2.isDo());
2187:       assertFalse(node2.isAdd());
2188:       assertFalse(node2.isNew());
2189:       assertFalse(node2.isCase());
2190:       assertFalse(node2.isLabel());
2191:       assertEquals(0, node2.getChildCount());
2192:       assertFalse(node2.isSwitch());
2193:       assertFalse(node2.isParamList());
2194:       assertFalse(node2.isLabelName());
2195:       assertFalse(node2.isArrayLit());
2196:       assertTrue(node2.isScript());
2197:       assertFalse(node2.isGetterDef());
2198:       assertFalse(node2.isFor());
2199:       assertFalse(node2.isDebugger());
2200:       assertFalse(node2.isDefaultCase());
2201:       assertFalse(node2.isEmpty());
2202:       assertFalse(node2.isTry());
2203:       assertFalse(node2.isCatch());
2204:       assertFalse(node2.isIn());
2205:       assertFalse(node2.isNE());
2206:       assertFalse(node2.isTrue());
2207:       assertFalse(node2.isNull());
2208:       assertEquals(132, node2.getType());
2209:       assertFalse(node2.isRegExp());
2210:       assertFalse(node2.isIf());
2211:       assertEquals(1, node2.getLineno());
2212:       assertFalse(node2.isDelProp());
2213:       assertFalse(node2.isName());
2214:       assertFalse(node2.isVoid());
2215:       assertFalse(node2.isCall());
2216:       assertFalse(node2.isFalse());
2217:       assertFalse(node2.isThrow());
2218:       assertFalse(node2.isSetterDef());
2219:       assertFalse(node2.isInc());
2220:       assertFalse(node2.isString());
2221:       assertFalse(node2.isWhile());
2222:       assertEquals(0, node2.getSourceOffset());
2223:       assertFalse(node2.isGetProp());
2224:       assertFalse(node2.isObjectLit());
2225:       assertFalse(node2.isContinue());
2226:       assertFalse(node2.isAnd());
2227:       assertFalse(node2.isNot());
2228:       assertFalse(node2.isFunction());
2229:       assertEquals((-1), node3.getCharno());
2230:       assertFalse(node3.isSwitch());
2231:       assertFalse(node3.isHook());
2232:       assertFalse(node3.isThrow());
2233:       assertFalse(node3.isFalse());
2234:       assertFalse(node3.isBreak());
2235:       assertFalse(node3.isGetProp());
2236:       assertEquals(1, node3.getChildCount());
2237:       assertFalse(node3.isComma());
2238:       assertFalse(node3.isThis());
2239:       assertFalse(node3.isAnd());
2240:       assertFalse(node3.isNot());
2241:       assertEquals((-1), node3.getSourceOffset());
2242:       assertFalse(node3.isCase());
2243:       assertFalse(node3.isObjectLit());
2244:       assertFalse(node3.isGetterDef());
2245:       assertFalse(node3.isScript());
2246:       assertFalse(node3.isString());
2247:       assertFalse(node3.isVoid());
2248:       assertFalse(node3.isDefaultCase());
2249:       assertFalse(node3.isTrue());
2250:       assertFalse(node3.isLabelName());
2251:       assertTrue(node3.hasOneChild());
2252:       assertFalse(node3.isDelProp());
2253:       assertFalse(node3.isAssign());
2254:       assertFalse(node3.isDec());
2255:       assertFalse(node3.isTypeOf());
2256:       assertFalse(node3.isArrayLit());
2257:       assertFalse(node3.isExprResult());
2258:       assertFalse(node3.isLabel());
2259:       assertFalse(node3.isAssignAdd());
2260:       assertFalse(node3.isOr());
2261:       assertFalse(node3.isNull());
2262:       assertFalse(node3.isEmpty());
2263:       assertFalse(node3.isDo());
2264:       assertNull(node3.getSourceFileName());
2265:       assertFalse(node3.isAdd());
2266:       assertFalse(node3.isBlock());
2267:       assertFalse(node3.isNew());
2268:       assertFalse(node3.isVar());
2269:       assertFalse(node3.isWhile());
2270:       assertFalse(node3.isStringKey());
2271:       assertFalse(node3.isName());
2272:       assertEquals(35, node3.getType());
2273:       assertFalse(node3.hasMoreThanOneChild());
2274:       assertFalse(node3.isCall());
2275:       assertFalse(node3.isContinue());
2276:       assertFalse(node3.isReturn());
2277:       assertFalse(node3.isFromExterns());
2278:       assertEquals((-1), node3.getSourcePosition());
2279:       assertFalse(node3.isParamList());
2280:       assertFalse(node3.isNumber());
2281:       assertFalse(node3.isTry());
2282:       assertFalse(node3.isDebugger());
2283:       assertFalse(node3.isFor());
2284:       assertFalse(node3.isWith());
2285:       assertFalse(node3.isRegExp());
2286:       assertFalse(node3.isFunction());
2287:       assertFalse(node3.isInstanceOf());
2288:       assertFalse(node3.isCatch());
2289:       assertTrue(node3.hasChildren());
2290:       assertEquals((-1), node3.getLineno());
2291:       assertFalse(node3.isIf());
2292:       assertTrue(node3.isGetElem());
2293:       assertFalse(node3.isNE());
2294:       assertFalse(node3.isInc());
2295:       assertFalse(node3.isSetterDef());
2296:       assertFalse(node3.isIn());
2297:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
2298:       assertEquals(10, vector0.capacity());
2299:       assertEquals("[]", vector0.toString());
2300:       assertTrue(vector0.isEmpty());
2301:       assertEquals(0, vector0.size());
2302:       assertFalse(node0.isGetElem());
2303:       assertFalse(node0.hasOneChild());
2304:       assertFalse(node0.isLabelName());
2305:       assertFalse(node0.isExprResult());
2306:       assertFalse(node0.isLabel());
2307:       assertFalse(node0.isReturn());
2308:       assertFalse(node0.hasChildren());
2309:       assertFalse(node0.isDec());
2310:       assertFalse(node0.isTypeOf());
2311:       assertFalse(node0.isAssign());
2312:       assertFalse(node0.isWith());
2313:       assertFalse(node0.hasMoreThanOneChild());
2314:       assertFalse(node0.isAnd());
2315:       assertFalse(node0.isObjectLit());
2316:       assertFalse(node0.isContinue());
2317:       assertFalse(node0.isWhile());
2318:       assertFalse(node0.isFromExterns());
2319:       assertFalse(node0.isScript());
2320:       assertFalse(node0.isGetProp());
2321:       assertEquals((-1), node0.getSourcePosition());
2322:       assertFalse(node0.isNot());
2323:       assertTrue(node0.isParamList());
2324:       assertFalse(node0.isNumber());
2325:       assertFalse(node0.isCall());
2326:       assertFalse(node0.isStringKey());
2327:       assertFalse(node0.isVar());
2328:       assertFalse(node0.isBreak());
2329:       assertFalse(node0.isName());
2330:       assertFalse(node0.isComma());
2331:       assertEquals(0, node0.getChildCount());
2332:       assertFalse(node0.isAssignAdd());
2333:       assertFalse(node0.isDo());
2334:       assertFalse(node0.isDefaultCase());
2335:       assertFalse(node0.isTrue());
2336:       assertFalse(node0.isNew());
2337:       assertFalse(node0.isNull());
2338:       assertFalse(node0.isAdd());
2339:       assertNull(node0.getSourceFileName());
2340:       assertFalse(node0.isOr());
2341:       assertEquals(83, node0.getType());
2342:       assertFalse(node0.isEmpty());
2343:       assertFalse(node0.isArrayLit());
2344:       assertEquals((-1), node0.getSourceOffset());
2345:       assertFalse(node0.isFor());
2346:       assertFalse(node0.isDelProp());
2347:       assertFalse(node0.isIf());
2348:       assertFalse(node0.isTry());
2349:       assertFalse(node0.isVoid());
2350:       assertFalse(node0.isRegExp());
2351:       assertFalse(node0.isFunction());
2352:       assertFalse(node0.isCase());
2353:       assertFalse(node0.isSwitch());
2354:       assertFalse(node0.isDebugger());
2355:       assertEquals((-1), node0.getCharno());
2356:       assertFalse(node0.isString());
2357:       assertFalse(node0.isGetterDef());
2358:       assertFalse(node0.isThrow());
2359:       assertFalse(node0.isHook());
2360:       assertFalse(node0.isBlock());
2361:       assertFalse(node0.isThis());
2362:       assertFalse(node0.isInstanceOf());
2363:       assertFalse(node0.isFalse());
2364:       assertFalse(node0.isCatch());
2365:       assertEquals((-1), node0.getLineno());
2366:       assertFalse(node0.isNE());
2367:       assertFalse(node0.isInc());
2368:       assertFalse(node0.isSetterDef());
2369:       assertFalse(node0.isIn());
2370:       assertFalse(node1.isThrow());
2371:       assertFalse(node1.isBreak());
2372:       assertFalse(node1.isComma());
2373:       assertFalse(node1.isFalse());
2374:       assertFalse(node1.isGetProp());
2375:       assertFalse(node1.isInc());
2376:       assertFalse(node1.isThis());
2377:       assertFalse(node1.isHook());
2378:       assertFalse(node1.isInstanceOf());
2379:       assertEquals(37, node1.getType());
2380:       assertFalse(node1.isIn());
2381:       assertFalse(node1.isWith());
2382:       assertTrue(node1.hasChildren());
2383:       assertFalse(node1.isExprResult());
2384:       assertTrue(node1.isCall());
2385:       assertFalse(node1.isNE());
2386:       assertFalse(node1.isDelProp());
2387:       assertFalse(node1.isIf());
2388:       assertFalse(node1.isAssign());
2389:       assertFalse(node1.isGetElem());
2390:       assertTrue(node1.hasOneChild());
2391:       assertEquals((-1), node1.getSourcePosition());
2392:       assertFalse(node1.isTypeOf());
2393:       assertFalse(node1.isDec());
2394:       assertFalse(node1.isReturn());
2395:       assertFalse(node1.isFromExterns());
2396:       assertFalse(node1.isNot());
2397:       assertFalse(node1.isObjectLit());
2398:       assertFalse(node1.isString());
2399:       assertFalse(node1.isContinue());
2400:       assertFalse(node1.isFunction());
2401:       assertFalse(node1.isDebugger());
2402:       assertFalse(node1.isAnd());
2403:       assertFalse(node1.isName());
2404:       assertFalse(node1.isStringKey());
2405:       assertNull(node1.getSourceFileName());
2406:       assertFalse(node1.isNew());
2407:       assertFalse(node1.isAdd());
2408:       assertFalse(node1.isBlock());
2409:       assertFalse(node1.isSetterDef());
2410:       assertFalse(node1.isVar());
2411:       assertFalse(node1.isWhile());
2412:       assertFalse(node1.isDo());
2413:       assertFalse(node1.isRegExp());
2414:       assertFalse(node1.isCatch());
2415:       assertFalse(node1.hasMoreThanOneChild());
2416:       assertEquals((-1), node1.getLineno());
2417:       assertFalse(node1.isOr());
2418:       assertFalse(node1.isTrue());
2419:       assertFalse(node1.isNull());
2420:       assertFalse(node1.isVoid());
2421:       assertFalse(node1.isEmpty());
2422:       assertFalse(node1.isLabelName());
2423:       assertFalse(node1.isFor());
2424:       assertEquals((-1), node1.getSourceOffset());
2425:       assertFalse(node1.isGetterDef());
2426:       assertFalse(node1.isNumber());
2427:       assertFalse(node1.isLabel());
2428:       assertFalse(node1.isTry());
2429:       assertEquals(1, node1.getChildCount());
2430:       assertFalse(node1.isAssignAdd());
2431:       assertFalse(node1.isDefaultCase());
2432:       assertFalse(node1.isCase());
2433:       assertFalse(node1.isScript());
2434:       assertEquals((-1), node1.getCharno());
2435:       assertFalse(node1.isArrayLit());
2436:       assertFalse(node1.isParamList());
2437:       assertFalse(node1.isSwitch());
2438:       assertFalse(boolean1);
2439:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2440:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2441:       assertEquals(39, Node.EMPTY_BLOCK);
2442:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2443:       assertEquals(50, Node.FREE_CALL);
2444:       assertEquals(8, Node.FLAG_NO_THROWS);
2445:       assertEquals(4095, Node.COLUMN_MASK);
2446:       assertEquals(41, Node.BRACELESS_TYPE);
2447:       assertEquals(40, Node.ORIGINALNAME_PROP);
2448:       assertEquals(48, Node.DIRECTIVES);
2449:       assertEquals(43, Node.IS_CONSTANT_NAME);
2450:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2451:       assertEquals(54, Node.SLASH_V);
2452:       assertEquals(16, Node.SOURCENAME_PROP);
2453:       assertEquals(54, Node.LAST_PROP);
2454:       assertEquals(12, Node.COLUMN_BITS);
2455:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
2456:       assertEquals(32, Node.INCRDECR_PROP);
2457:       assertEquals(1, Node.DECR_FLAG);
2458:       assertEquals(2, Node.POST_FLAG);
2459:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2460:       assertEquals(37, Node.OPT_ARG_NAME);
2461:       assertEquals(47, Node.IS_DISPATCHER);
2462:       assertEquals(29, Node.JSDOC_INFO_PROP);
2463:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2464:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2465:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2466:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
2467:       assertEquals(46, Node.IS_NAMESPACE);
2468:       assertEquals(49, Node.DIRECT_EVAL);
2469:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2470:       assertEquals(36, Node.QUOTED_PROP);
2471:       assertEquals(35, Node.PARENTHESIZED_PROP);
2472:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2473:       assertEquals(53, Node.INPUT_ID);
2474:       assertEquals(30, Node.VAR_ARGS_NAME);
2475:       assertEquals(52, Node.LENGTH);
2476:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2477:       assertEquals(29, Node.JSDOC_INFO_PROP);
2478:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2479:       assertEquals(2, Node.POST_FLAG);
2480:       assertEquals(47, Node.IS_DISPATCHER);
2481:       assertEquals(53, Node.INPUT_ID);
2482:       assertEquals(32, Node.INCRDECR_PROP);
2483:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2484:       assertEquals(35, Node.PARENTHESIZED_PROP);
2485:       assertEquals(30, Node.VAR_ARGS_NAME);
2486:       assertEquals(43, Node.IS_CONSTANT_NAME);
2487:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2488:       assertEquals(16, Node.SOURCENAME_PROP);
2489:       assertEquals(46, Node.IS_NAMESPACE);
2490:       assertEquals(54, Node.SLASH_V);
2491:       assertEquals(40, Node.ORIGINALNAME_PROP);
2492:       assertEquals(50, Node.FREE_CALL);
2493:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2494:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2495:       assertEquals(41, Node.BRACELESS_TYPE);
2496:       assertEquals(52, Node.LENGTH);
2497:       assertEquals(8, Node.FLAG_NO_THROWS);
2498:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2499:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2500:       assertEquals(39, Node.EMPTY_BLOCK);
2501:       assertEquals(49, Node.DIRECT_EVAL);
2502:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
2503:       assertEquals(1, Node.DECR_FLAG);
2504:       assertEquals(12, Node.COLUMN_BITS);
2505:       assertEquals(36, Node.QUOTED_PROP);
2506:       assertEquals(54, Node.LAST_PROP);
2507:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2508:       assertEquals(48, Node.DIRECTIVES);
2509:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2510:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2511:       assertEquals(4095, Node.COLUMN_MASK);
2512:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2513:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
2514:       assertEquals(37, Node.OPT_ARG_NAME);
2515:       assertEquals(8, Node.FLAG_NO_THROWS);
2516:       assertEquals(39, Node.EMPTY_BLOCK);
2517:       assertEquals(48, Node.DIRECTIVES);
2518:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2519:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2520:       assertEquals(50, Node.FREE_CALL);
2521:       assertEquals(41, Node.BRACELESS_TYPE);
2522:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2523:       assertEquals(52, Node.LENGTH);
2524:       assertEquals(54, Node.SLASH_V);
2525:       assertEquals(35, Node.PARENTHESIZED_PROP);
2526:       assertEquals(16, Node.SOURCENAME_PROP);
2527:       assertEquals(43, Node.IS_CONSTANT_NAME);
2528:       assertEquals(40, Node.ORIGINALNAME_PROP);
2529:       assertEquals(30, Node.VAR_ARGS_NAME);
2530:       assertEquals(37, Node.OPT_ARG_NAME);
2531:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2532:       assertEquals(2, Node.POST_FLAG);
2533:       assertEquals(32, Node.INCRDECR_PROP);
2534:       assertEquals(46, Node.IS_NAMESPACE);
2535:       assertEquals(47, Node.IS_DISPATCHER);
2536:       assertEquals(12, Node.COLUMN_BITS);
2537:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2538:       assertEquals(1, Node.DECR_FLAG);
2539:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2540:       assertEquals(29, Node.JSDOC_INFO_PROP);
2541:       assertEquals(53, Node.INPUT_ID);
2542:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2543:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2544:       assertEquals(54, Node.LAST_PROP);
2545:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2546:       assertEquals(36, Node.QUOTED_PROP);
2547:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
2548:       assertEquals(49, Node.DIRECT_EVAL);
2549:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2550:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2551:       assertEquals(4095, Node.COLUMN_MASK);
2552:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
2553:       assertEquals(37, Node.OPT_ARG_NAME);
2554:       assertEquals(32, Node.INCRDECR_PROP);
2555:       assertEquals(2, Node.POST_FLAG);
2556:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2557:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2558:   }
2559: }
RegularFileObject[/tmp/EvoSuite_139_1566407459105/com/google/javascript/jscomp/NodeUtil_139_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Aug 21 17:11:00 GMT 2019
5:  */
6: 
7: package com.google.javascript.jscomp;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NodeUtil_139_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.jscomp.NodeUtil"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/rq3/botsing-integration-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NodeUtil_139_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.common.collect.ArrayListMultimap",
82:       "com.google.javascript.jscomp.Tracer$1",
83:       "com.google.common.collect.Collections2",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.jscomp.NodeTraversal$Callback",
86:       "com.google.javascript.rhino.head.jdk13.VMBridge_jdk13",
87:       "com.google.javascript.jscomp.CheckSideEffects",
88:       "com.google.javascript.rhino.head.ast.Yield",
89:       "com.google.javascript.jscomp.SimpleDefinitionFinder",
90:       "com.google.javascript.jscomp.Scope$Arguments",
91:       "com.google.javascript.jscomp.graph.Graph",
92:       "com.google.javascript.rhino.jstype.StaticScope",
93:       "com.google.javascript.rhino.jstype.InstanceObjectType",
94:       "com.google.javascript.jscomp.graph.Annotatable",
95:       "com.google.common.collect.AbstractMapBasedMultiset$1",
96:       "com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher",
97:       "com.google.javascript.jscomp.JSModule",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.ImmutableSet$ArrayImmutableSet",
100:       "com.google.javascript.rhino.JSDocInfo$Marker",
101:       "com.google.common.collect.RegularImmutableMap",
102:       "com.google.javascript.rhino.Node$NodeMismatch",
103:       "com.google.javascript.rhino.jstype.RecordType",
104:       "com.google.javascript.rhino.head.ast.Jump",
105:       "com.google.javascript.jscomp.Tracer",
106:       "com.google.javascript.jscomp.HotSwapCompilerPass",
107:       "com.google.javascript.jscomp.SourceFile$Builder",
108:       "com.google.javascript.jscomp.CodingConvention$SubclassType",
109:       "com.google.javascript.rhino.jstype.JSType$1",
110:       "com.google.javascript.rhino.jstype.JSType$2",
111:       "com.google.javascript.jscomp.CodingConvention",
112:       "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
113:       "com.google.javascript.jscomp.SourceMap$DetailLevel",
114:       "com.google.javascript.jscomp.MemoizedScopeCreator",
115:       "com.google.javascript.rhino.head.ast.EmptyStatement",
116:       "com.google.javascript.jscomp.CompilerOptions$1",
117:       "com.google.javascript.jscomp.SourceExcerptProvider$1",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.jscomp.CheckAccessControls",
120:       "com.google.javascript.jscomp.CheckDebuggerStatement",
121:       "com.google.common.collect.SingletonImmutableMap",
122:       "com.google.javascript.jscomp.ReplaceIdGenerators",
123:       "com.google.javascript.jscomp.CleanupPasses",
124:       "com.google.javascript.rhino.head.ast.XmlFragment",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.javascript.jscomp.graph.FixedPointGraphTraversal$EdgeCallback",
127:       "com.google.javascript.jscomp.CompilerOptions$Reach",
128:       "com.google.javascript.jscomp.PassConfig$State",
129:       "com.google.javascript.rhino.head.ast.CatchClause",
130:       "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.common.collect.RegularImmutableMap$LinkedEntry",
133:       "com.google.common.collect.Lists$Partition",
134:       "com.google.javascript.rhino.head.ast.AstRoot",
135:       "com.google.javascript.rhino.head.ast.NewExpression",
136:       "com.google.common.collect.Count",
137:       "com.google.javascript.rhino.ErrorReporter",
138:       "com.google.javascript.rhino.jstype.ValueType",
139:       "com.google.javascript.rhino.Token",
140:       "com.google.javascript.rhino.head.ast.ParenthesizedExpression",
141:       "com.google.javascript.rhino.jstype.BooleanType",
142:       "com.google.javascript.jscomp.CssRenamingMap",
143:       "com.google.javascript.rhino.head.Context$ClassShutterSetter",
144:       "com.google.common.base.CharMatcher$5",
145:       "com.google.common.base.CharMatcher$4",
146:       "com.google.common.base.CharMatcher$3",
147:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$ContextualRenamer",
148:       "com.google.common.base.CharMatcher$2",
149:       "com.google.common.base.CharMatcher$9",
150:       "com.google.common.base.CharMatcher$8",
151:       "com.google.common.base.CharMatcher$7",
152:       "com.google.javascript.rhino.head.ast.Label",
153:       "com.google.common.base.CharMatcher$6",
154:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
155:       "com.google.javascript.jscomp.SuppressDocWarningsGuard",
156:       "com.google.javascript.jscomp.MessageFormatter",
157:       "com.google.javascript.rhino.JSDocInfo",
158:       "com.google.javascript.jscomp.SourceExcerptProvider$ExcerptFormatter",
159:       "com.google.common.base.CharMatcher$1",
160:       "com.google.javascript.jscomp.parsing.Config",
161:       "com.google.common.collect.EmptyImmutableList",
162:       "com.google.common.collect.ImmutableEntry",
163:       "com.google.javascript.rhino.head.CompilerEnvirons",
164:       "com.google.common.base.Joiner$1",
165:       "com.google.common.base.Joiner$2",
166:       "com.google.javascript.jscomp.ErrorHandler",
167:       "com.google.javascript.rhino.head.Callable",
168:       "com.google.javascript.jscomp.GoogleCodingConvention",
169:       "com.google.javascript.jscomp.SourceFile$Preloaded",
170:       "com.google.common.collect.ImmutableCollection",
171:       "com.google.javascript.rhino.ScriptRuntime",
172:       "com.google.javascript.rhino.head.ast.ScriptNode",
173:       "com.google.javascript.rhino.head.ast.XmlString",
174:       "com.google.javascript.jscomp.StrictModeCheck",
175:       "com.google.javascript.rhino.head.ast.WhileLoop",
176:       "com.google.javascript.jscomp.DefinitionsRemover$Definition",
177:       "com.google.javascript.jscomp.Result",
178:       "com.google.javascript.jscomp.CodingConventions$1",
179:       "com.google.javascript.jscomp.CodingConvention$ObjectLiteralCast",
180:       "com.google.javascript.jscomp.CodingConvention$SubclassRelationship",
181:       "com.google.javascript.jscomp.CompilerPass",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.jscomp.NodeUtil$MatchDeclaration",
184:       "com.google.javascript.jscomp.NodeUtil$VarCollector",
185:       "com.google.javascript.jscomp.VariableRenamingPolicy",
186:       "com.google.common.collect.ImmutableCollection$Builder",
187:       "com.google.javascript.rhino.head.ast.IfStatement",
188:       "com.google.javascript.jscomp.CodeChangeHandler",
189:       "com.google.common.collect.Lists$AbstractListWrapper",
190:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$Renamer",
191:       "com.google.javascript.jscomp.FunctionTypeBuilder",
192:       "com.google.javascript.jscomp.FunctionInformationMap",
193:       "com.google.common.collect.AbstractMapBasedMultiset",
194:       "com.google.javascript.jscomp.NodeUtil$MayBeStringResultPredicate",
195:       "com.google.javascript.rhino.jstype.EnumType",
196:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
197:       "com.google.javascript.jscomp.JsMessageVisitor$MalformedException",
198:       "com.google.javascript.rhino.head.Evaluator",
199:       "com.google.javascript.jscomp.CodingConventions$DefaultCodingConvention",
200:       "com.google.common.base.CharMatcher$LookupTable",
201:       "com.google.javascript.rhino.head.ast.XmlElemRef",
202:       "com.google.javascript.rhino.head.ast.VariableDeclaration",
203:       "com.google.javascript.rhino.head.TokenStream",
204:       "com.google.common.collect.RegularImmutableList$1",
205:       "com.google.javascript.rhino.head.ast.ObjectLiteral",
206:       "com.google.common.collect.Lists$2",
207:       "com.google.javascript.jscomp.JSSourceFile",
208:       "com.google.javascript.jscomp.CodingConventions",
209:       "com.google.common.collect.Lists$1",
210:       "com.google.javascript.rhino.jstype.StaticReference",
211:       "com.google.common.collect.Multiset",
212:       "com.google.javascript.rhino.head.ast.InfixExpression",
213:       "com.google.javascript.rhino.head.BaseFunction",
214:       "com.google.common.base.Supplier",
215:       "com.google.protobuf.MessageOrBuilder",
216:       "com.google.javascript.jscomp.GlobalVarReferenceMap",
217:       "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
218:       "com.google.javascript.rhino.head.ast.XmlPropRef",
219:       "com.google.javascript.jscomp.TypeValidator",
220:       "com.google.common.collect.ImmutableList",
221:       "com.google.protobuf.GeneratedMessage",
222:       "com.google.javascript.rhino.jstype.ObjectType$Property",
223:       "com.google.javascript.rhino.Node$AbstractPropListItem",
224:       "com.google.javascript.jscomp.Tracer$InternalClock",
225:       "com.google.common.collect.AbstractMultimap$KeySet",
226:       "com.google.javascript.jscomp.SourceMap$LocationMapping",
227:       "com.google.javascript.rhino.head.ast.VariableInitializer",
228:       "com.google.javascript.rhino.jstype.NoResolvedType",
229:       "com.google.javascript.rhino.head.ast.ThrowStatement",
230:       "com.google.protobuf.MessageLiteOrBuilder",
231:       "com.google.javascript.jscomp.NodeTraversal$AbstractNodeTypePruningCallback",
232:       "com.google.javascript.jscomp.DefaultPassConfig$99",
233:       "com.google.protobuf.MessageLite",
234:       "com.google.javascript.jscomp.DefaultPassConfig$98",
235:       "com.google.common.collect.Maps$EntryTransformer",
236:       "com.google.javascript.jscomp.DefaultPassConfig$95",
237:       "com.google.common.collect.Ordering",
238:       "com.google.javascript.jscomp.DefaultPassConfig$94",
239:       "com.google.javascript.jscomp.DefaultPassConfig$96",
240:       "com.google.javascript.jscomp.CustomPassExecutionTime",
241:       "com.google.javascript.jscomp.DefaultPassConfig$91",
242:       "com.google.javascript.jscomp.SyntacticScopeCreator",
243:       "com.google.javascript.jscomp.DefaultPassConfig$90",
244:       "com.google.javascript.jscomp.DefaultPassConfig$93",
245:       "com.google.javascript.jscomp.DefaultPassConfig$92",
246:       "com.google.javascript.rhino.head.debug.DebuggableScript",
247:       "com.google.javascript.jscomp.CompilerOptions$TweakProcessing",
248:       "com.google.common.collect.Hashing",
249:       "com.google.javascript.rhino.head.DefaultErrorReporter",
250:       "com.google.javascript.jscomp.SourceMap$Format",
251:       "com.google.javascript.rhino.jstype.NoType",
252:       "com.google.javascript.rhino.head.Script",
253:       "com.google.common.collect.AbstractMultimap$WrappedCollection",
254:       "com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider",
255:       "com.google.javascript.rhino.TokenStream",
256:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
257:       "com.google.javascript.jscomp.DefaultPassConfig$88",
258:       "com.google.javascript.jscomp.DefaultPassConfig$87",
259:       "com.google.javascript.jscomp.DefaultPassConfig$89",
260:       "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments",
261:       "com.google.javascript.rhino.head.ast.Comment",
262:       "com.google.javascript.jscomp.DefaultPassConfig$84",
263:       "com.google.javascript.jscomp.DefaultPassConfig$83",
264:       "com.google.javascript.jscomp.DefaultPassConfig$86",
265:       "com.google.javascript.jscomp.DefaultPassConfig$85",
266:       "com.google.javascript.jscomp.CodingConventions$Proxy",
267:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt",
268:       "com.google.javascript.jscomp.DefaultPassConfig$80",
269:       "com.google.javascript.jscomp.DefaultPassConfig$82",
270:       "com.google.javascript.jscomp.DefaultPassConfig$81",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.javascript.rhino.head.optimizer.Codegen",
273:       "com.google.javascript.rhino.head.ast.FunctionCall",
274:       "com.google.javascript.jscomp.RhinoErrorReporter$NewRhinoErrorReporter",
275:       "com.google.javascript.jscomp.NodeUtil",
276:       "com.google.common.collect.RegularImmutableSet",
277:       "com.google.javascript.jscomp.JsMessageVisitor",
278:       "com.google.javascript.jscomp.DefaultPassConfig$77",
279:       "com.google.javascript.jscomp.DefaultPassConfig$76",
280:       "com.google.javascript.jscomp.DefaultPassConfig$79",
281:       "com.google.javascript.jscomp.DefaultPassConfig$78",
282:       "com.google.javascript.jscomp.DefaultPassConfig$73",
283:       "com.google.javascript.jscomp.DefaultPassConfig$72",
284:       "com.google.javascript.rhino.head.EcmaError",
285:       "com.google.javascript.rhino.head.FunctionObject",
286:       "com.google.javascript.jscomp.DefaultPassConfig$75",
287:       "com.google.javascript.jscomp.DefaultPassConfig$74",
288:       "com.google.javascript.jscomp.DefaultPassConfig$71",
289:       "com.google.javascript.jscomp.DefaultPassConfig$70",
290:       "com.google.javascript.rhino.head.NativeContinuation",
291:       "com.google.javascript.rhino.head.xml.XMLObject",
292:       "com.google.javascript.rhino.head.Node$NodeIterator",
293:       "com.google.common.collect.ImmutableAsList",
294:       "com.google.javascript.jscomp.PassConfig",
295:       "com.google.javascript.jscomp.ConcreteType$ConcreteInstanceType",
296:       "com.google.common.collect.SingletonImmutableSet",
297:       "com.google.javascript.jscomp.AbstractMessageFormatter$Color",
298:       "com.google.javascript.jscomp.Normalize$NormalizeStatements",
299:       "com.google.javascript.jscomp.DefaultPassConfig$69",
300:       "com.google.javascript.rhino.head.InterpretedFunction",
301:       "com.google.javascript.jscomp.DefaultPassConfig$66",
302:       "com.google.javascript.jscomp.DefaultPassConfig$65",
303:       "com.google.javascript.jscomp.DefaultPassConfig$68",
304:       "com.google.javascript.jscomp.DefaultPassConfig$67",
305:       "com.google.javascript.rhino.jstype.ParameterizedType",
306:       "com.google.javascript.jscomp.DefaultPassConfig$62",
307:       "com.google.javascript.jscomp.DefaultPassConfig$61",
308:       "com.google.javascript.rhino.Node$SideEffectFlags",
309:       "com.google.javascript.jscomp.DefaultPassConfig$64",
310:       "com.google.javascript.jscomp.DefaultPassConfig$63",
311:       "com.google.javascript.jscomp.DefaultPassConfig$60",
312:       "com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceMap",
313:       "com.google.javascript.rhino.jstype.NullType",
314:       "com.google.javascript.jscomp.LightweightMessageFormatter",
315:       "com.google.common.collect.EmptyImmutableList$1",
316:       "com.google.javascript.jscomp.Compiler$CodeBuilder",
317:       "com.google.javascript.jscomp.FunctionInformationMapOrBuilder",
318:       "com.google.javascript.jscomp.DefaultPassConfig$HotSwapPassFactory",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.common.collect.AbstractIterator",
321:       "com.google.javascript.rhino.head.ScriptableObject$GetterSlot",
322:       "com.google.javascript.jscomp.BasicErrorManager$ErrorWithLevel",
323:       "com.google.common.base.CharMatcher$And",
324:       "com.google.javascript.jscomp.DiagnosticType",
325:       "com.google.javascript.jscomp.DefaultPassConfig$59",
326:       "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback$SideEffectAccumulator",
327:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler$NullAliasTransformation",
328:       "com.google.javascript.jscomp.DefaultPassConfig$58",
329:       "com.google.javascript.jscomp.graph.DiGraph$DiGraphNode",
330:       "com.google.javascript.jscomp.PrepareAst",
331:       "com.google.javascript.rhino.head.ast.ForLoop",
332:       "com.google.javascript.jscomp.DefaultPassConfig$55",
333:       "com.google.javascript.jscomp.DefaultPassConfig$54",
334:       "com.google.javascript.jscomp.DefaultPassConfig$57",
335:       "com.google.javascript.jscomp.DefaultPassConfig$56",
336:       "com.google.common.io.OutputSupplier",
337:       "com.google.javascript.jscomp.DefaultPassConfig$51",
338:       "com.google.javascript.jscomp.DefaultPassConfig$50",
339:       "com.google.javascript.jscomp.CompilerInput",
340:       "com.google.javascript.jscomp.DefaultPassConfig$53",
341:       "com.google.javascript.rhino.head.ast.FunctionNode",
342:       "com.google.javascript.jscomp.DefaultPassConfig$52",
343:       "com.google.javascript.jscomp.AbstractCompiler",
344:       "com.google.common.collect.UnmodifiableIterator",
345:       "com.google.javascript.jscomp.ExploitAssigns",
346:       "com.google.javascript.rhino.head.Context",
347:       "com.google.common.io.InputSupplier",
348:       "com.google.javascript.jscomp.DiagnosticGroup",
349:       "com.google.common.collect.ImmutableSet$TransformedImmutableSet",
350:       "com.google.common.collect.AbstractMultimap$WrappedList",
351:       "com.google.javascript.jscomp.CodeChangeHandler$RecentChange",
352:       "com.google.javascript.jscomp.NodeUtil$Visitor",
353:       "com.google.javascript.jscomp.SyntacticScopeCreator$RedeclarationHandler",
354:       "com.google.javascript.rhino.head.NativeBoolean",
355:       "com.google.javascript.jscomp.DefaultPassConfig$48",
356:       "com.google.javascript.rhino.Node$AncestorIterable",
357:       "com.google.common.collect.AbstractMultimap$RandomAccessWrappedList",
358:       "com.google.javascript.rhino.head.ast.Name",
359:       "com.google.javascript.jscomp.DefaultPassConfig$47",
360:       "com.google.common.collect.ImmutableEnumSet",
361:       "com.google.javascript.jscomp.DefaultPassConfig$49",
362:       "com.google.javascript.jscomp.DefaultPassConfig$44",
363:       "com.google.javascript.jscomp.DefaultPassConfig$43",
364:       "com.google.javascript.jscomp.DefaultPassConfig$46",
365:       "com.google.javascript.jscomp.DefaultPassConfig$45",
366:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax$1",
367:       "com.google.javascript.jscomp.DefaultPassConfig$40",
368:       "com.google.common.collect.HashMultiset",
369:       "com.google.javascript.rhino.jstype.UnresolvedTypeExpression",
370:       "com.google.javascript.jscomp.DefaultPassConfig$42",
371:       "com.google.javascript.jscomp.DefaultPassConfig$41",
372:       "com.google.protobuf.AbstractMessageLite",
373:       "com.google.javascript.jscomp.ErrorManager",
374:       "com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate",
375:       "com.google.common.collect.SingletonImmutableList",
376:       "com.google.javascript.rhino.head.ast.ConditionalExpression",
377:       "com.google.javascript.jscomp.CheckLevel",
378:       "com.google.javascript.rhino.jstype.StaticSlot",
379:       "com.google.common.collect.LinkedListMultimap",
380:       "com.google.javascript.rhino.head.ast.PropertyGet",
381:       "com.google.common.collect.AbstractSetMultimap",
382:       "com.google.javascript.rhino.head.ContextFactory",
383:       "com.google.common.base.Function",
384:       "com.google.javascript.rhino.head.VMBridge",
385:       "com.google.common.collect.ImmutableMap",
386:       "com.google.common.collect.Multiset$Entry",
387:       "com.google.javascript.jscomp.DefaultPassConfig$37",
388:       "com.google.javascript.jscomp.DefaultPassConfig$36",
389:       "com.google.javascript.jscomp.DefaultPassConfig$39",
390:       "com.google.javascript.jscomp.DefaultPassConfig$38",
391:       "com.google.javascript.jscomp.DefaultPassConfig$33",
392:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
393:       "com.google.javascript.jscomp.DefaultPassConfig$32",
394:       "com.google.javascript.jscomp.DefaultPassConfig$35",
395:       "com.google.javascript.jscomp.DefaultPassConfig$34",
396:       "com.google.javascript.rhino.head.ast.Loop",
397:       "com.google.javascript.jscomp.DefaultPassConfig$31",
398:       "com.google.javascript.jscomp.CrossModuleMethodMotion$IdGenerator",
399:       "com.google.javascript.jscomp.Region",
400:       "com.google.javascript.jscomp.DefaultPassConfig$30",
401:       "com.google.javascript.rhino.IR",
402:       "com.google.javascript.rhino.head.ast.GeneratorExpressionLoop",
403:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
404:       "com.google.javascript.jscomp.NodeTraversal$AbstractPostOrderCallback",
405:       "com.google.javascript.jscomp.DefaultPassConfig",
406:       "com.google.javascript.jscomp.Normalize",
407:       "com.google.javascript.jscomp.CompilerOptions$TracerMode",
408:       "com.google.javascript.jscomp.RhinoErrorReporter$OldRhinoErrorReporter",
409:       "com.google.javascript.jscomp.DefinitionProvider",
410:       "com.google.javascript.jscomp.NameAnalyzer$1",
411:       "com.google.common.collect.AbstractMultiset",
412:       "com.google.javascript.jscomp.DefaultPassConfig$29",
413:       "com.google.javascript.jscomp.DefaultPassConfig$26",
414:       "com.google.javascript.jscomp.DefaultPassConfig$25",
415:       "com.google.common.collect.Iterators",
416:       "com.google.javascript.jscomp.DefaultPassConfig$28",
417:       "com.google.javascript.rhino.head.IdFunctionCall",
418:       "com.google.javascript.jscomp.DefaultPassConfig$27",
419:       "com.google.javascript.jscomp.DefaultPassConfig$22",
420:       "com.google.javascript.jscomp.DefaultPassConfig$21",
421:       "com.google.javascript.jscomp.DefaultPassConfig$24",
422:       "com.google.javascript.jscomp.DefaultPassConfig$23",
423:       "com.google.javascript.jscomp.ProcessTweaks$TweakFunction",
424:       "com.google.javascript.rhino.head.ast.SwitchStatement",
425:       "com.google.javascript.jscomp.DependencyOptions",
426:       "com.google.common.collect.Multisets$EntrySet",
427:       "com.google.javascript.jscomp.DefaultPassConfig$20",
428:       "com.google.javascript.rhino.head.ast.DoLoop",
429:       "com.google.javascript.jscomp.SourceFile$OnDisk",
430:       "com.google.javascript.rhino.head.ScriptRuntime",
431:       "com.google.javascript.jscomp.DefaultPassConfig$19",
432:       "com.google.javascript.jscomp.DefaultPassConfig$18",
433:       "com.google.javascript.rhino.jstype.JSTypeNative",
434:       "com.google.javascript.rhino.jstype.AllType",
435:       "com.google.javascript.jscomp.DefaultPassConfig$15",
436:       "com.google.common.collect.Maps",
437:       "com.google.common.primitives.Ints",
438:       "com.google.javascript.jscomp.DefaultPassConfig$14",
439:       "com.google.javascript.jscomp.NodeTraversal$AbstractShallowStatementCallback",
440:       "com.google.common.collect.SetMultimap",
441:       "com.google.javascript.rhino.head.ast.ExpressionStatement",
442:       "com.google.javascript.jscomp.DefaultPassConfig$17",
443:       "com.google.javascript.jscomp.DefaultPassConfig$16",
444:       "com.google.common.collect.ImmutableSet$SerializedForm",
445:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
446:       "com.google.javascript.jscomp.DefaultPassConfig$7",
447:       "com.google.javascript.jscomp.DefaultPassConfig$11",
448:       "com.google.javascript.jscomp.DefaultPassConfig$8",
449:       "com.google.javascript.jscomp.DefaultPassConfig$10",
450:       "com.google.javascript.jscomp.DefaultPassConfig$5",
451:       "com.google.javascript.jscomp.DefaultPassConfig$13",
452:       "com.google.javascript.jscomp.DefaultPassConfig$6",
453:       "com.google.javascript.jscomp.DefaultPassConfig$12",
454:       "com.google.javascript.rhino.JSTypeExpression",
455:       "com.google.javascript.jscomp.DefaultPassConfig$9",
456:       "com.google.javascript.jscomp.PrintStreamErrorManager",
457:       "com.google.javascript.jscomp.Tracer$Stat",
458:       "com.google.javascript.rhino.head.ScriptableObject",
459:       "com.google.javascript.rhino.head.IdScriptableObject",
460:       "com.google.javascript.rhino.head.NativeFunction",
461:       "com.google.common.collect.RegularImmutableMap$Values",
462:       "com.google.javascript.jscomp.DefaultPassConfig$3",
463:       "com.google.javascript.jscomp.DefaultPassConfig$4",
464:       "com.google.javascript.jscomp.DefaultPassConfig$1",
465:       "com.google.javascript.jscomp.DefaultPassConfig$2",
466:       "com.google.javascript.rhino.head.ast.ObjectProperty",
467:       "com.google.javascript.rhino.head.Icode",
468:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
469:       "com.google.javascript.jscomp.type.ReverseAbstractInterpreter",
470:       "com.google.javascript.jscomp.CompilerOptions$LanguageMode",
471:       "com.google.javascript.rhino.head.ast.UnaryExpression",
472:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
473:       "com.google.javascript.rhino.jstype.ArrowType",
474:       "com.google.javascript.rhino.SimpleErrorReporter",
475:       "com.google.common.collect.Lists$RandomAccessPartition",
476:       "com.google.javascript.jscomp.type.FlowScope",
477:       "com.google.javascript.rhino.head.WrappedException",
478:       "com.google.javascript.jscomp.TightenTypes$ConcreteScope",
479:       "com.google.javascript.jscomp.graph.GraphNode",
480:       "com.google.javascript.rhino.jstype.NumberType",
481:       "com.google.javascript.rhino.head.debug.DebuggableObject",
482:       "com.google.javascript.rhino.head.Function",
483:       "com.google.common.collect.LinkedHashMultiset",
484:       "com.google.javascript.jscomp.PassFactory",
485:       "com.google.common.collect.Sets$2",
486:       "com.google.javascript.rhino.Node$IntPropListItem",
487:       "com.google.common.collect.Sets$3",
488:       "com.google.javascript.rhino.head.ast.LetNode",
489:       "com.google.common.collect.Sets$1",
490:       "com.google.javascript.jscomp.parsing.IRFactory$1",
491:       "com.google.common.collect.AbstractSortedSetMultimap",
492:       "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator",
493:       "com.google.javascript.jscomp.ControlFlowGraph",
494:       "com.google.javascript.jscomp.graph.GraphvizGraph",
495:       "com.google.javascript.rhino.head.ContextFactory$Listener",
496:       "com.google.javascript.rhino.head.NativeCall",
497:       "com.google.javascript.rhino.jstype.ModificationVisitor",
498:       "com.google.common.collect.AbstractMapEntry",
499:       "com.google.javascript.rhino.Node$AncestorIterable$1",
500:       "com.google.common.collect.Iterators$12",
501:       "com.google.common.collect.Iterators$11",
502:       "com.google.javascript.jscomp.ClosureCodingConvention",
503:       "com.google.common.base.Predicate",
504:       "com.google.javascript.jscomp.ReplaceIdGenerators$NameSupplier",
505:       "com.google.common.collect.AbstractMultimap$AsMap",
506:       "com.google.javascript.jscomp.ControlStructureCheck",
507:       "com.google.javascript.jscomp.VariableReferenceCheck",
508:       "com.google.javascript.jscomp.WarningsGuard",
509:       "com.google.javascript.jscomp.SourceMap",
510:       "com.google.javascript.rhino.head.ast.ForInLoop",
511:       "com.google.javascript.jscomp.Tracer$AtomicTracerStatMap",
512:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
513:       "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
514:       "com.google.common.collect.AbstractListMultimap",
515:       "com.google.javascript.jscomp.LightweightMessageFormatter$LineNumberingFormatter",
516:       "com.google.javascript.jscomp.CompilerOptions",
517:       "com.google.javascript.rhino.Node$StringNode",
518:       "com.google.javascript.rhino.jstype.TemplateType",
519:       "com.google.javascript.rhino.jstype.NamedType",
520:       "com.google.common.collect.Iterators$14",
521:       "com.google.common.collect.Iterators$13",
522:       "com.google.common.collect.Lists",
523:       "com.google.javascript.jscomp.CheckProvides",
524:       "com.google.javascript.rhino.head.ast.Block",
525:       "com.google.common.collect.UnmodifiableListIterator",
526:       "com.google.javascript.rhino.head.ast.SwitchCase",
527:       "com.google.common.io.ByteArrayDataInput",
528:       "com.google.javascript.jscomp.RhinoErrorReporter",
529:       "com.google.javascript.jscomp.CompilerOptions$AliasTransformation",
530:       "com.google.javascript.rhino.jstype.UnknownType",
531:       "com.google.common.base.Charsets",
532:       "com.google.javascript.rhino.head.ast.StringLiteral",
533:       "com.google.javascript.jscomp.CheckGlobalNames",
534:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
535:       "com.google.javascript.rhino.jstype.StaticSourceFile",
536:       "org.mozilla.classfile.ClassFileWriter$ClassFileFormatException",
537:       "com.google.javascript.rhino.head.ScriptableObject$Slot",
538:       "com.google.javascript.rhino.head.ast.ReturnStatement",
539:       "com.google.javascript.jscomp.ConcreteType$ConcreteFunctionType",
540:       "com.google.common.base.CharMatcher",
541:       "com.google.javascript.rhino.jstype.JSType$TypePair",
542:       "com.google.common.base.Joiner$MapJoiner",
543:       "com.google.javascript.jscomp.CheckRegExp",
544:       "com.google.javascript.jscomp.CheckGlobalThis",
545:       "com.google.common.collect.RegularImmutableMap$NonTerminalEntry",
546:       "com.google.common.collect.AbstractMultiset$EntrySet",
547:       "com.google.javascript.jscomp.ConcreteType$Factory",
548:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt$2",
549:       "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
550:       "com.google.common.base.Preconditions",
551:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt$1",
552:       "com.google.javascript.rhino.head.ast.ArrayLiteral",
553:       "com.google.javascript.rhino.head.ast.RegExpLiteral",
554:       "com.google.javascript.rhino.head.Token",
555:       "com.google.javascript.jscomp.BasicErrorManager",
556:       "com.google.javascript.jscomp.SourceFile$Generator",
557:       "com.google.javascript.jscomp.PerformanceTracker",
558:       "com.google.javascript.rhino.jstype.IndexedType",
559:       "com.google.javascript.jscomp.NodeUtil$MatchNodeType",
560:       "com.google.javascript.jscomp.ComposeWarningsGuard$GuardComparator",
561:       "com.google.javascript.jscomp.ProcessDefines",
562:       "com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph",
563:       "com.google.javascript.rhino.head.NativeArray",
564:       "com.google.javascript.jscomp.PeepholeFoldConstants",
565:       "com.google.javascript.rhino.Node$NumberNode",
566:       "com.google.javascript.jscomp.Scope",
567:       "com.google.common.io.ByteArrayDataOutput",
568:       "com.google.javascript.rhino.head.Parser",
569:       "com.google.common.collect.Iterators$6",
570:       "com.google.javascript.jscomp.ErrorFormat$2",
571:       "com.google.javascript.jscomp.Scope$Var",
572:       "com.google.common.collect.BiMap",
573:       "com.google.common.collect.Iterators$7",
574:       "com.google.javascript.jscomp.ErrorFormat$3",
575:       "com.google.javascript.rhino.head.NativeString",
576:       "com.google.javascript.jscomp.ErrorFormat$4",
577:       "com.google.javascript.rhino.head.ast.XmlRef",
578:       "com.google.common.collect.ImmutableSet",
579:       "com.google.common.collect.SortedSetMultimap",
580:       "com.google.javascript.jscomp.PeepholeReplaceKnownMethods",
581:       "com.google.javascript.jscomp.AbstractPeepholeOptimization",
582:       "com.google.javascript.rhino.jstype.JSTypeRegistry$ResolveMode",
583:       "com.google.javascript.rhino.head.ast.ElementGet",
584:       "com.google.common.collect.Iterators$1",
585:       "com.google.javascript.jscomp.DisambiguateProperties$Warnings",
586:       "com.google.common.collect.Iterators$2",
587:       "com.google.common.collect.Iterators$3",
588:       "com.google.javascript.jscomp.parsing.Annotation",
589:       "com.google.javascript.jscomp.AbstractMessageFormatter",
590:       "com.google.javascript.jscomp.DefinitionSite",
591:       "com.google.common.collect.Lists$StringAsImmutableList",
592:       "com.google.javascript.rhino.head.JavaScriptException",
593:       "com.google.javascript.rhino.head.ast.IdeErrorReporter",
594:       "com.google.javascript.jscomp.ProcessTweaks",
595:       "com.google.javascript.jscomp.NodeUtil$1",
596:       "com.google.javascript.rhino.head.ast.TryStatement",
597:       "com.google.javascript.jscomp.parsing.IRFactory",
598:       "com.google.javascript.jscomp.ErrorFormat$1",
599:       "com.google.javascript.rhino.head.TopLevel",
600:       "com.google.javascript.jscomp.Compiler$3",
601:       "com.google.javascript.jscomp.PrepareAst$PrepareAnnotations",
602:       "com.google.javascript.jscomp.NameAnalyzer",
603:       "com.google.javascript.jscomp.Scope$1",
604:       "com.google.common.collect.AbstractMultimap",
605:       "com.google.common.base.Predicates$ObjectPredicate$1",
606:       "com.google.common.collect.EmptyImmutableSet",
607:       "com.google.javascript.jscomp.UseSite",
608:       "com.google.common.io.Files",
609:       "com.google.javascript.jscomp.NodeUtil$MatchNotFunction",
610:       "com.google.javascript.jscomp.LinkedFlowScope$FlatFlowScopeCache",
611:       "com.google.javascript.jscomp.parsing.Config$LanguageMode",
612:       "com.google.javascript.rhino.head.ast.ArrayComprehension",
613:       "com.google.javascript.jscomp.OptimizeCalls$CallGraphCompilerPass",
614:       "com.google.javascript.jscomp.CodingConvention$Bind",
615:       "com.google.protobuf.AbstractMessage",
616:       "com.google.javascript.rhino.head.ScriptRuntime$1",
617:       "com.google.javascript.jscomp.PassFactory$1",
618:       "com.google.javascript.rhino.head.ObjToIntMap",
619:       "com.google.javascript.jscomp.PeepholeRemoveDeadCode",
620:       "com.google.common.collect.ImmutableMap$Builder",
621:       "com.google.javascript.rhino.head.ConstProperties",
622:       "com.google.javascript.jscomp.deps.SortedDependencies$MissingProvideException",
623:       "com.google.common.base.Predicates$ObjectPredicate$4",
624:       "com.google.javascript.jscomp.ReorderConstantExpression",
625:       "com.google.common.base.Predicates$ObjectPredicate$3",
626:       "com.google.javascript.jscomp.LinkedFlowScope",
627:       "com.google.common.base.Predicates$ObjectPredicate$2",
628:       "com.google.javascript.jscomp.NodeUtil$MatchNameNode",
629:       "com.google.common.collect.LinkedListMultimap$Node",
630:       "com.google.common.collect.ListMultimap",
631:       "com.google.javascript.rhino.JSDocInfo$Visibility",
632:       "com.google.javascript.rhino.head.ast.DestructuringForm",
633:       "com.google.javascript.jscomp.SourceMap$Format$4",
634:       "com.google.javascript.jscomp.SourceMap$Format$3",
635:       "com.google.javascript.jscomp.SourceMap$Format$2",
636:       "com.google.javascript.jscomp.SourceMap$Format$1",
637:       "com.google.javascript.jscomp.SourceAst",
638:       "com.google.common.base.Predicates$ObjectPredicate",
639:       "com.google.javascript.rhino.jstype.TernaryValue$1",
640:       "com.google.common.collect.RegularImmutableList",
641:       "com.google.javascript.jscomp.MessageBundle",
642:       "com.google.javascript.rhino.jstype.TernaryValue$3",
643:       "com.google.javascript.rhino.jstype.TernaryValue$2",
644:       "com.google.javascript.jscomp.CheckUnreachableCode",
645:       "com.google.javascript.jscomp.SourceExcerptProvider",
646:       "com.google.common.collect.Lists$TransformingRandomAccessList",
647:       "com.google.javascript.rhino.head.ScriptableObject$RelinkedSlot",
648:       "com.google.javascript.jscomp.ReferenceCollectingCallback$Behavior",
649:       "com.google.javascript.rhino.Node$PropListItem",
650:       "com.google.common.collect.RegularImmutableMap$KeySet",
651:       "com.google.common.collect.Maps$KeySet",
652:       "com.google.javascript.rhino.Node",
653:       "com.google.javascript.rhino.head.RhinoException",
654:       "com.google.javascript.rhino.head.ast.EmptyExpression",
655:       "com.google.javascript.rhino.SourcePosition",
656:       "com.google.javascript.rhino.head.ast.XmlLiteral",
657:       "com.google.javascript.rhino.head.ast.ContinueStatement",
658:       "com.google.javascript.jscomp.LoggerErrorManager",
659:       "com.google.javascript.jscomp.ComposeWarningsGuard",
660:       "com.google.javascript.jscomp.NodeTraversal",
661:       "com.google.javascript.rhino.head.ErrorReporter",
662:       "com.google.javascript.jscomp.NodeTraversal$AbstractScopedCallback",
663:       "com.google.common.collect.Multisets",
664:       "com.google.javascript.jscomp.VariableMap",
665:       "com.google.javascript.jscomp.JsAst",
666:       "com.google.javascript.rhino.head.ast.XmlMemberGet",
667:       "com.google.javascript.jscomp.ErrorFormat",
668:       "com.google.javascript.rhino.head.ast.Scope",
669:       "com.google.javascript.jscomp.AbstractCompiler$LifeCycleStage",
670:       "com.google.javascript.jscomp.ConcreteType",
671:       "com.google.javascript.rhino.head.Scriptable",
672:       "com.google.javascript.jscomp.JqueryCodingConvention",
673:       "com.google.common.io.ByteStreams",
674:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
675:       "com.google.javascript.jscomp.NodeUtil$BooleanResultPredicate",
676:       "com.google.javascript.jscomp.SourceMap$1",
677:       "com.google.javascript.jscomp.TightenTypes",
678:       "com.google.javascript.rhino.jstype.VoidType",
679:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler",
680:       "com.google.javascript.rhino.jstype.JSType",
681:       "com.google.common.io.ByteProcessor",
682:       "com.google.javascript.jscomp.ControlFlowGraph$Branch",
683:       "com.google.common.collect.Sets$SetView",
684:       "com.google.common.collect.ImmutableSet$Builder",
685:       "com.google.javascript.jscomp.SyntheticAst",
686:       "com.google.javascript.jscomp.DiagnosticGroups",
687:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
688:       "com.google.javascript.jscomp.ScopeCreator",
689:       "com.google.common.collect.RegularImmutableMap$TerminalEntry",
690:       "com.google.common.base.Predicates",
691:       "com.google.javascript.jscomp.graph.AdjacencyGraph",
692:       "com.google.javascript.jscomp.deps.SortedDependencies$CircularDependencyException",
693:       "com.google.common.collect.Lists$TransformingSequentialList",
694:       "com.google.javascript.rhino.head.NativeNumber",
695:       "com.google.javascript.jscomp.SourceFile",
696:       "com.google.javascript.rhino.head.ast.BreakStatement",
697:       "com.google.javascript.jscomp.PropertyRenamingPolicy",
698:       "com.google.javascript.jscomp.AstChangeProxy$ChangeListener",
699:       "com.google.javascript.rhino.jstype.FunctionBuilder",
700:       "com.google.javascript.jscomp.CodingConvention$DelegateRelationship",
701:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax$FoldArrayAction",
702:       "com.google.javascript.rhino.head.ast.WithStatement",
703:       "com.google.javascript.rhino.head.ScriptRuntime$MessageProvider",
704:       "com.google.common.collect.MapDifference",
705:       "com.google.javascript.jscomp.CompilerOptions$AliasTransformationHandler",
706:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
707:       "com.google.javascript.jscomp.SourceFile$Generated",
708:       "com.google.javascript.rhino.jstype.FunctionType",
709:       "com.google.javascript.rhino.head.ast.AstNode",
710:       "com.google.javascript.jscomp.Compiler",
711:       "com.google.javascript.jscomp.NodeTraversal$ScopedCallback",
712:       "com.google.javascript.jscomp.TypedScopeCreator",
713:       "com.google.common.base.CharMatcher$12",
714:       "com.google.common.base.CharMatcher$11",
715:       "com.google.javascript.rhino.head.Node",
716:       "com.google.common.base.CharMatcher$10",
717:       "com.google.javascript.rhino.jstype.TernaryValue",
718:       "com.google.common.io.Files$1",
719:       "com.google.javascript.jscomp.JSError",
720:       "com.google.common.base.CharMatcher$15",
721:       "com.google.common.base.CharMatcher$14",
722:       "com.google.common.collect.Lists$RandomAccessListWrapper",
723:       "com.google.common.base.CharMatcher$13",
724:       "com.google.common.base.Platform",
725:       "com.google.javascript.jscomp.TypedScopeCreator$GlobalScopeBuilder",
726:       "com.google.javascript.jscomp.PeepholeFoldWithTypes",
727:       "com.google.javascript.rhino.head.ast.KeywordLiteral",
728:       "com.google.javascript.jscomp.NodeTraversal$AbstractShallowCallback",
729:       "com.google.common.collect.TreeMultimap",
730:       "com.google.javascript.rhino.head.ast.Assignment",
731:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
732:       "com.google.javascript.rhino.jstype.UnionType",
733:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
734:       "com.google.javascript.rhino.head.ast.LabeledStatement",
735:       "com.google.javascript.jscomp.ControlFlowAnalysis",
736:       "com.google.javascript.jscomp.graph.LatticeElement",
737:       "com.google.common.collect.AbstractIndexedListIterator",
738:       "com.google.javascript.rhino.head.ast.XmlExpression",
739:       "com.google.javascript.jscomp.JSModuleGraph",
740:       "com.google.common.collect.AbstractMultimap$SortedKeySet",
741:       "com.google.javascript.jscomp.SyntacticScopeCreator$DefaultRedeclarationHandler",
742:       "com.google.common.collect.Sets",
743:       "com.google.common.collect.ImmutableCollection$EmptyImmutableCollection",
744:       "com.google.javascript.jscomp.TypedScopeCreator$LocalScopeBuilder",
745:       "com.google.javascript.rhino.head.Kit",
746:       "com.google.javascript.jscomp.BasicErrorManager$LeveledJSErrorComparator",
747:       "com.google.javascript.rhino.Node$ObjectPropListItem",
748:       "com.google.javascript.rhino.head.jdk15.VMBridge_jdk15",
749:       "com.google.javascript.rhino.head.ContextAction",
750:       "com.google.javascript.rhino.head.EvaluatorException",
751:       "com.google.javascript.jscomp.ProcessCommonJSModules",
752:       "com.google.javascript.rhino.head.ast.NumberLiteral",
753:       "com.google.common.collect.AbstractMultimap$SortedAsMap",
754:       "com.google.javascript.jscomp.Compiler$IntermediateState",
755:       "com.google.javascript.jscomp.AstChangeProxy",
756:       "com.google.javascript.jscomp.SymbolTable$2",
757:       "com.google.javascript.rhino.head.ast.ErrorNode",
758:       "com.google.common.collect.EmptyImmutableMap",
759:       "com.google.javascript.jscomp.SymbolTable$3",
760:       "com.google.javascript.jscomp.SymbolTable$4",
761:       "com.google.common.collect.Multimap",
762:       "com.google.javascript.jscomp.SourceMap$DetailLevel$2",
763:       "com.google.javascript.jscomp.SourceMap$DetailLevel$1",
764:       "com.google.javascript.jscomp.VarCheck",
765:       "com.google.javascript.jscomp.CompilerOptions$DevMode",
766:       "com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder",
767:       "com.google.javascript.rhino.head.Interpreter",
768:       "com.google.javascript.rhino.jstype.StringType",
769:       "com.google.javascript.rhino.head.ImporterTopLevel",
770:       "com.google.javascript.rhino.jstype.StaticSymbolTable",
771:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
772:       "com.google.javascript.jscomp.JSModuleGraph$ModuleDependenceException",
773:       "com.google.javascript.jscomp.graph.DiGraph",
774:       "com.google.common.base.Platform$1",
775:       "com.google.javascript.jscomp.parsing.ParserRunner",
776:       "com.google.common.collect.RegularImmutableMap$EntrySet",
777:       "com.google.javascript.rhino.head.ast.GeneratorExpression",
778:       "com.google.javascript.rhino.head.ast.XmlDotQuery",
779:       "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement",
780:       "com.google.javascript.jscomp.ConstCheck",
781:       "com.google.javascript.rhino.jstype.Visitor",
782:       "com.google.javascript.jscomp.TypeCheck",
783:       "com.google.javascript.jscomp.SymbolTable",
784:       "com.google.javascript.jscomp.deps.DependencyInfo",
785:       "com.google.javascript.jscomp.Compiler$10",
786:       "com.google.javascript.jscomp.WarningsGuard$Priority",
787:       "com.google.javascript.rhino.head.ContextFactory$GlobalSetter",
788:       "com.google.common.base.CharMatcher$Or",
789:       "com.google.javascript.rhino.head.ast.NodeVisitor",
790:       "com.google.protobuf.Message",
791:       "com.google.javascript.rhino.head.ast.ArrayComprehensionLoop",
792:       "com.google.javascript.rhino.head.Parser$ParserException",
793:       "com.google.common.collect.Table",
794:       "com.google.javascript.rhino.head.NativeObject"
795:     );
796:   } 
797: 
798:   private static void resetClasses() {
799:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NodeUtil_139_tmp__ESTest_scaffolding.class.getClassLoader()); 
800: 
801:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
802:       "com.google.common.collect.ImmutableCollection$EmptyImmutableCollection",
803:       "com.google.common.collect.ImmutableCollection",
804:       "com.google.common.collect.ImmutableSet",
805:       "com.google.common.collect.Hashing",
806:       "com.google.common.collect.ImmutableSet$ArrayImmutableSet",
807:       "com.google.common.collect.RegularImmutableSet",
808:       "com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate",
809:       "com.google.javascript.jscomp.NodeUtil$BooleanResultPredicate",
810:       "com.google.javascript.jscomp.NodeUtil$MayBeStringResultPredicate",
811:       "com.google.javascript.jscomp.NodeUtil$MatchNotFunction",
812:       "com.google.javascript.jscomp.NodeUtil",
813:       "com.google.javascript.jscomp.NodeUtil$MatchNodeType",
814:       "com.google.javascript.jscomp.NodeUtil$MatchNameNode",
815:       "com.google.javascript.jscomp.NodeUtil$VarCollector",
816:       "com.google.javascript.rhino.jstype.TernaryValue",
817:       "com.google.common.base.Predicates$ObjectPredicate",
818:       "com.google.javascript.rhino.TokenStream",
819:       "com.google.javascript.jscomp.AbstractPeepholeOptimization",
820:       "com.google.javascript.jscomp.PeepholeFoldWithTypes",
821:       "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments",
822:       "com.google.javascript.jscomp.CodingConventions$Proxy",
823:       "com.google.javascript.jscomp.GoogleCodingConvention",
824:       "com.google.javascript.jscomp.DiagnosticType",
825:       "com.google.javascript.jscomp.ClosureCodingConvention",
826:       "com.google.javascript.jscomp.CodingConventions",
827:       "com.google.javascript.jscomp.CodingConventions$DefaultCodingConvention",
828:       "com.google.common.collect.Sets",
829:       "com.google.common.base.Joiner",
830:       "com.google.common.base.Preconditions",
831:       "com.google.common.collect.Collections2",
832:       "com.google.common.base.Joiner$MapJoiner",
833:       "com.google.common.collect.Maps",
834:       "com.google.common.collect.ImmutableList",
835:       "com.google.common.collect.UnmodifiableIterator",
836:       "com.google.common.collect.UnmodifiableListIterator",
837:       "com.google.common.collect.EmptyImmutableList$1",
838:       "com.google.common.collect.EmptyImmutableList",
839:       "com.google.common.collect.Iterators$1",
840:       "com.google.common.collect.Iterators$2",
841:       "com.google.common.collect.Iterators",
842:       "com.google.javascript.jscomp.SourceFile",
843:       "com.google.javascript.jscomp.JSSourceFile",
844:       "com.google.javascript.jscomp.SourceFile$Builder",
845:       "com.google.common.base.Charsets",
846:       "com.google.javascript.jscomp.SourceFile$OnDisk",
847:       "com.google.javascript.jscomp.JsAst",
848:       "com.google.javascript.rhino.InputId",
849:       "com.google.common.io.Files",
850:       "com.google.common.io.Files$1",
851:       "com.google.common.io.ByteStreams",
852:       "com.google.javascript.jscomp.AbstractCompiler",
853:       "com.google.javascript.jscomp.JSError",
854:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax$1",
855:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
856:       "com.google.javascript.jscomp.Compiler",
857:       "com.google.javascript.jscomp.RhinoErrorReporter",
858:       "com.google.javascript.jscomp.RhinoErrorReporter$OldRhinoErrorReporter",
859:       "com.google.javascript.rhino.head.Kit",
860:       "com.google.javascript.rhino.head.optimizer.Codegen",
861:       "com.google.javascript.rhino.head.Icode",
862:       "com.google.javascript.rhino.head.Interpreter",
863:       "com.google.javascript.rhino.head.Context",
864:       "com.google.javascript.rhino.head.ContextFactory",
865:       "com.google.javascript.rhino.head.ScriptableObject",
866:       "com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider",
867:       "com.google.javascript.rhino.head.ScriptRuntime",
868:       "com.google.javascript.rhino.head.jdk13.VMBridge_jdk13",
869:       "com.google.javascript.rhino.head.jdk15.VMBridge_jdk15",
870:       "com.google.javascript.rhino.head.VMBridge",
871:       "com.google.javascript.rhino.ScriptRuntime",
872:       "com.google.common.collect.ImmutableMap",
873:       "com.google.common.collect.RegularImmutableMap",
874:       "com.google.common.collect.AbstractMapEntry",
875:       "com.google.common.collect.ImmutableEntry",
876:       "com.google.common.collect.RegularImmutableMap$TerminalEntry",
877:       "com.google.javascript.jscomp.RhinoErrorReporter$NewRhinoErrorReporter",
878:       "com.google.javascript.jscomp.PassFactory",
879:       "com.google.javascript.jscomp.Compiler$3",
880:       "com.google.javascript.jscomp.CodeChangeHandler$RecentChange",
881:       "com.google.common.collect.Lists",
882:       "com.google.javascript.jscomp.NodeTraversal",
883:       "com.google.javascript.jscomp.SyntacticScopeCreator",
884:       "com.google.javascript.jscomp.SyntacticScopeCreator$DefaultRedeclarationHandler",
885:       "com.google.javascript.rhino.SimpleErrorReporter",
886:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
887:       "com.google.common.collect.AbstractMultimap",
888:       "com.google.common.collect.AbstractSetMultimap",
889:       "com.google.common.collect.LinkedHashMultimap",
890:       "com.google.common.collect.AbstractListMultimap",
891:       "com.google.common.collect.ArrayListMultimap",
892:       "com.google.javascript.rhino.jstype.JSTypeRegistry$ResolveMode",
893:       "com.google.javascript.rhino.jstype.JSTypeNative",
894:       "com.google.javascript.rhino.jstype.JSType$1",
895:       "com.google.javascript.rhino.jstype.JSType",
896:       "com.google.javascript.rhino.jstype.ValueType",
897:       "com.google.javascript.rhino.jstype.BooleanType",
898:       "com.google.javascript.rhino.jstype.NullType",
899:       "com.google.javascript.rhino.jstype.NumberType",
900:       "com.google.javascript.rhino.jstype.StringType",
901:       "com.google.javascript.rhino.jstype.ObjectType",
902:       "com.google.javascript.rhino.jstype.UnknownType",
903:       "com.google.javascript.rhino.jstype.VoidType",
904:       "com.google.javascript.rhino.jstype.AllType",
905:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
906:       "com.google.javascript.rhino.jstype.FunctionType",
907:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
908:       "com.google.javascript.rhino.Node",
909:       "com.google.javascript.rhino.Node$StringNode",
910:       "com.google.javascript.rhino.Node$AbstractPropListItem",
911:       "com.google.javascript.rhino.Node$IntPropListItem",
912:       "com.google.javascript.rhino.jstype.ArrowType",
913:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
914:       "com.google.javascript.rhino.jstype.InstanceObjectType",
915:       "com.google.javascript.rhino.jstype.ObjectType$Property",
916:       "com.google.javascript.rhino.jstype.NoObjectType",
917:       "com.google.javascript.rhino.jstype.NoType",
918:       "com.google.javascript.rhino.jstype.NoResolvedType",
919:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
920:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
921:       "com.google.javascript.rhino.jstype.UnionType",
922:       "com.google.common.collect.RegularImmutableList",
923:       "com.google.javascript.rhino.jstype.FunctionBuilder",
924:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
925:       "com.google.javascript.jscomp.SymbolTable",
926:       "com.google.javascript.rhino.Token",
927:       "com.google.javascript.jscomp.TightenTypes",
928:       "com.google.javascript.rhino.Node$NumberNode",
929:       "com.google.javascript.rhino.IR",
930:       "com.google.javascript.rhino.Node$SideEffectFlags",
931:       "com.google.javascript.jscomp.ExploitAssigns",
932:       "com.google.javascript.jscomp.Compiler$IntermediateState",
933:       "com.google.javascript.jscomp.PassConfig",
934:       "com.google.javascript.jscomp.DefaultPassConfig",
935:       "com.google.javascript.jscomp.CrossModuleMethodMotion$IdGenerator",
936:       "com.google.javascript.jscomp.DefaultPassConfig$HotSwapPassFactory",
937:       "com.google.javascript.jscomp.DefaultPassConfig$1",
938:       "com.google.javascript.jscomp.DefaultPassConfig$2",
939:       "com.google.javascript.jscomp.DefaultPassConfig$3",
940:       "com.google.javascript.jscomp.DefaultPassConfig$4",
941:       "com.google.javascript.jscomp.DefaultPassConfig$5",
942:       "com.google.javascript.jscomp.DefaultPassConfig$6",
943:       "com.google.javascript.jscomp.DefaultPassConfig$7",
944:       "com.google.javascript.jscomp.DefaultPassConfig$8",
945:       "com.google.javascript.jscomp.DefaultPassConfig$9",
946:       "com.google.javascript.jscomp.DefaultPassConfig$10",
947:       "com.google.javascript.jscomp.DefaultPassConfig$11",
948:       "com.google.javascript.jscomp.DefaultPassConfig$12",
949:       "com.google.javascript.jscomp.DefaultPassConfig$13",
950:       "com.google.javascript.jscomp.DefaultPassConfig$14",
951:       "com.google.javascript.jscomp.DefaultPassConfig$15",
952:       "com.google.javascript.jscomp.DefaultPassConfig$16",
953:       "com.google.javascript.jscomp.DefaultPassConfig$17",
954:       "com.google.javascript.jscomp.DefaultPassConfig$18",
955:       "com.google.javascript.jscomp.DefaultPassConfig$19",
956:       "com.google.javascript.jscomp.DefaultPassConfig$20",
957:       "com.google.javascript.jscomp.DefaultPassConfig$21",
958:       "com.google.javascript.jscomp.DefaultPassConfig$22",
959:       "com.google.javascript.jscomp.DefaultPassConfig$23",
960:       "com.google.javascript.jscomp.DefaultPassConfig$24",
961:       "com.google.javascript.jscomp.DefaultPassConfig$25",
962:       "com.google.javascript.jscomp.DefaultPassConfig$26",
963:       "com.google.javascript.jscomp.DefaultPassConfig$27",
964:       "com.google.javascript.jscomp.DefaultPassConfig$28",
965:       "com.google.javascript.jscomp.DefaultPassConfig$29",
966:       "com.google.javascript.jscomp.DefaultPassConfig$30",
967:       "com.google.javascript.jscomp.DefaultPassConfig$31",
968:       "com.google.javascript.jscomp.DefaultPassConfig$32",
969:       "com.google.javascript.jscomp.DefaultPassConfig$33",
970:       "com.google.javascript.jscomp.DefaultPassConfig$34",
971:       "com.google.javascript.jscomp.DefaultPassConfig$35",
972:       "com.google.javascript.jscomp.DefaultPassConfig$36",
973:       "com.google.javascript.jscomp.DefaultPassConfig$37",
974:       "com.google.javascript.jscomp.DefaultPassConfig$38",
975:       "com.google.javascript.jscomp.DefaultPassConfig$39",
976:       "com.google.javascript.jscomp.DefaultPassConfig$40",
977:       "com.google.javascript.jscomp.DefaultPassConfig$41",
978:       "com.google.javascript.jscomp.DefaultPassConfig$42",
979:       "com.google.javascript.jscomp.DefaultPassConfig$43",
980:       "com.google.javascript.jscomp.DefaultPassConfig$44",
981:       "com.google.javascript.jscomp.DefaultPassConfig$45",
982:       "com.google.javascript.jscomp.DefaultPassConfig$46",
983:       "com.google.javascript.jscomp.DefaultPassConfig$47",
984:       "com.google.javascript.jscomp.DefaultPassConfig$48",
985:       "com.google.javascript.jscomp.DefaultPassConfig$49",
986:       "com.google.javascript.jscomp.DefaultPassConfig$50",
987:       "com.google.javascript.jscomp.DefaultPassConfig$51",
988:       "com.google.javascript.jscomp.DefaultPassConfig$52",
989:       "com.google.javascript.jscomp.DefaultPassConfig$53",
990:       "com.google.javascript.jscomp.DefaultPassConfig$54",
991:       "com.google.javascript.jscomp.DefaultPassConfig$55",
992:       "com.google.javascript.jscomp.DefaultPassConfig$56",
993:       "com.google.javascript.jscomp.DefaultPassConfig$57",
994:       "com.google.javascript.jscomp.DefaultPassConfig$58",
995:       "com.google.javascript.jscomp.DefaultPassConfig$59",
996:       "com.google.javascript.jscomp.DefaultPassConfig$60",
997:       "com.google.javascript.jscomp.DefaultPassConfig$61",
998:       "com.google.javascript.jscomp.DefaultPassConfig$62",
999:       "com.google.javascript.jscomp.DefaultPassConfig$63",
1000:       "com.google.javascript.jscomp.DefaultPassConfig$64",
1001:       "com.google.javascript.jscomp.DefaultPassConfig$65",
1002:       "com.google.javascript.jscomp.DefaultPassConfig$66",
1003:       "com.google.javascript.jscomp.DefaultPassConfig$67",
1004:       "com.google.javascript.jscomp.DefaultPassConfig$68",
1005:       "com.google.javascript.jscomp.DefaultPassConfig$69",
1006:       "com.google.javascript.jscomp.DefaultPassConfig$70",
1007:       "com.google.javascript.jscomp.DefaultPassConfig$71",
1008:       "com.google.javascript.jscomp.DefaultPassConfig$72",
1009:       "com.google.javascript.jscomp.DefaultPassConfig$73",
1010:       "com.google.javascript.jscomp.DefaultPassConfig$74",
1011:       "com.google.javascript.jscomp.DefaultPassConfig$75",
1012:       "com.google.javascript.jscomp.DefaultPassConfig$76",
1013:       "com.google.javascript.jscomp.DefaultPassConfig$77",
1014:       "com.google.javascript.jscomp.DefaultPassConfig$78",
1015:       "com.google.javascript.jscomp.DefaultPassConfig$79",
1016:       "com.google.javascript.jscomp.DefaultPassConfig$80",
1017:       "com.google.javascript.jscomp.DefaultPassConfig$81",
1018:       "com.google.javascript.jscomp.DefaultPassConfig$82",
1019:       "com.google.javascript.jscomp.DefaultPassConfig$83",
1020:       "com.google.javascript.jscomp.DefaultPassConfig$84",
1021:       "com.google.javascript.jscomp.DefaultPassConfig$85",
1022:       "com.google.javascript.jscomp.DefaultPassConfig$86",
1023:       "com.google.javascript.jscomp.DefaultPassConfig$87",
1024:       "com.google.javascript.jscomp.DefaultPassConfig$88",
1025:       "com.google.javascript.jscomp.DefaultPassConfig$89",
1026:       "com.google.javascript.jscomp.DefaultPassConfig$90",
1027:       "com.google.javascript.jscomp.DefaultPassConfig$91",
1028:       "com.google.javascript.jscomp.DefaultPassConfig$92",
1029:       "com.google.javascript.jscomp.DefaultPassConfig$93",
1030:       "com.google.javascript.jscomp.DefaultPassConfig$94",
1031:       "com.google.javascript.jscomp.DefaultPassConfig$98",
1032:       "com.google.javascript.jscomp.DefaultPassConfig$99",
1033:       "com.google.javascript.jscomp.PassConfig$State",
1034:       "com.google.javascript.jscomp.StatementFusion",
1035:       "com.google.common.io.CharStreams",
1036:       "com.google.javascript.jscomp.CompilerOptions$TracerMode",
1037:       "com.google.javascript.jscomp.ControlFlowAnalysis",
1038:       "com.google.javascript.jscomp.PeepholeReplaceKnownMethods",
1039:       "com.google.javascript.jscomp.MethodCompilerPass",
1040:       "com.google.javascript.jscomp.InlineSimpleMethods$1",
1041:       "com.google.javascript.jscomp.InlineSimpleMethods",
1042:       "com.google.javascript.jscomp.NodeTraversal$AbstractPostOrderCallback",
1043:       "com.google.javascript.jscomp.InvocationsCallback",
1044:       "com.google.javascript.jscomp.InlineSimpleMethods$InlineTrivialAccessors",
1045:       "com.google.javascript.jscomp.PeepholeRemoveDeadCode",
1046:       "com.google.javascript.jscomp.Normalize$PropagateConstantAnnotationsOverVars",
1047:       "com.google.javascript.jscomp.NodeUtil$MatchDeclaration",
1048:       "com.google.javascript.jscomp.ReorderConstantExpression",
1049:       "com.google.javascript.jscomp.CreateSyntheticBlocks",
1050:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler$NullAliasTransformation",
1051:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler",
1052:       "com.google.javascript.jscomp.CompilerOptions",
1053:       "com.google.javascript.jscomp.DependencyOptions",
1054:       "com.google.javascript.jscomp.ProcessCommonJSModules",
1055:       "com.google.javascript.jscomp.WarningsGuard",
1056:       "com.google.javascript.jscomp.ComposeWarningsGuard",
1057:       "com.google.common.primitives.Ints",
1058:       "com.google.javascript.jscomp.ComposeWarningsGuard$GuardComparator",
1059:       "com.google.javascript.jscomp.SourceMap$DetailLevel",
1060:       "com.google.javascript.jscomp.SourceMap$Format",
1061:       "com.google.javascript.jscomp.CompilerOptions$LanguageMode",
1062:       "com.google.javascript.jscomp.CompilerOptions$DevMode",
1063:       "com.google.javascript.jscomp.VariableRenamingPolicy",
1064:       "com.google.javascript.jscomp.PropertyRenamingPolicy",
1065:       "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
1066:       "com.google.javascript.jscomp.CompilerOptions$TweakProcessing",
1067:       "com.google.javascript.jscomp.ErrorFormat",
1068:       "com.google.javascript.jscomp.JSModule",
1069:       "com.google.javascript.jscomp.BasicErrorManager",
1070:       "com.google.javascript.jscomp.LoggerErrorManager",
1071:       "com.google.javascript.jscomp.AbstractMessageFormatter",
1072:       "com.google.javascript.jscomp.LightweightMessageFormatter$LineNumberingFormatter",
1073:       "com.google.javascript.jscomp.LightweightMessageFormatter",
1074:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt",
1075:       "com.google.javascript.jscomp.BasicErrorManager$LeveledJSErrorComparator",
1076:       "com.google.javascript.jscomp.CheckGlobalThis",
1077:       "com.google.javascript.jscomp.DiagnosticGroup",
1078:       "com.google.common.collect.SingletonImmutableSet",
1079:       "com.google.javascript.jscomp.CheckAccessControls",
1080:       "com.google.common.collect.AbstractIndexedListIterator",
1081:       "com.google.common.collect.Iterators$11",
1082:       "com.google.javascript.jscomp.TypeValidator",
1083:       "com.google.javascript.jscomp.VarCheck",
1084:       "com.google.javascript.jscomp.CheckGlobalNames",
1085:       "com.google.javascript.jscomp.VariableReferenceCheck",
1086:       "com.google.javascript.jscomp.ProcessDefines",
1087:       "com.google.common.base.CharMatcher$11",
1088:       "com.google.common.base.CharMatcher$12",
1089:       "com.google.common.base.CharMatcher$Or",
1090:       "com.google.common.base.Platform$1",
1091:       "com.google.common.base.Platform",
1092:       "com.google.common.base.CharMatcher$LookupTable",
1093:       "com.google.common.base.CharMatcher$15",
1094:       "com.google.common.base.CharMatcher$8",
1095:       "com.google.common.base.CharMatcher$1",
1096:       "com.google.common.base.CharMatcher$2",
1097:       "com.google.common.base.CharMatcher$3",
1098:       "com.google.common.base.CharMatcher$4",
1099:       "com.google.common.base.CharMatcher$5",
1100:       "com.google.common.base.CharMatcher$6",
1101:       "com.google.common.base.CharMatcher$7",
1102:       "com.google.common.base.CharMatcher",
1103:       "com.google.javascript.jscomp.ProcessTweaks$TweakFunction",
1104:       "com.google.javascript.jscomp.ProcessTweaks",
1105:       "com.google.javascript.jscomp.TypedScopeCreator",
1106:       "com.google.javascript.jscomp.FunctionTypeBuilder",
1107:       "com.google.javascript.jscomp.TypeCheck",
1108:       "com.google.javascript.jscomp.CheckDebuggerStatement",
1109:       "com.google.javascript.jscomp.CheckRegExp",
1110:       "com.google.javascript.jscomp.CheckSideEffects",
1111:       "com.google.javascript.jscomp.CheckUnreachableCode",
1112:       "com.google.javascript.jscomp.ConstCheck",
1113:       "com.google.javascript.jscomp.DisambiguateProperties$Warnings",
1114:       "com.google.javascript.jscomp.ControlStructureCheck",
1115:       "com.google.javascript.jscomp.StrictModeCheck",
1116:       "com.google.javascript.jscomp.CheckProvides",
1117:       "com.google.javascript.jscomp.JsMessageVisitor",
1118:       "com.google.javascript.jscomp.DiagnosticGroups",
1119:       "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
1120:       "com.google.javascript.jscomp.WarningsGuard$Priority",
1121:       "com.google.javascript.jscomp.SuppressDocWarningsGuard",
1122:       "com.google.common.collect.RegularImmutableMap$NonTerminalEntry",
1123:       "com.google.common.collect.RegularImmutableMap$EntrySet",
1124:       "com.google.javascript.jscomp.SourceFile$Preloaded",
1125:       "com.google.javascript.jscomp.CompilerInput",
1126:       "com.google.javascript.jscomp.Compiler$1",
1127:       "com.google.javascript.jscomp.Compiler$2",
1128:       "com.google.javascript.jscomp.Tracer$1",
1129:       "com.google.javascript.jscomp.Tracer$Stat",
1130:       "com.google.javascript.jscomp.Tracer",
1131:       "com.google.javascript.jscomp.Tracer$ThreadTrace",
1132:       "com.google.javascript.jscomp.Normalize",
1133:       "com.google.javascript.jscomp.Compiler$10",
1134:       "com.google.javascript.jscomp.parsing.Config$LanguageMode",
1135:       "com.google.javascript.jscomp.parsing.ParserRunner",
1136:       "com.google.javascript.jscomp.parsing.Config",
1137:       "com.google.common.collect.ImmutableMap$Builder",
1138:       "com.google.javascript.jscomp.parsing.Annotation",
1139:       "com.google.javascript.rhino.head.DefaultErrorReporter",
1140:       "com.google.javascript.rhino.head.CompilerEnvirons",
1141:       "com.google.javascript.rhino.head.Parser",
1142:       "com.google.javascript.rhino.head.TokenStream",
1143:       "com.google.javascript.rhino.head.ObjToIntMap",
1144:       "com.google.javascript.rhino.head.Node",
1145:       "com.google.javascript.rhino.head.ast.AstNode",
1146:       "com.google.javascript.rhino.head.ast.Jump",
1147:       "com.google.javascript.rhino.head.ast.Scope",
1148:       "com.google.javascript.rhino.head.ast.ScriptNode",
1149:       "com.google.javascript.rhino.head.ast.AstRoot",
1150:       "com.google.javascript.jscomp.parsing.IRFactory",
1151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
1152:       "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
1153:       "com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher",
1154:       "com.google.javascript.rhino.Node$ObjectPropListItem",
1155:       "com.google.javascript.jscomp.parsing.IRFactory$1",
1156:       "com.google.javascript.rhino.head.Node$NodeIterator",
1157:       "com.google.javascript.jscomp.PrepareAst",
1158:       "com.google.javascript.jscomp.PrepareAst$PrepareAnnotations",
1159:       "com.google.javascript.jscomp.Normalize$NormalizeStatements",
1160:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
1161:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$ContextualRenamer",
1162:       "com.google.common.collect.AbstractMultiset",
1163:       "com.google.common.collect.AbstractMapBasedMultiset",
1164:       "com.google.common.collect.HashMultiset",
1165:       "com.google.common.collect.Multisets",
1166:       "com.google.common.collect.Multisets$EntrySet",
1167:       "com.google.common.collect.AbstractMultiset$EntrySet",
1168:       "com.google.common.collect.AbstractMapBasedMultiset$1",
1169:       "com.google.common.base.Predicates",
1170:       "com.google.javascript.rhino.head.ast.ExpressionStatement",
1171:       "com.google.javascript.jscomp.BasicErrorManager$ErrorWithLevel",
1172:       "com.google.javascript.rhino.head.Parser$ParserException",
1173:       "com.google.javascript.rhino.head.ast.EmptyStatement",
1174:       "com.google.javascript.rhino.head.RhinoException",
1175:       "com.google.javascript.rhino.head.EvaluatorException",
1176:       "com.google.javascript.jscomp.PeepholeSimplifyRegExp",
1177:       "com.google.javascript.jscomp.VerboseMessageFormatter",
1178:       "com.google.javascript.jscomp.JqueryCodingConvention",
1179:       "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement",
1180:       "com.google.javascript.jscomp.PrintStreamErrorManager",
1181:       "com.google.javascript.rhino.head.ast.NumberLiteral",
1182:       "com.google.javascript.jscomp.PeepholeFoldConstants",
1183:       "com.google.javascript.jscomp.ExpandJqueryAliases",
1184:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
1185:       "com.google.javascript.jscomp.FindExportableNodes",
1186:       "com.google.javascript.jscomp.ConvertToDottedProperties",
1187:       "com.google.javascript.rhino.Node$AncestorIterable",
1188:       "com.google.javascript.jscomp.SyntheticAst",
1189:       "com.google.javascript.jscomp.ControlFlowAnalysis$1",
1190:       "com.google.common.collect.HashMultimap",
1191:       "com.google.javascript.jscomp.PreprocessorSymbolTable",
1192:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
1193:       "com.google.javascript.jscomp.CleanupPasses",
1194:       "com.google.javascript.jscomp.CleanupPasses$1",
1195:       "com.google.javascript.jscomp.CleanupPasses$2",
1196:       "com.google.javascript.jscomp.CleanupPasses$3",
1197:       "com.google.javascript.jscomp.InferJSDocInfo",
1198:       "com.google.javascript.jscomp.TightenTypes$ConcreteScope",
1199:       "com.google.common.collect.AbstractSortedSetMultimap",
1200:       "com.google.common.collect.TreeMultimap",
1201:       "com.google.common.collect.Ordering",
1202:       "com.google.common.collect.NaturalOrdering",
1203:       "com.google.common.collect.Maps$KeySet",
1204:       "com.google.common.collect.AbstractMultimap$KeySet",
1205:       "com.google.common.collect.AbstractMultimap$SortedKeySet",
1206:       "com.google.common.collect.Multimaps$Entries",
1207:       "com.google.common.collect.Multimaps$EntrySet",
1208:       "com.google.common.collect.AbstractMultimap$3",
1209:       "com.google.common.collect.AbstractMultimap$EntryIterator",
1210:       "com.google.javascript.rhino.head.ast.Name",
1211:       "com.google.javascript.rhino.head.ast.InfixExpression",
1212:       "com.google.javascript.rhino.head.ast.PropertyGet",
1213:       "com.google.javascript.jscomp.SimpleDefinitionFinder",
1214:       "com.google.javascript.rhino.jstype.EnumType",
1215:       "com.google.javascript.rhino.jstype.EnumElementType",
1216:       "com.google.javascript.rhino.jstype.ModificationVisitor",
1217:       "com.google.javascript.rhino.Node$AncestorIterable$1",
1218:       "com.google.javascript.jscomp.DeadAssignmentsElimination$1",
1219:       "com.google.javascript.jscomp.DeadAssignmentsElimination",
1220:       "com.google.javascript.jscomp.ProcessClosurePrimitives",
1221:       "com.google.javascript.jscomp.ProcessClosurePrimitives$ProvidedName",
1222:       "com.google.javascript.jscomp.LinkedFlowScope",
1223:       "com.google.javascript.jscomp.LinkedFlowScope$FlatFlowScopeCache",
1224:       "com.google.common.collect.EmptyImmutableMap",
1225:       "com.google.javascript.jscomp.CheckMissingGetCssName",
1226:       "com.google.javascript.jscomp.Scope$1",
1227:       "com.google.javascript.jscomp.Scope",
1228:       "com.google.javascript.jscomp.Scope$Var",
1229:       "com.google.javascript.jscomp.Scope$Arguments",
1230:       "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback$CopySideEffectSubexpressions",
1231:       "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback",
1232:       "com.google.common.collect.ImmutableMultimap",
1233:       "com.google.common.collect.ImmutableListMultimap",
1234:       "com.google.common.collect.EmptyImmutableListMultimap",
1235:       "com.google.common.collect.LinkedListMultimap",
1236:       "com.google.common.collect.LinkedHashMultiset",
1237:       "com.google.javascript.jscomp.ReferenceCollectingCallback$1",
1238:       "com.google.javascript.jscomp.ReferenceCollectingCallback",
1239:       "com.google.javascript.jscomp.WhitelistWarningsGuard",
1240:       "com.google.common.io.LineReader",
1241:       "com.google.common.io.LineBuffer",
1242:       "com.google.common.io.LineReader$1",
1243:       "com.google.common.io.Closeables",
1244:       "com.google.common.collect.ImmutableSetMultimap",
1245:       "com.google.common.collect.EmptyImmutableSetMultimap",
1246:       "com.google.javascript.jscomp.Denormalize",
1247:       "com.google.javascript.jscomp.EmptyMessageBundle",
1248:       "com.google.javascript.jscomp.CheckSideEffects$StripProtection",
1249:       "com.google.javascript.rhino.head.ast.UnaryExpression",
1250:       "com.google.javascript.jscomp.FlowSensitiveInlineVariables$1",
1251:       "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
1252:       "com.google.javascript.jscomp.InlineProperties$PropertyInfo",
1253:       "com.google.javascript.jscomp.InlineProperties",
1254:       "com.google.javascript.rhino.jstype.SimpleSlot",
1255:       "com.google.javascript.jscomp.JSModuleGraph",
1256:       "com.google.javascript.rhino.JSDocInfo",
1257:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
1258:       "com.google.javascript.jscomp.RemoveUnusedClassProperties",
1259:       "com.google.javascript.rhino.jstype.ProxyObjectType",
1260:       "com.google.javascript.rhino.jstype.NamedType",
1261:       "com.google.javascript.jscomp.PassConfig$PassConfigDelegate",
1262:       "com.google.javascript.jscomp.NameAnalyzer$1",
1263:       "com.google.javascript.jscomp.NameAnalyzer",
1264:       "com.google.javascript.jscomp.LineNumberCheck",
1265:       "com.google.javascript.jscomp.SourceFile$Generated",
1266:       "com.google.common.collect.Multimaps$Values",
1267:       "com.google.common.collect.AbstractMultimap$2",
1268:       "com.google.javascript.jscomp.OptimizeArgumentsArray",
1269:       "com.google.javascript.jscomp.Normalize$VerifyConstants",
1270:       "com.google.javascript.jscomp.Compiler$6",
1271:       "com.google.javascript.jscomp.CodeChangeHandler$ForbiddenChange",
1272:       "com.google.javascript.jscomp.FunctionNames",
1273:       "com.google.javascript.jscomp.FunctionNames$FunctionListExtractor",
1274:       "com.google.javascript.jscomp.RecordFunctionInformation",
1275:       "com.google.protobuf.AbstractMessageLite",
1276:       "com.google.protobuf.AbstractMessage",
1277:       "com.google.protobuf.GeneratedMessage",
1278:       "com.google.protobuf.UnknownFieldSet",
1279:       "com.google.javascript.jscomp.FunctionInformationMap",
1280:       "com.google.protobuf.AbstractMessageLite$Builder",
1281:       "com.google.protobuf.AbstractMessage$Builder",
1282:       "com.google.protobuf.GeneratedMessage$Builder",
1283:       "com.google.javascript.jscomp.FunctionInformationMap$Builder",
1284:       "com.google.javascript.jscomp.VariableMap",
1285:       "com.google.common.io.ByteStreams$1",
1286:       "com.google.common.io.CharStreams$2",
1287:       "com.google.javascript.jscomp.ExternExportsPass",
1288:       "com.google.common.collect.SingletonImmutableList",
1289:       "com.google.javascript.jscomp.RenameLabels$DefaultNameSupplier",
1290:       "com.google.javascript.jscomp.NameGenerator",
1291:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$InlineRenamer",
1292:       "com.google.javascript.jscomp.graph.Graph",
1293:       "com.google.javascript.jscomp.graph.DiGraph",
1294:       "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
1295:       "com.google.javascript.jscomp.NameReferenceGraph",
1296:       "com.google.javascript.jscomp.NameReferenceGraph$Name",
1297:       "com.google.javascript.jscomp.MinimizeExitPoints",
1298:       "com.google.javascript.jscomp.ObjectPropertyStringPreprocess",
1299:       "com.google.javascript.jscomp.RemoveTryCatch",
1300:       "com.google.javascript.jscomp.RemoveTryCatch$RemoveTryCatchCode",
1301:       "com.google.javascript.jscomp.GlobalNamespace",
1302:       "com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace",
1303:       "com.google.javascript.jscomp.CheckAccidentalSemicolon",
1304:       "com.google.javascript.jscomp.Denormalize$StripConstantAnnotations",
1305:       "com.google.common.collect.ImmutableMultimap$Builder",
1306:       "com.google.common.collect.ImmutableSetMultimap$Builder",
1307:       "com.google.common.collect.ImmutableMultimap$BuilderMultimap",
1308:       "com.google.common.collect.ImmutableSetMultimap$BuilderMultimap",
1309:       "com.google.common.collect.AbstractMultimap$AsMap",
1310:       "com.google.common.collect.Maps$EntrySet",
1311:       "com.google.common.collect.AbstractMultimap$AsMap$AsMapEntries",
1312:       "com.google.common.collect.AbstractMultimap$AsMap$AsMapIterator",
1313:       "com.google.common.collect.AbstractMultimap$WrappedCollection",
1314:       "com.google.common.collect.AbstractMultimap$WrappedSet",
1315:       "com.google.common.collect.AbstractMultimap$WrappedCollection$WrappedIterator",
1316:       "com.google.javascript.jscomp.LinkedFlowScope$LinkedFlowSlot",
1317:       "com.google.common.collect.EmptyImmutableSet",
1318:       "com.google.javascript.rhino.Node$NodeMismatch",
1319:       "com.google.common.base.Predicates$OrPredicate",
1320:       "com.google.javascript.jscomp.Compiler$CodeBuilder",
1321:       "com.google.javascript.rhino.head.ast.Assignment",
1322:       "com.google.javascript.jscomp.SourceInformationAnnotator",
1323:       "com.google.javascript.rhino.head.ast.FunctionCall",
1324:       "com.google.javascript.rhino.head.Token",
1325:       "com.google.javascript.jscomp.CheckMissingReturn$1",
1326:       "com.google.javascript.jscomp.CheckMissingReturn$2",
1327:       "com.google.javascript.jscomp.CheckMissingReturn",
1328:       "com.google.javascript.jscomp.CombinedCompilerPass",
1329:       "com.google.common.collect.Iterators$13",
1330:       "com.google.common.collect.ForwardingObject",
1331:       "com.google.common.collect.ForwardingCollection",
1332:       "com.google.common.collect.ForwardingSet",
1333:       "com.google.common.collect.LinkedHashMultimap$SetDecorator",
1334:       "com.google.common.collect.LinkedHashMultimap$SetDecorator$1",
1335:       "com.google.common.collect.ImmutableListMultimap$Builder",
1336:       "com.google.javascript.jscomp.TypeInferencePass",
1337:       "com.google.javascript.jscomp.CoalesceVariableNames$1",
1338:       "com.google.javascript.jscomp.CoalesceVariableNames",
1339:       "com.google.javascript.rhino.jstype.ParameterizedType",
1340:       "com.google.javascript.jscomp.Compiler$4",
1341:       "com.google.javascript.jscomp.GlobalNamespace$Ref",
1342:       "com.google.javascript.jscomp.NodeTraversal$AbstractShallowCallback",
1343:       "com.google.javascript.jscomp.FieldCleanupPass$QualifiedNameSearchTraversal",
1344:       "com.google.javascript.jscomp.MoveFunctionDeclarations",
1345:       "com.google.javascript.jscomp.ReplaceIdGenerators",
1346:       "com.google.javascript.jscomp.AbstractMessageFormatter$1",
1347:       "com.google.javascript.jscomp.AbstractMessageFormatter$Color",
1348:       "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator",
1349:       "com.google.common.collect.LinkedListMultimap$3",
1350:       "com.google.common.collect.LinkedListMultimap$NodeIterator",
1351:       "com.google.common.collect.LinkedListMultimap$3$1",
1352:       "com.google.javascript.rhino.head.ast.ErrorNode",
1353:       "com.google.javascript.jscomp.GlobalNamespace$Name$Type",
1354:       "com.google.javascript.jscomp.NameReferenceGraph$Reference",
1355:       "com.google.javascript.jscomp.GatherRawExports",
1356:       "com.google.common.collect.AbstractMultimap$4",
1357:       "com.google.common.collect.Multimaps$Values$1",
1358:       "com.google.common.collect.AbstractMultimap$SortedAsMap",
1359:       "com.google.javascript.jscomp.RenameProperties$1",
1360:       "com.google.javascript.jscomp.RenameProperties",
1361:       "com.google.javascript.jscomp.LoggerErrorManager$1",
1362:       "com.google.javascript.jscomp.Compiler$8",
1363:       "com.google.common.collect.Iterators$12",
1364:       "com.google.javascript.jscomp.CodingConvention$AssertionFunctionSpec",
1365:       "com.google.javascript.jscomp.ClosureCodingConvention$AssertInstanceofSpec",
1366:       "com.google.javascript.jscomp.MethodCompilerPass$GetExternMethods",
1367:       "com.google.javascript.jscomp.MethodCompilerPass$GatherSignatures",
1368:       "com.google.javascript.jscomp.CustomPassExecutionTime",
1369:       "com.google.common.collect.AbstractIterator",
1370:       "com.google.common.collect.Iterators$7",
1371:       "com.google.common.collect.AbstractIterator$State",
1372:       "com.google.javascript.jscomp.XtbMessageBundle$SecureEntityResolver",
1373:       "com.google.javascript.jscomp.XtbMessageBundle",
1374:       "com.google.javascript.jscomp.GoogleJsMessageIdGenerator",
1375:       "com.google.javascript.jscomp.XtbMessageBundle$Handler",
1376:       "com.google.javascript.jscomp.Compiler$5",
1377:       "com.google.javascript.jscomp.AbstractCompiler$LifeCycleStage",
1378:       "com.google.common.collect.Count",
1379:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
1380:     );
1381:   }
1382: }

[MASTER] 19:11:01.109 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
assertNotNull(reorderConstantExpression0);

NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(3);
assertNotNull(nodeUtil_MatchNodeType0);

PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
assertNotNull(peepholeSubstituteAlternateSyntax0);

Compiler compiler0 = new Compiler();
assertNotNull(compiler0);
assertEquals(0.0, compiler0.getProgress(), 0.01);

PassConfig passConfig0 = compiler0.getPassConfig();
assertNotNull(passConfig0);
assertEquals(0.0, compiler0.getProgress(), 0.01);

NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
assertNotNull(nodeTraversal0);
assertEquals(0.0, compiler0.getProgress(), 0.01);
assertEquals("", nodeTraversal0.getSourceName());
assertEquals(0, nodeTraversal0.getLineNumber());

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

Vector<JSType> vector0 = new Vector<JSType>();
assertNotNull(vector0);
assertEquals(10, vector0.capacity());
assertEquals("[]", vector0.toString());
assertTrue(vector0.isEmpty());
assertEquals(0, vector0.size());

Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
assertNotNull(node0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(10, vector0.capacity());
assertEquals("[]", vector0.toString());
assertTrue(vector0.isEmpty());
assertEquals(0, vector0.size());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isFromExterns());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertTrue(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertNull(node0.getSourceFileName());
assertFalse(node0.isOr());
assertEquals(83, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(54, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(44, Node.IS_OPTIONAL_PARAM);

ExploitAssigns exploitAssigns0 = new ExploitAssigns();
assertNotNull(exploitAssigns0);

Node node1 = new Node(37, node0, node0, node0, node0);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(10, vector0.capacity());
assertEquals("[]", vector0.toString());
assertTrue(vector0.isEmpty());
assertEquals(0, vector0.size());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isFromExterns());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertTrue(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertNull(node0.getSourceFileName());
assertFalse(node0.isOr());
assertEquals(83, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertEquals(37, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isWith());
assertTrue(node1.hasChildren());
assertFalse(node1.isExprResult());
assertTrue(node1.isCall());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertTrue(node1.hasOneChild());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isFromExterns());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertNull(node1.getSourceFileName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isSetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertEquals((-1), node1.getSourceOffset());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isTry());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(54, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.LAST_PROP);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertFalse(node0.equals((Object)node1));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(10, vector0.capacity());
assertEquals("[]", vector0.toString());
assertTrue(vector0.isEmpty());
assertEquals(0, vector0.size());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isFromExterns());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertTrue(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertNull(node0.getSourceFileName());
assertFalse(node0.isOr());
assertEquals(83, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(54, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(44, Node.IS_OPTIONAL_PARAM);

ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
assertNotNull(modificationVisitor0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

JSType jSType0 = modificationVisitor0.caseNullType();
assertNotNull(jSType0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(jSType0.isNoType());
assertFalse(jSType0.isNoObjectType());
assertFalse(jSType0.isRecordType());
assertFalse(jSType0.isUnionType());
assertFalse(jSType0.isNoResolvedType());
assertFalse(jSType0.isOrdinaryFunction());
assertFalse(jSType0.isResolved());
assertFalse(jSType0.isStringValueType());
assertFalse(jSType0.isParameterizedType());
assertFalse(jSType0.isInterface());
assertFalse(jSType0.isBooleanValueType());
assertTrue(jSType0.isNullType());
assertFalse(jSType0.matchesObjectContext());
assertFalse(jSType0.isNominalConstructor());
assertFalse(jSType0.isEnumType());
assertFalse(jSType0.isFunctionPrototypeType());
assertFalse(jSType0.isEnumElementType());
assertTrue(jSType0.matchesStringContext());
assertFalse(jSType0.isVoidType());
assertFalse(jSType0.isTemplateType());
assertFalse(jSType0.isAllType());
assertTrue(jSType0.isNullable());
assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
assertTrue(jSType0.matchesNumberContext());
assertFalse(jSType0.isFunctionType());
assertEquals("null", jSType0.getDisplayName());
assertFalse(jSType0.isNumberValueType());
assertFalse(jSType0.isNominalType());
assertFalse(jSType0.isConstructor());
assertFalse(jSType0.isCheckedUnknownType());
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);

JSType[] jSTypeArray0 = new JSType[5];
jSTypeArray0[0] = jSType0;
jSTypeArray0[1] = jSType0;
jSTypeArray0[2] = jSType0;
jSTypeArray0[3] = jSType0;
jSTypeArray0[4] = jSType0;
FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSType0, jSTypeArray0);
assertNotNull(functionType0);
assertFalse(functionType0.hasCachedValues());
assertFalse(functionType0.isNoObjectType());
assertFalse(functionType0.isNoType());
assertTrue(functionType0.hasInstanceType());
assertTrue(functionType0.isConstructor());
assertTrue(functionType0.isObject());
assertFalse(functionType0.isParameterizedType());
assertFalse(functionType0.isStringValueType());
assertFalse(functionType0.isResolved());
assertFalse(functionType0.isReturnTypeInferred());
assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
assertFalse(functionType0.isNominalType());
assertFalse(functionType0.isInterface());
assertFalse(functionType0.isTemplateType());
assertFalse(functionType0.isAllType());
assertFalse(functionType0.isEnumElementType());
assertTrue(functionType0.canBeCalled());
assertEquals(0, functionType0.getExtendedInterfacesCount());
assertFalse(functionType0.isOrdinaryFunction());
assertFalse(functionType0.isNominalConstructor());
assertTrue(functionType0.isFunctionType());
assertFalse(functionType0.isNullType());
assertFalse(functionType0.isCheckedUnknownType());
assertFalse(functionType0.isVoidType());
assertFalse(functionType0.isEnumType());
assertFalse(functionType0.isFunctionPrototypeType());
assertFalse(functionType0.isNumberValueType());
assertFalse(functionType0.isUnionType());
assertFalse(functionType0.isBooleanValueType());
assertFalse(functionType0.isRecordType());
assertFalse(functionType0.isNoResolvedType());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(jSType0.isNoType());
assertFalse(jSType0.isNoObjectType());
assertFalse(jSType0.isRecordType());
assertFalse(jSType0.isUnionType());
assertFalse(jSType0.isNoResolvedType());
assertFalse(jSType0.isOrdinaryFunction());
assertFalse(jSType0.isResolved());
assertFalse(jSType0.isStringValueType());
assertFalse(jSType0.isParameterizedType());
assertFalse(jSType0.isInterface());
assertFalse(jSType0.isBooleanValueType());
assertTrue(jSType0.isNullType());
assertFalse(jSType0.matchesObjectContext());
assertFalse(jSType0.isNominalConstructor());
assertFalse(jSType0.isEnumType());
assertFalse(jSType0.isFunctionPrototypeType());
assertFalse(jSType0.isEnumElementType());
assertTrue(jSType0.matchesStringContext());
assertFalse(jSType0.isVoidType());
assertFalse(jSType0.isTemplateType());
assertFalse(jSType0.isAllType());
assertTrue(jSType0.isNullable());
assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
assertTrue(jSType0.matchesNumberContext());
assertFalse(jSType0.isFunctionType());
assertEquals("null", jSType0.getDisplayName());
assertFalse(jSType0.isNumberValueType());
assertFalse(jSType0.isNominalType());
assertFalse(jSType0.isConstructor());
assertFalse(jSType0.isCheckedUnknownType());
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);

Node node2 = compiler0.parseTestCode("Infinity");
assertNotNull(node2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(0, compiler0.getWarningCount());
assertFalse(compiler0.hasErrors());
assertFalse(compiler0.isIdeMode());
assertFalse(compiler0.acceptConstKeyword());
assertEquals(0, compiler0.getErrorCount());
assertEquals(0.0, compiler0.getProgress(), 0.01);
assertFalse(compiler0.isTypeCheckingEnabled());
assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isNumber());
assertFalse(node2.isAssignAdd());
assertEquals("[testcode]", node2.getSourceFileName());
assertFalse(node2.isFromExterns());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isOr());
assertFalse(node2.isWith());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isExprResult());
assertFalse(node2.isTypeOf());
assertEquals(0, node2.getCharno());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isVar());
assertFalse(node2.isHook());
assertFalse(node2.isStringKey());
assertEquals(4096, node2.getSourcePosition());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isLabel());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertTrue(node2.isScript());
assertFalse(node2.isGetterDef());
assertTrue(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isDebugger());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isTry());
assertFalse(node2.isCatch());
assertFalse(node2.isIn());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertEquals(132, node2.getType());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertTrue(node2.hasChildren());
assertEquals(1, node2.getLineno());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertEquals(0, node2.getSourceOffset());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isFunction());
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(54, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);

Node node3 = new Node(35, node1, node2, node2, node1);
assertNotNull(node3);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertEquals(0, compiler0.getWarningCount());
assertFalse(compiler0.hasErrors());
assertFalse(compiler0.isIdeMode());
assertFalse(compiler0.acceptConstKeyword());
assertEquals(0, compiler0.getErrorCount());
assertEquals(0.0, compiler0.getProgress(), 0.01);
assertFalse(compiler0.isTypeCheckingEnabled());
assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isNumber());
assertFalse(node2.isAssignAdd());
assertEquals("[testcode]", node2.getSourceFileName());
assertFalse(node2.isFromExterns());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isOr());
assertFalse(node2.isWith());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isExprResult());
assertFalse(node2.isTypeOf());
assertEquals(0, node2.getCharno());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isVar());
assertFalse(node2.isHook());
assertFalse(node2.isStringKey());
assertEquals(4096, node2.getSourcePosition());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isLabel());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertTrue(node2.isScript());
assertFalse(node2.isGetterDef());
assertTrue(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isDebugger());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isTry());
assertFalse(node2.isCatch());
assertFalse(node2.isIn());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertEquals(132, node2.getType());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertTrue(node2.hasChildren());
assertEquals(1, node2.getLineno());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertEquals(0, node2.getSourceOffset());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isFunction());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isSwitch());
assertFalse(node3.isHook());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isBreak());
assertFalse(node3.isGetProp());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isAnd());
assertFalse(node3.isNot());
assertEquals((-1), node3.getSourceOffset());
assertFalse(node3.isCase());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetterDef());
assertFalse(node3.isScript());
assertFalse(node3.isString());
assertFalse(node3.isVoid());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTrue());
assertFalse(node3.isLabelName());
assertTrue(node3.hasOneChild());
assertFalse(node3.isDelProp());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isArrayLit());
assertFalse(node3.isExprResult());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isNull());
assertFalse(node3.isEmpty());
assertFalse(node3.isDo());
assertNull(node3.getSourceFileName());
assertFalse(node3.isAdd());
assertFalse(node3.isBlock());
assertFalse(node3.isNew());
assertFalse(node3.isVar());
assertFalse(node3.isWhile());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertEquals(35, node3.getType());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCall());
assertFalse(node3.isContinue());
assertFalse(node3.isReturn());
assertFalse(node3.isFromExterns());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isParamList());
assertFalse(node3.isNumber());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.isFor());
assertFalse(node3.isWith());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertTrue(node3.hasChildren());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isIf());
assertTrue(node3.isGetElem());
assertFalse(node3.isNE());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIn());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(10, vector0.capacity());
assertEquals("[]", vector0.toString());
assertTrue(vector0.isEmpty());
assertEquals(0, vector0.size());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isFromExterns());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertTrue(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertNull(node0.getSourceFileName());
assertFalse(node0.isOr());
assertEquals(83, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertEquals(37, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isWith());
assertTrue(node1.hasChildren());
assertFalse(node1.isExprResult());
assertTrue(node1.isCall());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertTrue(node1.hasOneChild());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isFromExterns());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertNull(node1.getSourceFileName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isSetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertEquals((-1), node1.getSourceOffset());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isTry());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(54, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(54, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(54, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.LAST_PROP);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

Node node4 = node2.removeChildren();
assertNotNull(node4);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertEquals(0, compiler0.getWarningCount());
assertFalse(compiler0.hasErrors());
assertFalse(compiler0.isIdeMode());
assertFalse(compiler0.acceptConstKeyword());
assertEquals(0, compiler0.getErrorCount());
assertEquals(0.0, compiler0.getProgress(), 0.01);
assertFalse(compiler0.isTypeCheckingEnabled());
assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isNumber());
assertFalse(node2.isAssignAdd());
assertEquals("[testcode]", node2.getSourceFileName());
assertFalse(node2.isFromExterns());
assertFalse(node2.hasOneChild());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isOr());
assertFalse(node2.isWith());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isExprResult());
assertFalse(node2.isTypeOf());
assertEquals(0, node2.getCharno());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isVar());
assertFalse(node2.isHook());
assertFalse(node2.isStringKey());
assertEquals(4096, node2.getSourcePosition());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertTrue(node2.isScript());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isDebugger());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isTry());
assertFalse(node2.isCatch());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertEquals(132, node2.getType());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertEquals(1, node2.getLineno());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertEquals(0, node2.getSourceOffset());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isFunction());
assertFalse(node4.isGetElem());
assertFalse(node4.isAssign());
assertFalse(node4.isDec());
assertFalse(node4.isLabelName());
assertFalse(node4.isTypeOf());
assertFalse(node4.isNumber());
assertFalse(node4.isLabel());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isFromExterns());
assertFalse(node4.isReturn());
assertFalse(node4.isContinue());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertEquals("[testcode]", node4.getSourceFileName());
assertFalse(node4.isScript());
assertFalse(node4.isAnd());
assertFalse(node4.isName());
assertFalse(node4.isStringKey());
assertEquals(4096, node4.getSourcePosition());
assertFalse(node4.isBreak());
assertFalse(node4.isCall());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isGetProp());
assertFalse(node4.isComma());
assertFalse(node4.isWhile());
assertFalse(node4.isVar());
assertFalse(node4.isDo());
assertEquals(1, node4.getLineno());
assertFalse(node4.isOr());
assertFalse(node4.isVoid());
assertFalse(node4.isNull());
assertFalse(node4.isTrue());
assertFalse(node4.isFor());
assertFalse(node4.isDelProp());
assertFalse(node4.isGetterDef());
assertFalse(node4.isArrayLit());
assertFalse(node4.isEmpty());
assertEquals(1, node4.getChildCount());
assertFalse(node4.isFunction());
assertFalse(node4.isTry());
assertFalse(node4.isDefaultCase());
assertTrue(node4.hasOneChild());
assertFalse(node4.isCase());
assertFalse(node4.isString());
assertFalse(node4.isDebugger());
assertFalse(node4.isSwitch());
assertFalse(node4.isParamList());
assertFalse(node4.isFalse());
assertEquals(0, node4.getSourceOffset());
assertFalse(node4.isSetterDef());
assertFalse(node4.isBlock());
assertFalse(node4.isHook());
assertFalse(node4.isThis());
assertFalse(node4.isThrow());
assertFalse(node4.isWith());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isRegExp());
assertFalse(node4.isIn());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isInc());
assertEquals(130, node4.getType());
assertTrue(node4.hasChildren());
assertFalse(node4.isCatch());
assertTrue(node4.isExprResult());
assertFalse(node4.isIf());
assertEquals(0, node4.getCharno());
assertFalse(node4.isNE());
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(54, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(1, Node.DECR_FLAG);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Double double0 = NodeUtil.getNumberValue(node0);
assertNull(double0);
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(10, vector0.capacity());
assertEquals("[]", vector0.toString());
assertTrue(vector0.isEmpty());
assertEquals(0, vector0.size());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isFromExterns());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertTrue(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertNull(node0.getSourceFileName());
assertFalse(node0.isOr());
assertEquals(83, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(54, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(44, Node.IS_OPTIONAL_PARAM);

boolean boolean0 = NodeUtil.mayEffectMutableState(node3, compiler0);
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node4));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertEquals(0, compiler0.getWarningCount());
assertFalse(compiler0.hasErrors());
assertFalse(compiler0.isIdeMode());
assertFalse(compiler0.acceptConstKeyword());
assertEquals(0, compiler0.getErrorCount());
assertEquals(0.0, compiler0.getProgress(), 0.01);
assertFalse(compiler0.isTypeCheckingEnabled());
assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isNumber());
assertFalse(node2.isAssignAdd());
assertEquals("[testcode]", node2.getSourceFileName());
assertFalse(node2.isFromExterns());
assertFalse(node2.hasOneChild());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isOr());
assertFalse(node2.isWith());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isExprResult());
assertFalse(node2.isTypeOf());
assertEquals(0, node2.getCharno());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isVar());
assertFalse(node2.isHook());
assertFalse(node2.isStringKey());
assertEquals(4096, node2.getSourcePosition());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertTrue(node2.isScript());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isDebugger());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isTry());
assertFalse(node2.isCatch());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertEquals(132, node2.getType());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertEquals(1, node2.getLineno());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertEquals(0, node2.getSourceOffset());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isFunction());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isSwitch());
assertFalse(node3.isHook());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isBreak());
assertFalse(node3.isGetProp());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isAnd());
assertFalse(node3.isNot());
assertEquals((-1), node3.getSourceOffset());
assertFalse(node3.isCase());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetterDef());
assertFalse(node3.isScript());
assertFalse(node3.isString());
assertFalse(node3.isVoid());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTrue());
assertFalse(node3.isLabelName());
assertTrue(node3.hasOneChild());
assertFalse(node3.isDelProp());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isArrayLit());
assertFalse(node3.isExprResult());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isNull());
assertFalse(node3.isEmpty());
assertFalse(node3.isDo());
assertNull(node3.getSourceFileName());
assertFalse(node3.isAdd());
assertFalse(node3.isBlock());
assertFalse(node3.isNew());
assertFalse(node3.isVar());
assertFalse(node3.isWhile());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertEquals(35, node3.getType());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCall());
assertFalse(node3.isContinue());
assertFalse(node3.isReturn());
assertFalse(node3.isFromExterns());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isParamList());
assertFalse(node3.isNumber());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.isFor());
assertFalse(node3.isWith());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertTrue(node3.hasChildren());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isIf());
assertTrue(node3.isGetElem());
assertFalse(node3.isNE());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIn());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(10, vector0.capacity());
assertEquals("[]", vector0.toString());
assertTrue(vector0.isEmpty());
assertEquals(0, vector0.size());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isFromExterns());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertTrue(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertNull(node0.getSourceFileName());
assertFalse(node0.isOr());
assertEquals(83, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertEquals(37, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isWith());
assertTrue(node1.hasChildren());
assertFalse(node1.isExprResult());
assertTrue(node1.isCall());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertTrue(node1.hasOneChild());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isFromExterns());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertNull(node1.getSourceFileName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isSetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertEquals((-1), node1.getSourceOffset());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isTry());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertTrue(boolean0);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(54, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(54, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(54, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.LAST_PROP);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

String string0 = NodeUtil.getBestLValueName(node2);
assertNull(string0);
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertEquals(0, compiler0.getWarningCount());
assertFalse(compiler0.hasErrors());
assertFalse(compiler0.isIdeMode());
assertFalse(compiler0.acceptConstKeyword());
assertEquals(0, compiler0.getErrorCount());
assertEquals(0.0, compiler0.getProgress(), 0.01);
assertFalse(compiler0.isTypeCheckingEnabled());
assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isNumber());
assertFalse(node2.isAssignAdd());
assertEquals("[testcode]", node2.getSourceFileName());
assertFalse(node2.isFromExterns());
assertFalse(node2.hasOneChild());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isOr());
assertFalse(node2.isWith());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isExprResult());
assertFalse(node2.isTypeOf());
assertEquals(0, node2.getCharno());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isVar());
assertFalse(node2.isHook());
assertFalse(node2.isStringKey());
assertEquals(4096, node2.getSourcePosition());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertTrue(node2.isScript());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isDebugger());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isTry());
assertFalse(node2.isCatch());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertEquals(132, node2.getType());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertEquals(1, node2.getLineno());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertEquals(0, node2.getSourceOffset());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isFunction());
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(54, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);

boolean boolean1 = NodeUtil.isRelationalOperation(node3);
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node4));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(boolean1 == boolean0);
assertEquals(0, compiler0.getWarningCount());
assertFalse(compiler0.hasErrors());
assertFalse(compiler0.isIdeMode());
assertFalse(compiler0.acceptConstKeyword());
assertEquals(0, compiler0.getErrorCount());
assertEquals(0.0, compiler0.getProgress(), 0.01);
assertFalse(compiler0.isTypeCheckingEnabled());
assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isNumber());
assertFalse(node2.isAssignAdd());
assertEquals("[testcode]", node2.getSourceFileName());
assertFalse(node2.isFromExterns());
assertFalse(node2.hasOneChild());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isOr());
assertFalse(node2.isWith());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isExprResult());
assertFalse(node2.isTypeOf());
assertEquals(0, node2.getCharno());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isVar());
assertFalse(node2.isHook());
assertFalse(node2.isStringKey());
assertEquals(4096, node2.getSourcePosition());
assertFalse(node2.isBlock());
assertFalse(node2.isThis());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertTrue(node2.isScript());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isDebugger());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isTry());
assertFalse(node2.isCatch());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertEquals(132, node2.getType());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertEquals(1, node2.getLineno());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertEquals(0, node2.getSourceOffset());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isFunction());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isSwitch());
assertFalse(node3.isHook());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isBreak());
assertFalse(node3.isGetProp());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isComma());
assertFalse(node3.isThis());
assertFalse(node3.isAnd());
assertFalse(node3.isNot());
assertEquals((-1), node3.getSourceOffset());
assertFalse(node3.isCase());
assertFalse(node3.isObjectLit());
assertFalse(node3.isGetterDef());
assertFalse(node3.isScript());
assertFalse(node3.isString());
assertFalse(node3.isVoid());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTrue());
assertFalse(node3.isLabelName());
assertTrue(node3.hasOneChild());
assertFalse(node3.isDelProp());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isArrayLit());
assertFalse(node3.isExprResult());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isNull());
assertFalse(node3.isEmpty());
assertFalse(node3.isDo());
assertNull(node3.getSourceFileName());
assertFalse(node3.isAdd());
assertFalse(node3.isBlock());
assertFalse(node3.isNew());
assertFalse(node3.isVar());
assertFalse(node3.isWhile());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertEquals(35, node3.getType());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCall());
assertFalse(node3.isContinue());
assertFalse(node3.isReturn());
assertFalse(node3.isFromExterns());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isParamList());
assertFalse(node3.isNumber());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.isFor());
assertFalse(node3.isWith());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertTrue(node3.hasChildren());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isIf());
assertTrue(node3.isGetElem());
assertFalse(node3.isNE());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIn());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(10, vector0.capacity());
assertEquals("[]", vector0.toString());
assertTrue(vector0.isEmpty());
assertEquals(0, vector0.size());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isFromExterns());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertTrue(node0.isParamList());
assertFalse(node0.isNumber());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertNull(node0.getSourceFileName());
assertFalse(node0.isOr());
assertEquals(83, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertEquals(37, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isWith());
assertTrue(node1.hasChildren());
assertFalse(node1.isExprResult());
assertTrue(node1.isCall());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertTrue(node1.hasOneChild());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isFromExterns());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertNull(node1.getSourceFileName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isSetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertEquals((-1), node1.getSourceOffset());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isTry());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(boolean1);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(54, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(54, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(54, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);


[MASTER] 19:11:06.062 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_157_1566407465946/com/google/javascript/jscomp/NodeUtil_157_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_157_1566407465946/com/google/javascript/jscomp/NodeUtil_157_tmp__ESTest_scaffolding.java]]
[MASTER] 19:11:06.062 [logback-2] ERROR JUnitAnalyzer - Classpath: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/tools/evosuite.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/classes:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/args4j.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/guava.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/json.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/jsr305.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/protobuf-java.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/lib/rhino.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/ant.jar
[MASTER] 19:11:06.063 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/rq3/botsing-integration-experiment/tools/evosuite.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/classes:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/args4j.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/guava.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/json.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/jsr305.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/protobuf-java.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/lib/rhino.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/ant.jar
[MASTER] 19:11:06.064 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 257
[MASTER] 19:11:06.065 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_157_1566407465946/com/google/javascript/jscomp/NodeUtil_157_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Aug 21 17:11:05 GMT 2019
4:  */
5: 
6: package com.google.javascript.jscomp;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.jscomp.Compiler;
11: import com.google.javascript.jscomp.NodeUtil;
12: import com.google.javascript.jscomp.PassConfig;
13: import com.google.javascript.jscomp.SyntheticAst;
14: import com.google.javascript.rhino.Node;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
20: public class NodeUtil_157_tmp__ESTest extends NodeUtil_157_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       Compiler compiler0 = new Compiler();
25:       assertNotNull(compiler0);
26:       assertEquals(0.0, compiler0.getProgress(), 0.01);
27:       
28:       PassConfig passConfig0 = compiler0.getPassConfig();
29:       assertNotNull(passConfig0);
30:       assertEquals(0.0, compiler0.getProgress(), 0.01);
31:       
32:       SyntheticAst syntheticAst0 = new SyntheticAst("com.google.javascript.jscomp.RenameLabels");
33:       assertNotNull(syntheticAst0);
34:       
35:       Node node0 = syntheticAst0.getAstRoot(compiler0);
36:       assertNotNull(node0);
37:       assertEquals(0.0, compiler0.getProgress(), 0.01);
38:       assertFalse(node0.isIn());
39:       assertFalse(node0.isString());
40:       assertFalse(node0.isEmpty());
41:       assertFalse(node0.isFor());
42:       assertFalse(node0.isCase());
43:       assertEquals((-1), node0.getSourceOffset());
44:       assertTrue(node0.isScript());
45:       assertFalse(node0.isTry());
46:       assertFalse(node0.isDebugger());
47:       assertFalse(node0.isArrayLit());
48:       assertEquals((-1), node0.getCharno());
49:       assertFalse(node0.isFunction());
50:       assertFalse(node0.isFalse());
51:       assertFalse(node0.isGetterDef());
52:       assertFalse(node0.isSwitch());
53:       assertFalse(node0.isSetterDef());
54:       assertFalse(node0.isCatch());
55:       assertFalse(node0.isInstanceOf());
56:       assertFalse(node0.isWith());
57:       assertFalse(node0.isThis());
58:       assertFalse(node0.isThrow());
59:       assertFalse(node0.isBlock());
60:       assertFalse(node0.isHook());
61:       assertFalse(node0.isInc());
62:       assertFalse(node0.isRegExp());
63:       assertFalse(node0.isNE());
64:       assertFalse(node0.isIf());
65:       assertEquals((-1), node0.getLineno());
66:       assertFalse(node0.isReturn());
67:       assertFalse(node0.isOr());
68:       assertFalse(node0.isLabel());
69:       assertFalse(node0.hasMoreThanOneChild());
70:       assertFalse(node0.isTypeOf());
71:       assertFalse(node0.isNumber());
72:       assertFalse(node0.isContinue());
73:       assertFalse(node0.isWhile());
74:       assertFalse(node0.isAssign());
75:       assertFalse(node0.isDo());
76:       assertFalse(node0.isDec());
77:       assertFalse(node0.hasChildren());
78:       assertFalse(node0.isFromExterns());
79:       assertFalse(node0.isAssignAdd());
80:       assertFalse(node0.hasOneChild());
81:       assertFalse(node0.isNot());
82:       assertFalse(node0.isLabelName());
83:       assertEquals((-1), node0.getSourcePosition());
84:       assertFalse(node0.isParamList());
85:       assertFalse(node0.isStringKey());
86:       assertFalse(node0.isAnd());
87:       assertEquals(0, node0.getChildCount());
88:       assertFalse(node0.isGetProp());
89:       assertFalse(node0.isComma());
90:       assertFalse(node0.isObjectLit());
91:       assertFalse(node0.isVar());
92:       assertFalse(node0.isDefaultCase());
93:       assertFalse(node0.isAdd());
94:       assertFalse(node0.isNew());
95:       assertFalse(node0.isCall());
96:       assertFalse(node0.isExprResult());
97:       assertEquals(132, node0.getType());
98:       assertFalse(node0.isDelProp());
99:       assertFalse(node0.isGetElem());
100:       assertFalse(node0.isBreak());
101:       assertFalse(node0.isTrue());
102:       assertFalse(node0.isVoid());
103:       assertFalse(node0.isNull());
104:       assertFalse(node0.isName());
105:       assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
106:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
107:       assertEquals(4095, Node.COLUMN_MASK);
108:       assertEquals(35, Node.PARENTHESIZED_PROP);
109:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
110:       assertEquals(53, Node.INPUT_ID);
111:       assertEquals(48, Node.DIRECTIVES);
112:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
113:       assertEquals(36, Node.QUOTED_PROP);
114:       assertEquals(43, Node.IS_CONSTANT_NAME);
115:       assertEquals(16, Node.SOURCENAME_PROP);
116:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
117:       assertEquals(2, Node.POST_FLAG);
118:       assertEquals(8, Node.FLAG_NO_THROWS);
119:       assertEquals(39, Node.EMPTY_BLOCK);
120:       assertEquals(40, Node.ORIGINALNAME_PROP);
121:       assertEquals(29, Node.JSDOC_INFO_PROP);
122:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
123:       assertEquals(47, Node.IS_DISPATCHER);
124:       assertEquals(30, Node.VAR_ARGS_NAME);
125:       assertEquals(1, Node.DECR_FLAG);
126:       assertEquals(49, Node.DIRECT_EVAL);
127:       assertEquals(15, Node.NO_SIDE_EFFECTS);
128:       assertEquals(52, Node.LENGTH);
129:       assertEquals(51, Node.STATIC_SOURCE_FILE);
130:       assertEquals(41, Node.BRACELESS_TYPE);
131:       assertEquals(46, Node.IS_NAMESPACE);
132:       assertEquals(54, Node.SLASH_V);
133:       assertEquals(50, Node.FREE_CALL);
134:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
135:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
136:       assertEquals(37, Node.OPT_ARG_NAME);
137:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
138:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
139:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
140:       assertEquals(32, Node.INCRDECR_PROP);
141:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
142:       assertEquals(12, Node.COLUMN_BITS);
143:       assertEquals(54, Node.LAST_PROP);
144:       
145:       boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
146:       assertEquals(0.0, compiler0.getProgress(), 0.01);
147:       assertFalse(node0.isIn());
148:       assertFalse(node0.isString());
149:       assertFalse(node0.isEmpty());
150:       assertFalse(node0.isFor());
151:       assertFalse(node0.isCase());
152:       assertEquals((-1), node0.getSourceOffset());
153:       assertTrue(node0.isScript());
154:       assertFalse(node0.isTry());
155:       assertFalse(node0.isDebugger());
156:       assertFalse(node0.isArrayLit());
157:       assertEquals((-1), node0.getCharno());
158:       assertFalse(node0.isFunction());
159:       assertFalse(node0.isFalse());
160:       assertFalse(node0.isGetterDef());
161:       assertFalse(node0.isSwitch());
162:       assertFalse(node0.isSetterDef());
163:       assertFalse(node0.isCatch());
164:       assertFalse(node0.isInstanceOf());
165:       assertFalse(node0.isWith());
166:       assertFalse(node0.isThis());
167:       assertFalse(node0.isThrow());
168:       assertFalse(node0.isBlock());
169:       assertFalse(node0.isHook());
170:       assertFalse(node0.isInc());
171:       assertFalse(node0.isRegExp());
172:       assertFalse(node0.isNE());
173:       assertFalse(node0.isIf());
174:       assertEquals((-1), node0.getLineno());
175:       assertFalse(node0.isReturn());
176:       assertFalse(node0.isOr());
177:       assertFalse(node0.isLabel());
178:       assertFalse(node0.hasMoreThanOneChild());
179:       assertFalse(node0.isTypeOf());
180:       assertFalse(node0.isNumber());
181:       assertFalse(node0.isContinue());
182:       assertFalse(node0.isWhile());
183:       assertFalse(node0.isAssign());
184:       assertFalse(node0.isDo());
185:       assertFalse(node0.isDec());
186:       assertFalse(node0.hasChildren());
187:       assertFalse(node0.isFromExterns());
188:       assertFalse(node0.isAssignAdd());
189:       assertFalse(node0.hasOneChild());
190:       assertFalse(node0.isNot());
191:       assertFalse(node0.isLabelName());
192:       assertEquals((-1), node0.getSourcePosition());
193:       assertFalse(node0.isParamList());
194:       assertFalse(node0.isStringKey());
195:       assertFalse(node0.isAnd());
196:       assertEquals(0, node0.getChildCount());
197:       assertFalse(node0.isGetProp());
198:       assertFalse(node0.isComma());
199:       assertFalse(node0.isObjectLit());
200:       assertFalse(node0.isVar());
201:       assertFalse(node0.isDefaultCase());
202:       assertFalse(node0.isAdd());
203:       assertFalse(node0.isNew());
204:       assertFalse(node0.isCall());
205:       assertFalse(node0.isExprResult());
206:       assertEquals(132, node0.getType());
207:       assertFalse(node0.isDelProp());
208:       assertFalse(node0.isGetElem());
209:       assertFalse(node0.isBreak());
210:       assertFalse(node0.isTrue());
211:       assertFalse(node0.isVoid());
212:       assertFalse(node0.isNull());
213:       assertFalse(node0.isName());
214:       assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
215:       assertTrue(boolean0);
216:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
217:       assertEquals(4095, Node.COLUMN_MASK);
218:       assertEquals(35, Node.PARENTHESIZED_PROP);
219:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
220:       assertEquals(53, Node.INPUT_ID);
221:       assertEquals(48, Node.DIRECTIVES);
222:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
223:       assertEquals(36, Node.QUOTED_PROP);
224:       assertEquals(43, Node.IS_CONSTANT_NAME);
225:       assertEquals(16, Node.SOURCENAME_PROP);
226:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
227:       assertEquals(2, Node.POST_FLAG);
228:       assertEquals(8, Node.FLAG_NO_THROWS);
229:       assertEquals(39, Node.EMPTY_BLOCK);
230:       assertEquals(40, Node.ORIGINALNAME_PROP);
231:       assertEquals(29, Node.JSDOC_INFO_PROP);
232:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
233:       assertEquals(47, Node.IS_DISPATCHER);
234:       assertEquals(30, Node.VAR_ARGS_NAME);
235:       assertEquals(1, Node.DECR_FLAG);
236:       assertEquals(49, Node.DIRECT_EVAL);
237:       assertEquals(15, Node.NO_SIDE_EFFECTS);
238:       assertEquals(52, Node.LENGTH);
239:       assertEquals(51, Node.STATIC_SOURCE_FILE);
240:       assertEquals(41, Node.BRACELESS_TYPE);
241:       assertEquals(46, Node.IS_NAMESPACE);
242:       assertEquals(54, Node.SLASH_V);
243:       assertEquals(50, Node.FREE_CALL);
244:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
245:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
246:       assertEquals(37, Node.OPT_ARG_NAME);
247:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
248:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
249:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
250:       assertEquals(32, Node.INCRDECR_PROP);
251:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
252:       assertEquals(12, Node.COLUMN_BITS);
253:       assertEquals(54, Node.LAST_PROP);
254:       
255:       Iterable<Node> iterable0 = node0.children();
256:       assertNotNull(iterable0);
257:       assertFalse(iterable0.contains(node0));
258:       assertEquals(0.0, compiler0.getProgress(), 0.01);
259:       assertFalse(node0.isIn());
260:       assertFalse(node0.isString());
261:       assertFalse(node0.isEmpty());
262:       assertFalse(node0.isFor());
263:       assertFalse(node0.isCase());
264:       assertEquals((-1), node0.getSourceOffset());
265:       assertTrue(node0.isScript());
266:       assertFalse(node0.isTry());
267:       assertFalse(node0.isDebugger());
268:       assertFalse(node0.isArrayLit());
269:       assertEquals((-1), node0.getCharno());
270:       assertFalse(node0.isFunction());
271:       assertFalse(node0.isFalse());
272:       assertFalse(node0.isGetterDef());
273:       assertFalse(node0.isSwitch());
274:       assertFalse(node0.isSetterDef());
275:       assertFalse(node0.isCatch());
276:       assertFalse(node0.isInstanceOf());
277:       assertFalse(node0.isWith());
278:       assertFalse(node0.isThis());
279:       assertFalse(node0.isThrow());
280:       assertFalse(node0.isBlock());
281:       assertFalse(node0.isHook());
282:       assertFalse(node0.isInc());
283:       assertFalse(node0.isRegExp());
284:       assertFalse(node0.isNE());
285:       assertFalse(node0.isIf());
286:       assertEquals((-1), node0.getLineno());
287:       assertFalse(node0.isReturn());
288:       assertFalse(node0.isOr());
289:       assertFalse(node0.isLabel());
290:       assertFalse(node0.hasMoreThanOneChild());
291:       assertFalse(node0.isTypeOf());
292:       assertFalse(node0.isNumber());
293:       assertFalse(node0.isContinue());
294:       assertFalse(node0.isWhile());
295:       assertFalse(node0.isAssign());
296:       assertFalse(node0.isDo());
297:       assertFalse(node0.isDec());
298:       assertFalse(node0.hasChildren());
299:       assertFalse(node0.isFromExterns());
300:       assertFalse(node0.isAssignAdd());
301:       assertFalse(node0.hasOneChild());
302:       assertFalse(node0.isNot());
303:       assertFalse(node0.isLabelName());
304:       assertEquals((-1), node0.getSourcePosition());
305:       assertFalse(node0.isParamList());
306:       assertFalse(node0.isStringKey());
307:       assertFalse(node0.isAnd());
308:       assertEquals(0, node0.getChildCount());
309:       assertFalse(node0.isGetProp());
310:       assertFalse(node0.isComma());
311:       assertFalse(node0.isObjectLit());
312:       assertFalse(node0.isVar());
313:       assertFalse(node0.isDefaultCase());
314:       assertFalse(node0.isAdd());
315:       assertFalse(node0.isNew());
316:       assertFalse(node0.isCall());
317:       assertFalse(node0.isExprResult());
318:       assertEquals(132, node0.getType());
319:       assertFalse(node0.isDelProp());
320:       assertFalse(node0.isGetElem());
321:       assertFalse(node0.isBreak());
322:       assertFalse(node0.isTrue());
323:       assertFalse(node0.isVoid());
324:       assertFalse(node0.isNull());
325:       assertFalse(node0.isName());
326:       assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
327:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
328:       assertEquals(4095, Node.COLUMN_MASK);
329:       assertEquals(35, Node.PARENTHESIZED_PROP);
330:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
331:       assertEquals(53, Node.INPUT_ID);
332:       assertEquals(48, Node.DIRECTIVES);
333:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
334:       assertEquals(36, Node.QUOTED_PROP);
335:       assertEquals(43, Node.IS_CONSTANT_NAME);
336:       assertEquals(16, Node.SOURCENAME_PROP);
337:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
338:       assertEquals(2, Node.POST_FLAG);
339:       assertEquals(8, Node.FLAG_NO_THROWS);
340:       assertEquals(39, Node.EMPTY_BLOCK);
341:       assertEquals(40, Node.ORIGINALNAME_PROP);
342:       assertEquals(29, Node.JSDOC_INFO_PROP);
343:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
344:       assertEquals(47, Node.IS_DISPATCHER);
345:       assertEquals(30, Node.VAR_ARGS_NAME);
346:       assertEquals(1, Node.DECR_FLAG);
347:       assertEquals(49, Node.DIRECT_EVAL);
348:       assertEquals(15, Node.NO_SIDE_EFFECTS);
349:       assertEquals(52, Node.LENGTH);
350:       assertEquals(51, Node.STATIC_SOURCE_FILE);
351:       assertEquals(41, Node.BRACELESS_TYPE);
352:       assertEquals(46, Node.IS_NAMESPACE);
353:       assertEquals(54, Node.SLASH_V);
354:       assertEquals(50, Node.FREE_CALL);
355:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
356:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
357:       assertEquals(37, Node.OPT_ARG_NAME);
358:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
359:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
360:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
361:       assertEquals(32, Node.INCRDECR_PROP);
362:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
363:       assertEquals(12, Node.COLUMN_BITS);
364:       assertEquals(54, Node.LAST_PROP);
365:       
366:       String string0 = NodeUtil.opToStr(30);
367:       assertNull(string0);
368:   }
369: }
RegularFileObject[/tmp/EvoSuite_157_1566407465946/com/google/javascript/jscomp/NodeUtil_157_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Aug 21 17:11:05 GMT 2019
5:  */
6: 
7: package com.google.javascript.jscomp;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NodeUtil_157_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.jscomp.NodeUtil"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/rq3/botsing-integration-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NodeUtil_157_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.common.collect.ArrayListMultimap",
82:       "com.google.javascript.jscomp.Tracer$1",
83:       "com.google.common.collect.Collections2",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.jscomp.NodeTraversal$Callback",
86:       "com.google.javascript.rhino.head.jdk13.VMBridge_jdk13",
87:       "com.google.javascript.jscomp.CheckSideEffects",
88:       "com.google.javascript.rhino.head.ast.Yield",
89:       "com.google.javascript.jscomp.SimpleDefinitionFinder",
90:       "com.google.javascript.jscomp.Scope$Arguments",
91:       "com.google.javascript.jscomp.graph.Graph",
92:       "com.google.javascript.rhino.jstype.StaticScope",
93:       "com.google.javascript.rhino.jstype.InstanceObjectType",
94:       "com.google.javascript.jscomp.graph.Annotatable",
95:       "com.google.common.collect.AbstractMapBasedMultiset$1",
96:       "com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher",
97:       "com.google.javascript.jscomp.JSModule",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.ImmutableSet$ArrayImmutableSet",
100:       "com.google.javascript.rhino.JSDocInfo$Marker",
101:       "com.google.common.collect.RegularImmutableMap",
102:       "com.google.javascript.rhino.Node$NodeMismatch",
103:       "com.google.javascript.rhino.jstype.RecordType",
104:       "com.google.javascript.rhino.head.ast.Jump",
105:       "com.google.javascript.jscomp.Tracer",
106:       "com.google.javascript.jscomp.HotSwapCompilerPass",
107:       "com.google.javascript.jscomp.SourceFile$Builder",
108:       "com.google.javascript.jscomp.CodingConvention$SubclassType",
109:       "com.google.javascript.rhino.jstype.JSType$1",
110:       "com.google.javascript.rhino.jstype.JSType$2",
111:       "com.google.javascript.jscomp.CodingConvention",
112:       "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
113:       "com.google.javascript.jscomp.SourceMap$DetailLevel",
114:       "com.google.javascript.jscomp.MemoizedScopeCreator",
115:       "com.google.javascript.rhino.head.ast.EmptyStatement",
116:       "com.google.javascript.jscomp.CompilerOptions$1",
117:       "com.google.javascript.jscomp.SourceExcerptProvider$1",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.jscomp.CheckAccessControls",
120:       "com.google.javascript.jscomp.CheckDebuggerStatement",
121:       "com.google.common.collect.SingletonImmutableMap",
122:       "com.google.javascript.jscomp.ReplaceIdGenerators",
123:       "com.google.javascript.jscomp.CleanupPasses",
124:       "com.google.javascript.rhino.head.ast.XmlFragment",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.javascript.jscomp.graph.FixedPointGraphTraversal$EdgeCallback",
127:       "com.google.javascript.jscomp.CompilerOptions$Reach",
128:       "com.google.javascript.jscomp.PassConfig$State",
129:       "com.google.javascript.rhino.head.ast.CatchClause",
130:       "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.common.collect.RegularImmutableMap$LinkedEntry",
133:       "com.google.common.collect.Lists$Partition",
134:       "com.google.javascript.rhino.head.ast.AstRoot",
135:       "com.google.javascript.rhino.head.ast.NewExpression",
136:       "com.google.common.collect.Count",
137:       "com.google.javascript.rhino.ErrorReporter",
138:       "com.google.javascript.rhino.jstype.ValueType",
139:       "com.google.javascript.rhino.Token",
140:       "com.google.javascript.rhino.head.ast.ParenthesizedExpression",
141:       "com.google.javascript.rhino.jstype.BooleanType",
142:       "com.google.javascript.jscomp.CssRenamingMap",
143:       "com.google.javascript.rhino.head.Context$ClassShutterSetter",
144:       "com.google.common.base.CharMatcher$5",
145:       "com.google.common.base.CharMatcher$4",
146:       "com.google.common.base.CharMatcher$3",
147:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$ContextualRenamer",
148:       "com.google.common.base.CharMatcher$2",
149:       "com.google.common.base.CharMatcher$9",
150:       "com.google.common.base.CharMatcher$8",
151:       "com.google.common.base.CharMatcher$7",
152:       "com.google.javascript.rhino.head.ast.Label",
153:       "com.google.common.base.CharMatcher$6",
154:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
155:       "com.google.javascript.jscomp.SuppressDocWarningsGuard",
156:       "com.google.javascript.jscomp.MessageFormatter",
157:       "com.google.javascript.rhino.JSDocInfo",
158:       "com.google.javascript.jscomp.SourceExcerptProvider$ExcerptFormatter",
159:       "com.google.common.base.CharMatcher$1",
160:       "com.google.javascript.jscomp.parsing.Config",
161:       "com.google.common.collect.EmptyImmutableList",
162:       "com.google.common.collect.ImmutableEntry",
163:       "com.google.javascript.rhino.head.CompilerEnvirons",
164:       "com.google.common.base.Joiner$1",
165:       "com.google.common.base.Joiner$2",
166:       "com.google.javascript.jscomp.ErrorHandler",
167:       "com.google.javascript.rhino.head.Callable",
168:       "com.google.javascript.jscomp.GoogleCodingConvention",
169:       "com.google.javascript.jscomp.SourceFile$Preloaded",
170:       "com.google.common.collect.ImmutableCollection",
171:       "com.google.javascript.rhino.ScriptRuntime",
172:       "com.google.javascript.rhino.head.ast.ScriptNode",
173:       "com.google.javascript.rhino.head.ast.XmlString",
174:       "com.google.javascript.jscomp.StrictModeCheck",
175:       "com.google.javascript.rhino.head.ast.WhileLoop",
176:       "com.google.javascript.jscomp.DefinitionsRemover$Definition",
177:       "com.google.javascript.jscomp.Result",
178:       "com.google.javascript.jscomp.CodingConventions$1",
179:       "com.google.javascript.jscomp.CodingConvention$ObjectLiteralCast",
180:       "com.google.javascript.jscomp.CodingConvention$SubclassRelationship",
181:       "com.google.javascript.jscomp.CompilerPass",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.jscomp.NodeUtil$MatchDeclaration",
184:       "com.google.javascript.jscomp.NodeUtil$VarCollector",
185:       "com.google.javascript.jscomp.VariableRenamingPolicy",
186:       "com.google.common.collect.ImmutableCollection$Builder",
187:       "com.google.javascript.rhino.head.ast.IfStatement",
188:       "com.google.javascript.jscomp.CodeChangeHandler",
189:       "com.google.common.collect.Lists$AbstractListWrapper",
190:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$Renamer",
191:       "com.google.javascript.jscomp.FunctionTypeBuilder",
192:       "com.google.javascript.jscomp.FunctionInformationMap",
193:       "com.google.common.collect.AbstractMapBasedMultiset",
194:       "com.google.javascript.jscomp.NodeUtil$MayBeStringResultPredicate",
195:       "com.google.javascript.rhino.jstype.EnumType",
196:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
197:       "com.google.javascript.jscomp.JsMessageVisitor$MalformedException",
198:       "com.google.javascript.rhino.head.Evaluator",
199:       "com.google.javascript.jscomp.CodingConventions$DefaultCodingConvention",
200:       "com.google.common.base.CharMatcher$LookupTable",
201:       "com.google.javascript.rhino.head.ast.XmlElemRef",
202:       "com.google.javascript.rhino.head.ast.VariableDeclaration",
203:       "com.google.javascript.rhino.head.TokenStream",
204:       "com.google.common.collect.RegularImmutableList$1",
205:       "com.google.javascript.rhino.head.ast.ObjectLiteral",
206:       "com.google.common.collect.Lists$2",
207:       "com.google.javascript.jscomp.JSSourceFile",
208:       "com.google.javascript.jscomp.CodingConventions",
209:       "com.google.common.collect.Lists$1",
210:       "com.google.javascript.rhino.jstype.StaticReference",
211:       "com.google.common.collect.Multiset",
212:       "com.google.javascript.rhino.head.ast.InfixExpression",
213:       "com.google.javascript.rhino.head.BaseFunction",
214:       "com.google.common.base.Supplier",
215:       "com.google.protobuf.MessageOrBuilder",
216:       "com.google.javascript.jscomp.GlobalVarReferenceMap",
217:       "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
218:       "com.google.javascript.rhino.head.ast.XmlPropRef",
219:       "com.google.javascript.jscomp.TypeValidator",
220:       "com.google.common.collect.ImmutableList",
221:       "com.google.protobuf.GeneratedMessage",
222:       "com.google.javascript.rhino.jstype.ObjectType$Property",
223:       "com.google.javascript.rhino.Node$AbstractPropListItem",
224:       "com.google.javascript.jscomp.Tracer$InternalClock",
225:       "com.google.common.collect.AbstractMultimap$KeySet",
226:       "com.google.javascript.jscomp.SourceMap$LocationMapping",
227:       "com.google.javascript.rhino.head.ast.VariableInitializer",
228:       "com.google.javascript.rhino.jstype.NoResolvedType",
229:       "com.google.javascript.rhino.head.ast.ThrowStatement",
230:       "com.google.protobuf.MessageLiteOrBuilder",
231:       "com.google.javascript.jscomp.NodeTraversal$AbstractNodeTypePruningCallback",
232:       "com.google.javascript.jscomp.DefaultPassConfig$99",
233:       "com.google.protobuf.MessageLite",
234:       "com.google.javascript.jscomp.DefaultPassConfig$98",
235:       "com.google.common.collect.Maps$EntryTransformer",
236:       "com.google.javascript.jscomp.DefaultPassConfig$95",
237:       "com.google.common.collect.Ordering",
238:       "com.google.javascript.jscomp.DefaultPassConfig$94",
239:       "com.google.javascript.jscomp.DefaultPassConfig$96",
240:       "com.google.javascript.jscomp.CustomPassExecutionTime",
241:       "com.google.javascript.jscomp.DefaultPassConfig$91",
242:       "com.google.javascript.jscomp.SyntacticScopeCreator",
243:       "com.google.javascript.jscomp.DefaultPassConfig$90",
244:       "com.google.javascript.jscomp.DefaultPassConfig$93",
245:       "com.google.javascript.jscomp.DefaultPassConfig$92",
246:       "com.google.javascript.rhino.head.debug.DebuggableScript",
247:       "com.google.javascript.jscomp.CompilerOptions$TweakProcessing",
248:       "com.google.common.collect.Hashing",
249:       "com.google.javascript.rhino.head.DefaultErrorReporter",
250:       "com.google.javascript.jscomp.SourceMap$Format",
251:       "com.google.javascript.rhino.jstype.NoType",
252:       "com.google.javascript.rhino.head.Script",
253:       "com.google.common.collect.AbstractMultimap$WrappedCollection",
254:       "com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider",
255:       "com.google.javascript.rhino.TokenStream",
256:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
257:       "com.google.javascript.jscomp.DefaultPassConfig$88",
258:       "com.google.javascript.jscomp.DefaultPassConfig$87",
259:       "com.google.javascript.jscomp.DefaultPassConfig$89",
260:       "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments",
261:       "com.google.javascript.rhino.head.ast.Comment",
262:       "com.google.javascript.jscomp.DefaultPassConfig$84",
263:       "com.google.javascript.jscomp.DefaultPassConfig$83",
264:       "com.google.javascript.jscomp.DefaultPassConfig$86",
265:       "com.google.javascript.jscomp.DefaultPassConfig$85",
266:       "com.google.javascript.jscomp.CodingConventions$Proxy",
267:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt",
268:       "com.google.javascript.jscomp.DefaultPassConfig$80",
269:       "com.google.javascript.jscomp.DefaultPassConfig$82",
270:       "com.google.javascript.jscomp.DefaultPassConfig$81",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.javascript.rhino.head.optimizer.Codegen",
273:       "com.google.javascript.rhino.head.ast.FunctionCall",
274:       "com.google.javascript.jscomp.RhinoErrorReporter$NewRhinoErrorReporter",
275:       "com.google.javascript.jscomp.NodeUtil",
276:       "com.google.common.collect.RegularImmutableSet",
277:       "com.google.javascript.jscomp.JsMessageVisitor",
278:       "com.google.javascript.jscomp.DefaultPassConfig$77",
279:       "com.google.javascript.jscomp.DefaultPassConfig$76",
280:       "com.google.javascript.jscomp.DefaultPassConfig$79",
281:       "com.google.javascript.jscomp.DefaultPassConfig$78",
282:       "com.google.javascript.jscomp.DefaultPassConfig$73",
283:       "com.google.javascript.jscomp.DefaultPassConfig$72",
284:       "com.google.javascript.rhino.head.EcmaError",
285:       "com.google.javascript.rhino.head.FunctionObject",
286:       "com.google.javascript.jscomp.DefaultPassConfig$75",
287:       "com.google.javascript.jscomp.DefaultPassConfig$74",
288:       "com.google.javascript.jscomp.DefaultPassConfig$71",
289:       "com.google.javascript.jscomp.DefaultPassConfig$70",
290:       "com.google.javascript.rhino.head.NativeContinuation",
291:       "com.google.javascript.rhino.head.xml.XMLObject",
292:       "com.google.javascript.rhino.head.Node$NodeIterator",
293:       "com.google.common.collect.ImmutableAsList",
294:       "com.google.javascript.jscomp.PassConfig",
295:       "com.google.javascript.jscomp.ConcreteType$ConcreteInstanceType",
296:       "com.google.common.collect.SingletonImmutableSet",
297:       "com.google.javascript.jscomp.AbstractMessageFormatter$Color",
298:       "com.google.javascript.jscomp.Normalize$NormalizeStatements",
299:       "com.google.javascript.jscomp.DefaultPassConfig$69",
300:       "com.google.javascript.rhino.head.InterpretedFunction",
301:       "com.google.javascript.jscomp.DefaultPassConfig$66",
302:       "com.google.javascript.jscomp.DefaultPassConfig$65",
303:       "com.google.javascript.jscomp.DefaultPassConfig$68",
304:       "com.google.javascript.jscomp.DefaultPassConfig$67",
305:       "com.google.javascript.rhino.jstype.ParameterizedType",
306:       "com.google.javascript.jscomp.DefaultPassConfig$62",
307:       "com.google.javascript.jscomp.DefaultPassConfig$61",
308:       "com.google.javascript.rhino.Node$SideEffectFlags",
309:       "com.google.javascript.jscomp.DefaultPassConfig$64",
310:       "com.google.javascript.jscomp.DefaultPassConfig$63",
311:       "com.google.javascript.jscomp.DefaultPassConfig$60",
312:       "com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceMap",
313:       "com.google.javascript.rhino.jstype.NullType",
314:       "com.google.javascript.jscomp.LightweightMessageFormatter",
315:       "com.google.common.collect.EmptyImmutableList$1",
316:       "com.google.javascript.jscomp.Compiler$CodeBuilder",
317:       "com.google.javascript.jscomp.FunctionInformationMapOrBuilder",
318:       "com.google.javascript.jscomp.DefaultPassConfig$HotSwapPassFactory",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.common.collect.AbstractIterator",
321:       "com.google.javascript.rhino.head.ScriptableObject$GetterSlot",
322:       "com.google.javascript.jscomp.BasicErrorManager$ErrorWithLevel",
323:       "com.google.common.base.CharMatcher$And",
324:       "com.google.javascript.jscomp.DiagnosticType",
325:       "com.google.javascript.jscomp.DefaultPassConfig$59",
326:       "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback$SideEffectAccumulator",
327:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler$NullAliasTransformation",
328:       "com.google.javascript.jscomp.DefaultPassConfig$58",
329:       "com.google.javascript.jscomp.graph.DiGraph$DiGraphNode",
330:       "com.google.javascript.jscomp.PrepareAst",
331:       "com.google.javascript.rhino.head.ast.ForLoop",
332:       "com.google.javascript.jscomp.DefaultPassConfig$55",
333:       "com.google.javascript.jscomp.DefaultPassConfig$54",
334:       "com.google.javascript.jscomp.DefaultPassConfig$57",
335:       "com.google.javascript.jscomp.DefaultPassConfig$56",
336:       "com.google.common.io.OutputSupplier",
337:       "com.google.javascript.jscomp.DefaultPassConfig$51",
338:       "com.google.javascript.jscomp.DefaultPassConfig$50",
339:       "com.google.javascript.jscomp.CompilerInput",
340:       "com.google.javascript.jscomp.DefaultPassConfig$53",
341:       "com.google.javascript.rhino.head.ast.FunctionNode",
342:       "com.google.javascript.jscomp.DefaultPassConfig$52",
343:       "com.google.javascript.jscomp.AbstractCompiler",
344:       "com.google.common.collect.UnmodifiableIterator",
345:       "com.google.javascript.jscomp.ExploitAssigns",
346:       "com.google.javascript.rhino.head.Context",
347:       "com.google.common.io.InputSupplier",
348:       "com.google.javascript.jscomp.DiagnosticGroup",
349:       "com.google.common.collect.ImmutableSet$TransformedImmutableSet",
350:       "com.google.common.collect.AbstractMultimap$WrappedList",
351:       "com.google.javascript.jscomp.CodeChangeHandler$RecentChange",
352:       "com.google.javascript.jscomp.NodeUtil$Visitor",
353:       "com.google.javascript.jscomp.SyntacticScopeCreator$RedeclarationHandler",
354:       "com.google.javascript.rhino.head.NativeBoolean",
355:       "com.google.javascript.jscomp.DefaultPassConfig$48",
356:       "com.google.javascript.rhino.Node$AncestorIterable",
357:       "com.google.common.collect.AbstractMultimap$RandomAccessWrappedList",
358:       "com.google.javascript.rhino.head.ast.Name",
359:       "com.google.javascript.jscomp.DefaultPassConfig$47",
360:       "com.google.common.collect.ImmutableEnumSet",
361:       "com.google.javascript.jscomp.DefaultPassConfig$49",
362:       "com.google.javascript.jscomp.DefaultPassConfig$44",
363:       "com.google.javascript.jscomp.DefaultPassConfig$43",
364:       "com.google.javascript.jscomp.DefaultPassConfig$46",
365:       "com.google.javascript.jscomp.DefaultPassConfig$45",
366:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax$1",
367:       "com.google.javascript.jscomp.DefaultPassConfig$40",
368:       "com.google.common.collect.HashMultiset",
369:       "com.google.javascript.rhino.jstype.UnresolvedTypeExpression",
370:       "com.google.javascript.jscomp.DefaultPassConfig$42",
371:       "com.google.javascript.jscomp.DefaultPassConfig$41",
372:       "com.google.protobuf.AbstractMessageLite",
373:       "com.google.javascript.jscomp.ErrorManager",
374:       "com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate",
375:       "com.google.common.collect.SingletonImmutableList",
376:       "com.google.javascript.rhino.head.ast.ConditionalExpression",
377:       "com.google.javascript.jscomp.CheckLevel",
378:       "com.google.javascript.rhino.jstype.StaticSlot",
379:       "com.google.common.collect.LinkedListMultimap",
380:       "com.google.javascript.rhino.head.ast.PropertyGet",
381:       "com.google.common.collect.AbstractSetMultimap",
382:       "com.google.javascript.rhino.head.ContextFactory",
383:       "com.google.common.base.Function",
384:       "com.google.javascript.rhino.head.VMBridge",
385:       "com.google.common.collect.ImmutableMap",
386:       "com.google.common.collect.Multiset$Entry",
387:       "com.google.javascript.jscomp.DefaultPassConfig$37",
388:       "com.google.javascript.jscomp.DefaultPassConfig$36",
389:       "com.google.javascript.jscomp.DefaultPassConfig$39",
390:       "com.google.javascript.jscomp.DefaultPassConfig$38",
391:       "com.google.javascript.jscomp.DefaultPassConfig$33",
392:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
393:       "com.google.javascript.jscomp.DefaultPassConfig$32",
394:       "com.google.javascript.jscomp.DefaultPassConfig$35",
395:       "com.google.javascript.jscomp.DefaultPassConfig$34",
396:       "com.google.javascript.rhino.head.ast.Loop",
397:       "com.google.javascript.jscomp.DefaultPassConfig$31",
398:       "com.google.javascript.jscomp.CrossModuleMethodMotion$IdGenerator",
399:       "com.google.javascript.jscomp.Region",
400:       "com.google.javascript.jscomp.DefaultPassConfig$30",
401:       "com.google.javascript.rhino.IR",
402:       "com.google.javascript.rhino.head.ast.GeneratorExpressionLoop",
403:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
404:       "com.google.javascript.jscomp.NodeTraversal$AbstractPostOrderCallback",
405:       "com.google.javascript.jscomp.DefaultPassConfig",
406:       "com.google.javascript.jscomp.Normalize",
407:       "com.google.javascript.jscomp.CompilerOptions$TracerMode",
408:       "com.google.javascript.jscomp.RhinoErrorReporter$OldRhinoErrorReporter",
409:       "com.google.javascript.jscomp.DefinitionProvider",
410:       "com.google.javascript.jscomp.NameAnalyzer$1",
411:       "com.google.common.collect.AbstractMultiset",
412:       "com.google.javascript.jscomp.DefaultPassConfig$29",
413:       "com.google.javascript.jscomp.DefaultPassConfig$26",
414:       "com.google.javascript.jscomp.DefaultPassConfig$25",
415:       "com.google.common.collect.Iterators",
416:       "com.google.javascript.jscomp.DefaultPassConfig$28",
417:       "com.google.javascript.rhino.head.IdFunctionCall",
418:       "com.google.javascript.jscomp.DefaultPassConfig$27",
419:       "com.google.javascript.jscomp.DefaultPassConfig$22",
420:       "com.google.javascript.jscomp.DefaultPassConfig$21",
421:       "com.google.javascript.jscomp.DefaultPassConfig$24",
422:       "com.google.javascript.jscomp.DefaultPassConfig$23",
423:       "com.google.javascript.jscomp.ProcessTweaks$TweakFunction",
424:       "com.google.javascript.rhino.head.ast.SwitchStatement",
425:       "com.google.javascript.jscomp.DependencyOptions",
426:       "com.google.common.collect.Multisets$EntrySet",
427:       "com.google.javascript.jscomp.DefaultPassConfig$20",
428:       "com.google.javascript.rhino.head.ast.DoLoop",
429:       "com.google.javascript.jscomp.SourceFile$OnDisk",
430:       "com.google.javascript.rhino.head.ScriptRuntime",
431:       "com.google.javascript.jscomp.DefaultPassConfig$19",
432:       "com.google.javascript.jscomp.DefaultPassConfig$18",
433:       "com.google.javascript.rhino.jstype.JSTypeNative",
434:       "com.google.javascript.rhino.jstype.AllType",
435:       "com.google.javascript.jscomp.DefaultPassConfig$15",
436:       "com.google.common.collect.Maps",
437:       "com.google.common.primitives.Ints",
438:       "com.google.javascript.jscomp.DefaultPassConfig$14",
439:       "com.google.javascript.jscomp.NodeTraversal$AbstractShallowStatementCallback",
440:       "com.google.common.collect.SetMultimap",
441:       "com.google.javascript.rhino.head.ast.ExpressionStatement",
442:       "com.google.javascript.jscomp.DefaultPassConfig$17",
443:       "com.google.javascript.jscomp.DefaultPassConfig$16",
444:       "com.google.common.collect.ImmutableSet$SerializedForm",
445:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
446:       "com.google.javascript.jscomp.DefaultPassConfig$7",
447:       "com.google.javascript.jscomp.DefaultPassConfig$11",
448:       "com.google.javascript.jscomp.DefaultPassConfig$8",
449:       "com.google.javascript.jscomp.DefaultPassConfig$10",
450:       "com.google.javascript.jscomp.DefaultPassConfig$5",
451:       "com.google.javascript.jscomp.DefaultPassConfig$13",
452:       "com.google.javascript.jscomp.DefaultPassConfig$6",
453:       "com.google.javascript.jscomp.DefaultPassConfig$12",
454:       "com.google.javascript.rhino.JSTypeExpression",
455:       "com.google.javascript.jscomp.DefaultPassConfig$9",
456:       "com.google.javascript.jscomp.PrintStreamErrorManager",
457:       "com.google.javascript.jscomp.Tracer$Stat",
458:       "com.google.javascript.rhino.head.ScriptableObject",
459:       "com.google.javascript.rhino.head.IdScriptableObject",
460:       "com.google.javascript.rhino.head.NativeFunction",
461:       "com.google.common.collect.RegularImmutableMap$Values",
462:       "com.google.javascript.jscomp.DefaultPassConfig$3",
463:       "com.google.javascript.jscomp.DefaultPassConfig$4",
464:       "com.google.javascript.jscomp.DefaultPassConfig$1",
465:       "com.google.javascript.jscomp.DefaultPassConfig$2",
466:       "com.google.javascript.rhino.head.ast.ObjectProperty",
467:       "com.google.javascript.rhino.head.Icode",
468:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
469:       "com.google.javascript.jscomp.type.ReverseAbstractInterpreter",
470:       "com.google.javascript.jscomp.CompilerOptions$LanguageMode",
471:       "com.google.javascript.rhino.head.ast.UnaryExpression",
472:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
473:       "com.google.javascript.rhino.jstype.ArrowType",
474:       "com.google.javascript.rhino.SimpleErrorReporter",
475:       "com.google.common.collect.Lists$RandomAccessPartition",
476:       "com.google.javascript.jscomp.type.FlowScope",
477:       "com.google.javascript.rhino.head.WrappedException",
478:       "com.google.javascript.jscomp.TightenTypes$ConcreteScope",
479:       "com.google.javascript.jscomp.graph.GraphNode",
480:       "com.google.javascript.rhino.jstype.NumberType",
481:       "com.google.javascript.rhino.head.debug.DebuggableObject",
482:       "com.google.javascript.rhino.head.Function",
483:       "com.google.common.collect.LinkedHashMultiset",
484:       "com.google.javascript.jscomp.PassFactory",
485:       "com.google.common.collect.Sets$2",
486:       "com.google.javascript.rhino.Node$IntPropListItem",
487:       "com.google.common.collect.Sets$3",
488:       "com.google.javascript.rhino.head.ast.LetNode",
489:       "com.google.common.collect.Sets$1",
490:       "com.google.javascript.jscomp.parsing.IRFactory$1",
491:       "com.google.common.collect.AbstractSortedSetMultimap",
492:       "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator",
493:       "com.google.javascript.jscomp.ControlFlowGraph",
494:       "com.google.javascript.jscomp.graph.GraphvizGraph",
495:       "com.google.javascript.rhino.head.ContextFactory$Listener",
496:       "com.google.javascript.rhino.head.NativeCall",
497:       "com.google.javascript.rhino.jstype.ModificationVisitor",
498:       "com.google.common.collect.AbstractMapEntry",
499:       "com.google.javascript.rhino.Node$AncestorIterable$1",
500:       "com.google.common.collect.Iterators$12",
501:       "com.google.common.collect.Iterators$11",
502:       "com.google.javascript.jscomp.ClosureCodingConvention",
503:       "com.google.common.base.Predicate",
504:       "com.google.javascript.jscomp.ReplaceIdGenerators$NameSupplier",
505:       "com.google.common.collect.AbstractMultimap$AsMap",
506:       "com.google.javascript.jscomp.ControlStructureCheck",
507:       "com.google.javascript.jscomp.VariableReferenceCheck",
508:       "com.google.javascript.jscomp.WarningsGuard",
509:       "com.google.javascript.jscomp.SourceMap",
510:       "com.google.javascript.rhino.head.ast.ForInLoop",
511:       "com.google.javascript.jscomp.Tracer$AtomicTracerStatMap",
512:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
513:       "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
514:       "com.google.common.collect.AbstractListMultimap",
515:       "com.google.javascript.jscomp.LightweightMessageFormatter$LineNumberingFormatter",
516:       "com.google.javascript.jscomp.CompilerOptions",
517:       "com.google.javascript.rhino.Node$StringNode",
518:       "com.google.javascript.rhino.jstype.TemplateType",
519:       "com.google.javascript.rhino.jstype.NamedType",
520:       "com.google.common.collect.Iterators$14",
521:       "com.google.common.collect.Iterators$13",
522:       "com.google.common.collect.Lists",
523:       "com.google.javascript.jscomp.CheckProvides",
524:       "com.google.javascript.rhino.head.ast.Block",
525:       "com.google.common.collect.UnmodifiableListIterator",
526:       "com.google.javascript.rhino.head.ast.SwitchCase",
527:       "com.google.common.io.ByteArrayDataInput",
528:       "com.google.javascript.jscomp.RhinoErrorReporter",
529:       "com.google.javascript.jscomp.CompilerOptions$AliasTransformation",
530:       "com.google.javascript.rhino.jstype.UnknownType",
531:       "com.google.common.base.Charsets",
532:       "com.google.javascript.rhino.head.ast.StringLiteral",
533:       "com.google.javascript.jscomp.CheckGlobalNames",
534:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
535:       "com.google.javascript.rhino.jstype.StaticSourceFile",
536:       "org.mozilla.classfile.ClassFileWriter$ClassFileFormatException",
537:       "com.google.javascript.rhino.head.ScriptableObject$Slot",
538:       "com.google.javascript.rhino.head.ast.ReturnStatement",
539:       "com.google.javascript.jscomp.ConcreteType$ConcreteFunctionType",
540:       "com.google.common.base.CharMatcher",
541:       "com.google.javascript.rhino.jstype.JSType$TypePair",
542:       "com.google.common.base.Joiner$MapJoiner",
543:       "com.google.javascript.jscomp.CheckRegExp",
544:       "com.google.javascript.jscomp.CheckGlobalThis",
545:       "com.google.common.collect.RegularImmutableMap$NonTerminalEntry",
546:       "com.google.common.collect.AbstractMultiset$EntrySet",
547:       "com.google.javascript.jscomp.ConcreteType$Factory",
548:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt$2",
549:       "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
550:       "com.google.common.base.Preconditions",
551:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt$1",
552:       "com.google.javascript.rhino.head.ast.ArrayLiteral",
553:       "com.google.javascript.rhino.head.ast.RegExpLiteral",
554:       "com.google.javascript.rhino.head.Token",
555:       "com.google.javascript.jscomp.BasicErrorManager",
556:       "com.google.javascript.jscomp.SourceFile$Generator",
557:       "com.google.javascript.jscomp.PerformanceTracker",
558:       "com.google.javascript.rhino.jstype.IndexedType",
559:       "com.google.javascript.jscomp.NodeUtil$MatchNodeType",
560:       "com.google.javascript.jscomp.ComposeWarningsGuard$GuardComparator",
561:       "com.google.javascript.jscomp.ProcessDefines",
562:       "com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph",
563:       "com.google.javascript.rhino.head.NativeArray",
564:       "com.google.javascript.jscomp.PeepholeFoldConstants",
565:       "com.google.javascript.rhino.Node$NumberNode",
566:       "com.google.javascript.jscomp.Scope",
567:       "com.google.common.io.ByteArrayDataOutput",
568:       "com.google.javascript.rhino.head.Parser",
569:       "com.google.common.collect.Iterators$6",
570:       "com.google.javascript.jscomp.ErrorFormat$2",
571:       "com.google.javascript.jscomp.Scope$Var",
572:       "com.google.common.collect.BiMap",
573:       "com.google.common.collect.Iterators$7",
574:       "com.google.javascript.jscomp.ErrorFormat$3",
575:       "com.google.javascript.rhino.head.NativeString",
576:       "com.google.javascript.jscomp.ErrorFormat$4",
577:       "com.google.javascript.rhino.head.ast.XmlRef",
578:       "com.google.common.collect.ImmutableSet",
579:       "com.google.common.collect.SortedSetMultimap",
580:       "com.google.javascript.jscomp.PeepholeReplaceKnownMethods",
581:       "com.google.javascript.jscomp.AbstractPeepholeOptimization",
582:       "com.google.javascript.rhino.jstype.JSTypeRegistry$ResolveMode",
583:       "com.google.javascript.rhino.head.ast.ElementGet",
584:       "com.google.common.collect.Iterators$1",
585:       "com.google.javascript.jscomp.DisambiguateProperties$Warnings",
586:       "com.google.common.collect.Iterators$2",
587:       "com.google.common.collect.Iterators$3",
588:       "com.google.javascript.jscomp.parsing.Annotation",
589:       "com.google.javascript.jscomp.AbstractMessageFormatter",
590:       "com.google.javascript.jscomp.DefinitionSite",
591:       "com.google.common.collect.Lists$StringAsImmutableList",
592:       "com.google.javascript.rhino.head.JavaScriptException",
593:       "com.google.javascript.rhino.head.ast.IdeErrorReporter",
594:       "com.google.javascript.jscomp.ProcessTweaks",
595:       "com.google.javascript.jscomp.NodeUtil$1",
596:       "com.google.javascript.rhino.head.ast.TryStatement",
597:       "com.google.javascript.jscomp.parsing.IRFactory",
598:       "com.google.javascript.jscomp.ErrorFormat$1",
599:       "com.google.javascript.rhino.head.TopLevel",
600:       "com.google.javascript.jscomp.Compiler$3",
601:       "com.google.javascript.jscomp.PrepareAst$PrepareAnnotations",
602:       "com.google.javascript.jscomp.NameAnalyzer",
603:       "com.google.javascript.jscomp.Scope$1",
604:       "com.google.common.collect.AbstractMultimap",
605:       "com.google.common.base.Predicates$ObjectPredicate$1",
606:       "com.google.common.collect.EmptyImmutableSet",
607:       "com.google.javascript.jscomp.UseSite",
608:       "com.google.common.io.Files",
609:       "com.google.javascript.jscomp.NodeUtil$MatchNotFunction",
610:       "com.google.javascript.jscomp.LinkedFlowScope$FlatFlowScopeCache",
611:       "com.google.javascript.jscomp.parsing.Config$LanguageMode",
612:       "com.google.javascript.rhino.head.ast.ArrayComprehension",
613:       "com.google.javascript.jscomp.OptimizeCalls$CallGraphCompilerPass",
614:       "com.google.javascript.jscomp.CodingConvention$Bind",
615:       "com.google.protobuf.AbstractMessage",
616:       "com.google.javascript.rhino.head.ScriptRuntime$1",
617:       "com.google.javascript.jscomp.PassFactory$1",
618:       "com.google.javascript.rhino.head.ObjToIntMap",
619:       "com.google.javascript.jscomp.PeepholeRemoveDeadCode",
620:       "com.google.common.collect.ImmutableMap$Builder",
621:       "com.google.javascript.rhino.head.ConstProperties",
622:       "com.google.javascript.jscomp.deps.SortedDependencies$MissingProvideException",
623:       "com.google.common.base.Predicates$ObjectPredicate$4",
624:       "com.google.javascript.jscomp.ReorderConstantExpression",
625:       "com.google.common.base.Predicates$ObjectPredicate$3",
626:       "com.google.javascript.jscomp.LinkedFlowScope",
627:       "com.google.common.base.Predicates$ObjectPredicate$2",
628:       "com.google.javascript.jscomp.NodeUtil$MatchNameNode",
629:       "com.google.common.collect.LinkedListMultimap$Node",
630:       "com.google.common.collect.ListMultimap",
631:       "com.google.javascript.rhino.JSDocInfo$Visibility",
632:       "com.google.javascript.rhino.head.ast.DestructuringForm",
633:       "com.google.javascript.jscomp.SourceMap$Format$4",
634:       "com.google.javascript.jscomp.SourceMap$Format$3",
635:       "com.google.javascript.jscomp.SourceMap$Format$2",
636:       "com.google.javascript.jscomp.SourceMap$Format$1",
637:       "com.google.javascript.jscomp.SourceAst",
638:       "com.google.common.base.Predicates$ObjectPredicate",
639:       "com.google.javascript.rhino.jstype.TernaryValue$1",
640:       "com.google.common.collect.RegularImmutableList",
641:       "com.google.javascript.jscomp.MessageBundle",
642:       "com.google.javascript.rhino.jstype.TernaryValue$3",
643:       "com.google.javascript.rhino.jstype.TernaryValue$2",
644:       "com.google.javascript.jscomp.CheckUnreachableCode",
645:       "com.google.javascript.jscomp.SourceExcerptProvider",
646:       "com.google.common.collect.Lists$TransformingRandomAccessList",
647:       "com.google.javascript.rhino.head.ScriptableObject$RelinkedSlot",
648:       "com.google.javascript.jscomp.ReferenceCollectingCallback$Behavior",
649:       "com.google.javascript.rhino.Node$PropListItem",
650:       "com.google.common.collect.RegularImmutableMap$KeySet",
651:       "com.google.common.collect.Maps$KeySet",
652:       "com.google.javascript.rhino.Node",
653:       "com.google.javascript.rhino.head.RhinoException",
654:       "com.google.javascript.rhino.head.ast.EmptyExpression",
655:       "com.google.javascript.rhino.SourcePosition",
656:       "com.google.javascript.rhino.head.ast.XmlLiteral",
657:       "com.google.javascript.rhino.head.ast.ContinueStatement",
658:       "com.google.javascript.jscomp.LoggerErrorManager",
659:       "com.google.javascript.jscomp.ComposeWarningsGuard",
660:       "com.google.javascript.jscomp.NodeTraversal",
661:       "com.google.javascript.rhino.head.ErrorReporter",
662:       "com.google.javascript.jscomp.NodeTraversal$AbstractScopedCallback",
663:       "com.google.common.collect.Multisets",
664:       "com.google.javascript.jscomp.VariableMap",
665:       "com.google.javascript.jscomp.JsAst",
666:       "com.google.javascript.rhino.head.ast.XmlMemberGet",
667:       "com.google.javascript.jscomp.ErrorFormat",
668:       "com.google.javascript.rhino.head.ast.Scope",
669:       "com.google.javascript.jscomp.AbstractCompiler$LifeCycleStage",
670:       "com.google.javascript.jscomp.ConcreteType",
671:       "com.google.javascript.rhino.head.Scriptable",
672:       "com.google.javascript.jscomp.JqueryCodingConvention",
673:       "com.google.common.io.ByteStreams",
674:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
675:       "com.google.javascript.jscomp.NodeUtil$BooleanResultPredicate",
676:       "com.google.javascript.jscomp.SourceMap$1",
677:       "com.google.javascript.jscomp.TightenTypes",
678:       "com.google.javascript.rhino.jstype.VoidType",
679:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler",
680:       "com.google.javascript.rhino.jstype.JSType",
681:       "com.google.common.io.ByteProcessor",
682:       "com.google.javascript.jscomp.ControlFlowGraph$Branch",
683:       "com.google.common.collect.Sets$SetView",
684:       "com.google.common.collect.ImmutableSet$Builder",
685:       "com.google.javascript.jscomp.SyntheticAst",
686:       "com.google.javascript.jscomp.DiagnosticGroups",
687:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
688:       "com.google.javascript.jscomp.ScopeCreator",
689:       "com.google.common.collect.RegularImmutableMap$TerminalEntry",
690:       "com.google.common.base.Predicates",
691:       "com.google.javascript.jscomp.graph.AdjacencyGraph",
692:       "com.google.javascript.jscomp.deps.SortedDependencies$CircularDependencyException",
693:       "com.google.common.collect.Lists$TransformingSequentialList",
694:       "com.google.javascript.rhino.head.NativeNumber",
695:       "com.google.javascript.jscomp.SourceFile",
696:       "com.google.javascript.rhino.head.ast.BreakStatement",
697:       "com.google.javascript.jscomp.PropertyRenamingPolicy",
698:       "com.google.javascript.jscomp.AstChangeProxy$ChangeListener",
699:       "com.google.javascript.rhino.jstype.FunctionBuilder",
700:       "com.google.javascript.jscomp.CodingConvention$DelegateRelationship",
701:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax$FoldArrayAction",
702:       "com.google.javascript.rhino.head.ast.WithStatement",
703:       "com.google.javascript.rhino.head.ScriptRuntime$MessageProvider",
704:       "com.google.common.collect.MapDifference",
705:       "com.google.javascript.jscomp.CompilerOptions$AliasTransformationHandler",
706:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
707:       "com.google.javascript.jscomp.SourceFile$Generated",
708:       "com.google.javascript.rhino.jstype.FunctionType",
709:       "com.google.javascript.rhino.head.ast.AstNode",
710:       "com.google.javascript.jscomp.Compiler",
711:       "com.google.javascript.jscomp.NodeTraversal$ScopedCallback",
712:       "com.google.javascript.jscomp.TypedScopeCreator",
713:       "com.google.common.base.CharMatcher$12",
714:       "com.google.common.base.CharMatcher$11",
715:       "com.google.javascript.rhino.head.Node",
716:       "com.google.common.base.CharMatcher$10",
717:       "com.google.javascript.rhino.jstype.TernaryValue",
718:       "com.google.common.io.Files$1",
719:       "com.google.javascript.jscomp.JSError",
720:       "com.google.common.base.CharMatcher$15",
721:       "com.google.common.base.CharMatcher$14",
722:       "com.google.common.collect.Lists$RandomAccessListWrapper",
723:       "com.google.common.base.CharMatcher$13",
724:       "com.google.common.base.Platform",
725:       "com.google.javascript.jscomp.TypedScopeCreator$GlobalScopeBuilder",
726:       "com.google.javascript.jscomp.PeepholeFoldWithTypes",
727:       "com.google.javascript.rhino.head.ast.KeywordLiteral",
728:       "com.google.javascript.jscomp.NodeTraversal$AbstractShallowCallback",
729:       "com.google.common.collect.TreeMultimap",
730:       "com.google.javascript.rhino.head.ast.Assignment",
731:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
732:       "com.google.javascript.rhino.jstype.UnionType",
733:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
734:       "com.google.javascript.rhino.head.ast.LabeledStatement",
735:       "com.google.javascript.jscomp.ControlFlowAnalysis",
736:       "com.google.javascript.jscomp.graph.LatticeElement",
737:       "com.google.common.collect.AbstractIndexedListIterator",
738:       "com.google.javascript.rhino.head.ast.XmlExpression",
739:       "com.google.javascript.jscomp.JSModuleGraph",
740:       "com.google.common.collect.AbstractMultimap$SortedKeySet",
741:       "com.google.javascript.jscomp.SyntacticScopeCreator$DefaultRedeclarationHandler",
742:       "com.google.common.collect.Sets",
743:       "com.google.common.collect.ImmutableCollection$EmptyImmutableCollection",
744:       "com.google.javascript.jscomp.TypedScopeCreator$LocalScopeBuilder",
745:       "com.google.javascript.rhino.head.Kit",
746:       "com.google.javascript.jscomp.BasicErrorManager$LeveledJSErrorComparator",
747:       "com.google.javascript.rhino.Node$ObjectPropListItem",
748:       "com.google.javascript.rhino.head.jdk15.VMBridge_jdk15",
749:       "com.google.javascript.rhino.head.ContextAction",
750:       "com.google.javascript.rhino.head.EvaluatorException",
751:       "com.google.javascript.jscomp.ProcessCommonJSModules",
752:       "com.google.javascript.rhino.head.ast.NumberLiteral",
753:       "com.google.common.collect.AbstractMultimap$SortedAsMap",
754:       "com.google.javascript.jscomp.Compiler$IntermediateState",
755:       "com.google.javascript.jscomp.AstChangeProxy",
756:       "com.google.javascript.jscomp.SymbolTable$2",
757:       "com.google.javascript.rhino.head.ast.ErrorNode",
758:       "com.google.common.collect.EmptyImmutableMap",
759:       "com.google.javascript.jscomp.SymbolTable$3",
760:       "com.google.javascript.jscomp.SymbolTable$4",
761:       "com.google.common.collect.Multimap",
762:       "com.google.javascript.jscomp.SourceMap$DetailLevel$2",
763:       "com.google.javascript.jscomp.SourceMap$DetailLevel$1",
764:       "com.google.javascript.jscomp.VarCheck",
765:       "com.google.javascript.jscomp.CompilerOptions$DevMode",
766:       "com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder",
767:       "com.google.javascript.rhino.head.Interpreter",
768:       "com.google.javascript.rhino.jstype.StringType",
769:       "com.google.javascript.rhino.head.ImporterTopLevel",
770:       "com.google.javascript.rhino.jstype.StaticSymbolTable",
771:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
772:       "com.google.javascript.jscomp.JSModuleGraph$ModuleDependenceException",
773:       "com.google.javascript.jscomp.graph.DiGraph",
774:       "com.google.common.base.Platform$1",
775:       "com.google.javascript.jscomp.parsing.ParserRunner",
776:       "com.google.common.collect.RegularImmutableMap$EntrySet",
777:       "com.google.javascript.rhino.head.ast.GeneratorExpression",
778:       "com.google.javascript.rhino.head.ast.XmlDotQuery",
779:       "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement",
780:       "com.google.javascript.jscomp.ConstCheck",
781:       "com.google.javascript.rhino.jstype.Visitor",
782:       "com.google.javascript.jscomp.TypeCheck",
783:       "com.google.javascript.jscomp.SymbolTable",
784:       "com.google.javascript.jscomp.deps.DependencyInfo",
785:       "com.google.javascript.jscomp.Compiler$10",
786:       "com.google.javascript.jscomp.WarningsGuard$Priority",
787:       "com.google.javascript.rhino.head.ContextFactory$GlobalSetter",
788:       "com.google.common.base.CharMatcher$Or",
789:       "com.google.javascript.rhino.head.ast.NodeVisitor",
790:       "com.google.protobuf.Message",
791:       "com.google.javascript.rhino.head.ast.ArrayComprehensionLoop",
792:       "com.google.javascript.rhino.head.Parser$ParserException",
793:       "com.google.common.collect.Table",
794:       "com.google.javascript.rhino.head.NativeObject"
795:     );
796:   } 
797: 
798:   private static void resetClasses() {
799:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NodeUtil_157_tmp__ESTest_scaffolding.class.getClassLoader()); 
800: 
801:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
802:       "com.google.common.collect.ImmutableCollection$EmptyImmutableCollection",
803:       "com.google.common.collect.ImmutableCollection",
804:       "com.google.common.collect.ImmutableSet",
805:       "com.google.common.collect.Hashing",
806:       "com.google.common.collect.ImmutableSet$ArrayImmutableSet",
807:       "com.google.common.collect.RegularImmutableSet",
808:       "com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate",
809:       "com.google.javascript.jscomp.NodeUtil$BooleanResultPredicate",
810:       "com.google.javascript.jscomp.NodeUtil$MayBeStringResultPredicate",
811:       "com.google.javascript.jscomp.NodeUtil$MatchNotFunction",
812:       "com.google.javascript.jscomp.NodeUtil",
813:       "com.google.javascript.jscomp.NodeUtil$MatchNodeType",
814:       "com.google.javascript.jscomp.NodeUtil$MatchNameNode",
815:       "com.google.javascript.jscomp.NodeUtil$VarCollector",
816:       "com.google.javascript.rhino.jstype.TernaryValue",
817:       "com.google.common.base.Predicates$ObjectPredicate",
818:       "com.google.javascript.rhino.TokenStream",
819:       "com.google.javascript.jscomp.AbstractPeepholeOptimization",
820:       "com.google.javascript.jscomp.PeepholeFoldWithTypes",
821:       "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments",
822:       "com.google.javascript.jscomp.CodingConventions$Proxy",
823:       "com.google.javascript.jscomp.GoogleCodingConvention",
824:       "com.google.javascript.jscomp.DiagnosticType",
825:       "com.google.javascript.jscomp.ClosureCodingConvention",
826:       "com.google.javascript.jscomp.CodingConventions",
827:       "com.google.javascript.jscomp.CodingConventions$DefaultCodingConvention",
828:       "com.google.common.collect.Sets",
829:       "com.google.common.base.Joiner",
830:       "com.google.common.base.Preconditions",
831:       "com.google.common.collect.Collections2",
832:       "com.google.common.base.Joiner$MapJoiner",
833:       "com.google.common.collect.Maps",
834:       "com.google.common.collect.ImmutableList",
835:       "com.google.common.collect.UnmodifiableIterator",
836:       "com.google.common.collect.UnmodifiableListIterator",
837:       "com.google.common.collect.EmptyImmutableList$1",
838:       "com.google.common.collect.EmptyImmutableList",
839:       "com.google.common.collect.Iterators$1",
840:       "com.google.common.collect.Iterators$2",
841:       "com.google.common.collect.Iterators",
842:       "com.google.javascript.jscomp.SourceFile",
843:       "com.google.javascript.jscomp.JSSourceFile",
844:       "com.google.javascript.jscomp.SourceFile$Builder",
845:       "com.google.common.base.Charsets",
846:       "com.google.javascript.jscomp.SourceFile$OnDisk",
847:       "com.google.javascript.jscomp.JsAst",
848:       "com.google.javascript.rhino.InputId",
849:       "com.google.common.io.Files",
850:       "com.google.common.io.Files$1",
851:       "com.google.common.io.ByteStreams",
852:       "com.google.javascript.jscomp.AbstractCompiler",
853:       "com.google.javascript.jscomp.JSError",
854:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax$1",
855:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
856:       "com.google.javascript.jscomp.Compiler",
857:       "com.google.javascript.jscomp.RhinoErrorReporter",
858:       "com.google.javascript.jscomp.RhinoErrorReporter$OldRhinoErrorReporter",
859:       "com.google.javascript.rhino.head.Kit",
860:       "com.google.javascript.rhino.head.optimizer.Codegen",
861:       "com.google.javascript.rhino.head.Icode",
862:       "com.google.javascript.rhino.head.Interpreter",
863:       "com.google.javascript.rhino.head.Context",
864:       "com.google.javascript.rhino.head.ContextFactory",
865:       "com.google.javascript.rhino.head.ScriptableObject",
866:       "com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider",
867:       "com.google.javascript.rhino.head.ScriptRuntime",
868:       "com.google.javascript.rhino.head.jdk13.VMBridge_jdk13",
869:       "com.google.javascript.rhino.head.jdk15.VMBridge_jdk15",
870:       "com.google.javascript.rhino.head.VMBridge",
871:       "com.google.javascript.rhino.ScriptRuntime",
872:       "com.google.common.collect.ImmutableMap",
873:       "com.google.common.collect.RegularImmutableMap",
874:       "com.google.common.collect.AbstractMapEntry",
875:       "com.google.common.collect.ImmutableEntry",
876:       "com.google.common.collect.RegularImmutableMap$TerminalEntry",
877:       "com.google.javascript.jscomp.RhinoErrorReporter$NewRhinoErrorReporter",
878:       "com.google.javascript.jscomp.PassFactory",
879:       "com.google.javascript.jscomp.Compiler$3",
880:       "com.google.javascript.jscomp.CodeChangeHandler$RecentChange",
881:       "com.google.common.collect.Lists",
882:       "com.google.javascript.jscomp.NodeTraversal",
883:       "com.google.javascript.jscomp.SyntacticScopeCreator",
884:       "com.google.javascript.jscomp.SyntacticScopeCreator$DefaultRedeclarationHandler",
885:       "com.google.javascript.rhino.SimpleErrorReporter",
886:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
887:       "com.google.common.collect.AbstractMultimap",
888:       "com.google.common.collect.AbstractSetMultimap",
889:       "com.google.common.collect.LinkedHashMultimap",
890:       "com.google.common.collect.AbstractListMultimap",
891:       "com.google.common.collect.ArrayListMultimap",
892:       "com.google.javascript.rhino.jstype.JSTypeRegistry$ResolveMode",
893:       "com.google.javascript.rhino.jstype.JSTypeNative",
894:       "com.google.javascript.rhino.jstype.JSType$1",
895:       "com.google.javascript.rhino.jstype.JSType",
896:       "com.google.javascript.rhino.jstype.ValueType",
897:       "com.google.javascript.rhino.jstype.BooleanType",
898:       "com.google.javascript.rhino.jstype.NullType",
899:       "com.google.javascript.rhino.jstype.NumberType",
900:       "com.google.javascript.rhino.jstype.StringType",
901:       "com.google.javascript.rhino.jstype.ObjectType",
902:       "com.google.javascript.rhino.jstype.UnknownType",
903:       "com.google.javascript.rhino.jstype.VoidType",
904:       "com.google.javascript.rhino.jstype.AllType",
905:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
906:       "com.google.javascript.rhino.jstype.FunctionType",
907:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
908:       "com.google.javascript.rhino.Node",
909:       "com.google.javascript.rhino.Node$StringNode",
910:       "com.google.javascript.rhino.Node$AbstractPropListItem",
911:       "com.google.javascript.rhino.Node$IntPropListItem",
912:       "com.google.javascript.rhino.jstype.ArrowType",
913:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
914:       "com.google.javascript.rhino.jstype.InstanceObjectType",
915:       "com.google.javascript.rhino.jstype.ObjectType$Property",
916:       "com.google.javascript.rhino.jstype.NoObjectType",
917:       "com.google.javascript.rhino.jstype.NoType",
918:       "com.google.javascript.rhino.jstype.NoResolvedType",
919:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
920:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
921:       "com.google.javascript.rhino.jstype.UnionType",
922:       "com.google.common.collect.RegularImmutableList",
923:       "com.google.javascript.rhino.jstype.FunctionBuilder",
924:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
925:       "com.google.javascript.jscomp.SymbolTable",
926:       "com.google.javascript.rhino.Token",
927:       "com.google.javascript.jscomp.TightenTypes",
928:       "com.google.javascript.rhino.Node$NumberNode",
929:       "com.google.javascript.rhino.IR",
930:       "com.google.javascript.rhino.Node$SideEffectFlags",
931:       "com.google.javascript.jscomp.ExploitAssigns",
932:       "com.google.javascript.jscomp.Compiler$IntermediateState",
933:       "com.google.javascript.jscomp.PassConfig",
934:       "com.google.javascript.jscomp.DefaultPassConfig",
935:       "com.google.javascript.jscomp.CrossModuleMethodMotion$IdGenerator",
936:       "com.google.javascript.jscomp.DefaultPassConfig$HotSwapPassFactory",
937:       "com.google.javascript.jscomp.DefaultPassConfig$1",
938:       "com.google.javascript.jscomp.DefaultPassConfig$2",
939:       "com.google.javascript.jscomp.DefaultPassConfig$3",
940:       "com.google.javascript.jscomp.DefaultPassConfig$4",
941:       "com.google.javascript.jscomp.DefaultPassConfig$5",
942:       "com.google.javascript.jscomp.DefaultPassConfig$6",
943:       "com.google.javascript.jscomp.DefaultPassConfig$7",
944:       "com.google.javascript.jscomp.DefaultPassConfig$8",
945:       "com.google.javascript.jscomp.DefaultPassConfig$9",
946:       "com.google.javascript.jscomp.DefaultPassConfig$10",
947:       "com.google.javascript.jscomp.DefaultPassConfig$11",
948:       "com.google.javascript.jscomp.DefaultPassConfig$12",
949:       "com.google.javascript.jscomp.DefaultPassConfig$13",
950:       "com.google.javascript.jscomp.DefaultPassConfig$14",
951:       "com.google.javascript.jscomp.DefaultPassConfig$15",
952:       "com.google.javascript.jscomp.DefaultPassConfig$16",
953:       "com.google.javascript.jscomp.DefaultPassConfig$17",
954:       "com.google.javascript.jscomp.DefaultPassConfig$18",
955:       "com.google.javascript.jscomp.DefaultPassConfig$19",
956:       "com.google.javascript.jscomp.DefaultPassConfig$20",
957:       "com.google.javascript.jscomp.DefaultPassConfig$21",
958:       "com.google.javascript.jscomp.DefaultPassConfig$22",
959:       "com.google.javascript.jscomp.DefaultPassConfig$23",
960:       "com.google.javascript.jscomp.DefaultPassConfig$24",
961:       "com.google.javascript.jscomp.DefaultPassConfig$25",
962:       "com.google.javascript.jscomp.DefaultPassConfig$26",
963:       "com.google.javascript.jscomp.DefaultPassConfig$27",
964:       "com.google.javascript.jscomp.DefaultPassConfig$28",
965:       "com.google.javascript.jscomp.DefaultPassConfig$29",
966:       "com.google.javascript.jscomp.DefaultPassConfig$30",
967:       "com.google.javascript.jscomp.DefaultPassConfig$31",
968:       "com.google.javascript.jscomp.DefaultPassConfig$32",
969:       "com.google.javascript.jscomp.DefaultPassConfig$33",
970:       "com.google.javascript.jscomp.DefaultPassConfig$34",
971:       "com.google.javascript.jscomp.DefaultPassConfig$35",
972:       "com.google.javascript.jscomp.DefaultPassConfig$36",
973:       "com.google.javascript.jscomp.DefaultPassConfig$37",
974:       "com.google.javascript.jscomp.DefaultPassConfig$38",
975:       "com.google.javascript.jscomp.DefaultPassConfig$39",
976:       "com.google.javascript.jscomp.DefaultPassConfig$40",
977:       "com.google.javascript.jscomp.DefaultPassConfig$41",
978:       "com.google.javascript.jscomp.DefaultPassConfig$42",
979:       "com.google.javascript.jscomp.DefaultPassConfig$43",
980:       "com.google.javascript.jscomp.DefaultPassConfig$44",
981:       "com.google.javascript.jscomp.DefaultPassConfig$45",
982:       "com.google.javascript.jscomp.DefaultPassConfig$46",
983:       "com.google.javascript.jscomp.DefaultPassConfig$47",
984:       "com.google.javascript.jscomp.DefaultPassConfig$48",
985:       "com.google.javascript.jscomp.DefaultPassConfig$49",
986:       "com.google.javascript.jscomp.DefaultPassConfig$50",
987:       "com.google.javascript.jscomp.DefaultPassConfig$51",
988:       "com.google.javascript.jscomp.DefaultPassConfig$52",
989:       "com.google.javascript.jscomp.DefaultPassConfig$53",
990:       "com.google.javascript.jscomp.DefaultPassConfig$54",
991:       "com.google.javascript.jscomp.DefaultPassConfig$55",
992:       "com.google.javascript.jscomp.DefaultPassConfig$56",
993:       "com.google.javascript.jscomp.DefaultPassConfig$57",
994:       "com.google.javascript.jscomp.DefaultPassConfig$58",
995:       "com.google.javascript.jscomp.DefaultPassConfig$59",
996:       "com.google.javascript.jscomp.DefaultPassConfig$60",
997:       "com.google.javascript.jscomp.DefaultPassConfig$61",
998:       "com.google.javascript.jscomp.DefaultPassConfig$62",
999:       "com.google.javascript.jscomp.DefaultPassConfig$63",
1000:       "com.google.javascript.jscomp.DefaultPassConfig$64",
1001:       "com.google.javascript.jscomp.DefaultPassConfig$65",
1002:       "com.google.javascript.jscomp.DefaultPassConfig$66",
1003:       "com.google.javascript.jscomp.DefaultPassConfig$67",
1004:       "com.google.javascript.jscomp.DefaultPassConfig$68",
1005:       "com.google.javascript.jscomp.DefaultPassConfig$69",
1006:       "com.google.javascript.jscomp.DefaultPassConfig$70",
1007:       "com.google.javascript.jscomp.DefaultPassConfig$71",
1008:       "com.google.javascript.jscomp.DefaultPassConfig$72",
1009:       "com.google.javascript.jscomp.DefaultPassConfig$73",
1010:       "com.google.javascript.jscomp.DefaultPassConfig$74",
1011:       "com.google.javascript.jscomp.DefaultPassConfig$75",
1012:       "com.google.javascript.jscomp.DefaultPassConfig$76",
1013:       "com.google.javascript.jscomp.DefaultPassConfig$77",
1014:       "com.google.javascript.jscomp.DefaultPassConfig$78",
1015:       "com.google.javascript.jscomp.DefaultPassConfig$79",
1016:       "com.google.javascript.jscomp.DefaultPassConfig$80",
1017:       "com.google.javascript.jscomp.DefaultPassConfig$81",
1018:       "com.google.javascript.jscomp.DefaultPassConfig$82",
1019:       "com.google.javascript.jscomp.DefaultPassConfig$83",
1020:       "com.google.javascript.jscomp.DefaultPassConfig$84",
1021:       "com.google.javascript.jscomp.DefaultPassConfig$85",
1022:       "com.google.javascript.jscomp.DefaultPassConfig$86",
1023:       "com.google.javascript.jscomp.DefaultPassConfig$87",
1024:       "com.google.javascript.jscomp.DefaultPassConfig$88",
1025:       "com.google.javascript.jscomp.DefaultPassConfig$89",
1026:       "com.google.javascript.jscomp.DefaultPassConfig$90",
1027:       "com.google.javascript.jscomp.DefaultPassConfig$91",
1028:       "com.google.javascript.jscomp.DefaultPassConfig$92",
1029:       "com.google.javascript.jscomp.DefaultPassConfig$93",
1030:       "com.google.javascript.jscomp.DefaultPassConfig$94",
1031:       "com.google.javascript.jscomp.DefaultPassConfig$98",
1032:       "com.google.javascript.jscomp.DefaultPassConfig$99",
1033:       "com.google.javascript.jscomp.PassConfig$State",
1034:       "com.google.javascript.jscomp.StatementFusion",
1035:       "com.google.common.io.CharStreams",
1036:       "com.google.javascript.jscomp.CompilerOptions$TracerMode",
1037:       "com.google.javascript.jscomp.ControlFlowAnalysis",
1038:       "com.google.javascript.jscomp.PeepholeReplaceKnownMethods",
1039:       "com.google.javascript.jscomp.MethodCompilerPass",
1040:       "com.google.javascript.jscomp.InlineSimpleMethods$1",
1041:       "com.google.javascript.jscomp.InlineSimpleMethods",
1042:       "com.google.javascript.jscomp.NodeTraversal$AbstractPostOrderCallback",
1043:       "com.google.javascript.jscomp.InvocationsCallback",
1044:       "com.google.javascript.jscomp.InlineSimpleMethods$InlineTrivialAccessors",
1045:       "com.google.javascript.jscomp.PeepholeRemoveDeadCode",
1046:       "com.google.javascript.jscomp.Normalize$PropagateConstantAnnotationsOverVars",
1047:       "com.google.javascript.jscomp.NodeUtil$MatchDeclaration",
1048:       "com.google.javascript.jscomp.ReorderConstantExpression",
1049:       "com.google.javascript.jscomp.CreateSyntheticBlocks",
1050:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler$NullAliasTransformation",
1051:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler",
1052:       "com.google.javascript.jscomp.CompilerOptions",
1053:       "com.google.javascript.jscomp.DependencyOptions",
1054:       "com.google.javascript.jscomp.ProcessCommonJSModules",
1055:       "com.google.javascript.jscomp.WarningsGuard",
1056:       "com.google.javascript.jscomp.ComposeWarningsGuard",
1057:       "com.google.common.primitives.Ints",
1058:       "com.google.javascript.jscomp.ComposeWarningsGuard$GuardComparator",
1059:       "com.google.javascript.jscomp.SourceMap$DetailLevel",
1060:       "com.google.javascript.jscomp.SourceMap$Format",
1061:       "com.google.javascript.jscomp.CompilerOptions$LanguageMode",
1062:       "com.google.javascript.jscomp.CompilerOptions$DevMode",
1063:       "com.google.javascript.jscomp.VariableRenamingPolicy",
1064:       "com.google.javascript.jscomp.PropertyRenamingPolicy",
1065:       "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
1066:       "com.google.javascript.jscomp.CompilerOptions$TweakProcessing",
1067:       "com.google.javascript.jscomp.ErrorFormat",
1068:       "com.google.javascript.jscomp.JSModule",
1069:       "com.google.javascript.jscomp.BasicErrorManager",
1070:       "com.google.javascript.jscomp.LoggerErrorManager",
1071:       "com.google.javascript.jscomp.AbstractMessageFormatter",
1072:       "com.google.javascript.jscomp.LightweightMessageFormatter$LineNumberingFormatter",
1073:       "com.google.javascript.jscomp.LightweightMessageFormatter",
1074:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt",
1075:       "com.google.javascript.jscomp.BasicErrorManager$LeveledJSErrorComparator",
1076:       "com.google.javascript.jscomp.CheckGlobalThis",
1077:       "com.google.javascript.jscomp.DiagnosticGroup",
1078:       "com.google.common.collect.SingletonImmutableSet",
1079:       "com.google.javascript.jscomp.CheckAccessControls",
1080:       "com.google.common.collect.AbstractIndexedListIterator",
1081:       "com.google.common.collect.Iterators$11",
1082:       "com.google.javascript.jscomp.TypeValidator",
1083:       "com.google.javascript.jscomp.VarCheck",
1084:       "com.google.javascript.jscomp.CheckGlobalNames",
1085:       "com.google.javascript.jscomp.VariableReferenceCheck",
1086:       "com.google.javascript.jscomp.ProcessDefines",
1087:       "com.google.common.base.CharMatcher$11",
1088:       "com.google.common.base.CharMatcher$12",
1089:       "com.google.common.base.CharMatcher$Or",
1090:       "com.google.common.base.Platform$1",
1091:       "com.google.common.base.Platform",
1092:       "com.google.common.base.CharMatcher$LookupTable",
1093:       "com.google.common.base.CharMatcher$15",
1094:       "com.google.common.base.CharMatcher$8",
1095:       "com.google.common.base.CharMatcher$1",
1096:       "com.google.common.base.CharMatcher$2",
1097:       "com.google.common.base.CharMatcher$3",
1098:       "com.google.common.base.CharMatcher$4",
1099:       "com.google.common.base.CharMatcher$5",
1100:       "com.google.common.base.CharMatcher$6",
1101:       "com.google.common.base.CharMatcher$7",
1102:       "com.google.common.base.CharMatcher",
1103:       "com.google.javascript.jscomp.ProcessTweaks$TweakFunction",
1104:       "com.google.javascript.jscomp.ProcessTweaks",
1105:       "com.google.javascript.jscomp.TypedScopeCreator",
1106:       "com.google.javascript.jscomp.FunctionTypeBuilder",
1107:       "com.google.javascript.jscomp.TypeCheck",
1108:       "com.google.javascript.jscomp.CheckDebuggerStatement",
1109:       "com.google.javascript.jscomp.CheckRegExp",
1110:       "com.google.javascript.jscomp.CheckSideEffects",
1111:       "com.google.javascript.jscomp.CheckUnreachableCode",
1112:       "com.google.javascript.jscomp.ConstCheck",
1113:       "com.google.javascript.jscomp.DisambiguateProperties$Warnings",
1114:       "com.google.javascript.jscomp.ControlStructureCheck",
1115:       "com.google.javascript.jscomp.StrictModeCheck",
1116:       "com.google.javascript.jscomp.CheckProvides",
1117:       "com.google.javascript.jscomp.JsMessageVisitor",
1118:       "com.google.javascript.jscomp.DiagnosticGroups",
1119:       "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
1120:       "com.google.javascript.jscomp.WarningsGuard$Priority",
1121:       "com.google.javascript.jscomp.SuppressDocWarningsGuard",
1122:       "com.google.common.collect.RegularImmutableMap$NonTerminalEntry",
1123:       "com.google.common.collect.RegularImmutableMap$EntrySet",
1124:       "com.google.javascript.jscomp.SourceFile$Preloaded",
1125:       "com.google.javascript.jscomp.CompilerInput",
1126:       "com.google.javascript.jscomp.Compiler$1",
1127:       "com.google.javascript.jscomp.Compiler$2",
1128:       "com.google.javascript.jscomp.Tracer$1",
1129:       "com.google.javascript.jscomp.Tracer$Stat",
1130:       "com.google.javascript.jscomp.Tracer",
1131:       "com.google.javascript.jscomp.Tracer$ThreadTrace",
1132:       "com.google.javascript.jscomp.Normalize",
1133:       "com.google.javascript.jscomp.Compiler$10",
1134:       "com.google.javascript.jscomp.parsing.Config$LanguageMode",
1135:       "com.google.javascript.jscomp.parsing.ParserRunner",
1136:       "com.google.javascript.jscomp.parsing.Config",
1137:       "com.google.common.collect.ImmutableMap$Builder",
1138:       "com.google.javascript.jscomp.parsing.Annotation",
1139:       "com.google.javascript.rhino.head.DefaultErrorReporter",
1140:       "com.google.javascript.rhino.head.CompilerEnvirons",
1141:       "com.google.javascript.rhino.head.Parser",
1142:       "com.google.javascript.rhino.head.TokenStream",
1143:       "com.google.javascript.rhino.head.ObjToIntMap",
1144:       "com.google.javascript.rhino.head.Node",
1145:       "com.google.javascript.rhino.head.ast.AstNode",
1146:       "com.google.javascript.rhino.head.ast.Jump",
1147:       "com.google.javascript.rhino.head.ast.Scope",
1148:       "com.google.javascript.rhino.head.ast.ScriptNode",
1149:       "com.google.javascript.rhino.head.ast.AstRoot",
1150:       "com.google.javascript.jscomp.parsing.IRFactory",
1151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
1152:       "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
1153:       "com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher",
1154:       "com.google.javascript.rhino.Node$ObjectPropListItem",
1155:       "com.google.javascript.jscomp.parsing.IRFactory$1",
1156:       "com.google.javascript.rhino.head.Node$NodeIterator",
1157:       "com.google.javascript.jscomp.PrepareAst",
1158:       "com.google.javascript.jscomp.PrepareAst$PrepareAnnotations",
1159:       "com.google.javascript.jscomp.Normalize$NormalizeStatements",
1160:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
1161:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$ContextualRenamer",
1162:       "com.google.common.collect.AbstractMultiset",
1163:       "com.google.common.collect.AbstractMapBasedMultiset",
1164:       "com.google.common.collect.HashMultiset",
1165:       "com.google.common.collect.Multisets",
1166:       "com.google.common.collect.Multisets$EntrySet",
1167:       "com.google.common.collect.AbstractMultiset$EntrySet",
1168:       "com.google.common.collect.AbstractMapBasedMultiset$1",
1169:       "com.google.common.base.Predicates",
1170:       "com.google.javascript.rhino.head.ast.ExpressionStatement",
1171:       "com.google.javascript.jscomp.BasicErrorManager$ErrorWithLevel",
1172:       "com.google.javascript.rhino.head.Parser$ParserException",
1173:       "com.google.javascript.rhino.head.ast.EmptyStatement",
1174:       "com.google.javascript.rhino.head.RhinoException",
1175:       "com.google.javascript.rhino.head.EvaluatorException",
1176:       "com.google.javascript.jscomp.PeepholeSimplifyRegExp",
1177:       "com.google.javascript.jscomp.VerboseMessageFormatter",
1178:       "com.google.javascript.jscomp.JqueryCodingConvention",
1179:       "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement",
1180:       "com.google.javascript.jscomp.PrintStreamErrorManager",
1181:       "com.google.javascript.rhino.head.ast.NumberLiteral",
1182:       "com.google.javascript.jscomp.PeepholeFoldConstants",
1183:       "com.google.javascript.jscomp.ExpandJqueryAliases",
1184:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
1185:       "com.google.javascript.jscomp.FindExportableNodes",
1186:       "com.google.javascript.jscomp.ConvertToDottedProperties",
1187:       "com.google.javascript.rhino.Node$AncestorIterable",
1188:       "com.google.javascript.jscomp.SyntheticAst",
1189:       "com.google.javascript.jscomp.ControlFlowAnalysis$1",
1190:       "com.google.common.collect.HashMultimap",
1191:       "com.google.javascript.jscomp.PreprocessorSymbolTable",
1192:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
1193:       "com.google.javascript.jscomp.CleanupPasses",
1194:       "com.google.javascript.jscomp.CleanupPasses$1",
1195:       "com.google.javascript.jscomp.CleanupPasses$2",
1196:       "com.google.javascript.jscomp.CleanupPasses$3",
1197:       "com.google.javascript.jscomp.InferJSDocInfo",
1198:       "com.google.javascript.jscomp.TightenTypes$ConcreteScope",
1199:       "com.google.common.collect.AbstractSortedSetMultimap",
1200:       "com.google.common.collect.TreeMultimap",
1201:       "com.google.common.collect.Ordering",
1202:       "com.google.common.collect.NaturalOrdering",
1203:       "com.google.common.collect.Maps$KeySet",
1204:       "com.google.common.collect.AbstractMultimap$KeySet",
1205:       "com.google.common.collect.AbstractMultimap$SortedKeySet",
1206:       "com.google.common.collect.Multimaps$Entries",
1207:       "com.google.common.collect.Multimaps$EntrySet",
1208:       "com.google.common.collect.AbstractMultimap$3",
1209:       "com.google.common.collect.AbstractMultimap$EntryIterator",
1210:       "com.google.javascript.rhino.head.ast.Name",
1211:       "com.google.javascript.rhino.head.ast.InfixExpression",
1212:       "com.google.javascript.rhino.head.ast.PropertyGet",
1213:       "com.google.javascript.jscomp.SimpleDefinitionFinder",
1214:       "com.google.javascript.rhino.jstype.EnumType",
1215:       "com.google.javascript.rhino.jstype.EnumElementType",
1216:       "com.google.javascript.rhino.jstype.ModificationVisitor",
1217:       "com.google.javascript.rhino.Node$AncestorIterable$1",
1218:       "com.google.javascript.jscomp.DeadAssignmentsElimination$1",
1219:       "com.google.javascript.jscomp.DeadAssignmentsElimination",
1220:       "com.google.javascript.jscomp.ProcessClosurePrimitives",
1221:       "com.google.javascript.jscomp.ProcessClosurePrimitives$ProvidedName",
1222:       "com.google.javascript.jscomp.LinkedFlowScope",
1223:       "com.google.javascript.jscomp.LinkedFlowScope$FlatFlowScopeCache",
1224:       "com.google.common.collect.EmptyImmutableMap",
1225:       "com.google.javascript.jscomp.CheckMissingGetCssName",
1226:       "com.google.javascript.jscomp.Scope$1",
1227:       "com.google.javascript.jscomp.Scope",
1228:       "com.google.javascript.jscomp.Scope$Var",
1229:       "com.google.javascript.jscomp.Scope$Arguments",
1230:       "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback$CopySideEffectSubexpressions",
1231:       "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback",
1232:       "com.google.common.collect.ImmutableMultimap",
1233:       "com.google.common.collect.ImmutableListMultimap",
1234:       "com.google.common.collect.EmptyImmutableListMultimap",
1235:       "com.google.common.collect.LinkedListMultimap",
1236:       "com.google.common.collect.LinkedHashMultiset",
1237:       "com.google.javascript.jscomp.ReferenceCollectingCallback$1",
1238:       "com.google.javascript.jscomp.ReferenceCollectingCallback",
1239:       "com.google.javascript.jscomp.WhitelistWarningsGuard",
1240:       "com.google.common.io.LineReader",
1241:       "com.google.common.io.LineBuffer",
1242:       "com.google.common.io.LineReader$1",
1243:       "com.google.common.io.Closeables",
1244:       "com.google.common.collect.ImmutableSetMultimap",
1245:       "com.google.common.collect.EmptyImmutableSetMultimap",
1246:       "com.google.javascript.jscomp.Denormalize",
1247:       "com.google.javascript.jscomp.EmptyMessageBundle",
1248:       "com.google.javascript.jscomp.CheckSideEffects$StripProtection",
1249:       "com.google.javascript.rhino.head.ast.UnaryExpression",
1250:       "com.google.javascript.jscomp.FlowSensitiveInlineVariables$1",
1251:       "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
1252:       "com.google.javascript.jscomp.InlineProperties$PropertyInfo",
1253:       "com.google.javascript.jscomp.InlineProperties",
1254:       "com.google.javascript.rhino.jstype.SimpleSlot",
1255:       "com.google.javascript.jscomp.JSModuleGraph",
1256:       "com.google.javascript.rhino.JSDocInfo",
1257:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
1258:       "com.google.javascript.jscomp.RemoveUnusedClassProperties",
1259:       "com.google.javascript.rhino.jstype.ProxyObjectType",
1260:       "com.google.javascript.rhino.jstype.NamedType",
1261:       "com.google.javascript.jscomp.PassConfig$PassConfigDelegate",
1262:       "com.google.javascript.jscomp.NameAnalyzer$1",
1263:       "com.google.javascript.jscomp.NameAnalyzer",
1264:       "com.google.javascript.jscomp.LineNumberCheck",
1265:       "com.google.javascript.jscomp.SourceFile$Generated",
1266:       "com.google.common.collect.Multimaps$Values",
1267:       "com.google.common.collect.AbstractMultimap$2",
1268:       "com.google.javascript.jscomp.OptimizeArgumentsArray",
1269:       "com.google.javascript.jscomp.Normalize$VerifyConstants",
1270:       "com.google.javascript.jscomp.Compiler$6",
1271:       "com.google.javascript.jscomp.CodeChangeHandler$ForbiddenChange",
1272:       "com.google.javascript.jscomp.FunctionNames",
1273:       "com.google.javascript.jscomp.FunctionNames$FunctionListExtractor",
1274:       "com.google.javascript.jscomp.RecordFunctionInformation",
1275:       "com.google.protobuf.AbstractMessageLite",
1276:       "com.google.protobuf.AbstractMessage",
1277:       "com.google.protobuf.GeneratedMessage",
1278:       "com.google.protobuf.UnknownFieldSet",
1279:       "com.google.javascript.jscomp.FunctionInformationMap",
1280:       "com.google.protobuf.AbstractMessageLite$Builder",
1281:       "com.google.protobuf.AbstractMessage$Builder",
1282:       "com.google.protobuf.GeneratedMessage$Builder",
1283:       "com.google.javascript.jscomp.FunctionInformationMap$Builder",
1284:       "com.google.javascript.jscomp.VariableMap",
1285:       "com.google.common.io.ByteStreams$1",
1286:       "com.google.common.io.CharStreams$2",
1287:       "com.google.javascript.jscomp.ExternExportsPass",
1288:       "com.google.common.collect.SingletonImmutableList",
1289:       "com.google.javascript.jscomp.RenameLabels$DefaultNameSupplier",
1290:       "com.google.javascript.jscomp.NameGenerator",
1291:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$InlineRenamer",
1292:       "com.google.javascript.jscomp.graph.Graph",
1293:       "com.google.javascript.jscomp.graph.DiGraph",
1294:       "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
1295:       "com.google.javascript.jscomp.NameReferenceGraph",
1296:       "com.google.javascript.jscomp.NameReferenceGraph$Name",
1297:       "com.google.javascript.jscomp.MinimizeExitPoints",
1298:       "com.google.javascript.jscomp.ObjectPropertyStringPreprocess",
1299:       "com.google.javascript.jscomp.RemoveTryCatch",
1300:       "com.google.javascript.jscomp.RemoveTryCatch$RemoveTryCatchCode",
1301:       "com.google.javascript.jscomp.GlobalNamespace",
1302:       "com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace",
1303:       "com.google.javascript.jscomp.CheckAccidentalSemicolon",
1304:       "com.google.javascript.jscomp.Denormalize$StripConstantAnnotations",
1305:       "com.google.common.collect.ImmutableMultimap$Builder",
1306:       "com.google.common.collect.ImmutableSetMultimap$Builder",
1307:       "com.google.common.collect.ImmutableMultimap$BuilderMultimap",
1308:       "com.google.common.collect.ImmutableSetMultimap$BuilderMultimap",
1309:       "com.google.common.collect.AbstractMultimap$AsMap",
1310:       "com.google.common.collect.Maps$EntrySet",
1311:       "com.google.common.collect.AbstractMultimap$AsMap$AsMapEntries",
1312:       "com.google.common.collect.AbstractMultimap$AsMap$AsMapIterator",
1313:       "com.google.common.collect.AbstractMultimap$WrappedCollection",
1314:       "com.google.common.collect.AbstractMultimap$WrappedSet",
1315:       "com.google.common.collect.AbstractMultimap$WrappedCollection$WrappedIterator",
1316:       "com.google.javascript.jscomp.LinkedFlowScope$LinkedFlowSlot",
1317:       "com.google.common.collect.EmptyImmutableSet",
1318:       "com.google.javascript.rhino.Node$NodeMismatch",
1319:       "com.google.common.base.Predicates$OrPredicate",
1320:       "com.google.javascript.jscomp.Compiler$CodeBuilder",
1321:       "com.google.javascript.rhino.head.ast.Assignment",
1322:       "com.google.javascript.jscomp.SourceInformationAnnotator",
1323:       "com.google.javascript.rhino.head.ast.FunctionCall",
1324:       "com.google.javascript.rhino.head.Token",
1325:       "com.google.javascript.jscomp.CheckMissingReturn$1",
1326:       "com.google.javascript.jscomp.CheckMissingReturn$2",
1327:       "com.google.javascript.jscomp.CheckMissingReturn",
1328:       "com.google.javascript.jscomp.CombinedCompilerPass",
1329:       "com.google.common.collect.Iterators$13",
1330:       "com.google.common.collect.ForwardingObject",
1331:       "com.google.common.collect.ForwardingCollection",
1332:       "com.google.common.collect.ForwardingSet",
1333:       "com.google.common.collect.LinkedHashMultimap$SetDecorator",
1334:       "com.google.common.collect.LinkedHashMultimap$SetDecorator$1",
1335:       "com.google.common.collect.ImmutableListMultimap$Builder",
1336:       "com.google.javascript.jscomp.TypeInferencePass",
1337:       "com.google.javascript.jscomp.CoalesceVariableNames$1",
1338:       "com.google.javascript.jscomp.CoalesceVariableNames",
1339:       "com.google.javascript.rhino.jstype.ParameterizedType",
1340:       "com.google.javascript.jscomp.Compiler$4",
1341:       "com.google.javascript.jscomp.GlobalNamespace$Ref",
1342:       "com.google.javascript.jscomp.NodeTraversal$AbstractShallowCallback",
1343:       "com.google.javascript.jscomp.FieldCleanupPass$QualifiedNameSearchTraversal",
1344:       "com.google.javascript.jscomp.MoveFunctionDeclarations",
1345:       "com.google.javascript.jscomp.ReplaceIdGenerators",
1346:       "com.google.javascript.jscomp.AbstractMessageFormatter$1",
1347:       "com.google.javascript.jscomp.AbstractMessageFormatter$Color",
1348:       "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator",
1349:       "com.google.common.collect.LinkedListMultimap$3",
1350:       "com.google.common.collect.LinkedListMultimap$NodeIterator",
1351:       "com.google.common.collect.LinkedListMultimap$3$1",
1352:       "com.google.javascript.rhino.head.ast.ErrorNode",
1353:       "com.google.javascript.jscomp.GlobalNamespace$Name$Type",
1354:       "com.google.javascript.jscomp.NameReferenceGraph$Reference",
1355:       "com.google.javascript.jscomp.GatherRawExports",
1356:       "com.google.common.collect.AbstractMultimap$4",
1357:       "com.google.common.collect.Multimaps$Values$1",
1358:       "com.google.common.collect.AbstractMultimap$SortedAsMap",
1359:       "com.google.javascript.jscomp.RenameProperties$1",
1360:       "com.google.javascript.jscomp.RenameProperties",
1361:       "com.google.javascript.jscomp.LoggerErrorManager$1",
1362:       "com.google.javascript.jscomp.Compiler$8",
1363:       "com.google.common.collect.Iterators$12",
1364:       "com.google.javascript.jscomp.CodingConvention$AssertionFunctionSpec",
1365:       "com.google.javascript.jscomp.ClosureCodingConvention$AssertInstanceofSpec",
1366:       "com.google.javascript.jscomp.MethodCompilerPass$GetExternMethods",
1367:       "com.google.javascript.jscomp.MethodCompilerPass$GatherSignatures",
1368:       "com.google.javascript.jscomp.CustomPassExecutionTime",
1369:       "com.google.common.collect.AbstractIterator",
1370:       "com.google.common.collect.Iterators$7",
1371:       "com.google.common.collect.AbstractIterator$State",
1372:       "com.google.javascript.jscomp.XtbMessageBundle$SecureEntityResolver",
1373:       "com.google.javascript.jscomp.XtbMessageBundle",
1374:       "com.google.javascript.jscomp.GoogleJsMessageIdGenerator",
1375:       "com.google.javascript.jscomp.XtbMessageBundle$Handler",
1376:       "com.google.javascript.jscomp.Compiler$5",
1377:       "com.google.javascript.jscomp.AbstractCompiler$LifeCycleStage",
1378:       "com.google.common.collect.Count",
1379:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
1380:     );
1381:   }
1382: }

[MASTER] 19:11:06.074 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Compiler compiler0 = new Compiler();
assertNotNull(compiler0);
assertEquals(0.0, compiler0.getProgress(), 0.01);

PassConfig passConfig0 = compiler0.getPassConfig();
assertNotNull(passConfig0);
assertEquals(0.0, compiler0.getProgress(), 0.01);

SyntheticAst syntheticAst0 = new SyntheticAst("com.google.javascript.jscomp.RenameLabels");
assertNotNull(syntheticAst0);

Node node0 = syntheticAst0.getAstRoot(compiler0);
assertNotNull(node0);
assertEquals(0.0, compiler0.getProgress(), 0.01);
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertEquals((-1), node0.getSourceOffset());
assertTrue(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isFromExterns());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAnd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertEquals(132, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.LAST_PROP);

boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
assertEquals(0.0, compiler0.getProgress(), 0.01);
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertEquals((-1), node0.getSourceOffset());
assertTrue(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isFromExterns());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAnd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertEquals(132, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
assertTrue(boolean0);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.LAST_PROP);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertEquals(0.0, compiler0.getProgress(), 0.01);
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertEquals((-1), node0.getSourceOffset());
assertTrue(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isFromExterns());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isAnd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertEquals(132, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.LAST_PROP);

String string0 = NodeUtil.opToStr(30);
assertNull(string0);


[MASTER] 19:11:07.117 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_160_1566407466387/com/google/javascript/jscomp/NodeUtil_160_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_160_1566407466387/com/google/javascript/jscomp/NodeUtil_160_tmp__ESTest_scaffolding.java]]
[MASTER] 19:11:07.117 [logback-2] ERROR JUnitAnalyzer - Classpath: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/tools/evosuite.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/classes:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/args4j.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/guava.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/json.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/jsr305.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/protobuf-java.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/lib/rhino.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/ant.jar
[MASTER] 19:11:07.117 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/rq3/botsing-integration-experiment/tools/evosuite.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/classes:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/args4j.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/guava.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/json.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/jsr305.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/protobuf-java.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/lib/rhino.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/ant.jar
[MASTER] 19:11:07.118 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 270
[MASTER] 19:11:07.121 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_160_1566407466387/com/google/javascript/jscomp/NodeUtil_160_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Aug 21 17:11:06 GMT 2019
4:  */
5: 
6: package com.google.javascript.jscomp;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.jscomp.Compiler;
12: import com.google.javascript.jscomp.ControlFlowAnalysis;
13: import com.google.javascript.jscomp.NodeTraversal;
14: import com.google.javascript.jscomp.NodeUtil;
15: import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
16: import com.google.javascript.jscomp.SourceFile;
17: import com.google.javascript.jscomp.SyntheticAst;
18: import com.google.javascript.rhino.Node;
19: import com.google.javascript.rhino.SimpleErrorReporter;
20: import org.evosuite.runtime.EvoRunner;
21: import org.evosuite.runtime.EvoRunnerParameters;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
25: public class NodeUtil_160_tmp__ESTest extends NodeUtil_160_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
30:       assertNotNull(peepholeSubstituteAlternateSyntax0);
31:       
32:       Compiler compiler0 = new Compiler();
33:       assertNotNull(compiler0);
34:       assertEquals(0.0, compiler0.getProgress(), 0.01);
35:       
36:       NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
37:       assertNotNull(nodeTraversal0);
38:       assertEquals(0.0, compiler0.getProgress(), 0.01);
39:       assertEquals(0, nodeTraversal0.getLineNumber());
40:       assertEquals("", nodeTraversal0.getSourceName());
41:       
42:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
43:       assertNotNull(simpleErrorReporter0);
44:       
45:       SyntheticAst syntheticAst0 = new SyntheticAst("com.google.javascript.jscomp.RenameLabels");
46:       assertNotNull(syntheticAst0);
47:       
48:       Node node0 = syntheticAst0.getAstRoot(compiler0);
49:       assertNotNull(node0);
50:       assertEquals(0.0, compiler0.getProgress(), 0.01);
51:       assertFalse(node0.isObjectLit());
52:       assertFalse(node0.isInstanceOf());
53:       assertFalse(node0.isAnd());
54:       assertFalse(node0.isNot());
55:       assertFalse(node0.isWith());
56:       assertFalse(node0.isThis());
57:       assertFalse(node0.isGetProp());
58:       assertFalse(node0.hasOneChild());
59:       assertFalse(node0.isAssign());
60:       assertFalse(node0.hasChildren());
61:       assertFalse(node0.isDec());
62:       assertFalse(node0.isHook());
63:       assertFalse(node0.isComma());
64:       assertFalse(node0.isExprResult());
65:       assertFalse(node0.isTypeOf());
66:       assertEquals(132, node0.getType());
67:       assertEquals((-1), node0.getLineno());
68:       assertFalse(node0.isGetElem());
69:       assertFalse(node0.isBreak());
70:       assertFalse(node0.hasMoreThanOneChild());
71:       assertFalse(node0.isOr());
72:       assertFalse(node0.isLabel());
73:       assertFalse(node0.isNumber());
74:       assertFalse(node0.isAssignAdd());
75:       assertFalse(node0.isDo());
76:       assertEquals((-1), node0.getSourceOffset());
77:       assertFalse(node0.isEmpty());
78:       assertFalse(node0.isAdd());
79:       assertFalse(node0.isNew());
80:       assertFalse(node0.isCase());
81:       assertFalse(node0.isVar());
82:       assertFalse(node0.isStringKey());
83:       assertFalse(node0.isGetterDef());
84:       assertEquals((-1), node0.getCharno());
85:       assertFalse(node0.isSwitch());
86:       assertFalse(node0.isParamList());
87:       assertFalse(node0.isLabelName());
88:       assertFalse(node0.isArrayLit());
89:       assertFalse(node0.isCatch());
90:       assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
91:       assertEquals(0, node0.getChildCount());
92:       assertFalse(node0.isSetterDef());
93:       assertFalse(node0.isDefaultCase());
94:       assertFalse(node0.isTry());
95:       assertFalse(node0.isCall());
96:       assertTrue(node0.isScript());
97:       assertFalse(node0.isBlock());
98:       assertFalse(node0.isFor());
99:       assertFalse(node0.isNE());
100:       assertFalse(node0.isTrue());
101:       assertFalse(node0.isVoid());
102:       assertFalse(node0.isNull());
103:       assertFalse(node0.isRegExp());
104:       assertFalse(node0.isIf());
105:       assertFalse(node0.isDelProp());
106:       assertFalse(node0.isName());
107:       assertFalse(node0.isIn());
108:       assertFalse(node0.isContinue());
109:       assertFalse(node0.isReturn());
110:       assertFalse(node0.isInc());
111:       assertFalse(node0.isFromExterns());
112:       assertFalse(node0.isString());
113:       assertFalse(node0.isWhile());
114:       assertFalse(node0.isFalse());
115:       assertFalse(node0.isThrow());
116:       assertEquals((-1), node0.getSourcePosition());
117:       assertFalse(node0.isDebugger());
118:       assertFalse(node0.isFunction());
119:       assertEquals(15, Node.NO_SIDE_EFFECTS);
120:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
121:       assertEquals(54, Node.SLASH_V);
122:       assertEquals(30, Node.VAR_ARGS_NAME);
123:       assertEquals(52, Node.LENGTH);
124:       assertEquals(41, Node.BRACELESS_TYPE);
125:       assertEquals(51, Node.STATIC_SOURCE_FILE);
126:       assertEquals(40, Node.ORIGINALNAME_PROP);
127:       assertEquals(46, Node.IS_NAMESPACE);
128:       assertEquals(49, Node.DIRECT_EVAL);
129:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
130:       assertEquals(37, Node.OPT_ARG_NAME);
131:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
132:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
133:       assertEquals(50, Node.FREE_CALL);
134:       assertEquals(12, Node.COLUMN_BITS);
135:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
136:       assertEquals(1, Node.DECR_FLAG);
137:       assertEquals(32, Node.INCRDECR_PROP);
138:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
139:       assertEquals(43, Node.IS_CONSTANT_NAME);
140:       assertEquals(36, Node.QUOTED_PROP);
141:       assertEquals(35, Node.PARENTHESIZED_PROP);
142:       assertEquals(16, Node.SOURCENAME_PROP);
143:       assertEquals(54, Node.LAST_PROP);
144:       assertEquals(53, Node.INPUT_ID);
145:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
146:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
147:       assertEquals(4095, Node.COLUMN_MASK);
148:       assertEquals(48, Node.DIRECTIVES);
149:       assertEquals(2, Node.POST_FLAG);
150:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
151:       assertEquals(8, Node.FLAG_NO_THROWS);
152:       assertEquals(39, Node.EMPTY_BLOCK);
153:       assertEquals(47, Node.IS_DISPATCHER);
154:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
155:       assertEquals(29, Node.JSDOC_INFO_PROP);
156:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
157:       
158:       boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
159:       assertEquals(0.0, compiler0.getProgress(), 0.01);
160:       assertFalse(node0.isObjectLit());
161:       assertFalse(node0.isInstanceOf());
162:       assertFalse(node0.isAnd());
163:       assertFalse(node0.isNot());
164:       assertFalse(node0.isWith());
165:       assertFalse(node0.isThis());
166:       assertFalse(node0.isGetProp());
167:       assertFalse(node0.hasOneChild());
168:       assertFalse(node0.isAssign());
169:       assertFalse(node0.hasChildren());
170:       assertFalse(node0.isDec());
171:       assertFalse(node0.isHook());
172:       assertFalse(node0.isComma());
173:       assertFalse(node0.isExprResult());
174:       assertFalse(node0.isTypeOf());
175:       assertEquals(132, node0.getType());
176:       assertEquals((-1), node0.getLineno());
177:       assertFalse(node0.isGetElem());
178:       assertFalse(node0.isBreak());
179:       assertFalse(node0.hasMoreThanOneChild());
180:       assertFalse(node0.isOr());
181:       assertFalse(node0.isLabel());
182:       assertFalse(node0.isNumber());
183:       assertFalse(node0.isAssignAdd());
184:       assertFalse(node0.isDo());
185:       assertEquals((-1), node0.getSourceOffset());
186:       assertFalse(node0.isEmpty());
187:       assertFalse(node0.isAdd());
188:       assertFalse(node0.isNew());
189:       assertFalse(node0.isCase());
190:       assertFalse(node0.isVar());
191:       assertFalse(node0.isStringKey());
192:       assertFalse(node0.isGetterDef());
193:       assertEquals((-1), node0.getCharno());
194:       assertFalse(node0.isSwitch());
195:       assertFalse(node0.isParamList());
196:       assertFalse(node0.isLabelName());
197:       assertFalse(node0.isArrayLit());
198:       assertFalse(node0.isCatch());
199:       assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
200:       assertEquals(0, node0.getChildCount());
201:       assertFalse(node0.isSetterDef());
202:       assertFalse(node0.isDefaultCase());
203:       assertFalse(node0.isTry());
204:       assertFalse(node0.isCall());
205:       assertTrue(node0.isScript());
206:       assertFalse(node0.isBlock());
207:       assertFalse(node0.isFor());
208:       assertFalse(node0.isNE());
209:       assertFalse(node0.isTrue());
210:       assertFalse(node0.isVoid());
211:       assertFalse(node0.isNull());
212:       assertFalse(node0.isRegExp());
213:       assertFalse(node0.isIf());
214:       assertFalse(node0.isDelProp());
215:       assertFalse(node0.isName());
216:       assertFalse(node0.isIn());
217:       assertFalse(node0.isContinue());
218:       assertFalse(node0.isReturn());
219:       assertFalse(node0.isInc());
220:       assertFalse(node0.isFromExterns());
221:       assertFalse(node0.isString());
222:       assertFalse(node0.isWhile());
223:       assertFalse(node0.isFalse());
224:       assertFalse(node0.isThrow());
225:       assertEquals((-1), node0.getSourcePosition());
226:       assertFalse(node0.isDebugger());
227:       assertFalse(node0.isFunction());
228:       assertTrue(boolean0);
229:       assertEquals(15, Node.NO_SIDE_EFFECTS);
230:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
231:       assertEquals(54, Node.SLASH_V);
232:       assertEquals(30, Node.VAR_ARGS_NAME);
233:       assertEquals(52, Node.LENGTH);
234:       assertEquals(41, Node.BRACELESS_TYPE);
235:       assertEquals(51, Node.STATIC_SOURCE_FILE);
236:       assertEquals(40, Node.ORIGINALNAME_PROP);
237:       assertEquals(46, Node.IS_NAMESPACE);
238:       assertEquals(49, Node.DIRECT_EVAL);
239:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
240:       assertEquals(37, Node.OPT_ARG_NAME);
241:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
242:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
243:       assertEquals(50, Node.FREE_CALL);
244:       assertEquals(12, Node.COLUMN_BITS);
245:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
246:       assertEquals(1, Node.DECR_FLAG);
247:       assertEquals(32, Node.INCRDECR_PROP);
248:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
249:       assertEquals(43, Node.IS_CONSTANT_NAME);
250:       assertEquals(36, Node.QUOTED_PROP);
251:       assertEquals(35, Node.PARENTHESIZED_PROP);
252:       assertEquals(16, Node.SOURCENAME_PROP);
253:       assertEquals(54, Node.LAST_PROP);
254:       assertEquals(53, Node.INPUT_ID);
255:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
256:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
257:       assertEquals(4095, Node.COLUMN_MASK);
258:       assertEquals(48, Node.DIRECTIVES);
259:       assertEquals(2, Node.POST_FLAG);
260:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
261:       assertEquals(8, Node.FLAG_NO_THROWS);
262:       assertEquals(39, Node.EMPTY_BLOCK);
263:       assertEquals(47, Node.IS_DISPATCHER);
264:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
265:       assertEquals(29, Node.JSDOC_INFO_PROP);
266:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
267:       
268:       Iterable<Node> iterable0 = node0.children();
269:       assertNotNull(iterable0);
270:       assertFalse(iterable0.contains(node0));
271:       assertEquals(0.0, compiler0.getProgress(), 0.01);
272:       assertFalse(node0.isObjectLit());
273:       assertFalse(node0.isInstanceOf());
274:       assertFalse(node0.isAnd());
275:       assertFalse(node0.isNot());
276:       assertFalse(node0.isWith());
277:       assertFalse(node0.isThis());
278:       assertFalse(node0.isGetProp());
279:       assertFalse(node0.hasOneChild());
280:       assertFalse(node0.isAssign());
281:       assertFalse(node0.hasChildren());
282:       assertFalse(node0.isDec());
283:       assertFalse(node0.isHook());
284:       assertFalse(node0.isComma());
285:       assertFalse(node0.isExprResult());
286:       assertFalse(node0.isTypeOf());
287:       assertEquals(132, node0.getType());
288:       assertEquals((-1), node0.getLineno());
289:       assertFalse(node0.isGetElem());
290:       assertFalse(node0.isBreak());
291:       assertFalse(node0.hasMoreThanOneChild());
292:       assertFalse(node0.isOr());
293:       assertFalse(node0.isLabel());
294:       assertFalse(node0.isNumber());
295:       assertFalse(node0.isAssignAdd());
296:       assertFalse(node0.isDo());
297:       assertEquals((-1), node0.getSourceOffset());
298:       assertFalse(node0.isEmpty());
299:       assertFalse(node0.isAdd());
300:       assertFalse(node0.isNew());
301:       assertFalse(node0.isCase());
302:       assertFalse(node0.isVar());
303:       assertFalse(node0.isStringKey());
304:       assertFalse(node0.isGetterDef());
305:       assertEquals((-1), node0.getCharno());
306:       assertFalse(node0.isSwitch());
307:       assertFalse(node0.isParamList());
308:       assertFalse(node0.isLabelName());
309:       assertFalse(node0.isArrayLit());
310:       assertFalse(node0.isCatch());
311:       assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
312:       assertEquals(0, node0.getChildCount());
313:       assertFalse(node0.isSetterDef());
314:       assertFalse(node0.isDefaultCase());
315:       assertFalse(node0.isTry());
316:       assertFalse(node0.isCall());
317:       assertTrue(node0.isScript());
318:       assertFalse(node0.isBlock());
319:       assertFalse(node0.isFor());
320:       assertFalse(node0.isNE());
321:       assertFalse(node0.isTrue());
322:       assertFalse(node0.isVoid());
323:       assertFalse(node0.isNull());
324:       assertFalse(node0.isRegExp());
325:       assertFalse(node0.isIf());
326:       assertFalse(node0.isDelProp());
327:       assertFalse(node0.isName());
328:       assertFalse(node0.isIn());
329:       assertFalse(node0.isContinue());
330:       assertFalse(node0.isReturn());
331:       assertFalse(node0.isInc());
332:       assertFalse(node0.isFromExterns());
333:       assertFalse(node0.isString());
334:       assertFalse(node0.isWhile());
335:       assertFalse(node0.isFalse());
336:       assertFalse(node0.isThrow());
337:       assertEquals((-1), node0.getSourcePosition());
338:       assertFalse(node0.isDebugger());
339:       assertFalse(node0.isFunction());
340:       assertEquals(15, Node.NO_SIDE_EFFECTS);
341:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
342:       assertEquals(54, Node.SLASH_V);
343:       assertEquals(30, Node.VAR_ARGS_NAME);
344:       assertEquals(52, Node.LENGTH);
345:       assertEquals(41, Node.BRACELESS_TYPE);
346:       assertEquals(51, Node.STATIC_SOURCE_FILE);
347:       assertEquals(40, Node.ORIGINALNAME_PROP);
348:       assertEquals(46, Node.IS_NAMESPACE);
349:       assertEquals(49, Node.DIRECT_EVAL);
350:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
351:       assertEquals(37, Node.OPT_ARG_NAME);
352:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
353:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
354:       assertEquals(50, Node.FREE_CALL);
355:       assertEquals(12, Node.COLUMN_BITS);
356:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
357:       assertEquals(1, Node.DECR_FLAG);
358:       assertEquals(32, Node.INCRDECR_PROP);
359:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
360:       assertEquals(43, Node.IS_CONSTANT_NAME);
361:       assertEquals(36, Node.QUOTED_PROP);
362:       assertEquals(35, Node.PARENTHESIZED_PROP);
363:       assertEquals(16, Node.SOURCENAME_PROP);
364:       assertEquals(54, Node.LAST_PROP);
365:       assertEquals(53, Node.INPUT_ID);
366:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
367:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
368:       assertEquals(4095, Node.COLUMN_MASK);
369:       assertEquals(48, Node.DIRECTIVES);
370:       assertEquals(2, Node.POST_FLAG);
371:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
372:       assertEquals(8, Node.FLAG_NO_THROWS);
373:       assertEquals(39, Node.EMPTY_BLOCK);
374:       assertEquals(47, Node.IS_DISPATCHER);
375:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
376:       assertEquals(29, Node.JSDOC_INFO_PROP);
377:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
378:       
379:       boolean boolean1 = NodeUtil.containsFunction(node0);
380:       assertFalse(boolean1 == boolean0);
381:       assertEquals(0.0, compiler0.getProgress(), 0.01);
382:       assertFalse(node0.isObjectLit());
383:       assertFalse(node0.isInstanceOf());
384:       assertFalse(node0.isAnd());
385:       assertFalse(node0.isNot());
386:       assertFalse(node0.isWith());
387:       assertFalse(node0.isThis());
388:       assertFalse(node0.isGetProp());
389:       assertFalse(node0.hasOneChild());
390:       assertFalse(node0.isAssign());
391:       assertFalse(node0.hasChildren());
392:       assertFalse(node0.isDec());
393:       assertFalse(node0.isHook());
394:       assertFalse(node0.isComma());
395:       assertFalse(node0.isExprResult());
396:       assertFalse(node0.isTypeOf());
397:       assertEquals(132, node0.getType());
398:       assertEquals((-1), node0.getLineno());
399:       assertFalse(node0.isGetElem());
400:       assertFalse(node0.isBreak());
401:       assertFalse(node0.hasMoreThanOneChild());
402:       assertFalse(node0.isOr());
403:       assertFalse(node0.isLabel());
404:       assertFalse(node0.isNumber());
405:       assertFalse(node0.isAssignAdd());
406:       assertFalse(node0.isDo());
407:       assertEquals((-1), node0.getSourceOffset());
408:       assertFalse(node0.isEmpty());
409:       assertFalse(node0.isAdd());
410:       assertFalse(node0.isNew());
411:       assertFalse(node0.isCase());
412:       assertFalse(node0.isVar());
413:       assertFalse(node0.isStringKey());
414:       assertFalse(node0.isGetterDef());
415:       assertEquals((-1), node0.getCharno());
416:       assertFalse(node0.isSwitch());
417:       assertFalse(node0.isParamList());
418:       assertFalse(node0.isLabelName());
419:       assertFalse(node0.isArrayLit());
420:       assertFalse(node0.isCatch());
421:       assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
422:       assertEquals(0, node0.getChildCount());
423:       assertFalse(node0.isSetterDef());
424:       assertFalse(node0.isDefaultCase());
425:       assertFalse(node0.isTry());
426:       assertFalse(node0.isCall());
427:       assertTrue(node0.isScript());
428:       assertFalse(node0.isBlock());
429:       assertFalse(node0.isFor());
430:       assertFalse(node0.isNE());
431:       assertFalse(node0.isTrue());
432:       assertFalse(node0.isVoid());
433:       assertFalse(node0.isNull());
434:       assertFalse(node0.isRegExp());
435:       assertFalse(node0.isIf());
436:       assertFalse(node0.isDelProp());
437:       assertFalse(node0.isName());
438:       assertFalse(node0.isIn());
439:       assertFalse(node0.isContinue());
440:       assertFalse(node0.isReturn());
441:       assertFalse(node0.isInc());
442:       assertFalse(node0.isFromExterns());
443:       assertFalse(node0.isString());
444:       assertFalse(node0.isWhile());
445:       assertFalse(node0.isFalse());
446:       assertFalse(node0.isThrow());
447:       assertEquals((-1), node0.getSourcePosition());
448:       assertFalse(node0.isDebugger());
449:       assertFalse(node0.isFunction());
450:       assertFalse(boolean1);
451:       assertEquals(15, Node.NO_SIDE_EFFECTS);
452:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
453:       assertEquals(54, Node.SLASH_V);
454:       assertEquals(30, Node.VAR_ARGS_NAME);
455:       assertEquals(52, Node.LENGTH);
456:       assertEquals(41, Node.BRACELESS_TYPE);
457:       assertEquals(51, Node.STATIC_SOURCE_FILE);
458:       assertEquals(40, Node.ORIGINALNAME_PROP);
459:       assertEquals(46, Node.IS_NAMESPACE);
460:       assertEquals(49, Node.DIRECT_EVAL);
461:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
462:       assertEquals(37, Node.OPT_ARG_NAME);
463:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
464:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
465:       assertEquals(50, Node.FREE_CALL);
466:       assertEquals(12, Node.COLUMN_BITS);
467:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
468:       assertEquals(1, Node.DECR_FLAG);
469:       assertEquals(32, Node.INCRDECR_PROP);
470:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
471:       assertEquals(43, Node.IS_CONSTANT_NAME);
472:       assertEquals(36, Node.QUOTED_PROP);
473:       assertEquals(35, Node.PARENTHESIZED_PROP);
474:       assertEquals(16, Node.SOURCENAME_PROP);
475:       assertEquals(54, Node.LAST_PROP);
476:       assertEquals(53, Node.INPUT_ID);
477:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
478:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
479:       assertEquals(4095, Node.COLUMN_MASK);
480:       assertEquals(48, Node.DIRECTIVES);
481:       assertEquals(2, Node.POST_FLAG);
482:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
483:       assertEquals(8, Node.FLAG_NO_THROWS);
484:       assertEquals(39, Node.EMPTY_BLOCK);
485:       assertEquals(47, Node.IS_DISPATCHER);
486:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
487:       assertEquals(29, Node.JSDOC_INFO_PROP);
488:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
489:       
490:       NodeUtil.getImpureBooleanValue(node0);
491:       assertEquals(0.0, compiler0.getProgress(), 0.01);
492:       assertFalse(node0.isObjectLit());
493:       assertFalse(node0.isInstanceOf());
494:       assertFalse(node0.isAnd());
495:       assertFalse(node0.isNot());
496:       assertFalse(node0.isWith());
497:       assertFalse(node0.isThis());
498:       assertFalse(node0.isGetProp());
499:       assertFalse(node0.hasOneChild());
500:       assertFalse(node0.isAssign());
501:       assertFalse(node0.hasChildren());
502:       assertFalse(node0.isDec());
503:       assertFalse(node0.isHook());
504:       assertFalse(node0.isComma());
505:       assertFalse(node0.isExprResult());
506:       assertFalse(node0.isTypeOf());
507:       assertEquals(132, node0.getType());
508:       assertEquals((-1), node0.getLineno());
509:       assertFalse(node0.isGetElem());
510:       assertFalse(node0.isBreak());
511:       assertFalse(node0.hasMoreThanOneChild());
512:       assertFalse(node0.isOr());
513:       assertFalse(node0.isLabel());
514:       assertFalse(node0.isNumber());
515:       assertFalse(node0.isAssignAdd());
516:       assertFalse(node0.isDo());
517:       assertEquals((-1), node0.getSourceOffset());
518:       assertFalse(node0.isEmpty());
519:       assertFalse(node0.isAdd());
520:       assertFalse(node0.isNew());
521:       assertFalse(node0.isCase());
522:       assertFalse(node0.isVar());
523:       assertFalse(node0.isStringKey());
524:       assertFalse(node0.isGetterDef());
525:       assertEquals((-1), node0.getCharno());
526:       assertFalse(node0.isSwitch());
527:       assertFalse(node0.isParamList());
528:       assertFalse(node0.isLabelName());
529:       assertFalse(node0.isArrayLit());
530:       assertFalse(node0.isCatch());
531:       assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
532:       assertEquals(0, node0.getChildCount());
533:       assertFalse(node0.isSetterDef());
534:       assertFalse(node0.isDefaultCase());
535:       assertFalse(node0.isTry());
536:       assertFalse(node0.isCall());
537:       assertTrue(node0.isScript());
538:       assertFalse(node0.isBlock());
539:       assertFalse(node0.isFor());
540:       assertFalse(node0.isNE());
541:       assertFalse(node0.isTrue());
542:       assertFalse(node0.isVoid());
543:       assertFalse(node0.isNull());
544:       assertFalse(node0.isRegExp());
545:       assertFalse(node0.isIf());
546:       assertFalse(node0.isDelProp());
547:       assertFalse(node0.isName());
548:       assertFalse(node0.isIn());
549:       assertFalse(node0.isContinue());
550:       assertFalse(node0.isReturn());
551:       assertFalse(node0.isInc());
552:       assertFalse(node0.isFromExterns());
553:       assertFalse(node0.isString());
554:       assertFalse(node0.isWhile());
555:       assertFalse(node0.isFalse());
556:       assertFalse(node0.isThrow());
557:       assertEquals((-1), node0.getSourcePosition());
558:       assertFalse(node0.isDebugger());
559:       assertFalse(node0.isFunction());
560:       assertEquals(15, Node.NO_SIDE_EFFECTS);
561:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
562:       assertEquals(54, Node.SLASH_V);
563:       assertEquals(30, Node.VAR_ARGS_NAME);
564:       assertEquals(52, Node.LENGTH);
565:       assertEquals(41, Node.BRACELESS_TYPE);
566:       assertEquals(51, Node.STATIC_SOURCE_FILE);
567:       assertEquals(40, Node.ORIGINALNAME_PROP);
568:       assertEquals(46, Node.IS_NAMESPACE);
569:       assertEquals(49, Node.DIRECT_EVAL);
570:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
571:       assertEquals(37, Node.OPT_ARG_NAME);
572:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
573:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
574:       assertEquals(50, Node.FREE_CALL);
575:       assertEquals(12, Node.COLUMN_BITS);
576:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
577:       assertEquals(1, Node.DECR_FLAG);
578:       assertEquals(32, Node.INCRDECR_PROP);
579:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
580:       assertEquals(43, Node.IS_CONSTANT_NAME);
581:       assertEquals(36, Node.QUOTED_PROP);
582:       assertEquals(35, Node.PARENTHESIZED_PROP);
583:       assertEquals(16, Node.SOURCENAME_PROP);
584:       assertEquals(54, Node.LAST_PROP);
585:       assertEquals(53, Node.INPUT_ID);
586:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
587:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
588:       assertEquals(4095, Node.COLUMN_MASK);
589:       assertEquals(48, Node.DIRECTIVES);
590:       assertEquals(2, Node.POST_FLAG);
591:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
592:       assertEquals(8, Node.FLAG_NO_THROWS);
593:       assertEquals(39, Node.EMPTY_BLOCK);
594:       assertEquals(47, Node.IS_DISPATCHER);
595:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
596:       assertEquals(29, Node.JSDOC_INFO_PROP);
597:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
598:       
599:       boolean boolean2 = NodeUtil.isPrototypeProperty(node0);
600:       assertTrue(boolean2 == boolean1);
601:       assertFalse(boolean2 == boolean0);
602:       assertEquals(0.0, compiler0.getProgress(), 0.01);
603:       assertFalse(node0.isObjectLit());
604:       assertFalse(node0.isInstanceOf());
605:       assertFalse(node0.isAnd());
606:       assertFalse(node0.isNot());
607:       assertFalse(node0.isWith());
608:       assertFalse(node0.isThis());
609:       assertFalse(node0.isGetProp());
610:       assertFalse(node0.hasOneChild());
611:       assertFalse(node0.isAssign());
612:       assertFalse(node0.hasChildren());
613:       assertFalse(node0.isDec());
614:       assertFalse(node0.isHook());
615:       assertFalse(node0.isComma());
616:       assertFalse(node0.isExprResult());
617:       assertFalse(node0.isTypeOf());
618:       assertEquals(132, node0.getType());
619:       assertEquals((-1), node0.getLineno());
620:       assertFalse(node0.isGetElem());
621:       assertFalse(node0.isBreak());
622:       assertFalse(node0.hasMoreThanOneChild());
623:       assertFalse(node0.isOr());
624:       assertFalse(node0.isLabel());
625:       assertFalse(node0.isNumber());
626:       assertFalse(node0.isAssignAdd());
627:       assertFalse(node0.isDo());
628:       assertEquals((-1), node0.getSourceOffset());
629:       assertFalse(node0.isEmpty());
630:       assertFalse(node0.isAdd());
631:       assertFalse(node0.isNew());
632:       assertFalse(node0.isCase());
633:       assertFalse(node0.isVar());
634:       assertFalse(node0.isStringKey());
635:       assertFalse(node0.isGetterDef());
636:       assertEquals((-1), node0.getCharno());
637:       assertFalse(node0.isSwitch());
638:       assertFalse(node0.isParamList());
639:       assertFalse(node0.isLabelName());
640:       assertFalse(node0.isArrayLit());
641:       assertFalse(node0.isCatch());
642:       assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
643:       assertEquals(0, node0.getChildCount());
644:       assertFalse(node0.isSetterDef());
645:       assertFalse(node0.isDefaultCase());
646:       assertFalse(node0.isTry());
647:       assertFalse(node0.isCall());
648:       assertTrue(node0.isScript());
649:       assertFalse(node0.isBlock());
650:       assertFalse(node0.isFor());
651:       assertFalse(node0.isNE());
652:       assertFalse(node0.isTrue());
653:       assertFalse(node0.isVoid());
654:       assertFalse(node0.isNull());
655:       assertFalse(node0.isRegExp());
656:       assertFalse(node0.isIf());
657:       assertFalse(node0.isDelProp());
658:       assertFalse(node0.isName());
659:       assertFalse(node0.isIn());
660:       assertFalse(node0.isContinue());
661:       assertFalse(node0.isReturn());
662:       assertFalse(node0.isInc());
663:       assertFalse(node0.isFromExterns());
664:       assertFalse(node0.isString());
665:       assertFalse(node0.isWhile());
666:       assertFalse(node0.isFalse());
667:       assertFalse(node0.isThrow());
668:       assertEquals((-1), node0.getSourcePosition());
669:       assertFalse(node0.isDebugger());
670:       assertFalse(node0.isFunction());
671:       assertFalse(boolean2);
672:       assertEquals(15, Node.NO_SIDE_EFFECTS);
673:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
674:       assertEquals(54, Node.SLASH_V);
675:       assertEquals(30, Node.VAR_ARGS_NAME);
676:       assertEquals(52, Node.LENGTH);
677:       assertEquals(41, Node.BRACELESS_TYPE);
678:       assertEquals(51, Node.STATIC_SOURCE_FILE);
679:       assertEquals(40, Node.ORIGINALNAME_PROP);
680:       assertEquals(46, Node.IS_NAMESPACE);
681:       assertEquals(49, Node.DIRECT_EVAL);
682:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
683:       assertEquals(37, Node.OPT_ARG_NAME);
684:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
685:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
686:       assertEquals(50, Node.FREE_CALL);
687:       assertEquals(12, Node.COLUMN_BITS);
688:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
689:       assertEquals(1, Node.DECR_FLAG);
690:       assertEquals(32, Node.INCRDECR_PROP);
691:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
692:       assertEquals(43, Node.IS_CONSTANT_NAME);
693:       assertEquals(36, Node.QUOTED_PROP);
694:       assertEquals(35, Node.PARENTHESIZED_PROP);
695:       assertEquals(16, Node.SOURCENAME_PROP);
696:       assertEquals(54, Node.LAST_PROP);
697:       assertEquals(53, Node.INPUT_ID);
698:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
699:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
700:       assertEquals(4095, Node.COLUMN_MASK);
701:       assertEquals(48, Node.DIRECTIVES);
702:       assertEquals(2, Node.POST_FLAG);
703:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
704:       assertEquals(8, Node.FLAG_NO_THROWS);
705:       assertEquals(39, Node.EMPTY_BLOCK);
706:       assertEquals(47, Node.IS_DISPATCHER);
707:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
708:       assertEquals(29, Node.JSDOC_INFO_PROP);
709:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
710:       
711:       boolean boolean3 = NodeUtil.isSymmetricOperation(node0);
712:       assertTrue(boolean3 == boolean1);
713:       assertTrue(boolean3 == boolean2);
714:       assertFalse(boolean3 == boolean0);
715:       assertEquals(0.0, compiler0.getProgress(), 0.01);
716:       assertFalse(node0.isObjectLit());
717:       assertFalse(node0.isInstanceOf());
718:       assertFalse(node0.isAnd());
719:       assertFalse(node0.isNot());
720:       assertFalse(node0.isWith());
721:       assertFalse(node0.isThis());
722:       assertFalse(node0.isGetProp());
723:       assertFalse(node0.hasOneChild());
724:       assertFalse(node0.isAssign());
725:       assertFalse(node0.hasChildren());
726:       assertFalse(node0.isDec());
727:       assertFalse(node0.isHook());
728:       assertFalse(node0.isComma());
729:       assertFalse(node0.isExprResult());
730:       assertFalse(node0.isTypeOf());
731:       assertEquals(132, node0.getType());
732:       assertEquals((-1), node0.getLineno());
733:       assertFalse(node0.isGetElem());
734:       assertFalse(node0.isBreak());
735:       assertFalse(node0.hasMoreThanOneChild());
736:       assertFalse(node0.isOr());
737:       assertFalse(node0.isLabel());
738:       assertFalse(node0.isNumber());
739:       assertFalse(node0.isAssignAdd());
740:       assertFalse(node0.isDo());
741:       assertEquals((-1), node0.getSourceOffset());
742:       assertFalse(node0.isEmpty());
743:       assertFalse(node0.isAdd());
744:       assertFalse(node0.isNew());
745:       assertFalse(node0.isCase());
746:       assertFalse(node0.isVar());
747:       assertFalse(node0.isStringKey());
748:       assertFalse(node0.isGetterDef());
749:       assertEquals((-1), node0.getCharno());
750:       assertFalse(node0.isSwitch());
751:       assertFalse(node0.isParamList());
752:       assertFalse(node0.isLabelName());
753:       assertFalse(node0.isArrayLit());
754:       assertFalse(node0.isCatch());
755:       assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
756:       assertEquals(0, node0.getChildCount());
757:       assertFalse(node0.isSetterDef());
758:       assertFalse(node0.isDefaultCase());
759:       assertFalse(node0.isTry());
760:       assertFalse(node0.isCall());
761:       assertTrue(node0.isScript());
762:       assertFalse(node0.isBlock());
763:       assertFalse(node0.isFor());
764:       assertFalse(node0.isNE());
765:       assertFalse(node0.isTrue());
766:       assertFalse(node0.isVoid());
767:       assertFalse(node0.isNull());
768:       assertFalse(node0.isRegExp());
769:       assertFalse(node0.isIf());
770:       assertFalse(node0.isDelProp());
771:       assertFalse(node0.isName());
772:       assertFalse(node0.isIn());
773:       assertFalse(node0.isContinue());
774:       assertFalse(node0.isReturn());
775:       assertFalse(node0.isInc());
776:       assertFalse(node0.isFromExterns());
777:       assertFalse(node0.isString());
778:       assertFalse(node0.isWhile());
779:       assertFalse(node0.isFalse());
780:       assertFalse(node0.isThrow());
781:       assertEquals((-1), node0.getSourcePosition());
782:       assertFalse(node0.isDebugger());
783:       assertFalse(node0.isFunction());
784:       assertFalse(boolean3);
785:       assertEquals(15, Node.NO_SIDE_EFFECTS);
786:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
787:       assertEquals(54, Node.SLASH_V);
788:       assertEquals(30, Node.VAR_ARGS_NAME);
789:       assertEquals(52, Node.LENGTH);
790:       assertEquals(41, Node.BRACELESS_TYPE);
791:       assertEquals(51, Node.STATIC_SOURCE_FILE);
792:       assertEquals(40, Node.ORIGINALNAME_PROP);
793:       assertEquals(46, Node.IS_NAMESPACE);
794:       assertEquals(49, Node.DIRECT_EVAL);
795:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
796:       assertEquals(37, Node.OPT_ARG_NAME);
797:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
798:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
799:       assertEquals(50, Node.FREE_CALL);
800:       assertEquals(12, Node.COLUMN_BITS);
801:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
802:       assertEquals(1, Node.DECR_FLAG);
803:       assertEquals(32, Node.INCRDECR_PROP);
804:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
805:       assertEquals(43, Node.IS_CONSTANT_NAME);
806:       assertEquals(36, Node.QUOTED_PROP);
807:       assertEquals(35, Node.PARENTHESIZED_PROP);
808:       assertEquals(16, Node.SOURCENAME_PROP);
809:       assertEquals(54, Node.LAST_PROP);
810:       assertEquals(53, Node.INPUT_ID);
811:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
812:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
813:       assertEquals(4095, Node.COLUMN_MASK);
814:       assertEquals(48, Node.DIRECTIVES);
815:       assertEquals(2, Node.POST_FLAG);
816:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
817:       assertEquals(8, Node.FLAG_NO_THROWS);
818:       assertEquals(39, Node.EMPTY_BLOCK);
819:       assertEquals(47, Node.IS_DISPATCHER);
820:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
821:       assertEquals(29, Node.JSDOC_INFO_PROP);
822:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
823:       
824:       Node node1 = new Node(43, node0, node0, node0, 40, (-1462));
825:       assertNotNull(node1);
826:       assertFalse(node1.equals((Object)node0));
827:       assertEquals(0.0, compiler0.getProgress(), 0.01);
828:       assertFalse(node0.isObjectLit());
829:       assertFalse(node0.isInstanceOf());
830:       assertFalse(node0.isAnd());
831:       assertFalse(node0.isNot());
832:       assertFalse(node0.isWith());
833:       assertFalse(node0.isThis());
834:       assertFalse(node0.isGetProp());
835:       assertFalse(node0.hasOneChild());
836:       assertFalse(node0.isAssign());
837:       assertFalse(node0.hasChildren());
838:       assertFalse(node0.isDec());
839:       assertFalse(node0.isHook());
840:       assertFalse(node0.isComma());
841:       assertFalse(node0.isExprResult());
842:       assertFalse(node0.isTypeOf());
843:       assertEquals(132, node0.getType());
844:       assertEquals((-1), node0.getLineno());
845:       assertFalse(node0.isGetElem());
846:       assertFalse(node0.isBreak());
847:       assertFalse(node0.hasMoreThanOneChild());
848:       assertFalse(node0.isOr());
849:       assertFalse(node0.isLabel());
850:       assertFalse(node0.isNumber());
851:       assertFalse(node0.isAssignAdd());
852:       assertFalse(node0.isDo());
853:       assertEquals((-1), node0.getSourceOffset());
854:       assertFalse(node0.isEmpty());
855:       assertFalse(node0.isAdd());
856:       assertFalse(node0.isNew());
857:       assertFalse(node0.isCase());
858:       assertFalse(node0.isVar());
859:       assertFalse(node0.isStringKey());
860:       assertFalse(node0.isGetterDef());
861:       assertEquals((-1), node0.getCharno());
862:       assertFalse(node0.isSwitch());
863:       assertFalse(node0.isParamList());
864:       assertFalse(node0.isLabelName());
865:       assertFalse(node0.isArrayLit());
866:       assertFalse(node0.isCatch());
867:       assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
868:       assertEquals(0, node0.getChildCount());
869:       assertFalse(node0.isSetterDef());
870:       assertFalse(node0.isDefaultCase());
871:       assertFalse(node0.isTry());
872:       assertFalse(node0.isCall());
873:       assertTrue(node0.isScript());
874:       assertFalse(node0.isBlock());
875:       assertFalse(node0.isFor());
876:       assertFalse(node0.isNE());
877:       assertFalse(node0.isTrue());
878:       assertFalse(node0.isVoid());
879:       assertFalse(node0.isNull());
880:       assertFalse(node0.isRegExp());
881:       assertFalse(node0.isIf());
882:       assertFalse(node0.isDelProp());
883:       assertFalse(node0.isName());
884:       assertFalse(node0.isIn());
885:       assertFalse(node0.isContinue());
886:       assertFalse(node0.isReturn());
887:       assertFalse(node0.isInc());
888:       assertFalse(node0.isFromExterns());
889:       assertFalse(node0.isString());
890:       assertFalse(node0.isWhile());
891:       assertFalse(node0.isFalse());
892:       assertFalse(node0.isThrow());
893:       assertEquals((-1), node0.getSourcePosition());
894:       assertFalse(node0.isDebugger());
895:       assertFalse(node0.isFunction());
896:       assertFalse(node1.isDebugger());
897:       assertFalse(node1.isTrue());
898:       assertFalse(node1.isDefaultCase());
899:       assertFalse(node1.isArrayLit());
900:       assertFalse(node1.isVoid());
901:       assertFalse(node1.isTry());
902:       assertTrue(node1.hasOneChild());
903:       assertFalse(node1.isCatch());
904:       assertFalse(node1.isFor());
905:       assertFalse(node1.isFunction());
906:       assertFalse(node1.isRegExp());
907:       assertFalse(node1.isParamList());
908:       assertTrue(node1.isFalse());
909:       assertFalse(node1.isStringKey());
910:       assertEquals((-1), node1.getSourceOffset());
911:       assertFalse(node1.isCase());
912:       assertFalse(node1.isString());
913:       assertFalse(node1.isGetterDef());
914:       assertFalse(node1.isNew());
915:       assertEquals((-1), node1.getCharno());
916:       assertFalse(node1.isAdd());
917:       assertFalse(node1.isSwitch());
918:       assertFalse(node1.isDo());
919:       assertFalse(node1.isWhile());
920:       assertFalse(node1.isCall());
921:       assertFalse(node1.isVar());
922:       assertFalse(node1.isComma());
923:       assertFalse(node1.isLabel());
924:       assertFalse(node1.isAssignAdd());
925:       assertFalse(node1.isNull());
926:       assertFalse(node1.isBreak());
927:       assertFalse(node1.isDelProp());
928:       assertFalse(node1.isName());
929:       assertFalse(node1.isEmpty());
930:       assertNull(node1.getSourceFileName());
931:       assertFalse(node1.isOr());
932:       assertFalse(node1.isExprResult());
933:       assertFalse(node1.isScript());
934:       assertFalse(node1.isGetElem());
935:       assertFalse(node1.isInstanceOf());
936:       assertFalse(node1.isDec());
937:       assertFalse(node1.isWith());
938:       assertFalse(node1.isTypeOf());
939:       assertFalse(node1.isAssign());
940:       assertFalse(node1.isGetProp());
941:       assertFalse(node1.isReturn());
942:       assertFalse(node1.isThis());
943:       assertEquals(43, node1.getType());
944:       assertFalse(node1.isFromExterns());
945:       assertFalse(node1.isLabelName());
946:       assertFalse(node1.isAnd());
947:       assertEquals((-1), node1.getSourcePosition());
948:       assertFalse(node1.isNumber());
949:       assertFalse(node1.isObjectLit());
950:       assertFalse(node1.isNot());
951:       assertFalse(node1.isBlock());
952:       assertFalse(node1.isInc());
953:       assertFalse(node1.isContinue());
954:       assertFalse(node1.isThrow());
955:       assertFalse(node1.isHook());
956:       assertEquals(1, node1.getChildCount());
957:       assertFalse(node1.hasMoreThanOneChild());
958:       assertFalse(node1.isSetterDef());
959:       assertTrue(node1.hasChildren());
960:       assertFalse(node1.isNE());
961:       assertFalse(node1.isIf());
962:       assertEquals((-1), node1.getLineno());
963:       assertFalse(node1.isIn());
964:       assertEquals(15, Node.NO_SIDE_EFFECTS);
965:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
966:       assertEquals(54, Node.SLASH_V);
967:       assertEquals(30, Node.VAR_ARGS_NAME);
968:       assertEquals(52, Node.LENGTH);
969:       assertEquals(41, Node.BRACELESS_TYPE);
970:       assertEquals(51, Node.STATIC_SOURCE_FILE);
971:       assertEquals(40, Node.ORIGINALNAME_PROP);
972:       assertEquals(46, Node.IS_NAMESPACE);
973:       assertEquals(49, Node.DIRECT_EVAL);
974:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
975:       assertEquals(37, Node.OPT_ARG_NAME);
976:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
977:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
978:       assertEquals(50, Node.FREE_CALL);
979:       assertEquals(12, Node.COLUMN_BITS);
980:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
981:       assertEquals(1, Node.DECR_FLAG);
982:       assertEquals(32, Node.INCRDECR_PROP);
983:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
984:       assertEquals(43, Node.IS_CONSTANT_NAME);
985:       assertEquals(36, Node.QUOTED_PROP);
986:       assertEquals(35, Node.PARENTHESIZED_PROP);
987:       assertEquals(16, Node.SOURCENAME_PROP);
988:       assertEquals(54, Node.LAST_PROP);
989:       assertEquals(53, Node.INPUT_ID);
990:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
991:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
992:       assertEquals(4095, Node.COLUMN_MASK);
993:       assertEquals(48, Node.DIRECTIVES);
994:       assertEquals(2, Node.POST_FLAG);
995:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
996:       assertEquals(8, Node.FLAG_NO_THROWS);
997:       assertEquals(39, Node.EMPTY_BLOCK);
998:       assertEquals(47, Node.IS_DISPATCHER);
999:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1000:       assertEquals(29, Node.JSDOC_INFO_PROP);
1001:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1002:       assertEquals(40, Node.ORIGINALNAME_PROP);
1003:       assertEquals(50, Node.FREE_CALL);
1004:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1005:       assertEquals(54, Node.SLASH_V);
1006:       assertEquals(39, Node.EMPTY_BLOCK);
1007:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1008:       assertEquals(41, Node.BRACELESS_TYPE);
1009:       assertEquals(52, Node.LENGTH);
1010:       assertEquals(8, Node.FLAG_NO_THROWS);
1011:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1012:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1013:       assertEquals(30, Node.VAR_ARGS_NAME);
1014:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1015:       assertEquals(43, Node.IS_CONSTANT_NAME);
1016:       assertEquals(16, Node.SOURCENAME_PROP);
1017:       assertEquals(46, Node.IS_NAMESPACE);
1018:       assertEquals(2, Node.POST_FLAG);
1019:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1020:       assertEquals(29, Node.JSDOC_INFO_PROP);
1021:       assertEquals(47, Node.IS_DISPATCHER);
1022:       assertEquals(35, Node.PARENTHESIZED_PROP);
1023:       assertEquals(53, Node.INPUT_ID);
1024:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1025:       assertEquals(36, Node.QUOTED_PROP);
1026:       assertEquals(1, Node.DECR_FLAG);
1027:       assertEquals(49, Node.DIRECT_EVAL);
1028:       assertEquals(12, Node.COLUMN_BITS);
1029:       assertEquals(32, Node.INCRDECR_PROP);
1030:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
1031:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1032:       assertEquals(48, Node.DIRECTIVES);
1033:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1034:       assertEquals(54, Node.LAST_PROP);
1035:       assertEquals(37, Node.OPT_ARG_NAME);
1036:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1037:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
1038:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1039:       assertEquals(4095, Node.COLUMN_MASK);
1040:       
1041:       boolean boolean4 = NodeUtil.isSwitchCase(node1);
1042:       assertFalse(node0.equals((Object)node1));
1043:       assertFalse(node1.equals((Object)node0));
1044:       assertTrue(boolean4 == boolean1);
1045:       assertFalse(boolean4 == boolean0);
1046:       assertTrue(boolean4 == boolean2);
1047:       assertTrue(boolean4 == boolean3);
1048:       assertEquals(0.0, compiler0.getProgress(), 0.01);
1049:       assertFalse(node0.isObjectLit());
1050:       assertFalse(node0.isInstanceOf());
1051:       assertFalse(node0.isAnd());
1052:       assertFalse(node0.isNot());
1053:       assertFalse(node0.isWith());
1054:       assertFalse(node0.isThis());
1055:       assertFalse(node0.isGetProp());
1056:       assertFalse(node0.hasOneChild());
1057:       assertFalse(node0.isAssign());
1058:       assertFalse(node0.hasChildren());
1059:       assertFalse(node0.isDec());
1060:       assertFalse(node0.isHook());
1061:       assertFalse(node0.isComma());
1062:       assertFalse(node0.isExprResult());
1063:       assertFalse(node0.isTypeOf());
1064:       assertEquals(132, node0.getType());
1065:       assertEquals((-1), node0.getLineno());
1066:       assertFalse(node0.isGetElem());
1067:       assertFalse(node0.isBreak());
1068:       assertFalse(node0.hasMoreThanOneChild());
1069:       assertFalse(node0.isOr());
1070:       assertFalse(node0.isLabel());
1071:       assertFalse(node0.isNumber());
1072:       assertFalse(node0.isAssignAdd());
1073:       assertFalse(node0.isDo());
1074:       assertEquals((-1), node0.getSourceOffset());
1075:       assertFalse(node0.isEmpty());
1076:       assertFalse(node0.isAdd());
1077:       assertFalse(node0.isNew());
1078:       assertFalse(node0.isCase());
1079:       assertFalse(node0.isVar());
1080:       assertFalse(node0.isStringKey());
1081:       assertFalse(node0.isGetterDef());
1082:       assertEquals((-1), node0.getCharno());
1083:       assertFalse(node0.isSwitch());
1084:       assertFalse(node0.isParamList());
1085:       assertFalse(node0.isLabelName());
1086:       assertFalse(node0.isArrayLit());
1087:       assertFalse(node0.isCatch());
1088:       assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
1089:       assertEquals(0, node0.getChildCount());
1090:       assertFalse(node0.isSetterDef());
1091:       assertFalse(node0.isDefaultCase());
1092:       assertFalse(node0.isTry());
1093:       assertFalse(node0.isCall());
1094:       assertTrue(node0.isScript());
1095:       assertFalse(node0.isBlock());
1096:       assertFalse(node0.isFor());
1097:       assertFalse(node0.isNE());
1098:       assertFalse(node0.isTrue());
1099:       assertFalse(node0.isVoid());
1100:       assertFalse(node0.isNull());
1101:       assertFalse(node0.isRegExp());
1102:       assertFalse(node0.isIf());
1103:       assertFalse(node0.isDelProp());
1104:       assertFalse(node0.isName());
1105:       assertFalse(node0.isIn());
1106:       assertFalse(node0.isContinue());
1107:       assertFalse(node0.isReturn());
1108:       assertFalse(node0.isInc());
1109:       assertFalse(node0.isFromExterns());
1110:       assertFalse(node0.isString());
1111:       assertFalse(node0.isWhile());
1112:       assertFalse(node0.isFalse());
1113:       assertFalse(node0.isThrow());
1114:       assertEquals((-1), node0.getSourcePosition());
1115:       assertFalse(node0.isDebugger());
1116:       assertFalse(node0.isFunction());
1117:       assertFalse(node1.isDebugger());
1118:       assertFalse(node1.isTrue());
1119:       assertFalse(node1.isDefaultCase());
1120:       assertFalse(node1.isArrayLit());
1121:       assertFalse(node1.isVoid());
1122:       assertFalse(node1.isTry());
1123:       assertTrue(node1.hasOneChild());
1124:       assertFalse(node1.isCatch());
1125:       assertFalse(node1.isFor());
1126:       assertFalse(node1.isFunction());
1127:       assertFalse(node1.isRegExp());
1128:       assertFalse(node1.isParamList());
1129:       assertTrue(node1.isFalse());
1130:       assertFalse(node1.isStringKey());
1131:       assertEquals((-1), node1.getSourceOffset());
1132:       assertFalse(node1.isCase());
1133:       assertFalse(node1.isString());
1134:       assertFalse(node1.isGetterDef());
1135:       assertFalse(node1.isNew());
1136:       assertEquals((-1), node1.getCharno());
1137:       assertFalse(node1.isAdd());
1138:       assertFalse(node1.isSwitch());
1139:       assertFalse(node1.isDo());
1140:       assertFalse(node1.isWhile());
1141:       assertFalse(node1.isCall());
1142:       assertFalse(node1.isVar());
1143:       assertFalse(node1.isComma());
1144:       assertFalse(node1.isLabel());
1145:       assertFalse(node1.isAssignAdd());
1146:       assertFalse(node1.isNull());
1147:       assertFalse(node1.isBreak());
1148:       assertFalse(node1.isDelProp());
1149:       assertFalse(node1.isName());
1150:       assertFalse(node1.isEmpty());
1151:       assertNull(node1.getSourceFileName());
1152:       assertFalse(node1.isOr());
1153:       assertFalse(node1.isExprResult());
1154:       assertFalse(node1.isScript());
1155:       assertFalse(node1.isGetElem());
1156:       assertFalse(node1.isInstanceOf());
1157:       assertFalse(node1.isDec());
1158:       assertFalse(node1.isWith());
1159:       assertFalse(node1.isTypeOf());
1160:       assertFalse(node1.isAssign());
1161:       assertFalse(node1.isGetProp());
1162:       assertFalse(node1.isReturn());
1163:       assertFalse(node1.isThis());
1164:       assertEquals(43, node1.getType());
1165:       assertFalse(node1.isFromExterns());
1166:       assertFalse(node1.isLabelName());
1167:       assertFalse(node1.isAnd());
1168:       assertEquals((-1), node1.getSourcePosition());
1169:       assertFalse(node1.isNumber());
1170:       assertFalse(node1.isObjectLit());
1171:       assertFalse(node1.isNot());
1172:       assertFalse(node1.isBlock());
1173:       assertFalse(node1.isInc());
1174:       assertFalse(node1.isContinue());
1175:       assertFalse(node1.isThrow());
1176:       assertFalse(node1.isHook());
1177:       assertEquals(1, node1.getChildCount());
1178:       assertFalse(node1.hasMoreThanOneChild());
1179:       assertFalse(node1.isSetterDef());
1180:       assertTrue(node1.hasChildren());
1181:       assertFalse(node1.isNE());
1182:       assertFalse(node1.isIf());
1183:       assertEquals((-1), node1.getLineno());
1184:       assertFalse(node1.isIn());
1185:       assertFalse(boolean4);
1186:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1187:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1188:       assertEquals(54, Node.SLASH_V);
1189:       assertEquals(30, Node.VAR_ARGS_NAME);
1190:       assertEquals(52, Node.LENGTH);
1191:       assertEquals(41, Node.BRACELESS_TYPE);
1192:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1193:       assertEquals(40, Node.ORIGINALNAME_PROP);
1194:       assertEquals(46, Node.IS_NAMESPACE);
1195:       assertEquals(49, Node.DIRECT_EVAL);
1196:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1197:       assertEquals(37, Node.OPT_ARG_NAME);
1198:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1199:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1200:       assertEquals(50, Node.FREE_CALL);
1201:       assertEquals(12, Node.COLUMN_BITS);
1202:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
1203:       assertEquals(1, Node.DECR_FLAG);
1204:       assertEquals(32, Node.INCRDECR_PROP);
1205:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1206:       assertEquals(43, Node.IS_CONSTANT_NAME);
1207:       assertEquals(36, Node.QUOTED_PROP);
1208:       assertEquals(35, Node.PARENTHESIZED_PROP);
1209:       assertEquals(16, Node.SOURCENAME_PROP);
1210:       assertEquals(54, Node.LAST_PROP);
1211:       assertEquals(53, Node.INPUT_ID);
1212:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
1213:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1214:       assertEquals(4095, Node.COLUMN_MASK);
1215:       assertEquals(48, Node.DIRECTIVES);
1216:       assertEquals(2, Node.POST_FLAG);
1217:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1218:       assertEquals(8, Node.FLAG_NO_THROWS);
1219:       assertEquals(39, Node.EMPTY_BLOCK);
1220:       assertEquals(47, Node.IS_DISPATCHER);
1221:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1222:       assertEquals(29, Node.JSDOC_INFO_PROP);
1223:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1224:       assertEquals(40, Node.ORIGINALNAME_PROP);
1225:       assertEquals(50, Node.FREE_CALL);
1226:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1227:       assertEquals(54, Node.SLASH_V);
1228:       assertEquals(39, Node.EMPTY_BLOCK);
1229:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1230:       assertEquals(41, Node.BRACELESS_TYPE);
1231:       assertEquals(52, Node.LENGTH);
1232:       assertEquals(8, Node.FLAG_NO_THROWS);
1233:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1234:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1235:       assertEquals(30, Node.VAR_ARGS_NAME);
1236:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1237:       assertEquals(43, Node.IS_CONSTANT_NAME);
1238:       assertEquals(16, Node.SOURCENAME_PROP);
1239:       assertEquals(46, Node.IS_NAMESPACE);
1240:       assertEquals(2, Node.POST_FLAG);
1241:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1242:       assertEquals(29, Node.JSDOC_INFO_PROP);
1243:       assertEquals(47, Node.IS_DISPATCHER);
1244:       assertEquals(35, Node.PARENTHESIZED_PROP);
1245:       assertEquals(53, Node.INPUT_ID);
1246:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1247:       assertEquals(36, Node.QUOTED_PROP);
1248:       assertEquals(1, Node.DECR_FLAG);
1249:       assertEquals(49, Node.DIRECT_EVAL);
1250:       assertEquals(12, Node.COLUMN_BITS);
1251:       assertEquals(32, Node.INCRDECR_PROP);
1252:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
1253:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1254:       assertEquals(48, Node.DIRECTIVES);
1255:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1256:       assertEquals(54, Node.LAST_PROP);
1257:       assertEquals(37, Node.OPT_ARG_NAME);
1258:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1259:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
1260:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1261:       assertEquals(4095, Node.COLUMN_MASK);
1262:       assertNotSame(node0, node1);
1263:       assertNotSame(node1, node0);
1264:       
1265:       boolean boolean5 = NodeUtil.isLoopStructure(node0);
1266:       assertFalse(node0.equals((Object)node1));
1267:       assertTrue(boolean5 == boolean4);
1268:       assertTrue(boolean5 == boolean1);
1269:       assertTrue(boolean5 == boolean2);
1270:       assertTrue(boolean5 == boolean3);
1271:       assertFalse(boolean5 == boolean0);
1272:       assertEquals(0.0, compiler0.getProgress(), 0.01);
1273:       assertFalse(node0.isObjectLit());
1274:       assertFalse(node0.isInstanceOf());
1275:       assertFalse(node0.isAnd());
1276:       assertFalse(node0.isNot());
1277:       assertFalse(node0.isWith());
1278:       assertFalse(node0.isThis());
1279:       assertFalse(node0.isGetProp());
1280:       assertFalse(node0.hasOneChild());
1281:       assertFalse(node0.isAssign());
1282:       assertFalse(node0.hasChildren());
1283:       assertFalse(node0.isDec());
1284:       assertFalse(node0.isHook());
1285:       assertFalse(node0.isComma());
1286:       assertFalse(node0.isExprResult());
1287:       assertFalse(node0.isTypeOf());
1288:       assertEquals(132, node0.getType());
1289:       assertEquals((-1), node0.getLineno());
1290:       assertFalse(node0.isGetElem());
1291:       assertFalse(node0.isBreak());
1292:       assertFalse(node0.hasMoreThanOneChild());
1293:       assertFalse(node0.isOr());
1294:       assertFalse(node0.isLabel());
1295:       assertFalse(node0.isNumber());
1296:       assertFalse(node0.isAssignAdd());
1297:       assertFalse(node0.isDo());
1298:       assertEquals((-1), node0.getSourceOffset());
1299:       assertFalse(node0.isEmpty());
1300:       assertFalse(node0.isAdd());
1301:       assertFalse(node0.isNew());
1302:       assertFalse(node0.isCase());
1303:       assertFalse(node0.isVar());
1304:       assertFalse(node0.isStringKey());
1305:       assertFalse(node0.isGetterDef());
1306:       assertEquals((-1), node0.getCharno());
1307:       assertFalse(node0.isSwitch());
1308:       assertFalse(node0.isParamList());
1309:       assertFalse(node0.isLabelName());
1310:       assertFalse(node0.isArrayLit());
1311:       assertFalse(node0.isCatch());
1312:       assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
1313:       assertEquals(0, node0.getChildCount());
1314:       assertFalse(node0.isSetterDef());
1315:       assertFalse(node0.isDefaultCase());
1316:       assertFalse(node0.isTry());
1317:       assertFalse(node0.isCall());
1318:       assertTrue(node0.isScript());
1319:       assertFalse(node0.isBlock());
1320:       assertFalse(node0.isFor());
1321:       assertFalse(node0.isNE());
1322:       assertFalse(node0.isTrue());
1323:       assertFalse(node0.isVoid());
1324:       assertFalse(node0.isNull());
1325:       assertFalse(node0.isRegExp());
1326:       assertFalse(node0.isIf());
1327:       assertFalse(node0.isDelProp());
1328:       assertFalse(node0.isName());
1329:       assertFalse(node0.isIn());
1330:       assertFalse(node0.isContinue());
1331:       assertFalse(node0.isReturn());
1332:       assertFalse(node0.isInc());
1333:       assertFalse(node0.isFromExterns());
1334:       assertFalse(node0.isString());
1335:       assertFalse(node0.isWhile());
1336:       assertFalse(node0.isFalse());
1337:       assertFalse(node0.isThrow());
1338:       assertEquals((-1), node0.getSourcePosition());
1339:       assertFalse(node0.isDebugger());
1340:       assertFalse(node0.isFunction());
1341:       assertFalse(boolean5);
1342:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1343:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1344:       assertEquals(54, Node.SLASH_V);
1345:       assertEquals(30, Node.VAR_ARGS_NAME);
1346:       assertEquals(52, Node.LENGTH);
1347:       assertEquals(41, Node.BRACELESS_TYPE);
1348:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1349:       assertEquals(40, Node.ORIGINALNAME_PROP);
1350:       assertEquals(46, Node.IS_NAMESPACE);
1351:       assertEquals(49, Node.DIRECT_EVAL);
1352:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1353:       assertEquals(37, Node.OPT_ARG_NAME);
1354:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1355:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1356:       assertEquals(50, Node.FREE_CALL);
1357:       assertEquals(12, Node.COLUMN_BITS);
1358:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
1359:       assertEquals(1, Node.DECR_FLAG);
1360:       assertEquals(32, Node.INCRDECR_PROP);
1361:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1362:       assertEquals(43, Node.IS_CONSTANT_NAME);
1363:       assertEquals(36, Node.QUOTED_PROP);
1364:       assertEquals(35, Node.PARENTHESIZED_PROP);
1365:       assertEquals(16, Node.SOURCENAME_PROP);
1366:       assertEquals(54, Node.LAST_PROP);
1367:       assertEquals(53, Node.INPUT_ID);
1368:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
1369:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1370:       assertEquals(4095, Node.COLUMN_MASK);
1371:       assertEquals(48, Node.DIRECTIVES);
1372:       assertEquals(2, Node.POST_FLAG);
1373:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1374:       assertEquals(8, Node.FLAG_NO_THROWS);
1375:       assertEquals(39, Node.EMPTY_BLOCK);
1376:       assertEquals(47, Node.IS_DISPATCHER);
1377:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1378:       assertEquals(29, Node.JSDOC_INFO_PROP);
1379:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1380:       assertNotSame(node0, node1);
1381:       
1382:       boolean boolean6 = NodeUtil.isNumericResultHelper(node1);
1383:       assertFalse(node0.equals((Object)node1));
1384:       assertFalse(node1.equals((Object)node0));
1385:       assertTrue(boolean6 == boolean5);
1386:       assertTrue(boolean6 == boolean4);
1387:       assertTrue(boolean6 == boolean1);
1388:       assertFalse(boolean6 == boolean0);
1389:       assertTrue(boolean6 == boolean2);
1390:       assertTrue(boolean6 == boolean3);
1391:       assertEquals(0.0, compiler0.getProgress(), 0.01);
1392:       assertFalse(node0.isObjectLit());
1393:       assertFalse(node0.isInstanceOf());
1394:       assertFalse(node0.isAnd());
1395:       assertFalse(node0.isNot());
1396:       assertFalse(node0.isWith());
1397:       assertFalse(node0.isThis());
1398:       assertFalse(node0.isGetProp());
1399:       assertFalse(node0.hasOneChild());
1400:       assertFalse(node0.isAssign());
1401:       assertFalse(node0.hasChildren());
1402:       assertFalse(node0.isDec());
1403:       assertFalse(node0.isHook());
1404:       assertFalse(node0.isComma());
1405:       assertFalse(node0.isExprResult());
1406:       assertFalse(node0.isTypeOf());
1407:       assertEquals(132, node0.getType());
1408:       assertEquals((-1), node0.getLineno());
1409:       assertFalse(node0.isGetElem());
1410:       assertFalse(node0.isBreak());
1411:       assertFalse(node0.hasMoreThanOneChild());
1412:       assertFalse(node0.isOr());
1413:       assertFalse(node0.isLabel());
1414:       assertFalse(node0.isNumber());
1415:       assertFalse(node0.isAssignAdd());
1416:       assertFalse(node0.isDo());
1417:       assertEquals((-1), node0.getSourceOffset());
1418:       assertFalse(node0.isEmpty());
1419:       assertFalse(node0.isAdd());
1420:       assertFalse(node0.isNew());
1421:       assertFalse(node0.isCase());
1422:       assertFalse(node0.isVar());
1423:       assertFalse(node0.isStringKey());
1424:       assertFalse(node0.isGetterDef());
1425:       assertEquals((-1), node0.getCharno());
1426:       assertFalse(node0.isSwitch());
1427:       assertFalse(node0.isParamList());
1428:       assertFalse(node0.isLabelName());
1429:       assertFalse(node0.isArrayLit());
1430:       assertFalse(node0.isCatch());
1431:       assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
1432:       assertEquals(0, node0.getChildCount());
1433:       assertFalse(node0.isSetterDef());
1434:       assertFalse(node0.isDefaultCase());
1435:       assertFalse(node0.isTry());
1436:       assertFalse(node0.isCall());
1437:       assertTrue(node0.isScript());
1438:       assertFalse(node0.isBlock());
1439:       assertFalse(node0.isFor());
1440:       assertFalse(node0.isNE());
1441:       assertFalse(node0.isTrue());
1442:       assertFalse(node0.isVoid());
1443:       assertFalse(node0.isNull());
1444:       assertFalse(node0.isRegExp());
1445:       assertFalse(node0.isIf());
1446:       assertFalse(node0.isDelProp());
1447:       assertFalse(node0.isName());
1448:       assertFalse(node0.isIn());
1449:       assertFalse(node0.isContinue());
1450:       assertFalse(node0.isReturn());
1451:       assertFalse(node0.isInc());
1452:       assertFalse(node0.isFromExterns());
1453:       assertFalse(node0.isString());
1454:       assertFalse(node0.isWhile());
1455:       assertFalse(node0.isFalse());
1456:       assertFalse(node0.isThrow());
1457:       assertEquals((-1), node0.getSourcePosition());
1458:       assertFalse(node0.isDebugger());
1459:       assertFalse(node0.isFunction());
1460:       assertFalse(node1.isDebugger());
1461:       assertFalse(node1.isTrue());
1462:       assertFalse(node1.isDefaultCase());
1463:       assertFalse(node1.isArrayLit());
1464:       assertFalse(node1.isVoid());
1465:       assertFalse(node1.isTry());
1466:       assertTrue(node1.hasOneChild());
1467:       assertFalse(node1.isCatch());
1468:       assertFalse(node1.isFor());
1469:       assertFalse(node1.isFunction());
1470:       assertFalse(node1.isRegExp());
1471:       assertFalse(node1.isParamList());
1472:       assertTrue(node1.isFalse());
1473:       assertFalse(node1.isStringKey());
1474:       assertEquals((-1), node1.getSourceOffset());
1475:       assertFalse(node1.isCase());
1476:       assertFalse(node1.isString());
1477:       assertFalse(node1.isGetterDef());
1478:       assertFalse(node1.isNew());
1479:       assertEquals((-1), node1.getCharno());
1480:       assertFalse(node1.isAdd());
1481:       assertFalse(node1.isSwitch());
1482:       assertFalse(node1.isDo());
1483:       assertFalse(node1.isWhile());
1484:       assertFalse(node1.isCall());
1485:       assertFalse(node1.isVar());
1486:       assertFalse(node1.isComma());
1487:       assertFalse(node1.isLabel());
1488:       assertFalse(node1.isAssignAdd());
1489:       assertFalse(node1.isNull());
1490:       assertFalse(node1.isBreak());
1491:       assertFalse(node1.isDelProp());
1492:       assertFalse(node1.isName());
1493:       assertFalse(node1.isEmpty());
1494:       assertNull(node1.getSourceFileName());
1495:       assertFalse(node1.isOr());
1496:       assertFalse(node1.isExprResult());
1497:       assertFalse(node1.isScript());
1498:       assertFalse(node1.isGetElem());
1499:       assertFalse(node1.isInstanceOf());
1500:       assertFalse(node1.isDec());
1501:       assertFalse(node1.isWith());
1502:       assertFalse(node1.isTypeOf());
1503:       assertFalse(node1.isAssign());
1504:       assertFalse(node1.isGetProp());
1505:       assertFalse(node1.isReturn());
1506:       assertFalse(node1.isThis());
1507:       assertEquals(43, node1.getType());
1508:       assertFalse(node1.isFromExterns());
1509:       assertFalse(node1.isLabelName());
1510:       assertFalse(node1.isAnd());
1511:       assertEquals((-1), node1.getSourcePosition());
1512:       assertFalse(node1.isNumber());
1513:       assertFalse(node1.isObjectLit());
1514:       assertFalse(node1.isNot());
1515:       assertFalse(node1.isBlock());
1516:       assertFalse(node1.isInc());
1517:       assertFalse(node1.isContinue());
1518:       assertFalse(node1.isThrow());
1519:       assertFalse(node1.isHook());
1520:       assertEquals(1, node1.getChildCount());
1521:       assertFalse(node1.hasMoreThanOneChild());
1522:       assertFalse(node1.isSetterDef());
1523:       assertTrue(node1.hasChildren());
1524:       assertFalse(node1.isNE());
1525:       assertFalse(node1.isIf());
1526:       assertEquals((-1), node1.getLineno());
1527:       assertFalse(node1.isIn());
1528:       assertFalse(boolean6);
1529:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1530:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1531:       assertEquals(54, Node.SLASH_V);
1532:       assertEquals(30, Node.VAR_ARGS_NAME);
1533:       assertEquals(52, Node.LENGTH);
1534:       assertEquals(41, Node.BRACELESS_TYPE);
1535:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1536:       assertEquals(40, Node.ORIGINALNAME_PROP);
1537:       assertEquals(46, Node.IS_NAMESPACE);
1538:       assertEquals(49, Node.DIRECT_EVAL);
1539:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1540:       assertEquals(37, Node.OPT_ARG_NAME);
1541:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1542:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1543:       assertEquals(50, Node.FREE_CALL);
1544:       assertEquals(12, Node.COLUMN_BITS);
1545:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
1546:       assertEquals(1, Node.DECR_FLAG);
1547:       assertEquals(32, Node.INCRDECR_PROP);
1548:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1549:       assertEquals(43, Node.IS_CONSTANT_NAME);
1550:       assertEquals(36, Node.QUOTED_PROP);
1551:       assertEquals(35, Node.PARENTHESIZED_PROP);
1552:       assertEquals(16, Node.SOURCENAME_PROP);
1553:       assertEquals(54, Node.LAST_PROP);
1554:       assertEquals(53, Node.INPUT_ID);
1555:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
1556:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1557:       assertEquals(4095, Node.COLUMN_MASK);
1558:       assertEquals(48, Node.DIRECTIVES);
1559:       assertEquals(2, Node.POST_FLAG);
1560:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1561:       assertEquals(8, Node.FLAG_NO_THROWS);
1562:       assertEquals(39, Node.EMPTY_BLOCK);
1563:       assertEquals(47, Node.IS_DISPATCHER);
1564:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1565:       assertEquals(29, Node.JSDOC_INFO_PROP);
1566:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1567:       assertEquals(40, Node.ORIGINALNAME_PROP);
1568:       assertEquals(50, Node.FREE_CALL);
1569:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1570:       assertEquals(54, Node.SLASH_V);
1571:       assertEquals(39, Node.EMPTY_BLOCK);
1572:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1573:       assertEquals(41, Node.BRACELESS_TYPE);
1574:       assertEquals(52, Node.LENGTH);
1575:       assertEquals(8, Node.FLAG_NO_THROWS);
1576:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1577:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1578:       assertEquals(30, Node.VAR_ARGS_NAME);
1579:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1580:       assertEquals(43, Node.IS_CONSTANT_NAME);
1581:       assertEquals(16, Node.SOURCENAME_PROP);
1582:       assertEquals(46, Node.IS_NAMESPACE);
1583:       assertEquals(2, Node.POST_FLAG);
1584:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1585:       assertEquals(29, Node.JSDOC_INFO_PROP);
1586:       assertEquals(47, Node.IS_DISPATCHER);
1587:       assertEquals(35, Node.PARENTHESIZED_PROP);
1588:       assertEquals(53, Node.INPUT_ID);
1589:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1590:       assertEquals(36, Node.QUOTED_PROP);
1591:       assertEquals(1, Node.DECR_FLAG);
1592:       assertEquals(49, Node.DIRECT_EVAL);
1593:       assertEquals(12, Node.COLUMN_BITS);
1594:       assertEquals(32, Node.INCRDECR_PROP);
1595:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
1596:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1597:       assertEquals(48, Node.DIRECTIVES);
1598:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1599:       assertEquals(54, Node.LAST_PROP);
1600:       assertEquals(37, Node.OPT_ARG_NAME);
1601:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1602:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
1603:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1604:       assertEquals(4095, Node.COLUMN_MASK);
1605:       assertNotSame(node0, node1);
1606:       assertNotSame(node1, node0);
1607:       
1608:       SourceFile sourceFile0 = (SourceFile)NodeUtil.getSourceFile(node0);
1609:       assertNotNull(sourceFile0);
1610:       assertFalse(node0.equals((Object)node1));
1611:       assertFalse(sourceFile0.isExtern());
1612:       assertEquals("com.google.javascript.jscomp.RenameLabels", sourceFile0.getOriginalPath());
1613:       assertEquals("com.google.javascript.jscomp.RenameLabels", sourceFile0.getName());
1614:       assertEquals("com.google.javascript.jscomp.RenameLabels", sourceFile0.toString());
1615:       assertEquals(0.0, compiler0.getProgress(), 0.01);
1616:       assertFalse(node0.isObjectLit());
1617:       assertFalse(node0.isInstanceOf());
1618:       assertFalse(node0.isAnd());
1619:       assertFalse(node0.isNot());
1620:       assertFalse(node0.isWith());
1621:       assertFalse(node0.isThis());
1622:       assertFalse(node0.isGetProp());
1623:       assertFalse(node0.hasOneChild());
1624:       assertFalse(node0.isAssign());
1625:       assertFalse(node0.hasChildren());
1626:       assertFalse(node0.isDec());
1627:       assertFalse(node0.isHook());
1628:       assertFalse(node0.isComma());
1629:       assertFalse(node0.isExprResult());
1630:       assertFalse(node0.isTypeOf());
1631:       assertEquals(132, node0.getType());
1632:       assertEquals((-1), node0.getLineno());
1633:       assertFalse(node0.isGetElem());
1634:       assertFalse(node0.isBreak());
1635:       assertFalse(node0.hasMoreThanOneChild());
1636:       assertFalse(node0.isOr());
1637:       assertFalse(node0.isLabel());
1638:       assertFalse(node0.isNumber());
1639:       assertFalse(node0.isAssignAdd());
1640:       assertFalse(node0.isDo());
1641:       assertEquals((-1), node0.getSourceOffset());
1642:       assertFalse(node0.isEmpty());
1643:       assertFalse(node0.isAdd());
1644:       assertFalse(node0.isNew());
1645:       assertFalse(node0.isCase());
1646:       assertFalse(node0.isVar());
1647:       assertFalse(node0.isStringKey());
1648:       assertFalse(node0.isGetterDef());
1649:       assertEquals((-1), node0.getCharno());
1650:       assertFalse(node0.isSwitch());
1651:       assertFalse(node0.isParamList());
1652:       assertFalse(node0.isLabelName());
1653:       assertFalse(node0.isArrayLit());
1654:       assertFalse(node0.isCatch());
1655:       assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
1656:       assertEquals(0, node0.getChildCount());
1657:       assertFalse(node0.isSetterDef());
1658:       assertFalse(node0.isDefaultCase());
1659:       assertFalse(node0.isTry());
1660:       assertFalse(node0.isCall());
1661:       assertTrue(node0.isScript());
1662:       assertFalse(node0.isBlock());
1663:       assertFalse(node0.isFor());
1664:       assertFalse(node0.isNE());
1665:       assertFalse(node0.isTrue());
1666:       assertFalse(node0.isVoid());
1667:       assertFalse(node0.isNull());
1668:       assertFalse(node0.isRegExp());
1669:       assertFalse(node0.isIf());
1670:       assertFalse(node0.isDelProp());
1671:       assertFalse(node0.isName());
1672:       assertFalse(node0.isIn());
1673:       assertFalse(node0.isContinue());
1674:       assertFalse(node0.isReturn());
1675:       assertFalse(node0.isInc());
1676:       assertFalse(node0.isFromExterns());
1677:       assertFalse(node0.isString());
1678:       assertFalse(node0.isWhile());
1679:       assertFalse(node0.isFalse());
1680:       assertFalse(node0.isThrow());
1681:       assertEquals((-1), node0.getSourcePosition());
1682:       assertFalse(node0.isDebugger());
1683:       assertFalse(node0.isFunction());
1684:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1685:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1686:       assertEquals(54, Node.SLASH_V);
1687:       assertEquals(30, Node.VAR_ARGS_NAME);
1688:       assertEquals(52, Node.LENGTH);
1689:       assertEquals(41, Node.BRACELESS_TYPE);
1690:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1691:       assertEquals(40, Node.ORIGINALNAME_PROP);
1692:       assertEquals(46, Node.IS_NAMESPACE);
1693:       assertEquals(49, Node.DIRECT_EVAL);
1694:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1695:       assertEquals(37, Node.OPT_ARG_NAME);
1696:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1697:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1698:       assertEquals(50, Node.FREE_CALL);
1699:       assertEquals(12, Node.COLUMN_BITS);
1700:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
1701:       assertEquals(1, Node.DECR_FLAG);
1702:       assertEquals(32, Node.INCRDECR_PROP);
1703:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1704:       assertEquals(43, Node.IS_CONSTANT_NAME);
1705:       assertEquals(36, Node.QUOTED_PROP);
1706:       assertEquals(35, Node.PARENTHESIZED_PROP);
1707:       assertEquals(16, Node.SOURCENAME_PROP);
1708:       assertEquals(54, Node.LAST_PROP);
1709:       assertEquals(53, Node.INPUT_ID);
1710:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
1711:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1712:       assertEquals(4095, Node.COLUMN_MASK);
1713:       assertEquals(48, Node.DIRECTIVES);
1714:       assertEquals(2, Node.POST_FLAG);
1715:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1716:       assertEquals(8, Node.FLAG_NO_THROWS);
1717:       assertEquals(39, Node.EMPTY_BLOCK);
1718:       assertEquals(47, Node.IS_DISPATCHER);
1719:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1720:       assertEquals(29, Node.JSDOC_INFO_PROP);
1721:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1722:       assertNotSame(node0, node1);
1723:       
1724:       Node node2 = ControlFlowAnalysis.computeFollowNode(node0);
1725:       assertNull(node2);
1726:       assertFalse(node0.equals((Object)node1));
1727:       assertEquals(0.0, compiler0.getProgress(), 0.01);
1728:       assertFalse(node0.isObjectLit());
1729:       assertFalse(node0.isInstanceOf());
1730:       assertFalse(node0.isAnd());
1731:       assertFalse(node0.isNot());
1732:       assertFalse(node0.isWith());
1733:       assertFalse(node0.isThis());
1734:       assertFalse(node0.isGetProp());
1735:       assertFalse(node0.hasOneChild());
1736:       assertFalse(node0.isAssign());
1737:       assertFalse(node0.hasChildren());
1738:       assertFalse(node0.isDec());
1739:       assertFalse(node0.isHook());
1740:       assertFalse(node0.isComma());
1741:       assertFalse(node0.isExprResult());
1742:       assertFalse(node0.isTypeOf());
1743:       assertEquals(132, node0.getType());
1744:       assertEquals((-1), node0.getLineno());
1745:       assertFalse(node0.isGetElem());
1746:       assertFalse(node0.isBreak());
1747:       assertFalse(node0.hasMoreThanOneChild());
1748:       assertFalse(node0.isOr());
1749:       assertFalse(node0.isLabel());
1750:       assertFalse(node0.isNumber());
1751:       assertFalse(node0.isAssignAdd());
1752:       assertFalse(node0.isDo());
1753:       assertEquals((-1), node0.getSourceOffset());
1754:       assertFalse(node0.isEmpty());
1755:       assertFalse(node0.isAdd());
1756:       assertFalse(node0.isNew());
1757:       assertFalse(node0.isCase());
1758:       assertFalse(node0.isVar());
1759:       assertFalse(node0.isStringKey());
1760:       assertFalse(node0.isGetterDef());
1761:       assertEquals((-1), node0.getCharno());
1762:       assertFalse(node0.isSwitch());
1763:       assertFalse(node0.isParamList());
1764:       assertFalse(node0.isLabelName());
1765:       assertFalse(node0.isArrayLit());
1766:       assertFalse(node0.isCatch());
1767:       assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
1768:       assertEquals(0, node0.getChildCount());
1769:       assertFalse(node0.isSetterDef());
1770:       assertFalse(node0.isDefaultCase());
1771:       assertFalse(node0.isTry());
1772:       assertFalse(node0.isCall());
1773:       assertTrue(node0.isScript());
1774:       assertFalse(node0.isBlock());
1775:       assertFalse(node0.isFor());
1776:       assertFalse(node0.isNE());
1777:       assertFalse(node0.isTrue());
1778:       assertFalse(node0.isVoid());
1779:       assertFalse(node0.isNull());
1780:       assertFalse(node0.isRegExp());
1781:       assertFalse(node0.isIf());
1782:       assertFalse(node0.isDelProp());
1783:       assertFalse(node0.isName());
1784:       assertFalse(node0.isIn());
1785:       assertFalse(node0.isContinue());
1786:       assertFalse(node0.isReturn());
1787:       assertFalse(node0.isInc());
1788:       assertFalse(node0.isFromExterns());
1789:       assertFalse(node0.isString());
1790:       assertFalse(node0.isWhile());
1791:       assertFalse(node0.isFalse());
1792:       assertFalse(node0.isThrow());
1793:       assertEquals((-1), node0.getSourcePosition());
1794:       assertFalse(node0.isDebugger());
1795:       assertFalse(node0.isFunction());
1796:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1797:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1798:       assertEquals(54, Node.SLASH_V);
1799:       assertEquals(30, Node.VAR_ARGS_NAME);
1800:       assertEquals(52, Node.LENGTH);
1801:       assertEquals(41, Node.BRACELESS_TYPE);
1802:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1803:       assertEquals(40, Node.ORIGINALNAME_PROP);
1804:       assertEquals(46, Node.IS_NAMESPACE);
1805:       assertEquals(49, Node.DIRECT_EVAL);
1806:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1807:       assertEquals(37, Node.OPT_ARG_NAME);
1808:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1809:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1810:       assertEquals(50, Node.FREE_CALL);
1811:       assertEquals(12, Node.COLUMN_BITS);
1812:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
1813:       assertEquals(1, Node.DECR_FLAG);
1814:       assertEquals(32, Node.INCRDECR_PROP);
1815:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1816:       assertEquals(43, Node.IS_CONSTANT_NAME);
1817:       assertEquals(36, Node.QUOTED_PROP);
1818:       assertEquals(35, Node.PARENTHESIZED_PROP);
1819:       assertEquals(16, Node.SOURCENAME_PROP);
1820:       assertEquals(54, Node.LAST_PROP);
1821:       assertEquals(53, Node.INPUT_ID);
1822:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
1823:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1824:       assertEquals(4095, Node.COLUMN_MASK);
1825:       assertEquals(48, Node.DIRECTIVES);
1826:       assertEquals(2, Node.POST_FLAG);
1827:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1828:       assertEquals(8, Node.FLAG_NO_THROWS);
1829:       assertEquals(39, Node.EMPTY_BLOCK);
1830:       assertEquals(47, Node.IS_DISPATCHER);
1831:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1832:       assertEquals(29, Node.JSDOC_INFO_PROP);
1833:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1834:       assertNotSame(node0, node1);
1835:       
1836:       // Undeclared exception!
1837:       try { 
1838:         NodeUtil.tryMergeBlock((Node) null);
1839:         fail("Expecting exception: NullPointerException");
1840:       
1841:       } catch(NullPointerException e) {
1842:          //
1843:          // no message in exception (getMessage() returned null)
1844:          //
1845:          verifyException("com.google.javascript.jscomp.NodeUtil", e);
1846:       }
1847:   }
1848: }
RegularFileObject[/tmp/EvoSuite_160_1566407466387/com/google/javascript/jscomp/NodeUtil_160_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Aug 21 17:11:06 GMT 2019
5:  */
6: 
7: package com.google.javascript.jscomp;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NodeUtil_160_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.jscomp.NodeUtil"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/rq3/botsing-integration-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NodeUtil_160_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.common.collect.ArrayListMultimap",
82:       "com.google.javascript.jscomp.Tracer$1",
83:       "com.google.common.collect.Collections2",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.jscomp.NodeTraversal$Callback",
86:       "com.google.javascript.rhino.head.jdk13.VMBridge_jdk13",
87:       "com.google.javascript.jscomp.CheckSideEffects",
88:       "com.google.javascript.rhino.head.ast.Yield",
89:       "com.google.javascript.jscomp.SimpleDefinitionFinder",
90:       "com.google.javascript.jscomp.Scope$Arguments",
91:       "com.google.javascript.jscomp.graph.Graph",
92:       "com.google.javascript.rhino.jstype.StaticScope",
93:       "com.google.javascript.rhino.jstype.InstanceObjectType",
94:       "com.google.javascript.jscomp.graph.Annotatable",
95:       "com.google.common.collect.AbstractMapBasedMultiset$1",
96:       "com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher",
97:       "com.google.javascript.jscomp.JSModule",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.ImmutableSet$ArrayImmutableSet",
100:       "com.google.javascript.rhino.JSDocInfo$Marker",
101:       "com.google.common.collect.RegularImmutableMap",
102:       "com.google.javascript.rhino.Node$NodeMismatch",
103:       "com.google.javascript.rhino.jstype.RecordType",
104:       "com.google.javascript.rhino.head.ast.Jump",
105:       "com.google.javascript.jscomp.Tracer",
106:       "com.google.javascript.jscomp.HotSwapCompilerPass",
107:       "com.google.javascript.jscomp.SourceFile$Builder",
108:       "com.google.javascript.jscomp.CodingConvention$SubclassType",
109:       "com.google.javascript.rhino.jstype.JSType$1",
110:       "com.google.javascript.rhino.jstype.JSType$2",
111:       "com.google.javascript.jscomp.CodingConvention",
112:       "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
113:       "com.google.javascript.jscomp.SourceMap$DetailLevel",
114:       "com.google.javascript.jscomp.MemoizedScopeCreator",
115:       "com.google.javascript.rhino.head.ast.EmptyStatement",
116:       "com.google.javascript.jscomp.CompilerOptions$1",
117:       "com.google.javascript.jscomp.SourceExcerptProvider$1",
118:       "com.google.common.base.Joiner",
119:       "com.google.javascript.jscomp.CheckAccessControls",
120:       "com.google.javascript.jscomp.CheckDebuggerStatement",
121:       "com.google.common.collect.SingletonImmutableMap",
122:       "com.google.javascript.jscomp.ReplaceIdGenerators",
123:       "com.google.javascript.jscomp.CleanupPasses",
124:       "com.google.javascript.rhino.head.ast.XmlFragment",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.javascript.jscomp.graph.FixedPointGraphTraversal$EdgeCallback",
127:       "com.google.javascript.jscomp.CompilerOptions$Reach",
128:       "com.google.javascript.jscomp.PassConfig$State",
129:       "com.google.javascript.rhino.head.ast.CatchClause",
130:       "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.common.collect.RegularImmutableMap$LinkedEntry",
133:       "com.google.common.collect.Lists$Partition",
134:       "com.google.javascript.rhino.head.ast.AstRoot",
135:       "com.google.javascript.rhino.head.ast.NewExpression",
136:       "com.google.common.collect.Count",
137:       "com.google.javascript.rhino.ErrorReporter",
138:       "com.google.javascript.rhino.jstype.ValueType",
139:       "com.google.javascript.rhino.Token",
140:       "com.google.javascript.rhino.head.ast.ParenthesizedExpression",
141:       "com.google.javascript.rhino.jstype.BooleanType",
142:       "com.google.javascript.jscomp.CssRenamingMap",
143:       "com.google.javascript.rhino.head.Context$ClassShutterSetter",
144:       "com.google.common.base.CharMatcher$5",
145:       "com.google.common.base.CharMatcher$4",
146:       "com.google.common.base.CharMatcher$3",
147:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$ContextualRenamer",
148:       "com.google.common.base.CharMatcher$2",
149:       "com.google.common.base.CharMatcher$9",
150:       "com.google.common.base.CharMatcher$8",
151:       "com.google.common.base.CharMatcher$7",
152:       "com.google.javascript.rhino.head.ast.Label",
153:       "com.google.common.base.CharMatcher$6",
154:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
155:       "com.google.javascript.jscomp.SuppressDocWarningsGuard",
156:       "com.google.javascript.jscomp.MessageFormatter",
157:       "com.google.javascript.rhino.JSDocInfo",
158:       "com.google.javascript.jscomp.SourceExcerptProvider$ExcerptFormatter",
159:       "com.google.common.base.CharMatcher$1",
160:       "com.google.javascript.jscomp.parsing.Config",
161:       "com.google.common.collect.EmptyImmutableList",
162:       "com.google.common.collect.ImmutableEntry",
163:       "com.google.javascript.rhino.head.CompilerEnvirons",
164:       "com.google.common.base.Joiner$1",
165:       "com.google.common.base.Joiner$2",
166:       "com.google.javascript.jscomp.ErrorHandler",
167:       "com.google.javascript.rhino.head.Callable",
168:       "com.google.javascript.jscomp.GoogleCodingConvention",
169:       "com.google.javascript.jscomp.SourceFile$Preloaded",
170:       "com.google.common.collect.ImmutableCollection",
171:       "com.google.javascript.rhino.ScriptRuntime",
172:       "com.google.javascript.rhino.head.ast.ScriptNode",
173:       "com.google.javascript.rhino.head.ast.XmlString",
174:       "com.google.javascript.jscomp.StrictModeCheck",
175:       "com.google.javascript.rhino.head.ast.WhileLoop",
176:       "com.google.javascript.jscomp.DefinitionsRemover$Definition",
177:       "com.google.javascript.jscomp.Result",
178:       "com.google.javascript.jscomp.CodingConventions$1",
179:       "com.google.javascript.jscomp.CodingConvention$ObjectLiteralCast",
180:       "com.google.javascript.jscomp.CodingConvention$SubclassRelationship",
181:       "com.google.javascript.jscomp.CompilerPass",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.jscomp.NodeUtil$MatchDeclaration",
184:       "com.google.javascript.jscomp.NodeUtil$VarCollector",
185:       "com.google.javascript.jscomp.VariableRenamingPolicy",
186:       "com.google.common.collect.ImmutableCollection$Builder",
187:       "com.google.javascript.rhino.head.ast.IfStatement",
188:       "com.google.javascript.jscomp.CodeChangeHandler",
189:       "com.google.common.collect.Lists$AbstractListWrapper",
190:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$Renamer",
191:       "com.google.javascript.jscomp.FunctionTypeBuilder",
192:       "com.google.javascript.jscomp.FunctionInformationMap",
193:       "com.google.common.collect.AbstractMapBasedMultiset",
194:       "com.google.javascript.jscomp.NodeUtil$MayBeStringResultPredicate",
195:       "com.google.javascript.rhino.jstype.EnumType",
196:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
197:       "com.google.javascript.jscomp.JsMessageVisitor$MalformedException",
198:       "com.google.javascript.rhino.head.Evaluator",
199:       "com.google.javascript.jscomp.CodingConventions$DefaultCodingConvention",
200:       "com.google.common.base.CharMatcher$LookupTable",
201:       "com.google.javascript.rhino.head.ast.XmlElemRef",
202:       "com.google.javascript.rhino.head.ast.VariableDeclaration",
203:       "com.google.javascript.rhino.head.TokenStream",
204:       "com.google.common.collect.RegularImmutableList$1",
205:       "com.google.javascript.rhino.head.ast.ObjectLiteral",
206:       "com.google.common.collect.Lists$2",
207:       "com.google.javascript.jscomp.JSSourceFile",
208:       "com.google.javascript.jscomp.CodingConventions",
209:       "com.google.common.collect.Lists$1",
210:       "com.google.javascript.rhino.jstype.StaticReference",
211:       "com.google.common.collect.Multiset",
212:       "com.google.javascript.rhino.head.ast.InfixExpression",
213:       "com.google.javascript.rhino.head.BaseFunction",
214:       "com.google.common.base.Supplier",
215:       "com.google.protobuf.MessageOrBuilder",
216:       "com.google.javascript.jscomp.GlobalVarReferenceMap",
217:       "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
218:       "com.google.javascript.rhino.head.ast.XmlPropRef",
219:       "com.google.javascript.jscomp.TypeValidator",
220:       "com.google.common.collect.ImmutableList",
221:       "com.google.protobuf.GeneratedMessage",
222:       "com.google.javascript.rhino.jstype.ObjectType$Property",
223:       "com.google.javascript.rhino.Node$AbstractPropListItem",
224:       "com.google.javascript.jscomp.Tracer$InternalClock",
225:       "com.google.common.collect.AbstractMultimap$KeySet",
226:       "com.google.javascript.jscomp.SourceMap$LocationMapping",
227:       "com.google.javascript.rhino.head.ast.VariableInitializer",
228:       "com.google.javascript.rhino.jstype.NoResolvedType",
229:       "com.google.javascript.rhino.head.ast.ThrowStatement",
230:       "com.google.protobuf.MessageLiteOrBuilder",
231:       "com.google.javascript.jscomp.NodeTraversal$AbstractNodeTypePruningCallback",
232:       "com.google.javascript.jscomp.DefaultPassConfig$99",
233:       "com.google.protobuf.MessageLite",
234:       "com.google.javascript.jscomp.DefaultPassConfig$98",
235:       "com.google.common.collect.Maps$EntryTransformer",
236:       "com.google.javascript.jscomp.DefaultPassConfig$95",
237:       "com.google.common.collect.Ordering",
238:       "com.google.javascript.jscomp.DefaultPassConfig$94",
239:       "com.google.javascript.jscomp.DefaultPassConfig$96",
240:       "com.google.javascript.jscomp.CustomPassExecutionTime",
241:       "com.google.javascript.jscomp.DefaultPassConfig$91",
242:       "com.google.javascript.jscomp.SyntacticScopeCreator",
243:       "com.google.javascript.jscomp.DefaultPassConfig$90",
244:       "com.google.javascript.jscomp.DefaultPassConfig$93",
245:       "com.google.javascript.jscomp.DefaultPassConfig$92",
246:       "com.google.javascript.rhino.head.debug.DebuggableScript",
247:       "com.google.javascript.jscomp.CompilerOptions$TweakProcessing",
248:       "com.google.common.collect.Hashing",
249:       "com.google.javascript.rhino.head.DefaultErrorReporter",
250:       "com.google.javascript.jscomp.SourceMap$Format",
251:       "com.google.javascript.rhino.jstype.NoType",
252:       "com.google.javascript.rhino.head.Script",
253:       "com.google.common.collect.AbstractMultimap$WrappedCollection",
254:       "com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider",
255:       "com.google.javascript.rhino.TokenStream",
256:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
257:       "com.google.javascript.jscomp.DefaultPassConfig$88",
258:       "com.google.javascript.jscomp.DefaultPassConfig$87",
259:       "com.google.javascript.jscomp.DefaultPassConfig$89",
260:       "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments",
261:       "com.google.javascript.rhino.head.ast.Comment",
262:       "com.google.javascript.jscomp.DefaultPassConfig$84",
263:       "com.google.javascript.jscomp.DefaultPassConfig$83",
264:       "com.google.javascript.jscomp.DefaultPassConfig$86",
265:       "com.google.javascript.jscomp.DefaultPassConfig$85",
266:       "com.google.javascript.jscomp.CodingConventions$Proxy",
267:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt",
268:       "com.google.javascript.jscomp.DefaultPassConfig$80",
269:       "com.google.javascript.jscomp.DefaultPassConfig$82",
270:       "com.google.javascript.jscomp.DefaultPassConfig$81",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.javascript.rhino.head.optimizer.Codegen",
273:       "com.google.javascript.rhino.head.ast.FunctionCall",
274:       "com.google.javascript.jscomp.RhinoErrorReporter$NewRhinoErrorReporter",
275:       "com.google.javascript.jscomp.NodeUtil",
276:       "com.google.common.collect.RegularImmutableSet",
277:       "com.google.javascript.jscomp.JsMessageVisitor",
278:       "com.google.javascript.jscomp.DefaultPassConfig$77",
279:       "com.google.javascript.jscomp.DefaultPassConfig$76",
280:       "com.google.javascript.jscomp.DefaultPassConfig$79",
281:       "com.google.javascript.jscomp.DefaultPassConfig$78",
282:       "com.google.javascript.jscomp.DefaultPassConfig$73",
283:       "com.google.javascript.jscomp.DefaultPassConfig$72",
284:       "com.google.javascript.rhino.head.EcmaError",
285:       "com.google.javascript.rhino.head.FunctionObject",
286:       "com.google.javascript.jscomp.DefaultPassConfig$75",
287:       "com.google.javascript.jscomp.DefaultPassConfig$74",
288:       "com.google.javascript.jscomp.DefaultPassConfig$71",
289:       "com.google.javascript.jscomp.DefaultPassConfig$70",
290:       "com.google.javascript.rhino.head.NativeContinuation",
291:       "com.google.javascript.rhino.head.xml.XMLObject",
292:       "com.google.javascript.rhino.head.Node$NodeIterator",
293:       "com.google.common.collect.ImmutableAsList",
294:       "com.google.javascript.jscomp.PassConfig",
295:       "com.google.javascript.jscomp.ConcreteType$ConcreteInstanceType",
296:       "com.google.common.collect.SingletonImmutableSet",
297:       "com.google.javascript.jscomp.AbstractMessageFormatter$Color",
298:       "com.google.javascript.jscomp.Normalize$NormalizeStatements",
299:       "com.google.javascript.jscomp.DefaultPassConfig$69",
300:       "com.google.javascript.rhino.head.InterpretedFunction",
301:       "com.google.javascript.jscomp.DefaultPassConfig$66",
302:       "com.google.javascript.jscomp.DefaultPassConfig$65",
303:       "com.google.javascript.jscomp.DefaultPassConfig$68",
304:       "com.google.javascript.jscomp.DefaultPassConfig$67",
305:       "com.google.javascript.rhino.jstype.ParameterizedType",
306:       "com.google.javascript.jscomp.DefaultPassConfig$62",
307:       "com.google.javascript.jscomp.DefaultPassConfig$61",
308:       "com.google.javascript.rhino.Node$SideEffectFlags",
309:       "com.google.javascript.jscomp.DefaultPassConfig$64",
310:       "com.google.javascript.jscomp.DefaultPassConfig$63",
311:       "com.google.javascript.jscomp.DefaultPassConfig$60",
312:       "com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceMap",
313:       "com.google.javascript.rhino.jstype.NullType",
314:       "com.google.javascript.jscomp.LightweightMessageFormatter",
315:       "com.google.common.collect.EmptyImmutableList$1",
316:       "com.google.javascript.jscomp.Compiler$CodeBuilder",
317:       "com.google.javascript.jscomp.FunctionInformationMapOrBuilder",
318:       "com.google.javascript.jscomp.DefaultPassConfig$HotSwapPassFactory",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.common.collect.AbstractIterator",
321:       "com.google.javascript.rhino.head.ScriptableObject$GetterSlot",
322:       "com.google.javascript.jscomp.BasicErrorManager$ErrorWithLevel",
323:       "com.google.common.base.CharMatcher$And",
324:       "com.google.javascript.jscomp.DiagnosticType",
325:       "com.google.javascript.jscomp.DefaultPassConfig$59",
326:       "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback$SideEffectAccumulator",
327:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler$NullAliasTransformation",
328:       "com.google.javascript.jscomp.DefaultPassConfig$58",
329:       "com.google.javascript.jscomp.graph.DiGraph$DiGraphNode",
330:       "com.google.javascript.jscomp.PrepareAst",
331:       "com.google.javascript.rhino.head.ast.ForLoop",
332:       "com.google.javascript.jscomp.DefaultPassConfig$55",
333:       "com.google.javascript.jscomp.DefaultPassConfig$54",
334:       "com.google.javascript.jscomp.DefaultPassConfig$57",
335:       "com.google.javascript.jscomp.DefaultPassConfig$56",
336:       "com.google.common.io.OutputSupplier",
337:       "com.google.javascript.jscomp.DefaultPassConfig$51",
338:       "com.google.javascript.jscomp.DefaultPassConfig$50",
339:       "com.google.javascript.jscomp.CompilerInput",
340:       "com.google.javascript.jscomp.DefaultPassConfig$53",
341:       "com.google.javascript.rhino.head.ast.FunctionNode",
342:       "com.google.javascript.jscomp.DefaultPassConfig$52",
343:       "com.google.javascript.jscomp.AbstractCompiler",
344:       "com.google.common.collect.UnmodifiableIterator",
345:       "com.google.javascript.jscomp.ExploitAssigns",
346:       "com.google.javascript.rhino.head.Context",
347:       "com.google.common.io.InputSupplier",
348:       "com.google.javascript.jscomp.DiagnosticGroup",
349:       "com.google.common.collect.ImmutableSet$TransformedImmutableSet",
350:       "com.google.common.collect.AbstractMultimap$WrappedList",
351:       "com.google.javascript.jscomp.CodeChangeHandler$RecentChange",
352:       "com.google.javascript.jscomp.NodeUtil$Visitor",
353:       "com.google.javascript.jscomp.SyntacticScopeCreator$RedeclarationHandler",
354:       "com.google.javascript.rhino.head.NativeBoolean",
355:       "com.google.javascript.jscomp.DefaultPassConfig$48",
356:       "com.google.javascript.rhino.Node$AncestorIterable",
357:       "com.google.common.collect.AbstractMultimap$RandomAccessWrappedList",
358:       "com.google.javascript.rhino.head.ast.Name",
359:       "com.google.javascript.jscomp.DefaultPassConfig$47",
360:       "com.google.common.collect.ImmutableEnumSet",
361:       "com.google.javascript.jscomp.DefaultPassConfig$49",
362:       "com.google.javascript.jscomp.DefaultPassConfig$44",
363:       "com.google.javascript.jscomp.DefaultPassConfig$43",
364:       "com.google.javascript.jscomp.DefaultPassConfig$46",
365:       "com.google.javascript.jscomp.DefaultPassConfig$45",
366:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax$1",
367:       "com.google.javascript.jscomp.DefaultPassConfig$40",
368:       "com.google.common.collect.HashMultiset",
369:       "com.google.javascript.rhino.jstype.UnresolvedTypeExpression",
370:       "com.google.javascript.jscomp.DefaultPassConfig$42",
371:       "com.google.javascript.jscomp.DefaultPassConfig$41",
372:       "com.google.protobuf.AbstractMessageLite",
373:       "com.google.javascript.jscomp.ErrorManager",
374:       "com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate",
375:       "com.google.common.collect.SingletonImmutableList",
376:       "com.google.javascript.rhino.head.ast.ConditionalExpression",
377:       "com.google.javascript.jscomp.CheckLevel",
378:       "com.google.javascript.rhino.jstype.StaticSlot",
379:       "com.google.common.collect.LinkedListMultimap",
380:       "com.google.javascript.rhino.head.ast.PropertyGet",
381:       "com.google.common.collect.AbstractSetMultimap",
382:       "com.google.javascript.rhino.head.ContextFactory",
383:       "com.google.common.base.Function",
384:       "com.google.javascript.rhino.head.VMBridge",
385:       "com.google.common.collect.ImmutableMap",
386:       "com.google.common.collect.Multiset$Entry",
387:       "com.google.javascript.jscomp.DefaultPassConfig$37",
388:       "com.google.javascript.jscomp.DefaultPassConfig$36",
389:       "com.google.javascript.jscomp.DefaultPassConfig$39",
390:       "com.google.javascript.jscomp.DefaultPassConfig$38",
391:       "com.google.javascript.jscomp.DefaultPassConfig$33",
392:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
393:       "com.google.javascript.jscomp.DefaultPassConfig$32",
394:       "com.google.javascript.jscomp.DefaultPassConfig$35",
395:       "com.google.javascript.jscomp.DefaultPassConfig$34",
396:       "com.google.javascript.rhino.head.ast.Loop",
397:       "com.google.javascript.jscomp.DefaultPassConfig$31",
398:       "com.google.javascript.jscomp.CrossModuleMethodMotion$IdGenerator",
399:       "com.google.javascript.jscomp.Region",
400:       "com.google.javascript.jscomp.DefaultPassConfig$30",
401:       "com.google.javascript.rhino.IR",
402:       "com.google.javascript.rhino.head.ast.GeneratorExpressionLoop",
403:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
404:       "com.google.javascript.jscomp.NodeTraversal$AbstractPostOrderCallback",
405:       "com.google.javascript.jscomp.DefaultPassConfig",
406:       "com.google.javascript.jscomp.Normalize",
407:       "com.google.javascript.jscomp.CompilerOptions$TracerMode",
408:       "com.google.javascript.jscomp.RhinoErrorReporter$OldRhinoErrorReporter",
409:       "com.google.javascript.jscomp.DefinitionProvider",
410:       "com.google.javascript.jscomp.NameAnalyzer$1",
411:       "com.google.common.collect.AbstractMultiset",
412:       "com.google.javascript.jscomp.DefaultPassConfig$29",
413:       "com.google.javascript.jscomp.DefaultPassConfig$26",
414:       "com.google.javascript.jscomp.DefaultPassConfig$25",
415:       "com.google.common.collect.Iterators",
416:       "com.google.javascript.jscomp.DefaultPassConfig$28",
417:       "com.google.javascript.rhino.head.IdFunctionCall",
418:       "com.google.javascript.jscomp.DefaultPassConfig$27",
419:       "com.google.javascript.jscomp.DefaultPassConfig$22",
420:       "com.google.javascript.jscomp.DefaultPassConfig$21",
421:       "com.google.javascript.jscomp.DefaultPassConfig$24",
422:       "com.google.javascript.jscomp.DefaultPassConfig$23",
423:       "com.google.javascript.jscomp.ProcessTweaks$TweakFunction",
424:       "com.google.javascript.rhino.head.ast.SwitchStatement",
425:       "com.google.javascript.jscomp.DependencyOptions",
426:       "com.google.common.collect.Multisets$EntrySet",
427:       "com.google.javascript.jscomp.DefaultPassConfig$20",
428:       "com.google.javascript.rhino.head.ast.DoLoop",
429:       "com.google.javascript.jscomp.SourceFile$OnDisk",
430:       "com.google.javascript.rhino.head.ScriptRuntime",
431:       "com.google.javascript.jscomp.DefaultPassConfig$19",
432:       "com.google.javascript.jscomp.DefaultPassConfig$18",
433:       "com.google.javascript.rhino.jstype.JSTypeNative",
434:       "com.google.javascript.rhino.jstype.AllType",
435:       "com.google.javascript.jscomp.DefaultPassConfig$15",
436:       "com.google.common.collect.Maps",
437:       "com.google.common.primitives.Ints",
438:       "com.google.javascript.jscomp.DefaultPassConfig$14",
439:       "com.google.javascript.jscomp.NodeTraversal$AbstractShallowStatementCallback",
440:       "com.google.common.collect.SetMultimap",
441:       "com.google.javascript.rhino.head.ast.ExpressionStatement",
442:       "com.google.javascript.jscomp.DefaultPassConfig$17",
443:       "com.google.javascript.jscomp.DefaultPassConfig$16",
444:       "com.google.common.collect.ImmutableSet$SerializedForm",
445:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
446:       "com.google.javascript.jscomp.DefaultPassConfig$7",
447:       "com.google.javascript.jscomp.DefaultPassConfig$11",
448:       "com.google.javascript.jscomp.DefaultPassConfig$8",
449:       "com.google.javascript.jscomp.DefaultPassConfig$10",
450:       "com.google.javascript.jscomp.DefaultPassConfig$5",
451:       "com.google.javascript.jscomp.DefaultPassConfig$13",
452:       "com.google.javascript.jscomp.DefaultPassConfig$6",
453:       "com.google.javascript.jscomp.DefaultPassConfig$12",
454:       "com.google.javascript.rhino.JSTypeExpression",
455:       "com.google.javascript.jscomp.DefaultPassConfig$9",
456:       "com.google.javascript.jscomp.PrintStreamErrorManager",
457:       "com.google.javascript.jscomp.Tracer$Stat",
458:       "com.google.javascript.rhino.head.ScriptableObject",
459:       "com.google.javascript.rhino.head.IdScriptableObject",
460:       "com.google.javascript.rhino.head.NativeFunction",
461:       "com.google.common.collect.RegularImmutableMap$Values",
462:       "com.google.javascript.jscomp.DefaultPassConfig$3",
463:       "com.google.javascript.jscomp.DefaultPassConfig$4",
464:       "com.google.javascript.jscomp.DefaultPassConfig$1",
465:       "com.google.javascript.jscomp.DefaultPassConfig$2",
466:       "com.google.javascript.rhino.head.ast.ObjectProperty",
467:       "com.google.javascript.rhino.head.Icode",
468:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
469:       "com.google.javascript.jscomp.type.ReverseAbstractInterpreter",
470:       "com.google.javascript.jscomp.CompilerOptions$LanguageMode",
471:       "com.google.javascript.rhino.head.ast.UnaryExpression",
472:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
473:       "com.google.javascript.rhino.jstype.ArrowType",
474:       "com.google.javascript.rhino.SimpleErrorReporter",
475:       "com.google.common.collect.Lists$RandomAccessPartition",
476:       "com.google.javascript.jscomp.type.FlowScope",
477:       "com.google.javascript.rhino.head.WrappedException",
478:       "com.google.javascript.jscomp.TightenTypes$ConcreteScope",
479:       "com.google.javascript.jscomp.graph.GraphNode",
480:       "com.google.javascript.rhino.jstype.NumberType",
481:       "com.google.javascript.rhino.head.debug.DebuggableObject",
482:       "com.google.javascript.rhino.head.Function",
483:       "com.google.common.collect.LinkedHashMultiset",
484:       "com.google.javascript.jscomp.PassFactory",
485:       "com.google.common.collect.Sets$2",
486:       "com.google.javascript.rhino.Node$IntPropListItem",
487:       "com.google.common.collect.Sets$3",
488:       "com.google.javascript.rhino.head.ast.LetNode",
489:       "com.google.common.collect.Sets$1",
490:       "com.google.javascript.jscomp.parsing.IRFactory$1",
491:       "com.google.common.collect.AbstractSortedSetMultimap",
492:       "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator",
493:       "com.google.javascript.jscomp.ControlFlowGraph",
494:       "com.google.javascript.jscomp.graph.GraphvizGraph",
495:       "com.google.javascript.rhino.head.ContextFactory$Listener",
496:       "com.google.javascript.rhino.head.NativeCall",
497:       "com.google.javascript.rhino.jstype.ModificationVisitor",
498:       "com.google.common.collect.AbstractMapEntry",
499:       "com.google.javascript.rhino.Node$AncestorIterable$1",
500:       "com.google.common.collect.Iterators$12",
501:       "com.google.common.collect.Iterators$11",
502:       "com.google.javascript.jscomp.ClosureCodingConvention",
503:       "com.google.common.base.Predicate",
504:       "com.google.javascript.jscomp.ReplaceIdGenerators$NameSupplier",
505:       "com.google.common.collect.AbstractMultimap$AsMap",
506:       "com.google.javascript.jscomp.ControlStructureCheck",
507:       "com.google.javascript.jscomp.VariableReferenceCheck",
508:       "com.google.javascript.jscomp.WarningsGuard",
509:       "com.google.javascript.jscomp.SourceMap",
510:       "com.google.javascript.rhino.head.ast.ForInLoop",
511:       "com.google.javascript.jscomp.Tracer$AtomicTracerStatMap",
512:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
513:       "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
514:       "com.google.common.collect.AbstractListMultimap",
515:       "com.google.javascript.jscomp.LightweightMessageFormatter$LineNumberingFormatter",
516:       "com.google.javascript.jscomp.CompilerOptions",
517:       "com.google.javascript.rhino.Node$StringNode",
518:       "com.google.javascript.rhino.jstype.TemplateType",
519:       "com.google.javascript.rhino.jstype.NamedType",
520:       "com.google.common.collect.Iterators$14",
521:       "com.google.common.collect.Iterators$13",
522:       "com.google.common.collect.Lists",
523:       "com.google.javascript.jscomp.CheckProvides",
524:       "com.google.javascript.rhino.head.ast.Block",
525:       "com.google.common.collect.UnmodifiableListIterator",
526:       "com.google.javascript.rhino.head.ast.SwitchCase",
527:       "com.google.common.io.ByteArrayDataInput",
528:       "com.google.javascript.jscomp.RhinoErrorReporter",
529:       "com.google.javascript.jscomp.CompilerOptions$AliasTransformation",
530:       "com.google.javascript.rhino.jstype.UnknownType",
531:       "com.google.common.base.Charsets",
532:       "com.google.javascript.rhino.head.ast.StringLiteral",
533:       "com.google.javascript.jscomp.CheckGlobalNames",
534:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
535:       "com.google.javascript.rhino.jstype.StaticSourceFile",
536:       "org.mozilla.classfile.ClassFileWriter$ClassFileFormatException",
537:       "com.google.javascript.rhino.head.ScriptableObject$Slot",
538:       "com.google.javascript.rhino.head.ast.ReturnStatement",
539:       "com.google.javascript.jscomp.ConcreteType$ConcreteFunctionType",
540:       "com.google.common.base.CharMatcher",
541:       "com.google.javascript.rhino.jstype.JSType$TypePair",
542:       "com.google.common.base.Joiner$MapJoiner",
543:       "com.google.javascript.jscomp.CheckRegExp",
544:       "com.google.javascript.jscomp.CheckGlobalThis",
545:       "com.google.common.collect.RegularImmutableMap$NonTerminalEntry",
546:       "com.google.common.collect.AbstractMultiset$EntrySet",
547:       "com.google.javascript.jscomp.ConcreteType$Factory",
548:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt$2",
549:       "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
550:       "com.google.common.base.Preconditions",
551:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt$1",
552:       "com.google.javascript.rhino.head.ast.ArrayLiteral",
553:       "com.google.javascript.rhino.head.ast.RegExpLiteral",
554:       "com.google.javascript.rhino.head.Token",
555:       "com.google.javascript.jscomp.BasicErrorManager",
556:       "com.google.javascript.jscomp.SourceFile$Generator",
557:       "com.google.javascript.jscomp.PerformanceTracker",
558:       "com.google.javascript.rhino.jstype.IndexedType",
559:       "com.google.javascript.jscomp.NodeUtil$MatchNodeType",
560:       "com.google.javascript.jscomp.ComposeWarningsGuard$GuardComparator",
561:       "com.google.javascript.jscomp.ProcessDefines",
562:       "com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph",
563:       "com.google.javascript.rhino.head.NativeArray",
564:       "com.google.javascript.jscomp.PeepholeFoldConstants",
565:       "com.google.javascript.rhino.Node$NumberNode",
566:       "com.google.javascript.jscomp.Scope",
567:       "com.google.common.io.ByteArrayDataOutput",
568:       "com.google.javascript.rhino.head.Parser",
569:       "com.google.common.collect.Iterators$6",
570:       "com.google.javascript.jscomp.ErrorFormat$2",
571:       "com.google.javascript.jscomp.Scope$Var",
572:       "com.google.common.collect.BiMap",
573:       "com.google.common.collect.Iterators$7",
574:       "com.google.javascript.jscomp.ErrorFormat$3",
575:       "com.google.javascript.rhino.head.NativeString",
576:       "com.google.javascript.jscomp.ErrorFormat$4",
577:       "com.google.javascript.rhino.head.ast.XmlRef",
578:       "com.google.common.collect.ImmutableSet",
579:       "com.google.common.collect.SortedSetMultimap",
580:       "com.google.javascript.jscomp.PeepholeReplaceKnownMethods",
581:       "com.google.javascript.jscomp.AbstractPeepholeOptimization",
582:       "com.google.javascript.rhino.jstype.JSTypeRegistry$ResolveMode",
583:       "com.google.javascript.rhino.head.ast.ElementGet",
584:       "com.google.common.collect.Iterators$1",
585:       "com.google.javascript.jscomp.DisambiguateProperties$Warnings",
586:       "com.google.common.collect.Iterators$2",
587:       "com.google.common.collect.Iterators$3",
588:       "com.google.javascript.jscomp.parsing.Annotation",
589:       "com.google.javascript.jscomp.AbstractMessageFormatter",
590:       "com.google.javascript.jscomp.DefinitionSite",
591:       "com.google.common.collect.Lists$StringAsImmutableList",
592:       "com.google.javascript.rhino.head.JavaScriptException",
593:       "com.google.javascript.rhino.head.ast.IdeErrorReporter",
594:       "com.google.javascript.jscomp.ProcessTweaks",
595:       "com.google.javascript.jscomp.NodeUtil$1",
596:       "com.google.javascript.rhino.head.ast.TryStatement",
597:       "com.google.javascript.jscomp.parsing.IRFactory",
598:       "com.google.javascript.jscomp.ErrorFormat$1",
599:       "com.google.javascript.rhino.head.TopLevel",
600:       "com.google.javascript.jscomp.Compiler$3",
601:       "com.google.javascript.jscomp.PrepareAst$PrepareAnnotations",
602:       "com.google.javascript.jscomp.NameAnalyzer",
603:       "com.google.javascript.jscomp.Scope$1",
604:       "com.google.common.collect.AbstractMultimap",
605:       "com.google.common.base.Predicates$ObjectPredicate$1",
606:       "com.google.common.collect.EmptyImmutableSet",
607:       "com.google.javascript.jscomp.UseSite",
608:       "com.google.common.io.Files",
609:       "com.google.javascript.jscomp.NodeUtil$MatchNotFunction",
610:       "com.google.javascript.jscomp.LinkedFlowScope$FlatFlowScopeCache",
611:       "com.google.javascript.jscomp.parsing.Config$LanguageMode",
612:       "com.google.javascript.rhino.head.ast.ArrayComprehension",
613:       "com.google.javascript.jscomp.OptimizeCalls$CallGraphCompilerPass",
614:       "com.google.javascript.jscomp.CodingConvention$Bind",
615:       "com.google.protobuf.AbstractMessage",
616:       "com.google.javascript.rhino.head.ScriptRuntime$1",
617:       "com.google.javascript.jscomp.PassFactory$1",
618:       "com.google.javascript.rhino.head.ObjToIntMap",
619:       "com.google.javascript.jscomp.PeepholeRemoveDeadCode",
620:       "com.google.common.collect.ImmutableMap$Builder",
621:       "com.google.javascript.rhino.head.ConstProperties",
622:       "com.google.javascript.jscomp.deps.SortedDependencies$MissingProvideException",
623:       "com.google.common.base.Predicates$ObjectPredicate$4",
624:       "com.google.javascript.jscomp.ReorderConstantExpression",
625:       "com.google.common.base.Predicates$ObjectPredicate$3",
626:       "com.google.javascript.jscomp.LinkedFlowScope",
627:       "com.google.common.base.Predicates$ObjectPredicate$2",
628:       "com.google.javascript.jscomp.NodeUtil$MatchNameNode",
629:       "com.google.common.collect.LinkedListMultimap$Node",
630:       "com.google.common.collect.ListMultimap",
631:       "com.google.javascript.rhino.JSDocInfo$Visibility",
632:       "com.google.javascript.rhino.head.ast.DestructuringForm",
633:       "com.google.javascript.jscomp.SourceMap$Format$4",
634:       "com.google.javascript.jscomp.SourceMap$Format$3",
635:       "com.google.javascript.jscomp.SourceMap$Format$2",
636:       "com.google.javascript.jscomp.SourceMap$Format$1",
637:       "com.google.javascript.jscomp.SourceAst",
638:       "com.google.common.base.Predicates$ObjectPredicate",
639:       "com.google.javascript.rhino.jstype.TernaryValue$1",
640:       "com.google.common.collect.RegularImmutableList",
641:       "com.google.javascript.jscomp.MessageBundle",
642:       "com.google.javascript.rhino.jstype.TernaryValue$3",
643:       "com.google.javascript.rhino.jstype.TernaryValue$2",
644:       "com.google.javascript.jscomp.CheckUnreachableCode",
645:       "com.google.javascript.jscomp.SourceExcerptProvider",
646:       "com.google.common.collect.Lists$TransformingRandomAccessList",
647:       "com.google.javascript.rhino.head.ScriptableObject$RelinkedSlot",
648:       "com.google.javascript.jscomp.ReferenceCollectingCallback$Behavior",
649:       "com.google.javascript.rhino.Node$PropListItem",
650:       "com.google.common.collect.RegularImmutableMap$KeySet",
651:       "com.google.common.collect.Maps$KeySet",
652:       "com.google.javascript.rhino.Node",
653:       "com.google.javascript.rhino.head.RhinoException",
654:       "com.google.javascript.rhino.head.ast.EmptyExpression",
655:       "com.google.javascript.rhino.SourcePosition",
656:       "com.google.javascript.rhino.head.ast.XmlLiteral",
657:       "com.google.javascript.rhino.head.ast.ContinueStatement",
658:       "com.google.javascript.jscomp.LoggerErrorManager",
659:       "com.google.javascript.jscomp.ComposeWarningsGuard",
660:       "com.google.javascript.jscomp.NodeTraversal",
661:       "com.google.javascript.rhino.head.ErrorReporter",
662:       "com.google.javascript.jscomp.NodeTraversal$AbstractScopedCallback",
663:       "com.google.common.collect.Multisets",
664:       "com.google.javascript.jscomp.VariableMap",
665:       "com.google.javascript.jscomp.JsAst",
666:       "com.google.javascript.rhino.head.ast.XmlMemberGet",
667:       "com.google.javascript.jscomp.ErrorFormat",
668:       "com.google.javascript.rhino.head.ast.Scope",
669:       "com.google.javascript.jscomp.AbstractCompiler$LifeCycleStage",
670:       "com.google.javascript.jscomp.ConcreteType",
671:       "com.google.javascript.rhino.head.Scriptable",
672:       "com.google.javascript.jscomp.JqueryCodingConvention",
673:       "com.google.common.io.ByteStreams",
674:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
675:       "com.google.javascript.jscomp.NodeUtil$BooleanResultPredicate",
676:       "com.google.javascript.jscomp.SourceMap$1",
677:       "com.google.javascript.jscomp.TightenTypes",
678:       "com.google.javascript.rhino.jstype.VoidType",
679:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler",
680:       "com.google.javascript.rhino.jstype.JSType",
681:       "com.google.common.io.ByteProcessor",
682:       "com.google.javascript.jscomp.ControlFlowGraph$Branch",
683:       "com.google.common.collect.Sets$SetView",
684:       "com.google.common.collect.ImmutableSet$Builder",
685:       "com.google.javascript.jscomp.SyntheticAst",
686:       "com.google.javascript.jscomp.DiagnosticGroups",
687:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
688:       "com.google.javascript.jscomp.ScopeCreator",
689:       "com.google.common.collect.RegularImmutableMap$TerminalEntry",
690:       "com.google.common.base.Predicates",
691:       "com.google.javascript.jscomp.graph.AdjacencyGraph",
692:       "com.google.javascript.jscomp.deps.SortedDependencies$CircularDependencyException",
693:       "com.google.common.collect.Lists$TransformingSequentialList",
694:       "com.google.javascript.rhino.head.NativeNumber",
695:       "com.google.javascript.jscomp.SourceFile",
696:       "com.google.javascript.rhino.head.ast.BreakStatement",
697:       "com.google.javascript.jscomp.PropertyRenamingPolicy",
698:       "com.google.javascript.jscomp.AstChangeProxy$ChangeListener",
699:       "com.google.javascript.rhino.jstype.FunctionBuilder",
700:       "com.google.javascript.jscomp.CodingConvention$DelegateRelationship",
701:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax$FoldArrayAction",
702:       "com.google.javascript.rhino.head.ast.WithStatement",
703:       "com.google.javascript.rhino.head.ScriptRuntime$MessageProvider",
704:       "com.google.common.collect.MapDifference",
705:       "com.google.javascript.jscomp.CompilerOptions$AliasTransformationHandler",
706:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
707:       "com.google.javascript.jscomp.SourceFile$Generated",
708:       "com.google.javascript.rhino.jstype.FunctionType",
709:       "com.google.javascript.rhino.head.ast.AstNode",
710:       "com.google.javascript.jscomp.Compiler",
711:       "com.google.javascript.jscomp.NodeTraversal$ScopedCallback",
712:       "com.google.javascript.jscomp.TypedScopeCreator",
713:       "com.google.common.base.CharMatcher$12",
714:       "com.google.common.base.CharMatcher$11",
715:       "com.google.javascript.rhino.head.Node",
716:       "com.google.common.base.CharMatcher$10",
717:       "com.google.javascript.rhino.jstype.TernaryValue",
718:       "com.google.common.io.Files$1",
719:       "com.google.javascript.jscomp.JSError",
720:       "com.google.common.base.CharMatcher$15",
721:       "com.google.common.base.CharMatcher$14",
722:       "com.google.common.collect.Lists$RandomAccessListWrapper",
723:       "com.google.common.base.CharMatcher$13",
724:       "com.google.common.base.Platform",
725:       "com.google.javascript.jscomp.TypedScopeCreator$GlobalScopeBuilder",
726:       "com.google.javascript.jscomp.PeepholeFoldWithTypes",
727:       "com.google.javascript.rhino.head.ast.KeywordLiteral",
728:       "com.google.javascript.jscomp.NodeTraversal$AbstractShallowCallback",
729:       "com.google.common.collect.TreeMultimap",
730:       "com.google.javascript.rhino.head.ast.Assignment",
731:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
732:       "com.google.javascript.rhino.jstype.UnionType",
733:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
734:       "com.google.javascript.rhino.head.ast.LabeledStatement",
735:       "com.google.javascript.jscomp.ControlFlowAnalysis",
736:       "com.google.javascript.jscomp.graph.LatticeElement",
737:       "com.google.common.collect.AbstractIndexedListIterator",
738:       "com.google.javascript.rhino.head.ast.XmlExpression",
739:       "com.google.javascript.jscomp.JSModuleGraph",
740:       "com.google.common.collect.AbstractMultimap$SortedKeySet",
741:       "com.google.javascript.jscomp.SyntacticScopeCreator$DefaultRedeclarationHandler",
742:       "com.google.common.collect.Sets",
743:       "com.google.common.collect.ImmutableCollection$EmptyImmutableCollection",
744:       "com.google.javascript.jscomp.TypedScopeCreator$LocalScopeBuilder",
745:       "com.google.javascript.rhino.head.Kit",
746:       "com.google.javascript.jscomp.BasicErrorManager$LeveledJSErrorComparator",
747:       "com.google.javascript.rhino.Node$ObjectPropListItem",
748:       "com.google.javascript.rhino.head.jdk15.VMBridge_jdk15",
749:       "com.google.javascript.rhino.head.ContextAction",
750:       "com.google.javascript.rhino.head.EvaluatorException",
751:       "com.google.javascript.jscomp.ProcessCommonJSModules",
752:       "com.google.javascript.rhino.head.ast.NumberLiteral",
753:       "com.google.common.collect.AbstractMultimap$SortedAsMap",
754:       "com.google.javascript.jscomp.Compiler$IntermediateState",
755:       "com.google.javascript.jscomp.AstChangeProxy",
756:       "com.google.javascript.jscomp.SymbolTable$2",
757:       "com.google.javascript.rhino.head.ast.ErrorNode",
758:       "com.google.common.collect.EmptyImmutableMap",
759:       "com.google.javascript.jscomp.SymbolTable$3",
760:       "com.google.javascript.jscomp.SymbolTable$4",
761:       "com.google.common.collect.Multimap",
762:       "com.google.javascript.jscomp.SourceMap$DetailLevel$2",
763:       "com.google.javascript.jscomp.SourceMap$DetailLevel$1",
764:       "com.google.javascript.jscomp.VarCheck",
765:       "com.google.javascript.jscomp.CompilerOptions$DevMode",
766:       "com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder",
767:       "com.google.javascript.rhino.head.Interpreter",
768:       "com.google.javascript.rhino.jstype.StringType",
769:       "com.google.javascript.rhino.head.ImporterTopLevel",
770:       "com.google.javascript.rhino.jstype.StaticSymbolTable",
771:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
772:       "com.google.javascript.jscomp.JSModuleGraph$ModuleDependenceException",
773:       "com.google.javascript.jscomp.graph.DiGraph",
774:       "com.google.common.base.Platform$1",
775:       "com.google.javascript.jscomp.parsing.ParserRunner",
776:       "com.google.common.collect.RegularImmutableMap$EntrySet",
777:       "com.google.javascript.rhino.head.ast.GeneratorExpression",
778:       "com.google.javascript.rhino.head.ast.XmlDotQuery",
779:       "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement",
780:       "com.google.javascript.jscomp.ConstCheck",
781:       "com.google.javascript.rhino.jstype.Visitor",
782:       "com.google.javascript.jscomp.TypeCheck",
783:       "com.google.javascript.jscomp.SymbolTable",
784:       "com.google.javascript.jscomp.deps.DependencyInfo",
785:       "com.google.javascript.jscomp.Compiler$10",
786:       "com.google.javascript.jscomp.WarningsGuard$Priority",
787:       "com.google.javascript.rhino.head.ContextFactory$GlobalSetter",
788:       "com.google.common.base.CharMatcher$Or",
789:       "com.google.javascript.rhino.head.ast.NodeVisitor",
790:       "com.google.protobuf.Message",
791:       "com.google.javascript.rhino.head.ast.ArrayComprehensionLoop",
792:       "com.google.javascript.rhino.head.Parser$ParserException",
793:       "com.google.common.collect.Table",
794:       "com.google.javascript.rhino.head.NativeObject"
795:     );
796:   } 
797: 
798:   private static void resetClasses() {
799:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NodeUtil_160_tmp__ESTest_scaffolding.class.getClassLoader()); 
800: 
801:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
802:       "com.google.common.collect.ImmutableCollection$EmptyImmutableCollection",
803:       "com.google.common.collect.ImmutableCollection",
804:       "com.google.common.collect.ImmutableSet",
805:       "com.google.common.collect.Hashing",
806:       "com.google.common.collect.ImmutableSet$ArrayImmutableSet",
807:       "com.google.common.collect.RegularImmutableSet",
808:       "com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate",
809:       "com.google.javascript.jscomp.NodeUtil$BooleanResultPredicate",
810:       "com.google.javascript.jscomp.NodeUtil$MayBeStringResultPredicate",
811:       "com.google.javascript.jscomp.NodeUtil$MatchNotFunction",
812:       "com.google.javascript.jscomp.NodeUtil",
813:       "com.google.javascript.jscomp.NodeUtil$MatchNodeType",
814:       "com.google.javascript.jscomp.NodeUtil$MatchNameNode",
815:       "com.google.javascript.jscomp.NodeUtil$VarCollector",
816:       "com.google.javascript.rhino.jstype.TernaryValue",
817:       "com.google.common.base.Predicates$ObjectPredicate",
818:       "com.google.javascript.rhino.TokenStream",
819:       "com.google.javascript.jscomp.AbstractPeepholeOptimization",
820:       "com.google.javascript.jscomp.PeepholeFoldWithTypes",
821:       "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments",
822:       "com.google.javascript.jscomp.CodingConventions$Proxy",
823:       "com.google.javascript.jscomp.GoogleCodingConvention",
824:       "com.google.javascript.jscomp.DiagnosticType",
825:       "com.google.javascript.jscomp.ClosureCodingConvention",
826:       "com.google.javascript.jscomp.CodingConventions",
827:       "com.google.javascript.jscomp.CodingConventions$DefaultCodingConvention",
828:       "com.google.common.collect.Sets",
829:       "com.google.common.base.Joiner",
830:       "com.google.common.base.Preconditions",
831:       "com.google.common.collect.Collections2",
832:       "com.google.common.base.Joiner$MapJoiner",
833:       "com.google.common.collect.Maps",
834:       "com.google.common.collect.ImmutableList",
835:       "com.google.common.collect.UnmodifiableIterator",
836:       "com.google.common.collect.UnmodifiableListIterator",
837:       "com.google.common.collect.EmptyImmutableList$1",
838:       "com.google.common.collect.EmptyImmutableList",
839:       "com.google.common.collect.Iterators$1",
840:       "com.google.common.collect.Iterators$2",
841:       "com.google.common.collect.Iterators",
842:       "com.google.javascript.jscomp.SourceFile",
843:       "com.google.javascript.jscomp.JSSourceFile",
844:       "com.google.javascript.jscomp.SourceFile$Builder",
845:       "com.google.common.base.Charsets",
846:       "com.google.javascript.jscomp.SourceFile$OnDisk",
847:       "com.google.javascript.jscomp.JsAst",
848:       "com.google.javascript.rhino.InputId",
849:       "com.google.common.io.Files",
850:       "com.google.common.io.Files$1",
851:       "com.google.common.io.ByteStreams",
852:       "com.google.javascript.jscomp.AbstractCompiler",
853:       "com.google.javascript.jscomp.JSError",
854:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax$1",
855:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
856:       "com.google.javascript.jscomp.Compiler",
857:       "com.google.javascript.jscomp.RhinoErrorReporter",
858:       "com.google.javascript.jscomp.RhinoErrorReporter$OldRhinoErrorReporter",
859:       "com.google.javascript.rhino.head.Kit",
860:       "com.google.javascript.rhino.head.optimizer.Codegen",
861:       "com.google.javascript.rhino.head.Icode",
862:       "com.google.javascript.rhino.head.Interpreter",
863:       "com.google.javascript.rhino.head.Context",
864:       "com.google.javascript.rhino.head.ContextFactory",
865:       "com.google.javascript.rhino.head.ScriptableObject",
866:       "com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider",
867:       "com.google.javascript.rhino.head.ScriptRuntime",
868:       "com.google.javascript.rhino.head.jdk13.VMBridge_jdk13",
869:       "com.google.javascript.rhino.head.jdk15.VMBridge_jdk15",
870:       "com.google.javascript.rhino.head.VMBridge",
871:       "com.google.javascript.rhino.ScriptRuntime",
872:       "com.google.common.collect.ImmutableMap",
873:       "com.google.common.collect.RegularImmutableMap",
874:       "com.google.common.collect.AbstractMapEntry",
875:       "com.google.common.collect.ImmutableEntry",
876:       "com.google.common.collect.RegularImmutableMap$TerminalEntry",
877:       "com.google.javascript.jscomp.RhinoErrorReporter$NewRhinoErrorReporter",
878:       "com.google.javascript.jscomp.PassFactory",
879:       "com.google.javascript.jscomp.Compiler$3",
880:       "com.google.javascript.jscomp.CodeChangeHandler$RecentChange",
881:       "com.google.common.collect.Lists",
882:       "com.google.javascript.jscomp.NodeTraversal",
883:       "com.google.javascript.jscomp.SyntacticScopeCreator",
884:       "com.google.javascript.jscomp.SyntacticScopeCreator$DefaultRedeclarationHandler",
885:       "com.google.javascript.rhino.SimpleErrorReporter",
886:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
887:       "com.google.common.collect.AbstractMultimap",
888:       "com.google.common.collect.AbstractSetMultimap",
889:       "com.google.common.collect.LinkedHashMultimap",
890:       "com.google.common.collect.AbstractListMultimap",
891:       "com.google.common.collect.ArrayListMultimap",
892:       "com.google.javascript.rhino.jstype.JSTypeRegistry$ResolveMode",
893:       "com.google.javascript.rhino.jstype.JSTypeNative",
894:       "com.google.javascript.rhino.jstype.JSType$1",
895:       "com.google.javascript.rhino.jstype.JSType",
896:       "com.google.javascript.rhino.jstype.ValueType",
897:       "com.google.javascript.rhino.jstype.BooleanType",
898:       "com.google.javascript.rhino.jstype.NullType",
899:       "com.google.javascript.rhino.jstype.NumberType",
900:       "com.google.javascript.rhino.jstype.StringType",
901:       "com.google.javascript.rhino.jstype.ObjectType",
902:       "com.google.javascript.rhino.jstype.UnknownType",
903:       "com.google.javascript.rhino.jstype.VoidType",
904:       "com.google.javascript.rhino.jstype.AllType",
905:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
906:       "com.google.javascript.rhino.jstype.FunctionType",
907:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
908:       "com.google.javascript.rhino.Node",
909:       "com.google.javascript.rhino.Node$StringNode",
910:       "com.google.javascript.rhino.Node$AbstractPropListItem",
911:       "com.google.javascript.rhino.Node$IntPropListItem",
912:       "com.google.javascript.rhino.jstype.ArrowType",
913:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
914:       "com.google.javascript.rhino.jstype.InstanceObjectType",
915:       "com.google.javascript.rhino.jstype.ObjectType$Property",
916:       "com.google.javascript.rhino.jstype.NoObjectType",
917:       "com.google.javascript.rhino.jstype.NoType",
918:       "com.google.javascript.rhino.jstype.NoResolvedType",
919:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
920:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
921:       "com.google.javascript.rhino.jstype.UnionType",
922:       "com.google.common.collect.RegularImmutableList",
923:       "com.google.javascript.rhino.jstype.FunctionBuilder",
924:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
925:       "com.google.javascript.jscomp.SymbolTable",
926:       "com.google.javascript.rhino.Token",
927:       "com.google.javascript.jscomp.TightenTypes",
928:       "com.google.javascript.rhino.Node$NumberNode",
929:       "com.google.javascript.rhino.IR",
930:       "com.google.javascript.rhino.Node$SideEffectFlags",
931:       "com.google.javascript.jscomp.ExploitAssigns",
932:       "com.google.javascript.jscomp.Compiler$IntermediateState",
933:       "com.google.javascript.jscomp.PassConfig",
934:       "com.google.javascript.jscomp.DefaultPassConfig",
935:       "com.google.javascript.jscomp.CrossModuleMethodMotion$IdGenerator",
936:       "com.google.javascript.jscomp.DefaultPassConfig$HotSwapPassFactory",
937:       "com.google.javascript.jscomp.DefaultPassConfig$1",
938:       "com.google.javascript.jscomp.DefaultPassConfig$2",
939:       "com.google.javascript.jscomp.DefaultPassConfig$3",
940:       "com.google.javascript.jscomp.DefaultPassConfig$4",
941:       "com.google.javascript.jscomp.DefaultPassConfig$5",
942:       "com.google.javascript.jscomp.DefaultPassConfig$6",
943:       "com.google.javascript.jscomp.DefaultPassConfig$7",
944:       "com.google.javascript.jscomp.DefaultPassConfig$8",
945:       "com.google.javascript.jscomp.DefaultPassConfig$9",
946:       "com.google.javascript.jscomp.DefaultPassConfig$10",
947:       "com.google.javascript.jscomp.DefaultPassConfig$11",
948:       "com.google.javascript.jscomp.DefaultPassConfig$12",
949:       "com.google.javascript.jscomp.DefaultPassConfig$13",
950:       "com.google.javascript.jscomp.DefaultPassConfig$14",
951:       "com.google.javascript.jscomp.DefaultPassConfig$15",
952:       "com.google.javascript.jscomp.DefaultPassConfig$16",
953:       "com.google.javascript.jscomp.DefaultPassConfig$17",
954:       "com.google.javascript.jscomp.DefaultPassConfig$18",
955:       "com.google.javascript.jscomp.DefaultPassConfig$19",
956:       "com.google.javascript.jscomp.DefaultPassConfig$20",
957:       "com.google.javascript.jscomp.DefaultPassConfig$21",
958:       "com.google.javascript.jscomp.DefaultPassConfig$22",
959:       "com.google.javascript.jscomp.DefaultPassConfig$23",
960:       "com.google.javascript.jscomp.DefaultPassConfig$24",
961:       "com.google.javascript.jscomp.DefaultPassConfig$25",
962:       "com.google.javascript.jscomp.DefaultPassConfig$26",
963:       "com.google.javascript.jscomp.DefaultPassConfig$27",
964:       "com.google.javascript.jscomp.DefaultPassConfig$28",
965:       "com.google.javascript.jscomp.DefaultPassConfig$29",
966:       "com.google.javascript.jscomp.DefaultPassConfig$30",
967:       "com.google.javascript.jscomp.DefaultPassConfig$31",
968:       "com.google.javascript.jscomp.DefaultPassConfig$32",
969:       "com.google.javascript.jscomp.DefaultPassConfig$33",
970:       "com.google.javascript.jscomp.DefaultPassConfig$34",
971:       "com.google.javascript.jscomp.DefaultPassConfig$35",
972:       "com.google.javascript.jscomp.DefaultPassConfig$36",
973:       "com.google.javascript.jscomp.DefaultPassConfig$37",
974:       "com.google.javascript.jscomp.DefaultPassConfig$38",
975:       "com.google.javascript.jscomp.DefaultPassConfig$39",
976:       "com.google.javascript.jscomp.DefaultPassConfig$40",
977:       "com.google.javascript.jscomp.DefaultPassConfig$41",
978:       "com.google.javascript.jscomp.DefaultPassConfig$42",
979:       "com.google.javascript.jscomp.DefaultPassConfig$43",
980:       "com.google.javascript.jscomp.DefaultPassConfig$44",
981:       "com.google.javascript.jscomp.DefaultPassConfig$45",
982:       "com.google.javascript.jscomp.DefaultPassConfig$46",
983:       "com.google.javascript.jscomp.DefaultPassConfig$47",
984:       "com.google.javascript.jscomp.DefaultPassConfig$48",
985:       "com.google.javascript.jscomp.DefaultPassConfig$49",
986:       "com.google.javascript.jscomp.DefaultPassConfig$50",
987:       "com.google.javascript.jscomp.DefaultPassConfig$51",
988:       "com.google.javascript.jscomp.DefaultPassConfig$52",
989:       "com.google.javascript.jscomp.DefaultPassConfig$53",
990:       "com.google.javascript.jscomp.DefaultPassConfig$54",
991:       "com.google.javascript.jscomp.DefaultPassConfig$55",
992:       "com.google.javascript.jscomp.DefaultPassConfig$56",
993:       "com.google.javascript.jscomp.DefaultPassConfig$57",
994:       "com.google.javascript.jscomp.DefaultPassConfig$58",
995:       "com.google.javascript.jscomp.DefaultPassConfig$59",
996:       "com.google.javascript.jscomp.DefaultPassConfig$60",
997:       "com.google.javascript.jscomp.DefaultPassConfig$61",
998:       "com.google.javascript.jscomp.DefaultPassConfig$62",
999:       "com.google.javascript.jscomp.DefaultPassConfig$63",
1000:       "com.google.javascript.jscomp.DefaultPassConfig$64",
1001:       "com.google.javascript.jscomp.DefaultPassConfig$65",
1002:       "com.google.javascript.jscomp.DefaultPassConfig$66",
1003:       "com.google.javascript.jscomp.DefaultPassConfig$67",
1004:       "com.google.javascript.jscomp.DefaultPassConfig$68",
1005:       "com.google.javascript.jscomp.DefaultPassConfig$69",
1006:       "com.google.javascript.jscomp.DefaultPassConfig$70",
1007:       "com.google.javascript.jscomp.DefaultPassConfig$71",
1008:       "com.google.javascript.jscomp.DefaultPassConfig$72",
1009:       "com.google.javascript.jscomp.DefaultPassConfig$73",
1010:       "com.google.javascript.jscomp.DefaultPassConfig$74",
1011:       "com.google.javascript.jscomp.DefaultPassConfig$75",
1012:       "com.google.javascript.jscomp.DefaultPassConfig$76",
1013:       "com.google.javascript.jscomp.DefaultPassConfig$77",
1014:       "com.google.javascript.jscomp.DefaultPassConfig$78",
1015:       "com.google.javascript.jscomp.DefaultPassConfig$79",
1016:       "com.google.javascript.jscomp.DefaultPassConfig$80",
1017:       "com.google.javascript.jscomp.DefaultPassConfig$81",
1018:       "com.google.javascript.jscomp.DefaultPassConfig$82",
1019:       "com.google.javascript.jscomp.DefaultPassConfig$83",
1020:       "com.google.javascript.jscomp.DefaultPassConfig$84",
1021:       "com.google.javascript.jscomp.DefaultPassConfig$85",
1022:       "com.google.javascript.jscomp.DefaultPassConfig$86",
1023:       "com.google.javascript.jscomp.DefaultPassConfig$87",
1024:       "com.google.javascript.jscomp.DefaultPassConfig$88",
1025:       "com.google.javascript.jscomp.DefaultPassConfig$89",
1026:       "com.google.javascript.jscomp.DefaultPassConfig$90",
1027:       "com.google.javascript.jscomp.DefaultPassConfig$91",
1028:       "com.google.javascript.jscomp.DefaultPassConfig$92",
1029:       "com.google.javascript.jscomp.DefaultPassConfig$93",
1030:       "com.google.javascript.jscomp.DefaultPassConfig$94",
1031:       "com.google.javascript.jscomp.DefaultPassConfig$98",
1032:       "com.google.javascript.jscomp.DefaultPassConfig$99",
1033:       "com.google.javascript.jscomp.PassConfig$State",
1034:       "com.google.javascript.jscomp.StatementFusion",
1035:       "com.google.common.io.CharStreams",
1036:       "com.google.javascript.jscomp.CompilerOptions$TracerMode",
1037:       "com.google.javascript.jscomp.ControlFlowAnalysis",
1038:       "com.google.javascript.jscomp.PeepholeReplaceKnownMethods",
1039:       "com.google.javascript.jscomp.MethodCompilerPass",
1040:       "com.google.javascript.jscomp.InlineSimpleMethods$1",
1041:       "com.google.javascript.jscomp.InlineSimpleMethods",
1042:       "com.google.javascript.jscomp.NodeTraversal$AbstractPostOrderCallback",
1043:       "com.google.javascript.jscomp.InvocationsCallback",
1044:       "com.google.javascript.jscomp.InlineSimpleMethods$InlineTrivialAccessors",
1045:       "com.google.javascript.jscomp.PeepholeRemoveDeadCode",
1046:       "com.google.javascript.jscomp.Normalize$PropagateConstantAnnotationsOverVars",
1047:       "com.google.javascript.jscomp.NodeUtil$MatchDeclaration",
1048:       "com.google.javascript.jscomp.ReorderConstantExpression",
1049:       "com.google.javascript.jscomp.CreateSyntheticBlocks",
1050:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler$NullAliasTransformation",
1051:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler",
1052:       "com.google.javascript.jscomp.CompilerOptions",
1053:       "com.google.javascript.jscomp.DependencyOptions",
1054:       "com.google.javascript.jscomp.ProcessCommonJSModules",
1055:       "com.google.javascript.jscomp.WarningsGuard",
1056:       "com.google.javascript.jscomp.ComposeWarningsGuard",
1057:       "com.google.common.primitives.Ints",
1058:       "com.google.javascript.jscomp.ComposeWarningsGuard$GuardComparator",
1059:       "com.google.javascript.jscomp.SourceMap$DetailLevel",
1060:       "com.google.javascript.jscomp.SourceMap$Format",
1061:       "com.google.javascript.jscomp.CompilerOptions$LanguageMode",
1062:       "com.google.javascript.jscomp.CompilerOptions$DevMode",
1063:       "com.google.javascript.jscomp.VariableRenamingPolicy",
1064:       "com.google.javascript.jscomp.PropertyRenamingPolicy",
1065:       "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
1066:       "com.google.javascript.jscomp.CompilerOptions$TweakProcessing",
1067:       "com.google.javascript.jscomp.ErrorFormat",
1068:       "com.google.javascript.jscomp.JSModule",
1069:       "com.google.javascript.jscomp.BasicErrorManager",
1070:       "com.google.javascript.jscomp.LoggerErrorManager",
1071:       "com.google.javascript.jscomp.AbstractMessageFormatter",
1072:       "com.google.javascript.jscomp.LightweightMessageFormatter$LineNumberingFormatter",
1073:       "com.google.javascript.jscomp.LightweightMessageFormatter",
1074:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt",
1075:       "com.google.javascript.jscomp.BasicErrorManager$LeveledJSErrorComparator",
1076:       "com.google.javascript.jscomp.CheckGlobalThis",
1077:       "com.google.javascript.jscomp.DiagnosticGroup",
1078:       "com.google.common.collect.SingletonImmutableSet",
1079:       "com.google.javascript.jscomp.CheckAccessControls",
1080:       "com.google.common.collect.AbstractIndexedListIterator",
1081:       "com.google.common.collect.Iterators$11",
1082:       "com.google.javascript.jscomp.TypeValidator",
1083:       "com.google.javascript.jscomp.VarCheck",
1084:       "com.google.javascript.jscomp.CheckGlobalNames",
1085:       "com.google.javascript.jscomp.VariableReferenceCheck",
1086:       "com.google.javascript.jscomp.ProcessDefines",
1087:       "com.google.common.base.CharMatcher$11",
1088:       "com.google.common.base.CharMatcher$12",
1089:       "com.google.common.base.CharMatcher$Or",
1090:       "com.google.common.base.Platform$1",
1091:       "com.google.common.base.Platform",
1092:       "com.google.common.base.CharMatcher$LookupTable",
1093:       "com.google.common.base.CharMatcher$15",
1094:       "com.google.common.base.CharMatcher$8",
1095:       "com.google.common.base.CharMatcher$1",
1096:       "com.google.common.base.CharMatcher$2",
1097:       "com.google.common.base.CharMatcher$3",
1098:       "com.google.common.base.CharMatcher$4",
1099:       "com.google.common.base.CharMatcher$5",
1100:       "com.google.common.base.CharMatcher$6",
1101:       "com.google.common.base.CharMatcher$7",
1102:       "com.google.common.base.CharMatcher",
1103:       "com.google.javascript.jscomp.ProcessTweaks$TweakFunction",
1104:       "com.google.javascript.jscomp.ProcessTweaks",
1105:       "com.google.javascript.jscomp.TypedScopeCreator",
1106:       "com.google.javascript.jscomp.FunctionTypeBuilder",
1107:       "com.google.javascript.jscomp.TypeCheck",
1108:       "com.google.javascript.jscomp.CheckDebuggerStatement",
1109:       "com.google.javascript.jscomp.CheckRegExp",
1110:       "com.google.javascript.jscomp.CheckSideEffects",
1111:       "com.google.javascript.jscomp.CheckUnreachableCode",
1112:       "com.google.javascript.jscomp.ConstCheck",
1113:       "com.google.javascript.jscomp.DisambiguateProperties$Warnings",
1114:       "com.google.javascript.jscomp.ControlStructureCheck",
1115:       "com.google.javascript.jscomp.StrictModeCheck",
1116:       "com.google.javascript.jscomp.CheckProvides",
1117:       "com.google.javascript.jscomp.JsMessageVisitor",
1118:       "com.google.javascript.jscomp.DiagnosticGroups",
1119:       "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
1120:       "com.google.javascript.jscomp.WarningsGuard$Priority",
1121:       "com.google.javascript.jscomp.SuppressDocWarningsGuard",
1122:       "com.google.common.collect.RegularImmutableMap$NonTerminalEntry",
1123:       "com.google.common.collect.RegularImmutableMap$EntrySet",
1124:       "com.google.javascript.jscomp.SourceFile$Preloaded",
1125:       "com.google.javascript.jscomp.CompilerInput",
1126:       "com.google.javascript.jscomp.Compiler$1",
1127:       "com.google.javascript.jscomp.Compiler$2",
1128:       "com.google.javascript.jscomp.Tracer$1",
1129:       "com.google.javascript.jscomp.Tracer$Stat",
1130:       "com.google.javascript.jscomp.Tracer",
1131:       "com.google.javascript.jscomp.Tracer$ThreadTrace",
1132:       "com.google.javascript.jscomp.Normalize",
1133:       "com.google.javascript.jscomp.Compiler$10",
1134:       "com.google.javascript.jscomp.parsing.Config$LanguageMode",
1135:       "com.google.javascript.jscomp.parsing.ParserRunner",
1136:       "com.google.javascript.jscomp.parsing.Config",
1137:       "com.google.common.collect.ImmutableMap$Builder",
1138:       "com.google.javascript.jscomp.parsing.Annotation",
1139:       "com.google.javascript.rhino.head.DefaultErrorReporter",
1140:       "com.google.javascript.rhino.head.CompilerEnvirons",
1141:       "com.google.javascript.rhino.head.Parser",
1142:       "com.google.javascript.rhino.head.TokenStream",
1143:       "com.google.javascript.rhino.head.ObjToIntMap",
1144:       "com.google.javascript.rhino.head.Node",
1145:       "com.google.javascript.rhino.head.ast.AstNode",
1146:       "com.google.javascript.rhino.head.ast.Jump",
1147:       "com.google.javascript.rhino.head.ast.Scope",
1148:       "com.google.javascript.rhino.head.ast.ScriptNode",
1149:       "com.google.javascript.rhino.head.ast.AstRoot",
1150:       "com.google.javascript.jscomp.parsing.IRFactory",
1151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
1152:       "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
1153:       "com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher",
1154:       "com.google.javascript.rhino.Node$ObjectPropListItem",
1155:       "com.google.javascript.jscomp.parsing.IRFactory$1",
1156:       "com.google.javascript.rhino.head.Node$NodeIterator",
1157:       "com.google.javascript.jscomp.PrepareAst",
1158:       "com.google.javascript.jscomp.PrepareAst$PrepareAnnotations",
1159:       "com.google.javascript.jscomp.Normalize$NormalizeStatements",
1160:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
1161:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$ContextualRenamer",
1162:       "com.google.common.collect.AbstractMultiset",
1163:       "com.google.common.collect.AbstractMapBasedMultiset",
1164:       "com.google.common.collect.HashMultiset",
1165:       "com.google.common.collect.Multisets",
1166:       "com.google.common.collect.Multisets$EntrySet",
1167:       "com.google.common.collect.AbstractMultiset$EntrySet",
1168:       "com.google.common.collect.AbstractMapBasedMultiset$1",
1169:       "com.google.common.base.Predicates",
1170:       "com.google.javascript.rhino.head.ast.ExpressionStatement",
1171:       "com.google.javascript.jscomp.BasicErrorManager$ErrorWithLevel",
1172:       "com.google.javascript.rhino.head.Parser$ParserException",
1173:       "com.google.javascript.rhino.head.ast.EmptyStatement",
1174:       "com.google.javascript.rhino.head.RhinoException",
1175:       "com.google.javascript.rhino.head.EvaluatorException",
1176:       "com.google.javascript.jscomp.PeepholeSimplifyRegExp",
1177:       "com.google.javascript.jscomp.VerboseMessageFormatter",
1178:       "com.google.javascript.jscomp.JqueryCodingConvention",
1179:       "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement",
1180:       "com.google.javascript.jscomp.PrintStreamErrorManager",
1181:       "com.google.javascript.rhino.head.ast.NumberLiteral",
1182:       "com.google.javascript.jscomp.PeepholeFoldConstants",
1183:       "com.google.javascript.jscomp.ExpandJqueryAliases",
1184:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
1185:       "com.google.javascript.jscomp.FindExportableNodes",
1186:       "com.google.javascript.jscomp.ConvertToDottedProperties",
1187:       "com.google.javascript.rhino.Node$AncestorIterable",
1188:       "com.google.javascript.jscomp.SyntheticAst",
1189:       "com.google.javascript.jscomp.ControlFlowAnalysis$1",
1190:       "com.google.common.collect.HashMultimap",
1191:       "com.google.javascript.jscomp.PreprocessorSymbolTable",
1192:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
1193:       "com.google.javascript.jscomp.CleanupPasses",
1194:       "com.google.javascript.jscomp.CleanupPasses$1",
1195:       "com.google.javascript.jscomp.CleanupPasses$2",
1196:       "com.google.javascript.jscomp.CleanupPasses$3",
1197:       "com.google.javascript.jscomp.InferJSDocInfo",
1198:       "com.google.javascript.jscomp.TightenTypes$ConcreteScope",
1199:       "com.google.common.collect.AbstractSortedSetMultimap",
1200:       "com.google.common.collect.TreeMultimap",
1201:       "com.google.common.collect.Ordering",
1202:       "com.google.common.collect.NaturalOrdering",
1203:       "com.google.common.collect.Maps$KeySet",
1204:       "com.google.common.collect.AbstractMultimap$KeySet",
1205:       "com.google.common.collect.AbstractMultimap$SortedKeySet",
1206:       "com.google.common.collect.Multimaps$Entries",
1207:       "com.google.common.collect.Multimaps$EntrySet",
1208:       "com.google.common.collect.AbstractMultimap$3",
1209:       "com.google.common.collect.AbstractMultimap$EntryIterator",
1210:       "com.google.javascript.rhino.head.ast.Name",
1211:       "com.google.javascript.rhino.head.ast.InfixExpression",
1212:       "com.google.javascript.rhino.head.ast.PropertyGet",
1213:       "com.google.javascript.jscomp.SimpleDefinitionFinder",
1214:       "com.google.javascript.rhino.jstype.EnumType",
1215:       "com.google.javascript.rhino.jstype.EnumElementType",
1216:       "com.google.javascript.rhino.jstype.ModificationVisitor",
1217:       "com.google.javascript.rhino.Node$AncestorIterable$1",
1218:       "com.google.javascript.jscomp.DeadAssignmentsElimination$1",
1219:       "com.google.javascript.jscomp.DeadAssignmentsElimination",
1220:       "com.google.javascript.jscomp.ProcessClosurePrimitives",
1221:       "com.google.javascript.jscomp.ProcessClosurePrimitives$ProvidedName",
1222:       "com.google.javascript.jscomp.LinkedFlowScope",
1223:       "com.google.javascript.jscomp.LinkedFlowScope$FlatFlowScopeCache",
1224:       "com.google.common.collect.EmptyImmutableMap",
1225:       "com.google.javascript.jscomp.CheckMissingGetCssName",
1226:       "com.google.javascript.jscomp.Scope$1",
1227:       "com.google.javascript.jscomp.Scope",
1228:       "com.google.javascript.jscomp.Scope$Var",
1229:       "com.google.javascript.jscomp.Scope$Arguments",
1230:       "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback$CopySideEffectSubexpressions",
1231:       "com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback",
1232:       "com.google.common.collect.ImmutableMultimap",
1233:       "com.google.common.collect.ImmutableListMultimap",
1234:       "com.google.common.collect.EmptyImmutableListMultimap",
1235:       "com.google.common.collect.LinkedListMultimap",
1236:       "com.google.common.collect.LinkedHashMultiset",
1237:       "com.google.javascript.jscomp.ReferenceCollectingCallback$1",
1238:       "com.google.javascript.jscomp.ReferenceCollectingCallback",
1239:       "com.google.javascript.jscomp.WhitelistWarningsGuard",
1240:       "com.google.common.io.LineReader",
1241:       "com.google.common.io.LineBuffer",
1242:       "com.google.common.io.LineReader$1",
1243:       "com.google.common.io.Closeables",
1244:       "com.google.common.collect.ImmutableSetMultimap",
1245:       "com.google.common.collect.EmptyImmutableSetMultimap",
1246:       "com.google.javascript.jscomp.Denormalize",
1247:       "com.google.javascript.jscomp.EmptyMessageBundle",
1248:       "com.google.javascript.jscomp.CheckSideEffects$StripProtection",
1249:       "com.google.javascript.rhino.head.ast.UnaryExpression",
1250:       "com.google.javascript.jscomp.FlowSensitiveInlineVariables$1",
1251:       "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
1252:       "com.google.javascript.jscomp.InlineProperties$PropertyInfo",
1253:       "com.google.javascript.jscomp.InlineProperties",
1254:       "com.google.javascript.rhino.jstype.SimpleSlot",
1255:       "com.google.javascript.jscomp.JSModuleGraph",
1256:       "com.google.javascript.rhino.JSDocInfo",
1257:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
1258:       "com.google.javascript.jscomp.RemoveUnusedClassProperties",
1259:       "com.google.javascript.rhino.jstype.ProxyObjectType",
1260:       "com.google.javascript.rhino.jstype.NamedType",
1261:       "com.google.javascript.jscomp.PassConfig$PassConfigDelegate",
1262:       "com.google.javascript.jscomp.NameAnalyzer$1",
1263:       "com.google.javascript.jscomp.NameAnalyzer",
1264:       "com.google.javascript.jscomp.LineNumberCheck",
1265:       "com.google.javascript.jscomp.SourceFile$Generated",
1266:       "com.google.common.collect.Multimaps$Values",
1267:       "com.google.common.collect.AbstractMultimap$2",
1268:       "com.google.javascript.jscomp.OptimizeArgumentsArray",
1269:       "com.google.javascript.jscomp.Normalize$VerifyConstants",
1270:       "com.google.javascript.jscomp.Compiler$6",
1271:       "com.google.javascript.jscomp.CodeChangeHandler$ForbiddenChange",
1272:       "com.google.javascript.jscomp.FunctionNames",
1273:       "com.google.javascript.jscomp.FunctionNames$FunctionListExtractor",
1274:       "com.google.javascript.jscomp.RecordFunctionInformation",
1275:       "com.google.protobuf.AbstractMessageLite",
1276:       "com.google.protobuf.AbstractMessage",
1277:       "com.google.protobuf.GeneratedMessage",
1278:       "com.google.protobuf.UnknownFieldSet",
1279:       "com.google.javascript.jscomp.FunctionInformationMap",
1280:       "com.google.protobuf.AbstractMessageLite$Builder",
1281:       "com.google.protobuf.AbstractMessage$Builder",
1282:       "com.google.protobuf.GeneratedMessage$Builder",
1283:       "com.google.javascript.jscomp.FunctionInformationMap$Builder",
1284:       "com.google.javascript.jscomp.VariableMap",
1285:       "com.google.common.io.ByteStreams$1",
1286:       "com.google.common.io.CharStreams$2",
1287:       "com.google.javascript.jscomp.ExternExportsPass",
1288:       "com.google.common.collect.SingletonImmutableList",
1289:       "com.google.javascript.jscomp.RenameLabels$DefaultNameSupplier",
1290:       "com.google.javascript.jscomp.NameGenerator",
1291:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$InlineRenamer",
1292:       "com.google.javascript.jscomp.graph.Graph",
1293:       "com.google.javascript.jscomp.graph.DiGraph",
1294:       "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
1295:       "com.google.javascript.jscomp.NameReferenceGraph",
1296:       "com.google.javascript.jscomp.NameReferenceGraph$Name",
1297:       "com.google.javascript.jscomp.MinimizeExitPoints",
1298:       "com.google.javascript.jscomp.ObjectPropertyStringPreprocess",
1299:       "com.google.javascript.jscomp.RemoveTryCatch",
1300:       "com.google.javascript.jscomp.RemoveTryCatch$RemoveTryCatchCode",
1301:       "com.google.javascript.jscomp.GlobalNamespace",
1302:       "com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace",
1303:       "com.google.javascript.jscomp.CheckAccidentalSemicolon",
1304:       "com.google.javascript.jscomp.Denormalize$StripConstantAnnotations",
1305:       "com.google.common.collect.ImmutableMultimap$Builder",
1306:       "com.google.common.collect.ImmutableSetMultimap$Builder",
1307:       "com.google.common.collect.ImmutableMultimap$BuilderMultimap",
1308:       "com.google.common.collect.ImmutableSetMultimap$BuilderMultimap",
1309:       "com.google.common.collect.AbstractMultimap$AsMap",
1310:       "com.google.common.collect.Maps$EntrySet",
1311:       "com.google.common.collect.AbstractMultimap$AsMap$AsMapEntries",
1312:       "com.google.common.collect.AbstractMultimap$AsMap$AsMapIterator",
1313:       "com.google.common.collect.AbstractMultimap$WrappedCollection",
1314:       "com.google.common.collect.AbstractMultimap$WrappedSet",
1315:       "com.google.common.collect.AbstractMultimap$WrappedCollection$WrappedIterator",
1316:       "com.google.javascript.jscomp.LinkedFlowScope$LinkedFlowSlot",
1317:       "com.google.common.collect.EmptyImmutableSet",
1318:       "com.google.javascript.rhino.Node$NodeMismatch",
1319:       "com.google.common.base.Predicates$OrPredicate",
1320:       "com.google.javascript.jscomp.Compiler$CodeBuilder",
1321:       "com.google.javascript.rhino.head.ast.Assignment",
1322:       "com.google.javascript.jscomp.SourceInformationAnnotator",
1323:       "com.google.javascript.rhino.head.ast.FunctionCall",
1324:       "com.google.javascript.rhino.head.Token",
1325:       "com.google.javascript.jscomp.CheckMissingReturn$1",
1326:       "com.google.javascript.jscomp.CheckMissingReturn$2",
1327:       "com.google.javascript.jscomp.CheckMissingReturn",
1328:       "com.google.javascript.jscomp.CombinedCompilerPass",
1329:       "com.google.common.collect.Iterators$13",
1330:       "com.google.common.collect.ForwardingObject",
1331:       "com.google.common.collect.ForwardingCollection",
1332:       "com.google.common.collect.ForwardingSet",
1333:       "com.google.common.collect.LinkedHashMultimap$SetDecorator",
1334:       "com.google.common.collect.LinkedHashMultimap$SetDecorator$1",
1335:       "com.google.common.collect.ImmutableListMultimap$Builder",
1336:       "com.google.javascript.jscomp.TypeInferencePass",
1337:       "com.google.javascript.jscomp.CoalesceVariableNames$1",
1338:       "com.google.javascript.jscomp.CoalesceVariableNames",
1339:       "com.google.javascript.rhino.jstype.ParameterizedType",
1340:       "com.google.javascript.jscomp.Compiler$4",
1341:       "com.google.javascript.jscomp.GlobalNamespace$Ref",
1342:       "com.google.javascript.jscomp.NodeTraversal$AbstractShallowCallback",
1343:       "com.google.javascript.jscomp.FieldCleanupPass$QualifiedNameSearchTraversal",
1344:       "com.google.javascript.jscomp.MoveFunctionDeclarations",
1345:       "com.google.javascript.jscomp.ReplaceIdGenerators",
1346:       "com.google.javascript.jscomp.AbstractMessageFormatter$1",
1347:       "com.google.javascript.jscomp.AbstractMessageFormatter$Color",
1348:       "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator",
1349:       "com.google.common.collect.LinkedListMultimap$3",
1350:       "com.google.common.collect.LinkedListMultimap$NodeIterator",
1351:       "com.google.common.collect.LinkedListMultimap$3$1",
1352:       "com.google.javascript.rhino.head.ast.ErrorNode",
1353:       "com.google.javascript.jscomp.GlobalNamespace$Name$Type",
1354:       "com.google.javascript.jscomp.NameReferenceGraph$Reference",
1355:       "com.google.javascript.jscomp.GatherRawExports",
1356:       "com.google.common.collect.AbstractMultimap$4",
1357:       "com.google.common.collect.Multimaps$Values$1",
1358:       "com.google.common.collect.AbstractMultimap$SortedAsMap",
1359:       "com.google.javascript.jscomp.RenameProperties$1",
1360:       "com.google.javascript.jscomp.RenameProperties",
1361:       "com.google.javascript.jscomp.LoggerErrorManager$1",
1362:       "com.google.javascript.jscomp.Compiler$8",
1363:       "com.google.common.collect.Iterators$12",
1364:       "com.google.javascript.jscomp.CodingConvention$AssertionFunctionSpec",
1365:       "com.google.javascript.jscomp.ClosureCodingConvention$AssertInstanceofSpec",
1366:       "com.google.javascript.jscomp.MethodCompilerPass$GetExternMethods",
1367:       "com.google.javascript.jscomp.MethodCompilerPass$GatherSignatures",
1368:       "com.google.javascript.jscomp.CustomPassExecutionTime",
1369:       "com.google.common.collect.AbstractIterator",
1370:       "com.google.common.collect.Iterators$7",
1371:       "com.google.common.collect.AbstractIterator$State",
1372:       "com.google.javascript.jscomp.XtbMessageBundle$SecureEntityResolver",
1373:       "com.google.javascript.jscomp.XtbMessageBundle",
1374:       "com.google.javascript.jscomp.GoogleJsMessageIdGenerator",
1375:       "com.google.javascript.jscomp.XtbMessageBundle$Handler",
1376:       "com.google.javascript.jscomp.Compiler$5",
1377:       "com.google.javascript.jscomp.AbstractCompiler$LifeCycleStage",
1378:       "com.google.common.collect.Count",
1379:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
1380:     );
1381:   }
1382: }

[MASTER] 19:11:07.381 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
assertNotNull(peepholeSubstituteAlternateSyntax0);

Compiler compiler0 = new Compiler();
assertNotNull(compiler0);
assertEquals(0.0, compiler0.getProgress(), 0.01);

NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
assertNotNull(nodeTraversal0);
assertEquals(0.0, compiler0.getProgress(), 0.01);
assertEquals(0, nodeTraversal0.getLineNumber());
assertEquals("", nodeTraversal0.getSourceName());

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

SyntheticAst syntheticAst0 = new SyntheticAst("com.google.javascript.jscomp.RenameLabels");
assertNotNull(syntheticAst0);

Node node0 = syntheticAst0.getAstRoot(compiler0);
assertNotNull(node0);
assertEquals(0.0, compiler0.getProgress(), 0.01);
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertEquals(132, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertTrue(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertFalse(node0.isFromExterns());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(54, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);

boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
assertEquals(0.0, compiler0.getProgress(), 0.01);
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertEquals(132, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertTrue(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertFalse(node0.isFromExterns());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertTrue(boolean0);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(54, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertEquals(0.0, compiler0.getProgress(), 0.01);
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertEquals(132, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertTrue(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertFalse(node0.isFromExterns());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(54, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);

boolean boolean1 = NodeUtil.containsFunction(node0);
assertFalse(boolean1 == boolean0);
assertEquals(0.0, compiler0.getProgress(), 0.01);
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertEquals(132, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertTrue(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertFalse(node0.isFromExterns());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(boolean1);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(54, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);

NodeUtil.getImpureBooleanValue(node0);
assertEquals(0.0, compiler0.getProgress(), 0.01);
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertEquals(132, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertTrue(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertFalse(node0.isFromExterns());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(54, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);

boolean boolean2 = NodeUtil.isPrototypeProperty(node0);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);
assertEquals(0.0, compiler0.getProgress(), 0.01);
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertEquals(132, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertTrue(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertFalse(node0.isFromExterns());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(boolean2);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(54, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);

boolean boolean3 = NodeUtil.isSymmetricOperation(node0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertFalse(boolean3 == boolean0);
assertEquals(0.0, compiler0.getProgress(), 0.01);
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertEquals(132, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertTrue(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertFalse(node0.isFromExterns());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(boolean3);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(54, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);

Node node1 = new Node(43, node0, node0, node0, 40, (-1462));
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(0.0, compiler0.getProgress(), 0.01);
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertEquals(132, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertTrue(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertFalse(node0.isFromExterns());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isParamList());
assertTrue(node1.isFalse());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getSourceOffset());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNew());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isAdd());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isComma());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertNull(node1.getSourceFileName());
assertFalse(node1.isOr());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDec());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isThis());
assertEquals(43, node1.getType());
assertFalse(node1.isFromExterns());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isBlock());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isSetterDef());
assertTrue(node1.hasChildren());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(54, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

boolean boolean4 = NodeUtil.isSwitchCase(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean4 == boolean1);
assertFalse(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertEquals(0.0, compiler0.getProgress(), 0.01);
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertEquals(132, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertTrue(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertFalse(node0.isFromExterns());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isParamList());
assertTrue(node1.isFalse());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getSourceOffset());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNew());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isAdd());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isComma());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertNull(node1.getSourceFileName());
assertFalse(node1.isOr());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDec());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isThis());
assertEquals(43, node1.getType());
assertFalse(node1.isFromExterns());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isBlock());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isSetterDef());
assertTrue(node1.hasChildren());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(boolean4);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(54, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotSame(node0, node1);
assertNotSame(node1, node0);

boolean boolean5 = NodeUtil.isLoopStructure(node0);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean3);
assertFalse(boolean5 == boolean0);
assertEquals(0.0, compiler0.getProgress(), 0.01);
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertEquals(132, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertTrue(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertFalse(node0.isFromExterns());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(boolean5);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(54, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNotSame(node0, node1);

boolean boolean6 = NodeUtil.isNumericResultHelper(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean1);
assertFalse(boolean6 == boolean0);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean3);
assertEquals(0.0, compiler0.getProgress(), 0.01);
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertEquals(132, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertTrue(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertFalse(node0.isFromExterns());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isParamList());
assertTrue(node1.isFalse());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getSourceOffset());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNew());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isAdd());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isComma());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertNull(node1.getSourceFileName());
assertFalse(node1.isOr());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDec());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isThis());
assertEquals(43, node1.getType());
assertFalse(node1.isFromExterns());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isBlock());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertEquals(1, node1.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isSetterDef());
assertTrue(node1.hasChildren());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(boolean6);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(54, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotSame(node0, node1);
assertNotSame(node1, node0);

SourceFile sourceFile0 = (SourceFile)NodeUtil.getSourceFile(node0);
assertNotNull(sourceFile0);
assertFalse(node0.equals((Object)node1));
assertFalse(sourceFile0.isExtern());
assertEquals("com.google.javascript.jscomp.RenameLabels", sourceFile0.getOriginalPath());
assertEquals("com.google.javascript.jscomp.RenameLabels", sourceFile0.getName());
assertEquals("com.google.javascript.jscomp.RenameLabels", sourceFile0.toString());
assertEquals(0.0, compiler0.getProgress(), 0.01);
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertEquals(132, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertTrue(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertFalse(node0.isFromExterns());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(54, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNotSame(node0, node1);

Node node2 = ControlFlowAnalysis.computeFollowNode(node0);
assertNull(node2);
assertFalse(node0.equals((Object)node1));
assertEquals(0.0, compiler0.getProgress(), 0.01);
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertEquals(132, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertEquals("com.google.javascript.jscomp.RenameLabels", node0.getSourceFileName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertTrue(node0.isScript());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertFalse(node0.isFromExterns());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(54, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNotSame(node0, node1);

NodeUtil.tryMergeBlock((Node) null);


entry: sources/closure-16/build/classes
entry: sources/closure-16/lib/args4j.jar
entry: sources/closure-16/lib/guava.jar
entry: sources/closure-16/lib/json.jar
entry: sources/closure-16/lib/jsr305.jar
entry: sources/closure-16/lib/protobuf-java.jar
entry: sources/closure-16/build/lib/rhino.jar
entry: sources/closure-16/lib/ant.jar
** CP: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar
* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: com.google.javascript.rhino.head.IdScriptableObject
* Starting Client-0
* Connecting to master process on port 13538
* Analyzing classpath: 
  - sources/closure-16/build/classes
  - sources/closure-16/lib/args4j.jar
  - sources/closure-16/lib/guava.jar
  - sources/closure-16/lib/json.jar
  - sources/closure-16/lib/jsr305.jar
  - sources/closure-16/lib/protobuf-java.jar
  - sources/closure-16/build/lib/rhino.jar
  - sources/closure-16/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.head.IdScriptableObject
* Test criterion:
  - Branch Coverage
* Total number of test goals for DYNAMOSA: 251
* Using seed 1566103231790
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 87 / 251
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.32669322709163345
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3745019920318725
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.450199203187251
[MASTER] 06:41:27.828 [logback-1] WARN  TestUsageChecker - class com.google.javascript.rhino.head.ContextFactory$1GlobalSetterImpl looks like an anonymous class, ignoring it (although reflection says false) GlobalSetterImpl
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.46613545816733065
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.4820717131474104
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.4820717131474104
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.4860557768924303
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5059760956175299
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5059760956175299
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5338645418326693
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5418326693227091
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5697211155378487
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5697211155378487
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5697211155378487
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5776892430278885
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5776892430278885
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5776892430278885
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5936254980079682
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5936254980079682
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6055776892430279
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6055776892430279
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6294820717131474
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6334661354581673
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6334661354581673
* Search finished after 302s and 146 generations, 40429 statements, best individual has fitness: 92.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6334661354581673
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 60%
* Total number of goals: 251
* Number of covered goals: 151
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6334661354581673
* Generated 37 tests with total length 120
* Resulting test suite's coverage: 63%
* Generating assertions
[MASTER] 06:46:46.888 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6799% of time used, but only 11/37 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 6%
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6334661354581673
* Compiling and checking tests
[MASTER] 06:47:00.958 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 06:47:00.959 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.enter();
NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
importerTopLevel0.defineOwnProperty(context0, "constructor", nativeArray0);
assertEquals(130, Context.VERSION_1_3);


[MASTER] 06:47:07.166 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 06:47:07.167 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getContext();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
TopLevel topLevel0 = new TopLevel();
topLevel0.exportAsJSClass(3, importerTopLevel0, false);

[MASTER] 06:47:09.169 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 06:47:09.170 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getContext();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
IdFunctionObject idFunctionObject0 = new IdFunctionObject(importerTopLevel0, context0, (-4586), 150);
importerTopLevel0.execIdCall(idFunctionObject0, context0, idFunctionObject0, idFunctionObject0, context0.emptyArgs);

[MASTER] 06:47:12.102 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 06:47:12.103 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getCurrentContext();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
importerTopLevel0.setInstanceIdValue(13, context0);

[MASTER] 06:47:16.864 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 06:47:16.864 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getContext();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
importerTopLevel0.getInstanceIdValue(7);

[MASTER] 06:47:27.225 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 06:47:27.226 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = new Context();
ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
importerTopLevel0.initPrototypeValue(120, "error reporter", context0, 6);

[MASTER] 06:47:34.627 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 06:47:34.634 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.enter();
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(120, Context.VERSION_1_2);
assertEquals(170, Context.VERSION_1_7);
assertFalse(context0.generateObserverCount);
assertEquals(130, Context.VERSION_1_3);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(180, Context.VERSION_1_8);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(140, Context.VERSION_1_4);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(150, Context.VERSION_1_5);
assertEquals(110, Context.VERSION_1_1);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(160, Context.VERSION_1_6);
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(context0.isSealed());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebugChanged());
assertNotNull(context0);

ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(120, Context.VERSION_1_2);
assertEquals(170, Context.VERSION_1_7);
assertFalse(context0.generateObserverCount);
assertEquals(130, Context.VERSION_1_3);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(180, Context.VERSION_1_8);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(140, Context.VERSION_1_4);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(150, Context.VERSION_1_5);
assertEquals(110, Context.VERSION_1_1);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(160, Context.VERSION_1_6);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(context0.isSealed());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals("object", importerTopLevel0.getTypeOf());
assertFalse(importerTopLevel0.isSealed());
assertEquals("global", importerTopLevel0.getClassName());
assertTrue(importerTopLevel0.hasPrototypeMap());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertFalse(importerTopLevel0.isEmpty());
assertTrue(importerTopLevel0.isExtensible());
assertNotNull(importerTopLevel0);

NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(120, Context.VERSION_1_2);
assertEquals(170, Context.VERSION_1_7);
assertFalse(context0.generateObserverCount);
assertEquals(130, Context.VERSION_1_3);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(180, Context.VERSION_1_8);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(140, Context.VERSION_1_4);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(150, Context.VERSION_1_5);
assertEquals(110, Context.VERSION_1_1);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(160, Context.VERSION_1_6);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(context0.isSealed());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals("Array", nativeArray0.getClassName());
assertTrue(nativeArray0.isExtensible());
assertEquals(0L, nativeArray0.getLength());
assertEquals(0L, nativeArray0.jsGet_length());
assertFalse(nativeArray0.hasPrototypeMap());
assertEquals("object", nativeArray0.getTypeOf());
assertTrue(nativeArray0.isEmpty());
assertFalse(nativeArray0.isSealed());
assertFalse(nativeArray0.avoidObjectDetection());
assertNotNull(nativeArray0);

importerTopLevel0.exportAsJSClass((-46), nativeArray0, false);

[MASTER] 06:47:37.326 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 06:47:37.329 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getCurrentContext();
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(150, Context.VERSION_1_5);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(110, Context.VERSION_1_1);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(170, Context.VERSION_1_7);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(120, Context.VERSION_1_2);
assertEquals(140, Context.VERSION_1_4);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(180, Context.VERSION_1_8);
assertFalse(context0.generateObserverCount);
assertEquals(100, Context.VERSION_1_0);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertFalse(context0.isSealed());
assertEquals(0, context0.getOptimizationLevel());
assertTrue(context0.isGeneratingSource());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getInstructionObserverThreshold());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertNotNull(context0);

ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(150, Context.VERSION_1_5);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(110, Context.VERSION_1_1);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(170, Context.VERSION_1_7);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(120, Context.VERSION_1_2);
assertEquals(140, Context.VERSION_1_4);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(180, Context.VERSION_1_8);
assertFalse(context0.generateObserverCount);
assertEquals(100, Context.VERSION_1_0);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(0, ScriptableObject.EMPTY);
assertFalse(context0.isSealed());
assertEquals(0, context0.getOptimizationLevel());
assertTrue(context0.isGeneratingSource());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getInstructionObserverThreshold());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertFalse(importerTopLevel0.isSealed());
assertEquals("global", importerTopLevel0.getClassName());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertFalse(importerTopLevel0.isEmpty());
assertTrue(importerTopLevel0.hasPrototypeMap());
assertTrue(importerTopLevel0.isExtensible());
assertEquals("object", importerTopLevel0.getTypeOf());
assertNotNull(importerTopLevel0);

importerTopLevel0.initPrototypeMethod((Object) null, (-77), "W&mJ$ZRT50X:~U|", 4);

[MASTER] 06:47:39.478 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 06:47:39.514 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.enter();
assertEquals(170, Context.VERSION_1_7);
assertFalse(context0.generateObserverCount);
assertEquals(120, Context.VERSION_1_2);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(160, Context.VERSION_1_6);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(110, Context.VERSION_1_1);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(150, Context.VERSION_1_5);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(140, Context.VERSION_1_4);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(180, Context.VERSION_1_8);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getOptimizationLevel());
assertTrue(context0.isGeneratingSource());
assertFalse(context0.isSealed());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebugChanged());
assertNotNull(context0);

NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
assertEquals(170, Context.VERSION_1_7);
assertFalse(context0.generateObserverCount);
assertEquals(120, Context.VERSION_1_2);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(160, Context.VERSION_1_6);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(110, Context.VERSION_1_1);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(150, Context.VERSION_1_5);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(140, Context.VERSION_1_4);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(180, Context.VERSION_1_8);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getOptimizationLevel());
assertTrue(context0.isGeneratingSource());
assertFalse(context0.isSealed());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebugChanged());
assertTrue(nativeArray0.isEmpty());
assertFalse(nativeArray0.isSealed());
assertFalse(nativeArray0.avoidObjectDetection());
assertTrue(nativeArray0.isExtensible());
assertEquals("Array", nativeArray0.getClassName());
assertEquals(0L, nativeArray0.getLength());
assertFalse(nativeArray0.hasPrototypeMap());
assertEquals("object", nativeArray0.getTypeOf());
assertEquals(0L, nativeArray0.jsGet_length());
assertNotNull(nativeArray0);

ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
assertEquals(170, Context.VERSION_1_7);
assertFalse(context0.generateObserverCount);
assertEquals(120, Context.VERSION_1_2);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(160, Context.VERSION_1_6);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(110, Context.VERSION_1_1);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(150, Context.VERSION_1_5);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(140, Context.VERSION_1_4);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(180, Context.VERSION_1_8);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getOptimizationLevel());
assertTrue(context0.isGeneratingSource());
assertFalse(context0.isSealed());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebugChanged());
assertTrue(importerTopLevel0.hasPrototypeMap());
assertFalse(importerTopLevel0.isEmpty());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertFalse(importerTopLevel0.isSealed());
assertEquals("global", importerTopLevel0.getClassName());
assertEquals("object", importerTopLevel0.getTypeOf());
assertTrue(importerTopLevel0.isExtensible());
assertNotNull(importerTopLevel0);

boolean boolean0 = importerTopLevel0.has("constructor", (Scriptable) nativeArray0);
assertEquals(170, Context.VERSION_1_7);
assertFalse(context0.generateObserverCount);
assertEquals(120, Context.VERSION_1_2);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(160, Context.VERSION_1_6);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(110, Context.VERSION_1_1);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(150, Context.VERSION_1_5);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(140, Context.VERSION_1_4);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(180, Context.VERSION_1_8);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getOptimizationLevel());
assertTrue(context0.isGeneratingSource());
assertFalse(context0.isSealed());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebugChanged());
assertTrue(nativeArray0.isEmpty());
assertFalse(nativeArray0.isSealed());
assertFalse(nativeArray0.avoidObjectDetection());
assertTrue(nativeArray0.isExtensible());
assertEquals("Array", nativeArray0.getClassName());
assertEquals(0L, nativeArray0.getLength());
assertFalse(nativeArray0.hasPrototypeMap());
assertEquals("object", nativeArray0.getTypeOf());
assertEquals(0L, nativeArray0.jsGet_length());
assertTrue(importerTopLevel0.hasPrototypeMap());
assertFalse(importerTopLevel0.isEmpty());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertFalse(importerTopLevel0.isSealed());
assertEquals("global", importerTopLevel0.getClassName());
assertEquals("object", importerTopLevel0.getTypeOf());
assertTrue(importerTopLevel0.isExtensible());
assertFalse(boolean0);


[MASTER] 06:47:41.719 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 06:47:41.725 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getContext();
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(120, Context.VERSION_1_2);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(160, Context.VERSION_1_6);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(130, Context.VERSION_1_3);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertFalse(context0.generateObserverCount);
assertEquals(170, Context.VERSION_1_7);
assertEquals(140, Context.VERSION_1_4);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(180, Context.VERSION_1_8);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(100, Context.VERSION_1_0);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(150, Context.VERSION_1_5);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(110, Context.VERSION_1_1);
assertEquals(0, Context.VERSION_DEFAULT);
assertFalse(context0.isSealed());
assertEquals(0, context0.getInstructionObserverThreshold());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(0, context0.getOptimizationLevel());
assertTrue(context0.isGeneratingSource());
assertNotNull(context0);

ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(120, Context.VERSION_1_2);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(160, Context.VERSION_1_6);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(130, Context.VERSION_1_3);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertFalse(context0.generateObserverCount);
assertEquals(170, Context.VERSION_1_7);
assertEquals(140, Context.VERSION_1_4);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(180, Context.VERSION_1_8);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(100, Context.VERSION_1_0);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(150, Context.VERSION_1_5);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(110, Context.VERSION_1_1);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertFalse(context0.isSealed());
assertEquals(0, context0.getInstructionObserverThreshold());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(0, context0.getOptimizationLevel());
assertTrue(context0.isGeneratingSource());
assertEquals("object", importerTopLevel0.getTypeOf());
assertFalse(importerTopLevel0.isSealed());
assertTrue(importerTopLevel0.isExtensible());
assertEquals("global", importerTopLevel0.getClassName());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertFalse(importerTopLevel0.isEmpty());
assertTrue(importerTopLevel0.hasPrototypeMap());
assertNotNull(importerTopLevel0);

Object[] objectArray0 = importerTopLevel0.getIds(false);
assertEquals(0, objectArray0.length);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(120, Context.VERSION_1_2);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(160, Context.VERSION_1_6);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(130, Context.VERSION_1_3);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertFalse(context0.generateObserverCount);
assertEquals(170, Context.VERSION_1_7);
assertEquals(140, Context.VERSION_1_4);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(180, Context.VERSION_1_8);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(100, Context.VERSION_1_0);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(150, Context.VERSION_1_5);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(110, Context.VERSION_1_1);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertFalse(context0.isSealed());
assertEquals(0, context0.getInstructionObserverThreshold());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(0, context0.getOptimizationLevel());
assertTrue(context0.isGeneratingSource());
assertEquals("object", importerTopLevel0.getTypeOf());
assertFalse(importerTopLevel0.isSealed());
assertTrue(importerTopLevel0.isExtensible());
assertEquals("global", importerTopLevel0.getClassName());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertFalse(importerTopLevel0.isEmpty());
assertTrue(importerTopLevel0.hasPrototypeMap());
assertNotNull(objectArray0);


[MASTER] 06:47:44.106 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 06:47:44.113 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getContext();
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(150, Context.VERSION_1_5);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(110, Context.VERSION_1_1);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(180, Context.VERSION_1_8);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(140, Context.VERSION_1_4);
assertFalse(context0.generateObserverCount);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(120, Context.VERSION_1_2);
assertEquals(170, Context.VERSION_1_7);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isSealed());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(0, context0.getInstructionObserverThreshold());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertFalse(context0.isGeneratingDebugChanged());
assertNotNull(context0);

ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(150, Context.VERSION_1_5);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(110, Context.VERSION_1_1);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(180, Context.VERSION_1_8);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(140, Context.VERSION_1_4);
assertFalse(context0.generateObserverCount);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(120, Context.VERSION_1_2);
assertEquals(170, Context.VERSION_1_7);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isSealed());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(0, context0.getInstructionObserverThreshold());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertFalse(context0.isGeneratingDebugChanged());
assertFalse(importerTopLevel0.isEmpty());
assertEquals("global", importerTopLevel0.getClassName());
assertTrue(importerTopLevel0.isExtensible());
assertEquals("object", importerTopLevel0.getTypeOf());
assertFalse(importerTopLevel0.isSealed());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertTrue(importerTopLevel0.hasPrototypeMap());
assertNotNull(importerTopLevel0);

importerTopLevel0.defineOwnProperty(context0, importerTopLevel0, importerTopLevel0);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(150, Context.VERSION_1_5);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(110, Context.VERSION_1_1);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(180, Context.VERSION_1_8);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(140, Context.VERSION_1_4);
assertFalse(context0.generateObserverCount);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(120, Context.VERSION_1_2);
assertEquals(170, Context.VERSION_1_7);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isSealed());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(0, context0.getInstructionObserverThreshold());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertFalse(context0.isGeneratingDebugChanged());
assertFalse(importerTopLevel0.isEmpty());
assertEquals("global", importerTopLevel0.getClassName());
assertTrue(importerTopLevel0.isExtensible());
assertEquals("object", importerTopLevel0.getTypeOf());
assertFalse(importerTopLevel0.isSealed());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertTrue(importerTopLevel0.hasPrototypeMap());


[MASTER] 06:47:47.687 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 06:47:47.691 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.enter();
assertEquals(140, Context.VERSION_1_4);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(180, Context.VERSION_1_8);
assertFalse(context0.generateObserverCount);
assertEquals(130, Context.VERSION_1_3);
assertEquals(170, Context.VERSION_1_7);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(120, Context.VERSION_1_2);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(160, Context.VERSION_1_6);
assertEquals(110, Context.VERSION_1_1);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(150, Context.VERSION_1_5);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(100, Context.VERSION_1_0);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getInstructionObserverThreshold());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isSealed());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getOptimizationLevel());
assertNotNull(context0);

ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
assertEquals(140, Context.VERSION_1_4);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(180, Context.VERSION_1_8);
assertFalse(context0.generateObserverCount);
assertEquals(130, Context.VERSION_1_3);
assertEquals(170, Context.VERSION_1_7);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(120, Context.VERSION_1_2);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(160, Context.VERSION_1_6);
assertEquals(110, Context.VERSION_1_1);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(150, Context.VERSION_1_5);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(100, Context.VERSION_1_0);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(13, ScriptableObject.CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(0, ScriptableObject.EMPTY);
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getInstructionObserverThreshold());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isSealed());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertFalse(importerTopLevel0.isEmpty());
assertFalse(importerTopLevel0.isSealed());
assertEquals("global", importerTopLevel0.getClassName());
assertTrue(importerTopLevel0.hasPrototypeMap());
assertTrue(importerTopLevel0.isExtensible());
assertEquals("object", importerTopLevel0.getTypeOf());
assertNotNull(importerTopLevel0);

NativeObject nativeObject0 = (NativeObject)ScriptableObject.callMethod((Scriptable) importerTopLevel0, "constructor", context0.emptyArgs);
assertEquals(140, Context.VERSION_1_4);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(180, Context.VERSION_1_8);
assertFalse(context0.generateObserverCount);
assertEquals(130, Context.VERSION_1_3);
assertEquals(170, Context.VERSION_1_7);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(120, Context.VERSION_1_2);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(160, Context.VERSION_1_6);
assertEquals(110, Context.VERSION_1_1);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(150, Context.VERSION_1_5);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(100, Context.VERSION_1_0);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(13, ScriptableObject.CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getInstructionObserverThreshold());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isSealed());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertFalse(importerTopLevel0.isEmpty());
assertFalse(importerTopLevel0.isSealed());
assertEquals("global", importerTopLevel0.getClassName());
assertTrue(importerTopLevel0.hasPrototypeMap());
assertTrue(importerTopLevel0.isExtensible());
assertEquals("object", importerTopLevel0.getTypeOf());
assertFalse(nativeObject0.avoidObjectDetection());
assertEquals("Object", nativeObject0.getClassName());
assertTrue(nativeObject0.isExtensible());
assertFalse(nativeObject0.hasPrototypeMap());
assertEquals("object", nativeObject0.getTypeOf());
assertFalse(nativeObject0.isSealed());
assertTrue(nativeObject0.isEmpty());
assertNotNull(nativeObject0);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 6
* Writing tests to file
* Writing JUnit test case 'IdScriptableObject_ESTest' to results/evosuite5/closure-16-com.google.javascript.rhino.head.IdScriptableObject-30
* Done!

* Computation finished

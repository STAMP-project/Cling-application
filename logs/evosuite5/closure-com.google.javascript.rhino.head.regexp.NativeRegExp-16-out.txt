entry: sources/closure-16/build/classes
entry: sources/closure-16/lib/args4j.jar
entry: sources/closure-16/lib/guava.jar
entry: sources/closure-16/lib/json.jar
entry: sources/closure-16/lib/jsr305.jar
entry: sources/closure-16/lib/protobuf-java.jar
entry: sources/closure-16/build/lib/rhino.jar
entry: sources/closure-16/lib/ant.jar
** CP: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar
* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: com.google.javascript.rhino.head.regexp.NativeRegExp
* Starting Client-0
* Connecting to master process on port 7368
* Analyzing classpath: 
  - sources/closure-16/build/classes
  - sources/closure-16/lib/args4j.jar
  - sources/closure-16/lib/guava.jar
  - sources/closure-16/lib/json.jar
  - sources/closure-16/lib/jsr305.jar
  - sources/closure-16/lib/protobuf-java.jar
  - sources/closure-16/build/lib/rhino.jar
  - sources/closure-16/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.head.regexp.NativeRegExp
* Test criterion:
  - Branch Coverage
* Total number of test goals for DYNAMOSA: 1450
* Using seed 1566407495861
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 382 / 1450
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.05724137931034483
[MASTER] 19:12:11.232 [logback-1] WARN  TestUsageChecker - class com.google.javascript.rhino.head.ContextFactory$1GlobalSetterImpl looks like an anonymous class, ignoring it (although reflection says false) GlobalSetterImpl
[MASTER] 19:12:19.250 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.head.NativeJavaConstructor due to org.evosuite.ga.ConstructionFailedException: Have no generator for class com.google.javascript.rhino.head.MemberBox canUseFunctionalMocks=true, canBeMocked: false
[MASTER] 19:12:26.326 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.head.NativeJavaConstructor due to org.evosuite.ga.ConstructionFailedException: Cannot use class class com.google.javascript.rhino.head.MemberBox
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.1386206896551724
[MASTER] 19:12:31.696 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.head.NativeJavaMethod due to org.evosuite.ga.ConstructionFailedException: Have no generator for class java.lang.reflect.Method canUseFunctionalMocks=true, canBeMocked: false
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.16551724137931034
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.17793103448275863
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.18275862068965518
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.23724137931034484
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.24068965517241378
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2482758620689655
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2489655172413793
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2517241379310345
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.25310344827586206
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.25310344827586206
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3041379310344828
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3103448275862069
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3117241379310345
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.31517241379310346
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.32482758620689656
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3482758620689655
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.36
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.36
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.36
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.36
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.36
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3627586206896552
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3627586206896552
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3627586206896552
* Search finished after 329s and 177 generations, 66458 statements, best individual has fitness: 924.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3627586206896552
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 30%
* Total number of goals: 1450
* Number of covered goals: 441
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3627586206896552
* Generated 66 tests with total length 206
* Resulting test suite's coverage: 36%
* Generating assertions
[MASTER] 19:18:42.253 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6804333333333333% of time used, but only 0/66 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 0%
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3627586206896552
* Compiling and checking tests
[MASTER] 19:19:02.450 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 19:19:02.452 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeRegExp nativeRegExp0 = new NativeRegExp();
assertNotNull(nativeRegExp0);
assertTrue(nativeRegExp0.isExtensible());
assertEquals("object", nativeRegExp0.getTypeOf());
assertFalse(nativeRegExp0.hasPrototypeMap());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertTrue(nativeRegExp0.isEmpty());
assertFalse(nativeRegExp0.isSealed());
assertFalse(nativeRegExp0.avoidObjectDetection());
assertEquals(0, NativeRegExp.TEST);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(2, ScriptableObject.DONTENUM);

IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeRegExp0, "com.google.javascript.rhino.head.regexp.NativeRegExp", 1, "com.google.javascript.rhino.head.regexp.NativeRegExp", 14, nativeRegExp0);
assertNotNull(idFunctionObject0);
assertTrue(nativeRegExp0.isExtensible());
assertEquals("object", nativeRegExp0.getTypeOf());
assertFalse(nativeRegExp0.hasPrototypeMap());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertTrue(nativeRegExp0.isEmpty());
assertFalse(nativeRegExp0.isSealed());
assertFalse(nativeRegExp0.avoidObjectDetection());
assertFalse(idFunctionObject0.hasPrototypeMap());
assertTrue(idFunctionObject0.isExtensible());
assertEquals("com.google.javascript.rhino.head.regexp.NativeRegExp", idFunctionObject0.getFunctionName());
assertEquals(1, idFunctionObject0.methodId());
assertFalse(idFunctionObject0.isSealed());
assertEquals(14, idFunctionObject0.getLength());
assertFalse(idFunctionObject0.avoidObjectDetection());
assertEquals("Function", idFunctionObject0.getClassName());
assertEquals(14, idFunctionObject0.getArity());
assertEquals("function", idFunctionObject0.getTypeOf());
assertTrue(idFunctionObject0.isEmpty());
assertEquals(0, NativeRegExp.TEST);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);

NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("com.google.javascript.rhino.head.regexp.NativeRegExp");
Object[] objectArray0 = new Object[1];
Object object0 = ScriptableObject.getProperty((Scriptable) idFunctionObject0, "u~KU5");
objectArray0[0] = object0;
nativeRegExp0.compile((Context) null, nativeJavaPackage0, objectArray0);
Context context0 = Context.enter((Context) null);
RegExpImpl regExpImpl0 = new RegExpImpl();
int[] intArray0 = new int[7];
nativeRegExp0.executeRegExp(context0, nativeJavaPackage0, regExpImpl0, "com.google.javascript.rhino.head.regexp.NativeRegExp", intArray0, 140);

[MASTER] 19:19:11.026 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 19:19:11.028 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = new Context();
assertNotNull(context0);
assertFalse(context0.isGeneratingDebugChanged());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(context0.isSealed());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getInstructionObserverThreshold());
assertEquals(180, Context.VERSION_1_8);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(130, Context.VERSION_1_3);
assertEquals(170, Context.VERSION_1_7);
assertFalse(context0.generateObserverCount);
assertEquals(120, Context.VERSION_1_2);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(140, Context.VERSION_1_4);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(100, Context.VERSION_1_0);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(110, Context.VERSION_1_1);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(150, Context.VERSION_1_5);

ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
assertNotNull(importerTopLevel0);
assertFalse(context0.isGeneratingDebugChanged());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(context0.isSealed());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getInstructionObserverThreshold());
assertEquals("global", importerTopLevel0.getClassName());
assertTrue(importerTopLevel0.isExtensible());
assertFalse(importerTopLevel0.isSealed());
assertEquals("object", importerTopLevel0.getTypeOf());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertFalse(importerTopLevel0.isEmpty());
assertTrue(importerTopLevel0.hasPrototypeMap());
assertEquals(180, Context.VERSION_1_8);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(130, Context.VERSION_1_3);
assertEquals(170, Context.VERSION_1_7);
assertFalse(context0.generateObserverCount);
assertEquals(120, Context.VERSION_1_2);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(140, Context.VERSION_1_4);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(100, Context.VERSION_1_0);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(110, Context.VERSION_1_1);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(150, Context.VERSION_1_5);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, ScriptableObject.READONLY);


[MASTER] 19:19:13.493 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 19:19:13.496 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeRegExp nativeRegExp0 = new NativeRegExp();
assertNotNull(nativeRegExp0);
assertFalse(nativeRegExp0.isSealed());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertEquals("object", nativeRegExp0.getTypeOf());
assertFalse(nativeRegExp0.hasPrototypeMap());
assertTrue(nativeRegExp0.isEmpty());
assertTrue(nativeRegExp0.isExtensible());
assertFalse(nativeRegExp0.avoidObjectDetection());
assertEquals(1, NativeRegExp.MATCH);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(0, NativeRegExp.TEST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(2, ScriptableObject.DONTENUM);

NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage(",Qj=ev:`+:=Z6u!k~k{");
assertNotNull(nativeJavaPackage0);
assertFalse(nativeJavaPackage0.isSealed());
assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
assertTrue(nativeJavaPackage0.isEmpty());
assertEquals("object", nativeJavaPackage0.getTypeOf());
assertTrue(nativeJavaPackage0.isExtensible());
assertFalse(nativeJavaPackage0.avoidObjectDetection());
assertEquals(13, ScriptableObject.CONST);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);

Object[] objectArray0 = new Object[1];
objectArray0[0] = (Object) nativeRegExp0;
NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile((Context) null, nativeJavaPackage0, objectArray0);
assertNotNull(nativeRegExp1);
assertEquals(1, objectArray0.length);
assertSame(nativeRegExp0, nativeRegExp1);
assertSame(nativeRegExp1, nativeRegExp0);
assertFalse(nativeRegExp0.isSealed());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertEquals("object", nativeRegExp0.getTypeOf());
assertFalse(nativeRegExp0.hasPrototypeMap());
assertTrue(nativeRegExp0.isEmpty());
assertTrue(nativeRegExp0.isExtensible());
assertFalse(nativeRegExp0.avoidObjectDetection());
assertFalse(nativeJavaPackage0.isSealed());
assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
assertTrue(nativeJavaPackage0.isEmpty());
assertEquals("object", nativeJavaPackage0.getTypeOf());
assertTrue(nativeJavaPackage0.isExtensible());
assertFalse(nativeJavaPackage0.avoidObjectDetection());
assertFalse(nativeRegExp1.isSealed());
assertEquals("RegExp", nativeRegExp1.getClassName());
assertEquals("object", nativeRegExp1.getTypeOf());
assertFalse(nativeRegExp1.hasPrototypeMap());
assertTrue(nativeRegExp1.isEmpty());
assertTrue(nativeRegExp1.isExtensible());
assertFalse(nativeRegExp1.avoidObjectDetection());
assertEquals(1, NativeRegExp.MATCH);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(0, NativeRegExp.TEST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(0, NativeRegExp.TEST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(2, ScriptableObject.DONTENUM);


[MASTER] 19:19:22.256 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 19:19:22.266 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeRegExp nativeRegExp0 = new NativeRegExp();
assertNotNull(nativeRegExp0);
assertFalse(nativeRegExp0.avoidObjectDetection());
assertTrue(nativeRegExp0.isEmpty());
assertFalse(nativeRegExp0.isSealed());
assertEquals("object", nativeRegExp0.getTypeOf());
assertFalse(nativeRegExp0.hasPrototypeMap());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertTrue(nativeRegExp0.isExtensible());
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(0, NativeRegExp.TEST);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, NativeRegExp.JSREG_GLOB);

NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("Z");
assertNotNull(nativeJavaPackage0);
assertEquals("object", nativeJavaPackage0.getTypeOf());
assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
assertTrue(nativeJavaPackage0.isExtensible());
assertFalse(nativeJavaPackage0.avoidObjectDetection());
assertTrue(nativeJavaPackage0.isEmpty());
assertFalse(nativeJavaPackage0.isSealed());
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);

Object[] objectArray0 = new Object[9];
objectArray0[0] = (Object) nativeJavaPackage0;
objectArray0[1] = (Object) "";
NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile((Context) null, nativeJavaPackage0, objectArray0);
assertNotNull(nativeRegExp1);
assertEquals(9, objectArray0.length);
assertSame(nativeRegExp0, nativeRegExp1);
assertSame(nativeRegExp1, nativeRegExp0);
assertFalse(nativeRegExp0.avoidObjectDetection());
assertTrue(nativeRegExp0.isEmpty());
assertFalse(nativeRegExp0.isSealed());
assertEquals("object", nativeRegExp0.getTypeOf());
assertFalse(nativeRegExp0.hasPrototypeMap());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertTrue(nativeRegExp0.isExtensible());
assertEquals("object", nativeJavaPackage0.getTypeOf());
assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
assertTrue(nativeJavaPackage0.isExtensible());
assertFalse(nativeJavaPackage0.avoidObjectDetection());
assertTrue(nativeJavaPackage0.isEmpty());
assertFalse(nativeJavaPackage0.isSealed());
assertFalse(nativeRegExp1.avoidObjectDetection());
assertEquals("RegExp", nativeRegExp1.getClassName());
assertTrue(nativeRegExp1.isEmpty());
assertFalse(nativeRegExp1.hasPrototypeMap());
assertEquals("object", nativeRegExp1.getTypeOf());
assertTrue(nativeRegExp1.isExtensible());
assertFalse(nativeRegExp1.isSealed());
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(0, NativeRegExp.TEST);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(0, NativeRegExp.TEST);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(2, ScriptableObject.DONTENUM);

Context context0 = Context.enter((Context) null);
assertNotNull(context0);
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isSealed());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(0, context0.getOptimizationLevel());
assertTrue(context0.isGeneratingSource());
assertEquals(170, Context.VERSION_1_7);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(120, Context.VERSION_1_2);
assertFalse(context0.generateObserverCount);
assertEquals(160, Context.VERSION_1_6);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(110, Context.VERSION_1_1);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(140, Context.VERSION_1_4);
assertEquals(180, Context.VERSION_1_8);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(150, Context.VERSION_1_5);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(11, Context.FEATURE_STRICT_MODE);

RegExpImpl regExpImpl0 = new RegExpImpl();
assertNotNull(regExpImpl0);

int[] intArray0 = new int[8];
Boolean boolean0 = (Boolean)nativeRegExp0.executeRegExp(context0, nativeRegExp1, regExpImpl0, "s7mwLe", intArray0, 0);
assertNotNull(boolean0);
assertEquals(9, objectArray0.length);
assertEquals(8, intArray0.length);
assertSame(nativeRegExp0, nativeRegExp1);
assertSame(nativeRegExp1, nativeRegExp0);
assertTrue(boolean0);
assertArrayEquals(new int[] {6, 0, 0, 0, 0, 0, 0, 0}, intArray0);
assertFalse(nativeRegExp0.avoidObjectDetection());
assertTrue(nativeRegExp0.isEmpty());
assertFalse(nativeRegExp0.isSealed());
assertEquals("object", nativeRegExp0.getTypeOf());
assertFalse(nativeRegExp0.hasPrototypeMap());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertTrue(nativeRegExp0.isExtensible());
assertEquals("object", nativeJavaPackage0.getTypeOf());
assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
assertTrue(nativeJavaPackage0.isExtensible());
assertFalse(nativeJavaPackage0.avoidObjectDetection());
assertTrue(nativeJavaPackage0.isEmpty());
assertFalse(nativeJavaPackage0.isSealed());
assertFalse(nativeRegExp1.avoidObjectDetection());
assertEquals("RegExp", nativeRegExp1.getClassName());
assertTrue(nativeRegExp1.isEmpty());
assertFalse(nativeRegExp1.hasPrototypeMap());
assertEquals("object", nativeRegExp1.getTypeOf());
assertTrue(nativeRegExp1.isExtensible());
assertFalse(nativeRegExp1.isSealed());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isSealed());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(0, context0.getOptimizationLevel());
assertTrue(context0.isGeneratingSource());
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(0, NativeRegExp.TEST);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(0, NativeRegExp.TEST);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(170, Context.VERSION_1_7);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(120, Context.VERSION_1_2);
assertFalse(context0.generateObserverCount);
assertEquals(160, Context.VERSION_1_6);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(110, Context.VERSION_1_1);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(140, Context.VERSION_1_4);
assertEquals(180, Context.VERSION_1_8);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(150, Context.VERSION_1_5);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(11, Context.FEATURE_STRICT_MODE);


[MASTER] 19:19:26.799 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 19:19:26.800 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getCurrentContext();
assertNotNull(context0);
assertEquals(0, context0.getOptimizationLevel());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getInstructionObserverThreshold());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertFalse(context0.isGeneratingDebugChanged());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isSealed());
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(100, Context.VERSION_1_0);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(140, Context.VERSION_1_4);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(180, Context.VERSION_1_8);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(120, Context.VERSION_1_2);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(160, Context.VERSION_1_6);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertFalse(context0.generateObserverCount);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(130, Context.VERSION_1_3);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(170, Context.VERSION_1_7);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(110, Context.VERSION_1_1);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(150, Context.VERSION_1_5);
assertEquals(0, Context.VERSION_DEFAULT);

Object object0 = NativeRegExp.compileRE(context0, "(?:)", (String) null, false);
assertNotNull(object0);
assertEquals(0, context0.getOptimizationLevel());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getInstructionObserverThreshold());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertFalse(context0.isGeneratingDebugChanged());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isSealed());
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(100, Context.VERSION_1_0);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(140, Context.VERSION_1_4);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(180, Context.VERSION_1_8);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(120, Context.VERSION_1_2);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(160, Context.VERSION_1_6);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertFalse(context0.generateObserverCount);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(130, Context.VERSION_1_3);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(170, Context.VERSION_1_7);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(110, Context.VERSION_1_1);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(150, Context.VERSION_1_5);
assertEquals(0, Context.VERSION_DEFAULT);


[MASTER] 19:19:27.599 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 19:19:27.600 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getCurrentContext();
assertNotNull(context0);
assertTrue(context0.isGeneratingSource());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isSealed());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(0, context0.getLanguageVersion());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(140, Context.VERSION_1_4);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertFalse(context0.generateObserverCount);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(100, Context.VERSION_1_0);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(150, Context.VERSION_1_5);
assertEquals(110, Context.VERSION_1_1);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(160, Context.VERSION_1_6);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(120, Context.VERSION_1_2);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(170, Context.VERSION_1_7);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(180, Context.VERSION_1_8);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(6, Context.FEATURE_E4X);

Object object0 = NativeRegExp.compileRE(context0, "h>}Wa+5X,ur$qc", (String) null, false);
assertNotNull(object0);
assertTrue(context0.isGeneratingSource());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isSealed());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(0, context0.getLanguageVersion());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(140, Context.VERSION_1_4);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertFalse(context0.generateObserverCount);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(100, Context.VERSION_1_0);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(150, Context.VERSION_1_5);
assertEquals(110, Context.VERSION_1_1);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(160, Context.VERSION_1_6);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(120, Context.VERSION_1_2);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(170, Context.VERSION_1_7);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(180, Context.VERSION_1_8);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(6, Context.FEATURE_E4X);


[MASTER] 19:19:31.736 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 19:19:31.743 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeRegExp nativeRegExp0 = new NativeRegExp();
assertNotNull(nativeRegExp0);
assertTrue(nativeRegExp0.isEmpty());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertEquals("object", nativeRegExp0.getTypeOf());
assertFalse(nativeRegExp0.isSealed());
assertFalse(nativeRegExp0.avoidObjectDetection());
assertTrue(nativeRegExp0.isExtensible());
assertFalse(nativeRegExp0.hasPrototypeMap());
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(0, NativeRegExp.TEST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(0, ScriptableObject.EMPTY);

IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeRegExp0, "is", 0, "is", 1, nativeRegExp0);
assertNotNull(idFunctionObject0);
assertTrue(nativeRegExp0.isEmpty());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertEquals("object", nativeRegExp0.getTypeOf());
assertFalse(nativeRegExp0.isSealed());
assertFalse(nativeRegExp0.avoidObjectDetection());
assertTrue(nativeRegExp0.isExtensible());
assertFalse(nativeRegExp0.hasPrototypeMap());
assertFalse(idFunctionObject0.isSealed());
assertEquals("is", idFunctionObject0.getFunctionName());
assertEquals(1, idFunctionObject0.getArity());
assertTrue(idFunctionObject0.isEmpty());
assertTrue(idFunctionObject0.isExtensible());
assertEquals("function", idFunctionObject0.getTypeOf());
assertFalse(idFunctionObject0.hasPrototypeMap());
assertEquals(0, idFunctionObject0.methodId());
assertEquals(1, idFunctionObject0.getLength());
assertEquals("Function", idFunctionObject0.getClassName());
assertFalse(idFunctionObject0.avoidObjectDetection());
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(0, NativeRegExp.TEST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);

NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("");
assertNotNull(nativeJavaPackage0);
assertEquals("object", nativeJavaPackage0.getTypeOf());
assertTrue(nativeJavaPackage0.isExtensible());
assertTrue(nativeJavaPackage0.isEmpty());
assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
assertFalse(nativeJavaPackage0.avoidObjectDetection());
assertFalse(nativeJavaPackage0.isSealed());
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, ScriptableObject.READONLY);

Object[] objectArray0 = new Object[1];
objectArray0[0] = (Object) nativeJavaPackage0;
NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile((Context) null, nativeJavaPackage0, objectArray0);
assertNotNull(nativeRegExp1);
assertEquals(1, objectArray0.length);
assertSame(nativeRegExp0, nativeRegExp1);
assertSame(nativeRegExp1, nativeRegExp0);
assertTrue(nativeRegExp0.isEmpty());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertEquals("object", nativeRegExp0.getTypeOf());
assertFalse(nativeRegExp0.isSealed());
assertFalse(nativeRegExp0.avoidObjectDetection());
assertTrue(nativeRegExp0.isExtensible());
assertFalse(nativeRegExp0.hasPrototypeMap());
assertEquals("object", nativeJavaPackage0.getTypeOf());
assertTrue(nativeJavaPackage0.isExtensible());
assertTrue(nativeJavaPackage0.isEmpty());
assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
assertFalse(nativeJavaPackage0.avoidObjectDetection());
assertFalse(nativeJavaPackage0.isSealed());
assertTrue(nativeRegExp1.isExtensible());
assertEquals("object", nativeRegExp1.getTypeOf());
assertEquals("RegExp", nativeRegExp1.getClassName());
assertTrue(nativeRegExp1.isEmpty());
assertFalse(nativeRegExp1.isSealed());
assertFalse(nativeRegExp1.avoidObjectDetection());
assertFalse(nativeRegExp1.hasPrototypeMap());
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(0, NativeRegExp.TEST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(0, NativeRegExp.TEST);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);

Synchronizer synchronizer0 = new Synchronizer(idFunctionObject0);
assertNotNull(synchronizer0);
assertTrue(nativeRegExp0.isEmpty());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertEquals("object", nativeRegExp0.getTypeOf());
assertFalse(nativeRegExp0.isSealed());
assertFalse(nativeRegExp0.avoidObjectDetection());
assertTrue(nativeRegExp0.isExtensible());
assertFalse(nativeRegExp0.hasPrototypeMap());
assertFalse(idFunctionObject0.isSealed());
assertEquals("is", idFunctionObject0.getFunctionName());
assertEquals(1, idFunctionObject0.getArity());
assertTrue(idFunctionObject0.isEmpty());
assertTrue(idFunctionObject0.isExtensible());
assertEquals("function", idFunctionObject0.getTypeOf());
assertFalse(idFunctionObject0.hasPrototypeMap());
assertEquals(0, idFunctionObject0.methodId());
assertEquals(1, idFunctionObject0.getLength());
assertEquals("Function", idFunctionObject0.getClassName());
assertFalse(idFunctionObject0.avoidObjectDetection());
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(0, NativeRegExp.TEST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);

RegExpImpl regExpImpl0 = new RegExpImpl();
assertNotNull(regExpImpl0);

int[] intArray0 = new int[8];
Undefined undefined0 = (Undefined)nativeRegExp0.executeRegExp((Context) null, synchronizer0, regExpImpl0, "B(", intArray0, 2);
assertNotNull(undefined0);
assertEquals(8, intArray0.length);
assertSame(nativeRegExp0, nativeRegExp1);
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
assertTrue(nativeRegExp0.isEmpty());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertEquals("object", nativeRegExp0.getTypeOf());
assertFalse(nativeRegExp0.isSealed());
assertFalse(nativeRegExp0.avoidObjectDetection());
assertTrue(nativeRegExp0.isExtensible());
assertFalse(nativeRegExp0.hasPrototypeMap());
assertFalse(idFunctionObject0.isSealed());
assertEquals("is", idFunctionObject0.getFunctionName());
assertEquals(1, idFunctionObject0.getArity());
assertTrue(idFunctionObject0.isEmpty());
assertTrue(idFunctionObject0.isExtensible());
assertEquals("function", idFunctionObject0.getTypeOf());
assertFalse(idFunctionObject0.hasPrototypeMap());
assertEquals(0, idFunctionObject0.methodId());
assertEquals(1, idFunctionObject0.getLength());
assertEquals("Function", idFunctionObject0.getClassName());
assertFalse(idFunctionObject0.avoidObjectDetection());
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(0, NativeRegExp.TEST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);


[MASTER] 19:19:33.110 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 19:19:33.112 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeRegExp nativeRegExp0 = new NativeRegExp();
assertNotNull(nativeRegExp0);
assertTrue(nativeRegExp0.isEmpty());
assertFalse(nativeRegExp0.isSealed());
assertFalse(nativeRegExp0.avoidObjectDetection());
assertFalse(nativeRegExp0.hasPrototypeMap());
assertTrue(nativeRegExp0.isExtensible());
assertEquals("object", nativeRegExp0.getTypeOf());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(0, NativeRegExp.TEST);

NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("Z");
assertNotNull(nativeJavaPackage0);
assertTrue(nativeJavaPackage0.isExtensible());
assertEquals("object", nativeJavaPackage0.getTypeOf());
assertTrue(nativeJavaPackage0.isEmpty());
assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
assertFalse(nativeJavaPackage0.isSealed());
assertFalse(nativeJavaPackage0.avoidObjectDetection());
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(13, ScriptableObject.CONST);

Object[] objectArray0 = new Object[9];
objectArray0[0] = (Object) nativeJavaPackage0;
objectArray0[1] = (Object) "";
NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile((Context) null, nativeJavaPackage0, objectArray0);
assertNotNull(nativeRegExp1);
assertEquals(9, objectArray0.length);
assertSame(nativeRegExp0, nativeRegExp1);
assertSame(nativeRegExp1, nativeRegExp0);
assertTrue(nativeRegExp0.isEmpty());
assertFalse(nativeRegExp0.isSealed());
assertFalse(nativeRegExp0.avoidObjectDetection());
assertFalse(nativeRegExp0.hasPrototypeMap());
assertTrue(nativeRegExp0.isExtensible());
assertEquals("object", nativeRegExp0.getTypeOf());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertTrue(nativeJavaPackage0.isExtensible());
assertEquals("object", nativeJavaPackage0.getTypeOf());
assertTrue(nativeJavaPackage0.isEmpty());
assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
assertFalse(nativeJavaPackage0.isSealed());
assertFalse(nativeJavaPackage0.avoidObjectDetection());
assertFalse(nativeRegExp1.isSealed());
assertEquals("RegExp", nativeRegExp1.getClassName());
assertTrue(nativeRegExp1.isEmpty());
assertFalse(nativeRegExp1.avoidObjectDetection());
assertEquals("object", nativeRegExp1.getTypeOf());
assertFalse(nativeRegExp1.hasPrototypeMap());
assertTrue(nativeRegExp1.isExtensible());
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(0, NativeRegExp.TEST);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(13, ScriptableObject.CONST);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(0, NativeRegExp.TEST);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, NativeRegExp.JSREG_GLOB);

Context context0 = Context.enter((Context) null);
assertNotNull(context0);
assertFalse(context0.isSealed());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getInstructionObserverThreshold());
assertEquals(0, context0.getLanguageVersion());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertTrue(context0.isGeneratingSource());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(150, Context.VERSION_1_5);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(110, Context.VERSION_1_1);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(120, Context.VERSION_1_2);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertFalse(context0.generateObserverCount);
assertEquals(100, Context.VERSION_1_0);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(140, Context.VERSION_1_4);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(170, Context.VERSION_1_7);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(180, Context.VERSION_1_8);

RegExpImpl regExpImpl0 = new RegExpImpl();
assertNotNull(regExpImpl0);

int[] intArray0 = new int[8];
nativeRegExp0.executeRegExp(context0, nativeJavaPackage0, regExpImpl0, "object", intArray0, 110);

[MASTER] 19:19:33.746 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 19:19:33.764 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeRegExp nativeRegExp0 = new NativeRegExp();
assertNotNull(nativeRegExp0);
assertFalse(nativeRegExp0.avoidObjectDetection());
assertEquals("object", nativeRegExp0.getTypeOf());
assertTrue(nativeRegExp0.isExtensible());
assertFalse(nativeRegExp0.isSealed());
assertFalse(nativeRegExp0.hasPrototypeMap());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertTrue(nativeRegExp0.isEmpty());
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, NativeRegExp.TEST);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(1, NativeRegExp.MATCH);

Context context0 = new Context();
assertNotNull(context0);
assertFalse(context0.isSealed());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(100, Context.VERSION_1_0);
assertEquals(150, Context.VERSION_1_5);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(110, Context.VERSION_1_1);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(120, Context.VERSION_1_2);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(160, Context.VERSION_1_6);
assertEquals(130, Context.VERSION_1_3);
assertFalse(context0.generateObserverCount);
assertEquals(170, Context.VERSION_1_7);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(140, Context.VERSION_1_4);
assertEquals(180, Context.VERSION_1_8);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);

ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
assertNotNull(importerTopLevel0);
assertEquals("JavaImporter", importerTopLevel0.getClassName());
assertTrue(importerTopLevel0.isExtensible());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertFalse(importerTopLevel0.isSealed());
assertFalse(importerTopLevel0.hasPrototypeMap());
assertEquals("object", importerTopLevel0.getTypeOf());
assertTrue(importerTopLevel0.isEmpty());
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, ScriptableObject.DONTENUM);

NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile(context0, importerTopLevel0, context0.emptyArgs);
assertNotNull(nativeRegExp1);
assertSame(nativeRegExp0, nativeRegExp1);
assertSame(nativeRegExp1, nativeRegExp0);
assertFalse(nativeRegExp0.avoidObjectDetection());
assertEquals("object", nativeRegExp0.getTypeOf());
assertTrue(nativeRegExp0.isExtensible());
assertFalse(nativeRegExp0.isSealed());
assertFalse(nativeRegExp0.hasPrototypeMap());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertTrue(nativeRegExp0.isEmpty());
assertFalse(context0.isSealed());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals("JavaImporter", importerTopLevel0.getClassName());
assertTrue(importerTopLevel0.isExtensible());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertFalse(importerTopLevel0.isSealed());
assertFalse(importerTopLevel0.hasPrototypeMap());
assertEquals("object", importerTopLevel0.getTypeOf());
assertTrue(importerTopLevel0.isEmpty());
assertFalse(nativeRegExp1.isSealed());
assertEquals("RegExp", nativeRegExp1.getClassName());
assertTrue(nativeRegExp1.isEmpty());
assertFalse(nativeRegExp1.hasPrototypeMap());
assertTrue(nativeRegExp1.isExtensible());
assertFalse(nativeRegExp1.avoidObjectDetection());
assertEquals("object", nativeRegExp1.getTypeOf());
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, NativeRegExp.TEST);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(1, NativeRegExp.MATCH);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(100, Context.VERSION_1_0);
assertEquals(150, Context.VERSION_1_5);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(110, Context.VERSION_1_1);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(120, Context.VERSION_1_2);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(160, Context.VERSION_1_6);
assertEquals(130, Context.VERSION_1_3);
assertFalse(context0.generateObserverCount);
assertEquals(170, Context.VERSION_1_7);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(140, Context.VERSION_1_4);
assertEquals(180, Context.VERSION_1_8);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(0, NativeRegExp.TEST);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(4, ScriptableObject.PERMANENT);

RegExpImpl regExpImpl0 = new RegExpImpl();
assertNotNull(regExpImpl0);

int[] intArray0 = new int[2];
NativeArray nativeArray0 = (NativeArray)nativeRegExp0.executeRegExp(context0, nativeRegExp1, regExpImpl0, "language version", intArray0, (-704));
assertNotNull(nativeArray0);
assertEquals(2, intArray0.length);
assertSame(nativeRegExp0, nativeRegExp1);
assertSame(nativeRegExp1, nativeRegExp0);
assertArrayEquals(new int[] {0, 0}, intArray0);
assertFalse(nativeRegExp0.avoidObjectDetection());
assertEquals("object", nativeRegExp0.getTypeOf());
assertTrue(nativeRegExp0.isExtensible());
assertFalse(nativeRegExp0.isSealed());
assertFalse(nativeRegExp0.hasPrototypeMap());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertTrue(nativeRegExp0.isEmpty());
assertFalse(context0.isSealed());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals("JavaImporter", importerTopLevel0.getClassName());
assertTrue(importerTopLevel0.isExtensible());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertFalse(importerTopLevel0.isSealed());
assertFalse(importerTopLevel0.hasPrototypeMap());
assertEquals("object", importerTopLevel0.getTypeOf());
assertTrue(importerTopLevel0.isEmpty());
assertFalse(nativeRegExp1.isSealed());
assertEquals("RegExp", nativeRegExp1.getClassName());
assertTrue(nativeRegExp1.isEmpty());
assertFalse(nativeRegExp1.hasPrototypeMap());
assertTrue(nativeRegExp1.isExtensible());
assertFalse(nativeRegExp1.avoidObjectDetection());
assertEquals("object", nativeRegExp1.getTypeOf());
assertFalse(nativeArray0.isEmpty());
assertTrue(nativeArray0.isExtensible());
assertFalse(nativeArray0.hasPrototypeMap());
assertEquals("object", nativeArray0.getTypeOf());
assertEquals(1L, nativeArray0.jsGet_length());
assertEquals("Array", nativeArray0.getClassName());
assertFalse(nativeArray0.isSealed());
assertEquals(1L, nativeArray0.getLength());
assertFalse(nativeArray0.avoidObjectDetection());
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, NativeRegExp.TEST);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(1, NativeRegExp.MATCH);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(100, Context.VERSION_1_0);
assertEquals(150, Context.VERSION_1_5);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(110, Context.VERSION_1_1);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(120, Context.VERSION_1_2);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(160, Context.VERSION_1_6);
assertEquals(130, Context.VERSION_1_3);
assertFalse(context0.generateObserverCount);
assertEquals(170, Context.VERSION_1_7);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(140, Context.VERSION_1_4);
assertEquals(180, Context.VERSION_1_8);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(0, NativeRegExp.TEST);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(4, ScriptableObject.PERMANENT);

NativeArray nativeArray1 = (NativeArray)nativeRegExp1.executeRegExp(context0, importerTopLevel0, regExpImpl0, "=h-o4dl9C|Ho/", intArray0, 1);
assertFalse(nativeArray1.equals((Object)nativeArray0));
assertNotNull(nativeArray1);
assertEquals(2, intArray0.length);
assertSame(nativeRegExp0, nativeRegExp1);
assertSame(nativeRegExp1, nativeRegExp0);
assertNotSame(nativeArray1, nativeArray0);
assertArrayEquals(new int[] {0, 0}, intArray0);
assertFalse(nativeRegExp0.avoidObjectDetection());
assertEquals("object", nativeRegExp0.getTypeOf());
assertTrue(nativeRegExp0.isExtensible());
assertFalse(nativeRegExp0.isSealed());
assertFalse(nativeRegExp0.hasPrototypeMap());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertTrue(nativeRegExp0.isEmpty());
assertFalse(context0.isSealed());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals("JavaImporter", importerTopLevel0.getClassName());
assertTrue(importerTopLevel0.isExtensible());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertFalse(importerTopLevel0.isSealed());
assertFalse(importerTopLevel0.hasPrototypeMap());
assertEquals("object", importerTopLevel0.getTypeOf());
assertTrue(importerTopLevel0.isEmpty());
assertFalse(nativeRegExp1.isSealed());
assertEquals("RegExp", nativeRegExp1.getClassName());
assertTrue(nativeRegExp1.isEmpty());
assertFalse(nativeRegExp1.hasPrototypeMap());
assertTrue(nativeRegExp1.isExtensible());
assertFalse(nativeRegExp1.avoidObjectDetection());
assertEquals("object", nativeRegExp1.getTypeOf());
assertFalse(nativeArray1.hasPrototypeMap());
assertEquals("object", nativeArray1.getTypeOf());
assertEquals(1L, nativeArray1.getLength());
assertEquals(1L, nativeArray1.jsGet_length());
assertEquals("Array", nativeArray1.getClassName());
assertTrue(nativeArray1.isExtensible());
assertFalse(nativeArray1.avoidObjectDetection());
assertFalse(nativeArray1.isSealed());
assertFalse(nativeArray1.isEmpty());
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, NativeRegExp.TEST);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(1, NativeRegExp.MATCH);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(100, Context.VERSION_1_0);
assertEquals(150, Context.VERSION_1_5);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(110, Context.VERSION_1_1);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(120, Context.VERSION_1_2);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(160, Context.VERSION_1_6);
assertEquals(130, Context.VERSION_1_3);
assertFalse(context0.generateObserverCount);
assertEquals(170, Context.VERSION_1_7);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(140, Context.VERSION_1_4);
assertEquals(180, Context.VERSION_1_8);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(0, NativeRegExp.TEST);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(1, ScriptableObject.READONLY);


[MASTER] 19:19:39.887 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 19:19:39.893 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeRegExp nativeRegExp0 = new NativeRegExp();
assertNotNull(nativeRegExp0);
assertTrue(nativeRegExp0.isExtensible());
assertEquals("object", nativeRegExp0.getTypeOf());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertTrue(nativeRegExp0.isEmpty());
assertFalse(nativeRegExp0.isSealed());
assertFalse(nativeRegExp0.hasPrototypeMap());
assertFalse(nativeRegExp0.avoidObjectDetection());
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, NativeRegExp.TEST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);

Context context0 = new Context();
assertNotNull(context0);
assertFalse(context0.isGeneratingDebugChanged());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(context0.isSealed());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getLanguageVersion());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(110, Context.VERSION_1_1);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(170, Context.VERSION_1_7);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertFalse(context0.generateObserverCount);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(120, Context.VERSION_1_2);
assertEquals(180, Context.VERSION_1_8);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(130, Context.VERSION_1_3);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(140, Context.VERSION_1_4);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(100, Context.VERSION_1_0);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(150, Context.VERSION_1_5);

ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
assertNotNull(importerTopLevel0);
assertFalse(importerTopLevel0.isSealed());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertTrue(importerTopLevel0.isEmpty());
assertEquals("JavaImporter", importerTopLevel0.getClassName());
assertTrue(importerTopLevel0.isExtensible());
assertFalse(importerTopLevel0.hasPrototypeMap());
assertEquals("object", importerTopLevel0.getTypeOf());
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);

NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile(context0, importerTopLevel0, context0.emptyArgs);
assertNotNull(nativeRegExp1);
assertSame(nativeRegExp0, nativeRegExp1);
assertSame(nativeRegExp1, nativeRegExp0);
assertTrue(nativeRegExp0.isExtensible());
assertEquals("object", nativeRegExp0.getTypeOf());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertTrue(nativeRegExp0.isEmpty());
assertFalse(nativeRegExp0.isSealed());
assertFalse(nativeRegExp0.hasPrototypeMap());
assertFalse(nativeRegExp0.avoidObjectDetection());
assertFalse(context0.isGeneratingDebugChanged());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(context0.isSealed());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getLanguageVersion());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertFalse(importerTopLevel0.isSealed());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertTrue(importerTopLevel0.isEmpty());
assertEquals("JavaImporter", importerTopLevel0.getClassName());
assertTrue(importerTopLevel0.isExtensible());
assertFalse(importerTopLevel0.hasPrototypeMap());
assertEquals("object", importerTopLevel0.getTypeOf());
assertTrue(nativeRegExp1.isExtensible());
assertEquals("RegExp", nativeRegExp1.getClassName());
assertFalse(nativeRegExp1.isSealed());
assertEquals("object", nativeRegExp1.getTypeOf());
assertTrue(nativeRegExp1.isEmpty());
assertFalse(nativeRegExp1.avoidObjectDetection());
assertFalse(nativeRegExp1.hasPrototypeMap());
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, NativeRegExp.TEST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(110, Context.VERSION_1_1);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(170, Context.VERSION_1_7);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertFalse(context0.generateObserverCount);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(120, Context.VERSION_1_2);
assertEquals(180, Context.VERSION_1_8);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(130, Context.VERSION_1_3);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(140, Context.VERSION_1_4);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(100, Context.VERSION_1_0);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(150, Context.VERSION_1_5);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(0, NativeRegExp.TEST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, NativeRegExp.JSREG_GLOB);

Boolean boolean0 = (Boolean)nativeRegExp0.getInstanceIdValue(3);
assertNotNull(boolean0);
assertSame(nativeRegExp0, nativeRegExp1);
assertFalse(boolean0);
assertTrue(nativeRegExp0.isExtensible());
assertEquals("object", nativeRegExp0.getTypeOf());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertTrue(nativeRegExp0.isEmpty());
assertFalse(nativeRegExp0.isSealed());
assertFalse(nativeRegExp0.hasPrototypeMap());
assertFalse(nativeRegExp0.avoidObjectDetection());
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, NativeRegExp.TEST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);


[MASTER] 19:19:40.811 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 19:19:40.817 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeRegExp nativeRegExp0 = new NativeRegExp();
assertNotNull(nativeRegExp0);
assertFalse(nativeRegExp0.hasPrototypeMap());
assertTrue(nativeRegExp0.isExtensible());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertEquals("object", nativeRegExp0.getTypeOf());
assertTrue(nativeRegExp0.isEmpty());
assertFalse(nativeRegExp0.avoidObjectDetection());
assertFalse(nativeRegExp0.isSealed());
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(0, NativeRegExp.TEST);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);

Context context0 = new Context();
assertNotNull(context0);
assertFalse(context0.isSealed());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getLanguageVersion());
assertEquals(0, context0.getOptimizationLevel());
assertTrue(context0.isGeneratingSource());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(0, context0.getInstructionObserverThreshold());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(150, Context.VERSION_1_5);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(110, Context.VERSION_1_1);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(100, Context.VERSION_1_0);
assertFalse(context0.generateObserverCount);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(180, Context.VERSION_1_8);
assertEquals(140, Context.VERSION_1_4);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(170, Context.VERSION_1_7);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(160, Context.VERSION_1_6);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(120, Context.VERSION_1_2);

ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
assertNotNull(importerTopLevel0);
assertEquals("JavaImporter", importerTopLevel0.getClassName());
assertTrue(importerTopLevel0.isExtensible());
assertEquals("object", importerTopLevel0.getTypeOf());
assertTrue(importerTopLevel0.isEmpty());
assertFalse(importerTopLevel0.isSealed());
assertFalse(importerTopLevel0.hasPrototypeMap());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertEquals(13, ScriptableObject.CONST);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);

NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile(context0, importerTopLevel0, context0.emptyArgs);
assertNotNull(nativeRegExp1);
assertSame(nativeRegExp0, nativeRegExp1);
assertSame(nativeRegExp1, nativeRegExp0);
assertFalse(nativeRegExp0.hasPrototypeMap());
assertTrue(nativeRegExp0.isExtensible());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertEquals("object", nativeRegExp0.getTypeOf());
assertTrue(nativeRegExp0.isEmpty());
assertFalse(nativeRegExp0.avoidObjectDetection());
assertFalse(nativeRegExp0.isSealed());
assertFalse(context0.isSealed());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getLanguageVersion());
assertEquals(0, context0.getOptimizationLevel());
assertTrue(context0.isGeneratingSource());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(0, context0.getInstructionObserverThreshold());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals("JavaImporter", importerTopLevel0.getClassName());
assertTrue(importerTopLevel0.isExtensible());
assertEquals("object", importerTopLevel0.getTypeOf());
assertTrue(importerTopLevel0.isEmpty());
assertFalse(importerTopLevel0.isSealed());
assertFalse(importerTopLevel0.hasPrototypeMap());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertTrue(nativeRegExp1.isExtensible());
assertEquals("RegExp", nativeRegExp1.getClassName());
assertFalse(nativeRegExp1.isSealed());
assertEquals("object", nativeRegExp1.getTypeOf());
assertTrue(nativeRegExp1.isEmpty());
assertFalse(nativeRegExp1.avoidObjectDetection());
assertFalse(nativeRegExp1.hasPrototypeMap());
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(0, NativeRegExp.TEST);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(150, Context.VERSION_1_5);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(110, Context.VERSION_1_1);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(100, Context.VERSION_1_0);
assertFalse(context0.generateObserverCount);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(180, Context.VERSION_1_8);
assertEquals(140, Context.VERSION_1_4);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(170, Context.VERSION_1_7);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(160, Context.VERSION_1_6);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(120, Context.VERSION_1_2);
assertEquals(13, ScriptableObject.CONST);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(0, NativeRegExp.TEST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, NativeRegExp.JSREG_GLOB);

Boolean boolean0 = (Boolean)nativeRegExp0.getInstanceIdValue(5);
assertNotNull(boolean0);
assertSame(nativeRegExp0, nativeRegExp1);
assertFalse(boolean0);
assertFalse(nativeRegExp0.hasPrototypeMap());
assertTrue(nativeRegExp0.isExtensible());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertEquals("object", nativeRegExp0.getTypeOf());
assertTrue(nativeRegExp0.isEmpty());
assertFalse(nativeRegExp0.avoidObjectDetection());
assertFalse(nativeRegExp0.isSealed());
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(0, NativeRegExp.TEST);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'NativeRegExp_ESTest' to results/evosuite5/closure-16-com.google.javascript.rhino.head.regexp.NativeRegExp-16
* Done!

* Computation finished

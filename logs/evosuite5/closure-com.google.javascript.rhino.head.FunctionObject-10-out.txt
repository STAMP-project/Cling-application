entry: sources/closure-16/build/classes
entry: sources/closure-16/lib/args4j.jar
entry: sources/closure-16/lib/guava.jar
entry: sources/closure-16/lib/json.jar
entry: sources/closure-16/lib/jsr305.jar
entry: sources/closure-16/lib/protobuf-java.jar
entry: sources/closure-16/build/lib/rhino.jar
entry: sources/closure-16/lib/ant.jar
** CP: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar
* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: com.google.javascript.rhino.head.FunctionObject
* Starting Client-0
* Connecting to master process on port 19240
* Analyzing classpath: 
  - sources/closure-16/build/classes
  - sources/closure-16/lib/args4j.jar
  - sources/closure-16/lib/guava.jar
  - sources/closure-16/lib/json.jar
  - sources/closure-16/lib/jsr305.jar
  - sources/closure-16/lib/protobuf-java.jar
  - sources/closure-16/build/lib/rhino.jar
  - sources/closure-16/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.head.FunctionObject
* Test criterion:
  - Branch Coverage
* Total number of test goals for DYNAMOSA: 183
* Using seed 1564036095301
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 59 / 183
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.21311475409836064
[MASTER] 08:28:57.252 [logback-1] WARN  TestUsageChecker - class com.google.javascript.rhino.head.ContextFactory$1GlobalSetterImpl looks like an anonymous class, ignoring it (although reflection says false) GlobalSetterImpl
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.28415300546448086
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.45901639344262296
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5573770491803278
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5628415300546448
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6010928961748634
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6010928961748634
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6557377049180327
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6557377049180327
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6557377049180327
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7103825136612022
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7213114754098361
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7213114754098361
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7213114754098361
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7213114754098361
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7213114754098361
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7213114754098361
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7213114754098361
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7213114754098361
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7213114754098361
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.726775956284153
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.726775956284153
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.726775956284153
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.726775956284153
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.726775956284153
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.726775956284153
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.726775956284153
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.726775956284153
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.726775956284153
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.726775956284153
* Search finished after 313s and 595 generations, 178348 statements, best individual has fitness: 50.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.726775956284153
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 72%
* Total number of goals: 183
* Number of covered goals: 131
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.726775956284153
* Generated 37 tests with total length 159
* Resulting test suite's coverage: 73%
* Generating assertions
[MASTER] 08:34:42.487 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.73795% of time used, but only 5/37 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 12%
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.726775956284153
* Compiling and checking tests
[MASTER] 08:35:15.666 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Exception was not thrown in com.google.javascript.rhino.head.DefaultErrorReporter but in com.google.javascript.rhino.head.Context.reportRuntimeError(Context.java:947): org.evosuite.runtime.mock.java.lang.MockThrowable: Unsupported parameter type "com.google.javascript.rhino.head.Context" in method "call".
[MASTER] 08:35:15.667 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Class<Synchronizer> class0 = Synchronizer.class;
Method[] methodArray0 = FunctionObject.getMethodList(class0);
NativeString nativeString0 = new NativeString("call");
Method method0 = FunctionObject.findSingleMethod(methodArray0, "call");
FunctionObject functionObject0 = new FunctionObject("call", method0, nativeString0);

[MASTER] 08:35:37.397 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 08:35:37.402 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeString nativeString0 = new NativeString("toString");
assertNotNull(nativeString0);
assertEquals("String", nativeString0.getClassName());
assertEquals("toString", nativeString0.toString());
assertTrue(nativeString0.isEmpty());
assertTrue(nativeString0.isExtensible());
assertEquals("object", nativeString0.getTypeOf());
assertFalse(nativeString0.hasPrototypeMap());
assertFalse(nativeString0.avoidObjectDetection());
assertFalse(nativeString0.isSealed());
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);

Context context0 = Context.getContext();
assertNotNull(context0);
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isSealed());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(0, context0.getInstructionObserverThreshold());
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(100, Context.VERSION_1_0);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(140, Context.VERSION_1_4);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(180, Context.VERSION_1_8);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(130, Context.VERSION_1_3);
assertFalse(context0.generateObserverCount);
assertEquals(170, Context.VERSION_1_7);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(120, Context.VERSION_1_2);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(110, Context.VERSION_1_1);
assertEquals(150, Context.VERSION_1_5);
assertEquals(8, Context.FEATURE_STRICT_VARS);

Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeString0, (Object) "toString", 1);
assertEquals("toString", object0);
assertNotNull(object0);
assertEquals("String", nativeString0.getClassName());
assertEquals("toString", nativeString0.toString());
assertTrue(nativeString0.isEmpty());
assertTrue(nativeString0.isExtensible());
assertEquals("object", nativeString0.getTypeOf());
assertFalse(nativeString0.hasPrototypeMap());
assertFalse(nativeString0.avoidObjectDetection());
assertFalse(nativeString0.isSealed());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isSealed());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(0, context0.getInstructionObserverThreshold());
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(100, Context.VERSION_1_0);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(140, Context.VERSION_1_4);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(180, Context.VERSION_1_8);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(130, Context.VERSION_1_3);
assertFalse(context0.generateObserverCount);
assertEquals(170, Context.VERSION_1_7);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(120, Context.VERSION_1_2);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(110, Context.VERSION_1_1);
assertEquals(150, Context.VERSION_1_5);
assertEquals(8, Context.FEATURE_STRICT_VARS);


[MASTER] 08:35:40.180 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 08:35:40.181 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getCurrentContext();
assertNotNull(context0);
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertTrue(context0.isGeneratingSource());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(0, context0.getInstructionObserverThreshold());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(context0.isSealed());
assertEquals(110, Context.VERSION_1_1);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(150, Context.VERSION_1_5);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(170, Context.VERSION_1_7);
assertEquals(120, Context.VERSION_1_2);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(140, Context.VERSION_1_4);
assertEquals(180, Context.VERSION_1_8);
assertEquals(130, Context.VERSION_1_3);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(100, Context.VERSION_1_0);
assertFalse(context0.generateObserverCount);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);

NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
assertNotNull(nativeIterator_StopIteration0);
assertFalse(nativeIterator_StopIteration0.isSealed());
assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
assertTrue(nativeIterator_StopIteration0.isExtensible());
assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
assertTrue(nativeIterator_StopIteration0.isEmpty());
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);

NativeCall nativeCall0 = context0.currentActivationCall;
assertNull(nativeCall0);

FunctionObject.convertArg(context0, (Scriptable) nativeCall0, (Object) nativeIterator_StopIteration0, 2);

[MASTER] 08:35:42.641 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 08:35:42.644 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeString nativeString0 = new NativeString("toString");
assertNotNull(nativeString0);
assertTrue(nativeString0.isExtensible());
assertEquals("toString", nativeString0.toString());
assertEquals("object", nativeString0.getTypeOf());
assertFalse(nativeString0.hasPrototypeMap());
assertEquals("String", nativeString0.getClassName());
assertTrue(nativeString0.isEmpty());
assertFalse(nativeString0.isSealed());
assertFalse(nativeString0.avoidObjectDetection());
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);

Context context0 = Context.getContext();
assertNotNull(context0);
assertEquals(0, context0.getLanguageVersion());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isSealed());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertFalse(context0.isGeneratingDebugChanged());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(150, Context.VERSION_1_5);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(110, Context.VERSION_1_1);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(120, Context.VERSION_1_2);
assertEquals(170, Context.VERSION_1_7);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(180, Context.VERSION_1_8);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(140, Context.VERSION_1_4);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertFalse(context0.generateObserverCount);
assertEquals(100, Context.VERSION_1_0);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);

Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeString0, (Object) context0.generateObserverCount, 3);
assertEquals(false, object0);
assertNotNull(object0);
assertTrue(nativeString0.isExtensible());
assertEquals("toString", nativeString0.toString());
assertEquals("object", nativeString0.getTypeOf());
assertFalse(nativeString0.hasPrototypeMap());
assertEquals("String", nativeString0.getClassName());
assertTrue(nativeString0.isEmpty());
assertFalse(nativeString0.isSealed());
assertFalse(nativeString0.avoidObjectDetection());
assertEquals(0, context0.getLanguageVersion());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isSealed());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertFalse(context0.isGeneratingDebugChanged());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(150, Context.VERSION_1_5);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(110, Context.VERSION_1_1);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(120, Context.VERSION_1_2);
assertEquals(170, Context.VERSION_1_7);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(180, Context.VERSION_1_8);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(140, Context.VERSION_1_4);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertFalse(context0.generateObserverCount);
assertEquals(100, Context.VERSION_1_0);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 4
* Writing tests to file
* Writing JUnit test case 'FunctionObject_ESTest' to results/evosuite5/closure-16-com.google.javascript.rhino.head.FunctionObject-10
* Done!

* Computation finished

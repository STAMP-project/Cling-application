[MASTER] 09:58:25.076 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.reflect.Constructor<T> : Type points to itself
[MASTER] 10:07:09.138 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_75_1564042028619/com/google/javascript/rhino/head/ScriptableObject_75_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_75_1564042028619/com/google/javascript/rhino/head/ScriptableObject_75_tmp__ESTest_scaffolding.java]]
[MASTER] 10:07:09.138 [logback-2] ERROR JUnitAnalyzer - Classpath: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar:/home/pderakhshanfar/botsing-integration-experiment/tools/evosuite.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/build/classes:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/args4j.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/guava.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/json.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/jsr305.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/protobuf-java.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/build/lib/rhino.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/ant.jar
[MASTER] 10:07:09.138 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/botsing-integration-experiment/tools/evosuite.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/build/classes:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/args4j.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/guava.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/json.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/jsr305.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/protobuf-java.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/build/lib/rhino.jar:/home/pderakhshanfar/botsing-integration-experiment/sources/closure-16/lib/ant.jar
[MASTER] 10:07:09.143 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: no instance(s) of type variable(s) K,V exist so that java.util.Map<K,V> conforms to com.google.javascript.rhino.head.NativeObject: 327
[MASTER] 10:07:09.143 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_75_1564042028619/com/google/javascript/rhino/head/ScriptableObject_75_tmp__ESTest.java uses or overrides a deprecated API.: -1
[MASTER] 10:07:09.144 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:deprecation for details.: -1
[MASTER] 10:07:09.144 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_75_1564042028619/com/google/javascript/rhino/head/ScriptableObject_75_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 10:07:09.144 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 10:07:09.144 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Some messages have been simplified; recompile with -Xdiags:verbose to get full output: -1
[MASTER] 10:07:09.150 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_75_1564042028619/com/google/javascript/rhino/head/ScriptableObject_75_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 25 08:07:08 GMT 2019
4:  */
5: 
6: package com.google.javascript.rhino.head;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import com.google.javascript.rhino.head.Arguments;
13: import com.google.javascript.rhino.head.BoundFunction;
14: import com.google.javascript.rhino.head.Context;
15: import com.google.javascript.rhino.head.ContextFactory;
16: import com.google.javascript.rhino.head.NativeArray;
17: import com.google.javascript.rhino.head.NativeError;
18: import com.google.javascript.rhino.head.NativeGenerator;
19: import com.google.javascript.rhino.head.NativeIterator;
20: import com.google.javascript.rhino.head.NativeJavaTopPackage;
21: import com.google.javascript.rhino.head.NativeObject;
22: import com.google.javascript.rhino.head.ScriptRuntime;
23: import com.google.javascript.rhino.head.ScriptableObject;
24: import com.google.javascript.rhino.head.Synchronizer;
25: import java.util.function.BiFunction;
26: import org.evosuite.runtime.EvoRunner;
27: import org.evosuite.runtime.EvoRunnerParameters;
28: import org.evosuite.runtime.ViolatedAssumptionAnswer;
29: import org.junit.runner.RunWith;
30: 
31: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
32: public class ScriptableObject_75_tmp__ESTest extends ScriptableObject_75_tmp__ESTest_scaffolding {
33: 
34:   @Test(timeout = 4000)
35:   public void test0()  throws Throwable  {
36:       NativeError nativeError0 = new NativeError();
37:       assertEquals(1, ScriptableObject.READONLY);
38:       assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
39:       assertEquals(0, ScriptableObject.EMPTY);
40:       assertEquals(4, ScriptableObject.PERMANENT);
41:       assertEquals(13, ScriptableObject.CONST);
42:       assertEquals(2, ScriptableObject.DONTENUM);
43:       assertTrue(nativeError0.isEmpty());
44:       assertTrue(nativeError0.isExtensible());
45:       assertEquals("object", nativeError0.getTypeOf());
46:       assertFalse(nativeError0.hasPrototypeMap());
47:       assertEquals("Error", nativeError0.getClassName());
48:       assertFalse(nativeError0.avoidObjectDetection());
49:       assertFalse(nativeError0.isSealed());
50:       assertNotNull(nativeError0);
51:       
52:       NativeGenerator nativeGenerator0 = NativeGenerator.init((ScriptableObject) null, false);
53:       assertEquals(0, NativeGenerator.GENERATOR_SEND);
54:       assertEquals(0, ScriptableObject.EMPTY);
55:       assertEquals(1, NativeGenerator.GENERATOR_THROW);
56:       assertEquals(13, ScriptableObject.CONST);
57:       assertEquals(1, ScriptableObject.READONLY);
58:       assertEquals(4, ScriptableObject.PERMANENT);
59:       assertEquals(2, ScriptableObject.DONTENUM);
60:       assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
61:       assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
62:       assertTrue(nativeGenerator0.isExtensible());
63:       assertTrue(nativeGenerator0.hasPrototypeMap());
64:       assertEquals("object", nativeGenerator0.getTypeOf());
65:       assertEquals("Generator", nativeGenerator0.getClassName());
66:       assertTrue(nativeGenerator0.isEmpty());
67:       assertFalse(nativeGenerator0.isSealed());
68:       assertFalse(nativeGenerator0.avoidObjectDetection());
69:       assertNotNull(nativeGenerator0);
70:       
71:       Synchronizer synchronizer0 = new Synchronizer(nativeGenerator0, nativeGenerator0);
72:       assertEquals(0, NativeGenerator.GENERATOR_SEND);
73:       assertEquals(0, ScriptableObject.EMPTY);
74:       assertEquals(1, NativeGenerator.GENERATOR_THROW);
75:       assertEquals(13, ScriptableObject.CONST);
76:       assertEquals(1, ScriptableObject.READONLY);
77:       assertEquals(4, ScriptableObject.PERMANENT);
78:       assertEquals(2, ScriptableObject.DONTENUM);
79:       assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
80:       assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
81:       assertTrue(nativeGenerator0.isExtensible());
82:       assertTrue(nativeGenerator0.hasPrototypeMap());
83:       assertEquals("object", nativeGenerator0.getTypeOf());
84:       assertEquals("Generator", nativeGenerator0.getClassName());
85:       assertTrue(nativeGenerator0.isEmpty());
86:       assertFalse(nativeGenerator0.isSealed());
87:       assertFalse(nativeGenerator0.avoidObjectDetection());
88:       assertNotNull(synchronizer0);
89:       
90:       ContextFactory contextFactory0 = new ContextFactory();
91:       assertFalse(contextFactory0.isSealed());
92:       assertFalse(contextFactory0.hasExplicitGlobal());
93:       assertNotNull(contextFactory0);
94:       
95:       Context context0 = new Context(contextFactory0);
96:       assertFalse(context0.generateObserverCount);
97:       assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
98:       assertEquals(130, Context.VERSION_1_3);
99:       assertEquals(140, Context.VERSION_1_4);
100:       assertEquals(0, Context.VERSION_DEFAULT);
101:       assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
102:       assertEquals(180, Context.VERSION_1_8);
103:       assertEquals(160, Context.VERSION_1_6);
104:       assertEquals(110, Context.VERSION_1_1);
105:       assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
106:       assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
107:       assertEquals(170, Context.VERSION_1_7);
108:       assertEquals(120, Context.VERSION_1_2);
109:       assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
110:       assertEquals(100, Context.VERSION_1_0);
111:       assertEquals((-1), Context.VERSION_UNKNOWN);
112:       assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
113:       assertEquals(150, Context.VERSION_1_5);
114:       assertEquals(6, Context.FEATURE_E4X);
115:       assertEquals(8, Context.FEATURE_STRICT_VARS);
116:       assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
117:       assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
118:       assertEquals(9, Context.FEATURE_STRICT_EVAL);
119:       assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
120:       assertEquals(11, Context.FEATURE_STRICT_MODE);
121:       assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
122:       assertFalse(contextFactory0.isSealed());
123:       assertFalse(contextFactory0.hasExplicitGlobal());
124:       assertEquals(0, context0.getInstructionObserverThreshold());
125:       assertTrue(context0.isGeneratingSource());
126:       assertEquals(0, context0.getLanguageVersion());
127:       assertFalse(context0.isSealed());
128:       assertFalse(context0.isGeneratingDebug());
129:       assertFalse(context0.isGeneratingDebugChanged());
130:       assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
131:       assertEquals(0, context0.getOptimizationLevel());
132:       assertNotNull(context0);
133:       
134:       Context context1 = contextFactory0.enter();
135:       assertNotSame(context1, context0);
136:       assertEquals(140, Context.VERSION_1_4);
137:       assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
138:       assertEquals(180, Context.VERSION_1_8);
139:       assertEquals(11, Context.FEATURE_STRICT_MODE);
140:       assertEquals(130, Context.VERSION_1_3);
141:       assertFalse(context1.generateObserverCount);
142:       assertEquals(170, Context.VERSION_1_7);
143:       assertEquals(8, Context.FEATURE_STRICT_VARS);
144:       assertEquals(120, Context.VERSION_1_2);
145:       assertEquals(160, Context.VERSION_1_6);
146:       assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
147:       assertEquals(110, Context.VERSION_1_1);
148:       assertEquals(0, Context.VERSION_DEFAULT);
149:       assertEquals(150, Context.VERSION_1_5);
150:       assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
151:       assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
152:       assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
153:       assertEquals(6, Context.FEATURE_E4X);
154:       assertEquals((-1), Context.VERSION_UNKNOWN);
155:       assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
156:       assertEquals(100, Context.VERSION_1_0);
157:       assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
158:       assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
159:       assertEquals(9, Context.FEATURE_STRICT_EVAL);
160:       assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
161:       assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
162:       assertFalse(contextFactory0.isSealed());
163:       assertFalse(contextFactory0.hasExplicitGlobal());
164:       assertEquals(0, context1.getLanguageVersion());
165:       assertFalse(context1.isSealed());
166:       assertFalse(context1.isGeneratingDebug());
167:       assertEquals(0, context1.getInstructionObserverThreshold());
168:       assertEquals(0, context1.getOptimizationLevel());
169:       assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
170:       assertTrue(context1.isGeneratingSource());
171:       assertFalse(context1.isGeneratingDebugChanged());
172:       assertNotNull(context1);
173:       assertFalse(context1.equals((Object)context0));
174:       
175:       BoundFunction boundFunction0 = new BoundFunction(context0, nativeGenerator0, synchronizer0, nativeError0, context1.emptyArgs);
176:       assertEquals(1, ScriptableObject.READONLY);
177:       assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
178:       assertEquals(0, ScriptableObject.EMPTY);
179:       assertEquals(4, ScriptableObject.PERMANENT);
180:       assertEquals(13, ScriptableObject.CONST);
181:       assertEquals(2, ScriptableObject.DONTENUM);
182:       assertEquals(0, NativeGenerator.GENERATOR_SEND);
183:       assertEquals(0, ScriptableObject.EMPTY);
184:       assertEquals(1, NativeGenerator.GENERATOR_THROW);
185:       assertEquals(13, ScriptableObject.CONST);
186:       assertEquals(1, ScriptableObject.READONLY);
187:       assertEquals(4, ScriptableObject.PERMANENT);
188:       assertEquals(2, ScriptableObject.DONTENUM);
189:       assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
190:       assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
191:       assertFalse(context0.generateObserverCount);
192:       assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
193:       assertEquals(130, Context.VERSION_1_3);
194:       assertEquals(140, Context.VERSION_1_4);
195:       assertEquals(0, Context.VERSION_DEFAULT);
196:       assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
197:       assertEquals(180, Context.VERSION_1_8);
198:       assertEquals(160, Context.VERSION_1_6);
199:       assertEquals(110, Context.VERSION_1_1);
200:       assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
201:       assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
202:       assertEquals(170, Context.VERSION_1_7);
203:       assertEquals(120, Context.VERSION_1_2);
204:       assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
205:       assertEquals(100, Context.VERSION_1_0);
206:       assertEquals((-1), Context.VERSION_UNKNOWN);
207:       assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
208:       assertEquals(150, Context.VERSION_1_5);
209:       assertEquals(6, Context.FEATURE_E4X);
210:       assertEquals(8, Context.FEATURE_STRICT_VARS);
211:       assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
212:       assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
213:       assertEquals(9, Context.FEATURE_STRICT_EVAL);
214:       assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
215:       assertEquals(11, Context.FEATURE_STRICT_MODE);
216:       assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
217:       assertEquals(140, Context.VERSION_1_4);
218:       assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
219:       assertEquals(180, Context.VERSION_1_8);
220:       assertEquals(11, Context.FEATURE_STRICT_MODE);
221:       assertEquals(130, Context.VERSION_1_3);
222:       assertFalse(context1.generateObserverCount);
223:       assertEquals(170, Context.VERSION_1_7);
224:       assertEquals(8, Context.FEATURE_STRICT_VARS);
225:       assertEquals(120, Context.VERSION_1_2);
226:       assertEquals(160, Context.VERSION_1_6);
227:       assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
228:       assertEquals(110, Context.VERSION_1_1);
229:       assertEquals(0, Context.VERSION_DEFAULT);
230:       assertEquals(150, Context.VERSION_1_5);
231:       assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
232:       assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
233:       assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
234:       assertEquals(6, Context.FEATURE_E4X);
235:       assertEquals((-1), Context.VERSION_UNKNOWN);
236:       assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
237:       assertEquals(100, Context.VERSION_1_0);
238:       assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
239:       assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
240:       assertEquals(9, Context.FEATURE_STRICT_EVAL);
241:       assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
242:       assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
243:       assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
244:       assertEquals(4, ScriptableObject.PERMANENT);
245:       assertEquals(1, ScriptableObject.READONLY);
246:       assertEquals(0, ScriptableObject.EMPTY);
247:       assertEquals(13, ScriptableObject.CONST);
248:       assertEquals(2, ScriptableObject.DONTENUM);
249:       assertTrue(nativeError0.isEmpty());
250:       assertTrue(nativeError0.isExtensible());
251:       assertEquals("object", nativeError0.getTypeOf());
252:       assertFalse(nativeError0.hasPrototypeMap());
253:       assertEquals("Error", nativeError0.getClassName());
254:       assertFalse(nativeError0.avoidObjectDetection());
255:       assertFalse(nativeError0.isSealed());
256:       assertTrue(nativeGenerator0.isExtensible());
257:       assertTrue(nativeGenerator0.hasPrototypeMap());
258:       assertEquals("object", nativeGenerator0.getTypeOf());
259:       assertEquals("Generator", nativeGenerator0.getClassName());
260:       assertTrue(nativeGenerator0.isEmpty());
261:       assertFalse(nativeGenerator0.isSealed());
262:       assertFalse(nativeGenerator0.avoidObjectDetection());
263:       assertFalse(contextFactory0.isSealed());
264:       assertFalse(contextFactory0.hasExplicitGlobal());
265:       assertEquals(0, context0.getInstructionObserverThreshold());
266:       assertTrue(context0.isGeneratingSource());
267:       assertEquals(0, context0.getLanguageVersion());
268:       assertFalse(context0.isSealed());
269:       assertFalse(context0.isGeneratingDebug());
270:       assertFalse(context0.isGeneratingDebugChanged());
271:       assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
272:       assertEquals(0, context0.getOptimizationLevel());
273:       assertEquals(0, context1.getLanguageVersion());
274:       assertFalse(context1.isSealed());
275:       assertFalse(context1.isGeneratingDebug());
276:       assertEquals(0, context1.getInstructionObserverThreshold());
277:       assertEquals(0, context1.getOptimizationLevel());
278:       assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
279:       assertTrue(context1.isGeneratingSource());
280:       assertFalse(context1.isGeneratingDebugChanged());
281:       assertEquals(0, boundFunction0.getLength());
282:       assertFalse(boundFunction0.hasPrototypeMap());
283:       assertFalse(boundFunction0.isSealed());
284:       assertFalse(boundFunction0.isEmpty());
285:       assertFalse(boundFunction0.avoidObjectDetection());
286:       assertEquals("function", boundFunction0.getTypeOf());
287:       assertEquals("Function", boundFunction0.getClassName());
288:       assertTrue(boundFunction0.isExtensible());
289:       assertNotNull(boundFunction0);
290:       assertFalse(context0.equals((Object)context1));
291:       assertFalse(context1.equals((Object)context0));
292:       
293:       NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
294:       assertEquals(0, ScriptableObject.EMPTY);
295:       assertEquals(2, ScriptableObject.DONTENUM);
296:       assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
297:       assertEquals(1, ScriptableObject.READONLY);
298:       assertEquals(13, ScriptableObject.CONST);
299:       assertEquals(4, ScriptableObject.PERMANENT);
300:       assertTrue(nativeIterator_StopIteration0.isExtensible());
301:       assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
302:       assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
303:       assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
304:       assertTrue(nativeIterator_StopIteration0.isEmpty());
305:       assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
306:       assertFalse(nativeIterator_StopIteration0.isSealed());
307:       assertNotNull(nativeIterator_StopIteration0);
308:       
309:       NativeIterator.StopIteration nativeIterator_StopIteration1 = new NativeIterator.StopIteration();
310:       assertEquals(2, ScriptableObject.DONTENUM);
311:       assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
312:       assertEquals(0, ScriptableObject.EMPTY);
313:       assertEquals(1, ScriptableObject.READONLY);
314:       assertEquals(4, ScriptableObject.PERMANENT);
315:       assertEquals(13, ScriptableObject.CONST);
316:       assertFalse(nativeIterator_StopIteration1.hasPrototypeMap());
317:       assertEquals("object", nativeIterator_StopIteration1.getTypeOf());
318:       assertTrue(nativeIterator_StopIteration1.isExtensible());
319:       assertFalse(nativeIterator_StopIteration1.avoidObjectDetection());
320:       assertTrue(nativeIterator_StopIteration1.isEmpty());
321:       assertFalse(nativeIterator_StopIteration1.isSealed());
322:       assertEquals("StopIteration", nativeIterator_StopIteration1.getClassName());
323:       assertNotNull(nativeIterator_StopIteration1);
324:       assertFalse(nativeIterator_StopIteration1.equals((Object)nativeIterator_StopIteration0));
325:       
326:       BiFunction<Arguments, NativeObject, NativeArray> biFunction0 = (BiFunction<Arguments, NativeObject, NativeArray>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
327:       doReturn((Object) null).when(biFunction0).apply(any(com.google.javascript.rhino.head.Arguments.class) , anyMap());
328:       Object object0 = nativeIterator_StopIteration1.compute("8I*", biFunction0);
329:       assertNotSame(nativeIterator_StopIteration1, nativeIterator_StopIteration0);
330:       assertEquals(2, ScriptableObject.DONTENUM);
331:       assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
332:       assertEquals(0, ScriptableObject.EMPTY);
333:       assertEquals(1, ScriptableObject.READONLY);
334:       assertEquals(4, ScriptableObject.PERMANENT);
335:       assertEquals(13, ScriptableObject.CONST);
336:       assertFalse(nativeIterator_StopIteration1.hasPrototypeMap());
337:       assertEquals("object", nativeIterator_StopIteration1.getTypeOf());
338:       assertTrue(nativeIterator_StopIteration1.isExtensible());
339:       assertFalse(nativeIterator_StopIteration1.avoidObjectDetection());
340:       assertTrue(nativeIterator_StopIteration1.isEmpty());
341:       assertFalse(nativeIterator_StopIteration1.isSealed());
342:       assertEquals("StopIteration", nativeIterator_StopIteration1.getClassName());
343:       assertNull(object0);
344:       assertFalse(nativeIterator_StopIteration1.equals((Object)nativeIterator_StopIteration0));
345:       
346:       Context context2 = new Context();
347:       assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
348:       assertEquals(120, Context.VERSION_1_2);
349:       assertEquals(170, Context.VERSION_1_7);
350:       assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
351:       assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
352:       assertFalse(context2.generateObserverCount);
353:       assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
354:       assertEquals(160, Context.VERSION_1_6);
355:       assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
356:       assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
357:       assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
358:       assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
359:       assertEquals(140, Context.VERSION_1_4);
360:       assertEquals(130, Context.VERSION_1_3);
361:       assertEquals((-1), Context.VERSION_UNKNOWN);
362:       assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
363:       assertEquals(6, Context.FEATURE_E4X);
364:       assertEquals(180, Context.VERSION_1_8);
365:       assertEquals(9, Context.FEATURE_STRICT_EVAL);
366:       assertEquals(100, Context.VERSION_1_0);
367:       assertEquals(0, Context.VERSION_DEFAULT);
368:       assertEquals(150, Context.VERSION_1_5);
369:       assertEquals(11, Context.FEATURE_STRICT_MODE);
370:       assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
371:       assertEquals(110, Context.VERSION_1_1);
372:       assertEquals(8, Context.FEATURE_STRICT_VARS);
373:       assertEquals(Integer.MAX_VALUE, context2.getMaximumInterpreterStackDepth());
374:       assertFalse(context2.isGeneratingDebugChanged());
375:       assertEquals(0, context2.getInstructionObserverThreshold());
376:       assertEquals(0, context2.getOptimizationLevel());
377:       assertTrue(context2.isGeneratingSource());
378:       assertEquals(0, context2.getLanguageVersion());
379:       assertFalse(context2.isSealed());
380:       assertFalse(context2.isGeneratingDebug());
381:       assertNotNull(context2);
382:       assertFalse(context2.equals((Object)context1));
383:       assertFalse(context2.equals((Object)context0));
384:       
385:       ClassLoader classLoader0 = context2.getApplicationClassLoader();
386:       assertNotSame(context2, context1);
387:       assertNotSame(context2, context0);
388:       assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
389:       assertEquals(120, Context.VERSION_1_2);
390:       assertEquals(170, Context.VERSION_1_7);
391:       assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
392:       assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
393:       assertFalse(context2.generateObserverCount);
394:       assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
395:       assertEquals(160, Context.VERSION_1_6);
396:       assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
397:       assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
398:       assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
399:       assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
400:       assertEquals(140, Context.VERSION_1_4);
401:       assertEquals(130, Context.VERSION_1_3);
402:       assertEquals((-1), Context.VERSION_UNKNOWN);
403:       assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
404:       assertEquals(6, Context.FEATURE_E4X);
405:       assertEquals(180, Context.VERSION_1_8);
406:       assertEquals(9, Context.FEATURE_STRICT_EVAL);
407:       assertEquals(100, Context.VERSION_1_0);
408:       assertEquals(0, Context.VERSION_DEFAULT);
409:       assertEquals(150, Context.VERSION_1_5);
410:       assertEquals(11, Context.FEATURE_STRICT_MODE);
411:       assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
412:       assertEquals(110, Context.VERSION_1_1);
413:       assertEquals(8, Context.FEATURE_STRICT_VARS);
414:       assertEquals(Integer.MAX_VALUE, context2.getMaximumInterpreterStackDepth());
415:       assertFalse(context2.isGeneratingDebugChanged());
416:       assertEquals(0, context2.getInstructionObserverThreshold());
417:       assertEquals(0, context2.getOptimizationLevel());
418:       assertTrue(context2.isGeneratingSource());
419:       assertEquals(0, context2.getLanguageVersion());
420:       assertFalse(context2.isSealed());
421:       assertFalse(context2.isGeneratingDebug());
422:       assertNotNull(classLoader0);
423:       assertFalse(context2.equals((Object)context1));
424:       assertFalse(context2.equals((Object)context0));
425:       
426:       NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
427:       assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
428:       assertEquals(120, Context.VERSION_1_2);
429:       assertEquals(170, Context.VERSION_1_7);
430:       assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
431:       assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
432:       assertFalse(context2.generateObserverCount);
433:       assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
434:       assertEquals(160, Context.VERSION_1_6);
435:       assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
436:       assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
437:       assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
438:       assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
439:       assertEquals(140, Context.VERSION_1_4);
440:       assertEquals(130, Context.VERSION_1_3);
441:       assertEquals((-1), Context.VERSION_UNKNOWN);
442:       assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
443:       assertEquals(6, Context.FEATURE_E4X);
444:       assertEquals(180, Context.VERSION_1_8);
445:       assertEquals(9, Context.FEATURE_STRICT_EVAL);
446:       assertEquals(100, Context.VERSION_1_0);
447:       assertEquals(0, Context.VERSION_DEFAULT);
448:       assertEquals(150, Context.VERSION_1_5);
449:       assertEquals(11, Context.FEATURE_STRICT_MODE);
450:       assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
451:       assertEquals(110, Context.VERSION_1_1);
452:       assertEquals(8, Context.FEATURE_STRICT_VARS);
453:       assertEquals(1, ScriptableObject.READONLY);
454:       assertEquals(2, ScriptableObject.DONTENUM);
455:       assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
456:       assertEquals(0, ScriptableObject.EMPTY);
457:       assertEquals(13, ScriptableObject.CONST);
458:       assertEquals(4, ScriptableObject.PERMANENT);
459:       assertEquals(Integer.MAX_VALUE, context2.getMaximumInterpreterStackDepth());
460:       assertFalse(context2.isGeneratingDebugChanged());
461:       assertEquals(0, context2.getInstructionObserverThreshold());
462:       assertEquals(0, context2.getOptimizationLevel());
463:       assertTrue(context2.isGeneratingSource());
464:       assertEquals(0, context2.getLanguageVersion());
465:       assertFalse(context2.isSealed());
466:       assertFalse(context2.isGeneratingDebug());
467:       assertEquals("object", nativeJavaTopPackage0.getTypeOf());
468:       assertTrue(nativeJavaTopPackage0.isExtensible());
469:       assertFalse(nativeJavaTopPackage0.isSealed());
470:       assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
471:       assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
472:       assertTrue(nativeJavaTopPackage0.isEmpty());
473:       assertNotNull(nativeJavaTopPackage0);
474:       assertFalse(context2.equals((Object)context1));
475:       assertFalse(context2.equals((Object)context0));
476:       
477:       Object object1 = nativeJavaTopPackage0.getGetterOrSetter("language version", 0, false);
478:       assertNotSame(context2, context1);
479:       assertNotSame(context2, context0);
480:       assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
481:       assertEquals(120, Context.VERSION_1_2);
482:       assertEquals(170, Context.VERSION_1_7);
483:       assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
484:       assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
485:       assertFalse(context2.generateObserverCount);
486:       assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
487:       assertEquals(160, Context.VERSION_1_6);
488:       assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
489:       assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
490:       assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
491:       assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
492:       assertEquals(140, Context.VERSION_1_4);
493:       assertEquals(130, Context.VERSION_1_3);
494:       assertEquals((-1), Context.VERSION_UNKNOWN);
495:       assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
496:       assertEquals(6, Context.FEATURE_E4X);
497:       assertEquals(180, Context.VERSION_1_8);
498:       assertEquals(9, Context.FEATURE_STRICT_EVAL);
499:       assertEquals(100, Context.VERSION_1_0);
500:       assertEquals(0, Context.VERSION_DEFAULT);
501:       assertEquals(150, Context.VERSION_1_5);
502:       assertEquals(11, Context.FEATURE_STRICT_MODE);
503:       assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
504:       assertEquals(110, Context.VERSION_1_1);
505:       assertEquals(8, Context.FEATURE_STRICT_VARS);
506:       assertEquals(1, ScriptableObject.READONLY);
507:       assertEquals(2, ScriptableObject.DONTENUM);
508:       assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
509:       assertEquals(0, ScriptableObject.EMPTY);
510:       assertEquals(13, ScriptableObject.CONST);
511:       assertEquals(4, ScriptableObject.PERMANENT);
512:       assertEquals(Integer.MAX_VALUE, context2.getMaximumInterpreterStackDepth());
513:       assertFalse(context2.isGeneratingDebugChanged());
514:       assertEquals(0, context2.getInstructionObserverThreshold());
515:       assertEquals(0, context2.getOptimizationLevel());
516:       assertTrue(context2.isGeneratingSource());
517:       assertEquals(0, context2.getLanguageVersion());
518:       assertFalse(context2.isSealed());
519:       assertFalse(context2.isGeneratingDebug());
520:       assertEquals("object", nativeJavaTopPackage0.getTypeOf());
521:       assertTrue(nativeJavaTopPackage0.isExtensible());
522:       assertFalse(nativeJavaTopPackage0.isSealed());
523:       assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
524:       assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
525:       assertTrue(nativeJavaTopPackage0.isEmpty());
526:       assertNull(object1);
527:       assertFalse(context2.equals((Object)context1));
528:       assertFalse(context2.equals((Object)context0));
529:       
530:       NativeIterator.StopIteration nativeIterator_StopIteration2 = new NativeIterator.StopIteration();
531:       assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
532:       assertEquals(4, ScriptableObject.PERMANENT);
533:       assertEquals(1, ScriptableObject.READONLY);
534:       assertEquals(0, ScriptableObject.EMPTY);
535:       assertEquals(13, ScriptableObject.CONST);
536:       assertEquals(2, ScriptableObject.DONTENUM);
537:       assertFalse(nativeIterator_StopIteration2.isSealed());
538:       assertFalse(nativeIterator_StopIteration2.hasPrototypeMap());
539:       assertEquals("object", nativeIterator_StopIteration2.getTypeOf());
540:       assertTrue(nativeIterator_StopIteration2.isEmpty());
541:       assertEquals("StopIteration", nativeIterator_StopIteration2.getClassName());
542:       assertTrue(nativeIterator_StopIteration2.isExtensible());
543:       assertFalse(nativeIterator_StopIteration2.avoidObjectDetection());
544:       assertNotNull(nativeIterator_StopIteration2);
545:       assertFalse(nativeIterator_StopIteration2.equals((Object)nativeIterator_StopIteration0));
546:       assertFalse(nativeIterator_StopIteration2.equals((Object)nativeIterator_StopIteration1));
547:       
548:       NativeArray.setMaximumInitialCapacity(1766);
549:       ScriptRuntime.NoSuchMethodShim scriptRuntime_NoSuchMethodShim0 = new ScriptRuntime.NoSuchMethodShim(synchronizer0, (String) null);
550:       assertEquals(0, NativeGenerator.GENERATOR_SEND);
551:       assertEquals(0, ScriptableObject.EMPTY);
552:       assertEquals(1, NativeGenerator.GENERATOR_THROW);
553:       assertEquals(13, ScriptableObject.CONST);
554:       assertEquals(1, ScriptableObject.READONLY);
555:       assertEquals(4, ScriptableObject.PERMANENT);
556:       assertEquals(2, ScriptableObject.DONTENUM);
557:       assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
558:       assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
559:       assertTrue(nativeGenerator0.isExtensible());
560:       assertTrue(nativeGenerator0.hasPrototypeMap());
561:       assertEquals("object", nativeGenerator0.getTypeOf());
562:       assertEquals("Generator", nativeGenerator0.getClassName());
563:       assertTrue(nativeGenerator0.isEmpty());
564:       assertFalse(nativeGenerator0.isSealed());
565:       assertFalse(nativeGenerator0.avoidObjectDetection());
566:       assertNotNull(scriptRuntime_NoSuchMethodShim0);
567:       
568:       boolean boolean0 = ScriptableObject.isFalse(scriptRuntime_NoSuchMethodShim0);
569:       assertEquals(0, NativeGenerator.GENERATOR_SEND);
570:       assertEquals(0, ScriptableObject.EMPTY);
571:       assertEquals(1, NativeGenerator.GENERATOR_THROW);
572:       assertEquals(13, ScriptableObject.CONST);
573:       assertEquals(1, ScriptableObject.READONLY);
574:       assertEquals(4, ScriptableObject.PERMANENT);
575:       assertEquals(2, ScriptableObject.DONTENUM);
576:       assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
577:       assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
578:       assertFalse(boolean0);
579:       assertTrue(nativeGenerator0.isExtensible());
580:       assertTrue(nativeGenerator0.hasPrototypeMap());
581:       assertEquals("object", nativeGenerator0.getTypeOf());
582:       assertEquals("Generator", nativeGenerator0.getClassName());
583:       assertTrue(nativeGenerator0.isEmpty());
584:       assertFalse(nativeGenerator0.isSealed());
585:       assertFalse(nativeGenerator0.avoidObjectDetection());
586:       
587:       NativeArray nativeArray0 = null;
588:       try {
589:         nativeArray0 = new NativeArray(context0.emptyArgs);
590:         fail("Expecting exception: NullPointerException");
591:       
592:       } catch(NullPointerException e) {
593:          //
594:          // no message in exception (getMessage() returned null)
595:          //
596:          verifyException("com.google.javascript.rhino.head.NativeArray", e);
597:       }
598:   }
599: }
RegularFileObject[/tmp/EvoSuite_75_1564042028619/com/google/javascript/rhino/head/ScriptableObject_75_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 25 08:07:08 GMT 2019
5:  */
6: 
7: package com.google.javascript.rhino.head;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class ScriptableObject_75_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.head.ScriptableObject"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/botsing-integration-experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ScriptableObject_75_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "com.google.javascript.rhino.head.IdFunctionObject",
84:       "com.google.javascript.rhino.head.RegExpProxy",
85:       "com.google.javascript.rhino.head.Icode",
86:       "com.google.javascript.rhino.head.json.JsonParser$ParseException",
87:       "com.google.javascript.rhino.head.DefaultErrorReporter",
88:       "com.google.javascript.rhino.head.xml.XMLLib",
89:       "com.google.javascript.rhino.head.ContextFactory$1",
90:       "com.google.javascript.rhino.head.Script",
91:       "com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider",
92:       "com.google.javascript.rhino.head.WrappedException",
93:       "com.google.javascript.rhino.head.NativeJavaConstructor",
94:       "com.google.javascript.rhino.head.debug.DebuggableObject",
95:       "com.google.javascript.rhino.head.Arguments",
96:       "com.google.javascript.rhino.head.NativeGenerator$GeneratorClosedException",
97:       "com.google.javascript.rhino.head.jdk13.VMBridge_jdk13",
98:       "com.google.javascript.rhino.head.IdScriptableObject$PrototypeValues",
99:       "com.google.javascript.rhino.head.TopLevel$Builtins",
100:       "com.google.javascript.rhino.head.regexp.RENode",
101:       "com.google.javascript.rhino.head.Function",
102:       "com.google.javascript.rhino.head.ScriptStackElement",
103:       "com.google.javascript.rhino.head.ScriptableObject$RelinkedSlot",
104:       "com.google.javascript.rhino.head.NativeJavaClass",
105:       "com.google.javascript.rhino.head.UintMap",
106:       "com.google.javascript.rhino.head.NativeJavaTopPackage",
107:       "com.google.javascript.rhino.head.NativeObject$ValueCollection$1",
108:       "com.google.javascript.rhino.head.RhinoException",
109:       "com.google.javascript.rhino.head.JavaMembers",
110:       "com.google.javascript.rhino.head.NativeJavaArray",
111:       "com.google.javascript.rhino.head.regexp.RECompiled",
112:       "com.google.javascript.rhino.head.NativeGlobal",
113:       "com.google.javascript.rhino.head.regexp.NativeRegExpCtor",
114:       "com.google.javascript.rhino.head.ContextFactory$Listener",
115:       "com.google.javascript.rhino.head.ErrorReporter",
116:       "com.google.javascript.rhino.head.optimizer.Codegen",
117:       "com.google.javascript.rhino.head.ast.Jump",
118:       "com.google.javascript.rhino.head.NativeCall",
119:       "com.google.javascript.rhino.head.NativeIterator$StopIteration",
120:       "com.google.javascript.rhino.head.ast.Scope",
121:       "com.google.javascript.rhino.head.LazilyLoadedCtor$1",
122:       "com.google.javascript.rhino.head.regexp.NativeRegExp",
123:       "com.google.javascript.rhino.head.Scriptable",
124:       "com.google.javascript.rhino.head.EcmaError",
125:       "com.google.javascript.rhino.head.FunctionObject",
126:       "com.google.javascript.rhino.head.ClassCache",
127:       "com.google.javascript.rhino.head.annotations.JSStaticFunction",
128:       "com.google.javascript.rhino.head.annotations.JSConstructor",
129:       "com.google.javascript.rhino.head.NativeContinuation",
130:       "com.google.javascript.rhino.head.xml.XMLObject",
131:       "com.google.javascript.rhino.head.ScriptRuntime$NoSuchMethodShim",
132:       "com.google.javascript.rhino.head.xml.XMLLib$Factory",
133:       "com.google.javascript.rhino.head.regexp.REProgState",
134:       "com.google.javascript.rhino.head.InterpretedFunction",
135:       "com.google.javascript.rhino.head.NativeScript",
136:       "com.google.javascript.rhino.head.NativeObject$ValueCollection",
137:       "com.google.javascript.rhino.head.NativeNumber",
138:       "com.google.javascript.rhino.head.regexp.REBackTrackData",
139:       "com.google.javascript.rhino.head.ScriptableObject$Slot",
140:       "org.mozilla.classfile.ClassFileWriter$ClassFileFormatException",
141:       "com.google.javascript.rhino.head.ScriptableObject$GetterSlot",
142:       "com.google.javascript.rhino.head.ScriptRuntime$IdEnumeration",
143:       "com.google.javascript.rhino.head.Context$ClassShutterSetter",
144:       "com.google.javascript.rhino.head.ScriptRuntime$MessageProvider",
145:       "com.google.javascript.rhino.head.GeneratedClassLoader",
146:       "com.google.javascript.rhino.head.regexp.SubString",
147:       "com.google.javascript.rhino.head.ast.FunctionNode",
148:       "com.google.javascript.rhino.head.ast.AstNode",
149:       "com.google.javascript.rhino.head.NativeMath",
150:       "com.google.javascript.rhino.head.NativeJavaObject",
151:       "com.google.javascript.rhino.head.Context",
152:       "com.google.javascript.rhino.head.NativeError",
153:       "com.google.javascript.rhino.head.SecurityController",
154:       "com.google.javascript.rhino.head.CompilerEnvirons",
155:       "com.google.javascript.rhino.head.NativeJavaPackage",
156:       "com.google.javascript.rhino.head.NativeObject$EntrySet",
157:       "com.google.javascript.rhino.head.Callable",
158:       "com.google.javascript.rhino.head.DefiningClassLoader",
159:       "com.google.javascript.rhino.head.NativeJSON",
160:       "com.google.javascript.rhino.head.BoundFunction",
161:       "com.google.javascript.rhino.head.debug.Debugger",
162:       "com.google.javascript.rhino.head.Node",
163:       "com.google.javascript.rhino.head.NativeBoolean",
164:       "com.google.javascript.rhino.head.ClassShutter",
165:       "com.google.javascript.rhino.head.InterpreterData",
166:       "com.google.javascript.rhino.head.ast.ScriptNode",
167:       "com.google.javascript.rhino.head.NativeArray",
168:       "com.google.javascript.rhino.head.WrapFactory",
169:       "com.google.javascript.rhino.head.NativeJavaMethod",
170:       "com.google.javascript.rhino.head.UniqueTag",
171:       "com.google.javascript.rhino.head.Undefined",
172:       "com.google.javascript.rhino.head.NativeDate",
173:       "com.google.javascript.rhino.head.LazilyLoadedCtor",
174:       "com.google.javascript.rhino.head.NativeString",
175:       "com.google.javascript.rhino.head.annotations.JSFunction",
176:       "com.google.javascript.rhino.head.ContextFactory",
177:       "com.google.javascript.rhino.head.VMBridge",
178:       "com.google.javascript.rhino.head.annotations.JSSetter",
179:       "com.google.javascript.rhino.head.regexp.RegExpImpl",
180:       "com.google.javascript.rhino.head.NativeGenerator",
181:       "org.mozilla.classfile.ClassFileWriter",
182:       "com.google.javascript.rhino.head.NativeIterator$WrappedJavaIterator",
183:       "com.google.javascript.rhino.head.Evaluator",
184:       "com.google.javascript.rhino.head.Kit",
185:       "com.google.javascript.rhino.head.ObjArray",
186:       "com.google.javascript.rhino.head.Wrapper",
187:       "com.google.javascript.rhino.head.BeanProperty",
188:       "com.google.javascript.rhino.head.ContextListener",
189:       "com.google.javascript.rhino.head.JavaAdapter",
190:       "com.google.javascript.rhino.head.jdk15.VMBridge_jdk15",
191:       "com.google.javascript.rhino.head.ContinuationPending",
192:       "com.google.javascript.rhino.head.ContextAction",
193:       "com.google.javascript.rhino.head.xml.XMLLib$Factory$1",
194:       "com.google.javascript.rhino.head.annotations.JSGetter",
195:       "com.google.javascript.rhino.head.JavaScriptException",
196:       "com.google.javascript.rhino.head.EvaluatorException",
197:       "com.google.javascript.rhino.head.NativeWith",
198:       "com.google.javascript.rhino.head.NativeIterator",
199:       "com.google.javascript.rhino.head.TopLevel",
200:       "com.google.javascript.rhino.head.NativeObject$KeySet",
201:       "com.google.javascript.rhino.head.BaseFunction",
202:       "com.google.javascript.rhino.head.IdFunctionCall",
203:       "com.google.javascript.rhino.head.regexp.CompilerState",
204:       "com.google.javascript.rhino.head.Synchronizer",
205:       "com.google.javascript.rhino.head.Interpreter",
206:       "com.google.javascript.rhino.head.ImporterTopLevel",
207:       "com.google.javascript.rhino.head.Delegator",
208:       "com.google.javascript.rhino.head.JavaMembers$MethodSignature",
209:       "com.google.javascript.rhino.head.ScriptRuntime$1",
210:       "com.google.javascript.rhino.head.ObjToIntMap",
211:       "com.google.javascript.rhino.head.ScriptRuntime",
212:       "com.google.javascript.rhino.head.Ref",
213:       "com.google.javascript.rhino.head.ContextFactory$GlobalSetter",
214:       "com.google.javascript.rhino.head.NativeArray$2",
215:       "com.google.javascript.rhino.head.NativeArray$1",
216:       "com.google.javascript.rhino.head.regexp.RECharSet",
217:       "com.google.javascript.rhino.head.ConstProperties",
218:       "com.google.javascript.rhino.head.ScriptableObject",
219:       "com.google.javascript.rhino.head.IdScriptableObject",
220:       "com.google.javascript.rhino.head.NativeFunction",
221:       "com.google.javascript.rhino.head.debug.DebuggableScript",
222:       "com.google.javascript.rhino.head.MemberBox",
223:       "com.google.javascript.rhino.head.regexp.REGlobalData",
224:       "com.google.javascript.rhino.head.NativeObject"
225:     );
226:   } 
227:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
228:     mock(Class.forName("java.util.function.BiFunction", false, ScriptableObject_75_tmp__ESTest_scaffolding.class.getClassLoader()));
229:   }
230: 
231:   private static void resetClasses() {
232:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ScriptableObject_75_tmp__ESTest_scaffolding.class.getClassLoader()); 
233: 
234:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
235:       "com.google.javascript.rhino.head.ScriptableObject",
236:       "com.google.javascript.rhino.head.ScriptableObject$Slot",
237:       "com.google.javascript.rhino.head.ScriptableObject$GetterSlot",
238:       "com.google.javascript.rhino.head.ScriptableObject$RelinkedSlot",
239:       "com.google.javascript.rhino.head.UniqueTag",
240:       "com.google.javascript.rhino.head.Scriptable",
241:       "com.google.javascript.rhino.head.IdScriptableObject",
242:       "com.google.javascript.rhino.head.NativeIterator",
243:       "com.google.javascript.rhino.head.TopLevel$Builtins",
244:       "com.google.javascript.rhino.head.Kit",
245:       "com.google.javascript.rhino.head.optimizer.Codegen",
246:       "com.google.javascript.rhino.head.Icode",
247:       "com.google.javascript.rhino.head.Interpreter",
248:       "com.google.javascript.rhino.head.Context",
249:       "com.google.javascript.rhino.head.ContextFactory",
250:       "com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider",
251:       "com.google.javascript.rhino.head.ScriptRuntime",
252:       "com.google.javascript.rhino.head.TopLevel",
253:       "com.google.javascript.rhino.head.Undefined",
254:       "com.google.javascript.rhino.head.jdk13.VMBridge_jdk13",
255:       "com.google.javascript.rhino.head.jdk15.VMBridge_jdk15",
256:       "com.google.javascript.rhino.head.VMBridge",
257:       "com.google.javascript.rhino.head.BaseFunction",
258:       "com.google.javascript.rhino.head.FunctionObject",
259:       "com.google.javascript.rhino.head.v8dtoa.FastDtoa",
260:       "com.google.javascript.rhino.head.v8dtoa.DoubleHelper",
261:       "com.google.javascript.rhino.head.v8dtoa.CachedPowers$CachedPower",
262:       "com.google.javascript.rhino.head.v8dtoa.CachedPowers",
263:       "com.google.javascript.rhino.head.DToA",
264:       "com.google.javascript.rhino.head.JavaAdapter",
265:       "com.google.javascript.rhino.head.NativeJavaObject",
266:       "com.google.javascript.rhino.head.ClassCache",
267:       "com.google.javascript.rhino.head.ImporterTopLevel",
268:       "com.google.javascript.rhino.head.ObjArray",
269:       "com.google.javascript.rhino.head.regexp.RegExpImpl",
270:       "com.google.javascript.rhino.head.NativeCall",
271:       "com.google.javascript.rhino.head.regexp.NativeRegExp",
272:       "com.google.javascript.rhino.head.MemberBox",
273:       "com.google.javascript.rhino.head.NativeString",
274:       "com.google.javascript.rhino.head.NativeArray",
275:       "com.google.javascript.rhino.head.NativeObject",
276:       "com.google.javascript.rhino.head.NativeIterator$StopIteration",
277:       "com.google.javascript.rhino.head.IdFunctionObject",
278:       "com.google.javascript.rhino.head.NativeNumber",
279:       "com.google.javascript.rhino.head.InterpreterData",
280:       "com.google.javascript.rhino.head.NativeFunction",
281:       "com.google.javascript.rhino.head.InterpretedFunction",
282:       "com.google.javascript.rhino.head.SecurityController",
283:       "com.google.javascript.rhino.head.IdScriptableObject$PrototypeValues",
284:       "com.google.javascript.rhino.head.NativeError",
285:       "com.google.javascript.rhino.head.NativeGlobal",
286:       "com.google.javascript.rhino.head.NativeBoolean",
287:       "com.google.javascript.rhino.head.NativeDate",
288:       "com.google.javascript.rhino.head.NativeMath",
289:       "com.google.javascript.rhino.head.NativeJSON",
290:       "com.google.javascript.rhino.head.NativeWith",
291:       "com.google.javascript.rhino.head.NativeScript",
292:       "com.google.javascript.rhino.head.NativeGenerator",
293:       "com.google.javascript.rhino.head.xml.XMLLib$Factory",
294:       "com.google.javascript.rhino.head.xml.XMLLib$Factory$1",
295:       "com.google.javascript.rhino.head.LazilyLoadedCtor",
296:       "com.google.javascript.rhino.head.LazilyLoadedCtor$1",
297:       "com.google.javascript.rhino.head.regexp.RECompiled",
298:       "com.google.javascript.rhino.head.regexp.CompilerState",
299:       "com.google.javascript.rhino.head.regexp.RENode",
300:       "com.google.javascript.rhino.head.regexp.NativeRegExpCtor",
301:       "com.google.javascript.rhino.head.Delegator",
302:       "com.google.javascript.rhino.head.Synchronizer",
303:       "com.google.javascript.rhino.head.DefaultErrorReporter",
304:       "com.google.javascript.rhino.head.NativeJavaArray",
305:       "com.google.javascript.rhino.head.JavaMembers",
306:       "com.google.javascript.rhino.head.NativeJavaPackage",
307:       "com.google.javascript.rhino.head.Arguments",
308:       "com.google.javascript.rhino.head.RhinoException",
309:       "com.google.javascript.rhino.head.EvaluatorException",
310:       "com.google.javascript.rhino.head.NativeContinuation",
311:       "com.google.javascript.rhino.head.WrapFactory",
312:       "com.google.javascript.rhino.head.NativeJavaMethod",
313:       "com.google.javascript.rhino.head.NativeJavaTopPackage",
314:       "com.google.javascript.rhino.head.NativeJavaClass",
315:       "com.google.javascript.rhino.head.WrappedException",
316:       "com.google.javascript.rhino.head.EcmaError",
317:       "com.google.javascript.rhino.head.BoundFunction",
318:       "com.google.javascript.rhino.head.ScriptRuntime$NoSuchMethodShim",
319:       "com.google.javascript.rhino.head.ContextFactory$1",
320:       "com.google.javascript.rhino.head.DefiningClassLoader",
321:       "com.google.javascript.rhino.head.NativeArray$3",
322:       "com.google.javascript.rhino.head.NativeObject$KeySet",
323:       "com.google.javascript.rhino.head.ScriptRuntime$1",
324:       "com.google.javascript.rhino.head.Context$1",
325:       "com.google.javascript.rhino.head.ContextFactory$1GlobalSetterImpl",
326:       "com.google.javascript.rhino.head.JavaMembers$MethodSignature",
327:       "com.google.javascript.rhino.head.BeanProperty",
328:       "com.google.javascript.rhino.head.CompilerEnvirons",
329:       "com.google.javascript.rhino.head.Parser",
330:       "com.google.javascript.rhino.head.TokenStream",
331:       "com.google.javascript.rhino.head.ObjToIntMap",
332:       "com.google.javascript.rhino.head.Node",
333:       "com.google.javascript.rhino.head.ast.AstNode",
334:       "com.google.javascript.rhino.head.ast.Jump",
335:       "com.google.javascript.rhino.head.ast.Scope",
336:       "com.google.javascript.rhino.head.ast.ScriptNode",
337:       "com.google.javascript.rhino.head.ast.AstRoot",
338:       "com.google.javascript.rhino.head.ast.Name",
339:       "com.google.javascript.rhino.head.ast.ExpressionStatement",
340:       "com.google.javascript.rhino.head.NativeObject$ValueCollection",
341:       "com.google.javascript.rhino.head.NativeObject$ValueCollection$1",
342:       "com.google.javascript.rhino.head.NativeObject$EntrySet",
343:       "com.google.javascript.rhino.head.v8dtoa.FastDtoaBuilder",
344:       "com.google.javascript.rhino.head.v8dtoa.DiyFp",
345:       "com.google.javascript.rhino.head.json.JsonParser",
346:       "com.google.javascript.rhino.head.json.JsonParser$ParseException",
347:       "com.google.javascript.rhino.head.xml.XMLLib",
348:       "com.google.javascript.rhino.head.FieldAndMethods",
349:       "com.google.javascript.rhino.head.JavaScriptException",
350:       "com.google.javascript.rhino.head.ContinuationPending",
351:       "com.google.javascript.rhino.head.NativeJavaConstructor",
352:       "com.google.javascript.rhino.head.NativeJSON$StringifyState"
353:     );
354:   }
355: }

[MASTER] 10:07:09.219 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
NativeError nativeError0 = new NativeError();
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertTrue(nativeError0.isEmpty());
assertTrue(nativeError0.isExtensible());
assertEquals("object", nativeError0.getTypeOf());
assertFalse(nativeError0.hasPrototypeMap());
assertEquals("Error", nativeError0.getClassName());
assertFalse(nativeError0.avoidObjectDetection());
assertFalse(nativeError0.isSealed());
assertNotNull(nativeError0);

NativeGenerator nativeGenerator0 = NativeGenerator.init((ScriptableObject) null, false);
assertEquals(0, NativeGenerator.GENERATOR_SEND);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, NativeGenerator.GENERATOR_THROW);
assertEquals(13, ScriptableObject.CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
assertTrue(nativeGenerator0.isExtensible());
assertTrue(nativeGenerator0.hasPrototypeMap());
assertEquals("object", nativeGenerator0.getTypeOf());
assertEquals("Generator", nativeGenerator0.getClassName());
assertTrue(nativeGenerator0.isEmpty());
assertFalse(nativeGenerator0.isSealed());
assertFalse(nativeGenerator0.avoidObjectDetection());
assertNotNull(nativeGenerator0);

Synchronizer synchronizer0 = new Synchronizer(nativeGenerator0, nativeGenerator0);
assertEquals(0, NativeGenerator.GENERATOR_SEND);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, NativeGenerator.GENERATOR_THROW);
assertEquals(13, ScriptableObject.CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
assertTrue(nativeGenerator0.isExtensible());
assertTrue(nativeGenerator0.hasPrototypeMap());
assertEquals("object", nativeGenerator0.getTypeOf());
assertEquals("Generator", nativeGenerator0.getClassName());
assertTrue(nativeGenerator0.isEmpty());
assertFalse(nativeGenerator0.isSealed());
assertFalse(nativeGenerator0.avoidObjectDetection());
assertNotNull(synchronizer0);

ContextFactory contextFactory0 = new ContextFactory();
assertFalse(contextFactory0.isSealed());
assertFalse(contextFactory0.hasExplicitGlobal());
assertNotNull(contextFactory0);

Context context0 = new Context(contextFactory0);
assertFalse(context0.generateObserverCount);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(130, Context.VERSION_1_3);
assertEquals(140, Context.VERSION_1_4);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(180, Context.VERSION_1_8);
assertEquals(160, Context.VERSION_1_6);
assertEquals(110, Context.VERSION_1_1);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(170, Context.VERSION_1_7);
assertEquals(120, Context.VERSION_1_2);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(100, Context.VERSION_1_0);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(150, Context.VERSION_1_5);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertFalse(contextFactory0.isSealed());
assertFalse(contextFactory0.hasExplicitGlobal());
assertEquals(0, context0.getInstructionObserverThreshold());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isSealed());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getOptimizationLevel());
assertNotNull(context0);

Context context1 = contextFactory0.enter();
assertNotSame(context1, context0);
assertEquals(140, Context.VERSION_1_4);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(180, Context.VERSION_1_8);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(130, Context.VERSION_1_3);
assertFalse(context1.generateObserverCount);
assertEquals(170, Context.VERSION_1_7);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(120, Context.VERSION_1_2);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(110, Context.VERSION_1_1);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(150, Context.VERSION_1_5);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(6, Context.FEATURE_E4X);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(100, Context.VERSION_1_0);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertFalse(contextFactory0.isSealed());
assertFalse(contextFactory0.hasExplicitGlobal());
assertEquals(0, context1.getLanguageVersion());
assertFalse(context1.isSealed());
assertFalse(context1.isGeneratingDebug());
assertEquals(0, context1.getInstructionObserverThreshold());
assertEquals(0, context1.getOptimizationLevel());
assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
assertTrue(context1.isGeneratingSource());
assertFalse(context1.isGeneratingDebugChanged());
assertNotNull(context1);
assertFalse(context1.equals((Object)context0));

BoundFunction boundFunction0 = new BoundFunction(context0, nativeGenerator0, synchronizer0, nativeError0, context1.emptyArgs);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(0, NativeGenerator.GENERATOR_SEND);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, NativeGenerator.GENERATOR_THROW);
assertEquals(13, ScriptableObject.CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
assertFalse(context0.generateObserverCount);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(130, Context.VERSION_1_3);
assertEquals(140, Context.VERSION_1_4);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(180, Context.VERSION_1_8);
assertEquals(160, Context.VERSION_1_6);
assertEquals(110, Context.VERSION_1_1);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(170, Context.VERSION_1_7);
assertEquals(120, Context.VERSION_1_2);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(100, Context.VERSION_1_0);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(150, Context.VERSION_1_5);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(140, Context.VERSION_1_4);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(180, Context.VERSION_1_8);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(130, Context.VERSION_1_3);
assertFalse(context1.generateObserverCount);
assertEquals(170, Context.VERSION_1_7);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(120, Context.VERSION_1_2);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(110, Context.VERSION_1_1);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(150, Context.VERSION_1_5);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(6, Context.FEATURE_E4X);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(100, Context.VERSION_1_0);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertTrue(nativeError0.isEmpty());
assertTrue(nativeError0.isExtensible());
assertEquals("object", nativeError0.getTypeOf());
assertFalse(nativeError0.hasPrototypeMap());
assertEquals("Error", nativeError0.getClassName());
assertFalse(nativeError0.avoidObjectDetection());
assertFalse(nativeError0.isSealed());
assertTrue(nativeGenerator0.isExtensible());
assertTrue(nativeGenerator0.hasPrototypeMap());
assertEquals("object", nativeGenerator0.getTypeOf());
assertEquals("Generator", nativeGenerator0.getClassName());
assertTrue(nativeGenerator0.isEmpty());
assertFalse(nativeGenerator0.isSealed());
assertFalse(nativeGenerator0.avoidObjectDetection());
assertFalse(contextFactory0.isSealed());
assertFalse(contextFactory0.hasExplicitGlobal());
assertEquals(0, context0.getInstructionObserverThreshold());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isSealed());
assertFalse(context0.isGeneratingDebug());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(0, context1.getLanguageVersion());
assertFalse(context1.isSealed());
assertFalse(context1.isGeneratingDebug());
assertEquals(0, context1.getInstructionObserverThreshold());
assertEquals(0, context1.getOptimizationLevel());
assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
assertTrue(context1.isGeneratingSource());
assertFalse(context1.isGeneratingDebugChanged());
assertEquals(0, boundFunction0.getLength());
assertFalse(boundFunction0.hasPrototypeMap());
assertFalse(boundFunction0.isSealed());
assertFalse(boundFunction0.isEmpty());
assertFalse(boundFunction0.avoidObjectDetection());
assertEquals("function", boundFunction0.getTypeOf());
assertEquals("Function", boundFunction0.getClassName());
assertTrue(boundFunction0.isExtensible());
assertNotNull(boundFunction0);
assertFalse(context0.equals((Object)context1));
assertFalse(context1.equals((Object)context0));

NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertTrue(nativeIterator_StopIteration0.isExtensible());
assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
assertTrue(nativeIterator_StopIteration0.isEmpty());
assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
assertFalse(nativeIterator_StopIteration0.isSealed());
assertNotNull(nativeIterator_StopIteration0);

NativeIterator.StopIteration nativeIterator_StopIteration1 = new NativeIterator.StopIteration();
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(13, ScriptableObject.CONST);
assertFalse(nativeIterator_StopIteration1.hasPrototypeMap());
assertEquals("object", nativeIterator_StopIteration1.getTypeOf());
assertTrue(nativeIterator_StopIteration1.isExtensible());
assertFalse(nativeIterator_StopIteration1.avoidObjectDetection());
assertTrue(nativeIterator_StopIteration1.isEmpty());
assertFalse(nativeIterator_StopIteration1.isSealed());
assertEquals("StopIteration", nativeIterator_StopIteration1.getClassName());
assertNotNull(nativeIterator_StopIteration1);
assertFalse(nativeIterator_StopIteration1.equals((Object)nativeIterator_StopIteration0));

BiFunction<Arguments, NativeObject, NativeArray> biFunction0 = (BiFunction<Arguments, NativeObject, NativeArray>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
doReturn((Object) null).when(biFunction0).apply(any(com.google.javascript.rhino.head.Arguments.class) , anyMap());
Object object0 = nativeIterator_StopIteration1.compute("8I*", biFunction0);
assertNotSame(nativeIterator_StopIteration1, nativeIterator_StopIteration0);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(13, ScriptableObject.CONST);
assertFalse(nativeIterator_StopIteration1.hasPrototypeMap());
assertEquals("object", nativeIterator_StopIteration1.getTypeOf());
assertTrue(nativeIterator_StopIteration1.isExtensible());
assertFalse(nativeIterator_StopIteration1.avoidObjectDetection());
assertTrue(nativeIterator_StopIteration1.isEmpty());
assertFalse(nativeIterator_StopIteration1.isSealed());
assertEquals("StopIteration", nativeIterator_StopIteration1.getClassName());
assertNull(object0);
assertFalse(nativeIterator_StopIteration1.equals((Object)nativeIterator_StopIteration0));

Context context2 = new Context();
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(120, Context.VERSION_1_2);
assertEquals(170, Context.VERSION_1_7);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertFalse(context2.generateObserverCount);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(160, Context.VERSION_1_6);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(140, Context.VERSION_1_4);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(180, Context.VERSION_1_8);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(100, Context.VERSION_1_0);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(150, Context.VERSION_1_5);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(110, Context.VERSION_1_1);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(Integer.MAX_VALUE, context2.getMaximumInterpreterStackDepth());
assertFalse(context2.isGeneratingDebugChanged());
assertEquals(0, context2.getInstructionObserverThreshold());
assertEquals(0, context2.getOptimizationLevel());
assertTrue(context2.isGeneratingSource());
assertEquals(0, context2.getLanguageVersion());
assertFalse(context2.isSealed());
assertFalse(context2.isGeneratingDebug());
assertNotNull(context2);
assertFalse(context2.equals((Object)context1));
assertFalse(context2.equals((Object)context0));

ClassLoader classLoader0 = context2.getApplicationClassLoader();
assertNotSame(context2, context1);
assertNotSame(context2, context0);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(120, Context.VERSION_1_2);
assertEquals(170, Context.VERSION_1_7);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertFalse(context2.generateObserverCount);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(160, Context.VERSION_1_6);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(140, Context.VERSION_1_4);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(180, Context.VERSION_1_8);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(100, Context.VERSION_1_0);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(150, Context.VERSION_1_5);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(110, Context.VERSION_1_1);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(Integer.MAX_VALUE, context2.getMaximumInterpreterStackDepth());
assertFalse(context2.isGeneratingDebugChanged());
assertEquals(0, context2.getInstructionObserverThreshold());
assertEquals(0, context2.getOptimizationLevel());
assertTrue(context2.isGeneratingSource());
assertEquals(0, context2.getLanguageVersion());
assertFalse(context2.isSealed());
assertFalse(context2.isGeneratingDebug());
assertNotNull(classLoader0);
assertFalse(context2.equals((Object)context1));
assertFalse(context2.equals((Object)context0));

NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(120, Context.VERSION_1_2);
assertEquals(170, Context.VERSION_1_7);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertFalse(context2.generateObserverCount);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(160, Context.VERSION_1_6);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(140, Context.VERSION_1_4);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(180, Context.VERSION_1_8);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(100, Context.VERSION_1_0);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(150, Context.VERSION_1_5);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(110, Context.VERSION_1_1);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(Integer.MAX_VALUE, context2.getMaximumInterpreterStackDepth());
assertFalse(context2.isGeneratingDebugChanged());
assertEquals(0, context2.getInstructionObserverThreshold());
assertEquals(0, context2.getOptimizationLevel());
assertTrue(context2.isGeneratingSource());
assertEquals(0, context2.getLanguageVersion());
assertFalse(context2.isSealed());
assertFalse(context2.isGeneratingDebug());
assertEquals("object", nativeJavaTopPackage0.getTypeOf());
assertTrue(nativeJavaTopPackage0.isExtensible());
assertFalse(nativeJavaTopPackage0.isSealed());
assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
assertTrue(nativeJavaTopPackage0.isEmpty());
assertNotNull(nativeJavaTopPackage0);
assertFalse(context2.equals((Object)context1));
assertFalse(context2.equals((Object)context0));

Object object1 = nativeJavaTopPackage0.getGetterOrSetter("language version", 0, false);
assertNotSame(context2, context1);
assertNotSame(context2, context0);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(120, Context.VERSION_1_2);
assertEquals(170, Context.VERSION_1_7);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertFalse(context2.generateObserverCount);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(160, Context.VERSION_1_6);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(140, Context.VERSION_1_4);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(180, Context.VERSION_1_8);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(100, Context.VERSION_1_0);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(150, Context.VERSION_1_5);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(110, Context.VERSION_1_1);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(Integer.MAX_VALUE, context2.getMaximumInterpreterStackDepth());
assertFalse(context2.isGeneratingDebugChanged());
assertEquals(0, context2.getInstructionObserverThreshold());
assertEquals(0, context2.getOptimizationLevel());
assertTrue(context2.isGeneratingSource());
assertEquals(0, context2.getLanguageVersion());
assertFalse(context2.isSealed());
assertFalse(context2.isGeneratingDebug());
assertEquals("object", nativeJavaTopPackage0.getTypeOf());
assertTrue(nativeJavaTopPackage0.isExtensible());
assertFalse(nativeJavaTopPackage0.isSealed());
assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
assertTrue(nativeJavaTopPackage0.isEmpty());
assertNull(object1);
assertFalse(context2.equals((Object)context1));
assertFalse(context2.equals((Object)context0));

NativeIterator.StopIteration nativeIterator_StopIteration2 = new NativeIterator.StopIteration();
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertFalse(nativeIterator_StopIteration2.isSealed());
assertFalse(nativeIterator_StopIteration2.hasPrototypeMap());
assertEquals("object", nativeIterator_StopIteration2.getTypeOf());
assertTrue(nativeIterator_StopIteration2.isEmpty());
assertEquals("StopIteration", nativeIterator_StopIteration2.getClassName());
assertTrue(nativeIterator_StopIteration2.isExtensible());
assertFalse(nativeIterator_StopIteration2.avoidObjectDetection());
assertNotNull(nativeIterator_StopIteration2);
assertFalse(nativeIterator_StopIteration2.equals((Object)nativeIterator_StopIteration0));
assertFalse(nativeIterator_StopIteration2.equals((Object)nativeIterator_StopIteration1));

NativeArray.setMaximumInitialCapacity(1766);
ScriptRuntime.NoSuchMethodShim scriptRuntime_NoSuchMethodShim0 = new ScriptRuntime.NoSuchMethodShim(synchronizer0, (String) null);
assertEquals(0, NativeGenerator.GENERATOR_SEND);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, NativeGenerator.GENERATOR_THROW);
assertEquals(13, ScriptableObject.CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
assertTrue(nativeGenerator0.isExtensible());
assertTrue(nativeGenerator0.hasPrototypeMap());
assertEquals("object", nativeGenerator0.getTypeOf());
assertEquals("Generator", nativeGenerator0.getClassName());
assertTrue(nativeGenerator0.isEmpty());
assertFalse(nativeGenerator0.isSealed());
assertFalse(nativeGenerator0.avoidObjectDetection());
assertNotNull(scriptRuntime_NoSuchMethodShim0);

boolean boolean0 = ScriptableObject.isFalse(scriptRuntime_NoSuchMethodShim0);
assertEquals(0, NativeGenerator.GENERATOR_SEND);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, NativeGenerator.GENERATOR_THROW);
assertEquals(13, ScriptableObject.CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
assertFalse(boolean0);
assertTrue(nativeGenerator0.isExtensible());
assertTrue(nativeGenerator0.hasPrototypeMap());
assertEquals("object", nativeGenerator0.getTypeOf());
assertEquals("Generator", nativeGenerator0.getClassName());
assertTrue(nativeGenerator0.isEmpty());
assertFalse(nativeGenerator0.isSealed());
assertFalse(nativeGenerator0.avoidObjectDetection());

NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);


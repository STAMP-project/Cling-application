entry: sources/closure-16/build/classes
entry: sources/closure-16/lib/args4j.jar
entry: sources/closure-16/lib/guava.jar
entry: sources/closure-16/lib/json.jar
entry: sources/closure-16/lib/jsr305.jar
entry: sources/closure-16/lib/protobuf-java.jar
entry: sources/closure-16/build/lib/rhino.jar
entry: sources/closure-16/lib/ant.jar
** CP: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar
* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: com.google.javascript.rhino.head.regexp.NativeRegExp
* Starting Client-0
* Connecting to master process on port 13596
* Analyzing classpath: 
  - sources/closure-16/build/classes
  - sources/closure-16/lib/args4j.jar
  - sources/closure-16/lib/guava.jar
  - sources/closure-16/lib/json.jar
  - sources/closure-16/lib/jsr305.jar
  - sources/closure-16/lib/protobuf-java.jar
  - sources/closure-16/build/lib/rhino.jar
  - sources/closure-16/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.head.regexp.NativeRegExp
* Test criterion:
  - Branch Coverage
* Total number of test goals for DYNAMOSA: 1450
* Using seed 1566407496288
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 382 / 1450
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.08068965517241379
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.08206896551724138
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.1317241379310345
[MASTER] 19:13:06.965 [logback-1] WARN  TestUsageChecker - class com.google.javascript.rhino.head.ContextFactory$1GlobalSetterImpl looks like an anonymous class, ignoring it (although reflection says false) GlobalSetterImpl
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.15310344827586206
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.16137931034482758
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.1724137931034483
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.17793103448275863
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.19586206896551725
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.19586206896551725
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3020689655172414
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.30551724137931036
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3062068965517241
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.31310344827586206
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.31310344827586206
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.31310344827586206
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3179310344827586
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3303448275862069
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3310344827586207
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.33379310344827584
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3351724137931035
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.33586206896551724
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.33586206896551724
* Search finished after 304s and 168 generations, 55650 statements, best individual has fitness: 963.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.33586206896551724
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 28%
* Total number of goals: 1450
* Number of covered goals: 401
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.33586206896551724
* Generated 57 tests with total length 181
* Resulting test suite's coverage: 34%
* Generating assertions
[MASTER] 19:18:18.752 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7334666666666667% of time used, but only 1/57 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 0%
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.33586206896551724
* Compiling and checking tests
[MASTER] 19:19:04.148 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 19:19:04.150 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeRegExp nativeRegExp0 = new NativeRegExp();
assertNotNull(nativeRegExp0);
assertTrue(nativeRegExp0.isEmpty());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertEquals("object", nativeRegExp0.getTypeOf());
assertFalse(nativeRegExp0.avoidObjectDetection());
assertFalse(nativeRegExp0.isSealed());
assertTrue(nativeRegExp0.isExtensible());
assertFalse(nativeRegExp0.hasPrototypeMap());
assertEquals(0, NativeRegExp.TEST);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, NativeRegExp.MATCH);

Object[] objectArray0 = ScriptableObject.getPropertyIds(nativeRegExp0);
assertNotNull(objectArray0);
assertTrue(nativeRegExp0.isEmpty());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertEquals("object", nativeRegExp0.getTypeOf());
assertFalse(nativeRegExp0.avoidObjectDetection());
assertFalse(nativeRegExp0.isSealed());
assertTrue(nativeRegExp0.isExtensible());
assertFalse(nativeRegExp0.hasPrototypeMap());
assertEquals(0, NativeRegExp.TEST);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(0, objectArray0.length);

Context context0 = Context.getCurrentContext();
assertNull(context0);

Scriptable scriptable0 = context0.newObject((Scriptable) nativeRegExp0);
nativeRegExp0.compile(context0, scriptable0, objectArray0);
nativeRegExp0.toString();

[MASTER] 19:19:09.859 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 19:19:09.894 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeRegExp nativeRegExp0 = new NativeRegExp();
assertNotNull(nativeRegExp0);
assertFalse(nativeRegExp0.avoidObjectDetection());
assertFalse(nativeRegExp0.isSealed());
assertEquals("object", nativeRegExp0.getTypeOf());
assertTrue(nativeRegExp0.isEmpty());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertFalse(nativeRegExp0.hasPrototypeMap());
assertTrue(nativeRegExp0.isExtensible());
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, NativeRegExp.TEST);

Context context0 = Context.getCurrentContext();
assertNotNull(context0);
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(context0.isSealed());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebugChanged());
assertTrue(context0.isGeneratingSource());
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(110, Context.VERSION_1_1);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(150, Context.VERSION_1_5);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(130, Context.VERSION_1_3);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(120, Context.VERSION_1_2);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(170, Context.VERSION_1_7);
assertFalse(context0.generateObserverCount);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(180, Context.VERSION_1_8);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(140, Context.VERSION_1_4);

ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
assertNotNull(importerTopLevel0);
assertEquals("object", importerTopLevel0.getTypeOf());
assertFalse(importerTopLevel0.hasPrototypeMap());
assertTrue(importerTopLevel0.isExtensible());
assertEquals("JavaImporter", importerTopLevel0.getClassName());
assertFalse(importerTopLevel0.isSealed());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertTrue(importerTopLevel0.isEmpty());
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);

NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile(context0, importerTopLevel0, context0.emptyArgs);
assertNotNull(nativeRegExp1);
assertFalse(nativeRegExp0.avoidObjectDetection());
assertFalse(nativeRegExp0.isSealed());
assertEquals("object", nativeRegExp0.getTypeOf());
assertTrue(nativeRegExp0.isEmpty());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertFalse(nativeRegExp0.hasPrototypeMap());
assertTrue(nativeRegExp0.isExtensible());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(context0.isSealed());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebugChanged());
assertTrue(context0.isGeneratingSource());
assertEquals("object", importerTopLevel0.getTypeOf());
assertFalse(importerTopLevel0.hasPrototypeMap());
assertTrue(importerTopLevel0.isExtensible());
assertEquals("JavaImporter", importerTopLevel0.getClassName());
assertFalse(importerTopLevel0.isSealed());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertTrue(importerTopLevel0.isEmpty());
assertFalse(nativeRegExp1.avoidObjectDetection());
assertEquals("RegExp", nativeRegExp1.getClassName());
assertEquals("object", nativeRegExp1.getTypeOf());
assertFalse(nativeRegExp1.isSealed());
assertTrue(nativeRegExp1.isEmpty());
assertFalse(nativeRegExp1.hasPrototypeMap());
assertTrue(nativeRegExp1.isExtensible());
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, NativeRegExp.TEST);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(110, Context.VERSION_1_1);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(150, Context.VERSION_1_5);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(130, Context.VERSION_1_3);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(120, Context.VERSION_1_2);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(170, Context.VERSION_1_7);
assertFalse(context0.generateObserverCount);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(180, Context.VERSION_1_8);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(140, Context.VERSION_1_4);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(0, NativeRegExp.TEST);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertSame(nativeRegExp0, nativeRegExp1);
assertSame(nativeRegExp1, nativeRegExp0);

RegExpImpl regExpImpl0 = new RegExpImpl();
assertNotNull(regExpImpl0);

int[] intArray0 = new int[1];
NativeArray nativeArray0 = (NativeArray)nativeRegExp1.executeRegExp(context0, importerTopLevel0, regExpImpl0, "kE", intArray0, 170);
assertArrayEquals(new int[] {0}, intArray0);
assertNotNull(nativeArray0);
assertFalse(nativeRegExp0.avoidObjectDetection());
assertFalse(nativeRegExp0.isSealed());
assertEquals("object", nativeRegExp0.getTypeOf());
assertTrue(nativeRegExp0.isEmpty());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertFalse(nativeRegExp0.hasPrototypeMap());
assertTrue(nativeRegExp0.isExtensible());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(context0.isSealed());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebugChanged());
assertTrue(context0.isGeneratingSource());
assertEquals("object", importerTopLevel0.getTypeOf());
assertFalse(importerTopLevel0.hasPrototypeMap());
assertTrue(importerTopLevel0.isExtensible());
assertEquals("JavaImporter", importerTopLevel0.getClassName());
assertFalse(importerTopLevel0.isSealed());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertTrue(importerTopLevel0.isEmpty());
assertFalse(nativeRegExp1.avoidObjectDetection());
assertEquals("RegExp", nativeRegExp1.getClassName());
assertEquals("object", nativeRegExp1.getTypeOf());
assertFalse(nativeRegExp1.isSealed());
assertTrue(nativeRegExp1.isEmpty());
assertFalse(nativeRegExp1.hasPrototypeMap());
assertTrue(nativeRegExp1.isExtensible());
assertEquals("object", nativeArray0.getTypeOf());
assertFalse(nativeArray0.hasPrototypeMap());
assertEquals("Array", nativeArray0.getClassName());
assertTrue(nativeArray0.isExtensible());
assertEquals(1L, nativeArray0.getLength());
assertFalse(nativeArray0.avoidObjectDetection());
assertFalse(nativeArray0.isEmpty());
assertEquals(1L, nativeArray0.jsGet_length());
assertFalse(nativeArray0.isSealed());
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, NativeRegExp.TEST);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(110, Context.VERSION_1_1);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(150, Context.VERSION_1_5);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(130, Context.VERSION_1_3);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(120, Context.VERSION_1_2);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(170, Context.VERSION_1_7);
assertFalse(context0.generateObserverCount);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(180, Context.VERSION_1_8);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(140, Context.VERSION_1_4);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(0, NativeRegExp.TEST);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(13, ScriptableObject.CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(1, intArray0.length);
assertSame(nativeRegExp0, nativeRegExp1);
assertSame(nativeRegExp1, nativeRegExp0);

NativeArray nativeArray1 = (NativeArray)nativeRegExp1.executeRegExp(context0, importerTopLevel0, regExpImpl0, "language version", intArray0, (-3590));
assertFalse(nativeArray1.equals((Object)nativeArray0));
assertArrayEquals(new int[] {0}, intArray0);
assertNotNull(nativeArray1);
assertFalse(nativeRegExp0.avoidObjectDetection());
assertFalse(nativeRegExp0.isSealed());
assertEquals("object", nativeRegExp0.getTypeOf());
assertTrue(nativeRegExp0.isEmpty());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertFalse(nativeRegExp0.hasPrototypeMap());
assertTrue(nativeRegExp0.isExtensible());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(context0.isSealed());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebugChanged());
assertTrue(context0.isGeneratingSource());
assertEquals("object", importerTopLevel0.getTypeOf());
assertFalse(importerTopLevel0.hasPrototypeMap());
assertTrue(importerTopLevel0.isExtensible());
assertEquals("JavaImporter", importerTopLevel0.getClassName());
assertFalse(importerTopLevel0.isSealed());
assertFalse(importerTopLevel0.avoidObjectDetection());
assertTrue(importerTopLevel0.isEmpty());
assertFalse(nativeRegExp1.avoidObjectDetection());
assertEquals("RegExp", nativeRegExp1.getClassName());
assertEquals("object", nativeRegExp1.getTypeOf());
assertFalse(nativeRegExp1.isSealed());
assertTrue(nativeRegExp1.isEmpty());
assertFalse(nativeRegExp1.hasPrototypeMap());
assertTrue(nativeRegExp1.isExtensible());
assertFalse(nativeArray1.avoidObjectDetection());
assertTrue(nativeArray1.isExtensible());
assertEquals(1L, nativeArray1.getLength());
assertEquals("object", nativeArray1.getTypeOf());
assertFalse(nativeArray1.hasPrototypeMap());
assertEquals("Array", nativeArray1.getClassName());
assertFalse(nativeArray1.isEmpty());
assertFalse(nativeArray1.isSealed());
assertEquals(1L, nativeArray1.jsGet_length());
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, NativeRegExp.TEST);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(110, Context.VERSION_1_1);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(150, Context.VERSION_1_5);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(130, Context.VERSION_1_3);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(120, Context.VERSION_1_2);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(170, Context.VERSION_1_7);
assertFalse(context0.generateObserverCount);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(180, Context.VERSION_1_8);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(140, Context.VERSION_1_4);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(0, NativeRegExp.TEST);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(1, intArray0.length);
assertSame(nativeRegExp0, nativeRegExp1);
assertSame(nativeRegExp1, nativeRegExp0);
assertNotSame(nativeArray1, nativeArray0);


[MASTER] 19:19:11.717 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 19:19:11.718 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeRegExp nativeRegExp0 = new NativeRegExp();
assertNotNull(nativeRegExp0);
assertEquals("object", nativeRegExp0.getTypeOf());
assertFalse(nativeRegExp0.hasPrototypeMap());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertTrue(nativeRegExp0.isExtensible());
assertTrue(nativeRegExp0.isEmpty());
assertFalse(nativeRegExp0.isSealed());
assertFalse(nativeRegExp0.avoidObjectDetection());
assertEquals(1, ScriptableObject.READONLY);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(0, NativeRegExp.TEST);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);

Context context0 = Context.getCurrentContext();
assertNotNull(context0);
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(context0.isSealed());
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isGeneratingDebugChanged());
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(120, Context.VERSION_1_2);
assertEquals(130, Context.VERSION_1_3);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertFalse(context0.generateObserverCount);
assertEquals(170, Context.VERSION_1_7);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(140, Context.VERSION_1_4);
assertEquals(180, Context.VERSION_1_8);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(100, Context.VERSION_1_0);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(150, Context.VERSION_1_5);
assertEquals(160, Context.VERSION_1_6);
assertEquals(110, Context.VERSION_1_1);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);

Object[] objectArray0 = new Object[5];
objectArray0[0] = (Object) nativeRegExp0;
nativeRegExp0.compile(context0, nativeRegExp0, objectArray0);

[MASTER] 19:19:15.465 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 19:19:15.470 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeRegExp nativeRegExp0 = new NativeRegExp();
assertNotNull(nativeRegExp0);
assertFalse(nativeRegExp0.hasPrototypeMap());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertTrue(nativeRegExp0.isExtensible());
assertEquals("object", nativeRegExp0.getTypeOf());
assertFalse(nativeRegExp0.isSealed());
assertFalse(nativeRegExp0.avoidObjectDetection());
assertTrue(nativeRegExp0.isEmpty());
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(0, NativeRegExp.TEST);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);

Context context0 = Context.getCurrentContext();
assertNotNull(context0);
assertFalse(context0.isSealed());
assertEquals(0, context0.getInstructionObserverThreshold());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(context0.isGeneratingDebugChanged());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getLanguageVersion());
assertEquals(140, Context.VERSION_1_4);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(120, Context.VERSION_1_2);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(170, Context.VERSION_1_7);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(180, Context.VERSION_1_8);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(150, Context.VERSION_1_5);
assertEquals(110, Context.VERSION_1_1);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(160, Context.VERSION_1_6);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertFalse(context0.generateObserverCount);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);

Object[] objectArray0 = new Object[1];
NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile(context0, (Scriptable) null, objectArray0);
assertNotNull(nativeRegExp1);
assertFalse(nativeRegExp0.hasPrototypeMap());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertTrue(nativeRegExp0.isExtensible());
assertEquals("object", nativeRegExp0.getTypeOf());
assertFalse(nativeRegExp0.isSealed());
assertFalse(nativeRegExp0.avoidObjectDetection());
assertTrue(nativeRegExp0.isEmpty());
assertFalse(context0.isSealed());
assertEquals(0, context0.getInstructionObserverThreshold());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertFalse(context0.isGeneratingDebugChanged());
assertFalse(context0.isGeneratingDebug());
assertEquals(0, context0.getLanguageVersion());
assertFalse(nativeRegExp1.isSealed());
assertTrue(nativeRegExp1.isEmpty());
assertFalse(nativeRegExp1.hasPrototypeMap());
assertTrue(nativeRegExp1.isExtensible());
assertFalse(nativeRegExp1.avoidObjectDetection());
assertEquals("RegExp", nativeRegExp1.getClassName());
assertEquals("object", nativeRegExp1.getTypeOf());
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(0, NativeRegExp.TEST);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(140, Context.VERSION_1_4);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(11, Context.FEATURE_STRICT_MODE);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(120, Context.VERSION_1_2);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(170, Context.VERSION_1_7);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(180, Context.VERSION_1_8);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(150, Context.VERSION_1_5);
assertEquals(110, Context.VERSION_1_1);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(160, Context.VERSION_1_6);
assertEquals(100, Context.VERSION_1_0);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertFalse(context0.generateObserverCount);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(0, NativeRegExp.TEST);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(1, objectArray0.length);
assertSame(nativeRegExp0, nativeRegExp1);
assertSame(nativeRegExp1, nativeRegExp0);

String string0 = nativeRegExp0.toString();
assertEquals("/null/", string0);
assertNotNull(string0);
assertFalse(nativeRegExp0.hasPrototypeMap());
assertEquals("RegExp", nativeRegExp0.getClassName());
assertTrue(nativeRegExp0.isExtensible());
assertEquals("object", nativeRegExp0.getTypeOf());
assertFalse(nativeRegExp0.isSealed());
assertFalse(nativeRegExp0.avoidObjectDetection());
assertTrue(nativeRegExp0.isEmpty());
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, NativeRegExp.JSREG_GLOB);
assertEquals(2, NativeRegExp.PREFIX);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(2, NativeRegExp.JSREG_FOLD);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(1, NativeRegExp.MATCH);
assertEquals(0, NativeRegExp.TEST);
assertEquals(4, NativeRegExp.JSREG_MULTILINE);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertSame(nativeRegExp0, nativeRegExp1);


[MASTER] 19:19:17.845 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 19:19:17.850 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getCurrentContext();
assertNotNull(context0);
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isSealed());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertFalse(context0.isGeneratingDebugChanged());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(140, Context.VERSION_1_4);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(180, Context.VERSION_1_8);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(170, Context.VERSION_1_7);
assertEquals(120, Context.VERSION_1_2);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(110, Context.VERSION_1_1);
assertEquals(150, Context.VERSION_1_5);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertFalse(context0.generateObserverCount);
assertEquals(100, Context.VERSION_1_0);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(11, Context.FEATURE_STRICT_MODE);

Object object0 = NativeRegExp.compileRE(context0, "(Ljava/lang/Object;Ljava/lang/Object;Lorg/mozilla/javascript/Context;Z)Ljava/lang/Object;", "", false);
assertNotNull(object0);
assertEquals(0, context0.getInstructionObserverThreshold());
assertFalse(context0.isSealed());
assertEquals(0, context0.getLanguageVersion());
assertFalse(context0.isGeneratingDebug());
assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
assertFalse(context0.isGeneratingDebugChanged());
assertTrue(context0.isGeneratingSource());
assertEquals(0, context0.getOptimizationLevel());
assertEquals(9, Context.FEATURE_STRICT_EVAL);
assertEquals(140, Context.VERSION_1_4);
assertEquals(8, Context.FEATURE_STRICT_VARS);
assertEquals(0, Context.VERSION_DEFAULT);
assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
assertEquals(180, Context.VERSION_1_8);
assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
assertEquals(130, Context.VERSION_1_3);
assertEquals((-1), Context.VERSION_UNKNOWN);
assertEquals(170, Context.VERSION_1_7);
assertEquals(120, Context.VERSION_1_2);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
assertEquals(160, Context.VERSION_1_6);
assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
assertEquals(6, Context.FEATURE_E4X);
assertEquals(110, Context.VERSION_1_1);
assertEquals(150, Context.VERSION_1_5);
assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
assertFalse(context0.generateObserverCount);
assertEquals(100, Context.VERSION_1_0);
assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
assertEquals(11, Context.FEATURE_STRICT_MODE);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'NativeRegExp_ESTest' to results/evosuite5/closure-16-com.google.javascript.rhino.head.regexp.NativeRegExp-17
* Done!

* Computation finished

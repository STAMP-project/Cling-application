entry: sources/time-14/build/classes
entry: defects4j/framework/projects/Time/lib/joda-convert-1.2.jar
** CP: sources/time-14/build/classes:defects4j/framework/projects/Time/lib/joda-convert-1.2.jar
* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.joda.time.format.DateTimeFormat
* Starting Client-0
* Connecting to master process on port 12794
* Analyzing classpath: 
  - sources/time-14/build/classes
  - defects4j/framework/projects/Time/lib/joda-convert-1.2.jar
* Finished analyzing classpath
* Generating tests for class org.joda.time.format.DateTimeFormat
* Test criterion:
  - Branch Coverage
* Total number of test goals for DYNAMOSA: 434
* Using seed 1565729262240
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 64 / 434
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5576036866359447
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.684331797235023
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7373271889400922
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7626728110599078
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.783410138248848
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7972350230414746
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7995391705069125
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8018433179723502
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8087557603686636
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8133640552995391
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8248847926267281
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8294930875576036
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8387096774193549
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8410138248847926
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8525345622119815
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8594470046082949
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8594470046082949
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8640552995391705
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8640552995391705
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8663594470046083
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8755760368663594
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.880184331797235
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.880184331797235
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.880184331797235
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8847926267281107
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8847926267281107
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8847926267281107
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8847926267281107
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8894009216589862
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8940092165898618
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8940092165898618
* Search finished after 301s and 846 generations, 232622 statements, best individual has fitness: 46.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8940092165898618
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 87%
* Total number of goals: 434
* Number of covered goals: 379
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8940092165898618
* Generated 83 tests with total length 162
* Resulting test suite's coverage: 89%
* Generating assertions
[MASTER] 22:53:58.759 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.8294333333333334% of time used, but only 6/83 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 3%
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8940092165898618
* Compiling and checking tests
[MASTER] 22:54:48.103 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<1[:00]:00 AM> but was:<1[/1/70 1]:00 AM>
[MASTER] 22:54:48.104 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DateTimeFormatter dateTimeFormatter0 = DateTimeFormat.shortDateTime();
assertNotNull(dateTimeFormatter0);
assertFalse(dateTimeFormatter0.isOffsetParsed());
assertTrue(dateTimeFormatter0.isParser());
assertNull(dateTimeFormatter0.getPivotYear());
assertEquals(2000, dateTimeFormatter0.getDefaultYear());
assertTrue(dateTimeFormatter0.isPrinter());

String string0 = dateTimeFormatter0.print((long) 109);
assertEquals("1:00:00 AM", string0);
assertNotNull(string0);
assertFalse(dateTimeFormatter0.isOffsetParsed());
assertTrue(dateTimeFormatter0.isParser());
assertNull(dateTimeFormatter0.getPivotYear());
assertEquals(2000, dateTimeFormatter0.getDefaultYear());
assertTrue(dateTimeFormatter0.isPrinter());


[MASTER] 22:54:57.011 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[ahh'时'mm'分'ss'秒' z]> but was:<[yyyy'年'M'月'd'日' EEEE]>
[MASTER] 22:54:57.012 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Locale locale0 = Locale.PRC;
assertNotNull(locale0);
assertEquals("CN", locale0.getCountry());
assertEquals("zho", locale0.getISO3Language());
assertEquals("", locale0.getVariant());
assertEquals("CHN", locale0.getISO3Country());
assertEquals("zh_CN", locale0.toString());
assertEquals("zh", locale0.getLanguage());

String string0 = DateTimeFormat.patternForStyle("F-", locale0);
assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", string0);
assertNotNull(string0);
assertEquals("CN", locale0.getCountry());
assertEquals("zho", locale0.getISO3Language());
assertEquals("", locale0.getVariant());
assertEquals("CHN", locale0.getISO3Country());
assertEquals("zh_CN", locale0.toString());
assertEquals("zh", locale0.getLanguage());


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 17
* Writing tests to file
* Writing JUnit test case 'DateTimeFormat_ESTest' to results/evosuite5/time-14-org.joda.time.format.DateTimeFormat-14
* Done!

* Computation finished

entry: sources/math-100/target/classes
** CP: sources/math-100/target/classes
* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.apache.commons.math.optimization.DirectSearchOptimizer
* Starting Client-0
* Connecting to master process on port 16438
* Analyzing classpath: 
  - sources/math-100/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math.optimization.DirectSearchOptimizer
* Test criterion:
  - Branch Coverage
* Total number of test goals for DYNAMOSA: 55
* Using seed 1565708827633
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 31 / 55
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6727272727272727
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9272727272727272
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9636363636363636
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9636363636363636
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9636363636363636
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9636363636363636
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9636363636363636
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9636363636363636
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9636363636363636
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9636363636363636
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9636363636363636
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9636363636363636
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9636363636363636
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9636363636363636
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9636363636363636
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9636363636363636
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9636363636363636
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9636363636363636
* Search finished after 304s and 29 generations, 25582 statements, best individual has fitness: 2.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9636363636363636
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 96%
* Total number of goals: 55
* Number of covered goals: 53
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9636363636363636
* Generated 10 tests with total length 52
* Resulting test suite's coverage: 96%
* Generating assertions
[MASTER] 17:13:27.824 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6951833333333334% of time used, but only 1/10 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 1%
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9636363636363636
* Compiling and checking tests
[MASTER] 17:14:04.037 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<0.5> but was:<0.0>
[MASTER] 17:14:04.050 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MultiDirectional multiDirectional0 = new MultiDirectional();
assertNotNull(multiDirectional0);

CostFunction costFunction0 = mock(CostFunction.class, new ViolatedAssumptionAnswer());
ConvergenceChecker convergenceChecker0 = mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
assertNotNull(jDKRandomGenerator0);

RandomAdaptor randomAdaptor0 = new RandomAdaptor(jDKRandomGenerator0);
assertNotNull(randomAdaptor0);

UniformRandomGenerator uniformRandomGenerator0 = new UniformRandomGenerator(randomAdaptor0);
assertEquals(0.5, randomAdaptor0.nextDouble(), 0.01);
assertEquals(0.4, randomAdaptor0.nextGaussian(), 0.01);
assertEquals((-0.6928203230275509), uniformRandomGenerator0.nextNormalizedDouble(), 0.01);
assertNotNull(uniformRandomGenerator0);

UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(1015, uniformRandomGenerator0);
assertEquals(0.0, randomAdaptor0.nextGaussian(), 0.01);
assertEquals(0.1, randomAdaptor0.nextDouble(), 0.01);
assertEquals(1.3856406460551018, uniformRandomGenerator0.nextNormalizedDouble(), 0.01);
assertNotNull(uncorrelatedRandomVectorGenerator0);

multiDirectional0.minimize(costFunction0, (-2146885049), convergenceChecker0, (RandomVectorGenerator) uncorrelatedRandomVectorGenerator0);

[MASTER] 17:14:05.803 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<0.1> but was:<0.0>
[MASTER] 17:14:05.810 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MultiDirectional multiDirectional0 = new MultiDirectional();
assertNotNull(multiDirectional0);

CostFunction costFunction0 = mock(CostFunction.class, new ViolatedAssumptionAnswer());
doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(costFunction0).cost(any(double[].class));
ConvergenceChecker convergenceChecker0 = mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
doReturn(false, false, false, false, false).when(convergenceChecker0).converged(any(org.apache.commons.math.optimization.PointCostPair[].class));
JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
assertNotNull(jDKRandomGenerator0);

GaussianRandomGenerator gaussianRandomGenerator0 = new GaussianRandomGenerator(jDKRandomGenerator0);
assertEquals(0.1, gaussianRandomGenerator0.nextNormalizedDouble(), 0.01);
assertNotNull(gaussianRandomGenerator0);

UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(0, gaussianRandomGenerator0);
assertEquals(0.3, gaussianRandomGenerator0.nextNormalizedDouble(), 0.01);
assertNotNull(uncorrelatedRandomVectorGenerator0);

multiDirectional0.minimize(costFunction0, 0, convergenceChecker0, (RandomVectorGenerator) uncorrelatedRandomVectorGenerator0, 270);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 5
* Writing tests to file
* Writing JUnit test case 'DirectSearchOptimizer_ESTest' to results/evosuite5/math-100-org.apache.commons.math.optimization.DirectSearchOptimizer-15
* Done!

* Computation finished

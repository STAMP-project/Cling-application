[MASTER] 19:03:11.338 [logback-2] ERROR TestCluster - Failed to check cache for com.google.javascript.jscomp.ControlFlowGraph<N>.Branch : Type points to itself
[MASTER] 19:11:36.459 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_175_1566407496031/com/google/javascript/jscomp/NodeUtil_175_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_175_1566407496031/com/google/javascript/jscomp/NodeUtil_175_tmp__ESTest_scaffolding.java]]
[MASTER] 19:11:36.462 [logback-2] ERROR JUnitAnalyzer - Classpath: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/tools/evosuite.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/classes:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/args4j.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/guava.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/json.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/jsr305.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/protobuf-java.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/lib/rhino.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/ant.jar
[MASTER] 19:11:36.463 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/rq3/botsing-integration-experiment/tools/evosuite.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/classes:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/args4j.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/guava.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/json.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/jsr305.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/protobuf-java.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/lib/rhino.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/ant.jar
[MASTER] 19:11:36.469 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 613
[MASTER] 19:11:36.496 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_175_1566407496031/com/google/javascript/jscomp/NodeUtil_175_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Aug 21 17:11:36 GMT 2019
4:  */
5: 
6: package com.google.javascript.jscomp;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.jscomp.GoogleCodingConvention;
11: import com.google.javascript.jscomp.NodeUtil;
12: import com.google.javascript.rhino.Node;
13: import java.util.Locale;
14: import java.util.Set;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
20: public class NodeUtil_175_tmp__ESTest extends NodeUtil_175_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       Node node0 = Node.newString(3197, "u\"w!~", 30, 101);
25:       assertEquals(41, Node.BRACELESS_TYPE);
26:       assertEquals(40, Node.ORIGINALNAME_PROP);
27:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
28:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
29:       assertEquals(52, Node.LENGTH);
30:       assertEquals(50, Node.FREE_CALL);
31:       assertEquals(15, Node.NO_SIDE_EFFECTS);
32:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
33:       assertEquals(39, Node.EMPTY_BLOCK);
34:       assertEquals(1, Node.DECR_FLAG);
35:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
36:       assertEquals(12, Node.COLUMN_BITS);
37:       assertEquals(4095, Node.COLUMN_MASK);
38:       assertEquals(8, Node.FLAG_NO_THROWS);
39:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
40:       assertEquals(36, Node.QUOTED_PROP);
41:       assertEquals(48, Node.DIRECTIVES);
42:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
43:       assertEquals(37, Node.OPT_ARG_NAME);
44:       assertEquals(49, Node.DIRECT_EVAL);
45:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
46:       assertEquals(53, Node.INPUT_ID);
47:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
48:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
49:       assertEquals(47, Node.IS_DISPATCHER);
50:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
51:       assertEquals(29, Node.JSDOC_INFO_PROP);
52:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
53:       assertEquals(54, Node.LAST_PROP);
54:       assertEquals(35, Node.PARENTHESIZED_PROP);
55:       assertEquals(32, Node.INCRDECR_PROP);
56:       assertEquals(46, Node.IS_NAMESPACE);
57:       assertEquals(51, Node.STATIC_SOURCE_FILE);
58:       assertEquals(2, Node.POST_FLAG);
59:       assertEquals(30, Node.VAR_ARGS_NAME);
60:       assertEquals(43, Node.IS_CONSTANT_NAME);
61:       assertEquals(16, Node.SOURCENAME_PROP);
62:       assertEquals(54, Node.SLASH_V);
63:       assertNotNull(node0);
64:       assertEquals(101, node0.getCharno());
65:       assertFalse(node0.isDefaultCase());
66:       assertFalse(node0.isCatch());
67:       assertFalse(node0.isParamList());
68:       assertFalse(node0.isVoid());
69:       assertFalse(node0.isNull());
70:       assertFalse(node0.isTrue());
71:       assertFalse(node0.isDebugger());
72:       assertFalse(node0.isFor());
73:       assertFalse(node0.isName());
74:       assertFalse(node0.isGetterDef());
75:       assertFalse(node0.isDelProp());
76:       assertFalse(node0.isIf());
77:       assertEquals(122981, node0.getSourcePosition());
78:       assertFalse(node0.isCall());
79:       assertEquals((-1), node0.getSourceOffset());
80:       assertFalse(node0.isTry());
81:       assertFalse(node0.isBlock());
82:       assertFalse(node0.isRegExp());
83:       assertFalse(node0.isWhile());
84:       assertFalse(node0.isString());
85:       assertFalse(node0.isContinue());
86:       assertFalse(node0.hasMoreThanOneChild());
87:       assertFalse(node0.isInc());
88:       assertFalse(node0.isIn());
89:       assertFalse(node0.isNE());
90:       assertFalse(node0.isThrow());
91:       assertFalse(node0.isFalse());
92:       assertFalse(node0.isSetterDef());
93:       assertFalse(node0.isFunction());
94:       assertFalse(node0.isNot());
95:       assertFalse(node0.isObjectLit());
96:       assertFalse(node0.isAnd());
97:       assertFalse(node0.isWith());
98:       assertFalse(node0.isScript());
99:       assertFalse(node0.isInstanceOf());
100:       assertFalse(node0.isExprResult());
101:       assertEquals(3197, node0.getType());
102:       assertFalse(node0.isAssign());
103:       assertFalse(node0.isNumber());
104:       assertFalse(node0.hasOneChild());
105:       assertFalse(node0.isFromExterns());
106:       assertFalse(node0.isBreak());
107:       assertFalse(node0.isGetProp());
108:       assertFalse(node0.isGetElem());
109:       assertFalse(node0.isTypeOf());
110:       assertFalse(node0.isComma());
111:       assertFalse(node0.isDec());
112:       assertFalse(node0.hasChildren());
113:       assertFalse(node0.isThis());
114:       assertFalse(node0.isHook());
115:       assertFalse(node0.isReturn());
116:       assertFalse(node0.isCase());
117:       assertFalse(node0.isDo());
118:       assertFalse(node0.isAdd());
119:       assertFalse(node0.isOr());
120:       assertEquals(30, node0.getLineno());
121:       assertFalse(node0.isSwitch());
122:       assertNull(node0.getSourceFileName());
123:       assertFalse(node0.isEmpty());
124:       assertFalse(node0.isLabelName());
125:       assertFalse(node0.isStringKey());
126:       assertFalse(node0.isArrayLit());
127:       assertFalse(node0.isLabel());
128:       assertFalse(node0.isNew());
129:       assertFalse(node0.isAssignAdd());
130:       assertFalse(node0.isVar());
131:       assertEquals(0, node0.getChildCount());
132:       
133:       NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
134:       assertNotNull(nodeUtil_MatchShallowStatement0);
135:       
136:       Node node1 = new Node(97, node0, node0, node0);
137:       assertFalse(node1.equals((Object)node0));
138:       assertEquals(41, Node.BRACELESS_TYPE);
139:       assertEquals(40, Node.ORIGINALNAME_PROP);
140:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
141:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
142:       assertEquals(52, Node.LENGTH);
143:       assertEquals(50, Node.FREE_CALL);
144:       assertEquals(15, Node.NO_SIDE_EFFECTS);
145:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
146:       assertEquals(39, Node.EMPTY_BLOCK);
147:       assertEquals(1, Node.DECR_FLAG);
148:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
149:       assertEquals(12, Node.COLUMN_BITS);
150:       assertEquals(4095, Node.COLUMN_MASK);
151:       assertEquals(8, Node.FLAG_NO_THROWS);
152:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
153:       assertEquals(36, Node.QUOTED_PROP);
154:       assertEquals(48, Node.DIRECTIVES);
155:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
156:       assertEquals(37, Node.OPT_ARG_NAME);
157:       assertEquals(49, Node.DIRECT_EVAL);
158:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
159:       assertEquals(53, Node.INPUT_ID);
160:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
161:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
162:       assertEquals(47, Node.IS_DISPATCHER);
163:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
164:       assertEquals(29, Node.JSDOC_INFO_PROP);
165:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
166:       assertEquals(54, Node.LAST_PROP);
167:       assertEquals(35, Node.PARENTHESIZED_PROP);
168:       assertEquals(32, Node.INCRDECR_PROP);
169:       assertEquals(46, Node.IS_NAMESPACE);
170:       assertEquals(51, Node.STATIC_SOURCE_FILE);
171:       assertEquals(2, Node.POST_FLAG);
172:       assertEquals(30, Node.VAR_ARGS_NAME);
173:       assertEquals(43, Node.IS_CONSTANT_NAME);
174:       assertEquals(16, Node.SOURCENAME_PROP);
175:       assertEquals(54, Node.SLASH_V);
176:       assertEquals(53, Node.INPUT_ID);
177:       assertEquals(54, Node.LAST_PROP);
178:       assertEquals(35, Node.PARENTHESIZED_PROP);
179:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
180:       assertEquals(36, Node.QUOTED_PROP);
181:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
182:       assertEquals(29, Node.JSDOC_INFO_PROP);
183:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
184:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
185:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
186:       assertEquals(47, Node.IS_DISPATCHER);
187:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
188:       assertEquals(48, Node.DIRECTIVES);
189:       assertEquals(37, Node.OPT_ARG_NAME);
190:       assertEquals(39, Node.EMPTY_BLOCK);
191:       assertEquals(4095, Node.COLUMN_MASK);
192:       assertEquals(8, Node.FLAG_NO_THROWS);
193:       assertEquals(49, Node.DIRECT_EVAL);
194:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
195:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
196:       assertEquals(54, Node.SLASH_V);
197:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
198:       assertEquals(41, Node.BRACELESS_TYPE);
199:       assertEquals(52, Node.LENGTH);
200:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
201:       assertEquals(30, Node.VAR_ARGS_NAME);
202:       assertEquals(1, Node.DECR_FLAG);
203:       assertEquals(15, Node.NO_SIDE_EFFECTS);
204:       assertEquals(12, Node.COLUMN_BITS);
205:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
206:       assertEquals(32, Node.INCRDECR_PROP);
207:       assertEquals(46, Node.IS_NAMESPACE);
208:       assertEquals(2, Node.POST_FLAG);
209:       assertEquals(51, Node.STATIC_SOURCE_FILE);
210:       assertEquals(50, Node.FREE_CALL);
211:       assertEquals(40, Node.ORIGINALNAME_PROP);
212:       assertEquals(16, Node.SOURCENAME_PROP);
213:       assertEquals(43, Node.IS_CONSTANT_NAME);
214:       assertNotNull(node1);
215:       assertEquals(101, node0.getCharno());
216:       assertFalse(node0.isDefaultCase());
217:       assertFalse(node0.isCatch());
218:       assertFalse(node0.isParamList());
219:       assertFalse(node0.isVoid());
220:       assertFalse(node0.isNull());
221:       assertFalse(node0.isTrue());
222:       assertFalse(node0.isDebugger());
223:       assertFalse(node0.isFor());
224:       assertFalse(node0.isName());
225:       assertFalse(node0.isGetterDef());
226:       assertFalse(node0.isDelProp());
227:       assertFalse(node0.isIf());
228:       assertEquals(122981, node0.getSourcePosition());
229:       assertFalse(node0.isCall());
230:       assertEquals((-1), node0.getSourceOffset());
231:       assertFalse(node0.isTry());
232:       assertFalse(node0.isBlock());
233:       assertFalse(node0.isRegExp());
234:       assertFalse(node0.isWhile());
235:       assertFalse(node0.isString());
236:       assertFalse(node0.isContinue());
237:       assertFalse(node0.hasMoreThanOneChild());
238:       assertFalse(node0.isInc());
239:       assertFalse(node0.isIn());
240:       assertFalse(node0.isNE());
241:       assertFalse(node0.isThrow());
242:       assertFalse(node0.isFalse());
243:       assertFalse(node0.isSetterDef());
244:       assertFalse(node0.isFunction());
245:       assertFalse(node0.isNot());
246:       assertFalse(node0.isObjectLit());
247:       assertFalse(node0.isAnd());
248:       assertFalse(node0.isWith());
249:       assertFalse(node0.isScript());
250:       assertFalse(node0.isInstanceOf());
251:       assertFalse(node0.isExprResult());
252:       assertEquals(3197, node0.getType());
253:       assertFalse(node0.isAssign());
254:       assertFalse(node0.isNumber());
255:       assertFalse(node0.hasOneChild());
256:       assertFalse(node0.isFromExterns());
257:       assertFalse(node0.isBreak());
258:       assertFalse(node0.isGetProp());
259:       assertFalse(node0.isGetElem());
260:       assertFalse(node0.isTypeOf());
261:       assertFalse(node0.isComma());
262:       assertFalse(node0.isDec());
263:       assertFalse(node0.hasChildren());
264:       assertFalse(node0.isThis());
265:       assertFalse(node0.isHook());
266:       assertFalse(node0.isReturn());
267:       assertFalse(node0.isCase());
268:       assertFalse(node0.isDo());
269:       assertFalse(node0.isAdd());
270:       assertFalse(node0.isOr());
271:       assertEquals(30, node0.getLineno());
272:       assertFalse(node0.isSwitch());
273:       assertNull(node0.getSourceFileName());
274:       assertFalse(node0.isEmpty());
275:       assertFalse(node0.isLabelName());
276:       assertFalse(node0.isStringKey());
277:       assertFalse(node0.isArrayLit());
278:       assertFalse(node0.isLabel());
279:       assertFalse(node0.isNew());
280:       assertFalse(node0.isAssignAdd());
281:       assertFalse(node0.isVar());
282:       assertEquals(0, node0.getChildCount());
283:       assertFalse(node1.hasMoreThanOneChild());
284:       assertFalse(node1.isContinue());
285:       assertEquals((-1), node1.getLineno());
286:       assertFalse(node1.isDo());
287:       assertFalse(node1.isNumber());
288:       assertFalse(node1.isOr());
289:       assertEquals((-1), node1.getSourcePosition());
290:       assertFalse(node1.isCall());
291:       assertFalse(node1.isName());
292:       assertFalse(node1.isGetElem());
293:       assertFalse(node1.isExprResult());
294:       assertFalse(node1.isFromExterns());
295:       assertEquals(97, node1.getType());
296:       assertFalse(node1.isTypeOf());
297:       assertFalse(node1.isWhile());
298:       assertFalse(node1.isReturn());
299:       assertFalse(node1.isAssign());
300:       assertFalse(node1.isBlock());
301:       assertFalse(node1.isDec());
302:       assertFalse(node1.isObjectLit());
303:       assertFalse(node1.isCatch());
304:       assertFalse(node1.isInstanceOf());
305:       assertFalse(node1.isWith());
306:       assertFalse(node1.isAnd());
307:       assertFalse(node1.isGetProp());
308:       assertFalse(node1.isSetterDef());
309:       assertFalse(node1.isNot());
310:       assertFalse(node1.isDebugger());
311:       assertFalse(node1.isThrow());
312:       assertFalse(node1.isFalse());
313:       assertFalse(node1.isFunction());
314:       assertFalse(node1.isIn());
315:       assertFalse(node1.isString());
316:       assertTrue(node1.hasChildren());
317:       assertFalse(node1.isCase());
318:       assertFalse(node1.isInc());
319:       assertFalse(node1.isNE());
320:       assertFalse(node1.isSwitch());
321:       assertFalse(node1.isIf());
322:       assertFalse(node1.isGetterDef());
323:       assertEquals((-1), node1.getCharno());
324:       assertFalse(node1.isTry());
325:       assertFalse(node1.isDelProp());
326:       assertFalse(node1.isBreak());
327:       assertEquals((-1), node1.getSourceOffset());
328:       assertFalse(node1.isComma());
329:       assertFalse(node1.isThis());
330:       assertFalse(node1.isRegExp());
331:       assertTrue(node1.hasOneChild());
332:       assertEquals(1, node1.getChildCount());
333:       assertFalse(node1.isFor());
334:       assertFalse(node1.isHook());
335:       assertFalse(node1.isParamList());
336:       assertFalse(node1.isTrue());
337:       assertFalse(node1.isScript());
338:       assertFalse(node1.isVoid());
339:       assertFalse(node1.isNull());
340:       assertNull(node1.getSourceFileName());
341:       assertFalse(node1.isVar());
342:       assertFalse(node1.isStringKey());
343:       assertFalse(node1.isEmpty());
344:       assertFalse(node1.isLabelName());
345:       assertFalse(node1.isAdd());
346:       assertFalse(node1.isNew());
347:       assertFalse(node1.isArrayLit());
348:       assertFalse(node1.isAssignAdd());
349:       assertFalse(node1.isDefaultCase());
350:       assertFalse(node1.isLabel());
351:       
352:       boolean boolean0 = NodeUtil.isSimpleOperatorType(38);
353:       assertFalse(boolean0);
354:       
355:       boolean boolean1 = nodeUtil_MatchShallowStatement0.apply(node1);
356:       assertFalse(node0.equals((Object)node1));
357:       assertFalse(node1.equals((Object)node0));
358:       assertFalse(boolean1 == boolean0);
359:       assertEquals(41, Node.BRACELESS_TYPE);
360:       assertEquals(40, Node.ORIGINALNAME_PROP);
361:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
362:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
363:       assertEquals(52, Node.LENGTH);
364:       assertEquals(50, Node.FREE_CALL);
365:       assertEquals(15, Node.NO_SIDE_EFFECTS);
366:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
367:       assertEquals(39, Node.EMPTY_BLOCK);
368:       assertEquals(1, Node.DECR_FLAG);
369:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
370:       assertEquals(12, Node.COLUMN_BITS);
371:       assertEquals(4095, Node.COLUMN_MASK);
372:       assertEquals(8, Node.FLAG_NO_THROWS);
373:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
374:       assertEquals(36, Node.QUOTED_PROP);
375:       assertEquals(48, Node.DIRECTIVES);
376:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
377:       assertEquals(37, Node.OPT_ARG_NAME);
378:       assertEquals(49, Node.DIRECT_EVAL);
379:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
380:       assertEquals(53, Node.INPUT_ID);
381:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
382:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
383:       assertEquals(47, Node.IS_DISPATCHER);
384:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
385:       assertEquals(29, Node.JSDOC_INFO_PROP);
386:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
387:       assertEquals(54, Node.LAST_PROP);
388:       assertEquals(35, Node.PARENTHESIZED_PROP);
389:       assertEquals(32, Node.INCRDECR_PROP);
390:       assertEquals(46, Node.IS_NAMESPACE);
391:       assertEquals(51, Node.STATIC_SOURCE_FILE);
392:       assertEquals(2, Node.POST_FLAG);
393:       assertEquals(30, Node.VAR_ARGS_NAME);
394:       assertEquals(43, Node.IS_CONSTANT_NAME);
395:       assertEquals(16, Node.SOURCENAME_PROP);
396:       assertEquals(54, Node.SLASH_V);
397:       assertEquals(53, Node.INPUT_ID);
398:       assertEquals(54, Node.LAST_PROP);
399:       assertEquals(35, Node.PARENTHESIZED_PROP);
400:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
401:       assertEquals(36, Node.QUOTED_PROP);
402:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
403:       assertEquals(29, Node.JSDOC_INFO_PROP);
404:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
405:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
406:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
407:       assertEquals(47, Node.IS_DISPATCHER);
408:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
409:       assertEquals(48, Node.DIRECTIVES);
410:       assertEquals(37, Node.OPT_ARG_NAME);
411:       assertEquals(39, Node.EMPTY_BLOCK);
412:       assertEquals(4095, Node.COLUMN_MASK);
413:       assertEquals(8, Node.FLAG_NO_THROWS);
414:       assertEquals(49, Node.DIRECT_EVAL);
415:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
416:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
417:       assertEquals(54, Node.SLASH_V);
418:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
419:       assertEquals(41, Node.BRACELESS_TYPE);
420:       assertEquals(52, Node.LENGTH);
421:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
422:       assertEquals(30, Node.VAR_ARGS_NAME);
423:       assertEquals(1, Node.DECR_FLAG);
424:       assertEquals(15, Node.NO_SIDE_EFFECTS);
425:       assertEquals(12, Node.COLUMN_BITS);
426:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
427:       assertEquals(32, Node.INCRDECR_PROP);
428:       assertEquals(46, Node.IS_NAMESPACE);
429:       assertEquals(2, Node.POST_FLAG);
430:       assertEquals(51, Node.STATIC_SOURCE_FILE);
431:       assertEquals(50, Node.FREE_CALL);
432:       assertEquals(40, Node.ORIGINALNAME_PROP);
433:       assertEquals(16, Node.SOURCENAME_PROP);
434:       assertEquals(43, Node.IS_CONSTANT_NAME);
435:       assertTrue(boolean1);
436:       assertEquals(101, node0.getCharno());
437:       assertFalse(node0.isDefaultCase());
438:       assertFalse(node0.isCatch());
439:       assertFalse(node0.isParamList());
440:       assertFalse(node0.isVoid());
441:       assertFalse(node0.isNull());
442:       assertFalse(node0.isTrue());
443:       assertFalse(node0.isDebugger());
444:       assertFalse(node0.isFor());
445:       assertFalse(node0.isName());
446:       assertFalse(node0.isGetterDef());
447:       assertFalse(node0.isDelProp());
448:       assertFalse(node0.isIf());
449:       assertEquals(122981, node0.getSourcePosition());
450:       assertFalse(node0.isCall());
451:       assertEquals((-1), node0.getSourceOffset());
452:       assertFalse(node0.isTry());
453:       assertFalse(node0.isBlock());
454:       assertFalse(node0.isRegExp());
455:       assertFalse(node0.isWhile());
456:       assertFalse(node0.isString());
457:       assertFalse(node0.isContinue());
458:       assertFalse(node0.hasMoreThanOneChild());
459:       assertFalse(node0.isInc());
460:       assertFalse(node0.isIn());
461:       assertFalse(node0.isNE());
462:       assertFalse(node0.isThrow());
463:       assertFalse(node0.isFalse());
464:       assertFalse(node0.isSetterDef());
465:       assertFalse(node0.isFunction());
466:       assertFalse(node0.isNot());
467:       assertFalse(node0.isObjectLit());
468:       assertFalse(node0.isAnd());
469:       assertFalse(node0.isWith());
470:       assertFalse(node0.isScript());
471:       assertFalse(node0.isInstanceOf());
472:       assertFalse(node0.isExprResult());
473:       assertEquals(3197, node0.getType());
474:       assertFalse(node0.isAssign());
475:       assertFalse(node0.isNumber());
476:       assertFalse(node0.hasOneChild());
477:       assertFalse(node0.isFromExterns());
478:       assertFalse(node0.isBreak());
479:       assertFalse(node0.isGetProp());
480:       assertFalse(node0.isGetElem());
481:       assertFalse(node0.isTypeOf());
482:       assertFalse(node0.isComma());
483:       assertFalse(node0.isDec());
484:       assertFalse(node0.hasChildren());
485:       assertFalse(node0.isThis());
486:       assertFalse(node0.isHook());
487:       assertFalse(node0.isReturn());
488:       assertFalse(node0.isCase());
489:       assertFalse(node0.isDo());
490:       assertFalse(node0.isAdd());
491:       assertFalse(node0.isOr());
492:       assertEquals(30, node0.getLineno());
493:       assertFalse(node0.isSwitch());
494:       assertNull(node0.getSourceFileName());
495:       assertFalse(node0.isEmpty());
496:       assertFalse(node0.isLabelName());
497:       assertFalse(node0.isStringKey());
498:       assertFalse(node0.isArrayLit());
499:       assertFalse(node0.isLabel());
500:       assertFalse(node0.isNew());
501:       assertFalse(node0.isAssignAdd());
502:       assertFalse(node0.isVar());
503:       assertEquals(0, node0.getChildCount());
504:       assertFalse(node1.hasMoreThanOneChild());
505:       assertFalse(node1.isContinue());
506:       assertEquals((-1), node1.getLineno());
507:       assertFalse(node1.isDo());
508:       assertFalse(node1.isNumber());
509:       assertFalse(node1.isOr());
510:       assertEquals((-1), node1.getSourcePosition());
511:       assertFalse(node1.isCall());
512:       assertFalse(node1.isName());
513:       assertFalse(node1.isGetElem());
514:       assertFalse(node1.isExprResult());
515:       assertFalse(node1.isFromExterns());
516:       assertEquals(97, node1.getType());
517:       assertFalse(node1.isTypeOf());
518:       assertFalse(node1.isWhile());
519:       assertFalse(node1.isReturn());
520:       assertFalse(node1.isAssign());
521:       assertFalse(node1.isBlock());
522:       assertFalse(node1.isDec());
523:       assertFalse(node1.isObjectLit());
524:       assertFalse(node1.isCatch());
525:       assertFalse(node1.isInstanceOf());
526:       assertFalse(node1.isWith());
527:       assertFalse(node1.isAnd());
528:       assertFalse(node1.isGetProp());
529:       assertFalse(node1.isSetterDef());
530:       assertFalse(node1.isNot());
531:       assertFalse(node1.isDebugger());
532:       assertFalse(node1.isThrow());
533:       assertFalse(node1.isFalse());
534:       assertFalse(node1.isFunction());
535:       assertFalse(node1.isIn());
536:       assertFalse(node1.isString());
537:       assertTrue(node1.hasChildren());
538:       assertFalse(node1.isCase());
539:       assertFalse(node1.isInc());
540:       assertFalse(node1.isNE());
541:       assertFalse(node1.isSwitch());
542:       assertFalse(node1.isIf());
543:       assertFalse(node1.isGetterDef());
544:       assertEquals((-1), node1.getCharno());
545:       assertFalse(node1.isTry());
546:       assertFalse(node1.isDelProp());
547:       assertFalse(node1.isBreak());
548:       assertEquals((-1), node1.getSourceOffset());
549:       assertFalse(node1.isComma());
550:       assertFalse(node1.isThis());
551:       assertFalse(node1.isRegExp());
552:       assertTrue(node1.hasOneChild());
553:       assertEquals(1, node1.getChildCount());
554:       assertFalse(node1.isFor());
555:       assertFalse(node1.isHook());
556:       assertFalse(node1.isParamList());
557:       assertFalse(node1.isTrue());
558:       assertFalse(node1.isScript());
559:       assertFalse(node1.isVoid());
560:       assertFalse(node1.isNull());
561:       assertNull(node1.getSourceFileName());
562:       assertFalse(node1.isVar());
563:       assertFalse(node1.isStringKey());
564:       assertFalse(node1.isEmpty());
565:       assertFalse(node1.isLabelName());
566:       assertFalse(node1.isAdd());
567:       assertFalse(node1.isNew());
568:       assertFalse(node1.isArrayLit());
569:       assertFalse(node1.isAssignAdd());
570:       assertFalse(node1.isDefaultCase());
571:       assertFalse(node1.isLabel());
572:       
573:       Iterable<Node> iterable0 = node0.children();
574:       assertFalse(node0.equals((Object)node1));
575:       assertEquals(41, Node.BRACELESS_TYPE);
576:       assertEquals(40, Node.ORIGINALNAME_PROP);
577:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
578:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
579:       assertEquals(52, Node.LENGTH);
580:       assertEquals(50, Node.FREE_CALL);
581:       assertEquals(15, Node.NO_SIDE_EFFECTS);
582:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
583:       assertEquals(39, Node.EMPTY_BLOCK);
584:       assertEquals(1, Node.DECR_FLAG);
585:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
586:       assertEquals(12, Node.COLUMN_BITS);
587:       assertEquals(4095, Node.COLUMN_MASK);
588:       assertEquals(8, Node.FLAG_NO_THROWS);
589:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
590:       assertEquals(36, Node.QUOTED_PROP);
591:       assertEquals(48, Node.DIRECTIVES);
592:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
593:       assertEquals(37, Node.OPT_ARG_NAME);
594:       assertEquals(49, Node.DIRECT_EVAL);
595:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
596:       assertEquals(53, Node.INPUT_ID);
597:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
598:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
599:       assertEquals(47, Node.IS_DISPATCHER);
600:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
601:       assertEquals(29, Node.JSDOC_INFO_PROP);
602:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
603:       assertEquals(54, Node.LAST_PROP);
604:       assertEquals(35, Node.PARENTHESIZED_PROP);
605:       assertEquals(32, Node.INCRDECR_PROP);
606:       assertEquals(46, Node.IS_NAMESPACE);
607:       assertEquals(51, Node.STATIC_SOURCE_FILE);
608:       assertEquals(2, Node.POST_FLAG);
609:       assertEquals(30, Node.VAR_ARGS_NAME);
610:       assertEquals(43, Node.IS_CONSTANT_NAME);
611:       assertEquals(16, Node.SOURCENAME_PROP);
612:       assertEquals(54, Node.SLASH_V);
613:       assertFalse(iterable0.contains(node0));
614:       assertNotNull(iterable0);
615:       assertEquals(101, node0.getCharno());
616:       assertFalse(node0.isDefaultCase());
617:       assertFalse(node0.isCatch());
618:       assertFalse(node0.isParamList());
619:       assertFalse(node0.isVoid());
620:       assertFalse(node0.isNull());
621:       assertFalse(node0.isTrue());
622:       assertFalse(node0.isDebugger());
623:       assertFalse(node0.isFor());
624:       assertFalse(node0.isName());
625:       assertFalse(node0.isGetterDef());
626:       assertFalse(node0.isDelProp());
627:       assertFalse(node0.isIf());
628:       assertEquals(122981, node0.getSourcePosition());
629:       assertFalse(node0.isCall());
630:       assertEquals((-1), node0.getSourceOffset());
631:       assertFalse(node0.isTry());
632:       assertFalse(node0.isBlock());
633:       assertFalse(node0.isRegExp());
634:       assertFalse(node0.isWhile());
635:       assertFalse(node0.isString());
636:       assertFalse(node0.isContinue());
637:       assertFalse(node0.hasMoreThanOneChild());
638:       assertFalse(node0.isInc());
639:       assertFalse(node0.isIn());
640:       assertFalse(node0.isNE());
641:       assertFalse(node0.isThrow());
642:       assertFalse(node0.isFalse());
643:       assertFalse(node0.isSetterDef());
644:       assertFalse(node0.isFunction());
645:       assertFalse(node0.isNot());
646:       assertFalse(node0.isObjectLit());
647:       assertFalse(node0.isAnd());
648:       assertFalse(node0.isWith());
649:       assertFalse(node0.isScript());
650:       assertFalse(node0.isInstanceOf());
651:       assertFalse(node0.isExprResult());
652:       assertEquals(3197, node0.getType());
653:       assertFalse(node0.isAssign());
654:       assertFalse(node0.isNumber());
655:       assertFalse(node0.hasOneChild());
656:       assertFalse(node0.isFromExterns());
657:       assertFalse(node0.isBreak());
658:       assertFalse(node0.isGetProp());
659:       assertFalse(node0.isGetElem());
660:       assertFalse(node0.isTypeOf());
661:       assertFalse(node0.isComma());
662:       assertFalse(node0.isDec());
663:       assertFalse(node0.hasChildren());
664:       assertFalse(node0.isThis());
665:       assertFalse(node0.isHook());
666:       assertFalse(node0.isReturn());
667:       assertFalse(node0.isCase());
668:       assertFalse(node0.isDo());
669:       assertFalse(node0.isAdd());
670:       assertFalse(node0.isOr());
671:       assertEquals(30, node0.getLineno());
672:       assertFalse(node0.isSwitch());
673:       assertNull(node0.getSourceFileName());
674:       assertFalse(node0.isEmpty());
675:       assertFalse(node0.isLabelName());
676:       assertFalse(node0.isStringKey());
677:       assertFalse(node0.isArrayLit());
678:       assertFalse(node0.isLabel());
679:       assertFalse(node0.isNew());
680:       assertFalse(node0.isAssignAdd());
681:       assertFalse(node0.isVar());
682:       assertEquals(0, node0.getChildCount());
683:       
684:       Locale locale0 = Locale.ENGLISH;
685:       assertNotNull(locale0);
686:       assertEquals("", locale0.getCountry());
687:       assertEquals("en", locale0.toString());
688:       assertEquals("eng", locale0.getISO3Language());
689:       assertEquals("", locale0.getISO3Country());
690:       assertEquals("", locale0.getVariant());
691:       assertEquals("en", locale0.getLanguage());
692:       
693:       Locale locale1 = Locale.CHINESE;
694:       assertFalse(locale1.equals((Object)locale0));
695:       assertNotSame(locale1, locale0);
696:       assertNotNull(locale1);
697:       assertEquals("", locale1.getVariant());
698:       assertEquals("zh", locale1.toString());
699:       assertEquals("", locale1.getCountry());
700:       assertEquals("zho", locale1.getISO3Language());
701:       assertEquals("", locale1.getISO3Country());
702:       assertEquals("zh", locale1.getLanguage());
703:       
704:       Set<String> set0 = locale1.getUnicodeLocaleKeys();
705:       assertFalse(locale1.equals((Object)locale0));
706:       assertNotSame(locale1, locale0);
707:       assertFalse(set0.contains("u\"w!~"));
708:       assertNotNull(set0);
709:       assertEquals("", locale1.getVariant());
710:       assertEquals("zh", locale1.toString());
711:       assertEquals("", locale1.getCountry());
712:       assertEquals("zho", locale1.getISO3Language());
713:       assertEquals("", locale1.getISO3Country());
714:       assertEquals("zh", locale1.getLanguage());
715:       assertEquals(0, set0.size());
716:       assertTrue(set0.isEmpty());
717:       
718:       GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
719:       assertNotNull(googleCodingConvention0);
720:       assertNull(googleCodingConvention0.getDelegateSuperclassName());
721:       assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
722:       assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
723:       assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
724:       assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
725:       
726:       boolean boolean2 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchShallowStatement0);
727:       assertFalse(node0.equals((Object)node1));
728:       assertFalse(node1.equals((Object)node0));
729:       assertFalse(boolean2 == boolean0);
730:       assertTrue(boolean2 == boolean1);
731:       assertEquals(41, Node.BRACELESS_TYPE);
732:       assertEquals(40, Node.ORIGINALNAME_PROP);
733:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
734:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
735:       assertEquals(52, Node.LENGTH);
736:       assertEquals(50, Node.FREE_CALL);
737:       assertEquals(15, Node.NO_SIDE_EFFECTS);
738:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
739:       assertEquals(39, Node.EMPTY_BLOCK);
740:       assertEquals(1, Node.DECR_FLAG);
741:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
742:       assertEquals(12, Node.COLUMN_BITS);
743:       assertEquals(4095, Node.COLUMN_MASK);
744:       assertEquals(8, Node.FLAG_NO_THROWS);
745:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
746:       assertEquals(36, Node.QUOTED_PROP);
747:       assertEquals(48, Node.DIRECTIVES);
748:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
749:       assertEquals(37, Node.OPT_ARG_NAME);
750:       assertEquals(49, Node.DIRECT_EVAL);
751:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
752:       assertEquals(53, Node.INPUT_ID);
753:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
754:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
755:       assertEquals(47, Node.IS_DISPATCHER);
756:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
757:       assertEquals(29, Node.JSDOC_INFO_PROP);
758:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
759:       assertEquals(54, Node.LAST_PROP);
760:       assertEquals(35, Node.PARENTHESIZED_PROP);
761:       assertEquals(32, Node.INCRDECR_PROP);
762:       assertEquals(46, Node.IS_NAMESPACE);
763:       assertEquals(51, Node.STATIC_SOURCE_FILE);
764:       assertEquals(2, Node.POST_FLAG);
765:       assertEquals(30, Node.VAR_ARGS_NAME);
766:       assertEquals(43, Node.IS_CONSTANT_NAME);
767:       assertEquals(16, Node.SOURCENAME_PROP);
768:       assertEquals(54, Node.SLASH_V);
769:       assertEquals(53, Node.INPUT_ID);
770:       assertEquals(54, Node.LAST_PROP);
771:       assertEquals(35, Node.PARENTHESIZED_PROP);
772:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
773:       assertEquals(36, Node.QUOTED_PROP);
774:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
775:       assertEquals(29, Node.JSDOC_INFO_PROP);
776:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
777:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
778:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
779:       assertEquals(47, Node.IS_DISPATCHER);
780:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
781:       assertEquals(48, Node.DIRECTIVES);
782:       assertEquals(37, Node.OPT_ARG_NAME);
783:       assertEquals(39, Node.EMPTY_BLOCK);
784:       assertEquals(4095, Node.COLUMN_MASK);
785:       assertEquals(8, Node.FLAG_NO_THROWS);
786:       assertEquals(49, Node.DIRECT_EVAL);
787:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
788:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
789:       assertEquals(54, Node.SLASH_V);
790:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
791:       assertEquals(41, Node.BRACELESS_TYPE);
792:       assertEquals(52, Node.LENGTH);
793:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
794:       assertEquals(30, Node.VAR_ARGS_NAME);
795:       assertEquals(1, Node.DECR_FLAG);
796:       assertEquals(15, Node.NO_SIDE_EFFECTS);
797:       assertEquals(12, Node.COLUMN_BITS);
798:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
799:       assertEquals(32, Node.INCRDECR_PROP);
800:       assertEquals(46, Node.IS_NAMESPACE);
801:       assertEquals(2, Node.POST_FLAG);
802:       assertEquals(51, Node.STATIC_SOURCE_FILE);
803:       assertEquals(50, Node.FREE_CALL);
804:       assertEquals(40, Node.ORIGINALNAME_PROP);
805:       assertEquals(16, Node.SOURCENAME_PROP);
806:       assertEquals(43, Node.IS_CONSTANT_NAME);
807:       assertTrue(boolean2);
808:       assertEquals(101, node0.getCharno());
809:       assertFalse(node0.isDefaultCase());
810:       assertFalse(node0.isCatch());
811:       assertFalse(node0.isParamList());
812:       assertFalse(node0.isVoid());
813:       assertFalse(node0.isNull());
814:       assertFalse(node0.isTrue());
815:       assertFalse(node0.isDebugger());
816:       assertFalse(node0.isFor());
817:       assertFalse(node0.isName());
818:       assertFalse(node0.isGetterDef());
819:       assertFalse(node0.isDelProp());
820:       assertFalse(node0.isIf());
821:       assertEquals(122981, node0.getSourcePosition());
822:       assertFalse(node0.isCall());
823:       assertEquals((-1), node0.getSourceOffset());
824:       assertFalse(node0.isTry());
825:       assertFalse(node0.isBlock());
826:       assertFalse(node0.isRegExp());
827:       assertFalse(node0.isWhile());
828:       assertFalse(node0.isString());
829:       assertFalse(node0.isContinue());
830:       assertFalse(node0.hasMoreThanOneChild());
831:       assertFalse(node0.isInc());
832:       assertFalse(node0.isIn());
833:       assertFalse(node0.isNE());
834:       assertFalse(node0.isThrow());
835:       assertFalse(node0.isFalse());
836:       assertFalse(node0.isSetterDef());
837:       assertFalse(node0.isFunction());
838:       assertFalse(node0.isNot());
839:       assertFalse(node0.isObjectLit());
840:       assertFalse(node0.isAnd());
841:       assertFalse(node0.isWith());
842:       assertFalse(node0.isScript());
843:       assertFalse(node0.isInstanceOf());
844:       assertFalse(node0.isExprResult());
845:       assertEquals(3197, node0.getType());
846:       assertFalse(node0.isAssign());
847:       assertFalse(node0.isNumber());
848:       assertFalse(node0.hasOneChild());
849:       assertFalse(node0.isFromExterns());
850:       assertFalse(node0.isBreak());
851:       assertFalse(node0.isGetProp());
852:       assertFalse(node0.isGetElem());
853:       assertFalse(node0.isTypeOf());
854:       assertFalse(node0.isComma());
855:       assertFalse(node0.isDec());
856:       assertFalse(node0.hasChildren());
857:       assertFalse(node0.isThis());
858:       assertFalse(node0.isHook());
859:       assertFalse(node0.isReturn());
860:       assertFalse(node0.isCase());
861:       assertFalse(node0.isDo());
862:       assertFalse(node0.isAdd());
863:       assertFalse(node0.isOr());
864:       assertEquals(30, node0.getLineno());
865:       assertFalse(node0.isSwitch());
866:       assertNull(node0.getSourceFileName());
867:       assertFalse(node0.isEmpty());
868:       assertFalse(node0.isLabelName());
869:       assertFalse(node0.isStringKey());
870:       assertFalse(node0.isArrayLit());
871:       assertFalse(node0.isLabel());
872:       assertFalse(node0.isNew());
873:       assertFalse(node0.isAssignAdd());
874:       assertFalse(node0.isVar());
875:       assertEquals(0, node0.getChildCount());
876:       assertFalse(node1.hasMoreThanOneChild());
877:       assertFalse(node1.isContinue());
878:       assertEquals((-1), node1.getLineno());
879:       assertFalse(node1.isDo());
880:       assertFalse(node1.isNumber());
881:       assertFalse(node1.isOr());
882:       assertEquals((-1), node1.getSourcePosition());
883:       assertFalse(node1.isCall());
884:       assertFalse(node1.isName());
885:       assertFalse(node1.isGetElem());
886:       assertFalse(node1.isExprResult());
887:       assertFalse(node1.isFromExterns());
888:       assertEquals(97, node1.getType());
889:       assertFalse(node1.isTypeOf());
890:       assertFalse(node1.isWhile());
891:       assertFalse(node1.isReturn());
892:       assertFalse(node1.isAssign());
893:       assertFalse(node1.isBlock());
894:       assertFalse(node1.isDec());
895:       assertFalse(node1.isObjectLit());
896:       assertFalse(node1.isCatch());
897:       assertFalse(node1.isInstanceOf());
898:       assertFalse(node1.isWith());
899:       assertFalse(node1.isAnd());
900:       assertFalse(node1.isGetProp());
901:       assertFalse(node1.isSetterDef());
902:       assertFalse(node1.isNot());
903:       assertFalse(node1.isDebugger());
904:       assertFalse(node1.isThrow());
905:       assertFalse(node1.isFalse());
906:       assertFalse(node1.isFunction());
907:       assertFalse(node1.isIn());
908:       assertFalse(node1.isString());
909:       assertTrue(node1.hasChildren());
910:       assertFalse(node1.isCase());
911:       assertFalse(node1.isInc());
912:       assertFalse(node1.isNE());
913:       assertFalse(node1.isSwitch());
914:       assertFalse(node1.isIf());
915:       assertFalse(node1.isGetterDef());
916:       assertEquals((-1), node1.getCharno());
917:       assertFalse(node1.isTry());
918:       assertFalse(node1.isDelProp());
919:       assertFalse(node1.isBreak());
920:       assertEquals((-1), node1.getSourceOffset());
921:       assertFalse(node1.isComma());
922:       assertFalse(node1.isThis());
923:       assertFalse(node1.isRegExp());
924:       assertTrue(node1.hasOneChild());
925:       assertEquals(1, node1.getChildCount());
926:       assertFalse(node1.isFor());
927:       assertFalse(node1.isHook());
928:       assertFalse(node1.isParamList());
929:       assertFalse(node1.isTrue());
930:       assertFalse(node1.isScript());
931:       assertFalse(node1.isVoid());
932:       assertFalse(node1.isNull());
933:       assertNull(node1.getSourceFileName());
934:       assertFalse(node1.isVar());
935:       assertFalse(node1.isStringKey());
936:       assertFalse(node1.isEmpty());
937:       assertFalse(node1.isLabelName());
938:       assertFalse(node1.isAdd());
939:       assertFalse(node1.isNew());
940:       assertFalse(node1.isArrayLit());
941:       assertFalse(node1.isAssignAdd());
942:       assertFalse(node1.isDefaultCase());
943:       assertFalse(node1.isLabel());
944:   }
945: }
RegularFileObject[/tmp/EvoSuite_175_1566407496031/com/google/javascript/jscomp/NodeUtil_175_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Aug 21 17:11:36 GMT 2019
5:  */
6: 
7: package com.google.javascript.jscomp;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NodeUtil_175_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.jscomp.NodeUtil"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/rq3/botsing-integration-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NodeUtil_175_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.common.collect.ArrayListMultimap",
82:       "com.google.javascript.jscomp.Tracer$1",
83:       "com.google.common.collect.Collections2",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.jscomp.NodeTraversal$Callback",
86:       "com.google.javascript.rhino.head.jdk13.VMBridge_jdk13",
87:       "com.google.javascript.jscomp.CheckSideEffects",
88:       "com.google.javascript.rhino.head.ast.Yield",
89:       "com.google.javascript.jscomp.SimpleDefinitionFinder",
90:       "com.google.javascript.jscomp.graph.Graph",
91:       "com.google.javascript.rhino.jstype.StaticScope",
92:       "com.google.javascript.rhino.jstype.InstanceObjectType",
93:       "com.google.javascript.jscomp.graph.Annotatable",
94:       "com.google.common.collect.AbstractMapBasedMultiset$1",
95:       "com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher",
96:       "com.google.javascript.jscomp.JSModule",
97:       "com.google.javascript.rhino.jstype.ObjectType",
98:       "com.google.common.collect.ImmutableSet$ArrayImmutableSet",
99:       "com.google.common.collect.RegularImmutableMap",
100:       "com.google.javascript.rhino.jstype.RecordType",
101:       "com.google.javascript.rhino.Node$NodeMismatch",
102:       "com.google.javascript.rhino.head.ast.Jump",
103:       "com.google.javascript.jscomp.Tracer",
104:       "com.google.javascript.jscomp.PeepholeSimplifyRegExp",
105:       "com.google.javascript.jscomp.HotSwapCompilerPass",
106:       "com.google.javascript.jscomp.SourceFile$Builder",
107:       "com.google.javascript.jscomp.CodingConvention$SubclassType",
108:       "com.google.javascript.rhino.jstype.JSType$1",
109:       "com.google.javascript.jscomp.CodingConvention",
110:       "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
111:       "com.google.javascript.jscomp.SourceMap$DetailLevel",
112:       "com.google.javascript.jscomp.MemoizedScopeCreator",
113:       "com.google.javascript.rhino.head.ast.EmptyStatement",
114:       "com.google.javascript.jscomp.CompilerOptions$1",
115:       "com.google.common.base.Joiner",
116:       "com.google.javascript.jscomp.CheckAccessControls",
117:       "com.google.javascript.jscomp.CheckDebuggerStatement",
118:       "com.google.common.collect.SingletonImmutableMap",
119:       "com.google.javascript.jscomp.CleanupPasses",
120:       "com.google.javascript.rhino.head.ast.XmlFragment",
121:       "com.google.javascript.rhino.jstype.ProxyObjectType",
122:       "com.google.javascript.jscomp.CompilerOptions$Reach",
123:       "com.google.javascript.rhino.head.ast.CatchClause",
124:       "com.google.javascript.jscomp.PassConfig$State",
125:       "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
126:       "com.google.javascript.rhino.InputId",
127:       "com.google.common.collect.RegularImmutableMap$LinkedEntry",
128:       "com.google.common.collect.Lists$Partition",
129:       "com.google.javascript.rhino.head.ast.AstRoot",
130:       "com.google.javascript.rhino.head.ast.NewExpression",
131:       "com.google.javascript.rhino.ErrorReporter",
132:       "com.google.javascript.rhino.jstype.ValueType",
133:       "com.google.javascript.rhino.Token",
134:       "com.google.javascript.rhino.head.ast.ParenthesizedExpression",
135:       "com.google.javascript.jscomp.VerboseMessageFormatter",
136:       "com.google.javascript.rhino.jstype.BooleanType",
137:       "com.google.javascript.jscomp.CssRenamingMap",
138:       "com.google.javascript.rhino.head.Context$ClassShutterSetter",
139:       "com.google.common.base.CharMatcher$5",
140:       "com.google.common.base.CharMatcher$4",
141:       "com.google.common.base.CharMatcher$3",
142:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$ContextualRenamer",
143:       "com.google.common.base.CharMatcher$2",
144:       "com.google.common.base.CharMatcher$9",
145:       "com.google.common.base.CharMatcher$8",
146:       "com.google.common.base.CharMatcher$7",
147:       "com.google.javascript.rhino.head.ast.Label",
148:       "com.google.common.base.CharMatcher$6",
149:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
150:       "com.google.javascript.jscomp.SuppressDocWarningsGuard",
151:       "com.google.javascript.jscomp.MessageFormatter",
152:       "com.google.javascript.rhino.JSDocInfo",
153:       "com.google.javascript.jscomp.SourceExcerptProvider$ExcerptFormatter",
154:       "com.google.common.base.CharMatcher$1",
155:       "com.google.javascript.jscomp.parsing.Config",
156:       "com.google.common.collect.EmptyImmutableList",
157:       "com.google.common.collect.ImmutableEntry",
158:       "com.google.javascript.rhino.head.CompilerEnvirons",
159:       "com.google.common.base.Joiner$1",
160:       "com.google.common.base.Joiner$2",
161:       "com.google.javascript.jscomp.ErrorHandler",
162:       "com.google.javascript.rhino.head.Callable",
163:       "com.google.javascript.jscomp.GoogleCodingConvention",
164:       "com.google.javascript.jscomp.SourceFile$Preloaded",
165:       "com.google.common.collect.ImmutableCollection",
166:       "com.google.javascript.rhino.ScriptRuntime",
167:       "com.google.javascript.rhino.head.ast.ScriptNode",
168:       "com.google.javascript.rhino.head.ast.XmlString",
169:       "com.google.javascript.jscomp.StrictModeCheck",
170:       "com.google.javascript.rhino.head.ast.WhileLoop",
171:       "com.google.javascript.jscomp.DefinitionsRemover$Definition",
172:       "com.google.javascript.jscomp.Result",
173:       "com.google.javascript.jscomp.CodingConventions$1",
174:       "com.google.javascript.jscomp.CodingConvention$ObjectLiteralCast",
175:       "com.google.javascript.jscomp.CodingConvention$SubclassRelationship",
176:       "com.google.javascript.jscomp.CompilerPass",
177:       "com.google.javascript.rhino.jstype.EnumElementType",
178:       "com.google.javascript.jscomp.NodeUtil$MatchDeclaration",
179:       "com.google.javascript.jscomp.NodeUtil$VarCollector",
180:       "com.google.javascript.jscomp.VariableRenamingPolicy",
181:       "com.google.javascript.rhino.head.ast.IfStatement",
182:       "com.google.javascript.jscomp.CodeChangeHandler",
183:       "com.google.common.collect.Lists$AbstractListWrapper",
184:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$Renamer",
185:       "com.google.javascript.jscomp.FunctionTypeBuilder",
186:       "com.google.javascript.jscomp.FunctionInformationMap",
187:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
188:       "com.google.common.collect.AbstractMapBasedMultiset",
189:       "com.google.javascript.jscomp.NodeUtil$MayBeStringResultPredicate",
190:       "com.google.javascript.rhino.jstype.EnumType",
191:       "com.google.javascript.jscomp.JsMessageVisitor$MalformedException",
192:       "com.google.javascript.rhino.head.Evaluator",
193:       "com.google.javascript.jscomp.CodingConventions$DefaultCodingConvention",
194:       "com.google.common.base.CharMatcher$LookupTable",
195:       "com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection",
196:       "com.google.javascript.rhino.head.ast.XmlElemRef",
197:       "com.google.javascript.rhino.head.ast.VariableDeclaration",
198:       "com.google.javascript.rhino.head.TokenStream",
199:       "com.google.common.collect.RegularImmutableList$1",
200:       "com.google.javascript.rhino.head.ast.ObjectLiteral",
201:       "com.google.common.collect.Lists$2",
202:       "com.google.javascript.jscomp.JSSourceFile",
203:       "com.google.javascript.jscomp.CodingConventions",
204:       "com.google.common.collect.Lists$1",
205:       "com.google.javascript.rhino.jstype.StaticReference",
206:       "com.google.common.collect.Multiset",
207:       "com.google.javascript.rhino.head.ast.InfixExpression",
208:       "com.google.javascript.rhino.head.BaseFunction",
209:       "com.google.common.base.Supplier",
210:       "com.google.javascript.jscomp.FindExportableNodes",
211:       "com.google.protobuf.MessageOrBuilder",
212:       "com.google.javascript.jscomp.GlobalVarReferenceMap",
213:       "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
214:       "com.google.javascript.rhino.head.ast.XmlPropRef",
215:       "com.google.javascript.jscomp.TypeValidator",
216:       "com.google.common.collect.ImmutableList",
217:       "com.google.protobuf.GeneratedMessage",
218:       "com.google.javascript.rhino.Node$AbstractPropListItem",
219:       "com.google.javascript.rhino.jstype.ObjectType$Property",
220:       "com.google.javascript.jscomp.Tracer$InternalClock",
221:       "com.google.common.collect.AbstractMultimap$KeySet",
222:       "com.google.javascript.jscomp.SourceMap$LocationMapping",
223:       "com.google.javascript.rhino.head.ast.VariableInitializer",
224:       "com.google.javascript.rhino.jstype.NoResolvedType",
225:       "com.google.javascript.rhino.head.ast.ThrowStatement",
226:       "com.google.protobuf.MessageLiteOrBuilder",
227:       "com.google.javascript.jscomp.NodeTraversal$AbstractNodeTypePruningCallback",
228:       "com.google.javascript.jscomp.DefaultPassConfig$99",
229:       "com.google.protobuf.MessageLite",
230:       "com.google.javascript.jscomp.DefaultPassConfig$98",
231:       "com.google.common.collect.Maps$EntryTransformer",
232:       "com.google.javascript.jscomp.DefaultPassConfig$95",
233:       "com.google.javascript.jscomp.DefaultPassConfig$94",
234:       "com.google.javascript.jscomp.DefaultPassConfig$96",
235:       "com.google.javascript.jscomp.CustomPassExecutionTime",
236:       "com.google.javascript.jscomp.DefaultPassConfig$91",
237:       "com.google.javascript.jscomp.SyntacticScopeCreator",
238:       "com.google.javascript.jscomp.DefaultPassConfig$90",
239:       "com.google.javascript.jscomp.DefaultPassConfig$93",
240:       "com.google.javascript.jscomp.DefaultPassConfig$92",
241:       "com.google.javascript.rhino.head.debug.DebuggableScript",
242:       "com.google.javascript.jscomp.CompilerOptions$TweakProcessing",
243:       "com.google.common.collect.Hashing",
244:       "com.google.javascript.rhino.head.DefaultErrorReporter",
245:       "com.google.javascript.rhino.jstype.NoType",
246:       "com.google.javascript.jscomp.SourceMap$Format",
247:       "com.google.javascript.rhino.head.Script",
248:       "com.google.common.collect.AbstractMultimap$WrappedCollection",
249:       "com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider",
250:       "com.google.javascript.rhino.TokenStream",
251:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
252:       "com.google.javascript.jscomp.DefaultPassConfig$88",
253:       "com.google.javascript.jscomp.DefaultPassConfig$87",
254:       "com.google.javascript.jscomp.DefaultPassConfig$89",
255:       "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments",
256:       "com.google.javascript.rhino.head.ast.Comment",
257:       "com.google.javascript.jscomp.DefaultPassConfig$84",
258:       "com.google.javascript.jscomp.DefaultPassConfig$83",
259:       "com.google.javascript.jscomp.DefaultPassConfig$86",
260:       "com.google.javascript.jscomp.DefaultPassConfig$85",
261:       "com.google.javascript.jscomp.CodingConventions$Proxy",
262:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt",
263:       "com.google.javascript.jscomp.DefaultPassConfig$80",
264:       "com.google.javascript.jscomp.StatementFusion",
265:       "com.google.javascript.jscomp.DefaultPassConfig$82",
266:       "com.google.javascript.jscomp.DefaultPassConfig$81",
267:       "com.google.common.collect.LinkedHashMultimap",
268:       "com.google.javascript.rhino.head.optimizer.Codegen",
269:       "com.google.javascript.rhino.head.ast.FunctionCall",
270:       "com.google.javascript.jscomp.RhinoErrorReporter$NewRhinoErrorReporter",
271:       "com.google.javascript.jscomp.NodeUtil",
272:       "com.google.common.collect.RegularImmutableSet",
273:       "com.google.javascript.jscomp.JsMessageVisitor",
274:       "com.google.javascript.jscomp.DefaultPassConfig$77",
275:       "com.google.javascript.jscomp.DefaultPassConfig$76",
276:       "com.google.javascript.jscomp.DefaultPassConfig$79",
277:       "com.google.javascript.jscomp.DefaultPassConfig$78",
278:       "com.google.javascript.jscomp.DefaultPassConfig$73",
279:       "com.google.javascript.jscomp.DefaultPassConfig$72",
280:       "com.google.javascript.rhino.head.EcmaError",
281:       "com.google.javascript.rhino.head.FunctionObject",
282:       "com.google.javascript.jscomp.DefaultPassConfig$75",
283:       "com.google.javascript.jscomp.DefaultPassConfig$74",
284:       "com.google.javascript.jscomp.DefaultPassConfig$71",
285:       "com.google.javascript.jscomp.DefaultPassConfig$70",
286:       "com.google.javascript.rhino.head.NativeContinuation",
287:       "com.google.javascript.rhino.head.xml.XMLObject",
288:       "com.google.javascript.rhino.head.Node$NodeIterator",
289:       "com.google.common.collect.ImmutableAsList",
290:       "com.google.javascript.jscomp.PassConfig",
291:       "com.google.common.collect.SingletonImmutableSet",
292:       "com.google.javascript.jscomp.Normalize$NormalizeStatements",
293:       "com.google.javascript.jscomp.AbstractMessageFormatter$Color",
294:       "com.google.javascript.jscomp.DefaultPassConfig$69",
295:       "com.google.javascript.rhino.head.InterpretedFunction",
296:       "com.google.javascript.jscomp.DefaultPassConfig$66",
297:       "com.google.javascript.jscomp.DefaultPassConfig$65",
298:       "com.google.javascript.jscomp.DefaultPassConfig$68",
299:       "com.google.javascript.jscomp.DefaultPassConfig$67",
300:       "com.google.javascript.rhino.jstype.ParameterizedType",
301:       "com.google.javascript.jscomp.DefaultPassConfig$62",
302:       "com.google.javascript.jscomp.DefaultPassConfig$61",
303:       "com.google.javascript.rhino.Node$SideEffectFlags",
304:       "com.google.javascript.jscomp.DefaultPassConfig$64",
305:       "com.google.javascript.jscomp.ReferenceCollectingCallback",
306:       "com.google.javascript.jscomp.DefaultPassConfig$63",
307:       "com.google.javascript.jscomp.DefaultPassConfig$60",
308:       "com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceMap",
309:       "com.google.javascript.rhino.jstype.NullType",
310:       "com.google.javascript.jscomp.LightweightMessageFormatter",
311:       "com.google.common.collect.EmptyImmutableList$1",
312:       "com.google.javascript.jscomp.FunctionInformationMapOrBuilder",
313:       "com.google.javascript.jscomp.Compiler$CodeBuilder",
314:       "com.google.javascript.jscomp.DefaultPassConfig$HotSwapPassFactory",
315:       "com.google.javascript.jscomp.InlineSimpleMethods$1",
316:       "com.google.javascript.rhino.jstype.NoObjectType",
317:       "com.google.common.collect.AbstractIterator",
318:       "com.google.javascript.rhino.head.ScriptableObject$GetterSlot",
319:       "com.google.javascript.jscomp.BasicErrorManager$ErrorWithLevel",
320:       "com.google.common.base.CharMatcher$And",
321:       "com.google.javascript.jscomp.DiagnosticType",
322:       "com.google.javascript.jscomp.DefaultPassConfig$59",
323:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler$NullAliasTransformation",
324:       "com.google.javascript.jscomp.DefaultPassConfig$58",
325:       "com.google.javascript.jscomp.graph.DiGraph$DiGraphNode",
326:       "com.google.javascript.jscomp.PrepareAst",
327:       "com.google.javascript.rhino.head.ast.ForLoop",
328:       "com.google.javascript.jscomp.DefaultPassConfig$55",
329:       "com.google.javascript.jscomp.DefaultPassConfig$54",
330:       "com.google.javascript.jscomp.DefaultPassConfig$57",
331:       "com.google.common.io.OutputSupplier",
332:       "com.google.javascript.jscomp.DefaultPassConfig$56",
333:       "com.google.javascript.jscomp.DefaultPassConfig$51",
334:       "com.google.javascript.jscomp.DefaultPassConfig$50",
335:       "com.google.javascript.jscomp.CompilerInput",
336:       "com.google.javascript.jscomp.DefaultPassConfig$53",
337:       "com.google.javascript.rhino.head.ast.FunctionNode",
338:       "com.google.javascript.jscomp.DefaultPassConfig$52",
339:       "com.google.javascript.jscomp.AbstractCompiler",
340:       "com.google.common.collect.UnmodifiableIterator",
341:       "com.google.javascript.jscomp.ExploitAssigns",
342:       "com.google.javascript.rhino.head.Context",
343:       "com.google.common.io.InputSupplier",
344:       "com.google.common.collect.ImmutableSet$TransformedImmutableSet",
345:       "com.google.javascript.jscomp.DiagnosticGroup",
346:       "com.google.common.collect.AbstractMultimap$WrappedList",
347:       "com.google.javascript.jscomp.CodeChangeHandler$RecentChange",
348:       "com.google.javascript.jscomp.NodeUtil$Visitor",
349:       "com.google.javascript.jscomp.SyntacticScopeCreator$RedeclarationHandler",
350:       "com.google.javascript.rhino.head.NativeBoolean",
351:       "com.google.javascript.jscomp.DefaultPassConfig$48",
352:       "com.google.javascript.rhino.Node$AncestorIterable",
353:       "com.google.common.collect.AbstractMultimap$RandomAccessWrappedList",
354:       "com.google.javascript.rhino.head.ast.Name",
355:       "com.google.javascript.jscomp.DefaultPassConfig$47",
356:       "com.google.common.collect.ImmutableEnumSet",
357:       "com.google.javascript.jscomp.DefaultPassConfig$49",
358:       "com.google.javascript.jscomp.DefaultPassConfig$44",
359:       "com.google.javascript.jscomp.DefaultPassConfig$43",
360:       "com.google.javascript.jscomp.DefaultPassConfig$46",
361:       "com.google.javascript.jscomp.DefaultPassConfig$45",
362:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax$1",
363:       "com.google.javascript.jscomp.DefaultPassConfig$40",
364:       "com.google.common.collect.HashMultiset",
365:       "com.google.javascript.rhino.jstype.UnresolvedTypeExpression",
366:       "com.google.javascript.jscomp.DefaultPassConfig$42",
367:       "com.google.javascript.jscomp.DefaultPassConfig$41",
368:       "com.google.protobuf.AbstractMessageLite",
369:       "com.google.javascript.jscomp.ErrorManager",
370:       "com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate",
371:       "com.google.common.collect.SingletonImmutableList",
372:       "com.google.javascript.rhino.head.ast.ConditionalExpression",
373:       "com.google.javascript.jscomp.CheckLevel",
374:       "com.google.javascript.rhino.jstype.StaticSlot",
375:       "com.google.javascript.rhino.head.ast.PropertyGet",
376:       "com.google.common.collect.AbstractSetMultimap",
377:       "com.google.javascript.rhino.head.ContextFactory",
378:       "com.google.common.base.Function",
379:       "com.google.javascript.rhino.head.VMBridge",
380:       "com.google.common.collect.ImmutableMap",
381:       "com.google.javascript.jscomp.CodeChangeHandler$ForbiddenChange",
382:       "com.google.common.collect.Multiset$Entry",
383:       "com.google.javascript.jscomp.DefaultPassConfig$37",
384:       "com.google.javascript.jscomp.DefaultPassConfig$36",
385:       "com.google.javascript.jscomp.DefaultPassConfig$39",
386:       "com.google.javascript.jscomp.DefaultPassConfig$38",
387:       "com.google.javascript.jscomp.DefaultPassConfig$33",
388:       "com.google.javascript.jscomp.DefaultPassConfig$32",
389:       "com.google.javascript.jscomp.DefaultPassConfig$35",
390:       "com.google.javascript.jscomp.InlineSimpleMethods",
391:       "com.google.javascript.jscomp.DefaultPassConfig$34",
392:       "com.google.javascript.rhino.head.ast.Loop",
393:       "com.google.javascript.jscomp.DefaultPassConfig$31",
394:       "com.google.javascript.jscomp.CrossModuleMethodMotion$IdGenerator",
395:       "com.google.javascript.jscomp.Region",
396:       "com.google.javascript.jscomp.DefaultPassConfig$30",
397:       "com.google.javascript.jscomp.MethodCompilerPass$SignatureStore",
398:       "com.google.javascript.rhino.IR",
399:       "com.google.javascript.rhino.head.ast.GeneratorExpressionLoop",
400:       "com.google.javascript.jscomp.NodeTraversal$AbstractPostOrderCallback",
401:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
402:       "com.google.javascript.jscomp.DefaultPassConfig",
403:       "com.google.javascript.jscomp.Normalize",
404:       "com.google.javascript.jscomp.CompilerOptions$TracerMode",
405:       "com.google.javascript.jscomp.RhinoErrorReporter$OldRhinoErrorReporter",
406:       "com.google.javascript.jscomp.DefinitionProvider",
407:       "com.google.javascript.jscomp.ReferenceCollectingCallback$1",
408:       "com.google.common.collect.AbstractMultiset",
409:       "com.google.javascript.jscomp.DefaultPassConfig$29",
410:       "com.google.javascript.jscomp.DefaultPassConfig$26",
411:       "com.google.javascript.jscomp.DefaultPassConfig$25",
412:       "com.google.common.collect.Iterators",
413:       "com.google.javascript.jscomp.DefaultPassConfig$28",
414:       "com.google.javascript.rhino.head.IdFunctionCall",
415:       "com.google.javascript.jscomp.DefaultPassConfig$27",
416:       "com.google.javascript.jscomp.DefaultPassConfig$22",
417:       "com.google.javascript.jscomp.DefaultPassConfig$21",
418:       "com.google.javascript.jscomp.DefaultPassConfig$24",
419:       "com.google.javascript.jscomp.DefaultPassConfig$23",
420:       "com.google.javascript.jscomp.ProcessTweaks$TweakFunction",
421:       "com.google.javascript.rhino.head.ast.SwitchStatement",
422:       "com.google.javascript.jscomp.DependencyOptions",
423:       "com.google.common.collect.Multisets$EntrySet",
424:       "com.google.javascript.jscomp.DefaultPassConfig$20",
425:       "com.google.javascript.rhino.head.ast.DoLoop",
426:       "com.google.javascript.jscomp.SourceFile$OnDisk",
427:       "com.google.javascript.rhino.head.ScriptRuntime",
428:       "com.google.javascript.jscomp.DefaultPassConfig$19",
429:       "com.google.javascript.jscomp.DefaultPassConfig$18",
430:       "com.google.javascript.rhino.jstype.JSTypeNative",
431:       "com.google.javascript.rhino.jstype.AllType",
432:       "com.google.javascript.jscomp.DefaultPassConfig$15",
433:       "com.google.common.collect.Maps",
434:       "com.google.common.primitives.Ints",
435:       "com.google.javascript.jscomp.DefaultPassConfig$14",
436:       "com.google.javascript.jscomp.NodeTraversal$AbstractShallowStatementCallback",
437:       "com.google.common.collect.SetMultimap",
438:       "com.google.javascript.rhino.head.ast.ExpressionStatement",
439:       "com.google.javascript.jscomp.DefaultPassConfig$17",
440:       "com.google.javascript.jscomp.DefaultPassConfig$16",
441:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
442:       "com.google.javascript.jscomp.DefaultPassConfig$7",
443:       "com.google.javascript.jscomp.DefaultPassConfig$11",
444:       "com.google.javascript.jscomp.DefaultPassConfig$8",
445:       "com.google.javascript.jscomp.DefaultPassConfig$10",
446:       "com.google.javascript.jscomp.DefaultPassConfig$5",
447:       "com.google.javascript.jscomp.DefaultPassConfig$13",
448:       "com.google.javascript.jscomp.DefaultPassConfig$6",
449:       "com.google.javascript.jscomp.DefaultPassConfig$12",
450:       "com.google.javascript.rhino.JSTypeExpression",
451:       "com.google.javascript.jscomp.DefaultPassConfig$9",
452:       "com.google.javascript.jscomp.PrintStreamErrorManager",
453:       "com.google.javascript.jscomp.Tracer$Stat",
454:       "com.google.javascript.rhino.head.ScriptableObject",
455:       "com.google.javascript.rhino.head.IdScriptableObject",
456:       "com.google.javascript.rhino.head.NativeFunction",
457:       "com.google.common.collect.RegularImmutableMap$Values",
458:       "com.google.javascript.jscomp.DefaultPassConfig$3",
459:       "com.google.javascript.jscomp.DefaultPassConfig$4",
460:       "com.google.javascript.jscomp.DefaultPassConfig$1",
461:       "com.google.javascript.jscomp.DefaultPassConfig$2",
462:       "com.google.javascript.rhino.head.ast.ObjectProperty",
463:       "com.google.javascript.rhino.head.Icode",
464:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
465:       "com.google.javascript.jscomp.type.ReverseAbstractInterpreter",
466:       "com.google.javascript.jscomp.CompilerOptions$LanguageMode",
467:       "com.google.javascript.rhino.head.ast.UnaryExpression",
468:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
469:       "com.google.javascript.rhino.jstype.ArrowType",
470:       "com.google.javascript.rhino.SimpleErrorReporter",
471:       "com.google.common.collect.Lists$RandomAccessPartition",
472:       "com.google.javascript.rhino.head.WrappedException",
473:       "com.google.javascript.jscomp.graph.GraphNode",
474:       "com.google.javascript.rhino.jstype.NumberType",
475:       "com.google.javascript.rhino.head.debug.DebuggableObject",
476:       "com.google.javascript.rhino.head.Function",
477:       "com.google.javascript.jscomp.PassFactory",
478:       "com.google.common.collect.Sets$2",
479:       "com.google.javascript.rhino.Node$IntPropListItem",
480:       "com.google.common.collect.Sets$3",
481:       "com.google.javascript.rhino.head.ast.LetNode",
482:       "com.google.common.collect.Sets$1",
483:       "com.google.javascript.jscomp.parsing.IRFactory$1",
484:       "com.google.javascript.jscomp.ControlFlowGraph",
485:       "com.google.javascript.jscomp.graph.GraphvizGraph",
486:       "com.google.javascript.rhino.head.ContextFactory$Listener",
487:       "com.google.javascript.rhino.head.NativeCall",
488:       "com.google.javascript.rhino.jstype.ModificationVisitor",
489:       "com.google.common.collect.AbstractMapEntry",
490:       "com.google.javascript.rhino.Node$AncestorIterable$1",
491:       "com.google.common.collect.Iterators$12",
492:       "com.google.common.collect.Iterators$11",
493:       "com.google.javascript.jscomp.ClosureCodingConvention",
494:       "com.google.common.base.Predicate",
495:       "com.google.common.collect.AbstractMultimap$AsMap",
496:       "com.google.javascript.jscomp.ControlStructureCheck",
497:       "com.google.javascript.jscomp.VariableReferenceCheck",
498:       "com.google.javascript.jscomp.WarningsGuard",
499:       "com.google.javascript.jscomp.SourceMap",
500:       "com.google.javascript.rhino.head.ast.ForInLoop",
501:       "com.google.javascript.jscomp.Tracer$AtomicTracerStatMap",
502:       "com.google.javascript.jscomp.Normalize$ScopeTicklingCallback",
503:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
504:       "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
505:       "com.google.javascript.jscomp.LightweightMessageFormatter$LineNumberingFormatter",
506:       "com.google.common.collect.AbstractListMultimap",
507:       "com.google.javascript.jscomp.CompilerOptions",
508:       "com.google.javascript.rhino.Node$StringNode",
509:       "com.google.javascript.rhino.jstype.TemplateType",
510:       "com.google.javascript.rhino.jstype.NamedType",
511:       "com.google.common.collect.Iterators$14",
512:       "com.google.common.collect.Iterators$13",
513:       "com.google.common.collect.Lists",
514:       "com.google.javascript.jscomp.CheckProvides",
515:       "com.google.javascript.rhino.head.ast.Block",
516:       "com.google.common.collect.UnmodifiableListIterator",
517:       "com.google.javascript.rhino.head.ast.SwitchCase",
518:       "com.google.common.io.ByteArrayDataInput",
519:       "com.google.javascript.jscomp.RhinoErrorReporter",
520:       "com.google.javascript.jscomp.CompilerOptions$AliasTransformation",
521:       "com.google.javascript.rhino.jstype.UnknownType",
522:       "com.google.common.base.Charsets",
523:       "com.google.javascript.rhino.head.ast.StringLiteral",
524:       "com.google.javascript.jscomp.CheckGlobalNames",
525:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
526:       "com.google.javascript.rhino.jstype.StaticSourceFile",
527:       "org.mozilla.classfile.ClassFileWriter$ClassFileFormatException",
528:       "com.google.javascript.rhino.head.ScriptableObject$Slot",
529:       "com.google.javascript.rhino.head.ast.ReturnStatement",
530:       "com.google.common.base.CharMatcher",
531:       "com.google.javascript.rhino.jstype.JSType$TypePair",
532:       "com.google.common.base.Joiner$MapJoiner",
533:       "com.google.javascript.jscomp.CheckRegExp",
534:       "com.google.javascript.jscomp.CheckGlobalThis",
535:       "com.google.common.collect.RegularImmutableMap$NonTerminalEntry",
536:       "com.google.common.collect.AbstractMultiset$EntrySet",
537:       "com.google.javascript.jscomp.UnreachableCodeElimination",
538:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt$2",
539:       "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
540:       "com.google.common.base.Preconditions",
541:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt$1",
542:       "com.google.javascript.rhino.head.ast.ArrayLiteral",
543:       "com.google.javascript.rhino.head.ast.RegExpLiteral",
544:       "com.google.javascript.jscomp.BasicErrorManager",
545:       "com.google.javascript.jscomp.SourceFile$Generator",
546:       "com.google.javascript.jscomp.PerformanceTracker",
547:       "com.google.javascript.rhino.jstype.IndexedType",
548:       "com.google.javascript.jscomp.NodeUtil$MatchNodeType",
549:       "com.google.javascript.jscomp.ComposeWarningsGuard$GuardComparator",
550:       "com.google.javascript.jscomp.ProcessDefines",
551:       "com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph",
552:       "com.google.javascript.rhino.head.NativeArray",
553:       "com.google.javascript.rhino.Node$NumberNode",
554:       "com.google.javascript.jscomp.Scope",
555:       "com.google.common.io.ByteArrayDataOutput",
556:       "com.google.javascript.rhino.head.Parser",
557:       "com.google.javascript.jscomp.ErrorFormat$2",
558:       "com.google.common.collect.Iterators$6",
559:       "com.google.javascript.jscomp.ReferenceCollectingCallback$Reference",
560:       "com.google.javascript.jscomp.ErrorFormat$3",
561:       "com.google.common.collect.BiMap",
562:       "com.google.common.collect.Iterators$7",
563:       "com.google.javascript.rhino.head.NativeString",
564:       "com.google.javascript.jscomp.ErrorFormat$4",
565:       "com.google.javascript.rhino.head.ast.XmlRef",
566:       "com.google.common.collect.ImmutableSet",
567:       "com.google.javascript.jscomp.PeepholeReplaceKnownMethods",
568:       "com.google.javascript.jscomp.AbstractPeepholeOptimization",
569:       "com.google.javascript.rhino.jstype.JSTypeRegistry$ResolveMode",
570:       "com.google.javascript.rhino.head.ast.ElementGet",
571:       "com.google.common.collect.Iterators$1",
572:       "com.google.javascript.jscomp.DisambiguateProperties$Warnings",
573:       "com.google.common.collect.Iterators$2",
574:       "com.google.common.collect.Iterators$3",
575:       "com.google.javascript.jscomp.parsing.Annotation",
576:       "com.google.javascript.jscomp.AbstractMessageFormatter",
577:       "com.google.javascript.jscomp.DefinitionSite",
578:       "com.google.common.collect.Lists$StringAsImmutableList",
579:       "com.google.javascript.rhino.head.JavaScriptException",
580:       "com.google.javascript.rhino.head.ast.IdeErrorReporter",
581:       "com.google.javascript.jscomp.ProcessTweaks",
582:       "com.google.javascript.jscomp.NodeUtil$1",
583:       "com.google.javascript.rhino.head.ast.TryStatement",
584:       "com.google.javascript.jscomp.parsing.IRFactory",
585:       "com.google.javascript.jscomp.ErrorFormat$1",
586:       "com.google.javascript.rhino.head.TopLevel",
587:       "com.google.javascript.jscomp.Compiler$3",
588:       "com.google.javascript.jscomp.PrepareAst$PrepareAnnotations",
589:       "com.google.common.collect.AbstractMultimap",
590:       "com.google.common.base.Predicates$ObjectPredicate$1",
591:       "com.google.common.collect.EmptyImmutableSet",
592:       "com.google.javascript.jscomp.UseSite",
593:       "com.google.common.io.Files",
594:       "com.google.javascript.jscomp.NodeUtil$MatchNotFunction",
595:       "com.google.javascript.jscomp.parsing.Config$LanguageMode",
596:       "com.google.javascript.rhino.head.ast.ArrayComprehension",
597:       "com.google.javascript.jscomp.OptimizeCalls$CallGraphCompilerPass",
598:       "com.google.protobuf.AbstractMessage",
599:       "com.google.javascript.jscomp.CodingConvention$Bind",
600:       "com.google.javascript.rhino.head.ScriptRuntime$1",
601:       "com.google.javascript.jscomp.PassFactory$1",
602:       "com.google.javascript.rhino.head.ObjToIntMap",
603:       "com.google.javascript.jscomp.PeepholeRemoveDeadCode",
604:       "com.google.common.collect.ImmutableMap$Builder",
605:       "com.google.javascript.rhino.head.ConstProperties",
606:       "com.google.javascript.jscomp.deps.SortedDependencies$MissingProvideException",
607:       "com.google.common.base.Predicates$ObjectPredicate$4",
608:       "com.google.javascript.jscomp.ReorderConstantExpression",
609:       "com.google.common.base.Predicates$ObjectPredicate$3",
610:       "com.google.common.base.Predicates$ObjectPredicate$2",
611:       "com.google.javascript.jscomp.NodeUtil$MatchNameNode",
612:       "com.google.common.collect.ListMultimap",
613:       "com.google.javascript.rhino.JSDocInfo$Visibility",
614:       "com.google.javascript.rhino.head.ast.DestructuringForm",
615:       "com.google.javascript.jscomp.MethodCompilerPass",
616:       "com.google.javascript.jscomp.SourceMap$Format$4",
617:       "com.google.javascript.jscomp.SourceMap$Format$3",
618:       "com.google.javascript.jscomp.SourceMap$Format$2",
619:       "com.google.javascript.jscomp.SourceMap$Format$1",
620:       "com.google.javascript.jscomp.SourceAst",
621:       "com.google.javascript.rhino.jstype.TernaryValue$1",
622:       "com.google.common.base.Predicates$ObjectPredicate",
623:       "com.google.common.collect.RegularImmutableList",
624:       "com.google.javascript.jscomp.MessageBundle",
625:       "com.google.javascript.rhino.jstype.TernaryValue$3",
626:       "com.google.javascript.rhino.jstype.TernaryValue$2",
627:       "com.google.javascript.jscomp.CheckUnreachableCode",
628:       "com.google.javascript.jscomp.SourceExcerptProvider",
629:       "com.google.javascript.jscomp.ReferenceCollectingCallback$Behavior",
630:       "com.google.common.collect.Lists$TransformingRandomAccessList",
631:       "com.google.javascript.rhino.head.ScriptableObject$RelinkedSlot",
632:       "com.google.javascript.rhino.Node$PropListItem",
633:       "com.google.common.collect.RegularImmutableMap$KeySet",
634:       "com.google.common.collect.Maps$KeySet",
635:       "com.google.javascript.rhino.Node",
636:       "com.google.javascript.rhino.head.RhinoException",
637:       "com.google.javascript.rhino.head.ast.EmptyExpression",
638:       "com.google.javascript.rhino.head.ast.XmlLiteral",
639:       "com.google.javascript.rhino.head.ast.ContinueStatement",
640:       "com.google.javascript.jscomp.LoggerErrorManager",
641:       "com.google.javascript.jscomp.NodeTraversal",
642:       "com.google.javascript.jscomp.ComposeWarningsGuard",
643:       "com.google.javascript.jscomp.NodeTraversal$AbstractScopedCallback",
644:       "com.google.javascript.rhino.head.ErrorReporter",
645:       "com.google.common.collect.Multisets",
646:       "com.google.javascript.jscomp.VariableMap",
647:       "com.google.javascript.jscomp.JsAst",
648:       "com.google.javascript.rhino.head.ast.XmlMemberGet",
649:       "com.google.javascript.jscomp.ErrorFormat",
650:       "com.google.javascript.rhino.head.ast.Scope",
651:       "com.google.javascript.jscomp.AbstractCompiler$LifeCycleStage",
652:       "com.google.javascript.rhino.head.Scriptable",
653:       "com.google.javascript.jscomp.JqueryCodingConvention",
654:       "com.google.common.io.ByteStreams",
655:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
656:       "com.google.javascript.jscomp.NodeUtil$BooleanResultPredicate",
657:       "com.google.javascript.jscomp.SourceMap$1",
658:       "com.google.javascript.rhino.jstype.VoidType",
659:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler",
660:       "com.google.javascript.rhino.jstype.JSType",
661:       "com.google.common.io.ByteProcessor",
662:       "com.google.javascript.jscomp.ControlFlowGraph$Branch",
663:       "com.google.common.collect.Sets$SetView",
664:       "com.google.javascript.jscomp.SyntheticAst",
665:       "com.google.javascript.jscomp.DiagnosticGroups",
666:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
667:       "com.google.javascript.jscomp.ScopeCreator",
668:       "com.google.common.collect.RegularImmutableMap$TerminalEntry",
669:       "com.google.common.base.Predicates",
670:       "com.google.javascript.jscomp.graph.AdjacencyGraph",
671:       "com.google.javascript.jscomp.deps.SortedDependencies$CircularDependencyException",
672:       "com.google.common.collect.Lists$TransformingSequentialList",
673:       "com.google.javascript.rhino.head.NativeNumber",
674:       "com.google.javascript.jscomp.SourceFile",
675:       "com.google.javascript.rhino.head.ast.BreakStatement",
676:       "com.google.javascript.jscomp.PropertyRenamingPolicy",
677:       "com.google.javascript.jscomp.Normalize$1",
678:       "com.google.javascript.rhino.jstype.FunctionBuilder",
679:       "com.google.javascript.jscomp.CodingConvention$DelegateRelationship",
680:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax$FoldArrayAction",
681:       "com.google.javascript.rhino.head.ast.WithStatement",
682:       "com.google.javascript.rhino.head.ScriptRuntime$MessageProvider",
683:       "com.google.common.collect.MapDifference",
684:       "com.google.javascript.jscomp.CompilerOptions$AliasTransformationHandler",
685:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
686:       "com.google.javascript.jscomp.SourceFile$Generated",
687:       "com.google.javascript.rhino.jstype.FunctionType",
688:       "com.google.javascript.rhino.head.ast.AstNode",
689:       "com.google.javascript.jscomp.Compiler",
690:       "com.google.javascript.jscomp.Normalize$DuplicateDeclarationHandler",
691:       "com.google.javascript.jscomp.NodeTraversal$ScopedCallback",
692:       "com.google.javascript.jscomp.TypedScopeCreator",
693:       "com.google.common.base.CharMatcher$12",
694:       "com.google.common.base.CharMatcher$11",
695:       "com.google.javascript.rhino.head.Node",
696:       "com.google.common.base.CharMatcher$10",
697:       "com.google.javascript.rhino.jstype.TernaryValue",
698:       "com.google.common.io.Files$1",
699:       "com.google.javascript.jscomp.JSError",
700:       "com.google.javascript.jscomp.ReferenceCollectingCallback$BasicBlock",
701:       "com.google.common.base.CharMatcher$15",
702:       "com.google.common.base.CharMatcher$14",
703:       "com.google.common.collect.Lists$RandomAccessListWrapper",
704:       "com.google.common.base.CharMatcher$13",
705:       "com.google.common.base.Platform",
706:       "com.google.javascript.jscomp.TypedScopeCreator$GlobalScopeBuilder",
707:       "com.google.javascript.jscomp.PeepholeFoldWithTypes",
708:       "com.google.javascript.rhino.head.ast.KeywordLiteral",
709:       "com.google.javascript.jscomp.NodeTraversal$AbstractShallowCallback",
710:       "com.google.javascript.rhino.head.ast.Assignment",
711:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
712:       "com.google.javascript.rhino.jstype.UnionType",
713:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
714:       "com.google.javascript.rhino.head.ast.LabeledStatement",
715:       "com.google.javascript.jscomp.ControlFlowAnalysis",
716:       "com.google.common.collect.AbstractIndexedListIterator",
717:       "com.google.javascript.rhino.head.ast.XmlExpression",
718:       "com.google.javascript.jscomp.JSModuleGraph",
719:       "com.google.common.collect.AbstractMultimap$SortedKeySet",
720:       "com.google.javascript.jscomp.SyntacticScopeCreator$DefaultRedeclarationHandler",
721:       "com.google.common.collect.Sets",
722:       "com.google.common.collect.ImmutableCollection$EmptyImmutableCollection",
723:       "com.google.javascript.rhino.head.Kit",
724:       "com.google.javascript.jscomp.TypedScopeCreator$LocalScopeBuilder",
725:       "com.google.javascript.jscomp.BasicErrorManager$LeveledJSErrorComparator",
726:       "com.google.javascript.rhino.head.jdk15.VMBridge_jdk15",
727:       "com.google.javascript.rhino.Node$ObjectPropListItem",
728:       "com.google.javascript.rhino.head.ContextAction",
729:       "com.google.javascript.rhino.head.EvaluatorException",
730:       "com.google.javascript.jscomp.ProcessCommonJSModules",
731:       "com.google.javascript.rhino.head.ast.NumberLiteral",
732:       "com.google.common.collect.AbstractMultimap$SortedAsMap",
733:       "com.google.javascript.jscomp.Compiler$IntermediateState",
734:       "com.google.javascript.rhino.head.ast.ErrorNode",
735:       "com.google.common.collect.EmptyImmutableMap",
736:       "com.google.common.collect.Multimap",
737:       "com.google.javascript.jscomp.SourceMap$DetailLevel$2",
738:       "com.google.javascript.jscomp.SourceMap$DetailLevel$1",
739:       "com.google.javascript.jscomp.VarCheck",
740:       "com.google.javascript.jscomp.CompilerOptions$DevMode",
741:       "com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder",
742:       "com.google.javascript.rhino.head.Interpreter",
743:       "com.google.javascript.rhino.jstype.StringType",
744:       "com.google.javascript.rhino.head.ImporterTopLevel",
745:       "com.google.javascript.rhino.jstype.StaticSymbolTable",
746:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
747:       "com.google.javascript.jscomp.JSModuleGraph$ModuleDependenceException",
748:       "com.google.javascript.jscomp.graph.DiGraph",
749:       "com.google.common.base.Platform$1",
750:       "com.google.javascript.jscomp.parsing.ParserRunner",
751:       "com.google.common.collect.RegularImmutableMap$EntrySet",
752:       "com.google.javascript.rhino.head.ast.GeneratorExpression",
753:       "com.google.javascript.rhino.head.ast.XmlDotQuery",
754:       "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement",
755:       "com.google.javascript.jscomp.ConstCheck",
756:       "com.google.javascript.rhino.jstype.Visitor",
757:       "com.google.javascript.jscomp.TypeCheck",
758:       "com.google.javascript.jscomp.SymbolTable",
759:       "com.google.javascript.jscomp.deps.DependencyInfo",
760:       "com.google.javascript.jscomp.WarningsGuard$Priority",
761:       "com.google.javascript.jscomp.Compiler$10",
762:       "com.google.javascript.rhino.head.ContextFactory$GlobalSetter",
763:       "com.google.common.base.CharMatcher$Or",
764:       "com.google.javascript.rhino.head.ast.NodeVisitor",
765:       "com.google.protobuf.Message",
766:       "com.google.javascript.rhino.head.ast.ArrayComprehensionLoop",
767:       "com.google.javascript.rhino.head.Parser$ParserException",
768:       "com.google.javascript.rhino.head.NativeObject"
769:     );
770:   } 
771: 
772:   private static void resetClasses() {
773:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NodeUtil_175_tmp__ESTest_scaffolding.class.getClassLoader()); 
774: 
775:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
776:       "com.google.common.collect.ImmutableCollection$EmptyImmutableCollection",
777:       "com.google.common.collect.ImmutableCollection",
778:       "com.google.common.collect.ImmutableSet",
779:       "com.google.common.collect.Hashing",
780:       "com.google.common.collect.ImmutableSet$ArrayImmutableSet",
781:       "com.google.common.collect.RegularImmutableSet",
782:       "com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate",
783:       "com.google.javascript.jscomp.NodeUtil$BooleanResultPredicate",
784:       "com.google.javascript.jscomp.NodeUtil$MayBeStringResultPredicate",
785:       "com.google.javascript.jscomp.NodeUtil$MatchNotFunction",
786:       "com.google.javascript.jscomp.NodeUtil",
787:       "com.google.javascript.jscomp.NodeUtil$MatchNodeType",
788:       "com.google.javascript.jscomp.NodeUtil$MatchNameNode",
789:       "com.google.javascript.jscomp.NodeUtil$VarCollector",
790:       "com.google.javascript.rhino.jstype.TernaryValue",
791:       "com.google.common.base.Predicates$ObjectPredicate",
792:       "com.google.javascript.jscomp.DiagnosticType",
793:       "com.google.javascript.jscomp.AbstractCompiler",
794:       "com.google.javascript.jscomp.Compiler",
795:       "com.google.javascript.jscomp.AbstractCompiler$LifeCycleStage",
796:       "com.google.common.base.Joiner",
797:       "com.google.common.base.Preconditions",
798:       "com.google.common.collect.Collections2",
799:       "com.google.common.base.Joiner$MapJoiner",
800:       "com.google.common.collect.Maps",
801:       "com.google.javascript.jscomp.CodingConventions$Proxy",
802:       "com.google.javascript.jscomp.ClosureCodingConvention",
803:       "com.google.javascript.jscomp.CodingConventions",
804:       "com.google.javascript.jscomp.CodingConventions$DefaultCodingConvention",
805:       "com.google.common.collect.Sets",
806:       "com.google.common.collect.ImmutableList",
807:       "com.google.common.collect.UnmodifiableIterator",
808:       "com.google.common.collect.UnmodifiableListIterator",
809:       "com.google.common.collect.EmptyImmutableList$1",
810:       "com.google.common.collect.EmptyImmutableList",
811:       "com.google.common.collect.Iterators$1",
812:       "com.google.common.collect.Iterators$2",
813:       "com.google.common.collect.Iterators",
814:       "com.google.javascript.jscomp.RhinoErrorReporter",
815:       "com.google.javascript.jscomp.RhinoErrorReporter$OldRhinoErrorReporter",
816:       "com.google.javascript.rhino.head.Kit",
817:       "com.google.javascript.rhino.head.optimizer.Codegen",
818:       "com.google.javascript.rhino.head.Icode",
819:       "com.google.javascript.rhino.head.Interpreter",
820:       "com.google.javascript.rhino.head.Context",
821:       "com.google.javascript.rhino.head.ContextFactory",
822:       "com.google.javascript.rhino.head.ScriptableObject",
823:       "com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider",
824:       "com.google.javascript.rhino.head.ScriptRuntime",
825:       "com.google.javascript.rhino.head.jdk13.VMBridge_jdk13",
826:       "com.google.javascript.rhino.head.jdk15.VMBridge_jdk15",
827:       "com.google.javascript.rhino.head.VMBridge",
828:       "com.google.javascript.rhino.ScriptRuntime",
829:       "com.google.common.collect.ImmutableMap",
830:       "com.google.common.collect.RegularImmutableMap",
831:       "com.google.common.collect.AbstractMapEntry",
832:       "com.google.common.collect.ImmutableEntry",
833:       "com.google.common.collect.RegularImmutableMap$TerminalEntry",
834:       "com.google.javascript.jscomp.RhinoErrorReporter$NewRhinoErrorReporter",
835:       "com.google.javascript.jscomp.PassFactory",
836:       "com.google.javascript.jscomp.Compiler$3",
837:       "com.google.javascript.jscomp.CodeChangeHandler$RecentChange",
838:       "com.google.common.collect.Lists",
839:       "com.google.javascript.jscomp.Normalize",
840:       "com.google.javascript.jscomp.CompilerInput",
841:       "com.google.javascript.jscomp.SourceFile",
842:       "com.google.javascript.jscomp.SourceFile$Builder",
843:       "com.google.common.base.Charsets",
844:       "com.google.javascript.jscomp.SourceFile$Preloaded",
845:       "com.google.javascript.jscomp.JsAst",
846:       "com.google.javascript.rhino.InputId",
847:       "com.google.javascript.jscomp.GoogleCodingConvention",
848:       "com.google.javascript.rhino.IR",
849:       "com.google.javascript.rhino.Node",
850:       "com.google.javascript.rhino.Node$StringNode",
851:       "com.google.javascript.rhino.SimpleErrorReporter",
852:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
853:       "com.google.common.collect.AbstractMultimap",
854:       "com.google.common.collect.AbstractSetMultimap",
855:       "com.google.common.collect.LinkedHashMultimap",
856:       "com.google.common.collect.AbstractListMultimap",
857:       "com.google.common.collect.ArrayListMultimap",
858:       "com.google.javascript.rhino.jstype.JSTypeRegistry$ResolveMode",
859:       "com.google.javascript.rhino.jstype.JSType$1",
860:       "com.google.javascript.rhino.jstype.JSType",
861:       "com.google.javascript.rhino.jstype.ValueType",
862:       "com.google.javascript.rhino.jstype.BooleanType",
863:       "com.google.javascript.rhino.jstype.NullType",
864:       "com.google.javascript.rhino.jstype.NumberType",
865:       "com.google.javascript.rhino.jstype.StringType",
866:       "com.google.javascript.rhino.jstype.ObjectType",
867:       "com.google.javascript.rhino.jstype.UnknownType",
868:       "com.google.javascript.rhino.jstype.VoidType",
869:       "com.google.javascript.rhino.jstype.AllType",
870:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
871:       "com.google.javascript.rhino.jstype.FunctionType",
872:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
873:       "com.google.javascript.rhino.Node$AbstractPropListItem",
874:       "com.google.javascript.rhino.Node$IntPropListItem",
875:       "com.google.javascript.rhino.jstype.ArrowType",
876:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
877:       "com.google.javascript.rhino.jstype.InstanceObjectType",
878:       "com.google.javascript.rhino.jstype.ObjectType$Property",
879:       "com.google.javascript.rhino.jstype.NoObjectType",
880:       "com.google.javascript.rhino.jstype.NoType",
881:       "com.google.javascript.rhino.jstype.NoResolvedType",
882:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
883:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
884:       "com.google.javascript.rhino.jstype.UnionType",
885:       "com.google.common.collect.RegularImmutableList",
886:       "com.google.javascript.rhino.jstype.FunctionBuilder",
887:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
888:       "com.google.javascript.rhino.Node$NumberNode",
889:       "com.google.javascript.jscomp.NodeUtil$MatchDeclaration",
890:       "com.google.javascript.jscomp.AbstractPeepholeOptimization",
891:       "com.google.javascript.jscomp.PeepholeReplaceKnownMethods",
892:       "com.google.javascript.rhino.Token",
893:       "com.google.javascript.jscomp.PeepholeRemoveDeadCode",
894:       "com.google.javascript.jscomp.JqueryCodingConvention",
895:       "com.google.javascript.rhino.jstype.EnumType",
896:       "com.google.javascript.rhino.jstype.EnumElementType",
897:       "com.google.javascript.jscomp.GlobalNamespace$Name",
898:       "com.google.javascript.jscomp.GlobalNamespace$Name$Type",
899:       "com.google.javascript.jscomp.PeepholeFoldWithTypes",
900:       "com.google.javascript.rhino.TokenStream",
901:       "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement",
902:       "com.google.javascript.jscomp.ExploitAssigns",
903:       "com.google.javascript.jscomp.TightenTypes",
904:       "com.google.javascript.jscomp.Compiler$6",
905:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax$1",
906:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
907:       "com.google.javascript.jscomp.PassConfig",
908:       "com.google.javascript.jscomp.DefaultPassConfig",
909:       "com.google.javascript.jscomp.CrossModuleMethodMotion$IdGenerator",
910:       "com.google.javascript.jscomp.DefaultPassConfig$HotSwapPassFactory",
911:       "com.google.javascript.jscomp.DefaultPassConfig$1",
912:       "com.google.javascript.jscomp.DefaultPassConfig$2",
913:       "com.google.javascript.jscomp.DefaultPassConfig$3",
914:       "com.google.javascript.jscomp.DefaultPassConfig$4",
915:       "com.google.javascript.jscomp.DefaultPassConfig$5",
916:       "com.google.javascript.jscomp.DefaultPassConfig$6",
917:       "com.google.javascript.jscomp.DefaultPassConfig$7",
918:       "com.google.javascript.jscomp.DefaultPassConfig$8",
919:       "com.google.javascript.jscomp.DefaultPassConfig$9",
920:       "com.google.javascript.jscomp.DefaultPassConfig$10",
921:       "com.google.javascript.jscomp.DefaultPassConfig$11",
922:       "com.google.javascript.jscomp.DefaultPassConfig$12",
923:       "com.google.javascript.jscomp.DefaultPassConfig$13",
924:       "com.google.javascript.jscomp.DefaultPassConfig$14",
925:       "com.google.javascript.jscomp.DefaultPassConfig$15",
926:       "com.google.javascript.jscomp.DefaultPassConfig$16",
927:       "com.google.javascript.jscomp.DefaultPassConfig$17",
928:       "com.google.javascript.jscomp.DefaultPassConfig$18",
929:       "com.google.javascript.jscomp.DefaultPassConfig$19",
930:       "com.google.javascript.jscomp.DefaultPassConfig$20",
931:       "com.google.javascript.jscomp.DefaultPassConfig$21",
932:       "com.google.javascript.jscomp.DefaultPassConfig$22",
933:       "com.google.javascript.jscomp.DefaultPassConfig$23",
934:       "com.google.javascript.jscomp.DefaultPassConfig$24",
935:       "com.google.javascript.jscomp.DefaultPassConfig$25",
936:       "com.google.javascript.jscomp.DefaultPassConfig$26",
937:       "com.google.javascript.jscomp.DefaultPassConfig$27",
938:       "com.google.javascript.jscomp.DefaultPassConfig$28",
939:       "com.google.javascript.jscomp.DefaultPassConfig$29",
940:       "com.google.javascript.jscomp.DefaultPassConfig$30",
941:       "com.google.javascript.jscomp.DefaultPassConfig$31",
942:       "com.google.javascript.jscomp.DefaultPassConfig$32",
943:       "com.google.javascript.jscomp.DefaultPassConfig$33",
944:       "com.google.javascript.jscomp.DefaultPassConfig$34",
945:       "com.google.javascript.jscomp.DefaultPassConfig$35",
946:       "com.google.javascript.jscomp.DefaultPassConfig$36",
947:       "com.google.javascript.jscomp.DefaultPassConfig$37",
948:       "com.google.javascript.jscomp.DefaultPassConfig$38",
949:       "com.google.javascript.jscomp.DefaultPassConfig$39",
950:       "com.google.javascript.jscomp.DefaultPassConfig$40",
951:       "com.google.javascript.jscomp.DefaultPassConfig$41",
952:       "com.google.javascript.jscomp.DefaultPassConfig$42",
953:       "com.google.javascript.jscomp.DefaultPassConfig$43",
954:       "com.google.javascript.jscomp.DefaultPassConfig$44",
955:       "com.google.javascript.jscomp.DefaultPassConfig$45",
956:       "com.google.javascript.jscomp.DefaultPassConfig$46",
957:       "com.google.javascript.jscomp.DefaultPassConfig$47",
958:       "com.google.javascript.jscomp.DefaultPassConfig$48",
959:       "com.google.javascript.jscomp.DefaultPassConfig$49",
960:       "com.google.javascript.jscomp.DefaultPassConfig$50",
961:       "com.google.javascript.jscomp.DefaultPassConfig$51",
962:       "com.google.javascript.jscomp.DefaultPassConfig$52",
963:       "com.google.javascript.jscomp.DefaultPassConfig$53",
964:       "com.google.javascript.jscomp.DefaultPassConfig$54",
965:       "com.google.javascript.jscomp.DefaultPassConfig$55",
966:       "com.google.javascript.jscomp.DefaultPassConfig$56",
967:       "com.google.javascript.jscomp.DefaultPassConfig$57",
968:       "com.google.javascript.jscomp.DefaultPassConfig$58",
969:       "com.google.javascript.jscomp.DefaultPassConfig$59",
970:       "com.google.javascript.jscomp.DefaultPassConfig$60",
971:       "com.google.javascript.jscomp.DefaultPassConfig$61",
972:       "com.google.javascript.jscomp.DefaultPassConfig$62",
973:       "com.google.javascript.jscomp.DefaultPassConfig$63",
974:       "com.google.javascript.jscomp.DefaultPassConfig$64",
975:       "com.google.javascript.jscomp.DefaultPassConfig$65",
976:       "com.google.javascript.jscomp.DefaultPassConfig$66",
977:       "com.google.javascript.jscomp.DefaultPassConfig$67",
978:       "com.google.javascript.jscomp.DefaultPassConfig$68",
979:       "com.google.javascript.jscomp.DefaultPassConfig$69",
980:       "com.google.javascript.jscomp.DefaultPassConfig$70",
981:       "com.google.javascript.jscomp.DefaultPassConfig$71",
982:       "com.google.javascript.jscomp.DefaultPassConfig$72",
983:       "com.google.javascript.jscomp.DefaultPassConfig$73",
984:       "com.google.javascript.jscomp.DefaultPassConfig$74",
985:       "com.google.javascript.jscomp.DefaultPassConfig$75",
986:       "com.google.javascript.jscomp.DefaultPassConfig$76",
987:       "com.google.javascript.jscomp.DefaultPassConfig$77",
988:       "com.google.javascript.jscomp.DefaultPassConfig$78",
989:       "com.google.javascript.jscomp.DefaultPassConfig$79",
990:       "com.google.javascript.jscomp.DefaultPassConfig$80",
991:       "com.google.javascript.jscomp.DefaultPassConfig$81",
992:       "com.google.javascript.jscomp.DefaultPassConfig$82",
993:       "com.google.javascript.jscomp.DefaultPassConfig$83",
994:       "com.google.javascript.jscomp.DefaultPassConfig$84",
995:       "com.google.javascript.jscomp.DefaultPassConfig$85",
996:       "com.google.javascript.jscomp.DefaultPassConfig$86",
997:       "com.google.javascript.jscomp.DefaultPassConfig$87",
998:       "com.google.javascript.jscomp.DefaultPassConfig$88",
999:       "com.google.javascript.jscomp.DefaultPassConfig$89",
1000:       "com.google.javascript.jscomp.DefaultPassConfig$90",
1001:       "com.google.javascript.jscomp.DefaultPassConfig$91",
1002:       "com.google.javascript.jscomp.DefaultPassConfig$92",
1003:       "com.google.javascript.jscomp.DefaultPassConfig$93",
1004:       "com.google.javascript.jscomp.DefaultPassConfig$94",
1005:       "com.google.javascript.jscomp.DefaultPassConfig$98",
1006:       "com.google.javascript.jscomp.DefaultPassConfig$99",
1007:       "com.google.javascript.jscomp.PassConfig$State",
1008:       "com.google.javascript.jscomp.NodeTraversal$AbstractPostOrderCallback",
1009:       "com.google.javascript.jscomp.UnreachableCodeElimination",
1010:       "com.google.javascript.jscomp.NodeTraversal",
1011:       "com.google.javascript.jscomp.SyntacticScopeCreator",
1012:       "com.google.javascript.jscomp.SyntacticScopeCreator$DefaultRedeclarationHandler",
1013:       "com.google.javascript.jscomp.ReorderConstantExpression",
1014:       "com.google.javascript.jscomp.MoveFunctionDeclarations",
1015:       "com.google.javascript.jscomp.SimpleDefinitionFinder",
1016:       "com.google.javascript.rhino.jstype.ProxyObjectType",
1017:       "com.google.javascript.rhino.jstype.NamedType",
1018:       "com.google.javascript.rhino.Node$ObjectPropListItem",
1019:       "com.google.javascript.jscomp.ControlFlowAnalysis",
1020:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler$NullAliasTransformation",
1021:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler",
1022:       "com.google.javascript.jscomp.CompilerOptions",
1023:       "com.google.javascript.jscomp.DependencyOptions",
1024:       "com.google.javascript.jscomp.ProcessCommonJSModules",
1025:       "com.google.javascript.jscomp.WarningsGuard",
1026:       "com.google.javascript.jscomp.ComposeWarningsGuard",
1027:       "com.google.common.primitives.Ints",
1028:       "com.google.javascript.jscomp.ComposeWarningsGuard$GuardComparator",
1029:       "com.google.javascript.jscomp.SourceMap$DetailLevel",
1030:       "com.google.javascript.jscomp.SourceMap$Format",
1031:       "com.google.javascript.jscomp.CompilerOptions$LanguageMode",
1032:       "com.google.javascript.jscomp.CompilerOptions$DevMode",
1033:       "com.google.javascript.jscomp.VariableRenamingPolicy",
1034:       "com.google.javascript.jscomp.PropertyRenamingPolicy",
1035:       "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
1036:       "com.google.javascript.jscomp.CompilerOptions$TweakProcessing",
1037:       "com.google.javascript.jscomp.CompilerOptions$TracerMode",
1038:       "com.google.javascript.jscomp.ErrorFormat",
1039:       "com.google.javascript.jscomp.BasicErrorManager",
1040:       "com.google.javascript.jscomp.LoggerErrorManager",
1041:       "com.google.javascript.jscomp.AbstractMessageFormatter",
1042:       "com.google.javascript.jscomp.LightweightMessageFormatter$LineNumberingFormatter",
1043:       "com.google.javascript.jscomp.LightweightMessageFormatter",
1044:       "com.google.javascript.jscomp.BasicErrorManager$LeveledJSErrorComparator",
1045:       "com.google.javascript.jscomp.CheckGlobalThis",
1046:       "com.google.javascript.jscomp.DiagnosticGroup",
1047:       "com.google.common.collect.SingletonImmutableSet",
1048:       "com.google.javascript.jscomp.CheckAccessControls",
1049:       "com.google.common.collect.AbstractIndexedListIterator",
1050:       "com.google.common.collect.Iterators$11",
1051:       "com.google.javascript.jscomp.TypeValidator",
1052:       "com.google.javascript.jscomp.VarCheck",
1053:       "com.google.javascript.jscomp.CheckGlobalNames",
1054:       "com.google.javascript.jscomp.VariableReferenceCheck",
1055:       "com.google.javascript.jscomp.ProcessDefines",
1056:       "com.google.common.base.CharMatcher$11",
1057:       "com.google.common.base.CharMatcher$12",
1058:       "com.google.common.base.CharMatcher$Or",
1059:       "com.google.common.base.Platform$1",
1060:       "com.google.common.base.Platform",
1061:       "com.google.common.base.CharMatcher$LookupTable",
1062:       "com.google.common.base.CharMatcher$15",
1063:       "com.google.common.base.CharMatcher$8",
1064:       "com.google.common.base.CharMatcher$1",
1065:       "com.google.common.base.CharMatcher$2",
1066:       "com.google.common.base.CharMatcher$3",
1067:       "com.google.common.base.CharMatcher$4",
1068:       "com.google.common.base.CharMatcher$5",
1069:       "com.google.common.base.CharMatcher$6",
1070:       "com.google.common.base.CharMatcher$7",
1071:       "com.google.common.base.CharMatcher",
1072:       "com.google.javascript.jscomp.ProcessTweaks$TweakFunction",
1073:       "com.google.javascript.jscomp.ProcessTweaks",
1074:       "com.google.javascript.jscomp.TypedScopeCreator",
1075:       "com.google.javascript.jscomp.FunctionTypeBuilder",
1076:       "com.google.javascript.jscomp.TypeCheck",
1077:       "com.google.javascript.jscomp.CheckDebuggerStatement",
1078:       "com.google.javascript.jscomp.CheckRegExp",
1079:       "com.google.javascript.jscomp.CheckSideEffects",
1080:       "com.google.javascript.jscomp.CheckUnreachableCode",
1081:       "com.google.javascript.jscomp.ConstCheck",
1082:       "com.google.javascript.jscomp.DisambiguateProperties$Warnings",
1083:       "com.google.javascript.jscomp.ControlStructureCheck",
1084:       "com.google.javascript.jscomp.StrictModeCheck",
1085:       "com.google.javascript.jscomp.CheckProvides",
1086:       "com.google.javascript.jscomp.JsMessageVisitor",
1087:       "com.google.javascript.jscomp.DiagnosticGroups",
1088:       "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
1089:       "com.google.javascript.jscomp.WarningsGuard$Priority",
1090:       "com.google.javascript.jscomp.SuppressDocWarningsGuard",
1091:       "com.google.common.collect.RegularImmutableMap$NonTerminalEntry",
1092:       "com.google.common.collect.RegularImmutableMap$EntrySet",
1093:       "com.google.javascript.jscomp.Compiler$10",
1094:       "com.google.javascript.jscomp.parsing.Config$LanguageMode",
1095:       "com.google.javascript.jscomp.parsing.ParserRunner",
1096:       "com.google.javascript.jscomp.parsing.Config",
1097:       "com.google.common.collect.ImmutableMap$Builder",
1098:       "com.google.javascript.jscomp.parsing.Annotation",
1099:       "com.google.javascript.rhino.head.DefaultErrorReporter",
1100:       "com.google.javascript.rhino.head.CompilerEnvirons",
1101:       "com.google.javascript.rhino.head.Parser",
1102:       "com.google.javascript.rhino.head.TokenStream",
1103:       "com.google.javascript.rhino.head.ObjToIntMap",
1104:       "com.google.javascript.rhino.head.Node",
1105:       "com.google.javascript.rhino.head.ast.AstNode",
1106:       "com.google.javascript.rhino.head.ast.Jump",
1107:       "com.google.javascript.rhino.head.ast.Scope",
1108:       "com.google.javascript.rhino.head.ast.ScriptNode",
1109:       "com.google.javascript.rhino.head.ast.AstRoot",
1110:       "com.google.javascript.rhino.head.ast.Name",
1111:       "com.google.javascript.rhino.head.ast.ExpressionStatement",
1112:       "com.google.javascript.jscomp.parsing.IRFactory",
1113:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
1114:       "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
1115:       "com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher",
1116:       "com.google.javascript.jscomp.parsing.IRFactory$1",
1117:       "com.google.javascript.rhino.head.Node$NodeIterator",
1118:       "com.google.javascript.jscomp.PrepareAst",
1119:       "com.google.javascript.jscomp.PrepareAst$PrepareAnnotations",
1120:       "com.google.javascript.jscomp.Normalize$NormalizeStatements",
1121:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
1122:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$ContextualRenamer",
1123:       "com.google.common.collect.AbstractMultiset",
1124:       "com.google.common.collect.AbstractMapBasedMultiset",
1125:       "com.google.common.collect.HashMultiset",
1126:       "com.google.common.collect.Multisets",
1127:       "com.google.common.collect.Multisets$EntrySet",
1128:       "com.google.common.collect.AbstractMultiset$EntrySet",
1129:       "com.google.common.collect.AbstractMapBasedMultiset$1",
1130:       "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments",
1131:       "com.google.javascript.jscomp.JSSourceFile",
1132:       "com.google.javascript.jscomp.SourceFile$OnDisk",
1133:       "com.google.common.collect.Iterators$12",
1134:       "com.google.javascript.rhino.Node$AncestorIterable",
1135:       "com.google.javascript.rhino.Node$AncestorIterable$1",
1136:       "com.google.javascript.jscomp.GatherRawExports",
1137:       "com.google.javascript.jscomp.ReferenceCollectingCallback$1",
1138:       "com.google.javascript.jscomp.ReferenceCollectingCallback",
1139:       "com.google.javascript.jscomp.Tracer$1",
1140:       "com.google.javascript.jscomp.Tracer$Stat",
1141:       "com.google.javascript.jscomp.Tracer",
1142:       "com.google.javascript.jscomp.JSModuleGraph",
1143:       "com.google.javascript.jscomp.JSModule",
1144:       "com.google.common.base.Predicates",
1145:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
1146:       "com.google.javascript.jscomp.PeepholeSimplifyRegExp",
1147:       "com.google.javascript.jscomp.CodePrinter$Builder",
1148:       "com.google.javascript.jscomp.CodePrinter$Format",
1149:       "com.google.javascript.jscomp.CodePrinter",
1150:       "com.google.javascript.jscomp.CodeConsumer",
1151:       "com.google.javascript.jscomp.CodePrinter$MappedCodePrinter",
1152:       "com.google.javascript.jscomp.CodePrinter$CompactCodePrinter",
1153:       "com.google.javascript.jscomp.CodeGenerator",
1154:       "com.google.javascript.jscomp.CodeGenerator$Context",
1155:       "com.google.javascript.jscomp.Compiler$5",
1156:       "com.google.javascript.jscomp.ControlFlowAnalysis$1",
1157:       "com.google.common.collect.HashMultimap",
1158:       "com.google.javascript.jscomp.PrintStreamErrorManager",
1159:       "com.google.javascript.jscomp.NameAnalyzer$1",
1160:       "com.google.javascript.jscomp.NameAnalyzer",
1161:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
1162:       "com.google.javascript.jscomp.FunctionNames",
1163:       "com.google.javascript.jscomp.FunctionNames$FunctionListExtractor",
1164:       "com.google.javascript.jscomp.RecordFunctionInformation",
1165:       "com.google.protobuf.AbstractMessageLite",
1166:       "com.google.protobuf.AbstractMessage",
1167:       "com.google.protobuf.GeneratedMessage",
1168:       "com.google.protobuf.UnknownFieldSet",
1169:       "com.google.javascript.jscomp.FunctionInformationMap",
1170:       "com.google.protobuf.AbstractMessageLite$Builder",
1171:       "com.google.protobuf.AbstractMessage$Builder",
1172:       "com.google.protobuf.GeneratedMessage$Builder",
1173:       "com.google.javascript.jscomp.FunctionInformationMap$Builder",
1174:       "com.google.javascript.rhino.head.ast.InfixExpression",
1175:       "com.google.javascript.rhino.head.ast.PropertyGet",
1176:       "com.google.javascript.jscomp.FlowSensitiveInlineVariables$1",
1177:       "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
1178:       "com.google.javascript.jscomp.VerboseMessageFormatter",
1179:       "com.google.common.io.CharStreams",
1180:       "com.google.javascript.jscomp.TightenTypes$ConcreteScope",
1181:       "com.google.javascript.jscomp.SyntheticAst",
1182:       "com.google.javascript.rhino.JSDocInfo",
1183:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
1184:       "com.google.javascript.jscomp.FunctionRewriter",
1185:       "com.google.javascript.jscomp.CleanupPasses",
1186:       "com.google.javascript.jscomp.CleanupPasses$1",
1187:       "com.google.javascript.jscomp.CleanupPasses$2",
1188:       "com.google.javascript.jscomp.CleanupPasses$3",
1189:       "com.google.javascript.jscomp.LinkedFlowScope",
1190:       "com.google.javascript.jscomp.LinkedFlowScope$FlatFlowScopeCache",
1191:       "com.google.common.collect.EmptyImmutableMap",
1192:       "com.google.javascript.jscomp.JSError",
1193:       "com.google.javascript.jscomp.BasicErrorManager$ErrorWithLevel",
1194:       "com.google.javascript.rhino.head.Parser$ParserException",
1195:       "com.google.javascript.rhino.head.ast.EmptyStatement",
1196:       "com.google.javascript.rhino.head.RhinoException",
1197:       "com.google.javascript.rhino.head.EvaluatorException",
1198:       "com.google.javascript.jscomp.Compiler$IntermediateState",
1199:       "com.google.javascript.jscomp.GlobalNamespace$Ref",
1200:       "com.google.javascript.jscomp.Denormalize$StripConstantAnnotations",
1201:       "com.google.javascript.jscomp.MinimizeExitPoints",
1202:       "com.google.javascript.jscomp.WhitelistWarningsGuard",
1203:       "com.google.common.io.LineReader",
1204:       "com.google.common.io.LineBuffer",
1205:       "com.google.common.io.LineReader$1",
1206:       "com.google.common.io.Closeables",
1207:       "com.google.javascript.jscomp.AbstractMessageFormatter$1",
1208:       "com.google.javascript.rhino.Node$SideEffectFlags",
1209:       "com.google.javascript.jscomp.InferJSDocInfo",
1210:       "com.google.javascript.rhino.Node$NodeMismatch",
1211:       "com.google.javascript.jscomp.LoggerErrorManager$1",
1212:       "com.google.javascript.jscomp.JSError$1",
1213:       "com.google.javascript.jscomp.AbstractMessageFormatter$Color",
1214:       "com.google.javascript.rhino.head.ast.UnaryExpression",
1215:       "com.google.javascript.rhino.head.Token",
1216:       "com.google.javascript.jscomp.GlobalNamespace",
1217:       "com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace",
1218:       "com.google.javascript.jscomp.Scope$1",
1219:       "com.google.javascript.jscomp.Scope",
1220:       "com.google.javascript.jscomp.CheckMissingReturn$1",
1221:       "com.google.javascript.jscomp.CheckMissingReturn$2",
1222:       "com.google.javascript.jscomp.CheckMissingReturn",
1223:       "com.google.javascript.jscomp.StatementFusion",
1224:       "com.google.javascript.jscomp.CheckSideEffects$StripProtection",
1225:       "com.google.javascript.jscomp.MemoizedScopeCreator",
1226:       "com.google.javascript.jscomp.GroupVariableDeclarations",
1227:       "com.google.javascript.jscomp.XtbMessageBundle$SecureEntityResolver",
1228:       "com.google.javascript.jscomp.XtbMessageBundle",
1229:       "com.google.javascript.jscomp.GoogleJsMessageIdGenerator",
1230:       "com.google.javascript.jscomp.XtbMessageBundle$Handler",
1231:       "com.google.javascript.jscomp.CombinedCompilerPass",
1232:       "com.google.javascript.rhino.jstype.ModificationVisitor",
1233:       "com.google.javascript.rhino.head.ast.Label",
1234:       "com.google.javascript.rhino.head.ast.LabeledStatement",
1235:       "com.google.common.io.Files",
1236:       "com.google.common.io.Files$1",
1237:       "com.google.common.io.ByteStreams",
1238:       "com.google.common.collect.AbstractSortedSetMultimap",
1239:       "com.google.common.collect.TreeMultimap",
1240:       "com.google.javascript.jscomp.SourceFile$Generated",
1241:       "com.google.javascript.jscomp.PreprocessorSymbolTable",
1242:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$BoilerplateRenamer",
1243:       "com.google.javascript.jscomp.PeepholeFoldConstants",
1244:       "com.google.javascript.jscomp.SymbolTable",
1245:       "com.google.javascript.jscomp.Normalize$VerifyConstants",
1246:       "com.google.javascript.rhino.jstype.SimpleSlot",
1247:       "com.google.javascript.jscomp.NameReferenceGraph$Reference",
1248:       "com.google.javascript.jscomp.RemoveUnusedClassProperties",
1249:       "com.google.javascript.jscomp.NodeTraversal$AbstractShallowCallback",
1250:       "com.google.javascript.jscomp.FieldCleanupPass$QualifiedNameSearchTraversal",
1251:       "com.google.javascript.jscomp.ProcessClosurePrimitives",
1252:       "com.google.javascript.jscomp.LineNumberCheck",
1253:       "com.google.javascript.jscomp.MethodCompilerPass",
1254:       "com.google.javascript.jscomp.InlineSimpleMethods$1",
1255:       "com.google.javascript.jscomp.InlineSimpleMethods",
1256:       "com.google.javascript.jscomp.ConvertToDottedProperties",
1257:       "com.google.javascript.jscomp.InvocationsCallback",
1258:       "com.google.javascript.jscomp.InlineSimpleMethods$InlineTrivialAccessors",
1259:       "com.google.javascript.jscomp.EmptyMessageBundle",
1260:       "com.google.javascript.jscomp.ReplaceMessages",
1261:       "com.google.common.collect.Multimaps$Values",
1262:       "com.google.common.collect.AbstractMultimap$2",
1263:       "com.google.common.collect.Multimaps$Entries",
1264:       "com.google.common.collect.AbstractMultimap$4",
1265:       "com.google.common.collect.AbstractMultimap$EntryIterator",
1266:       "com.google.common.collect.Multimaps$Values$1",
1267:       "com.google.javascript.jscomp.ExternExportsPass",
1268:       "com.google.javascript.jscomp.PassConfig$PassConfigDelegate",
1269:       "com.google.javascript.rhino.head.ast.Assignment",
1270:       "com.google.javascript.rhino.head.ast.FunctionCall",
1271:       "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
1272:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter$1",
1273:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter$2",
1274:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter$3",
1275:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter$4",
1276:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
1277:       "com.google.javascript.jscomp.CustomPassExecutionTime",
1278:       "com.google.javascript.jscomp.CodingConvention$AssertionFunctionSpec",
1279:       "com.google.javascript.jscomp.ClosureCodingConvention$AssertInstanceofSpec",
1280:       "com.google.javascript.rhino.jstype.ParameterizedType",
1281:       "com.google.javascript.rhino.head.ast.NumberLiteral",
1282:       "com.google.javascript.jscomp.DeadAssignmentsElimination$1",
1283:       "com.google.javascript.jscomp.DeadAssignmentsElimination",
1284:       "com.google.javascript.jscomp.ExpandJqueryAliases",
1285:       "com.google.javascript.jscomp.CheckMissingGetCssName",
1286:       "com.google.javascript.jscomp.Normalize$PropagateConstantAnnotationsOverVars",
1287:       "com.google.common.collect.ImmutableMultimap",
1288:       "com.google.common.collect.ImmutableListMultimap",
1289:       "com.google.common.collect.ImmutableMultimap$Builder",
1290:       "com.google.common.collect.ImmutableListMultimap$Builder",
1291:       "com.google.common.collect.ImmutableMultimap$BuilderMultimap",
1292:       "com.google.common.collect.AbstractMultimap$AsMap",
1293:       "com.google.common.collect.Maps$EntrySet",
1294:       "com.google.common.collect.AbstractMultimap$AsMap$AsMapEntries",
1295:       "com.google.common.collect.AbstractMultimap$AsMap$AsMapIterator",
1296:       "com.google.common.collect.AbstractMultimap$WrappedCollection",
1297:       "com.google.common.collect.AbstractMultimap$WrappedList",
1298:       "com.google.common.collect.AbstractMultimap$RandomAccessWrappedList",
1299:       "com.google.common.collect.AbstractMultimap$WrappedCollection$WrappedIterator",
1300:       "com.google.common.collect.SingletonImmutableMap",
1301:       "com.google.common.collect.Iterables",
1302:       "com.google.javascript.jscomp.Result",
1303:       "com.google.javascript.jscomp.Tracer$ThreadTrace",
1304:       "com.google.javascript.jscomp.RemoveTryCatch",
1305:       "com.google.javascript.jscomp.RemoveTryCatch$RemoveTryCatchCode",
1306:       "com.google.javascript.jscomp.FindExportableNodes",
1307:       "com.google.javascript.jscomp.OptimizeArgumentsArray",
1308:       "com.google.javascript.jscomp.CoalesceVariableNames$1",
1309:       "com.google.javascript.jscomp.CoalesceVariableNames",
1310:       "com.google.javascript.jscomp.Compiler$2",
1311:       "com.google.javascript.rhino.head.ast.ArrayLiteral",
1312:       "com.google.javascript.jscomp.DefaultPassConfig$32$1",
1313:       "com.google.javascript.jscomp.AliasStrings",
1314:       "com.google.javascript.jscomp.RenameLabels",
1315:       "com.google.javascript.jscomp.RenameLabels$DefaultNameSupplier",
1316:       "com.google.javascript.jscomp.NameGenerator",
1317:       "com.google.javascript.jscomp.RenameLabels$ProcessLabels",
1318:       "com.google.javascript.jscomp.RenameLabels$LabelNamespace",
1319:       "com.google.javascript.jscomp.VariableMap",
1320:       "com.google.javascript.rhino.head.ast.ParenthesizedExpression",
1321:       "com.google.javascript.jscomp.CollapseProperties",
1322:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt",
1323:       "com.google.javascript.jscomp.CheckLevel"
1324:     );
1325:   }
1326: }

[MASTER] 19:11:36.543 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(3197, "u\"w!~", 30, 101);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(54, Node.LAST_PROP);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(54, Node.SLASH_V);
assertNotNull(node0);
assertEquals(101, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertEquals(122981, node0.getSourcePosition());
assertFalse(node0.isCall());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertEquals(3197, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFromExterns());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals(30, node0.getLineno());
assertFalse(node0.isSwitch());
assertNull(node0.getSourceFileName());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());

NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
assertNotNull(nodeUtil_MatchShallowStatement0);

Node node1 = new Node(97, node0, node0, node0);
assertFalse(node1.equals((Object)node0));
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(54, Node.LAST_PROP);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.LAST_PROP);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotNull(node1);
assertEquals(101, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertEquals(122981, node0.getSourcePosition());
assertFalse(node0.isCall());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertEquals(3197, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFromExterns());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals(30, node0.getLineno());
assertFalse(node0.isSwitch());
assertNull(node0.getSourceFileName());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isFromExterns());
assertEquals(97, node1.getType());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isBlock());
assertFalse(node1.isDec());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertTrue(node1.hasChildren());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertEquals((-1), node1.getSourceOffset());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertTrue(node1.hasOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isScript());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertNull(node1.getSourceFileName());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());

boolean boolean0 = NodeUtil.isSimpleOperatorType(38);
assertFalse(boolean0);

boolean boolean1 = nodeUtil_MatchShallowStatement0.apply(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean1 == boolean0);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(54, Node.LAST_PROP);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.LAST_PROP);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertTrue(boolean1);
assertEquals(101, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertEquals(122981, node0.getSourcePosition());
assertFalse(node0.isCall());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertEquals(3197, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFromExterns());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals(30, node0.getLineno());
assertFalse(node0.isSwitch());
assertNull(node0.getSourceFileName());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isFromExterns());
assertEquals(97, node1.getType());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isBlock());
assertFalse(node1.isDec());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertTrue(node1.hasChildren());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertEquals((-1), node1.getSourceOffset());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertTrue(node1.hasOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isScript());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertNull(node1.getSourceFileName());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(54, Node.LAST_PROP);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(54, Node.SLASH_V);
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertEquals(101, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertEquals(122981, node0.getSourcePosition());
assertFalse(node0.isCall());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertEquals(3197, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFromExterns());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals(30, node0.getLineno());
assertFalse(node0.isSwitch());
assertNull(node0.getSourceFileName());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());

Locale locale0 = Locale.ENGLISH;
assertNotNull(locale0);
assertEquals("", locale0.getCountry());
assertEquals("en", locale0.toString());
assertEquals("eng", locale0.getISO3Language());
assertEquals("", locale0.getISO3Country());
assertEquals("", locale0.getVariant());
assertEquals("en", locale0.getLanguage());

Locale locale1 = Locale.CHINESE;
assertFalse(locale1.equals((Object)locale0));
assertNotSame(locale1, locale0);
assertNotNull(locale1);
assertEquals("", locale1.getVariant());
assertEquals("zh", locale1.toString());
assertEquals("", locale1.getCountry());
assertEquals("zho", locale1.getISO3Language());
assertEquals("", locale1.getISO3Country());
assertEquals("zh", locale1.getLanguage());

Set<String> set0 = locale1.getUnicodeLocaleKeys();
assertFalse(locale1.equals((Object)locale0));
assertNotSame(locale1, locale0);
assertFalse(set0.contains("u\"w!~"));
assertNotNull(set0);
assertEquals("", locale1.getVariant());
assertEquals("zh", locale1.toString());
assertEquals("", locale1.getCountry());
assertEquals("zho", locale1.getISO3Language());
assertEquals("", locale1.getISO3Country());
assertEquals("zh", locale1.getLanguage());
assertEquals(0, set0.size());
assertTrue(set0.isEmpty());

GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
assertNotNull(googleCodingConvention0);
assertNull(googleCodingConvention0.getDelegateSuperclassName());
assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());

boolean boolean2 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchShallowStatement0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(54, Node.LAST_PROP);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.LAST_PROP);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertTrue(boolean2);
assertEquals(101, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isFor());
assertFalse(node0.isName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertEquals(122981, node0.getSourcePosition());
assertFalse(node0.isCall());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertEquals(3197, node0.getType());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFromExterns());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isReturn());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals(30, node0.getLineno());
assertFalse(node0.isSwitch());
assertNull(node0.getSourceFileName());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isFromExterns());
assertEquals(97, node1.getType());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isBlock());
assertFalse(node1.isDec());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertTrue(node1.hasChildren());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertEquals((-1), node1.getSourceOffset());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertTrue(node1.hasOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isScript());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertNull(node1.getSourceFileName());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());


[MASTER] 19:11:42.203 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_194_1566407501742/com/google/javascript/jscomp/NodeUtil_194_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_194_1566407501742/com/google/javascript/jscomp/NodeUtil_194_tmp__ESTest_scaffolding.java]]
[MASTER] 19:11:42.203 [logback-2] ERROR JUnitAnalyzer - Classpath: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/tools/evosuite.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/classes:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/args4j.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/guava.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/json.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/jsr305.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/protobuf-java.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/lib/rhino.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/ant.jar
[MASTER] 19:11:42.204 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/rq3/botsing-integration-experiment/tools/evosuite.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/classes:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/args4j.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/guava.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/json.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/jsr305.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/protobuf-java.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/build/lib/rhino.jar:/home/pderakhshanfar/rq3/botsing-integration-experiment/sources/closure-16/lib/ant.jar
[MASTER] 19:11:42.205 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 400
[MASTER] 19:11:42.207 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_194_1566407501742/com/google/javascript/jscomp/NodeUtil_194_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Aug 21 17:11:41 GMT 2019
4:  */
5: 
6: package com.google.javascript.jscomp;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.jscomp.ClosureCodingConvention;
12: import com.google.javascript.jscomp.NodeUtil;
13: import com.google.javascript.rhino.Node;
14: import java.util.Locale;
15: import java.util.Set;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
21: public class NodeUtil_194_tmp__ESTest extends NodeUtil_194_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       Node node0 = new Node(13, 13, 13);
26:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
27:       assertEquals(50, Node.FREE_CALL);
28:       assertEquals(40, Node.ORIGINALNAME_PROP);
29:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
30:       assertEquals(39, Node.EMPTY_BLOCK);
31:       assertEquals(48, Node.DIRECTIVES);
32:       assertEquals(52, Node.LENGTH);
33:       assertEquals(8, Node.FLAG_NO_THROWS);
34:       assertEquals(41, Node.BRACELESS_TYPE);
35:       assertEquals(54, Node.SLASH_V);
36:       assertEquals(49, Node.DIRECT_EVAL);
37:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
38:       assertEquals(1, Node.DECR_FLAG);
39:       assertEquals(4095, Node.COLUMN_MASK);
40:       assertEquals(32, Node.INCRDECR_PROP);
41:       assertEquals(12, Node.COLUMN_BITS);
42:       assertEquals(54, Node.LAST_PROP);
43:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
44:       assertEquals(29, Node.JSDOC_INFO_PROP);
45:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
46:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
47:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
48:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
49:       assertEquals(37, Node.OPT_ARG_NAME);
50:       assertEquals(53, Node.INPUT_ID);
51:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
52:       assertEquals(36, Node.QUOTED_PROP);
53:       assertEquals(43, Node.IS_CONSTANT_NAME);
54:       assertEquals(51, Node.STATIC_SOURCE_FILE);
55:       assertEquals(16, Node.SOURCENAME_PROP);
56:       assertEquals(46, Node.IS_NAMESPACE);
57:       assertEquals(30, Node.VAR_ARGS_NAME);
58:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
59:       assertEquals(35, Node.PARENTHESIZED_PROP);
60:       assertEquals(15, Node.NO_SIDE_EFFECTS);
61:       assertEquals(2, Node.POST_FLAG);
62:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
63:       assertEquals(47, Node.IS_DISPATCHER);
64:       assertNotNull(node0);
65:       assertFalse(node0.isExprResult());
66:       assertFalse(node0.isScript());
67:       assertFalse(node0.isAnd());
68:       assertFalse(node0.isGetElem());
69:       assertFalse(node0.isWith());
70:       assertFalse(node0.isAssign());
71:       assertFalse(node0.isInstanceOf());
72:       assertFalse(node0.isTypeOf());
73:       assertFalse(node0.isComma());
74:       assertFalse(node0.isThis());
75:       assertFalse(node0.isFromExterns());
76:       assertFalse(node0.isDec());
77:       assertFalse(node0.isGetProp());
78:       assertFalse(node0.hasChildren());
79:       assertFalse(node0.isReturn());
80:       assertFalse(node0.isLabelName());
81:       assertFalse(node0.isObjectLit());
82:       assertFalse(node0.hasOneChild());
83:       assertFalse(node0.isNot());
84:       assertFalse(node0.isNumber());
85:       assertFalse(node0.isInc());
86:       assertFalse(node0.isBlock());
87:       assertEquals(53261, node0.getSourcePosition());
88:       assertFalse(node0.isThrow());
89:       assertFalse(node0.isHook());
90:       assertEquals(13, node0.getCharno());
91:       assertFalse(node0.isFalse());
92:       assertFalse(node0.hasMoreThanOneChild());
93:       assertFalse(node0.isContinue());
94:       assertFalse(node0.isSetterDef());
95:       assertFalse(node0.isIf());
96:       assertFalse(node0.isIn());
97:       assertFalse(node0.isTrue());
98:       assertFalse(node0.isFunction());
99:       assertFalse(node0.isRegExp());
100:       assertFalse(node0.isVoid());
101:       assertFalse(node0.isDebugger());
102:       assertFalse(node0.isTry());
103:       assertEquals(13, node0.getLineno());
104:       assertFalse(node0.isDefaultCase());
105:       assertFalse(node0.isCatch());
106:       assertFalse(node0.isArrayLit());
107:       assertEquals(0, node0.getChildCount());
108:       assertFalse(node0.isParamList());
109:       assertFalse(node0.isFor());
110:       assertFalse(node0.isStringKey());
111:       assertFalse(node0.isCase());
112:       assertEquals((-1), node0.getSourceOffset());
113:       assertFalse(node0.isString());
114:       assertFalse(node0.isGetterDef());
115:       assertFalse(node0.isNew());
116:       assertFalse(node0.isWhile());
117:       assertFalse(node0.isDo());
118:       assertFalse(node0.isSwitch());
119:       assertFalse(node0.isCall());
120:       assertFalse(node0.isVar());
121:       assertFalse(node0.isNull());
122:       assertFalse(node0.isBreak());
123:       assertFalse(node0.isLabel());
124:       assertEquals(13, node0.getType());
125:       assertFalse(node0.isDelProp());
126:       assertFalse(node0.isName());
127:       assertFalse(node0.isAssignAdd());
128:       assertNull(node0.getSourceFileName());
129:       assertFalse(node0.isOr());
130:       assertFalse(node0.isEmpty());
131:       assertFalse(node0.isAdd());
132:       assertTrue(node0.isNE());
133:       
134:       ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
135:       assertNotNull(closureCodingConvention0);
136:       assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
137:       assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
138:       assertNull(closureCodingConvention0.getDelegateSuperclassName());
139:       assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
140:       assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
141:       
142:       boolean boolean0 = NodeUtil.isSimpleOperator(node0);
143:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
144:       assertEquals(50, Node.FREE_CALL);
145:       assertEquals(40, Node.ORIGINALNAME_PROP);
146:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
147:       assertEquals(39, Node.EMPTY_BLOCK);
148:       assertEquals(48, Node.DIRECTIVES);
149:       assertEquals(52, Node.LENGTH);
150:       assertEquals(8, Node.FLAG_NO_THROWS);
151:       assertEquals(41, Node.BRACELESS_TYPE);
152:       assertEquals(54, Node.SLASH_V);
153:       assertEquals(49, Node.DIRECT_EVAL);
154:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
155:       assertEquals(1, Node.DECR_FLAG);
156:       assertEquals(4095, Node.COLUMN_MASK);
157:       assertEquals(32, Node.INCRDECR_PROP);
158:       assertEquals(12, Node.COLUMN_BITS);
159:       assertEquals(54, Node.LAST_PROP);
160:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
161:       assertEquals(29, Node.JSDOC_INFO_PROP);
162:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
163:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
164:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
165:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
166:       assertEquals(37, Node.OPT_ARG_NAME);
167:       assertEquals(53, Node.INPUT_ID);
168:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
169:       assertEquals(36, Node.QUOTED_PROP);
170:       assertEquals(43, Node.IS_CONSTANT_NAME);
171:       assertEquals(51, Node.STATIC_SOURCE_FILE);
172:       assertEquals(16, Node.SOURCENAME_PROP);
173:       assertEquals(46, Node.IS_NAMESPACE);
174:       assertEquals(30, Node.VAR_ARGS_NAME);
175:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
176:       assertEquals(35, Node.PARENTHESIZED_PROP);
177:       assertEquals(15, Node.NO_SIDE_EFFECTS);
178:       assertEquals(2, Node.POST_FLAG);
179:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
180:       assertEquals(47, Node.IS_DISPATCHER);
181:       assertTrue(boolean0);
182:       assertFalse(node0.isExprResult());
183:       assertFalse(node0.isScript());
184:       assertFalse(node0.isAnd());
185:       assertFalse(node0.isGetElem());
186:       assertFalse(node0.isWith());
187:       assertFalse(node0.isAssign());
188:       assertFalse(node0.isInstanceOf());
189:       assertFalse(node0.isTypeOf());
190:       assertFalse(node0.isComma());
191:       assertFalse(node0.isThis());
192:       assertFalse(node0.isFromExterns());
193:       assertFalse(node0.isDec());
194:       assertFalse(node0.isGetProp());
195:       assertFalse(node0.hasChildren());
196:       assertFalse(node0.isReturn());
197:       assertFalse(node0.isLabelName());
198:       assertFalse(node0.isObjectLit());
199:       assertFalse(node0.hasOneChild());
200:       assertFalse(node0.isNot());
201:       assertFalse(node0.isNumber());
202:       assertFalse(node0.isInc());
203:       assertFalse(node0.isBlock());
204:       assertEquals(53261, node0.getSourcePosition());
205:       assertFalse(node0.isThrow());
206:       assertFalse(node0.isHook());
207:       assertEquals(13, node0.getCharno());
208:       assertFalse(node0.isFalse());
209:       assertFalse(node0.hasMoreThanOneChild());
210:       assertFalse(node0.isContinue());
211:       assertFalse(node0.isSetterDef());
212:       assertFalse(node0.isIf());
213:       assertFalse(node0.isIn());
214:       assertFalse(node0.isTrue());
215:       assertFalse(node0.isFunction());
216:       assertFalse(node0.isRegExp());
217:       assertFalse(node0.isVoid());
218:       assertFalse(node0.isDebugger());
219:       assertFalse(node0.isTry());
220:       assertEquals(13, node0.getLineno());
221:       assertFalse(node0.isDefaultCase());
222:       assertFalse(node0.isCatch());
223:       assertFalse(node0.isArrayLit());
224:       assertEquals(0, node0.getChildCount());
225:       assertFalse(node0.isParamList());
226:       assertFalse(node0.isFor());
227:       assertFalse(node0.isStringKey());
228:       assertFalse(node0.isCase());
229:       assertEquals((-1), node0.getSourceOffset());
230:       assertFalse(node0.isString());
231:       assertFalse(node0.isGetterDef());
232:       assertFalse(node0.isNew());
233:       assertFalse(node0.isWhile());
234:       assertFalse(node0.isDo());
235:       assertFalse(node0.isSwitch());
236:       assertFalse(node0.isCall());
237:       assertFalse(node0.isVar());
238:       assertFalse(node0.isNull());
239:       assertFalse(node0.isBreak());
240:       assertFalse(node0.isLabel());
241:       assertEquals(13, node0.getType());
242:       assertFalse(node0.isDelProp());
243:       assertFalse(node0.isName());
244:       assertFalse(node0.isAssignAdd());
245:       assertNull(node0.getSourceFileName());
246:       assertFalse(node0.isOr());
247:       assertFalse(node0.isEmpty());
248:       assertFalse(node0.isAdd());
249:       assertTrue(node0.isNE());
250:       
251:       boolean boolean1 = node0.isVarArgs();
252:       assertFalse(boolean1 == boolean0);
253:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
254:       assertEquals(50, Node.FREE_CALL);
255:       assertEquals(40, Node.ORIGINALNAME_PROP);
256:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
257:       assertEquals(39, Node.EMPTY_BLOCK);
258:       assertEquals(48, Node.DIRECTIVES);
259:       assertEquals(52, Node.LENGTH);
260:       assertEquals(8, Node.FLAG_NO_THROWS);
261:       assertEquals(41, Node.BRACELESS_TYPE);
262:       assertEquals(54, Node.SLASH_V);
263:       assertEquals(49, Node.DIRECT_EVAL);
264:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
265:       assertEquals(1, Node.DECR_FLAG);
266:       assertEquals(4095, Node.COLUMN_MASK);
267:       assertEquals(32, Node.INCRDECR_PROP);
268:       assertEquals(12, Node.COLUMN_BITS);
269:       assertEquals(54, Node.LAST_PROP);
270:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
271:       assertEquals(29, Node.JSDOC_INFO_PROP);
272:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
273:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
274:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
275:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
276:       assertEquals(37, Node.OPT_ARG_NAME);
277:       assertEquals(53, Node.INPUT_ID);
278:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
279:       assertEquals(36, Node.QUOTED_PROP);
280:       assertEquals(43, Node.IS_CONSTANT_NAME);
281:       assertEquals(51, Node.STATIC_SOURCE_FILE);
282:       assertEquals(16, Node.SOURCENAME_PROP);
283:       assertEquals(46, Node.IS_NAMESPACE);
284:       assertEquals(30, Node.VAR_ARGS_NAME);
285:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
286:       assertEquals(35, Node.PARENTHESIZED_PROP);
287:       assertEquals(15, Node.NO_SIDE_EFFECTS);
288:       assertEquals(2, Node.POST_FLAG);
289:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
290:       assertEquals(47, Node.IS_DISPATCHER);
291:       assertFalse(boolean1);
292:       assertFalse(node0.isExprResult());
293:       assertFalse(node0.isScript());
294:       assertFalse(node0.isAnd());
295:       assertFalse(node0.isGetElem());
296:       assertFalse(node0.isWith());
297:       assertFalse(node0.isAssign());
298:       assertFalse(node0.isInstanceOf());
299:       assertFalse(node0.isTypeOf());
300:       assertFalse(node0.isComma());
301:       assertFalse(node0.isThis());
302:       assertFalse(node0.isFromExterns());
303:       assertFalse(node0.isDec());
304:       assertFalse(node0.isGetProp());
305:       assertFalse(node0.hasChildren());
306:       assertFalse(node0.isReturn());
307:       assertFalse(node0.isLabelName());
308:       assertFalse(node0.isObjectLit());
309:       assertFalse(node0.hasOneChild());
310:       assertFalse(node0.isNot());
311:       assertFalse(node0.isNumber());
312:       assertFalse(node0.isInc());
313:       assertFalse(node0.isBlock());
314:       assertEquals(53261, node0.getSourcePosition());
315:       assertFalse(node0.isThrow());
316:       assertFalse(node0.isHook());
317:       assertEquals(13, node0.getCharno());
318:       assertFalse(node0.isFalse());
319:       assertFalse(node0.hasMoreThanOneChild());
320:       assertFalse(node0.isContinue());
321:       assertFalse(node0.isSetterDef());
322:       assertFalse(node0.isIf());
323:       assertFalse(node0.isIn());
324:       assertFalse(node0.isTrue());
325:       assertFalse(node0.isFunction());
326:       assertFalse(node0.isRegExp());
327:       assertFalse(node0.isVoid());
328:       assertFalse(node0.isDebugger());
329:       assertFalse(node0.isTry());
330:       assertEquals(13, node0.getLineno());
331:       assertFalse(node0.isDefaultCase());
332:       assertFalse(node0.isCatch());
333:       assertFalse(node0.isArrayLit());
334:       assertEquals(0, node0.getChildCount());
335:       assertFalse(node0.isParamList());
336:       assertFalse(node0.isFor());
337:       assertFalse(node0.isStringKey());
338:       assertFalse(node0.isCase());
339:       assertEquals((-1), node0.getSourceOffset());
340:       assertFalse(node0.isString());
341:       assertFalse(node0.isGetterDef());
342:       assertFalse(node0.isNew());
343:       assertFalse(node0.isWhile());
344:       assertFalse(node0.isDo());
345:       assertFalse(node0.isSwitch());
346:       assertFalse(node0.isCall());
347:       assertFalse(node0.isVar());
348:       assertFalse(node0.isNull());
349:       assertFalse(node0.isBreak());
350:       assertFalse(node0.isLabel());
351:       assertEquals(13, node0.getType());
352:       assertFalse(node0.isDelProp());
353:       assertFalse(node0.isName());
354:       assertFalse(node0.isAssignAdd());
355:       assertNull(node0.getSourceFileName());
356:       assertFalse(node0.isOr());
357:       assertFalse(node0.isEmpty());
358:       assertFalse(node0.isAdd());
359:       assertTrue(node0.isNE());
360:       
361:       Iterable<Node> iterable0 = node0.children();
362:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
363:       assertEquals(50, Node.FREE_CALL);
364:       assertEquals(40, Node.ORIGINALNAME_PROP);
365:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
366:       assertEquals(39, Node.EMPTY_BLOCK);
367:       assertEquals(48, Node.DIRECTIVES);
368:       assertEquals(52, Node.LENGTH);
369:       assertEquals(8, Node.FLAG_NO_THROWS);
370:       assertEquals(41, Node.BRACELESS_TYPE);
371:       assertEquals(54, Node.SLASH_V);
372:       assertEquals(49, Node.DIRECT_EVAL);
373:       assertEquals(45, Node.IS_VAR_ARGS_PARAM);
374:       assertEquals(1, Node.DECR_FLAG);
375:       assertEquals(4095, Node.COLUMN_MASK);
376:       assertEquals(32, Node.INCRDECR_PROP);
377:       assertEquals(12, Node.COLUMN_BITS);
378:       assertEquals(54, Node.LAST_PROP);
379:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
380:       assertEquals(29, Node.JSDOC_INFO_PROP);
381:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
382:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
383:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
384:       assertEquals(44, Node.IS_OPTIONAL_PARAM);
385:       assertEquals(37, Node.OPT_ARG_NAME);
386:       assertEquals(53, Node.INPUT_ID);
387:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
388:       assertEquals(36, Node.QUOTED_PROP);
389:       assertEquals(43, Node.IS_CONSTANT_NAME);
390:       assertEquals(51, Node.STATIC_SOURCE_FILE);
391:       assertEquals(16, Node.SOURCENAME_PROP);
392:       assertEquals(46, Node.IS_NAMESPACE);
393:       assertEquals(30, Node.VAR_ARGS_NAME);
394:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
395:       assertEquals(35, Node.PARENTHESIZED_PROP);
396:       assertEquals(15, Node.NO_SIDE_EFFECTS);
397:       assertEquals(2, Node.POST_FLAG);
398:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
399:       assertEquals(47, Node.IS_DISPATCHER);
400:       assertFalse(iterable0.contains(node0));
401:       assertNotNull(iterable0);
402:       assertFalse(node0.isExprResult());
403:       assertFalse(node0.isScript());
404:       assertFalse(node0.isAnd());
405:       assertFalse(node0.isGetElem());
406:       assertFalse(node0.isWith());
407:       assertFalse(node0.isAssign());
408:       assertFalse(node0.isInstanceOf());
409:       assertFalse(node0.isTypeOf());
410:       assertFalse(node0.isComma());
411:       assertFalse(node0.isThis());
412:       assertFalse(node0.isFromExterns());
413:       assertFalse(node0.isDec());
414:       assertFalse(node0.isGetProp());
415:       assertFalse(node0.hasChildren());
416:       assertFalse(node0.isReturn());
417:       assertFalse(node0.isLabelName());
418:       assertFalse(node0.isObjectLit());
419:       assertFalse(node0.hasOneChild());
420:       assertFalse(node0.isNot());
421:       assertFalse(node0.isNumber());
422:       assertFalse(node0.isInc());
423:       assertFalse(node0.isBlock());
424:       assertEquals(53261, node0.getSourcePosition());
425:       assertFalse(node0.isThrow());
426:       assertFalse(node0.isHook());
427:       assertEquals(13, node0.getCharno());
428:       assertFalse(node0.isFalse());
429:       assertFalse(node0.hasMoreThanOneChild());
430:       assertFalse(node0.isContinue());
431:       assertFalse(node0.isSetterDef());
432:       assertFalse(node0.isIf());
433:       assertFalse(node0.isIn());
434:       assertFalse(node0.isTrue());
435:       assertFalse(node0.isFunction());
436:       assertFalse(node0.isRegExp());
437:       assertFalse(node0.isVoid());
438:       assertFalse(node0.isDebugger());
439:       assertFalse(node0.isTry());
440:       assertEquals(13, node0.getLineno());
441:       assertFalse(node0.isDefaultCase());
442:       assertFalse(node0.isCatch());
443:       assertFalse(node0.isArrayLit());
444:       assertEquals(0, node0.getChildCount());
445:       assertFalse(node0.isParamList());
446:       assertFalse(node0.isFor());
447:       assertFalse(node0.isStringKey());
448:       assertFalse(node0.isCase());
449:       assertEquals((-1), node0.getSourceOffset());
450:       assertFalse(node0.isString());
451:       assertFalse(node0.isGetterDef());
452:       assertFalse(node0.isNew());
453:       assertFalse(node0.isWhile());
454:       assertFalse(node0.isDo());
455:       assertFalse(node0.isSwitch());
456:       assertFalse(node0.isCall());
457:       assertFalse(node0.isVar());
458:       assertFalse(node0.isNull());
459:       assertFalse(node0.isBreak());
460:       assertFalse(node0.isLabel());
461:       assertEquals(13, node0.getType());
462:       assertFalse(node0.isDelProp());
463:       assertFalse(node0.isName());
464:       assertFalse(node0.isAssignAdd());
465:       assertNull(node0.getSourceFileName());
466:       assertFalse(node0.isOr());
467:       assertFalse(node0.isEmpty());
468:       assertFalse(node0.isAdd());
469:       assertTrue(node0.isNE());
470:       
471:       Locale locale0 = Locale.ENGLISH;
472:       assertNotNull(locale0);
473:       assertEquals("en", locale0.getLanguage());
474:       assertEquals("eng", locale0.getISO3Language());
475:       assertEquals("", locale0.getISO3Country());
476:       assertEquals("", locale0.getCountry());
477:       assertEquals("", locale0.getVariant());
478:       assertEquals("en", locale0.toString());
479:       
480:       Locale locale1 = Locale.CHINESE;
481:       assertFalse(locale1.equals((Object)locale0));
482:       assertNotSame(locale1, locale0);
483:       assertNotNull(locale1);
484:       assertEquals("", locale1.getCountry());
485:       assertEquals("", locale1.getVariant());
486:       assertEquals("", locale1.getISO3Country());
487:       assertEquals("zh", locale1.getLanguage());
488:       assertEquals("zh", locale1.toString());
489:       assertEquals("zho", locale1.getISO3Language());
490:       
491:       Set<String> set0 = locale0.getUnicodeLocaleKeys();
492:       assertFalse(locale0.equals((Object)locale1));
493:       assertNotSame(locale0, locale1);
494:       assertNotNull(set0);
495:       assertEquals("en", locale0.getLanguage());
496:       assertEquals("eng", locale0.getISO3Language());
497:       assertEquals("", locale0.getISO3Country());
498:       assertEquals("", locale0.getCountry());
499:       assertEquals("", locale0.getVariant());
500:       assertEquals("en", locale0.toString());
501:       assertEquals(0, set0.size());
502:       assertTrue(set0.isEmpty());
503:       
504:       Locale locale2 = Locale.FRENCH;
505:       assertFalse(locale2.equals((Object)locale0));
506:       assertFalse(locale2.equals((Object)locale1));
507:       assertNotSame(locale2, locale0);
508:       assertNotSame(locale2, locale1);
509:       assertNotNull(locale2);
510:       assertEquals("fr", locale2.toString());
511:       assertEquals("fra", locale2.getISO3Language());
512:       assertEquals("", locale2.getCountry());
513:       assertEquals("", locale2.getVariant());
514:       assertEquals("", locale2.getISO3Country());
515:       assertEquals("fr", locale2.getLanguage());
516:       
517:       Locale locale3 = locale2.stripExtensions();
518:       assertFalse(locale2.equals((Object)locale0));
519:       assertFalse(locale2.equals((Object)locale1));
520:       assertFalse(locale3.equals((Object)locale1));
521:       assertFalse(locale3.equals((Object)locale0));
522:       assertNotSame(locale2, locale0);
523:       assertNotSame(locale2, locale1);
524:       assertSame(locale2, locale3);
525:       assertNotSame(locale3, locale1);
526:       assertNotSame(locale3, locale0);
527:       assertSame(locale3, locale2);
528:       assertNotNull(locale3);
529:       assertEquals("fr", locale2.toString());
530:       assertEquals("fra", locale2.getISO3Language());
531:       assertEquals("", locale2.getCountry());
532:       assertEquals("", locale2.getVariant());
533:       assertEquals("", locale2.getISO3Country());
534:       assertEquals("fr", locale2.getLanguage());
535:       assertEquals("", locale3.getCountry());
536:       assertEquals("", locale3.getVariant());
537:       assertEquals("fra", locale3.getISO3Language());
538:       assertEquals("fr", locale3.toString());
539:       assertEquals("fr", locale3.getLanguage());
540:       assertEquals("", locale3.getISO3Country());
541:       
542:       Set<String> set1 = locale2.getUnicodeLocaleKeys();
543:       assertFalse(locale2.equals((Object)locale0));
544:       assertFalse(locale2.equals((Object)locale1));
545:       assertNotSame(locale2, locale0);
546:       assertNotSame(locale2, locale1);
547:       assertSame(locale2, locale3);
548:       assertSame(set1, set0);
549:       assertNotNull(set1);
550:       assertEquals("fr", locale2.toString());
551:       assertEquals("fra", locale2.getISO3Language());
552:       assertEquals("", locale2.getCountry());
553:       assertEquals("", locale2.getVariant());
554:       assertEquals("", locale2.getISO3Country());
555:       assertEquals("fr", locale2.getLanguage());
556:       assertEquals(0, set1.size());
557:       assertTrue(set1.isEmpty());
558:       
559:       // Undeclared exception!
560:       try { 
561:         NodeUtil.isValidDefineValue(node0, set1);
562:         fail("Expecting exception: NullPointerException");
563:       
564:       } catch(NullPointerException e) {
565:          //
566:          // no message in exception (getMessage() returned null)
567:          //
568:          verifyException("com.google.javascript.jscomp.NodeUtil", e);
569:       }
570:   }
571: }
RegularFileObject[/tmp/EvoSuite_194_1566407501742/com/google/javascript/jscomp/NodeUtil_194_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Aug 21 17:11:41 GMT 2019
5:  */
6: 
7: package com.google.javascript.jscomp;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NodeUtil_194_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.jscomp.NodeUtil"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/rq3/botsing-integration-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NodeUtil_194_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "com.google.common.collect.ArrayListMultimap",
82:       "com.google.javascript.jscomp.Tracer$1",
83:       "com.google.common.collect.Collections2",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.jscomp.NodeTraversal$Callback",
86:       "com.google.javascript.rhino.head.jdk13.VMBridge_jdk13",
87:       "com.google.javascript.jscomp.CheckSideEffects",
88:       "com.google.javascript.rhino.head.ast.Yield",
89:       "com.google.javascript.jscomp.SimpleDefinitionFinder",
90:       "com.google.javascript.jscomp.graph.Graph",
91:       "com.google.javascript.rhino.jstype.StaticScope",
92:       "com.google.javascript.rhino.jstype.InstanceObjectType",
93:       "com.google.javascript.jscomp.graph.Annotatable",
94:       "com.google.common.collect.AbstractMapBasedMultiset$1",
95:       "com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher",
96:       "com.google.javascript.jscomp.JSModule",
97:       "com.google.javascript.rhino.jstype.ObjectType",
98:       "com.google.common.collect.ImmutableSet$ArrayImmutableSet",
99:       "com.google.common.collect.RegularImmutableMap",
100:       "com.google.javascript.rhino.jstype.RecordType",
101:       "com.google.javascript.rhino.Node$NodeMismatch",
102:       "com.google.javascript.rhino.head.ast.Jump",
103:       "com.google.javascript.jscomp.Tracer",
104:       "com.google.javascript.jscomp.PeepholeSimplifyRegExp",
105:       "com.google.javascript.jscomp.HotSwapCompilerPass",
106:       "com.google.javascript.jscomp.SourceFile$Builder",
107:       "com.google.javascript.jscomp.CodingConvention$SubclassType",
108:       "com.google.javascript.rhino.jstype.JSType$1",
109:       "com.google.javascript.jscomp.CodingConvention",
110:       "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
111:       "com.google.javascript.jscomp.SourceMap$DetailLevel",
112:       "com.google.javascript.jscomp.MemoizedScopeCreator",
113:       "com.google.javascript.rhino.head.ast.EmptyStatement",
114:       "com.google.javascript.jscomp.CompilerOptions$1",
115:       "com.google.common.base.Joiner",
116:       "com.google.javascript.jscomp.CheckAccessControls",
117:       "com.google.javascript.jscomp.CheckDebuggerStatement",
118:       "com.google.common.collect.SingletonImmutableMap",
119:       "com.google.javascript.jscomp.CleanupPasses",
120:       "com.google.javascript.rhino.head.ast.XmlFragment",
121:       "com.google.javascript.rhino.jstype.ProxyObjectType",
122:       "com.google.javascript.jscomp.CompilerOptions$Reach",
123:       "com.google.javascript.rhino.head.ast.CatchClause",
124:       "com.google.javascript.jscomp.PassConfig$State",
125:       "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
126:       "com.google.javascript.rhino.InputId",
127:       "com.google.common.collect.RegularImmutableMap$LinkedEntry",
128:       "com.google.common.collect.Lists$Partition",
129:       "com.google.javascript.rhino.head.ast.AstRoot",
130:       "com.google.javascript.rhino.head.ast.NewExpression",
131:       "com.google.javascript.rhino.ErrorReporter",
132:       "com.google.javascript.rhino.jstype.ValueType",
133:       "com.google.javascript.rhino.Token",
134:       "com.google.javascript.rhino.head.ast.ParenthesizedExpression",
135:       "com.google.javascript.jscomp.VerboseMessageFormatter",
136:       "com.google.javascript.rhino.jstype.BooleanType",
137:       "com.google.javascript.jscomp.CssRenamingMap",
138:       "com.google.javascript.rhino.head.Context$ClassShutterSetter",
139:       "com.google.common.base.CharMatcher$5",
140:       "com.google.common.base.CharMatcher$4",
141:       "com.google.common.base.CharMatcher$3",
142:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$ContextualRenamer",
143:       "com.google.common.base.CharMatcher$2",
144:       "com.google.common.base.CharMatcher$9",
145:       "com.google.common.base.CharMatcher$8",
146:       "com.google.common.base.CharMatcher$7",
147:       "com.google.javascript.rhino.head.ast.Label",
148:       "com.google.common.base.CharMatcher$6",
149:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
150:       "com.google.javascript.jscomp.SuppressDocWarningsGuard",
151:       "com.google.javascript.jscomp.MessageFormatter",
152:       "com.google.javascript.rhino.JSDocInfo",
153:       "com.google.javascript.jscomp.SourceExcerptProvider$ExcerptFormatter",
154:       "com.google.common.base.CharMatcher$1",
155:       "com.google.javascript.jscomp.parsing.Config",
156:       "com.google.common.collect.EmptyImmutableList",
157:       "com.google.common.collect.ImmutableEntry",
158:       "com.google.javascript.rhino.head.CompilerEnvirons",
159:       "com.google.common.base.Joiner$1",
160:       "com.google.common.base.Joiner$2",
161:       "com.google.javascript.jscomp.ErrorHandler",
162:       "com.google.javascript.rhino.head.Callable",
163:       "com.google.javascript.jscomp.GoogleCodingConvention",
164:       "com.google.javascript.jscomp.SourceFile$Preloaded",
165:       "com.google.common.collect.ImmutableCollection",
166:       "com.google.javascript.rhino.ScriptRuntime",
167:       "com.google.javascript.rhino.head.ast.ScriptNode",
168:       "com.google.javascript.rhino.head.ast.XmlString",
169:       "com.google.javascript.jscomp.StrictModeCheck",
170:       "com.google.javascript.rhino.head.ast.WhileLoop",
171:       "com.google.javascript.jscomp.DefinitionsRemover$Definition",
172:       "com.google.javascript.jscomp.Result",
173:       "com.google.javascript.jscomp.CodingConventions$1",
174:       "com.google.javascript.jscomp.CodingConvention$ObjectLiteralCast",
175:       "com.google.javascript.jscomp.CodingConvention$SubclassRelationship",
176:       "com.google.javascript.jscomp.CompilerPass",
177:       "com.google.javascript.rhino.jstype.EnumElementType",
178:       "com.google.javascript.jscomp.NodeUtil$MatchDeclaration",
179:       "com.google.javascript.jscomp.NodeUtil$VarCollector",
180:       "com.google.javascript.jscomp.VariableRenamingPolicy",
181:       "com.google.javascript.rhino.head.ast.IfStatement",
182:       "com.google.javascript.jscomp.CodeChangeHandler",
183:       "com.google.common.collect.Lists$AbstractListWrapper",
184:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$Renamer",
185:       "com.google.javascript.jscomp.FunctionTypeBuilder",
186:       "com.google.javascript.jscomp.FunctionInformationMap",
187:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
188:       "com.google.common.collect.AbstractMapBasedMultiset",
189:       "com.google.javascript.jscomp.NodeUtil$MayBeStringResultPredicate",
190:       "com.google.javascript.rhino.jstype.EnumType",
191:       "com.google.javascript.jscomp.JsMessageVisitor$MalformedException",
192:       "com.google.javascript.rhino.head.Evaluator",
193:       "com.google.javascript.jscomp.CodingConventions$DefaultCodingConvention",
194:       "com.google.common.base.CharMatcher$LookupTable",
195:       "com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection",
196:       "com.google.javascript.rhino.head.ast.XmlElemRef",
197:       "com.google.javascript.rhino.head.ast.VariableDeclaration",
198:       "com.google.javascript.rhino.head.TokenStream",
199:       "com.google.common.collect.RegularImmutableList$1",
200:       "com.google.javascript.rhino.head.ast.ObjectLiteral",
201:       "com.google.common.collect.Lists$2",
202:       "com.google.javascript.jscomp.JSSourceFile",
203:       "com.google.javascript.jscomp.CodingConventions",
204:       "com.google.common.collect.Lists$1",
205:       "com.google.javascript.rhino.jstype.StaticReference",
206:       "com.google.common.collect.Multiset",
207:       "com.google.javascript.rhino.head.ast.InfixExpression",
208:       "com.google.javascript.rhino.head.BaseFunction",
209:       "com.google.common.base.Supplier",
210:       "com.google.javascript.jscomp.FindExportableNodes",
211:       "com.google.protobuf.MessageOrBuilder",
212:       "com.google.javascript.jscomp.GlobalVarReferenceMap",
213:       "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
214:       "com.google.javascript.rhino.head.ast.XmlPropRef",
215:       "com.google.javascript.jscomp.TypeValidator",
216:       "com.google.common.collect.ImmutableList",
217:       "com.google.protobuf.GeneratedMessage",
218:       "com.google.javascript.rhino.Node$AbstractPropListItem",
219:       "com.google.javascript.rhino.jstype.ObjectType$Property",
220:       "com.google.javascript.jscomp.Tracer$InternalClock",
221:       "com.google.common.collect.AbstractMultimap$KeySet",
222:       "com.google.javascript.jscomp.SourceMap$LocationMapping",
223:       "com.google.javascript.rhino.head.ast.VariableInitializer",
224:       "com.google.javascript.rhino.jstype.NoResolvedType",
225:       "com.google.javascript.rhino.head.ast.ThrowStatement",
226:       "com.google.protobuf.MessageLiteOrBuilder",
227:       "com.google.javascript.jscomp.NodeTraversal$AbstractNodeTypePruningCallback",
228:       "com.google.javascript.jscomp.DefaultPassConfig$99",
229:       "com.google.protobuf.MessageLite",
230:       "com.google.javascript.jscomp.DefaultPassConfig$98",
231:       "com.google.common.collect.Maps$EntryTransformer",
232:       "com.google.javascript.jscomp.DefaultPassConfig$95",
233:       "com.google.javascript.jscomp.DefaultPassConfig$94",
234:       "com.google.javascript.jscomp.DefaultPassConfig$96",
235:       "com.google.javascript.jscomp.CustomPassExecutionTime",
236:       "com.google.javascript.jscomp.DefaultPassConfig$91",
237:       "com.google.javascript.jscomp.SyntacticScopeCreator",
238:       "com.google.javascript.jscomp.DefaultPassConfig$90",
239:       "com.google.javascript.jscomp.DefaultPassConfig$93",
240:       "com.google.javascript.jscomp.DefaultPassConfig$92",
241:       "com.google.javascript.rhino.head.debug.DebuggableScript",
242:       "com.google.javascript.jscomp.CompilerOptions$TweakProcessing",
243:       "com.google.common.collect.Hashing",
244:       "com.google.javascript.rhino.head.DefaultErrorReporter",
245:       "com.google.javascript.rhino.jstype.NoType",
246:       "com.google.javascript.jscomp.SourceMap$Format",
247:       "com.google.javascript.rhino.head.Script",
248:       "com.google.common.collect.AbstractMultimap$WrappedCollection",
249:       "com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider",
250:       "com.google.javascript.rhino.TokenStream",
251:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
252:       "com.google.javascript.jscomp.DefaultPassConfig$88",
253:       "com.google.javascript.jscomp.DefaultPassConfig$87",
254:       "com.google.javascript.jscomp.DefaultPassConfig$89",
255:       "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments",
256:       "com.google.javascript.rhino.head.ast.Comment",
257:       "com.google.javascript.jscomp.DefaultPassConfig$84",
258:       "com.google.javascript.jscomp.DefaultPassConfig$83",
259:       "com.google.javascript.jscomp.DefaultPassConfig$86",
260:       "com.google.javascript.jscomp.DefaultPassConfig$85",
261:       "com.google.javascript.jscomp.CodingConventions$Proxy",
262:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt",
263:       "com.google.javascript.jscomp.DefaultPassConfig$80",
264:       "com.google.javascript.jscomp.StatementFusion",
265:       "com.google.javascript.jscomp.DefaultPassConfig$82",
266:       "com.google.javascript.jscomp.DefaultPassConfig$81",
267:       "com.google.common.collect.LinkedHashMultimap",
268:       "com.google.javascript.rhino.head.optimizer.Codegen",
269:       "com.google.javascript.rhino.head.ast.FunctionCall",
270:       "com.google.javascript.jscomp.RhinoErrorReporter$NewRhinoErrorReporter",
271:       "com.google.javascript.jscomp.NodeUtil",
272:       "com.google.common.collect.RegularImmutableSet",
273:       "com.google.javascript.jscomp.JsMessageVisitor",
274:       "com.google.javascript.jscomp.DefaultPassConfig$77",
275:       "com.google.javascript.jscomp.DefaultPassConfig$76",
276:       "com.google.javascript.jscomp.DefaultPassConfig$79",
277:       "com.google.javascript.jscomp.DefaultPassConfig$78",
278:       "com.google.javascript.jscomp.DefaultPassConfig$73",
279:       "com.google.javascript.jscomp.DefaultPassConfig$72",
280:       "com.google.javascript.rhino.head.EcmaError",
281:       "com.google.javascript.rhino.head.FunctionObject",
282:       "com.google.javascript.jscomp.DefaultPassConfig$75",
283:       "com.google.javascript.jscomp.DefaultPassConfig$74",
284:       "com.google.javascript.jscomp.DefaultPassConfig$71",
285:       "com.google.javascript.jscomp.DefaultPassConfig$70",
286:       "com.google.javascript.rhino.head.NativeContinuation",
287:       "com.google.javascript.rhino.head.xml.XMLObject",
288:       "com.google.javascript.rhino.head.Node$NodeIterator",
289:       "com.google.common.collect.ImmutableAsList",
290:       "com.google.javascript.jscomp.PassConfig",
291:       "com.google.common.collect.SingletonImmutableSet",
292:       "com.google.javascript.jscomp.Normalize$NormalizeStatements",
293:       "com.google.javascript.jscomp.AbstractMessageFormatter$Color",
294:       "com.google.javascript.jscomp.DefaultPassConfig$69",
295:       "com.google.javascript.rhino.head.InterpretedFunction",
296:       "com.google.javascript.jscomp.DefaultPassConfig$66",
297:       "com.google.javascript.jscomp.DefaultPassConfig$65",
298:       "com.google.javascript.jscomp.DefaultPassConfig$68",
299:       "com.google.javascript.jscomp.DefaultPassConfig$67",
300:       "com.google.javascript.rhino.jstype.ParameterizedType",
301:       "com.google.javascript.jscomp.DefaultPassConfig$62",
302:       "com.google.javascript.jscomp.DefaultPassConfig$61",
303:       "com.google.javascript.rhino.Node$SideEffectFlags",
304:       "com.google.javascript.jscomp.DefaultPassConfig$64",
305:       "com.google.javascript.jscomp.ReferenceCollectingCallback",
306:       "com.google.javascript.jscomp.DefaultPassConfig$63",
307:       "com.google.javascript.jscomp.DefaultPassConfig$60",
308:       "com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceMap",
309:       "com.google.javascript.rhino.jstype.NullType",
310:       "com.google.javascript.jscomp.LightweightMessageFormatter",
311:       "com.google.common.collect.EmptyImmutableList$1",
312:       "com.google.javascript.jscomp.FunctionInformationMapOrBuilder",
313:       "com.google.javascript.jscomp.Compiler$CodeBuilder",
314:       "com.google.javascript.jscomp.DefaultPassConfig$HotSwapPassFactory",
315:       "com.google.javascript.jscomp.InlineSimpleMethods$1",
316:       "com.google.javascript.rhino.jstype.NoObjectType",
317:       "com.google.common.collect.AbstractIterator",
318:       "com.google.javascript.rhino.head.ScriptableObject$GetterSlot",
319:       "com.google.javascript.jscomp.BasicErrorManager$ErrorWithLevel",
320:       "com.google.common.base.CharMatcher$And",
321:       "com.google.javascript.jscomp.DiagnosticType",
322:       "com.google.javascript.jscomp.DefaultPassConfig$59",
323:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler$NullAliasTransformation",
324:       "com.google.javascript.jscomp.DefaultPassConfig$58",
325:       "com.google.javascript.jscomp.graph.DiGraph$DiGraphNode",
326:       "com.google.javascript.jscomp.PrepareAst",
327:       "com.google.javascript.rhino.head.ast.ForLoop",
328:       "com.google.javascript.jscomp.DefaultPassConfig$55",
329:       "com.google.javascript.jscomp.DefaultPassConfig$54",
330:       "com.google.javascript.jscomp.DefaultPassConfig$57",
331:       "com.google.common.io.OutputSupplier",
332:       "com.google.javascript.jscomp.DefaultPassConfig$56",
333:       "com.google.javascript.jscomp.DefaultPassConfig$51",
334:       "com.google.javascript.jscomp.DefaultPassConfig$50",
335:       "com.google.javascript.jscomp.CompilerInput",
336:       "com.google.javascript.jscomp.DefaultPassConfig$53",
337:       "com.google.javascript.rhino.head.ast.FunctionNode",
338:       "com.google.javascript.jscomp.DefaultPassConfig$52",
339:       "com.google.javascript.jscomp.AbstractCompiler",
340:       "com.google.common.collect.UnmodifiableIterator",
341:       "com.google.javascript.jscomp.ExploitAssigns",
342:       "com.google.javascript.rhino.head.Context",
343:       "com.google.common.io.InputSupplier",
344:       "com.google.common.collect.ImmutableSet$TransformedImmutableSet",
345:       "com.google.javascript.jscomp.DiagnosticGroup",
346:       "com.google.common.collect.AbstractMultimap$WrappedList",
347:       "com.google.javascript.jscomp.CodeChangeHandler$RecentChange",
348:       "com.google.javascript.jscomp.NodeUtil$Visitor",
349:       "com.google.javascript.jscomp.SyntacticScopeCreator$RedeclarationHandler",
350:       "com.google.javascript.rhino.head.NativeBoolean",
351:       "com.google.javascript.jscomp.DefaultPassConfig$48",
352:       "com.google.javascript.rhino.Node$AncestorIterable",
353:       "com.google.common.collect.AbstractMultimap$RandomAccessWrappedList",
354:       "com.google.javascript.rhino.head.ast.Name",
355:       "com.google.javascript.jscomp.DefaultPassConfig$47",
356:       "com.google.common.collect.ImmutableEnumSet",
357:       "com.google.javascript.jscomp.DefaultPassConfig$49",
358:       "com.google.javascript.jscomp.DefaultPassConfig$44",
359:       "com.google.javascript.jscomp.DefaultPassConfig$43",
360:       "com.google.javascript.jscomp.DefaultPassConfig$46",
361:       "com.google.javascript.jscomp.DefaultPassConfig$45",
362:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax$1",
363:       "com.google.javascript.jscomp.DefaultPassConfig$40",
364:       "com.google.common.collect.HashMultiset",
365:       "com.google.javascript.rhino.jstype.UnresolvedTypeExpression",
366:       "com.google.javascript.jscomp.DefaultPassConfig$42",
367:       "com.google.javascript.jscomp.DefaultPassConfig$41",
368:       "com.google.protobuf.AbstractMessageLite",
369:       "com.google.javascript.jscomp.ErrorManager",
370:       "com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate",
371:       "com.google.common.collect.SingletonImmutableList",
372:       "com.google.javascript.rhino.head.ast.ConditionalExpression",
373:       "com.google.javascript.jscomp.CheckLevel",
374:       "com.google.javascript.rhino.jstype.StaticSlot",
375:       "com.google.javascript.rhino.head.ast.PropertyGet",
376:       "com.google.common.collect.AbstractSetMultimap",
377:       "com.google.javascript.rhino.head.ContextFactory",
378:       "com.google.common.base.Function",
379:       "com.google.javascript.rhino.head.VMBridge",
380:       "com.google.common.collect.ImmutableMap",
381:       "com.google.javascript.jscomp.CodeChangeHandler$ForbiddenChange",
382:       "com.google.common.collect.Multiset$Entry",
383:       "com.google.javascript.jscomp.DefaultPassConfig$37",
384:       "com.google.javascript.jscomp.DefaultPassConfig$36",
385:       "com.google.javascript.jscomp.DefaultPassConfig$39",
386:       "com.google.javascript.jscomp.DefaultPassConfig$38",
387:       "com.google.javascript.jscomp.DefaultPassConfig$33",
388:       "com.google.javascript.jscomp.DefaultPassConfig$32",
389:       "com.google.javascript.jscomp.DefaultPassConfig$35",
390:       "com.google.javascript.jscomp.InlineSimpleMethods",
391:       "com.google.javascript.jscomp.DefaultPassConfig$34",
392:       "com.google.javascript.rhino.head.ast.Loop",
393:       "com.google.javascript.jscomp.DefaultPassConfig$31",
394:       "com.google.javascript.jscomp.CrossModuleMethodMotion$IdGenerator",
395:       "com.google.javascript.jscomp.Region",
396:       "com.google.javascript.jscomp.DefaultPassConfig$30",
397:       "com.google.javascript.jscomp.MethodCompilerPass$SignatureStore",
398:       "com.google.javascript.rhino.IR",
399:       "com.google.javascript.rhino.head.ast.GeneratorExpressionLoop",
400:       "com.google.javascript.jscomp.NodeTraversal$AbstractPostOrderCallback",
401:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
402:       "com.google.javascript.jscomp.DefaultPassConfig",
403:       "com.google.javascript.jscomp.Normalize",
404:       "com.google.javascript.jscomp.CompilerOptions$TracerMode",
405:       "com.google.javascript.jscomp.RhinoErrorReporter$OldRhinoErrorReporter",
406:       "com.google.javascript.jscomp.DefinitionProvider",
407:       "com.google.javascript.jscomp.ReferenceCollectingCallback$1",
408:       "com.google.common.collect.AbstractMultiset",
409:       "com.google.javascript.jscomp.DefaultPassConfig$29",
410:       "com.google.javascript.jscomp.DefaultPassConfig$26",
411:       "com.google.javascript.jscomp.DefaultPassConfig$25",
412:       "com.google.common.collect.Iterators",
413:       "com.google.javascript.jscomp.DefaultPassConfig$28",
414:       "com.google.javascript.rhino.head.IdFunctionCall",
415:       "com.google.javascript.jscomp.DefaultPassConfig$27",
416:       "com.google.javascript.jscomp.DefaultPassConfig$22",
417:       "com.google.javascript.jscomp.DefaultPassConfig$21",
418:       "com.google.javascript.jscomp.DefaultPassConfig$24",
419:       "com.google.javascript.jscomp.DefaultPassConfig$23",
420:       "com.google.javascript.jscomp.ProcessTweaks$TweakFunction",
421:       "com.google.javascript.rhino.head.ast.SwitchStatement",
422:       "com.google.javascript.jscomp.DependencyOptions",
423:       "com.google.common.collect.Multisets$EntrySet",
424:       "com.google.javascript.jscomp.DefaultPassConfig$20",
425:       "com.google.javascript.rhino.head.ast.DoLoop",
426:       "com.google.javascript.jscomp.SourceFile$OnDisk",
427:       "com.google.javascript.rhino.head.ScriptRuntime",
428:       "com.google.javascript.jscomp.DefaultPassConfig$19",
429:       "com.google.javascript.jscomp.DefaultPassConfig$18",
430:       "com.google.javascript.rhino.jstype.JSTypeNative",
431:       "com.google.javascript.rhino.jstype.AllType",
432:       "com.google.javascript.jscomp.DefaultPassConfig$15",
433:       "com.google.common.collect.Maps",
434:       "com.google.common.primitives.Ints",
435:       "com.google.javascript.jscomp.DefaultPassConfig$14",
436:       "com.google.javascript.jscomp.NodeTraversal$AbstractShallowStatementCallback",
437:       "com.google.common.collect.SetMultimap",
438:       "com.google.javascript.rhino.head.ast.ExpressionStatement",
439:       "com.google.javascript.jscomp.DefaultPassConfig$17",
440:       "com.google.javascript.jscomp.DefaultPassConfig$16",
441:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
442:       "com.google.javascript.jscomp.DefaultPassConfig$7",
443:       "com.google.javascript.jscomp.DefaultPassConfig$11",
444:       "com.google.javascript.jscomp.DefaultPassConfig$8",
445:       "com.google.javascript.jscomp.DefaultPassConfig$10",
446:       "com.google.javascript.jscomp.DefaultPassConfig$5",
447:       "com.google.javascript.jscomp.DefaultPassConfig$13",
448:       "com.google.javascript.jscomp.DefaultPassConfig$6",
449:       "com.google.javascript.jscomp.DefaultPassConfig$12",
450:       "com.google.javascript.rhino.JSTypeExpression",
451:       "com.google.javascript.jscomp.DefaultPassConfig$9",
452:       "com.google.javascript.jscomp.PrintStreamErrorManager",
453:       "com.google.javascript.jscomp.Tracer$Stat",
454:       "com.google.javascript.rhino.head.ScriptableObject",
455:       "com.google.javascript.rhino.head.IdScriptableObject",
456:       "com.google.javascript.rhino.head.NativeFunction",
457:       "com.google.common.collect.RegularImmutableMap$Values",
458:       "com.google.javascript.jscomp.DefaultPassConfig$3",
459:       "com.google.javascript.jscomp.DefaultPassConfig$4",
460:       "com.google.javascript.jscomp.DefaultPassConfig$1",
461:       "com.google.javascript.jscomp.DefaultPassConfig$2",
462:       "com.google.javascript.rhino.head.ast.ObjectProperty",
463:       "com.google.javascript.rhino.head.Icode",
464:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
465:       "com.google.javascript.jscomp.type.ReverseAbstractInterpreter",
466:       "com.google.javascript.jscomp.CompilerOptions$LanguageMode",
467:       "com.google.javascript.rhino.head.ast.UnaryExpression",
468:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
469:       "com.google.javascript.rhino.jstype.ArrowType",
470:       "com.google.javascript.rhino.SimpleErrorReporter",
471:       "com.google.common.collect.Lists$RandomAccessPartition",
472:       "com.google.javascript.rhino.head.WrappedException",
473:       "com.google.javascript.jscomp.graph.GraphNode",
474:       "com.google.javascript.rhino.jstype.NumberType",
475:       "com.google.javascript.rhino.head.debug.DebuggableObject",
476:       "com.google.javascript.rhino.head.Function",
477:       "com.google.javascript.jscomp.PassFactory",
478:       "com.google.common.collect.Sets$2",
479:       "com.google.javascript.rhino.Node$IntPropListItem",
480:       "com.google.common.collect.Sets$3",
481:       "com.google.javascript.rhino.head.ast.LetNode",
482:       "com.google.common.collect.Sets$1",
483:       "com.google.javascript.jscomp.parsing.IRFactory$1",
484:       "com.google.javascript.jscomp.ControlFlowGraph",
485:       "com.google.javascript.jscomp.graph.GraphvizGraph",
486:       "com.google.javascript.rhino.head.ContextFactory$Listener",
487:       "com.google.javascript.rhino.head.NativeCall",
488:       "com.google.javascript.rhino.jstype.ModificationVisitor",
489:       "com.google.common.collect.AbstractMapEntry",
490:       "com.google.javascript.rhino.Node$AncestorIterable$1",
491:       "com.google.common.collect.Iterators$12",
492:       "com.google.common.collect.Iterators$11",
493:       "com.google.javascript.jscomp.ClosureCodingConvention",
494:       "com.google.common.base.Predicate",
495:       "com.google.common.collect.AbstractMultimap$AsMap",
496:       "com.google.javascript.jscomp.ControlStructureCheck",
497:       "com.google.javascript.jscomp.VariableReferenceCheck",
498:       "com.google.javascript.jscomp.WarningsGuard",
499:       "com.google.javascript.jscomp.SourceMap",
500:       "com.google.javascript.rhino.head.ast.ForInLoop",
501:       "com.google.javascript.jscomp.Tracer$AtomicTracerStatMap",
502:       "com.google.javascript.jscomp.Normalize$ScopeTicklingCallback",
503:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
504:       "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
505:       "com.google.javascript.jscomp.LightweightMessageFormatter$LineNumberingFormatter",
506:       "com.google.common.collect.AbstractListMultimap",
507:       "com.google.javascript.jscomp.CompilerOptions",
508:       "com.google.javascript.rhino.Node$StringNode",
509:       "com.google.javascript.rhino.jstype.TemplateType",
510:       "com.google.javascript.rhino.jstype.NamedType",
511:       "com.google.common.collect.Iterators$14",
512:       "com.google.common.collect.Iterators$13",
513:       "com.google.common.collect.Lists",
514:       "com.google.javascript.jscomp.CheckProvides",
515:       "com.google.javascript.rhino.head.ast.Block",
516:       "com.google.common.collect.UnmodifiableListIterator",
517:       "com.google.javascript.rhino.head.ast.SwitchCase",
518:       "com.google.common.io.ByteArrayDataInput",
519:       "com.google.javascript.jscomp.RhinoErrorReporter",
520:       "com.google.javascript.jscomp.CompilerOptions$AliasTransformation",
521:       "com.google.javascript.rhino.jstype.UnknownType",
522:       "com.google.common.base.Charsets",
523:       "com.google.javascript.rhino.head.ast.StringLiteral",
524:       "com.google.javascript.jscomp.CheckGlobalNames",
525:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
526:       "com.google.javascript.rhino.jstype.StaticSourceFile",
527:       "org.mozilla.classfile.ClassFileWriter$ClassFileFormatException",
528:       "com.google.javascript.rhino.head.ScriptableObject$Slot",
529:       "com.google.javascript.rhino.head.ast.ReturnStatement",
530:       "com.google.common.base.CharMatcher",
531:       "com.google.javascript.rhino.jstype.JSType$TypePair",
532:       "com.google.common.base.Joiner$MapJoiner",
533:       "com.google.javascript.jscomp.CheckRegExp",
534:       "com.google.javascript.jscomp.CheckGlobalThis",
535:       "com.google.common.collect.RegularImmutableMap$NonTerminalEntry",
536:       "com.google.common.collect.AbstractMultiset$EntrySet",
537:       "com.google.javascript.jscomp.UnreachableCodeElimination",
538:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt$2",
539:       "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
540:       "com.google.common.base.Preconditions",
541:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt$1",
542:       "com.google.javascript.rhino.head.ast.ArrayLiteral",
543:       "com.google.javascript.rhino.head.ast.RegExpLiteral",
544:       "com.google.javascript.jscomp.BasicErrorManager",
545:       "com.google.javascript.jscomp.SourceFile$Generator",
546:       "com.google.javascript.jscomp.PerformanceTracker",
547:       "com.google.javascript.rhino.jstype.IndexedType",
548:       "com.google.javascript.jscomp.NodeUtil$MatchNodeType",
549:       "com.google.javascript.jscomp.ComposeWarningsGuard$GuardComparator",
550:       "com.google.javascript.jscomp.ProcessDefines",
551:       "com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph",
552:       "com.google.javascript.rhino.head.NativeArray",
553:       "com.google.javascript.rhino.Node$NumberNode",
554:       "com.google.javascript.jscomp.Scope",
555:       "com.google.common.io.ByteArrayDataOutput",
556:       "com.google.javascript.rhino.head.Parser",
557:       "com.google.javascript.jscomp.ErrorFormat$2",
558:       "com.google.common.collect.Iterators$6",
559:       "com.google.javascript.jscomp.ReferenceCollectingCallback$Reference",
560:       "com.google.javascript.jscomp.ErrorFormat$3",
561:       "com.google.common.collect.BiMap",
562:       "com.google.common.collect.Iterators$7",
563:       "com.google.javascript.rhino.head.NativeString",
564:       "com.google.javascript.jscomp.ErrorFormat$4",
565:       "com.google.javascript.rhino.head.ast.XmlRef",
566:       "com.google.common.collect.ImmutableSet",
567:       "com.google.javascript.jscomp.PeepholeReplaceKnownMethods",
568:       "com.google.javascript.jscomp.AbstractPeepholeOptimization",
569:       "com.google.javascript.rhino.jstype.JSTypeRegistry$ResolveMode",
570:       "com.google.javascript.rhino.head.ast.ElementGet",
571:       "com.google.common.collect.Iterators$1",
572:       "com.google.javascript.jscomp.DisambiguateProperties$Warnings",
573:       "com.google.common.collect.Iterators$2",
574:       "com.google.common.collect.Iterators$3",
575:       "com.google.javascript.jscomp.parsing.Annotation",
576:       "com.google.javascript.jscomp.AbstractMessageFormatter",
577:       "com.google.javascript.jscomp.DefinitionSite",
578:       "com.google.common.collect.Lists$StringAsImmutableList",
579:       "com.google.javascript.rhino.head.JavaScriptException",
580:       "com.google.javascript.rhino.head.ast.IdeErrorReporter",
581:       "com.google.javascript.jscomp.ProcessTweaks",
582:       "com.google.javascript.jscomp.NodeUtil$1",
583:       "com.google.javascript.rhino.head.ast.TryStatement",
584:       "com.google.javascript.jscomp.parsing.IRFactory",
585:       "com.google.javascript.jscomp.ErrorFormat$1",
586:       "com.google.javascript.rhino.head.TopLevel",
587:       "com.google.javascript.jscomp.Compiler$3",
588:       "com.google.javascript.jscomp.PrepareAst$PrepareAnnotations",
589:       "com.google.common.collect.AbstractMultimap",
590:       "com.google.common.base.Predicates$ObjectPredicate$1",
591:       "com.google.common.collect.EmptyImmutableSet",
592:       "com.google.javascript.jscomp.UseSite",
593:       "com.google.common.io.Files",
594:       "com.google.javascript.jscomp.NodeUtil$MatchNotFunction",
595:       "com.google.javascript.jscomp.parsing.Config$LanguageMode",
596:       "com.google.javascript.rhino.head.ast.ArrayComprehension",
597:       "com.google.javascript.jscomp.OptimizeCalls$CallGraphCompilerPass",
598:       "com.google.protobuf.AbstractMessage",
599:       "com.google.javascript.jscomp.CodingConvention$Bind",
600:       "com.google.javascript.rhino.head.ScriptRuntime$1",
601:       "com.google.javascript.jscomp.PassFactory$1",
602:       "com.google.javascript.rhino.head.ObjToIntMap",
603:       "com.google.javascript.jscomp.PeepholeRemoveDeadCode",
604:       "com.google.common.collect.ImmutableMap$Builder",
605:       "com.google.javascript.rhino.head.ConstProperties",
606:       "com.google.javascript.jscomp.deps.SortedDependencies$MissingProvideException",
607:       "com.google.common.base.Predicates$ObjectPredicate$4",
608:       "com.google.javascript.jscomp.ReorderConstantExpression",
609:       "com.google.common.base.Predicates$ObjectPredicate$3",
610:       "com.google.common.base.Predicates$ObjectPredicate$2",
611:       "com.google.javascript.jscomp.NodeUtil$MatchNameNode",
612:       "com.google.common.collect.ListMultimap",
613:       "com.google.javascript.rhino.JSDocInfo$Visibility",
614:       "com.google.javascript.rhino.head.ast.DestructuringForm",
615:       "com.google.javascript.jscomp.MethodCompilerPass",
616:       "com.google.javascript.jscomp.SourceMap$Format$4",
617:       "com.google.javascript.jscomp.SourceMap$Format$3",
618:       "com.google.javascript.jscomp.SourceMap$Format$2",
619:       "com.google.javascript.jscomp.SourceMap$Format$1",
620:       "com.google.javascript.jscomp.SourceAst",
621:       "com.google.javascript.rhino.jstype.TernaryValue$1",
622:       "com.google.common.base.Predicates$ObjectPredicate",
623:       "com.google.common.collect.RegularImmutableList",
624:       "com.google.javascript.jscomp.MessageBundle",
625:       "com.google.javascript.rhino.jstype.TernaryValue$3",
626:       "com.google.javascript.rhino.jstype.TernaryValue$2",
627:       "com.google.javascript.jscomp.CheckUnreachableCode",
628:       "com.google.javascript.jscomp.SourceExcerptProvider",
629:       "com.google.javascript.jscomp.ReferenceCollectingCallback$Behavior",
630:       "com.google.common.collect.Lists$TransformingRandomAccessList",
631:       "com.google.javascript.rhino.head.ScriptableObject$RelinkedSlot",
632:       "com.google.javascript.rhino.Node$PropListItem",
633:       "com.google.common.collect.RegularImmutableMap$KeySet",
634:       "com.google.common.collect.Maps$KeySet",
635:       "com.google.javascript.rhino.Node",
636:       "com.google.javascript.rhino.head.RhinoException",
637:       "com.google.javascript.rhino.head.ast.EmptyExpression",
638:       "com.google.javascript.rhino.head.ast.XmlLiteral",
639:       "com.google.javascript.rhino.head.ast.ContinueStatement",
640:       "com.google.javascript.jscomp.LoggerErrorManager",
641:       "com.google.javascript.jscomp.NodeTraversal",
642:       "com.google.javascript.jscomp.ComposeWarningsGuard",
643:       "com.google.javascript.jscomp.NodeTraversal$AbstractScopedCallback",
644:       "com.google.javascript.rhino.head.ErrorReporter",
645:       "com.google.common.collect.Multisets",
646:       "com.google.javascript.jscomp.VariableMap",
647:       "com.google.javascript.jscomp.JsAst",
648:       "com.google.javascript.rhino.head.ast.XmlMemberGet",
649:       "com.google.javascript.jscomp.ErrorFormat",
650:       "com.google.javascript.rhino.head.ast.Scope",
651:       "com.google.javascript.jscomp.AbstractCompiler$LifeCycleStage",
652:       "com.google.javascript.rhino.head.Scriptable",
653:       "com.google.javascript.jscomp.JqueryCodingConvention",
654:       "com.google.common.io.ByteStreams",
655:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
656:       "com.google.javascript.jscomp.NodeUtil$BooleanResultPredicate",
657:       "com.google.javascript.jscomp.SourceMap$1",
658:       "com.google.javascript.rhino.jstype.VoidType",
659:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler",
660:       "com.google.javascript.rhino.jstype.JSType",
661:       "com.google.common.io.ByteProcessor",
662:       "com.google.javascript.jscomp.ControlFlowGraph$Branch",
663:       "com.google.common.collect.Sets$SetView",
664:       "com.google.javascript.jscomp.SyntheticAst",
665:       "com.google.javascript.jscomp.DiagnosticGroups",
666:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
667:       "com.google.javascript.jscomp.ScopeCreator",
668:       "com.google.common.collect.RegularImmutableMap$TerminalEntry",
669:       "com.google.common.base.Predicates",
670:       "com.google.javascript.jscomp.graph.AdjacencyGraph",
671:       "com.google.javascript.jscomp.deps.SortedDependencies$CircularDependencyException",
672:       "com.google.common.collect.Lists$TransformingSequentialList",
673:       "com.google.javascript.rhino.head.NativeNumber",
674:       "com.google.javascript.jscomp.SourceFile",
675:       "com.google.javascript.rhino.head.ast.BreakStatement",
676:       "com.google.javascript.jscomp.PropertyRenamingPolicy",
677:       "com.google.javascript.jscomp.Normalize$1",
678:       "com.google.javascript.rhino.jstype.FunctionBuilder",
679:       "com.google.javascript.jscomp.CodingConvention$DelegateRelationship",
680:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax$FoldArrayAction",
681:       "com.google.javascript.rhino.head.ast.WithStatement",
682:       "com.google.javascript.rhino.head.ScriptRuntime$MessageProvider",
683:       "com.google.common.collect.MapDifference",
684:       "com.google.javascript.jscomp.CompilerOptions$AliasTransformationHandler",
685:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
686:       "com.google.javascript.jscomp.SourceFile$Generated",
687:       "com.google.javascript.rhino.jstype.FunctionType",
688:       "com.google.javascript.rhino.head.ast.AstNode",
689:       "com.google.javascript.jscomp.Compiler",
690:       "com.google.javascript.jscomp.Normalize$DuplicateDeclarationHandler",
691:       "com.google.javascript.jscomp.NodeTraversal$ScopedCallback",
692:       "com.google.javascript.jscomp.TypedScopeCreator",
693:       "com.google.common.base.CharMatcher$12",
694:       "com.google.common.base.CharMatcher$11",
695:       "com.google.javascript.rhino.head.Node",
696:       "com.google.common.base.CharMatcher$10",
697:       "com.google.javascript.rhino.jstype.TernaryValue",
698:       "com.google.common.io.Files$1",
699:       "com.google.javascript.jscomp.JSError",
700:       "com.google.javascript.jscomp.ReferenceCollectingCallback$BasicBlock",
701:       "com.google.common.base.CharMatcher$15",
702:       "com.google.common.base.CharMatcher$14",
703:       "com.google.common.collect.Lists$RandomAccessListWrapper",
704:       "com.google.common.base.CharMatcher$13",
705:       "com.google.common.base.Platform",
706:       "com.google.javascript.jscomp.TypedScopeCreator$GlobalScopeBuilder",
707:       "com.google.javascript.jscomp.PeepholeFoldWithTypes",
708:       "com.google.javascript.rhino.head.ast.KeywordLiteral",
709:       "com.google.javascript.jscomp.NodeTraversal$AbstractShallowCallback",
710:       "com.google.javascript.rhino.head.ast.Assignment",
711:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
712:       "com.google.javascript.rhino.jstype.UnionType",
713:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
714:       "com.google.javascript.rhino.head.ast.LabeledStatement",
715:       "com.google.javascript.jscomp.ControlFlowAnalysis",
716:       "com.google.common.collect.AbstractIndexedListIterator",
717:       "com.google.javascript.rhino.head.ast.XmlExpression",
718:       "com.google.javascript.jscomp.JSModuleGraph",
719:       "com.google.common.collect.AbstractMultimap$SortedKeySet",
720:       "com.google.javascript.jscomp.SyntacticScopeCreator$DefaultRedeclarationHandler",
721:       "com.google.common.collect.Sets",
722:       "com.google.common.collect.ImmutableCollection$EmptyImmutableCollection",
723:       "com.google.javascript.rhino.head.Kit",
724:       "com.google.javascript.jscomp.TypedScopeCreator$LocalScopeBuilder",
725:       "com.google.javascript.jscomp.BasicErrorManager$LeveledJSErrorComparator",
726:       "com.google.javascript.rhino.head.jdk15.VMBridge_jdk15",
727:       "com.google.javascript.rhino.Node$ObjectPropListItem",
728:       "com.google.javascript.rhino.head.ContextAction",
729:       "com.google.javascript.rhino.head.EvaluatorException",
730:       "com.google.javascript.jscomp.ProcessCommonJSModules",
731:       "com.google.javascript.rhino.head.ast.NumberLiteral",
732:       "com.google.common.collect.AbstractMultimap$SortedAsMap",
733:       "com.google.javascript.jscomp.Compiler$IntermediateState",
734:       "com.google.javascript.rhino.head.ast.ErrorNode",
735:       "com.google.common.collect.EmptyImmutableMap",
736:       "com.google.common.collect.Multimap",
737:       "com.google.javascript.jscomp.SourceMap$DetailLevel$2",
738:       "com.google.javascript.jscomp.SourceMap$DetailLevel$1",
739:       "com.google.javascript.jscomp.VarCheck",
740:       "com.google.javascript.jscomp.CompilerOptions$DevMode",
741:       "com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder",
742:       "com.google.javascript.rhino.head.Interpreter",
743:       "com.google.javascript.rhino.jstype.StringType",
744:       "com.google.javascript.rhino.head.ImporterTopLevel",
745:       "com.google.javascript.rhino.jstype.StaticSymbolTable",
746:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
747:       "com.google.javascript.jscomp.JSModuleGraph$ModuleDependenceException",
748:       "com.google.javascript.jscomp.graph.DiGraph",
749:       "com.google.common.base.Platform$1",
750:       "com.google.javascript.jscomp.parsing.ParserRunner",
751:       "com.google.common.collect.RegularImmutableMap$EntrySet",
752:       "com.google.javascript.rhino.head.ast.GeneratorExpression",
753:       "com.google.javascript.rhino.head.ast.XmlDotQuery",
754:       "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement",
755:       "com.google.javascript.jscomp.ConstCheck",
756:       "com.google.javascript.rhino.jstype.Visitor",
757:       "com.google.javascript.jscomp.TypeCheck",
758:       "com.google.javascript.jscomp.SymbolTable",
759:       "com.google.javascript.jscomp.deps.DependencyInfo",
760:       "com.google.javascript.jscomp.WarningsGuard$Priority",
761:       "com.google.javascript.jscomp.Compiler$10",
762:       "com.google.javascript.rhino.head.ContextFactory$GlobalSetter",
763:       "com.google.common.base.CharMatcher$Or",
764:       "com.google.javascript.rhino.head.ast.NodeVisitor",
765:       "com.google.protobuf.Message",
766:       "com.google.javascript.rhino.head.ast.ArrayComprehensionLoop",
767:       "com.google.javascript.rhino.head.Parser$ParserException",
768:       "com.google.javascript.rhino.head.NativeObject"
769:     );
770:   } 
771: 
772:   private static void resetClasses() {
773:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NodeUtil_194_tmp__ESTest_scaffolding.class.getClassLoader()); 
774: 
775:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
776:       "com.google.common.collect.ImmutableCollection$EmptyImmutableCollection",
777:       "com.google.common.collect.ImmutableCollection",
778:       "com.google.common.collect.ImmutableSet",
779:       "com.google.common.collect.Hashing",
780:       "com.google.common.collect.ImmutableSet$ArrayImmutableSet",
781:       "com.google.common.collect.RegularImmutableSet",
782:       "com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate",
783:       "com.google.javascript.jscomp.NodeUtil$BooleanResultPredicate",
784:       "com.google.javascript.jscomp.NodeUtil$MayBeStringResultPredicate",
785:       "com.google.javascript.jscomp.NodeUtil$MatchNotFunction",
786:       "com.google.javascript.jscomp.NodeUtil",
787:       "com.google.javascript.jscomp.NodeUtil$MatchNodeType",
788:       "com.google.javascript.jscomp.NodeUtil$MatchNameNode",
789:       "com.google.javascript.jscomp.NodeUtil$VarCollector",
790:       "com.google.javascript.rhino.jstype.TernaryValue",
791:       "com.google.common.base.Predicates$ObjectPredicate",
792:       "com.google.javascript.jscomp.DiagnosticType",
793:       "com.google.javascript.jscomp.AbstractCompiler",
794:       "com.google.javascript.jscomp.Compiler",
795:       "com.google.javascript.jscomp.AbstractCompiler$LifeCycleStage",
796:       "com.google.common.base.Joiner",
797:       "com.google.common.base.Preconditions",
798:       "com.google.common.collect.Collections2",
799:       "com.google.common.base.Joiner$MapJoiner",
800:       "com.google.common.collect.Maps",
801:       "com.google.javascript.jscomp.CodingConventions$Proxy",
802:       "com.google.javascript.jscomp.ClosureCodingConvention",
803:       "com.google.javascript.jscomp.CodingConventions",
804:       "com.google.javascript.jscomp.CodingConventions$DefaultCodingConvention",
805:       "com.google.common.collect.Sets",
806:       "com.google.common.collect.ImmutableList",
807:       "com.google.common.collect.UnmodifiableIterator",
808:       "com.google.common.collect.UnmodifiableListIterator",
809:       "com.google.common.collect.EmptyImmutableList$1",
810:       "com.google.common.collect.EmptyImmutableList",
811:       "com.google.common.collect.Iterators$1",
812:       "com.google.common.collect.Iterators$2",
813:       "com.google.common.collect.Iterators",
814:       "com.google.javascript.jscomp.RhinoErrorReporter",
815:       "com.google.javascript.jscomp.RhinoErrorReporter$OldRhinoErrorReporter",
816:       "com.google.javascript.rhino.head.Kit",
817:       "com.google.javascript.rhino.head.optimizer.Codegen",
818:       "com.google.javascript.rhino.head.Icode",
819:       "com.google.javascript.rhino.head.Interpreter",
820:       "com.google.javascript.rhino.head.Context",
821:       "com.google.javascript.rhino.head.ContextFactory",
822:       "com.google.javascript.rhino.head.ScriptableObject",
823:       "com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider",
824:       "com.google.javascript.rhino.head.ScriptRuntime",
825:       "com.google.javascript.rhino.head.jdk13.VMBridge_jdk13",
826:       "com.google.javascript.rhino.head.jdk15.VMBridge_jdk15",
827:       "com.google.javascript.rhino.head.VMBridge",
828:       "com.google.javascript.rhino.ScriptRuntime",
829:       "com.google.common.collect.ImmutableMap",
830:       "com.google.common.collect.RegularImmutableMap",
831:       "com.google.common.collect.AbstractMapEntry",
832:       "com.google.common.collect.ImmutableEntry",
833:       "com.google.common.collect.RegularImmutableMap$TerminalEntry",
834:       "com.google.javascript.jscomp.RhinoErrorReporter$NewRhinoErrorReporter",
835:       "com.google.javascript.jscomp.PassFactory",
836:       "com.google.javascript.jscomp.Compiler$3",
837:       "com.google.javascript.jscomp.CodeChangeHandler$RecentChange",
838:       "com.google.common.collect.Lists",
839:       "com.google.javascript.jscomp.Normalize",
840:       "com.google.javascript.jscomp.CompilerInput",
841:       "com.google.javascript.jscomp.SourceFile",
842:       "com.google.javascript.jscomp.SourceFile$Builder",
843:       "com.google.common.base.Charsets",
844:       "com.google.javascript.jscomp.SourceFile$Preloaded",
845:       "com.google.javascript.jscomp.JsAst",
846:       "com.google.javascript.rhino.InputId",
847:       "com.google.javascript.jscomp.GoogleCodingConvention",
848:       "com.google.javascript.rhino.IR",
849:       "com.google.javascript.rhino.Node",
850:       "com.google.javascript.rhino.Node$StringNode",
851:       "com.google.javascript.rhino.SimpleErrorReporter",
852:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
853:       "com.google.common.collect.AbstractMultimap",
854:       "com.google.common.collect.AbstractSetMultimap",
855:       "com.google.common.collect.LinkedHashMultimap",
856:       "com.google.common.collect.AbstractListMultimap",
857:       "com.google.common.collect.ArrayListMultimap",
858:       "com.google.javascript.rhino.jstype.JSTypeRegistry$ResolveMode",
859:       "com.google.javascript.rhino.jstype.JSType$1",
860:       "com.google.javascript.rhino.jstype.JSType",
861:       "com.google.javascript.rhino.jstype.ValueType",
862:       "com.google.javascript.rhino.jstype.BooleanType",
863:       "com.google.javascript.rhino.jstype.NullType",
864:       "com.google.javascript.rhino.jstype.NumberType",
865:       "com.google.javascript.rhino.jstype.StringType",
866:       "com.google.javascript.rhino.jstype.ObjectType",
867:       "com.google.javascript.rhino.jstype.UnknownType",
868:       "com.google.javascript.rhino.jstype.VoidType",
869:       "com.google.javascript.rhino.jstype.AllType",
870:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
871:       "com.google.javascript.rhino.jstype.FunctionType",
872:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
873:       "com.google.javascript.rhino.Node$AbstractPropListItem",
874:       "com.google.javascript.rhino.Node$IntPropListItem",
875:       "com.google.javascript.rhino.jstype.ArrowType",
876:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
877:       "com.google.javascript.rhino.jstype.InstanceObjectType",
878:       "com.google.javascript.rhino.jstype.ObjectType$Property",
879:       "com.google.javascript.rhino.jstype.NoObjectType",
880:       "com.google.javascript.rhino.jstype.NoType",
881:       "com.google.javascript.rhino.jstype.NoResolvedType",
882:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
883:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
884:       "com.google.javascript.rhino.jstype.UnionType",
885:       "com.google.common.collect.RegularImmutableList",
886:       "com.google.javascript.rhino.jstype.FunctionBuilder",
887:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
888:       "com.google.javascript.rhino.Node$NumberNode",
889:       "com.google.javascript.jscomp.NodeUtil$MatchDeclaration",
890:       "com.google.javascript.jscomp.AbstractPeepholeOptimization",
891:       "com.google.javascript.jscomp.PeepholeReplaceKnownMethods",
892:       "com.google.javascript.rhino.Token",
893:       "com.google.javascript.jscomp.PeepholeRemoveDeadCode",
894:       "com.google.javascript.jscomp.JqueryCodingConvention",
895:       "com.google.javascript.rhino.jstype.EnumType",
896:       "com.google.javascript.rhino.jstype.EnumElementType",
897:       "com.google.javascript.jscomp.GlobalNamespace$Name",
898:       "com.google.javascript.jscomp.GlobalNamespace$Name$Type",
899:       "com.google.javascript.jscomp.PeepholeFoldWithTypes",
900:       "com.google.javascript.rhino.TokenStream",
901:       "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement",
902:       "com.google.javascript.jscomp.ExploitAssigns",
903:       "com.google.javascript.jscomp.TightenTypes",
904:       "com.google.javascript.jscomp.Compiler$6",
905:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax$1",
906:       "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
907:       "com.google.javascript.jscomp.PassConfig",
908:       "com.google.javascript.jscomp.DefaultPassConfig",
909:       "com.google.javascript.jscomp.CrossModuleMethodMotion$IdGenerator",
910:       "com.google.javascript.jscomp.DefaultPassConfig$HotSwapPassFactory",
911:       "com.google.javascript.jscomp.DefaultPassConfig$1",
912:       "com.google.javascript.jscomp.DefaultPassConfig$2",
913:       "com.google.javascript.jscomp.DefaultPassConfig$3",
914:       "com.google.javascript.jscomp.DefaultPassConfig$4",
915:       "com.google.javascript.jscomp.DefaultPassConfig$5",
916:       "com.google.javascript.jscomp.DefaultPassConfig$6",
917:       "com.google.javascript.jscomp.DefaultPassConfig$7",
918:       "com.google.javascript.jscomp.DefaultPassConfig$8",
919:       "com.google.javascript.jscomp.DefaultPassConfig$9",
920:       "com.google.javascript.jscomp.DefaultPassConfig$10",
921:       "com.google.javascript.jscomp.DefaultPassConfig$11",
922:       "com.google.javascript.jscomp.DefaultPassConfig$12",
923:       "com.google.javascript.jscomp.DefaultPassConfig$13",
924:       "com.google.javascript.jscomp.DefaultPassConfig$14",
925:       "com.google.javascript.jscomp.DefaultPassConfig$15",
926:       "com.google.javascript.jscomp.DefaultPassConfig$16",
927:       "com.google.javascript.jscomp.DefaultPassConfig$17",
928:       "com.google.javascript.jscomp.DefaultPassConfig$18",
929:       "com.google.javascript.jscomp.DefaultPassConfig$19",
930:       "com.google.javascript.jscomp.DefaultPassConfig$20",
931:       "com.google.javascript.jscomp.DefaultPassConfig$21",
932:       "com.google.javascript.jscomp.DefaultPassConfig$22",
933:       "com.google.javascript.jscomp.DefaultPassConfig$23",
934:       "com.google.javascript.jscomp.DefaultPassConfig$24",
935:       "com.google.javascript.jscomp.DefaultPassConfig$25",
936:       "com.google.javascript.jscomp.DefaultPassConfig$26",
937:       "com.google.javascript.jscomp.DefaultPassConfig$27",
938:       "com.google.javascript.jscomp.DefaultPassConfig$28",
939:       "com.google.javascript.jscomp.DefaultPassConfig$29",
940:       "com.google.javascript.jscomp.DefaultPassConfig$30",
941:       "com.google.javascript.jscomp.DefaultPassConfig$31",
942:       "com.google.javascript.jscomp.DefaultPassConfig$32",
943:       "com.google.javascript.jscomp.DefaultPassConfig$33",
944:       "com.google.javascript.jscomp.DefaultPassConfig$34",
945:       "com.google.javascript.jscomp.DefaultPassConfig$35",
946:       "com.google.javascript.jscomp.DefaultPassConfig$36",
947:       "com.google.javascript.jscomp.DefaultPassConfig$37",
948:       "com.google.javascript.jscomp.DefaultPassConfig$38",
949:       "com.google.javascript.jscomp.DefaultPassConfig$39",
950:       "com.google.javascript.jscomp.DefaultPassConfig$40",
951:       "com.google.javascript.jscomp.DefaultPassConfig$41",
952:       "com.google.javascript.jscomp.DefaultPassConfig$42",
953:       "com.google.javascript.jscomp.DefaultPassConfig$43",
954:       "com.google.javascript.jscomp.DefaultPassConfig$44",
955:       "com.google.javascript.jscomp.DefaultPassConfig$45",
956:       "com.google.javascript.jscomp.DefaultPassConfig$46",
957:       "com.google.javascript.jscomp.DefaultPassConfig$47",
958:       "com.google.javascript.jscomp.DefaultPassConfig$48",
959:       "com.google.javascript.jscomp.DefaultPassConfig$49",
960:       "com.google.javascript.jscomp.DefaultPassConfig$50",
961:       "com.google.javascript.jscomp.DefaultPassConfig$51",
962:       "com.google.javascript.jscomp.DefaultPassConfig$52",
963:       "com.google.javascript.jscomp.DefaultPassConfig$53",
964:       "com.google.javascript.jscomp.DefaultPassConfig$54",
965:       "com.google.javascript.jscomp.DefaultPassConfig$55",
966:       "com.google.javascript.jscomp.DefaultPassConfig$56",
967:       "com.google.javascript.jscomp.DefaultPassConfig$57",
968:       "com.google.javascript.jscomp.DefaultPassConfig$58",
969:       "com.google.javascript.jscomp.DefaultPassConfig$59",
970:       "com.google.javascript.jscomp.DefaultPassConfig$60",
971:       "com.google.javascript.jscomp.DefaultPassConfig$61",
972:       "com.google.javascript.jscomp.DefaultPassConfig$62",
973:       "com.google.javascript.jscomp.DefaultPassConfig$63",
974:       "com.google.javascript.jscomp.DefaultPassConfig$64",
975:       "com.google.javascript.jscomp.DefaultPassConfig$65",
976:       "com.google.javascript.jscomp.DefaultPassConfig$66",
977:       "com.google.javascript.jscomp.DefaultPassConfig$67",
978:       "com.google.javascript.jscomp.DefaultPassConfig$68",
979:       "com.google.javascript.jscomp.DefaultPassConfig$69",
980:       "com.google.javascript.jscomp.DefaultPassConfig$70",
981:       "com.google.javascript.jscomp.DefaultPassConfig$71",
982:       "com.google.javascript.jscomp.DefaultPassConfig$72",
983:       "com.google.javascript.jscomp.DefaultPassConfig$73",
984:       "com.google.javascript.jscomp.DefaultPassConfig$74",
985:       "com.google.javascript.jscomp.DefaultPassConfig$75",
986:       "com.google.javascript.jscomp.DefaultPassConfig$76",
987:       "com.google.javascript.jscomp.DefaultPassConfig$77",
988:       "com.google.javascript.jscomp.DefaultPassConfig$78",
989:       "com.google.javascript.jscomp.DefaultPassConfig$79",
990:       "com.google.javascript.jscomp.DefaultPassConfig$80",
991:       "com.google.javascript.jscomp.DefaultPassConfig$81",
992:       "com.google.javascript.jscomp.DefaultPassConfig$82",
993:       "com.google.javascript.jscomp.DefaultPassConfig$83",
994:       "com.google.javascript.jscomp.DefaultPassConfig$84",
995:       "com.google.javascript.jscomp.DefaultPassConfig$85",
996:       "com.google.javascript.jscomp.DefaultPassConfig$86",
997:       "com.google.javascript.jscomp.DefaultPassConfig$87",
998:       "com.google.javascript.jscomp.DefaultPassConfig$88",
999:       "com.google.javascript.jscomp.DefaultPassConfig$89",
1000:       "com.google.javascript.jscomp.DefaultPassConfig$90",
1001:       "com.google.javascript.jscomp.DefaultPassConfig$91",
1002:       "com.google.javascript.jscomp.DefaultPassConfig$92",
1003:       "com.google.javascript.jscomp.DefaultPassConfig$93",
1004:       "com.google.javascript.jscomp.DefaultPassConfig$94",
1005:       "com.google.javascript.jscomp.DefaultPassConfig$98",
1006:       "com.google.javascript.jscomp.DefaultPassConfig$99",
1007:       "com.google.javascript.jscomp.PassConfig$State",
1008:       "com.google.javascript.jscomp.NodeTraversal$AbstractPostOrderCallback",
1009:       "com.google.javascript.jscomp.UnreachableCodeElimination",
1010:       "com.google.javascript.jscomp.NodeTraversal",
1011:       "com.google.javascript.jscomp.SyntacticScopeCreator",
1012:       "com.google.javascript.jscomp.SyntacticScopeCreator$DefaultRedeclarationHandler",
1013:       "com.google.javascript.jscomp.ReorderConstantExpression",
1014:       "com.google.javascript.jscomp.MoveFunctionDeclarations",
1015:       "com.google.javascript.jscomp.SimpleDefinitionFinder",
1016:       "com.google.javascript.rhino.jstype.ProxyObjectType",
1017:       "com.google.javascript.rhino.jstype.NamedType",
1018:       "com.google.javascript.rhino.Node$ObjectPropListItem",
1019:       "com.google.javascript.jscomp.ControlFlowAnalysis",
1020:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler$NullAliasTransformation",
1021:       "com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler",
1022:       "com.google.javascript.jscomp.CompilerOptions",
1023:       "com.google.javascript.jscomp.DependencyOptions",
1024:       "com.google.javascript.jscomp.ProcessCommonJSModules",
1025:       "com.google.javascript.jscomp.WarningsGuard",
1026:       "com.google.javascript.jscomp.ComposeWarningsGuard",
1027:       "com.google.common.primitives.Ints",
1028:       "com.google.javascript.jscomp.ComposeWarningsGuard$GuardComparator",
1029:       "com.google.javascript.jscomp.SourceMap$DetailLevel",
1030:       "com.google.javascript.jscomp.SourceMap$Format",
1031:       "com.google.javascript.jscomp.CompilerOptions$LanguageMode",
1032:       "com.google.javascript.jscomp.CompilerOptions$DevMode",
1033:       "com.google.javascript.jscomp.VariableRenamingPolicy",
1034:       "com.google.javascript.jscomp.PropertyRenamingPolicy",
1035:       "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
1036:       "com.google.javascript.jscomp.CompilerOptions$TweakProcessing",
1037:       "com.google.javascript.jscomp.CompilerOptions$TracerMode",
1038:       "com.google.javascript.jscomp.ErrorFormat",
1039:       "com.google.javascript.jscomp.BasicErrorManager",
1040:       "com.google.javascript.jscomp.LoggerErrorManager",
1041:       "com.google.javascript.jscomp.AbstractMessageFormatter",
1042:       "com.google.javascript.jscomp.LightweightMessageFormatter$LineNumberingFormatter",
1043:       "com.google.javascript.jscomp.LightweightMessageFormatter",
1044:       "com.google.javascript.jscomp.BasicErrorManager$LeveledJSErrorComparator",
1045:       "com.google.javascript.jscomp.CheckGlobalThis",
1046:       "com.google.javascript.jscomp.DiagnosticGroup",
1047:       "com.google.common.collect.SingletonImmutableSet",
1048:       "com.google.javascript.jscomp.CheckAccessControls",
1049:       "com.google.common.collect.AbstractIndexedListIterator",
1050:       "com.google.common.collect.Iterators$11",
1051:       "com.google.javascript.jscomp.TypeValidator",
1052:       "com.google.javascript.jscomp.VarCheck",
1053:       "com.google.javascript.jscomp.CheckGlobalNames",
1054:       "com.google.javascript.jscomp.VariableReferenceCheck",
1055:       "com.google.javascript.jscomp.ProcessDefines",
1056:       "com.google.common.base.CharMatcher$11",
1057:       "com.google.common.base.CharMatcher$12",
1058:       "com.google.common.base.CharMatcher$Or",
1059:       "com.google.common.base.Platform$1",
1060:       "com.google.common.base.Platform",
1061:       "com.google.common.base.CharMatcher$LookupTable",
1062:       "com.google.common.base.CharMatcher$15",
1063:       "com.google.common.base.CharMatcher$8",
1064:       "com.google.common.base.CharMatcher$1",
1065:       "com.google.common.base.CharMatcher$2",
1066:       "com.google.common.base.CharMatcher$3",
1067:       "com.google.common.base.CharMatcher$4",
1068:       "com.google.common.base.CharMatcher$5",
1069:       "com.google.common.base.CharMatcher$6",
1070:       "com.google.common.base.CharMatcher$7",
1071:       "com.google.common.base.CharMatcher",
1072:       "com.google.javascript.jscomp.ProcessTweaks$TweakFunction",
1073:       "com.google.javascript.jscomp.ProcessTweaks",
1074:       "com.google.javascript.jscomp.TypedScopeCreator",
1075:       "com.google.javascript.jscomp.FunctionTypeBuilder",
1076:       "com.google.javascript.jscomp.TypeCheck",
1077:       "com.google.javascript.jscomp.CheckDebuggerStatement",
1078:       "com.google.javascript.jscomp.CheckRegExp",
1079:       "com.google.javascript.jscomp.CheckSideEffects",
1080:       "com.google.javascript.jscomp.CheckUnreachableCode",
1081:       "com.google.javascript.jscomp.ConstCheck",
1082:       "com.google.javascript.jscomp.DisambiguateProperties$Warnings",
1083:       "com.google.javascript.jscomp.ControlStructureCheck",
1084:       "com.google.javascript.jscomp.StrictModeCheck",
1085:       "com.google.javascript.jscomp.CheckProvides",
1086:       "com.google.javascript.jscomp.JsMessageVisitor",
1087:       "com.google.javascript.jscomp.DiagnosticGroups",
1088:       "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
1089:       "com.google.javascript.jscomp.WarningsGuard$Priority",
1090:       "com.google.javascript.jscomp.SuppressDocWarningsGuard",
1091:       "com.google.common.collect.RegularImmutableMap$NonTerminalEntry",
1092:       "com.google.common.collect.RegularImmutableMap$EntrySet",
1093:       "com.google.javascript.jscomp.Compiler$10",
1094:       "com.google.javascript.jscomp.parsing.Config$LanguageMode",
1095:       "com.google.javascript.jscomp.parsing.ParserRunner",
1096:       "com.google.javascript.jscomp.parsing.Config",
1097:       "com.google.common.collect.ImmutableMap$Builder",
1098:       "com.google.javascript.jscomp.parsing.Annotation",
1099:       "com.google.javascript.rhino.head.DefaultErrorReporter",
1100:       "com.google.javascript.rhino.head.CompilerEnvirons",
1101:       "com.google.javascript.rhino.head.Parser",
1102:       "com.google.javascript.rhino.head.TokenStream",
1103:       "com.google.javascript.rhino.head.ObjToIntMap",
1104:       "com.google.javascript.rhino.head.Node",
1105:       "com.google.javascript.rhino.head.ast.AstNode",
1106:       "com.google.javascript.rhino.head.ast.Jump",
1107:       "com.google.javascript.rhino.head.ast.Scope",
1108:       "com.google.javascript.rhino.head.ast.ScriptNode",
1109:       "com.google.javascript.rhino.head.ast.AstRoot",
1110:       "com.google.javascript.rhino.head.ast.Name",
1111:       "com.google.javascript.rhino.head.ast.ExpressionStatement",
1112:       "com.google.javascript.jscomp.parsing.IRFactory",
1113:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
1114:       "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
1115:       "com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher",
1116:       "com.google.javascript.jscomp.parsing.IRFactory$1",
1117:       "com.google.javascript.rhino.head.Node$NodeIterator",
1118:       "com.google.javascript.jscomp.PrepareAst",
1119:       "com.google.javascript.jscomp.PrepareAst$PrepareAnnotations",
1120:       "com.google.javascript.jscomp.Normalize$NormalizeStatements",
1121:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
1122:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$ContextualRenamer",
1123:       "com.google.common.collect.AbstractMultiset",
1124:       "com.google.common.collect.AbstractMapBasedMultiset",
1125:       "com.google.common.collect.HashMultiset",
1126:       "com.google.common.collect.Multisets",
1127:       "com.google.common.collect.Multisets$EntrySet",
1128:       "com.google.common.collect.AbstractMultiset$EntrySet",
1129:       "com.google.common.collect.AbstractMapBasedMultiset$1",
1130:       "com.google.javascript.jscomp.PeepholeCollectPropertyAssignments",
1131:       "com.google.javascript.jscomp.JSSourceFile",
1132:       "com.google.javascript.jscomp.SourceFile$OnDisk",
1133:       "com.google.common.collect.Iterators$12",
1134:       "com.google.javascript.rhino.Node$AncestorIterable",
1135:       "com.google.javascript.rhino.Node$AncestorIterable$1",
1136:       "com.google.javascript.jscomp.GatherRawExports",
1137:       "com.google.javascript.jscomp.ReferenceCollectingCallback$1",
1138:       "com.google.javascript.jscomp.ReferenceCollectingCallback",
1139:       "com.google.javascript.jscomp.Tracer$1",
1140:       "com.google.javascript.jscomp.Tracer$Stat",
1141:       "com.google.javascript.jscomp.Tracer",
1142:       "com.google.javascript.jscomp.JSModuleGraph",
1143:       "com.google.javascript.jscomp.JSModule",
1144:       "com.google.common.base.Predicates",
1145:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
1146:       "com.google.javascript.jscomp.PeepholeSimplifyRegExp",
1147:       "com.google.javascript.jscomp.CodePrinter$Builder",
1148:       "com.google.javascript.jscomp.CodePrinter$Format",
1149:       "com.google.javascript.jscomp.CodePrinter",
1150:       "com.google.javascript.jscomp.CodeConsumer",
1151:       "com.google.javascript.jscomp.CodePrinter$MappedCodePrinter",
1152:       "com.google.javascript.jscomp.CodePrinter$CompactCodePrinter",
1153:       "com.google.javascript.jscomp.CodeGenerator",
1154:       "com.google.javascript.jscomp.CodeGenerator$Context",
1155:       "com.google.javascript.jscomp.Compiler$5",
1156:       "com.google.javascript.jscomp.ControlFlowAnalysis$1",
1157:       "com.google.common.collect.HashMultimap",
1158:       "com.google.javascript.jscomp.PrintStreamErrorManager",
1159:       "com.google.javascript.jscomp.NameAnalyzer$1",
1160:       "com.google.javascript.jscomp.NameAnalyzer",
1161:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
1162:       "com.google.javascript.jscomp.FunctionNames",
1163:       "com.google.javascript.jscomp.FunctionNames$FunctionListExtractor",
1164:       "com.google.javascript.jscomp.RecordFunctionInformation",
1165:       "com.google.protobuf.AbstractMessageLite",
1166:       "com.google.protobuf.AbstractMessage",
1167:       "com.google.protobuf.GeneratedMessage",
1168:       "com.google.protobuf.UnknownFieldSet",
1169:       "com.google.javascript.jscomp.FunctionInformationMap",
1170:       "com.google.protobuf.AbstractMessageLite$Builder",
1171:       "com.google.protobuf.AbstractMessage$Builder",
1172:       "com.google.protobuf.GeneratedMessage$Builder",
1173:       "com.google.javascript.jscomp.FunctionInformationMap$Builder",
1174:       "com.google.javascript.rhino.head.ast.InfixExpression",
1175:       "com.google.javascript.rhino.head.ast.PropertyGet",
1176:       "com.google.javascript.jscomp.FlowSensitiveInlineVariables$1",
1177:       "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
1178:       "com.google.javascript.jscomp.VerboseMessageFormatter",
1179:       "com.google.common.io.CharStreams",
1180:       "com.google.javascript.jscomp.TightenTypes$ConcreteScope",
1181:       "com.google.javascript.jscomp.SyntheticAst",
1182:       "com.google.javascript.rhino.JSDocInfo",
1183:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
1184:       "com.google.javascript.jscomp.FunctionRewriter",
1185:       "com.google.javascript.jscomp.CleanupPasses",
1186:       "com.google.javascript.jscomp.CleanupPasses$1",
1187:       "com.google.javascript.jscomp.CleanupPasses$2",
1188:       "com.google.javascript.jscomp.CleanupPasses$3",
1189:       "com.google.javascript.jscomp.LinkedFlowScope",
1190:       "com.google.javascript.jscomp.LinkedFlowScope$FlatFlowScopeCache",
1191:       "com.google.common.collect.EmptyImmutableMap",
1192:       "com.google.javascript.jscomp.JSError",
1193:       "com.google.javascript.jscomp.BasicErrorManager$ErrorWithLevel",
1194:       "com.google.javascript.rhino.head.Parser$ParserException",
1195:       "com.google.javascript.rhino.head.ast.EmptyStatement",
1196:       "com.google.javascript.rhino.head.RhinoException",
1197:       "com.google.javascript.rhino.head.EvaluatorException",
1198:       "com.google.javascript.jscomp.Compiler$IntermediateState",
1199:       "com.google.javascript.jscomp.GlobalNamespace$Ref",
1200:       "com.google.javascript.jscomp.Denormalize$StripConstantAnnotations",
1201:       "com.google.javascript.jscomp.MinimizeExitPoints",
1202:       "com.google.javascript.jscomp.WhitelistWarningsGuard",
1203:       "com.google.common.io.LineReader",
1204:       "com.google.common.io.LineBuffer",
1205:       "com.google.common.io.LineReader$1",
1206:       "com.google.common.io.Closeables",
1207:       "com.google.javascript.jscomp.AbstractMessageFormatter$1",
1208:       "com.google.javascript.rhino.Node$SideEffectFlags",
1209:       "com.google.javascript.jscomp.InferJSDocInfo",
1210:       "com.google.javascript.rhino.Node$NodeMismatch",
1211:       "com.google.javascript.jscomp.LoggerErrorManager$1",
1212:       "com.google.javascript.jscomp.JSError$1",
1213:       "com.google.javascript.jscomp.AbstractMessageFormatter$Color",
1214:       "com.google.javascript.rhino.head.ast.UnaryExpression",
1215:       "com.google.javascript.rhino.head.Token",
1216:       "com.google.javascript.jscomp.GlobalNamespace",
1217:       "com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace",
1218:       "com.google.javascript.jscomp.Scope$1",
1219:       "com.google.javascript.jscomp.Scope",
1220:       "com.google.javascript.jscomp.CheckMissingReturn$1",
1221:       "com.google.javascript.jscomp.CheckMissingReturn$2",
1222:       "com.google.javascript.jscomp.CheckMissingReturn",
1223:       "com.google.javascript.jscomp.StatementFusion",
1224:       "com.google.javascript.jscomp.CheckSideEffects$StripProtection",
1225:       "com.google.javascript.jscomp.MemoizedScopeCreator",
1226:       "com.google.javascript.jscomp.GroupVariableDeclarations",
1227:       "com.google.javascript.jscomp.XtbMessageBundle$SecureEntityResolver",
1228:       "com.google.javascript.jscomp.XtbMessageBundle",
1229:       "com.google.javascript.jscomp.GoogleJsMessageIdGenerator",
1230:       "com.google.javascript.jscomp.XtbMessageBundle$Handler",
1231:       "com.google.javascript.jscomp.CombinedCompilerPass",
1232:       "com.google.javascript.rhino.jstype.ModificationVisitor",
1233:       "com.google.javascript.rhino.head.ast.Label",
1234:       "com.google.javascript.rhino.head.ast.LabeledStatement",
1235:       "com.google.common.io.Files",
1236:       "com.google.common.io.Files$1",
1237:       "com.google.common.io.ByteStreams",
1238:       "com.google.common.collect.AbstractSortedSetMultimap",
1239:       "com.google.common.collect.TreeMultimap",
1240:       "com.google.javascript.jscomp.SourceFile$Generated",
1241:       "com.google.javascript.jscomp.PreprocessorSymbolTable",
1242:       "com.google.javascript.jscomp.MakeDeclaredNamesUnique$BoilerplateRenamer",
1243:       "com.google.javascript.jscomp.PeepholeFoldConstants",
1244:       "com.google.javascript.jscomp.SymbolTable",
1245:       "com.google.javascript.jscomp.Normalize$VerifyConstants",
1246:       "com.google.javascript.rhino.jstype.SimpleSlot",
1247:       "com.google.javascript.jscomp.NameReferenceGraph$Reference",
1248:       "com.google.javascript.jscomp.RemoveUnusedClassProperties",
1249:       "com.google.javascript.jscomp.NodeTraversal$AbstractShallowCallback",
1250:       "com.google.javascript.jscomp.FieldCleanupPass$QualifiedNameSearchTraversal",
1251:       "com.google.javascript.jscomp.ProcessClosurePrimitives",
1252:       "com.google.javascript.jscomp.LineNumberCheck",
1253:       "com.google.javascript.jscomp.MethodCompilerPass",
1254:       "com.google.javascript.jscomp.InlineSimpleMethods$1",
1255:       "com.google.javascript.jscomp.InlineSimpleMethods",
1256:       "com.google.javascript.jscomp.ConvertToDottedProperties",
1257:       "com.google.javascript.jscomp.InvocationsCallback",
1258:       "com.google.javascript.jscomp.InlineSimpleMethods$InlineTrivialAccessors",
1259:       "com.google.javascript.jscomp.EmptyMessageBundle",
1260:       "com.google.javascript.jscomp.ReplaceMessages",
1261:       "com.google.common.collect.Multimaps$Values",
1262:       "com.google.common.collect.AbstractMultimap$2",
1263:       "com.google.common.collect.Multimaps$Entries",
1264:       "com.google.common.collect.AbstractMultimap$4",
1265:       "com.google.common.collect.AbstractMultimap$EntryIterator",
1266:       "com.google.common.collect.Multimaps$Values$1",
1267:       "com.google.javascript.jscomp.ExternExportsPass",
1268:       "com.google.javascript.jscomp.PassConfig$PassConfigDelegate",
1269:       "com.google.javascript.rhino.head.ast.Assignment",
1270:       "com.google.javascript.rhino.head.ast.FunctionCall",
1271:       "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
1272:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter$1",
1273:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter$2",
1274:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter$3",
1275:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter$4",
1276:       "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
1277:       "com.google.javascript.jscomp.CustomPassExecutionTime",
1278:       "com.google.javascript.jscomp.CodingConvention$AssertionFunctionSpec",
1279:       "com.google.javascript.jscomp.ClosureCodingConvention$AssertInstanceofSpec",
1280:       "com.google.javascript.rhino.jstype.ParameterizedType",
1281:       "com.google.javascript.rhino.head.ast.NumberLiteral",
1282:       "com.google.javascript.jscomp.DeadAssignmentsElimination$1",
1283:       "com.google.javascript.jscomp.DeadAssignmentsElimination",
1284:       "com.google.javascript.jscomp.ExpandJqueryAliases",
1285:       "com.google.javascript.jscomp.CheckMissingGetCssName",
1286:       "com.google.javascript.jscomp.Normalize$PropagateConstantAnnotationsOverVars",
1287:       "com.google.common.collect.ImmutableMultimap",
1288:       "com.google.common.collect.ImmutableListMultimap",
1289:       "com.google.common.collect.ImmutableMultimap$Builder",
1290:       "com.google.common.collect.ImmutableListMultimap$Builder",
1291:       "com.google.common.collect.ImmutableMultimap$BuilderMultimap",
1292:       "com.google.common.collect.AbstractMultimap$AsMap",
1293:       "com.google.common.collect.Maps$EntrySet",
1294:       "com.google.common.collect.AbstractMultimap$AsMap$AsMapEntries",
1295:       "com.google.common.collect.AbstractMultimap$AsMap$AsMapIterator",
1296:       "com.google.common.collect.AbstractMultimap$WrappedCollection",
1297:       "com.google.common.collect.AbstractMultimap$WrappedList",
1298:       "com.google.common.collect.AbstractMultimap$RandomAccessWrappedList",
1299:       "com.google.common.collect.AbstractMultimap$WrappedCollection$WrappedIterator",
1300:       "com.google.common.collect.SingletonImmutableMap",
1301:       "com.google.common.collect.Iterables",
1302:       "com.google.javascript.jscomp.Result",
1303:       "com.google.javascript.jscomp.Tracer$ThreadTrace",
1304:       "com.google.javascript.jscomp.RemoveTryCatch",
1305:       "com.google.javascript.jscomp.RemoveTryCatch$RemoveTryCatchCode",
1306:       "com.google.javascript.jscomp.FindExportableNodes",
1307:       "com.google.javascript.jscomp.OptimizeArgumentsArray",
1308:       "com.google.javascript.jscomp.CoalesceVariableNames$1",
1309:       "com.google.javascript.jscomp.CoalesceVariableNames",
1310:       "com.google.javascript.jscomp.Compiler$2",
1311:       "com.google.javascript.rhino.head.ast.ArrayLiteral",
1312:       "com.google.javascript.jscomp.DefaultPassConfig$32$1",
1313:       "com.google.javascript.jscomp.AliasStrings",
1314:       "com.google.javascript.jscomp.RenameLabels",
1315:       "com.google.javascript.jscomp.RenameLabels$DefaultNameSupplier",
1316:       "com.google.javascript.jscomp.NameGenerator",
1317:       "com.google.javascript.jscomp.RenameLabels$ProcessLabels",
1318:       "com.google.javascript.jscomp.RenameLabels$LabelNamespace",
1319:       "com.google.javascript.jscomp.VariableMap",
1320:       "com.google.javascript.rhino.head.ast.ParenthesizedExpression",
1321:       "com.google.javascript.jscomp.CollapseProperties",
1322:       "com.google.javascript.jscomp.SourceExcerptProvider$SourceExcerpt",
1323:       "com.google.javascript.jscomp.CheckLevel"
1324:     );
1325:   }
1326: }

[MASTER] 19:11:42.227 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(13, 13, 13);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertNotNull(node0);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFromExterns());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertEquals(53261, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertEquals(13, node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertEquals(13, node0.getLineno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isLabel());
assertEquals(13, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssignAdd());
assertNull(node0.getSourceFileName());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertTrue(node0.isNE());

ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
assertNotNull(closureCodingConvention0);
assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
assertNull(closureCodingConvention0.getDelegateSuperclassName());
assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
assertEquals("goog.global", closureCodingConvention0.getGlobalObject());

boolean boolean0 = NodeUtil.isSimpleOperator(node0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertTrue(boolean0);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFromExterns());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertEquals(53261, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertEquals(13, node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertEquals(13, node0.getLineno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isLabel());
assertEquals(13, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssignAdd());
assertNull(node0.getSourceFileName());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertTrue(node0.isNE());

boolean boolean1 = node0.isVarArgs();
assertFalse(boolean1 == boolean0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(boolean1);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFromExterns());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertEquals(53261, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertEquals(13, node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertEquals(13, node0.getLineno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isLabel());
assertEquals(13, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssignAdd());
assertNull(node0.getSourceFileName());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertTrue(node0.isNE());

Iterable<Node> iterable0 = node0.children();
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(41, Node.BRACELESS_TYPE);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(45, Node.IS_VAR_ARGS_PARAM);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(44, Node.IS_OPTIONAL_PARAM);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.SOURCENAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(35, Node.PARENTHESIZED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isFromExterns());
assertFalse(node0.isDec());
assertFalse(node0.isGetProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertEquals(53261, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertEquals(13, node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertEquals(13, node0.getLineno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isCase());
assertEquals((-1), node0.getSourceOffset());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isLabel());
assertEquals(13, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssignAdd());
assertNull(node0.getSourceFileName());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertTrue(node0.isNE());

Locale locale0 = Locale.ENGLISH;
assertNotNull(locale0);
assertEquals("en", locale0.getLanguage());
assertEquals("eng", locale0.getISO3Language());
assertEquals("", locale0.getISO3Country());
assertEquals("", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("en", locale0.toString());

Locale locale1 = Locale.CHINESE;
assertFalse(locale1.equals((Object)locale0));
assertNotSame(locale1, locale0);
assertNotNull(locale1);
assertEquals("", locale1.getCountry());
assertEquals("", locale1.getVariant());
assertEquals("", locale1.getISO3Country());
assertEquals("zh", locale1.getLanguage());
assertEquals("zh", locale1.toString());
assertEquals("zho", locale1.getISO3Language());

Set<String> set0 = locale0.getUnicodeLocaleKeys();
assertFalse(locale0.equals((Object)locale1));
assertNotSame(locale0, locale1);
assertNotNull(set0);
assertEquals("en", locale0.getLanguage());
assertEquals("eng", locale0.getISO3Language());
assertEquals("", locale0.getISO3Country());
assertEquals("", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("en", locale0.toString());
assertEquals(0, set0.size());
assertTrue(set0.isEmpty());

Locale locale2 = Locale.FRENCH;
assertFalse(locale2.equals((Object)locale0));
assertFalse(locale2.equals((Object)locale1));
assertNotSame(locale2, locale0);
assertNotSame(locale2, locale1);
assertNotNull(locale2);
assertEquals("fr", locale2.toString());
assertEquals("fra", locale2.getISO3Language());
assertEquals("", locale2.getCountry());
assertEquals("", locale2.getVariant());
assertEquals("", locale2.getISO3Country());
assertEquals("fr", locale2.getLanguage());

Locale locale3 = locale2.stripExtensions();
assertFalse(locale2.equals((Object)locale0));
assertFalse(locale2.equals((Object)locale1));
assertFalse(locale3.equals((Object)locale1));
assertFalse(locale3.equals((Object)locale0));
assertNotSame(locale2, locale0);
assertNotSame(locale2, locale1);
assertSame(locale2, locale3);
assertNotSame(locale3, locale1);
assertNotSame(locale3, locale0);
assertSame(locale3, locale2);
assertNotNull(locale3);
assertEquals("fr", locale2.toString());
assertEquals("fra", locale2.getISO3Language());
assertEquals("", locale2.getCountry());
assertEquals("", locale2.getVariant());
assertEquals("", locale2.getISO3Country());
assertEquals("fr", locale2.getLanguage());
assertEquals("", locale3.getCountry());
assertEquals("", locale3.getVariant());
assertEquals("fra", locale3.getISO3Language());
assertEquals("fr", locale3.toString());
assertEquals("fr", locale3.getLanguage());
assertEquals("", locale3.getISO3Country());

Set<String> set1 = locale2.getUnicodeLocaleKeys();
assertFalse(locale2.equals((Object)locale0));
assertFalse(locale2.equals((Object)locale1));
assertNotSame(locale2, locale0);
assertNotSame(locale2, locale1);
assertSame(locale2, locale3);
assertSame(set1, set0);
assertNotNull(set1);
assertEquals("fr", locale2.toString());
assertEquals("fra", locale2.getISO3Language());
assertEquals("", locale2.getCountry());
assertEquals("", locale2.getVariant());
assertEquals("", locale2.getISO3Country());
assertEquals("fr", locale2.getLanguage());
assertEquals(0, set1.size());
assertTrue(set1.isEmpty());

NodeUtil.isValidDefineValue(node0, set1);


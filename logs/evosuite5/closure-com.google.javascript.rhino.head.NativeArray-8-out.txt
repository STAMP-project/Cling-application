entry: sources/closure-16/build/classes
entry: sources/closure-16/lib/args4j.jar
entry: sources/closure-16/lib/guava.jar
entry: sources/closure-16/lib/json.jar
entry: sources/closure-16/lib/jsr305.jar
entry: sources/closure-16/lib/protobuf-java.jar
entry: sources/closure-16/build/lib/rhino.jar
entry: sources/closure-16/lib/ant.jar
** CP: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar
* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: com.google.javascript.rhino.head.NativeArray
* Starting Client-0
* Connecting to master process on port 5642
* Analyzing classpath: 
  - sources/closure-16/build/classes
  - sources/closure-16/lib/args4j.jar
  - sources/closure-16/lib/guava.jar
  - sources/closure-16/lib/json.jar
  - sources/closure-16/lib/jsr305.jar
  - sources/closure-16/lib/protobuf-java.jar
  - sources/closure-16/build/lib/rhino.jar
  - sources/closure-16/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.head.NativeArray
* Test criterion:
  - Branch Coverage
* Total number of test goals for DYNAMOSA: 934
* Using seed 1566339153075
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 280 / 934
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.11991434689507495
[MASTER] 00:13:12.181 [logback-1] WARN  TestUsageChecker - class com.google.javascript.rhino.head.ContextFactory$1GlobalSetterImpl looks like an anonymous class, ignoring it (although reflection says false) GlobalSetterImpl
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.34796573875803
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.39721627408993576
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.42933618843683086
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.4346895074946467
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.43683083511777304
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.4411134903640257
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.44539614561027835
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.44539614561027835
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.45074946466809424
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.45289079229122053
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.4550321199143469
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.45610278372591007
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.4593147751605996
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.4593147751605996
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.4593147751605996
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.4593147751605996
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.46359743040685225
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.46359743040685225
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.46359743040685225
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.46359743040685225
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.46359743040685225
* Search finished after 303s and 61 generations, 25957 statements, best individual has fitness: 501.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.46359743040685225
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 46%
* Total number of goals: 934
* Number of covered goals: 433
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.46359743040685225
* Generated 87 tests with total length 274
* Resulting test suite's coverage: 46%
* Generating assertions
[MASTER] 00:19:23.318 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6695833333333333% of time used, but only 36/87 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 4%
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.46359743040685225
* Compiling and checking tests
[MASTER] 00:20:00.291 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 00:20:00.292 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeArray nativeArray0 = new NativeArray(1766L);
nativeArray0.activatePrototypeMap(1323);
Context context0 = Context.getContext();
nativeArray0.defineOwnProperty(context0, (Object) nativeArray0, (ScriptableObject) nativeArray0, false);

* Writing tests to file
* Writing JUnit test case 'NativeArray_ESTest' to results/evosuite5/closure-16-com.google.javascript.rhino.head.NativeArray-8
* Done!

* Computation finished
eArray0, true);
nativeArray0.indexOf(scriptableObject0);
nativeArray0.getIndexIds();

[MASTER] 00:19:07.609 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 00:19:07.610 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Context context0 = Context.getContext();
NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);

[MASTER] 00:19:11.508 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 00:19:11.509 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeArray nativeArray0 = new NativeArray(2147483647L);
assertNotNull(nativeArray0);
assertFalse(nativeArray0.isSealed());
assertEquals(2147483647L, nativeArray0.jsGet_length());
assertTrue(nativeArray0.isEmpty());
assertFalse(nativeArray0.avoidObjectDetection());
assertEquals("Array", nativeArray0.getClassName());
assertEquals(2147483647L, nativeArray0.getLength());
assertEquals("object", nativeArray0.getTypeOf());
assertFalse(nativeArray0.hasPrototypeMap());
assertTrue(nativeArray0.isExtensible());
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);

NativeArray nativeArray1 = new NativeArray(874L);
assertNotNull(nativeArray1);
assertFalse(nativeArray1.avoidObjectDetection());
assertTrue(nativeArray1.isEmpty());
assertEquals(874L, nativeArray1.jsGet_length());
assertTrue(nativeArray1.isExtensible());
assertEquals("object", nativeArray1.getTypeOf());
assertFalse(nativeArray1.hasPrototypeMap());
assertEquals("Array", nativeArray1.getClassName());
assertFalse(nativeArray1.isSealed());
assertEquals(874L, nativeArray1.getLength());
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, ScriptableObject.READONLY);
assertFalse(nativeArray1.equals((Object)nativeArray0));

Class<ImporterTopLevel> class0 = ImporterTopLevel.class;
ScriptableObject.defineClass((Scriptable) nativeArray0, class0, false, false);
nativeArray1.getIndexIds();
nativeArray1.put(4, (Scriptable) nativeArray0, (Object) nativeArray0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing tests to file
* Writing JUnit test case 'NativeArray_ESTest' to results/evosuite5/closure-16-com.google.javascript.rhino.head.NativeArray-8
* Done!

* Computation finished

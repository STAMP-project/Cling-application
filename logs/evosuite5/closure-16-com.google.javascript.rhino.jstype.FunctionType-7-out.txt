entry: sources/closure-16/build/classes
entry: sources/closure-16/lib/args4j.jar
entry: sources/closure-16/lib/guava.jar
entry: sources/closure-16/lib/json.jar
entry: sources/closure-16/lib/jsr305.jar
entry: sources/closure-16/lib/protobuf-java.jar
entry: sources/closure-16/build/lib/rhino.jar
entry: sources/closure-16/lib/ant.jar
** CP: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar
* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: com.google.javascript.rhino.jstype.FunctionType
* Starting Client-0
* Connecting to master process on port 8396
* Analyzing classpath: 
  - sources/closure-16/build/classes
  - sources/closure-16/lib/args4j.jar
  - sources/closure-16/lib/guava.jar
  - sources/closure-16/lib/json.jar
  - sources/closure-16/lib/jsr305.jar
  - sources/closure-16/lib/protobuf-java.jar
  - sources/closure-16/build/lib/rhino.jar
  - sources/closure-16/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.jstype.FunctionType
* Test criterion:
  - Branch Coverage
* Total number of test goals for DYNAMOSA: 372
* Using seed 1564038270518
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 156 / 372
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.32526881720430106
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.4731182795698925
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5967741935483871
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6693548387096774
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.706989247311828
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.717741935483871
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7419354838709677
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7634408602150538
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7741935483870968
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7768817204301075
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7768817204301075
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7768817204301075
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7956989247311828
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7956989247311828
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.803763440860215
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8064516129032258
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8145161290322581
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8145161290322581
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8145161290322581
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8145161290322581
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8145161290322581
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8225806451612904
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8225806451612904
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8225806451612904
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8279569892473119
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8279569892473119
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8279569892473119
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8279569892473119
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8279569892473119
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8279569892473119
* Search finished after 301s and 348 generations, 186074 statements, best individual has fitness: 64.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8279569892473119
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 83%
* Total number of goals: 372
* Number of covered goals: 308
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8279569892473119
* Generated 84 tests with total length 452
* Resulting test suite's coverage: 83%
* Generating assertions
[MASTER] 09:10:36.815 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7412333333333333% of time used, but only 7/84 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 9%
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8279569892473119
* Compiling and checking tests
[MASTER] 09:11:27.901 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected same:<function ((, |null|undefined), *=, *=, *=): function (...[?]): , > was not:<Function>
[MASTER] 09:11:27.922 [logback-1] WARN  JUnitAnalyzer - Failing test:
 SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ", ");
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertNotNull(errorFunctionType0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(errorFunctionType0.isVoidType());
assertFalse(errorFunctionType0.isNominalType());
assertFalse(errorFunctionType0.isEnumElementType());
assertFalse(errorFunctionType0.isStringValueType());
assertFalse(errorFunctionType0.isCheckedUnknownType());
assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
assertFalse(errorFunctionType0.isNullType());
assertTrue(errorFunctionType0.isNominalConstructor());
assertFalse(errorFunctionType0.isBooleanValueType());
assertFalse(errorFunctionType0.isNumberValueType());
assertFalse(errorFunctionType0.isFunctionPrototypeType());
assertFalse(errorFunctionType0.isNoResolvedType());
assertFalse(errorFunctionType0.isUnionType());
assertFalse(errorFunctionType0.isEnumType());
assertFalse(errorFunctionType0.isRecordType());
assertFalse(errorFunctionType0.isReturnTypeInferred());
assertTrue(errorFunctionType0.hasInstanceType());
assertTrue(errorFunctionType0.isConstructor());
assertFalse(errorFunctionType0.hasCachedValues());
assertFalse(errorFunctionType0.isResolved());
assertFalse(errorFunctionType0.isAllType());
assertFalse(errorFunctionType0.isNoObjectType());
assertFalse(errorFunctionType0.isNoType());
assertTrue(errorFunctionType0.isFunctionType());
assertFalse(errorFunctionType0.isOrdinaryFunction());
assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
assertFalse(errorFunctionType0.isParameterizedType());
assertFalse(errorFunctionType0.isInterface());
assertFalse(errorFunctionType0.isTemplateType());
assertTrue(errorFunctionType0.canBeCalled());

FunctionType functionType0 = (FunctionType)errorFunctionType0.getPropertyType("bind");
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertNotNull(functionType0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(errorFunctionType0.isVoidType());
assertFalse(errorFunctionType0.isNominalType());
assertFalse(errorFunctionType0.isEnumElementType());
assertFalse(errorFunctionType0.isStringValueType());
assertFalse(errorFunctionType0.isCheckedUnknownType());
assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
assertFalse(errorFunctionType0.isNullType());
assertTrue(errorFunctionType0.isNominalConstructor());
assertFalse(errorFunctionType0.isBooleanValueType());
assertFalse(errorFunctionType0.isNumberValueType());
assertFalse(errorFunctionType0.isFunctionPrototypeType());
assertFalse(errorFunctionType0.isNoResolvedType());
assertFalse(errorFunctionType0.isUnionType());
assertFalse(errorFunctionType0.isEnumType());
assertFalse(errorFunctionType0.isRecordType());
assertTrue(errorFunctionType0.hasCachedValues());
assertFalse(errorFunctionType0.isReturnTypeInferred());
assertTrue(errorFunctionType0.hasInstanceType());
assertTrue(errorFunctionType0.isConstructor());
assertFalse(errorFunctionType0.isResolved());
assertFalse(errorFunctionType0.isAllType());
assertFalse(errorFunctionType0.isNoObjectType());
assertFalse(errorFunctionType0.isNoType());
assertTrue(errorFunctionType0.isFunctionType());
assertFalse(errorFunctionType0.isOrdinaryFunction());
assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
assertFalse(errorFunctionType0.isParameterizedType());
assertFalse(errorFunctionType0.isInterface());
assertFalse(errorFunctionType0.isTemplateType());
assertTrue(errorFunctionType0.canBeCalled());
assertFalse(functionType0.hasCachedValues());
assertFalse(functionType0.isReturnTypeInferred());
assertTrue(functionType0.canBeCalled());
assertFalse(functionType0.isRecordType());
assertFalse(functionType0.isFunctionPrototypeType());
assertFalse(functionType0.isNoResolvedType());
assertFalse(functionType0.isUnionType());
assertFalse(functionType0.isParameterizedType());
assertEquals(0, functionType0.getExtendedInterfacesCount());
assertFalse(functionType0.isResolved());
assertFalse(functionType0.isStringValueType());
assertFalse(functionType0.isEnumElementType());
assertFalse(functionType0.isNominalConstructor());
assertFalse(functionType0.isEnumType());
assertTrue(functionType0.isOrdinaryFunction());
assertFalse(functionType0.isVoidType());
assertFalse(functionType0.isBooleanValueType());
assertFalse(functionType0.isNumberValueType());
assertFalse(functionType0.isTemplateType());
assertFalse(functionType0.isAllType());
assertFalse(functionType0.isCheckedUnknownType());
assertFalse(functionType0.isConstructor());
assertFalse(functionType0.isInterface());
assertFalse(functionType0.isNominalType());
assertFalse(functionType0.hasInstanceType());
assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
assertFalse(functionType0.isNullType());
assertFalse(functionType0.isNoObjectType());
assertFalse(functionType0.isNoType());
assertTrue(functionType0.isFunctionType());

FunctionType functionType1 = errorFunctionType0.getBindReturnType(1);
assertNotSame(functionType1, functionType0);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertNotNull(functionType1);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(errorFunctionType0.isVoidType());
assertFalse(errorFunctionType0.isNominalType());
assertFalse(errorFunctionType0.isEnumElementType());
assertFalse(errorFunctionType0.isStringValueType());
assertFalse(errorFunctionType0.isCheckedUnknownType());
assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
assertFalse(errorFunctionType0.isNullType());
assertTrue(errorFunctionType0.isNominalConstructor());
assertFalse(errorFunctionType0.isBooleanValueType());
assertFalse(errorFunctionType0.isNumberValueType());
assertFalse(errorFunctionType0.isFunctionPrototypeType());
assertFalse(errorFunctionType0.isNoResolvedType());
assertFalse(errorFunctionType0.isUnionType());
assertFalse(errorFunctionType0.isEnumType());
assertFalse(errorFunctionType0.isRecordType());
assertTrue(errorFunctionType0.hasCachedValues());
assertFalse(errorFunctionType0.isReturnTypeInferred());
assertTrue(errorFunctionType0.hasInstanceType());
assertTrue(errorFunctionType0.isConstructor());
assertFalse(errorFunctionType0.isResolved());
assertFalse(errorFunctionType0.isAllType());
assertFalse(errorFunctionType0.isNoObjectType());
assertFalse(errorFunctionType0.isNoType());
assertTrue(errorFunctionType0.isFunctionType());
assertFalse(errorFunctionType0.isOrdinaryFunction());
assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
assertFalse(errorFunctionType0.isParameterizedType());
assertFalse(errorFunctionType0.isInterface());
assertFalse(errorFunctionType0.isTemplateType());
assertTrue(errorFunctionType0.canBeCalled());
assertFalse(functionType1.isCheckedUnknownType());
assertFalse(functionType1.isNominalType());
assertFalse(functionType1.isVoidType());
assertFalse(functionType1.isStringValueType());
assertFalse(functionType1.isNominalConstructor());
assertEquals(0, functionType1.getExtendedInterfacesCount());
assertTrue(functionType1.isOrdinaryFunction());
assertFalse(functionType1.isNoObjectType());
assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
assertFalse(functionType1.isAllType());
assertFalse(functionType1.isConstructor());
assertFalse(functionType1.isNoType());
assertFalse(functionType1.isParameterizedType());
assertFalse(functionType1.isEnumElementType());
assertFalse(functionType1.isTemplateType());
assertTrue(functionType1.canBeCalled());
assertFalse(functionType1.isResolved());
assertFalse(functionType1.isInterface());
assertFalse(functionType1.isReturnTypeInferred());
assertTrue(functionType1.isFunctionType());
assertFalse(functionType1.hasCachedValues());
assertFalse(functionType1.isNullType());
assertFalse(functionType1.hasInstanceType());
assertFalse(functionType1.isUnionType());
assertFalse(functionType1.isNoResolvedType());
assertFalse(functionType1.isNumberValueType());
assertFalse(functionType1.isFunctionPrototypeType());
assertFalse(functionType1.isRecordType());
assertFalse(functionType1.isBooleanValueType());
assertFalse(functionType1.isEnumType());
assertFalse(functionType1.equals((Object)functionType0));

FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, true);
assertSame(functionType0, functionType2);
assertNotSame(functionType0, functionType1);
assertNotSame(functionType1, functionType0);
assertNotSame(functionType1, functionType2);
assertNotSame(functionType2, functionType1);
assertSame(functionType2, functionType0);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertNotNull(functionType2);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(errorFunctionType0.isVoidType());
assertFalse(errorFunctionType0.isNominalType());
assertFalse(errorFunctionType0.isEnumElementType());
assertFalse(errorFunctionType0.isStringValueType());
assertFalse(errorFunctionType0.isCheckedUnknownType());
assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
assertFalse(errorFunctionType0.isNullType());
assertTrue(errorFunctionType0.isNominalConstructor());
assertFalse(errorFunctionType0.isBooleanValueType());
assertFalse(errorFunctionType0.isNumberValueType());
assertFalse(errorFunctionType0.isFunctionPrototypeType());
assertFalse(errorFunctionType0.isNoResolvedType());
assertFalse(errorFunctionType0.isUnionType());
assertFalse(errorFunctionType0.isEnumType());
assertFalse(errorFunctionType0.isRecordType());
assertTrue(errorFunctionType0.hasCachedValues());
assertFalse(errorFunctionType0.isReturnTypeInferred());
assertTrue(errorFunctionType0.hasInstanceType());
assertTrue(errorFunctionType0.isConstructor());
assertFalse(errorFunctionType0.isResolved());
assertFalse(errorFunctionType0.isAllType());
assertFalse(errorFunctionType0.isNoObjectType());
assertFalse(errorFunctionType0.isNoType());
assertTrue(errorFunctionType0.isFunctionType());
assertFalse(errorFunctionType0.isOrdinaryFunction());
assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
assertFalse(errorFunctionType0.isParameterizedType());
assertFalse(errorFunctionType0.isInterface());
assertFalse(errorFunctionType0.isTemplateType());
assertTrue(errorFunctionType0.canBeCalled());
assertTrue(functionType0.hasCachedValues());
assertFalse(functionType0.isReturnTypeInferred());
assertTrue(functionType0.canBeCalled());
assertFalse(functionType0.isRecordType());
assertFalse(functionType0.isFunctionPrototypeType());
assertFalse(functionType0.isNoResolvedType());
assertFalse(functionType0.isUnionType());
assertFalse(functionType0.isParameterizedType());
assertEquals(0, functionType0.getExtendedInterfacesCount());
assertFalse(functionType0.isResolved());
assertFalse(functionType0.isStringValueType());
assertFalse(functionType0.isEnumElementType());
assertFalse(functionType0.isNominalConstructor());
assertFalse(functionType0.isEnumType());
assertTrue(functionType0.isOrdinaryFunction());
assertFalse(functionType0.isVoidType());
assertFalse(functionType0.isBooleanValueType());
assertFalse(functionType0.isNumberValueType());
assertFalse(functionType0.isTemplateType());
assertFalse(functionType0.isAllType());
assertFalse(functionType0.isCheckedUnknownType());
assertFalse(functionType0.isConstructor());
assertFalse(functionType0.isInterface());
assertFalse(functionType0.isNominalType());
assertFalse(functionType0.hasInstanceType());
assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
assertFalse(functionType0.isNullType());
assertFalse(functionType0.isNoObjectType());
assertFalse(functionType0.isNoType());
assertTrue(functionType0.isFunctionType());
assertFalse(functionType1.isCheckedUnknownType());
assertFalse(functionType1.isNominalType());
assertFalse(functionType1.isVoidType());
assertFalse(functionType1.isStringValueType());
assertFalse(functionType1.isNominalConstructor());
assertEquals(0, functionType1.getExtendedInterfacesCount());
assertTrue(functionType1.isOrdinaryFunction());
assertFalse(functionType1.isNoObjectType());
assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
assertFalse(functionType1.isAllType());
assertFalse(functionType1.isConstructor());
assertFalse(functionType1.isNoType());
assertFalse(functionType1.isParameterizedType());
assertFalse(functionType1.isEnumElementType());
assertFalse(functionType1.isTemplateType());
assertTrue(functionType1.canBeCalled());
assertFalse(functionType1.isResolved());
assertFalse(functionType1.isInterface());
assertTrue(functionType1.hasCachedValues());
assertFalse(functionType1.isReturnTypeInferred());
assertTrue(functionType1.isFunctionType());
assertFalse(functionType1.isNullType());
assertFalse(functionType1.hasInstanceType());
assertFalse(functionType1.isUnionType());
assertFalse(functionType1.isNoResolvedType());
assertFalse(functionType1.isNumberValueType());
assertFalse(functionType1.isFunctionPrototypeType());
assertFalse(functionType1.isRecordType());
assertFalse(functionType1.isBooleanValueType());
assertFalse(functionType1.isEnumType());
assertFalse(functionType2.isNominalConstructor());
assertFalse(functionType2.isEnumType());
assertFalse(functionType2.isEnumElementType());
assertFalse(functionType2.isVoidType());
assertFalse(functionType2.isNominalType());
assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
assertFalse(functionType2.isAllType());
assertFalse(functionType2.isNoResolvedType());
assertFalse(functionType2.isParameterizedType());
assertFalse(functionType2.isTemplateType());
assertFalse(functionType2.isStringValueType());
assertFalse(functionType2.isReturnTypeInferred());
assertEquals(0, functionType2.getExtendedInterfacesCount());
assertFalse(functionType2.isResolved());
assertTrue(functionType2.hasCachedValues());
assertFalse(functionType2.isRecordType());
assertFalse(functionType2.isFunctionPrototypeType());
assertFalse(functionType2.isConstructor());
assertTrue(functionType2.canBeCalled());
assertFalse(functionType2.isInterface());
assertFalse(functionType2.isUnionType());
assertFalse(functionType2.isNoType());
assertFalse(functionType2.isNumberValueType());
assertFalse(functionType2.isNoObjectType());
assertFalse(functionType2.isBooleanValueType());
assertTrue(functionType2.isFunctionType());
assertFalse(functionType2.isNullType());
assertTrue(functionType2.isOrdinaryFunction());
assertFalse(functionType2.isCheckedUnknownType());
assertFalse(functionType2.hasInstanceType());
assertFalse(functionType0.equals((Object)functionType1));
assertFalse(functionType1.equals((Object)functionType0));
assertFalse(functionType2.equals((Object)functionType1));


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 4
* Writing tests to file
* Writing JUnit test case 'FunctionType_ESTest' to results/evosuite5/closure-16-com.google.javascript.rhino.jstype.FunctionType-7
* Done!

* Computation finished

entry: sources/closure-16/build/classes
entry: sources/closure-16/lib/args4j.jar
entry: sources/closure-16/lib/guava.jar
entry: sources/closure-16/lib/json.jar
entry: sources/closure-16/lib/jsr305.jar
entry: sources/closure-16/lib/protobuf-java.jar
entry: sources/closure-16/build/lib/rhino.jar
entry: sources/closure-16/lib/ant.jar
** CP: sources/closure-16/build/classes:sources/closure-16/lib/args4j.jar:sources/closure-16/lib/guava.jar:sources/closure-16/lib/json.jar:sources/closure-16/lib/jsr305.jar:sources/closure-16/lib/protobuf-java.jar:sources/closure-16/build/lib/rhino.jar:sources/closure-16/lib/ant.jar
* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: com.google.javascript.rhino.head.ScriptableObject
* Starting Client-0
* Connecting to master process on port 20709
* Analyzing classpath: 
  - sources/closure-16/build/classes
  - sources/closure-16/lib/args4j.jar
  - sources/closure-16/lib/guava.jar
  - sources/closure-16/lib/json.jar
  - sources/closure-16/lib/jsr305.jar
  - sources/closure-16/lib/protobuf-java.jar
  - sources/closure-16/build/lib/rhino.jar
  - sources/closure-16/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.head.ScriptableObject
* Test criterion:
  - Branch Coverage
* Total number of test goals for DYNAMOSA: 916
* Using seed 1566111346434
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 254 / 916
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.12117903930131005
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2893013100436681
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3307860262008734
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3406113537117904
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3700873362445415
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3941048034934498
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.462882096069869
[MASTER] 08:57:23.097 [logback-1] WARN  TestUsageChecker - class com.google.javascript.rhino.head.ContextFactory$1GlobalSetterImpl looks like an anonymous class, ignoring it (although reflection says false) GlobalSetterImpl
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.4705240174672489
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.48253275109170307
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5054585152838428
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5087336244541485
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5360262008733624
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5403930131004366
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5655021834061136
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5655021834061136
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5698689956331878
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5709606986899564
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5829694323144105
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5873362445414847
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5884279475982532
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5895196506550219
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5938864628820961
* Search finished after 302s and 110 generations, 37751 statements, best individual has fitness: 372.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5938864628820961
* Minimizing test suite
[MASTER] 09:02:09.791 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 60%
* Total number of goals: 916
* Number of covered goals: 550
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5938864628820961
* Generated 159 tests with total length 926
* Resulting test suite's coverage: 59%
* Generating assertions
[MASTER] 09:03:16.875 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.80055% of time used, but only 6/159 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 3%
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5938864628820961
* Compiling and checking tests
[MASTER] 09:03:54.815 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Exception was not thrown in com.google.javascript.rhino.head.DefaultErrorReporter but in com.google.javascript.rhino.head.Context.reportRuntimeError(Context.java:947): org.evosuite.runtime.mock.java.lang.MockThrowable: TypeError: redeclaration of var toStri.
[MASTER] 09:03:54.815 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NativeError nativeError0 = new NativeError();
NativeArray nativeArray0 = new NativeArray(1);
ScriptableObject.putProperty((Scriptable) nativeArray0, "toStri", (Object) nativeError0);
ScriptableObject.redefineProperty(nativeArray0, "toStri", true);

[MASTER] 09:04:09.347 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 09:04:09.348 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TopLevel topLevel0 = new TopLevel();
ScriptableObject.isTrue(topLevel0);

[MASTER] 09:04:23.990 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockRuntimeException: No Context associated with current Thread
[MASTER] 09:04:23.994 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
assertNotNull(classLoader0);

NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
assertNotNull(nativeJavaTopPackage0);
assertTrue(nativeJavaTopPackage0.isExtensible());
assertEquals("object", nativeJavaTopPackage0.getTypeOf());
assertTrue(nativeJavaTopPackage0.isEmpty());
assertFalse(nativeJavaTopPackage0.isSealed());
assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);

boolean boolean0 = ScriptableObject.hasProperty((Scriptable) nativeJavaTopPackage0, "haszs9?tance");
assertTrue(boolean0);
assertTrue(nativeJavaTopPackage0.isExtensible());
assertEquals("object", nativeJavaTopPackage0.getTypeOf());
assertTrue(nativeJavaTopPackage0.isEmpty());
assertFalse(nativeJavaTopPackage0.isSealed());
assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);

boolean boolean1 = ScriptableObject.isTrue(nativeJavaTopPackage0);
assertTrue(boolean1);
assertTrue(nativeJavaTopPackage0.isExtensible());
assertEquals("object", nativeJavaTopPackage0.getTypeOf());
assertTrue(nativeJavaTopPackage0.isEmpty());
assertFalse(nativeJavaTopPackage0.isSealed());
assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(1, ScriptableObject.READONLY);
assertTrue(boolean1 == boolean0);

NativeArray nativeArray0 = new NativeArray(0);
assertNotNull(nativeArray0);
assertFalse(nativeArray0.isSealed());
assertEquals(0L, nativeArray0.jsGet_length());
assertTrue(nativeArray0.isEmpty());
assertFalse(nativeArray0.avoidObjectDetection());
assertEquals("Array", nativeArray0.getClassName());
assertEquals(0L, nativeArray0.getLength());
assertFalse(nativeArray0.hasPrototypeMap());
assertEquals("object", nativeArray0.getTypeOf());
assertTrue(nativeArray0.isExtensible());
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);

Object[] objectArray0 = new Object[1];
objectArray0[0] = (Object) nativeArray0;
NativeArray nativeArray1 = new NativeArray(objectArray0);
assertEquals(1, objectArray0.length);
assertNotNull(nativeArray1);
assertEquals(1L, nativeArray1.getLength());
assertFalse(nativeArray1.hasPrototypeMap());
assertEquals("object", nativeArray1.getTypeOf());
assertEquals(1L, nativeArray1.jsGet_length());
assertEquals("Array", nativeArray1.getClassName());
assertTrue(nativeArray1.isExtensible());
assertTrue(nativeArray1.isEmpty());
assertFalse(nativeArray1.avoidObjectDetection());
assertFalse(nativeArray1.isSealed());
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertFalse(nativeArray1.equals((Object)nativeArray0));

boolean boolean2 = nativeArray0.containsAll(nativeArray1);
assertNotSame(nativeArray0, nativeArray1);
assertNotSame(nativeArray1, nativeArray0);
assertEquals(1, objectArray0.length);
assertFalse(boolean2);
assertFalse(nativeArray0.isSealed());
assertEquals(0L, nativeArray0.jsGet_length());
assertTrue(nativeArray0.isEmpty());
assertFalse(nativeArray0.avoidObjectDetection());
assertEquals("Array", nativeArray0.getClassName());
assertEquals(0L, nativeArray0.getLength());
assertFalse(nativeArray0.hasPrototypeMap());
assertEquals("object", nativeArray0.getTypeOf());
assertTrue(nativeArray0.isExtensible());
assertEquals(1L, nativeArray1.getLength());
assertFalse(nativeArray1.hasPrototypeMap());
assertEquals("object", nativeArray1.getTypeOf());
assertEquals(1L, nativeArray1.jsGet_length());
assertEquals("Array", nativeArray1.getClassName());
assertTrue(nativeArray1.isExtensible());
assertTrue(nativeArray1.isEmpty());
assertFalse(nativeArray1.avoidObjectDetection());
assertFalse(nativeArray1.isSealed());
assertEquals(2, ScriptableObject.DONTENUM);
assertEquals(13, ScriptableObject.CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(13, ScriptableObject.CONST);
assertEquals(0, ScriptableObject.EMPTY);
assertEquals(1, ScriptableObject.READONLY);
assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
assertEquals(4, ScriptableObject.PERMANENT);
assertEquals(2, ScriptableObject.DONTENUM);
assertFalse(nativeArray0.equals((Object)nativeArray1));
assertFalse(nativeArray1.equals((Object)nativeArray0));
assertFalse(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);

nativeArray0.subList(2039, 8);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'ScriptableObject_ESTest' to results/evosuite5/closure-16-com.google.javascript.rhino.head.ScriptableObject-25
* Done!

* Computation finished

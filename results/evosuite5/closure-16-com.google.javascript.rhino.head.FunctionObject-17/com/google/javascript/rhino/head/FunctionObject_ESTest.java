/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 22:20:07 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.Delegator;
import com.google.javascript.rhino.head.FieldAndMethods;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeJavaArray;
import com.google.javascript.rhino.head.NativeJavaObject;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.Script;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionObject_ESTest extends FunctionObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test00()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertNotNull(methodArray0);
      assertEquals(13, methodArray0.length);
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      
      FunctionObject functionObject0 = new FunctionObject("error reporter", methodArray0[1], nativeContinuation0);
      assertNotNull(functionObject0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(13, methodArray0.length);
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals(2, functionObject0.getArity());
      assertTrue(functionObject0.isExtensible());
      assertFalse(functionObject0.isSealed());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals("function", functionObject0.getTypeOf());
      assertTrue(functionObject0.isEmpty());
      assertEquals("error reporter", functionObject0.getFunctionName());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals(2, functionObject0.getLength());
      assertEquals("Function", functionObject0.getClassName());
      
      boolean boolean0 = functionObject0.isVarArgsConstructor();
      assertFalse(boolean0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(13, methodArray0.length);
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals(2, functionObject0.getArity());
      assertTrue(functionObject0.isExtensible());
      assertFalse(functionObject0.isSealed());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals("function", functionObject0.getTypeOf());
      assertTrue(functionObject0.isEmpty());
      assertEquals("error reporter", functionObject0.getFunctionName());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals(2, functionObject0.getLength());
      assertEquals("Function", functionObject0.getClassName());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test01()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      assertNotNull(context0);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(context0.generateObserverCount);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertNotNull(methodArray0);
      assertEquals(13, methodArray0.length);
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      
      FunctionObject functionObject0 = new FunctionObject("error reporter", methodArray0[1], nativeContinuation0);
      assertNotNull(functionObject0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, methodArray0.length);
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("Function", functionObject0.getClassName());
      assertTrue(functionObject0.isEmpty());
      assertEquals(2, functionObject0.getLength());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals(2, functionObject0.getArity());
      assertTrue(functionObject0.isExtensible());
      assertFalse(functionObject0.hasPrototypeMap());
      assertFalse(functionObject0.isSealed());
      assertEquals("error reporter", functionObject0.getFunctionName());
      
      // Undeclared exception!
      try { 
        functionObject0.createObject(context0, nativeContinuation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped java.lang.InstantiationException: com.google.javascript.rhino.head.NativeJavaArray
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test02()  throws Throwable  {
      Context context0 = Context.getContext();
      assertNotNull(context0);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertNotNull(methodArray0);
      assertEquals(29, methodArray0.length);
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "sum");
      assertNotNull(method0);
      assertEquals(29, methodArray0.length);
      assertFalse(method0.isVarArgs());
      assertEquals(9, method0.getModifiers());
      assertEquals("sum", method0.getName());
      assertEquals("public static double java.lang.Double.sum(double,double)", method0.toString());
      assertFalse(method0.isBridge());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isAccessible());
      
      FunctionObject functionObject0 = new FunctionObject("error reporter", method0, nativeContinuation0);
      assertNotNull(functionObject0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(29, methodArray0.length);
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(method0.isVarArgs());
      assertEquals(9, method0.getModifiers());
      assertEquals("sum", method0.getName());
      assertEquals("public static double java.lang.Double.sum(double,double)", method0.toString());
      assertFalse(method0.isBridge());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isAccessible());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("error reporter", functionObject0.getFunctionName());
      assertFalse(functionObject0.isSealed());
      assertEquals("Function", functionObject0.getClassName());
      assertTrue(functionObject0.isEmpty());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals(2, functionObject0.getLength());
      assertEquals(2, functionObject0.getArity());
      assertTrue(functionObject0.isExtensible());
      assertEquals("function", functionObject0.getTypeOf());
      
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeContinuation0, nativeContinuation0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test03()  throws Throwable  {
      Context context0 = Context.getContext();
      assertNotNull(context0);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertFalse(context0.generateObserverCount);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertNotNull(methodArray0);
      assertEquals(29, methodArray0.length);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "doubleToRawLongBits");
      assertNotNull(method0);
      assertEquals(29, methodArray0.length);
      assertEquals(265, method0.getModifiers());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isBridge());
      assertEquals("public static native long java.lang.Double.doubleToRawLongBits(double)", method0.toString());
      assertEquals("doubleToRawLongBits", method0.getName());
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      
      FunctionObject functionObject0 = new FunctionObject("doubleToRawLongBits", method0, nativeContinuation0);
      assertNotNull(functionObject0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(29, methodArray0.length);
      assertEquals(265, method0.getModifiers());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isBridge());
      assertEquals("public static native long java.lang.Double.doubleToRawLongBits(double)", method0.toString());
      assertEquals("doubleToRawLongBits", method0.getName());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertEquals("doubleToRawLongBits", functionObject0.getFunctionName());
      assertEquals(1, functionObject0.getArity());
      assertTrue(functionObject0.isExtensible());
      assertTrue(functionObject0.isEmpty());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals(1, functionObject0.getLength());
      assertFalse(functionObject0.isSealed());
      assertEquals("Function", functionObject0.getClassName());
      assertFalse(functionObject0.avoidObjectDetection());
      
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        functionObject0.call(context0, functionObject0, functionObject0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test04()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      assertNotNull(context0);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertNotNull(methodArray0);
      assertEquals(13, methodArray0.length);
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(nativeContinuation0.isExtensible());
      
      FunctionObject functionObject0 = new FunctionObject("error reporter", methodArray0[1], nativeContinuation0);
      assertNotNull(functionObject0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, methodArray0.length);
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals(2, functionObject0.getArity());
      assertTrue(functionObject0.isExtensible());
      assertEquals("function", functionObject0.getTypeOf());
      assertFalse(functionObject0.isSealed());
      assertEquals("Function", functionObject0.getClassName());
      assertFalse(functionObject0.avoidObjectDetection());
      assertTrue(functionObject0.isEmpty());
      assertEquals("error reporter", functionObject0.getFunctionName());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals(2, functionObject0.getLength());
      
      NativeContinuation nativeContinuation1 = new NativeContinuation();
      assertFalse(nativeContinuation1.equals((Object)nativeContinuation0));
      assertNotNull(nativeContinuation1);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeContinuation1.isEmpty());
      assertFalse(nativeContinuation1.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation1.getClassName());
      assertTrue(nativeContinuation1.isExtensible());
      assertFalse(nativeContinuation1.hasPrototypeMap());
      assertEquals("object", nativeContinuation1.getTypeOf());
      assertFalse(nativeContinuation1.isSealed());
      
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeContinuation1, nativeContinuation1, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test05()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertNotNull(methodArray0);
      assertEquals(13, methodArray0.length);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getPrototype");
      assertNotNull(method0);
      assertEquals(13, methodArray0.length);
      assertEquals(1, method0.getModifiers());
      assertEquals("public com.google.javascript.rhino.head.Scriptable com.google.javascript.rhino.head.NativeJavaArray.getPrototype()", method0.toString());
      assertFalse(method0.isBridge());
      assertEquals("getPrototype", method0.getName());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isVarArgs());
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isEmpty());
      
      FunctionObject functionObject0 = new FunctionObject("msg.no.overload", method0, nativeContinuation0);
      assertNotNull(functionObject0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(13, methodArray0.length);
      assertEquals(1, method0.getModifiers());
      assertEquals("public com.google.javascript.rhino.head.Scriptable com.google.javascript.rhino.head.NativeJavaArray.getPrototype()", method0.toString());
      assertFalse(method0.isBridge());
      assertEquals("getPrototype", method0.getName());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isVarArgs());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals(0, functionObject0.getLength());
      assertTrue(functionObject0.isEmpty());
      assertEquals("Function", functionObject0.getClassName());
      assertFalse(functionObject0.avoidObjectDetection());
      assertFalse(functionObject0.isSealed());
      assertEquals("msg.no.overload", functionObject0.getFunctionName());
      assertTrue(functionObject0.isExtensible());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals(0, functionObject0.getArity());
      
      NativeContinuation nativeContinuation1 = new NativeContinuation();
      assertFalse(nativeContinuation1.equals((Object)nativeContinuation0));
      assertNotNull(nativeContinuation1);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeContinuation1.isSealed());
      assertFalse(nativeContinuation1.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation1.getClassName());
      assertTrue(nativeContinuation1.isExtensible());
      assertFalse(nativeContinuation1.hasPrototypeMap());
      assertEquals("object", nativeContinuation1.getTypeOf());
      assertTrue(nativeContinuation1.isEmpty());
      
      Context context0 = Context.getCurrentContext();
      assertNotNull(context0);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeContinuation1, nativeContinuation0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test06()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertNotNull(methodArray0);
      assertEquals(13, methodArray0.length);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getPrototype");
      assertNotNull(method0);
      assertEquals(13, methodArray0.length);
      assertFalse(method0.isAccessible());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isBridge());
      assertFalse(method0.isVarArgs());
      assertEquals("public com.google.javascript.rhino.head.Scriptable com.google.javascript.rhino.head.NativeJavaArray.getPrototype()", method0.toString());
      assertFalse(method0.isSynthetic());
      assertEquals("getPrototype", method0.getName());
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      
      FunctionObject functionObject0 = new FunctionObject("msg.no.overload", method0, nativeContinuation0);
      assertNotNull(functionObject0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, methodArray0.length);
      assertFalse(method0.isAccessible());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isBridge());
      assertFalse(method0.isVarArgs());
      assertEquals("public com.google.javascript.rhino.head.Scriptable com.google.javascript.rhino.head.NativeJavaArray.getPrototype()", method0.toString());
      assertFalse(method0.isSynthetic());
      assertEquals("getPrototype", method0.getName());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(functionObject0.hasPrototypeMap());
      assertFalse(functionObject0.isSealed());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("Function", functionObject0.getClassName());
      assertEquals(0, functionObject0.getArity());
      assertEquals("function", functionObject0.getTypeOf());
      assertTrue(functionObject0.isExtensible());
      assertTrue(functionObject0.isEmpty());
      assertEquals(0, functionObject0.getLength());
      assertEquals("msg.no.overload", functionObject0.getFunctionName());
      
      Context context0 = Context.getCurrentContext();
      assertNotNull(context0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeContinuation0, nativeContinuation0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test07()  throws Throwable  {
      Context context0 = new Context();
      assertNotNull(context0);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) null, (Object) null, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't convert to type \"java.lang.reflect.Method\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      Class<NativeJavaObject> class0 = NativeJavaObject.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertNotNull(methodArray0);
      assertEquals(21, methodArray0.length);
      
      // Undeclared exception!
      try { 
        FunctionObject.findSingleMethod(methodArray0, "has");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"has\" occurs multiple times in class \"com.google.javascript.rhino.head.NativeJavaObject\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Method[] methodArray0 = new Method[3];
      Method method0 = FunctionObject.findSingleMethod(methodArray0, (String) null);
      assertNull(method0);
      assertEquals(3, methodArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test10()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertNotNull(methodArray0);
      assertEquals(13, methodArray0.length);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getPrototype");
      assertNotNull(method0);
      assertEquals(13, methodArray0.length);
      assertEquals("getPrototype", method0.getName());
      assertEquals("public com.google.javascript.rhino.head.Scriptable com.google.javascript.rhino.head.NativeJavaArray.getPrototype()", method0.toString());
      assertFalse(method0.isBridge());
      assertFalse(method0.isVarArgs());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isSynthetic());
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      
      FunctionObject functionObject0 = new FunctionObject((String) null, method0, nativeContinuation0);
      assertNotNull(functionObject0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(13, methodArray0.length);
      assertEquals("getPrototype", method0.getName());
      assertEquals("public com.google.javascript.rhino.head.Scriptable com.google.javascript.rhino.head.NativeJavaArray.getPrototype()", method0.toString());
      assertFalse(method0.isBridge());
      assertFalse(method0.isVarArgs());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isSynthetic());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("", functionObject0.getFunctionName());
      assertFalse(functionObject0.isSealed());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals(0, functionObject0.getLength());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals(0, functionObject0.getArity());
      assertEquals("Function", functionObject0.getClassName());
      assertTrue(functionObject0.isExtensible());
      assertEquals("function", functionObject0.getTypeOf());
      assertTrue(functionObject0.isEmpty());
      
      String string0 = functionObject0.getFunctionName();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(13, methodArray0.length);
      assertEquals("getPrototype", method0.getName());
      assertEquals("public com.google.javascript.rhino.head.Scriptable com.google.javascript.rhino.head.NativeJavaArray.getPrototype()", method0.toString());
      assertFalse(method0.isBridge());
      assertFalse(method0.isVarArgs());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isSynthetic());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("", functionObject0.getFunctionName());
      assertFalse(functionObject0.isSealed());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals(0, functionObject0.getLength());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals(0, functionObject0.getArity());
      assertEquals("Function", functionObject0.getClassName());
      assertTrue(functionObject0.isExtensible());
      assertEquals("function", functionObject0.getTypeOf());
      assertTrue(functionObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<NativeArray> class0 = NativeArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertNotNull(methodArray0);
      assertEquals(37, methodArray0.length);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "has");
      assertNotNull(method0);
      assertEquals(37, methodArray0.length);
      assertEquals("has", method0.getName());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isBridge());
      assertFalse(method0.isAccessible());
      assertEquals("public boolean com.google.javascript.rhino.head.NativeArray.has(int,com.google.javascript.rhino.head.Scriptable)", method0.toString());
      assertFalse(method0.isSynthetic());
      assertEquals(1, method0.getModifiers());
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isEmpty());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      
      FunctionObject functionObject0 = new FunctionObject("has", method0, nativeContinuation0);
      assertNotNull(functionObject0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(37, methodArray0.length);
      assertEquals("has", method0.getName());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isBridge());
      assertFalse(method0.isAccessible());
      assertEquals("public boolean com.google.javascript.rhino.head.NativeArray.has(int,com.google.javascript.rhino.head.Scriptable)", method0.toString());
      assertFalse(method0.isSynthetic());
      assertEquals(1, method0.getModifiers());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isEmpty());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals(2, functionObject0.getLength());
      assertEquals(2, functionObject0.getArity());
      assertTrue(functionObject0.isExtensible());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals("has", functionObject0.getFunctionName());
      assertEquals("function", functionObject0.getTypeOf());
      assertTrue(functionObject0.isEmpty());
      assertFalse(functionObject0.avoidObjectDetection());
      assertFalse(functionObject0.isSealed());
      assertEquals("Function", functionObject0.getClassName());
      
      String string0 = functionObject0.getFunctionName();
      assertEquals("has", string0);
      assertNotNull(string0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(37, methodArray0.length);
      assertEquals("has", method0.getName());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isBridge());
      assertFalse(method0.isAccessible());
      assertEquals("public boolean com.google.javascript.rhino.head.NativeArray.has(int,com.google.javascript.rhino.head.Scriptable)", method0.toString());
      assertFalse(method0.isSynthetic());
      assertEquals(1, method0.getModifiers());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isEmpty());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals(2, functionObject0.getLength());
      assertEquals(2, functionObject0.getArity());
      assertTrue(functionObject0.isExtensible());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals("has", functionObject0.getFunctionName());
      assertEquals("function", functionObject0.getTypeOf());
      assertTrue(functionObject0.isEmpty());
      assertFalse(functionObject0.avoidObjectDetection());
      assertFalse(functionObject0.isSealed());
      assertEquals("Function", functionObject0.getClassName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      
      Double double0 = new Double((-2177.52));
      assertEquals((-2177.52), (double)double0, 0.01);
      assertNotNull(double0);
      
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) null, (Object) double0, 4);
      assertEquals((-2177.52), object0);
      assertNotNull(object0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      
      Class<Boolean> class0 = Boolean.class;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) null, (Object) null, (Class<?>) class0);
      assertEquals(false, object0);
      assertNotNull(object0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test14()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Context context0 = Context.getContext();
      assertNotNull(context0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) null, (Object) context0.generateObserverCount, (Class<?>) class0);
      assertEquals(false, object0);
      assertNotNull(object0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      
      Delegator delegator0 = new Delegator((Scriptable) null);
      assertNotNull(delegator0);
      
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) delegator0, (Object) delegator0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Delegator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(nativeContinuation0.isExtensible());
      assertTrue(nativeContinuation0.isEmpty());
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeContinuation0, (Object) "getPrototype", 1);
      assertEquals("getPrototype", object0);
      assertNotNull(object0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(nativeContinuation0.isExtensible());
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.generateObserverCount);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      
      NativeObject nativeObject0 = (NativeObject)context0.initStandardObjects();
      assertNotNull(nativeObject0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.generateObserverCount);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.isEmpty());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertTrue(nativeObject0.isExtensible());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isSealed());
      
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeObject0, (Object) nativeObject0, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      
      NativeObject nativeObject0 = (NativeObject)context0.initStandardObjects();
      assertNotNull(nativeObject0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.isEmpty());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      
      Class<Object> class0 = Object.class;
      NativeObject nativeObject1 = (NativeObject)FunctionObject.convertArg(context0, (Scriptable) nativeObject0, (Object) nativeObject0, (Class<?>) class0);
      assertNotNull(nativeObject1);
      assertSame(nativeObject0, nativeObject1);
      assertSame(nativeObject1, nativeObject0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.isEmpty());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject1.avoidObjectDetection());
      assertFalse(nativeObject1.isSealed());
      assertFalse(nativeObject1.hasPrototypeMap());
      assertTrue(nativeObject1.isExtensible());
      assertEquals("object", nativeObject1.getTypeOf());
      assertEquals("Object", nativeObject1.getClassName());
      assertFalse(nativeObject1.isEmpty());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test19()  throws Throwable  {
      Context context0 = Context.getContext();
      Class<FieldAndMethods> class0 = FieldAndMethods.class;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) null, (Object) context0, (Class<?>) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test20()  throws Throwable  {
      Context context0 = Context.getContext();
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "doubleToRawLongBits");
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      FunctionObject functionObject0 = new FunctionObject("doubleToRawLongBits", method0, nativeContinuation0);
      // Undeclared exception!
      try { 
        functionObject0.call(context0, functionObject0, functionObject0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      assertNull(context0);
      
      Class<String> class0 = String.class;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) null, (Object) context0, (Class<?>) class0);
      assertEquals("null", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Double> class0 = Double.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test23()  throws Throwable  {
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      
      Class<Boolean> class0 = Boolean.class;
      FunctionObject.convertArg(context0, (Scriptable) null, (Object) class0, (Class<?>) class0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      
      Class<Integer> class0 = Integer.class;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) null, (Object) context0.VERSION_1_1, (Class<?>) class0);
      assertEquals(110, object0);
      assertNotNull(object0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      //  // Unstable assertion: assertNotNull(methodArray0);
      //  // Unstable assertion: assertEquals(13, methodArray0.length);
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      //  // Unstable assertion: assertNotNull(nativeContinuation0);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertTrue(nativeContinuation0.isExtensible());
      //  // Unstable assertion: assertFalse(nativeContinuation0.hasPrototypeMap());
      //  // Unstable assertion: assertEquals("object", nativeContinuation0.getTypeOf());
      //  // Unstable assertion: assertTrue(nativeContinuation0.isEmpty());
      //  // Unstable assertion: assertFalse(nativeContinuation0.avoidObjectDetection());
      //  // Unstable assertion: assertFalse(nativeContinuation0.isSealed());
      //  // Unstable assertion: assertEquals("Continuation", nativeContinuation0.getClassName());
      
      FunctionObject functionObject0 = new FunctionObject("error reporter", methodArray0[1], nativeContinuation0);
      //  // Unstable assertion: assertNotNull(functionObject0);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      //  // Unstable assertion: assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      //  // Unstable assertion: assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      //  // Unstable assertion: assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(13, methodArray0.length);
      //  // Unstable assertion: assertTrue(nativeContinuation0.isExtensible());
      //  // Unstable assertion: assertFalse(nativeContinuation0.hasPrototypeMap());
      //  // Unstable assertion: assertEquals("object", nativeContinuation0.getTypeOf());
      //  // Unstable assertion: assertTrue(nativeContinuation0.isEmpty());
      //  // Unstable assertion: assertFalse(nativeContinuation0.avoidObjectDetection());
      //  // Unstable assertion: assertFalse(nativeContinuation0.isSealed());
      //  // Unstable assertion: assertEquals("Continuation", nativeContinuation0.getClassName());
      //  // Unstable assertion: assertFalse(functionObject0.isSealed());
      //  // Unstable assertion: assertFalse(functionObject0.hasPrototypeMap());
      //  // Unstable assertion: assertEquals(2, functionObject0.getArity());
      //  // Unstable assertion: assertTrue(functionObject0.isExtensible());
      //  // Unstable assertion: assertEquals("error reporter", functionObject0.getFunctionName());
      //  // Unstable assertion: assertEquals(2, functionObject0.getLength());
      //  // Unstable assertion: assertFalse(functionObject0.avoidObjectDetection());
      //  // Unstable assertion: assertEquals("Function", functionObject0.getClassName());
      //  // Unstable assertion: assertEquals("function", functionObject0.getTypeOf());
      //  // Unstable assertion: assertTrue(functionObject0.isEmpty());
      
      Method method0 = (Method)functionObject0.getMethodOrConstructor();
      //  // Unstable assertion: assertNotNull(method0);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      //  // Unstable assertion: assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      //  // Unstable assertion: assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      //  // Unstable assertion: assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(13, methodArray0.length);
      //  // Unstable assertion: assertTrue(nativeContinuation0.isExtensible());
      //  // Unstable assertion: assertFalse(nativeContinuation0.hasPrototypeMap());
      //  // Unstable assertion: assertEquals("object", nativeContinuation0.getTypeOf());
      //  // Unstable assertion: assertTrue(nativeContinuation0.isEmpty());
      //  // Unstable assertion: assertFalse(nativeContinuation0.avoidObjectDetection());
      //  // Unstable assertion: assertFalse(nativeContinuation0.isSealed());
      //  // Unstable assertion: assertEquals("Continuation", nativeContinuation0.getClassName());
      //  // Unstable assertion: assertFalse(functionObject0.isSealed());
      //  // Unstable assertion: assertFalse(functionObject0.hasPrototypeMap());
      //  // Unstable assertion: assertEquals(2, functionObject0.getArity());
      //  // Unstable assertion: assertTrue(functionObject0.isExtensible());
      //  // Unstable assertion: assertEquals("error reporter", functionObject0.getFunctionName());
      //  // Unstable assertion: assertEquals(2, functionObject0.getLength());
      //  // Unstable assertion: assertFalse(functionObject0.avoidObjectDetection());
      //  // Unstable assertion: assertEquals("Function", functionObject0.getClassName());
      //  // Unstable assertion: assertEquals("function", functionObject0.getTypeOf());
      //  // Unstable assertion: assertTrue(functionObject0.isEmpty());
      //  // Unstable assertion: assertFalse(method0.isBridge());
      //  // Unstable assertion: assertFalse(method0.isSynthetic());
      //  // Unstable assertion: assertFalse(method0.isVarArgs());
      //  // Unstable assertion: assertFalse(method0.isAccessible());
      //  // Unstable assertion: assertEquals("public boolean com.google.javascript.rhino.head.NativeJavaArray.has(java.lang.String,com.google.javascript.rhino.head.Scriptable)", method0.toString());
      //  // Unstable assertion: assertEquals(1, method0.getModifiers());
      //  // Unstable assertion: assertEquals("has", method0.getName());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test26()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      //  // Unstable assertion: assertNotNull(methodArray0);
      //  // Unstable assertion: assertEquals(13, methodArray0.length);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getDefaultValue");
      //  // Unstable assertion: assertNotNull(method0);
      //  // Unstable assertion: assertEquals(13, methodArray0.length);
      //  // Unstable assertion: assertFalse(method0.isVarArgs());
      //  // Unstable assertion: assertFalse(method0.isBridge());
      //  // Unstable assertion: assertFalse(method0.isAccessible());
      //  // Unstable assertion: assertEquals(1, method0.getModifiers());
      //  // Unstable assertion: assertFalse(method0.isSynthetic());
      //  // Unstable assertion: assertEquals("getDefaultValue", method0.getName());
      //  // Unstable assertion: assertEquals("public java.lang.Object com.google.javascript.rhino.head.NativeJavaArray.getDefaultValue(java.lang.Class)", method0.toString());
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      //  // Unstable assertion: assertNotNull(nativeContinuation0);
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertFalse(nativeContinuation0.avoidObjectDetection());
      //  // Unstable assertion: assertEquals("Continuation", nativeContinuation0.getClassName());
      //  // Unstable assertion: assertTrue(nativeContinuation0.isEmpty());
      //  // Unstable assertion: assertFalse(nativeContinuation0.hasPrototypeMap());
      //  // Unstable assertion: assertEquals("object", nativeContinuation0.getTypeOf());
      //  // Unstable assertion: assertTrue(nativeContinuation0.isExtensible());
      //  // Unstable assertion: assertFalse(nativeContinuation0.isSealed());
      
      FunctionObject functionObject0 = null;
      try {
        functionObject0 = new FunctionObject("rrj9!H", method0, nativeContinuation0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Unsupported parameter type \"java.lang.Class\" in method \"getDefaultValue\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaAdapter.runScript((Script) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.JavaAdapter$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      //  // Unstable assertion: assertNotNull(methodArray0);
      //  // Unstable assertion: assertEquals(13, methodArray0.length);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getPrototype");
      //  // Unstable assertion: assertNotNull(method0);
      //  // Unstable assertion: assertEquals(13, methodArray0.length);
      //  // Unstable assertion: assertEquals("getPrototype", method0.getName());
      //  // Unstable assertion: assertFalse(method0.isSynthetic());
      //  // Unstable assertion: assertEquals(1, method0.getModifiers());
      //  // Unstable assertion: assertEquals("public com.google.javascript.rhino.head.Scriptable com.google.javascript.rhino.head.NativeJavaArray.getPrototype()", method0.toString());
      //  // Unstable assertion: assertFalse(method0.isBridge());
      //  // Unstable assertion: assertFalse(method0.isAccessible());
      //  // Unstable assertion: assertFalse(method0.isVarArgs());
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      //  // Unstable assertion: assertNotNull(nativeContinuation0);
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertTrue(nativeContinuation0.isEmpty());
      //  // Unstable assertion: assertFalse(nativeContinuation0.avoidObjectDetection());
      //  // Unstable assertion: assertFalse(nativeContinuation0.isSealed());
      //  // Unstable assertion: assertEquals("Continuation", nativeContinuation0.getClassName());
      //  // Unstable assertion: assertTrue(nativeContinuation0.isExtensible());
      //  // Unstable assertion: assertFalse(nativeContinuation0.hasPrototypeMap());
      //  // Unstable assertion: assertEquals("object", nativeContinuation0.getTypeOf());
      
      FunctionObject functionObject0 = new FunctionObject("msg.no.overload", method0, nativeContinuation0);
      //  // Unstable assertion: assertNotNull(functionObject0);
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      //  // Unstable assertion: assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      //  // Unstable assertion: assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      //  // Unstable assertion: assertEquals(13, methodArray0.length);
      //  // Unstable assertion: assertEquals("getPrototype", method0.getName());
      //  // Unstable assertion: assertFalse(method0.isSynthetic());
      //  // Unstable assertion: assertEquals(1, method0.getModifiers());
      //  // Unstable assertion: assertEquals("public com.google.javascript.rhino.head.Scriptable com.google.javascript.rhino.head.NativeJavaArray.getPrototype()", method0.toString());
      //  // Unstable assertion: assertFalse(method0.isBridge());
      //  // Unstable assertion: assertFalse(method0.isAccessible());
      //  // Unstable assertion: assertFalse(method0.isVarArgs());
      //  // Unstable assertion: assertTrue(nativeContinuation0.isEmpty());
      //  // Unstable assertion: assertFalse(nativeContinuation0.avoidObjectDetection());
      //  // Unstable assertion: assertFalse(nativeContinuation0.isSealed());
      //  // Unstable assertion: assertEquals("Continuation", nativeContinuation0.getClassName());
      //  // Unstable assertion: assertTrue(nativeContinuation0.isExtensible());
      //  // Unstable assertion: assertFalse(nativeContinuation0.hasPrototypeMap());
      //  // Unstable assertion: assertEquals("object", nativeContinuation0.getTypeOf());
      //  // Unstable assertion: assertTrue(functionObject0.isExtensible());
      //  // Unstable assertion: assertEquals("msg.no.overload", functionObject0.getFunctionName());
      //  // Unstable assertion: assertFalse(functionObject0.hasPrototypeMap());
      //  // Unstable assertion: assertEquals("function", functionObject0.getTypeOf());
      //  // Unstable assertion: assertEquals(0, functionObject0.getArity());
      //  // Unstable assertion: assertTrue(functionObject0.isEmpty());
      //  // Unstable assertion: assertFalse(functionObject0.isSealed());
      //  // Unstable assertion: assertEquals(0, functionObject0.getLength());
      //  // Unstable assertion: assertFalse(functionObject0.avoidObjectDetection());
      //  // Unstable assertion: assertEquals("Function", functionObject0.getClassName());
      
      functionObject0.addAsConstructor(nativeContinuation0, nativeContinuation0);
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      //  // Unstable assertion: assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      //  // Unstable assertion: assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      //  // Unstable assertion: assertEquals(13, methodArray0.length);
      //  // Unstable assertion: assertEquals("getPrototype", method0.getName());
      //  // Unstable assertion: assertFalse(method0.isSynthetic());
      //  // Unstable assertion: assertEquals(1, method0.getModifiers());
      //  // Unstable assertion: assertEquals("public com.google.javascript.rhino.head.Scriptable com.google.javascript.rhino.head.NativeJavaArray.getPrototype()", method0.toString());
      //  // Unstable assertion: assertFalse(method0.isBridge());
      //  // Unstable assertion: assertFalse(method0.isAccessible());
      //  // Unstable assertion: assertFalse(method0.isVarArgs());
      //  // Unstable assertion: assertFalse(nativeContinuation0.avoidObjectDetection());
      //  // Unstable assertion: assertFalse(nativeContinuation0.isSealed());
      //  // Unstable assertion: assertFalse(nativeContinuation0.isEmpty());
      //  // Unstable assertion: assertEquals("Continuation", nativeContinuation0.getClassName());
      //  // Unstable assertion: assertTrue(nativeContinuation0.isExtensible());
      //  // Unstable assertion: assertFalse(nativeContinuation0.hasPrototypeMap());
      //  // Unstable assertion: assertEquals("object", nativeContinuation0.getTypeOf());
      //  // Unstable assertion: assertTrue(functionObject0.isExtensible());
      //  // Unstable assertion: assertEquals("msg.no.overload", functionObject0.getFunctionName());
      //  // Unstable assertion: assertFalse(functionObject0.hasPrototypeMap());
      //  // Unstable assertion: assertEquals("function", functionObject0.getTypeOf());
      //  // Unstable assertion: assertEquals(0, functionObject0.getArity());
      //  // Unstable assertion: assertTrue(functionObject0.isEmpty());
      //  // Unstable assertion: assertFalse(functionObject0.isSealed());
      //  // Unstable assertion: assertEquals(0, functionObject0.getLength());
      //  // Unstable assertion: assertFalse(functionObject0.avoidObjectDetection());
      //  // Unstable assertion: assertEquals("Function", functionObject0.getClassName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<NativeArray> class0 = NativeArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "has");
      assertNotNull(method0);
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      FunctionObject functionObject0 = new FunctionObject("has", method0, nativeContinuation0);
      int int0 = functionObject0.getLength();
      assertEquals(37, methodArray0.length);
      assertEquals(2, int0);
  }
}

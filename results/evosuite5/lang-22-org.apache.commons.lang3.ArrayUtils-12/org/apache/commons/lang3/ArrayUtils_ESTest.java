/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 16:28:08 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Map;
import org.apache.commons.lang3.ArrayUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)105;
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)6;
      boolean boolean0 = ArrayUtils.isNotEmpty(objectArray0);
      assertTrue(boolean0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 4);
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) comparableArray0, object0, (-1));
      assertEquals((-1), int0);
      assertEquals(4, comparableArray0.length);
      
      comparableArray0[0] = (Comparable<Integer>) (-1);
      boolean[] booleanArray0 = new boolean[0];
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      comparableArray0[1] = (Comparable<Integer>) (-1);
      Integer integer0 = null;
      try {
        integer0 = new Integer("gC|(V`J}%");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"gC|(V`J}%\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1}, intArray0);
      
      Double double0 = new Double(1);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (-1L));
      assertNull(longArray0);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-54);
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)12, (byte) (-54)}, byteArray0);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      boolean boolean2 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-112);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-112), (byte) (-112), (byte) (-112)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-112), (byte) (-112), (byte) (-112), (byte)0, (byte)0, (byte) (-112), (byte) (-112), (byte) (-112)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[4];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 263.28502487891;
      doubleArray0[1] = 263.28502487891;
      doubleArray0[2] = (-4233.609281737091);
      doubleArray0[3] = 263.28502487891;
      doubleArray0[4] = (-4233.609281737091);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-4233.609281737091);
      ArrayUtils.reverse(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-4233.609281737091), 0.0, (-4233.609281737091), 263.28502487891, (-4233.609281737091), 263.28502487891, 263.28502487891}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-3188.073F);
      floatArray0[4] = 0.0F;
      floatArray0[6] = (-3188.073F);
      floatArray0[7] = 0.0F;
      boolean boolean2 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-3188.073F), 0.0F, 0.0F, (-3188.073F), 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1795.033374572);
      doubleArray0[1] = (-1795.033374572);
      doubleArray0[5] = (-1795.033374572);
      doubleArray0[3] = (-1795.033374572);
      doubleArray0[4] = (-1795.033374572);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1795.033374572));
      assertEquals(5, int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1795.033374572), (-1795.033374572), 0.0, (-1795.033374572), (-1795.033374572), (-1795.033374572), 0.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) 5, (-1795.033374572));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1795.033374572), (-1795.033374572), 0.0, (-1795.033374572), (-1795.033374572), (-1795.033374572), 0.0}, doubleArray0, 0.01);
      
      Comparable<Integer>[] comparableArray0 = ArrayUtils.addAll((Comparable<Integer>[]) null, (Comparable<Integer>[]) null);
      assertNull(comparableArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 2634.133691;
      doubleArray0[2] = 2634.133691;
      doubleArray0[3] = 43.793053276931;
      doubleArray0[4] = 3.0;
      doubleArray0[5] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, 64, 2634.133691);
      assertEquals(5, int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 2634.133691, 2634.133691, 43.793053276931, 3.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = Byte.toUnsignedInt((byte)36);
      assertEquals(36, int0);
      
      Byte byte0 = new Byte((byte)120);
      assertNotNull(byte0);
      assertEquals((byte)120, (byte)byte0);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)122);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)120}, byteArray1);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)882;
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertArrayEquals(new double[] {882.0, 0.0, 0.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Boolean boolean0 = new Boolean("}ZnVo:T");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray1 = new Boolean[3];
      booleanArray0[6] = false;
      booleanArray1[2] = (Boolean) false;
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertNotNull(booleanArray2);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray2.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {882.0, 0.0, 0.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(booleanArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean("]o6;/Xo");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = Boolean.getBoolean("]o6;/Xo");
      assertFalse(boolean1);
      
      int int0 = Boolean.compare(false, false);
      assertEquals(0, int0);
      
      boolean boolean2 = Boolean.getBoolean((String) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-1));
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      
      Boolean boolean3 = new Boolean(false);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      Boolean boolean4 = new Boolean((String) null);
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      boolean boolean5 = ArrayUtils.isSameLength((double[]) null, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      boolean[] booleanArray2 = new boolean[4];
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[3] = false;
      boolean boolean6 = ArrayUtils.isNotEmpty(booleanArray2);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6);
      assertEquals(4, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray2));
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, 0.0, 1431655765, 0.0);
      assertFalse(int1 == int0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, int1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 7;
      floatArray0[1] = (float) (byte) (-1);
      floatArray0[2] = (float) 1431655765;
      int int2 = ArrayUtils.lastIndexOf(floatArray0, (float) 1431655765, (-2087831323));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {7.0F, (-1.0F), 1.43165581E9F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, 2145649680);
      assertEquals((-1), int0);
      
      Character character0 = Character.valueOf('@');
      assertNotNull(character0);
      assertEquals('@', (char)character0);
      
      Character character1 = new Character('n');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('n', (char)character1);
      
      Character character2 = Character.valueOf('$');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('$', (char)character2);
      
      Character character3 = new Character('n');
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('n', (char)character3);
      
      Character character4 = Character.valueOf('7');
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      assertEquals('7', (char)character4);
      
      Character character5 = new Character('5');
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character0));
      assertNotNull(character5);
      assertEquals('5', (char)character5);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean1 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 156.5F;
      floatArray0[2] = (-3523.7344F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, (-416.49F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 156.5F, (-3523.7344F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-416.49F), 1.0F, 156.5F, (-3523.7344F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0}, intArray0);
      
      byte[] byteArray0 = new byte[2];
      intArray0[1] = (int) (byte)1;
      byteArray0[1] = (byte) (-6);
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte byte0 = (byte)87;
      Byte byte1 = new Byte((byte)87);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)87, (byte)byte1);
      
      Byte[] byteArray0 = new Byte[19];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)3);
      assertNotNull(byteArray1);
      assertEquals(19, byteArray0.length);
      assertEquals(19, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, (int) (byte)3, (int) byte0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(19, byteArray0.length);
      assertEquals(19, byteArray1.length);
      assertEquals(16, byteArray2.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = Boolean.getBoolean("]o6;/Xo");
      assertFalse(boolean1);
      
      int int0 = Boolean.compare(false, false);
      assertEquals(0, int0);
      
      boolean boolean2 = Boolean.getBoolean("]o6;/Xo");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = Boolean.logicalAnd(true, true);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      boolean boolean4 = Boolean.getBoolean((String) null);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      boolean boolean5 = Boolean.logicalOr(true, false);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertNotNull(booleanArray2);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-112));
      assertNull(byteArray0);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 156.5F;
      floatArray0[2] = (-3523.7344F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      ArrayUtils.reverse(floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, (-3523.7344F), 156.5F, 1.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2461;
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {2461, (-1)}, intArray0);
      assertArrayEquals(new int[] {2461}, intArray1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3525.936704049;
      doubleArray0[1] = 792.0028203;
      doubleArray0[2] = 263.28502487891;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 4.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 792.0028203, 2, 1234.572);
      assertEquals(2, int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {3525.936704049, 792.0028203, 263.28502487891, 0.0, (-1.0), 4.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(3, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray2));
      
      int int1 = ArrayUtils.indexOf(booleanArray1, true, Integer.MAX_VALUE);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (-950);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, (-950), 0}, intArray0);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (-2101L));
      assertNull(longArray0);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'w');
      assertEquals((-1), int0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = 100;
      intArray0[1] = (-2063);
      intArray0[2] = (-49);
      intArray0[3] = 3134;
      intArray0[4] = 100;
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.add(stringArray0, "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, objectArray0);
      assertFalse(boolean0);
      assertEquals(2, objectArray0.length);
      
      Object[] objectArray1 = new Object[6];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) "";
      objectArray1[1] = (Object) "";
      objectArray1[2] = (Object) "";
      objectArray1[4] = (Object) "";
      objectArray1[5] = (Object) "";
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      short[] shortArray0 = new short[5];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 263.28502487891);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 263.28502487891}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 263.28502487891}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 263.28502487891}, doubleArray2, 0.01);
      
      float[] floatArray0 = new float[11];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 2488.0F;
      floatArray0[2] = (-1169.9498F);
      floatArray0[3] = (-1169.9498F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 2488.0F;
      floatArray0[6] = (-4246.4F);
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, object0);
      assertFalse(boolean0);
      
      Long long0 = Long.getLong("", 191L);
      assertNotNull(long0);
      assertEquals(191L, (long)long0);
      
      Long long1 = new Long(191L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(191L, (long)long1);
      
      Long long2 = new Long(172L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(172L, (long)long2);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 191L;
      longArray0[1] = 172L;
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {191L, 172L}, longArray0);
      
      boolean boolean2 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-36);
      byteArray1[1] = (byte) (-4);
      byteArray1[2] = (byte)48;
      boolean boolean3 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-36), (byte) (-4), (byte)48}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = ArrayUtils.isEquals(object1, object1);
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean0);
      assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1143.92), 0, (double) 0);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[5];
      String string0 = "[Vx ;k^";
      stringArray0[0] = "[Vx ;k^";
      String string1 = "diU;^\\Wod;!!";
      stringArray0[1] = "diU;^Wod;!!";
      stringArray0[2] = "@";
      stringArray0[3] = "', is neither of type Map.Entry nor an Array";
      String string2 = "";
      stringArray0[4] = "";
      // Undeclared exception!
      try { 
        ArrayUtils.add(stringArray0, (-3395), "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3395, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Character character0 = new Character('h');
      assertNotNull(character0);
      assertEquals('h', (char)character0);
      
      float[] floatArray0 = new float[6];
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) 'h';
      floatArray0[4] = (float) 'h';
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Double double0 = new Double(4571.1359727);
      assertNotNull(double0);
      assertEquals(4571.1359727, (double)double0, 0.01);
      
      Double double1 = new Double(4571.1359727);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(4571.1359727, (double)double1, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 860.0);
      assertNull(doubleArray0);
      
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("`L&(d?<r", "`L&(d?<r");
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleImmutableEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleImmutableEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      Comparator<Map.Entry<Object, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractMap.SimpleImmutableEntry<String, Object>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<String, Object>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 4);
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry2;
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<String, Object>("`L&(d?<r", abstractMap_SimpleImmutableEntry2);
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<String, Object>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.subarray(abstractMap_SimpleImmutableEntryArray0, (-2947), 750);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertEquals(4, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(4, abstractMap_SimpleImmutableEntryArray1.length);
      
      Integer integer0 = new Integer((-2963));
      assertNotNull(integer0);
      assertEquals((-2963), (int)integer0);
      
      Integer integer1 = new Integer((-2963));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2963), (int)integer1);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "W9,}I7!He?`uMT;:&sA";
      String[] stringArray1 = ArrayUtils.add(stringArray0, (String) null);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(3, stringArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[8];
      longArray0[1] = (-3375L);
      longArray0[2] = 0L;
      longArray0[3] = 760L;
      longArray0[4] = 0L;
      longArray0[5] = 1L;
      longArray0[6] = 313L;
      longArray0[7] = (-1002L);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, (-3375L), 0L, 760L, 0L, 1L, 313L, (-1002L)}, longArray0);
      
      boolean boolean1 = ArrayUtils.isEquals((Object) null, "W9,}I7!He?`uMT;:&sA");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotNull(objectArray0);
      assertSame(stringArray0, objectArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2863.0);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      char[] charArray0 = new char[7];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      charArray0[3] = 'F';
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 'F';
      floatArray1[1] = (-1750.0F);
      floatArray1[2] = (float) 'F';
      floatArray1[3] = (float) 1;
      floatArray1[4] = 733.7848F;
      floatArray1[5] = (float) '\u0000';
      floatArray1[6] = (float) 'F';
      floatArray1[7] = (float) 1;
      floatArray1[8] = (float) 'L';
      ArrayUtils.reverse(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {76.0F, 1.0F, 70.0F, 0.0F, 733.7848F, 1.0F, 70.0F, (-1750.0F), 70.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 263.28502487891;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-4233.609281737091);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-36.619453F);
      floatArray0[1] = (-36.619453F);
      floatArray0[2] = 869.805F;
      floatArray0[3] = (-36.619453F);
      floatArray0[4] = (-36.619453F);
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-36.619453F), (-36.619453F), 869.805F, (-36.619453F), (-36.619453F)}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isEmpty((int[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[0];
      boolean boolean2 = ArrayUtils.contains(shortArray0, (short)199);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2863.385);
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-4);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (byte[]) null);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)85, (byte) (-4)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)85, (byte) (-4)}, byteArray1);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte)85);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)85, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-1));
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short) (-1), (short)short2);
      
      shortArray0[2] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)2429);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)85, (short) (-1)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      doubleArray0[0] = (-0.10299504367991741);
      doubleArray0[1] = (-5.69295527);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(15, doubleArray0.length);
      
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-3188.073F);
      floatArray0[6] = 0.0F;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-3188.073F), 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 3290;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean2 = ArrayUtils.contains(booleanArray0, false);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      int int0 = ArrayUtils.indexOf(intArray0, 2146019787, (-1530));
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {3290, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)102;
      byteArray0[8] = (byte)7;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)83, (byte)87, (byte) (-116), (byte) (-1), (byte) (-92), (byte)27, (byte) (-1), (byte)102, (byte)7}, byteArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2300, (-2875));
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-5.69295527);
      doubleArray0[1] = (-719.03);
      doubleArray0[2] = (-5.69295527);
      doubleArray0[3] = (-5.69295527);
      doubleArray0[4] = (-5.69295527);
      doubleArray0[6] = (-5.69295527);
      doubleArray0[7] = (-5.69295527);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-5.69295527), (-719.03), (-5.69295527), (-5.69295527), (-5.69295527), 0.0, (-5.69295527), (-5.69295527)}, doubleArray0, 0.01);
      
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-46.071207142), 4);
      assertEquals((-1), int0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-5.69295527), (-719.03), (-5.69295527), (-5.69295527), (-5.69295527), 0.0, (-5.69295527), (-5.69295527)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'R', 0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 2634.133691);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0)}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      longArray0[1] = 104L;
      longArray0[2] = (long) (-1);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {(-1L), 104L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), 104L, (-1L)}, longArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1L);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1655.0F);
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '`';
      intArray0[1] = (int) '`';
      intArray0[2] = (int) '`';
      intArray0[3] = (-1530);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)4;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-30), (byte) (-38), (byte)45, (byte)7, (byte)4}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-30), (byte) (-38), (byte)45, (byte)7, (byte)4}, byteArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Integer integer0 = new Integer(3139);
      assertNotNull(integer0);
      assertEquals(3139, (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(integer0, object0);
      assertFalse(boolean0);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray2);
      assertSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertEquals(5, byteArray2.length);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-30), (byte) (-38), (byte)45, (byte)7, (byte)4}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-30), (byte) (-38), (byte)45, (byte)7, (byte)4}, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '\'');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)882;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short)882}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)882}, shortArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)882;
      doubleArray0[1] = (double) (short)882;
      doubleArray0[2] = (double) (short)882;
      doubleArray0[3] = (double) (short)882;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.0, 2207.07);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {882.0, 882.0, 882.0, 882.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 's';
      Double double0 = new Double(1.5);
      assertNotNull(double0);
      assertEquals(1.5, (double)double0, 0.01);
      
      Double double1 = new Double(263.28502487891);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(263.28502487891, (double)double1, 0.01);
      
      Double double2 = new Double(1060.036297781914);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(1060.036297781914, (double)double2, 0.01);
      
      Double double3 = new Double(263.28502487891);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(263.28502487891, (double)double3, 0.01);
      
      Double double4 = new Double((-1.0));
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      assertEquals((-1.0), (double)double4, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, ']', (int) (short)882);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (short)882;
      longArray0[4] = (long) ']';
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), 882L, 93L}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), 882L, 93L}, longArray1);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray1, longArray0);
      assertTrue(boolean0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), 882L, 93L}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), 882L, 93L}, longArray1);
      
      int int1 = ArrayUtils.indexOf(charArray0, 'A', (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)2);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, (int) (byte)2, 1365);
      assertNotNull(byteArray2);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertNotNull(object4);
      
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object4));
      assertNotNull(object5);
      
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object1));
      assertNotNull(object6);
      
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object1));
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object6));
      assertFalse(object7.equals((Object)object5));
      assertFalse(object7.equals((Object)object0));
      assertNotNull(object7);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)3528);
      assertNull(shortArray0);
      
      Object object8 = new Object();
      assertFalse(object8.equals((Object)object1));
      assertFalse(object8.equals((Object)object6));
      assertFalse(object8.equals((Object)object4));
      assertFalse(object8.equals((Object)object2));
      assertFalse(object8.equals((Object)object3));
      assertFalse(object8.equals((Object)object5));
      assertFalse(object8.equals((Object)object0));
      assertFalse(object8.equals((Object)object7));
      assertNotNull(object8);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '=';
      charArray0[2] = ';';
      charArray0[3] = '`';
      char[] charArray1 = ArrayUtils.add(charArray0, '=');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertArrayEquals(new char[] {'=', '\u0000', ';', '`'}, charArray0);
      assertArrayEquals(new char[] {'=', '\u0000', ';', '`', '='}, charArray1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean("]o6;/Xo");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = Boolean.getBoolean("]o6;/Xo");
      assertFalse(boolean1);
      
      int int0 = Boolean.compare(false, false);
      assertEquals(0, int0);
      
      boolean boolean2 = Boolean.getBoolean((String) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = Boolean.logicalOr(true, false);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertTrue(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean3));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertTrue(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean3));
      assertNotNull(booleanArray2);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-112));
      assertNull(byteArray0);
      
      Character character0 = new Character(';');
      assertNotNull(character0);
      assertEquals(';', (char)character0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)578;
      shortArray0[2] = (short)578;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte) (-121);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)57, (byte) (-1), (byte) (-121), (byte)8, (byte) (-23), (byte) (-121)}, byteArray0);
      
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (byte)8;
      objectArray0[2] = (Object) (byte) (-121);
      objectArray0[3] = (Object) (short)578;
      objectArray0[4] = (Object) (byte)65;
      objectArray0[5] = (Object) (byte)8;
      objectArray0[7] = (Object) (short)578;
      objectArray0[8] = (Object) (byte) (-1);
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(18, objectArray1.length);
      assertEquals(9, objectArray0.length);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      String[] stringArray0 = ArrayUtils.clone((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(2, int0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.0;
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((float[]) null);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 2;
      longArray0[6] = (long) 2;
      longArray0[7] = (-1L);
      longArray0[8] = 2262L;
      int int1 = ArrayUtils.lastIndexOf(longArray0, 2L, 2);
      assertTrue(int1 == int0);
      assertEquals(2, int1);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {2L, 2L, 2L, 2L, 2L, 2L, 2L, (-1L), 2262L}, longArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-1L);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Integer integer0 = new Integer(2);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      int int2 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer0, 2);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 75;
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {75}, intArray0);
      assertArrayEquals(new int[] {75}, intArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 75;
      objectArray0[1] = (Object) 75;
      objectArray0[2] = (Object) 75;
      objectArray0[3] = (Object) 75;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(4, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object1);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean0);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      
      Object[] objectArray0 = new Object[0];
      Integer integer0 = new Integer((-1885));
      assertNotNull(integer0);
      assertEquals((-1885), (int)integer0);
      
      Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, (Object) integer0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      
      Object[] objectArray2 = new Object[4];
      assertFalse(objectArray2.equals((Object)objectArray1));
      assertFalse(objectArray2.equals((Object)objectArray0));
      
      objectArray2[0] = object1;
      objectArray2[1] = object1;
      objectArray2[2] = (Object) integer0;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray2[3] = object2;
      int int0 = ArrayUtils.indexOf(objectArray2, object1, (-1885));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)object2));
      assertFalse(objectArray2.equals((Object)objectArray1));
      assertFalse(objectArray2.equals((Object)objectArray0));
      assertEquals(0, int0);
      assertNotSame(object1, object0);
      assertNotSame(object1, object2);
      assertNotSame(objectArray2, objectArray1);
      assertNotSame(objectArray2, objectArray0);
      assertEquals(4, objectArray2.length);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)116);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(1, charArray1.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'%'}, charArray1);
      assertArrayEquals(new char[] {'%'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)882;
      doubleArray0[1] = (double) (short)882;
      doubleArray0[2] = (double) (short)882;
      doubleArray0[3] = (double) (short)882;
      doubleArray0[4] = (double) (short)882;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {882.0, 882.0, 882.0, 882.0, 882.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.add((String[]) null, "SolarE8i");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 1775);
      assertEquals((-1), int0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, false, false, false}, booleanArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) (-1);
      integerArray0[2] = (Integer) (-1);
      integerArray0[3] = (Integer) (-1);
      Integer[] integerArray1 = new Integer[7];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = (Integer) (-1);
      integerArray1[1] = (Integer) (-1);
      integerArray1[2] = (Integer) (-1);
      integerArray1[3] = (Integer) (-1);
      integerArray1[4] = (Integer) (-1);
      integerArray1[5] = (Integer) (-1);
      integerArray1[6] = (Integer) (-1);
      Integer[] integerArray2 = ArrayUtils.addAll(integerArray0, integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertEquals(7, integerArray1.length);
      assertEquals(11, integerArray2.length);
      assertEquals(4, integerArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)14;
      shortArray0[2] = (short)2301;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)2301, 0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)14, (short)2301}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-1));
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte)57;
      shortArray0[2] = (short) (byte)57;
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short)36;
      shortArray0[5] = (short) (byte) (-1);
      shortArray0[6] = (short)36;
      shortArray0[7] = (short) (byte)57;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)36);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short)57, (short)57, (short) (-1), (short)36, (short) (-1), (short)36, (short)57}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)57, (short)57, (short) (-1), (short) (-1), (short)36, (short)57}, shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short) (-1), Integer.MAX_VALUE);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, int0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short)57, (short)57, (short) (-1), (short)36, (short) (-1), (short)36, (short)57}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)57, (short)57, (short) (-1), (short) (-1), (short)36, (short)57}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1829L);
      longArray0[1] = (-1829L);
      longArray0[2] = 742L;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1829L);
      doubleArray0[1] = (double) (-1829L);
      doubleArray0[3] = (double) (-1829L);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1829.0));
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1829.0), (-1829.0), 0.0, (-1829.0)}, doubleArray0, 0.01);
      
      Byte byte0 = new Byte((byte)92);
      assertNotNull(byte0);
      assertEquals((byte)92, (byte)byte0);
      
      Byte byte1 = new Byte((byte)87);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)87, (byte)byte1);
      
      Byte byte2 = new Byte((byte)92);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)92, (byte)byte2);
      
      Byte byte3 = new Byte((byte)89);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte)89, (byte)byte3);
      
      Integer integer0 = new Integer((byte)92);
      assertNotNull(integer0);
      assertEquals(92, (int)integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('5');
      assertNotNull(character0);
      assertEquals('5', (char)character0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      charArray0[4] = '5';
      charArray0[5] = '5';
      charArray0[6] = '5';
      charArray0[7] = '5';
      // Undeclared exception!
      try { 
        Character.toChars(10, charArray0, 2534);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2534
         //
         verifyException("java.lang.Character", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 0.0}, doubleArray1, 0.01);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte)57);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)57}, byteArray0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(4, objectArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte)4}, byteArray0);
      
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(8, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 3;
      intArray0[1] = 100;
      intArray0[2] = 3938;
      intArray0[3] = 2070;
      intArray0[4] = 2;
      intArray0[5] = 233;
      intArray0[6] = (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-3544), 233);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {3, 100, 3938, 2070, 2, 233, (-1)}, intArray0);
      assertArrayEquals(new int[] {3, 100, 3938, 2070, 2, 233, (-1)}, intArray1);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-3544);
      floatArray0[1] = (-2412.7F);
      floatArray0[2] = (float) (-1);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 9, 764);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {(-3544.0F), (-2412.7F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Byte[] byteArray0 = new Byte[10];
      long[] longArray0 = new long[6];
      longArray0[0] = 1143L;
      longArray0[1] = 645L;
      longArray0[2] = 50L;
      longArray0[3] = 1079L;
      longArray0[5] = (-2716L);
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertFalse(boolean0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {1143L, 645L, 50L, 1079L, 0L, (-2716L)}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(", Length: 0", "}<}");
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Object, String>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Object, String>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 2);
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(abstractMap_SimpleImmutableEntryArray0, (int) 87, abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 87, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[1] = 'c';
      Double double0 = new Double((-63.2741201));
      assertNotNull(double0);
      assertEquals((-63.2741201), (double)double0, 0.01);
      
      Double double1 = new Double((-5217.813839));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-5217.813839), (double)double1, 0.01);
      
      Double double2 = new Double(442.3);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(442.3, (double)double2, 0.01);
      
      Double[] doubleArray0 = new Double[6];
      doubleArray0[0] = double1;
      doubleArray0[1] = double2;
      doubleArray0[2] = double2;
      doubleArray0[3] = double1;
      doubleArray0[4] = double1;
      doubleArray0[5] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-5217.813839), 442.3, 442.3, (-5217.813839), (-5217.813839), 442.3}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 512, 1547);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      
      int[] intArray0 = new int[8];
      intArray0[1] = 178;
      intArray0[1] = 178;
      intArray0[2] = 178;
      intArray0[3] = 0;
      intArray0[4] = 178;
      intArray0[5] = 178;
      intArray0[6] = (-23);
      intArray0[7] = 178;
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 178, 178, 0, 178, 178, (-23), 178}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType("", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Boolean boolean0 = new Boolean("]o6;/Xo");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-82));
      assertNull(byteArray0);
      
      Character character0 = new Character('(');
      assertNotNull(character0);
      assertEquals('(', (char)character0);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[1] = (int) '(';
      intArray0[3] = 0;
      intArray0[4] = (int) '(';
      intArray0[7] = 1158;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {0, 40, 0, 0, 40, 0, 0, 1158}, intArray0);
      assertArrayEquals(new int[] {0, 40, 0, 0, 40, 0, 0, 1158}, intArray1);
      
      ArrayUtils.reverse((Object[]) null);
      String[] stringArray0 = new String[9];
      stringArray0[1] = "]o6;/Xo";
      stringArray0[2] = "]o6;/Xo";
      stringArray0[3] = "]o6;/Xo";
      stringArray0[4] = "java.lang.String";
      stringArray0[5] = "]o6;/Xo";
      stringArray0[6] = "2? 1hHK) mD";
      stringArray0[7] = "]o6;/Xo";
      stringArray0[8] = "]o6;/Xo";
      // Undeclared exception!
      try { 
        ArrayUtils.add(stringArray0, 25, "]o6;/Xo");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 25, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) booleanArray1, object0);
      assertFalse(boolean0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Character character0 = Character.valueOf('x');
      assertNotNull(character0);
      assertEquals('x', (char)character0);
      
      Character character1 = new Character('k');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('k', (char)character1);
      
      Character character2 = Character.valueOf('Z');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('Z', (char)character2);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'k');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 69L);
      assertNull(longArray0);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray1);
      
      Long[] longArray2 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[2];
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[0] = object1;
      objectArray0[1] = object0;
      Object[] objectArray1 = ArrayUtils.subarray(objectArray0, 1, 88);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(1, objectArray1.length);
      
      float[] floatArray0 = null;
      boolean boolean1 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(1);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(263.28502487891);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(263.28502487891, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-1413.0886093));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals((-1413.0886093), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1225.354);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(1225.354, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '1.0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 's';
      charArray0[1] = 'X';
      charArray0[2] = '`';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'s', 'X', '`'}, charArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'X';
      doubleArray0[1] = (double) 's';
      doubleArray0[2] = (double) '`';
      doubleArray0[3] = (double) '`';
      doubleArray0[4] = (double) '`';
      doubleArray0[5] = (double) '`';
      doubleArray0[6] = (double) 'X';
      doubleArray0[7] = (double) 'X';
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 10, (-1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {88.0, 115.0, 96.0, 96.0, 96.0, 96.0, 88.0, 88.0}, doubleArray0, 0.01);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1), 10);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'s', 'X', '`'}, charArray0);
      assertArrayEquals(new char[] {'s', 'X', '`'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) Integer.MAX_VALUE);
      assertNull(longArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1164);
      Long long0 = Long.valueOf((-5108L));
      assertNotNull(long0);
      assertEquals((-5108L), (long)long0);
      
      Long long1 = new Long((short) (-1164));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1164L), (long)long1);
      
      Long[] longArray1 = new Long[0];
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      
      Long[] longArray3 = ArrayUtils.nullToEmpty(longArray1);
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertNotNull(longArray3);
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray1, longArray2);
      assertSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray3.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short) (-1164);
      floatArray0[1] = (float) (short) (-1164);
      floatArray0[2] = (float) (short) (-1164);
      floatArray0[3] = (float) (short) (-1164);
      floatArray0[4] = (float) Integer.MAX_VALUE;
      floatArray0[5] = (float) Integer.MAX_VALUE;
      floatArray0[6] = (float) (short) (-1164);
      floatArray0[7] = (float) Integer.MAX_VALUE;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-1164.0F), (-1164.0F), (-1164.0F), (-1164.0F), 2.14748365E9F, 2.14748365E9F, (-1164.0F), 2.14748365E9F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1164.0F), (-1164.0F), (-1164.0F), (-1164.0F), 2.14748365E9F, 2.14748365E9F, (-1164.0F), 2.14748365E9F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (-950);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, (-950), 0}, intArray0);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (-950), 8);
      assertNull(charArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-5387);
      shortArray0[1] = (short) (-5387);
      shortArray0[2] = (short)3;
      shortArray0[3] = (short) (-5387);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-5387), (short) (-5387), (short)3, (short) (-5387)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-5387), (short) (-5387), (short)3, (short) (-5387), (short) (-5387), (short) (-5387), (short)3, (short) (-5387)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean("]o6;/Xo");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = Boolean.getBoolean("]o6;/Xo");
      assertFalse(boolean1);
      
      int int0 = Boolean.compare(false, false);
      assertEquals(0, int0);
      
      boolean boolean2 = Boolean.getBoolean((String) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = Boolean.getBoolean("java.class.version");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      int int1 = Boolean.compare(true, true);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean4 = Boolean.logicalAnd(true, true);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      
      boolean boolean5 = Boolean.getBoolean("java.lang.Object");
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5);
      
      boolean boolean6 = Boolean.logicalOr(false, true);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertNotNull(booleanArray2);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      
      boolean boolean7 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertFalse(boolean7 == boolean5);
      assertFalse(boolean7 == boolean1);
      assertTrue(boolean7 == boolean6);
      assertFalse(boolean7 == boolean2);
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7 == boolean3);
      assertTrue(boolean7);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains((int[]) null, 100);
      assertFalse(boolean0);
      
      Character[] characterArray0 = new Character[5];
      Character character0 = Character.valueOf('f');
      assertNotNull(character0);
      assertEquals('f', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('f');
      assertNotNull(character1);
      assertEquals('f', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('Z');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('Z', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('K');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      assertEquals('K', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('B');
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertNotNull(character4);
      assertEquals('B', (char)character4);
      
      characterArray0[4] = character4;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '{');
      assertNotNull(charArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'f', 'f', 'Z', 'K', 'B'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Byte byte0 = new Byte((byte)87);
      assertNotNull(byte0);
      assertEquals((byte)87, (byte)byte0);
      
      Byte[] byteArray0 = new Byte[19];
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)16);
      assertNotNull(byteArray1);
      assertEquals(19, byteArray0.length);
      assertEquals(19, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, (-869), (int) (byte)16);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(19, byteArray0.length);
      assertEquals(19, byteArray1.length);
      assertEquals(16, byteArray2.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(10, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-540L);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (-540L);
      Object[] objectArray1 = ArrayUtils.subarray(objectArray0, 1, 1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(0, objectArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[6] = 0.0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      Integer integer0 = new Integer((-1242));
      assertNotNull(integer0);
      assertEquals((-1242), (int)integer0);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-1242);
      floatArray1[1] = (float) (-1242);
      floatArray1[2] = (-477.0F);
      floatArray1[3] = (float) 969;
      floatArray1[4] = (float) (-1242);
      floatArray1[6] = (float) (-540L);
      floatArray1[7] = (float) (-1242);
      boolean boolean2 = ArrayUtils.isEmpty(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {(-1242.0F), (-1242.0F), (-477.0F), 969.0F, (-1242.0F), 0.0F, (-540.0F), (-1242.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object1;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals((-1), int0);
      assertEquals(1, objectArray0.length);
      
      int int1 = ArrayUtils.indexOf((double[]) null, (double) (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayUtils.reverse((double[]) null);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) 0);
      assertNull(longArray0);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)127, (int) (byte)127);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ArrayUtils.reverse((int[]) null);
      long[] longArray0 = new long[4];
      longArray0[0] = (-2266L);
      longArray0[1] = (-2526L);
      longArray0[2] = 1L;
      longArray0[3] = 2952L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {(-2266L), (-2526L), 1L, 2952L}, longArray0);
      assertArrayEquals(new long[] {(-2266L), (-2526L), 1L, 2952L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, object0, 1468);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false}, booleanArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer((-197));
      assertNotNull(integer0);
      assertEquals((-197), (int)integer0);
      
      Integer integer1 = new Integer((-197));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-197), (int)integer1);
      
      int int0 = Integer.compare((-197), (-197));
      assertEquals(0, int0);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-1);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-44), (byte)10, (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1571);
      intArray0[1] = 2;
      intArray0[2] = (-4197);
      intArray0[3] = 1281;
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1571), 2, (-4197), 1281}, intArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      short[] shortArray0 = new short[3];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) (-81));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-5.69295527);
      doubleArray0[2] = (-5.69295527);
      doubleArray0[3] = (-5.69295527);
      doubleArray0[4] = (-5.69295527);
      doubleArray0[6] = (-5.69295527);
      doubleArray0[7] = (-5.69295527);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-5.69295527), 0.0, (-5.69295527), (-5.69295527), (-5.69295527), 0.0, (-5.69295527), (-5.69295527), 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-112));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      
      Character character0 = new Character(';');
      assertNotNull(character0);
      assertEquals(';', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 91.09F;
      Character character0 = new Character('E');
      assertNotNull(character0);
      assertEquals('E', (char)character0);
      
      boolean boolean0 = Character.isAlphabetic(645);
      assertTrue(boolean0);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'B');
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'E'}, charArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) character0, (-2009));
      assertEquals((-1), int0);
      assertEquals(1, characterArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 645;
      longArray0[1] = (long) (-2009);
      longArray0[2] = (long) 'B';
      longArray0[3] = (long) 'E';
      longArray0[4] = (long) 645;
      longArray0[5] = (long) 'E';
      int int1 = ArrayUtils.lastIndexOf(longArray0, 645L);
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {645L, (-2009L), 66L, 69L, 645L, 69L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Character character0 = Character.valueOf('C');
      assertNotNull(character0);
      assertEquals('C', (char)character0);
      
      Character character1 = new Character('E');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('E', (char)character1);
      
      Character character2 = new Character('z');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('z', (char)character2);
      
      char char0 = Character.highSurrogate(2864);
      assertEquals('\uD7C2', char0);
      
      char char1 = Character.highSurrogate(1098);
      assertFalse(char1 == char0);
      assertEquals('\uD7C1', char1);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      char char2 = Character.lowSurrogate((short)478);
      assertFalse(char2 == char0);
      assertFalse(char2 == char1);
      assertEquals('\uDDDE', char2);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)478;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)287;
      shortArray0[3] = (short)478;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)478, (short)0, (short)287, (short)478}, shortArray0);
      assertArrayEquals(new short[] {(short)478, (short)287, (short)478}, shortArray1);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) characterArray0);
      assertNotNull(objectArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      short[] shortArray0 = new short[3];
      Short[] shortArray1 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) shortArray1, (-2936), object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2936, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Byte[] byteArray0 = new Byte[17];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1268.07150589);
      doubleArray0[1] = 78.4680589863504;
      doubleArray0[2] = (-1626.5515924);
      doubleArray0[3] = 3055.97935379;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1268.07150589), 78.4680589863504, (-1626.5515924), 3055.97935379}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-1626.5515924), 1.5);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1268.07150589), 78.4680589863504, (-1626.5515924), 3055.97935379}, doubleArray0, 0.01);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) byteArray0, (Object[]) byteArray0);
      assertNotNull(objectArray0);
      assertNotSame(byteArray0, objectArray0);
      assertEquals(17, byteArray0.length);
      assertEquals(34, objectArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'y';
      longArray0[1] = (long) 'O';
      longArray0[2] = (long) 'O';
      boolean boolean2 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {121L, 79L, 79L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1);
      ArrayUtils.reverse(shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)0, (short) (-1), (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[7];
      ArrayUtils.reverse(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)0, (short) (-1), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-1), (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 263.28502487891);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 263.28502487891}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 263.28502487891}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 263.28502487891}, doubleArray2, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 2488.0F;
      floatArray0[2] = (-1169.9498F);
      floatArray0[3] = (-1169.9498F);
      floatArray0[4] = 3136.032F;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)882;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short)882}, shortArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)882;
      floatArray0[1] = (float) (short)882;
      floatArray0[2] = (float) (short) (-1);
      floatArray0[3] = (float) (short) (-1);
      floatArray0[4] = (float) (short)882;
      floatArray0[5] = (float) (short) (-1);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1136.8939F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {882.0F, 882.0F, (-1.0F), (-1.0F), 882.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {882.0F, 882.0F, (-1.0F), (-1.0F), 882.0F, (-1.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long[] longArray0 = new long[0];
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 263.28502487891);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 263.28502487891}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 263.28502487891}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 263.28502487891}, doubleArray2, 0.01);
      
      float[] floatArray0 = new float[11];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 2488.0F;
      floatArray0[2] = (-1169.9498F);
      floatArray0[3] = (-1169.9498F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 2488.0F;
      floatArray0[6] = (-4246.4F);
      floatArray0[7] = 3136.032F;
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, object0);
      assertFalse(boolean0);
      
      Long long0 = Long.getLong("", 191L);
      assertNotNull(long0);
      assertEquals(191L, (long)long0);
      
      Long long1 = new Long(191L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(191L, (long)long1);
      
      Long long2 = new Long(172L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(172L, (long)long2);
      
      Long long3 = Long.valueOf(97L);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals(97L, (long)long3);
      
      Long[] longArray0 = new Long[3];
      longArray0[0] = long3;
      longArray0[1] = long3;
      Long long4 = new Long(1L);
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertNotNull(long4);
      assertEquals(1L, (long)long4);
      
      longArray0[2] = long4;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      ArrayUtils.reverse(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\u0000', 0);
      assertEquals(0, int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertSame(longArray0, longArray1);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = 'V';
      charArray0[0] = 'V';
      int int0 = ArrayUtils.indexOf(charArray0, 'V');
      assertEquals(0, int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'V'}, charArray0);
      
      Character[] characterArray0 = new Character[7];
      Character character0 = new Character('&');
      assertFalse(character0.equals((Object)char0));
      assertNotNull(character0);
      assertEquals('&', (char)character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = (Character) 'V';
      characterArray0[2] = (Character) 'V';
      characterArray0[3] = (Character) 'V';
      characterArray0[4] = (Character) 'V';
      characterArray0[5] = (Character) 'V';
      Character character1 = new Character('T');
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertNotNull(character1);
      assertEquals('T', (char)character1);
      
      characterArray0[6] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(7, characterArray0.length);
      assertEquals(7, characterArray1.length);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) char0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      Character character0 = Character.valueOf('^');
      assertNotNull(character0);
      assertEquals('^', (char)character0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)882;
      shortArray0[2] = (short)882;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)882, (short)0, (short)882}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertFalse(boolean0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)882, (short)0, (short)882}, shortArray0);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((-1885.0));
      assertNotNull(float0);
      assertEquals((-1885.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = Boolean.compare(true, false);
      assertEquals(1, int0);
      
      boolean boolean0 = Boolean.logicalAnd(true, true);
      assertTrue(boolean0);
      
      boolean boolean1 = Boolean.getBoolean((String) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = Boolean.logicalOr(true, true);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertNotNull(booleanArray2);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-32));
      assertNull(byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) (byte) (-112);
      doubleArray0[5] = 322.0;
      doubleArray0[6] = (-1606.775667569859);
      double[] doubleArray1 = ArrayUtils.addAll((double[]) null, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, (-1.0), 1.0, 1.0, (-112.0), 322.0, (-1606.775667569859)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, (-1.0), 1.0, 1.0, (-112.0), 322.0, (-1606.775667569859)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 0.0}, doubleArray1, 0.01);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 0.0}, doubleArray1, 0.01);
      
      boolean[] booleanArray2 = new boolean[2];
      booleanArray2[0] = false;
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) booleanArray1, (Object[]) booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(objectArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, objectArray0);
      assertNotSame(booleanArray1, objectArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(boolean0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 's';
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 's';
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      
      Character character0 = new Character('s');
      assertNotNull(character0);
      assertEquals('s', (char)character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll((byte[]) null, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(longArray1);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      Double double0 = new Double((-1));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 0L);
      assertNull(longArray0);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2868.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-4304.577F);
      floatArray0[3] = (-1.0F);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {2868.0F, 1.0F, (-4304.577F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2868.0F, 1.0F, (-4304.577F), (-1.0F), 2868.0F, 1.0F, (-4304.577F), (-1.0F)}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 979;
      intArray0[1] = (-1523);
      intArray0[2] = (-2706);
      intArray0[3] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 4023, (-2706));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {979, (-1523), (-2706), 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 1);
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 36.0);
      assertEquals((-1), int0);
      
      comparableArray0[0] = (Comparable<Integer>) (-1);
      Comparable<Integer>[] comparableArray1 = ArrayUtils.addAll(comparableArray0, comparableArray0);
      assertFalse(comparableArray1.equals((Object)comparableArray0));
      assertNotNull(comparableArray1);
      assertNotSame(comparableArray0, comparableArray1);
      assertNotSame(comparableArray1, comparableArray0);
      assertEquals(1, comparableArray0.length);
      assertEquals(2, comparableArray1.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Byte[] byteArray0 = new Byte[8];
      Object[] objectArray0 = new Object[1];
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 1);
      Integer integer0 = new Integer(29);
      assertNotNull(integer0);
      assertEquals(29, (int)integer0);
      
      int int0 = Integer.max(1, 6);
      assertEquals(6, int0);
      
      int int1 = ArrayUtils.indexOf((Object[]) comparableArray0, (Object) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, comparableArray0.length);
      
      comparableArray0[0] = (Comparable<Integer>) (-1);
      Comparable<Integer>[] comparableArray1 = ArrayUtils.addAll(comparableArray0, comparableArray0);
      assertFalse(comparableArray1.equals((Object)comparableArray0));
      assertNotNull(comparableArray1);
      assertNotSame(comparableArray0, comparableArray1);
      assertNotSame(comparableArray1, comparableArray0);
      assertEquals(1, comparableArray0.length);
      assertEquals(2, comparableArray1.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object1;
      objectArray0[1] = object1;
      objectArray0[2] = object1;
      objectArray0[3] = object1;
      objectArray0[4] = object1;
      objectArray0[5] = object1;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object1);
      assertFalse(object1.equals((Object)object0));
      assertEquals(5, int0);
      assertNotSame(object1, object0);
      assertEquals(6, objectArray0.length);
      
      int int1 = ArrayUtils.indexOf((double[]) null, (-719.03));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = null;
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      int int2 = (-2066);
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, (-2066), (byte)87);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2066, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(2, int0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      int int1 = ArrayUtils.indexOf(doubleArray1, 1.0, (-1.0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 2.0, 2.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 2;
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      char[] charArray0 = new char[7];
      charArray0[1] = 't';
      charArray0[2] = 'k';
      charArray0[3] = '1';
      charArray0[4] = 'O';
      charArray0[5] = 'A';
      charArray0[6] = '\"';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', 't', 'k', '1', 'O', 'A', '\"'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.remove(charArray0, 0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) null, (-14), (-14));
      assertNull(objectArray0);
      
      Short short0 = new Short((short)2491);
      assertNotNull(short0);
      assertEquals((short)2491, (short)short0);
      
      Short short1 = new Short((short) (-1));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-1), (short)short1);
      
      Short short2 = new Short((short) (-1));
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short) (-1), (short)short2);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Short short3 = new Short((short)971);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      assertEquals((short)971, (short)short3);
      
      Character character0 = Character.valueOf('G');
      assertNotNull(character0);
      assertEquals('G', (char)character0);
      
      Long long0 = Long.valueOf(37L);
      assertNotNull(long0);
      assertEquals(37L, (long)long0);
      
      Long long1 = new Long((-282L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-282L), (long)long1);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 't';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'t'}, charArray0);
      assertArrayEquals(new char[] {'t', 't'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[6];
      boolean boolean0 = true;
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf("");
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      boolean boolean4 = Boolean.logicalOr(false, boolean0);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      
      booleanArray0[2] = boolean3;
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray0[3] = boolean5;
      Boolean boolean6 = new Boolean("");
      assertFalse(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean0));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      boolean boolean7 = Boolean.getBoolean((String) null);
      assertFalse(boolean7 == boolean0);
      assertFalse(boolean7 == boolean4);
      assertFalse(boolean7);
      
      booleanArray0[4] = boolean6;
      Boolean boolean8 = new Boolean("");
      assertTrue(boolean8.equals((Object)boolean6));
      assertTrue(boolean8.equals((Object)boolean5));
      assertFalse(boolean8.equals((Object)boolean4));
      assertFalse(boolean8.equals((Object)boolean0));
      assertFalse(boolean8.equals((Object)boolean1));
      assertTrue(boolean8.equals((Object)boolean7));
      assertFalse(boolean8.equals((Object)boolean2));
      assertTrue(boolean8.equals((Object)boolean3));
      assertNotNull(boolean8);
      assertFalse(boolean8);
      
      booleanArray0[5] = boolean8;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false}, booleanArray1));
      
      double[] doubleArray0 = new double[4];
      int[] intArray0 = new int[4];
      intArray0[0] = 39;
      intArray0[1] = 39;
      intArray0[2] = 2;
      intArray0[3] = 2;
      boolean boolean9 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean9 == boolean4);
      assertFalse(boolean9 == boolean0);
      assertTrue(boolean9 == boolean7);
      assertFalse(boolean9);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {39, 39, 2, 2}, intArray0);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 2, (-2333));
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)98;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-61));
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-19), (byte)0, (byte) (-19), (byte)98}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)882;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)882, (short)0, (short)0, (short)0}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertFalse(boolean0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)882, (short)0, (short)0, (short)0}, shortArray0);
      
      byte[] byteArray0 = null;
      byte[] byteArray1 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(shortArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '882', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1179;
      intArray0[2] = 4033;
      intArray0[3] = 4;
      intArray0[4] = 2;
      intArray0[5] = 3;
      intArray0[6] = (-950);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {1179, 0, 4033, 4, 2, 3, (-950)}, intArray0);
      assertArrayEquals(new int[] {1179, 0, 4033, 4, 2, 3, (-950)}, intArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      charArray0[1] = '-';
      charArray0[2] = '0';
      charArray0[3] = 'p';
      charArray0[4] = '5';
      ArrayUtils.reverse(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'5', 'p', '0', '-', '+'}, charArray0);
      
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)5;
      Byte byte1 = new Byte((byte)5);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)5, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)5, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)126);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte)126, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)7);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      assertEquals((byte)7, (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)126);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte3));
      assertNotNull(byte5);
      assertEquals((byte)126, (byte)byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)2);
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertNotNull(byte6);
      assertEquals((byte)2, (byte)byte6);
      
      byteArray0[5] = byte6;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[1] = (-42.23716F);
      floatArray0[2] = (-1120.855F);
      floatArray0[3] = (-1120.855F);
      floatArray0[4] = (-797.13F);
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1120.855F);
      doubleArray0[1] = (double) (-797.13F);
      doubleArray0[3] = (double) (-42.23716F);
      doubleArray0[4] = (double) (-797.13F);
      ArrayUtils.reverse(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-797.1300048828125), (-42.237159729003906), 0.0, (-797.1300048828125), (-1120.85498046875)}, doubleArray0, 0.01);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short)1428);
      assertNotNull(short0);
      assertEquals((short)1428, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = Short.valueOf((short) (-361));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-361), (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-361));
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short) (-361), (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)1428);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short0));
      assertNotNull(short3);
      assertEquals((short)1428, (short)short3);
      
      Short short4 = new Short((short)1428);
      assertTrue(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertNotNull(short4);
      assertEquals((short)1428, (short)short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short) (-3211));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short4));
      assertNotNull(short5);
      assertEquals((short) (-3211), (short)short5);
      
      shortArray0[5] = short5;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)29);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)1428, (short) (-361), (short) (-361), (short)29, (short)1428, (short) (-3211)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)0;
      ArrayUtils.reverse(shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-1), (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[7];
      ArrayUtils.reverse(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-1), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-1), (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Double double1 = new Double(2634.133691);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(2634.133691, (double)double1, 0.01);
      
      Double double2 = new Double((-1.0));
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-1.0), (double)double2, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 2634.133691);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 2634.133691, 2634.133691, 2634.133691}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(2, objectArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1402.94F;
      floatArray0[1] = (-2165.1F);
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1402.94F;
      floatArray1[1] = (-2165.1F);
      floatArray1[2] = (-2165.1F);
      floatArray1[3] = (-2165.1F);
      floatArray1[4] = 1402.94F;
      floatArray1[5] = 1402.94F;
      floatArray1[6] = (-351.9054F);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {1402.94F, (-2165.1F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1402.94F, (-2165.1F), (-2165.1F), (-2165.1F), 1402.94F, 1402.94F, (-351.9054F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = Byte.toUnsignedInt((byte)36);
      assertEquals(36, int0);
      
      byte[] byteArray0 = new byte[0];
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)36, (int) (byte)120);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)36;
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)64;
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)64, (byte)1, (byte)36}, byteArray0);
      assertArrayEquals(new byte[] {(byte)64}, byteArray1);
      assertArrayEquals(new byte[] {(byte)64, (byte)1, (byte)36, (byte)64}, byteArray2);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)64;
      objectArray0[1] = (Object) (byte)64;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (byte)36;
      objectArray0[4] = (Object) (byte)64;
      objectArray0[5] = (Object) (byte)1;
      objectArray0[6] = (Object) (byte)36;
      objectArray0[7] = (Object) (byte)1;
      objectArray0[8] = (Object) (byte)36;
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(18, objectArray1.length);
      assertEquals(9, objectArray0.length);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1864;
      intArray0[2] = 1864;
      boolean boolean1 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean2 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 1549, 2860);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Byte[] byteArray0 = new Byte[12];
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      // Undeclared exception!
      try { 
        ArrayUtils.addAll((Object[]) byteArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot store java.lang.Object in an array of java.lang.Byte
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[1] = 'm';
      charArray0[2] = '&';
      charArray0[3] = '/';
      charArray0[4] = '\\';
      charArray0[5] = 'a';
      charArray0[6] = 'm';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\\', (-36));
      assertEquals((-1), int0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'U', 'm', '&', '/', '\\', 'a', 'm'}, charArray0);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Long long0 = Long.valueOf((long) (-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long long1 = new Long((-1));
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(boolean0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(5, int0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true}, booleanArray0));
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) 5, 1.0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int2 = new Integer((-1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-733);
      shortArray0[1] = (short) (-733);
      shortArray0[3] = (short) (-733);
      shortArray0[3] = (short) (-733);
      shortArray0[4] = (short) (-733);
      shortArray0[6] = (short) (-733);
      shortArray0[7] = (short) (-733);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-733), (short) (-733), (short)0, (short) (-733), (short) (-733), (short)0, (short) (-733), (short) (-733)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-733), (short) (-733), (short)0, (short) (-733), (short) (-733), (short)0, (short) (-733), (short) (-733)}, shortArray0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (short) (-733), (double) (short) (-733));
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (int) (short) (-733));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, (Object[]) null);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-1);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2634.133691);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Byte byte0 = new Byte((byte)78);
      assertNotNull(byte0);
      assertEquals((byte)78, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-1), (byte)byte1);
      
      Byte byte2 = new Byte((byte)101);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)101, (byte)byte2);
      
      Byte byte3 = new Byte((byte) (-39));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      assertEquals((byte) (-39), (byte)byte3);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'{'}, charArray0);
      
      Double[] doubleArray1 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte) (-61);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-19));
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-19), (byte) (-19), (byte) (-19), (byte)98, (byte) (-19), (byte) (-19), (byte) (-61)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray0 = new int[5];
      short[] shortArray1 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = ArrayUtils.isSameType(object0, object1);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      
      float[] floatArray0 = new float[0];
      boolean boolean2 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '0', 0);
      assertEquals(0, int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'0'}, charArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) '0';
      doubleArray0[1] = (double) '0';
      doubleArray0[2] = (double) '0';
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) '0';
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) '0';
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {48.0, 48.0, 48.0, 0.0, 48.0, 0.0, 0.0, 48.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {48.0, 48.0, 48.0, 48.0, 0.0, 0.0, 48.0}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) '0';
      floatArray0[2] = (float) '0';
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 0L;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertTrue(boolean0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 48.0F, 48.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      Character[] characterArray0 = new Character[5];
      char char0 = 'f';
      Character character0 = Character.valueOf('f');
      assertNotNull(character0);
      assertEquals('f', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('f');
      assertNotNull(character1);
      assertEquals('f', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertNotNull(character2);
      assertEquals('f', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('K');
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      assertEquals('K', (char)character3);
      
      characterArray0[3] = character3;
      characterArray0[0] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '{');
      assertNotNull(charArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'f', 'f', 'f', 'K', '{'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 1940);
      assertEquals((-1), int0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      char[] charArray1 = ArrayUtils.addAll((char[]) null, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)46;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)525;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)31;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-24);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)46, (short)0, (short)525, (short)1, (short)31, (short)0, (short) (-24)}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 0.0);
      assertNull(doubleArray0);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(16, shortArray2.length);
      assertArrayEquals(new short[] {(short)0, (short)46, (short)0, (short)525, (short)1, (short)31, (short)0, (short) (-24)}, shortArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-72);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-72));
      assertEquals(1, int0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)17, (byte) (-72)}, byteArray0);
      
      short[] shortArray3 = ArrayUtils.subarray(shortArray2, (int) (short)0, (int) (byte) (-72));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray3);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(0, shortArray3.length);
      assertEquals(8, shortArray0.length);
      assertEquals(16, shortArray2.length);
      assertArrayEquals(new short[] {}, shortArray3);
      assertArrayEquals(new short[] {(short)0, (short)46, (short)0, (short)525, (short)1, (short)31, (short)0, (short) (-24)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long[] longArray0 = new long[14];
      longArray0[0] = (-2170L);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(14, longArray0.length);
      assertEquals(14, longArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-2170L);
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-4711.96F));
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-2170.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, true, false, true}, booleanArray0));
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      String[] stringArray0 = ArrayUtils.clone((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)29;
      Byte byte0 = new Byte((byte) (-38));
      assertNotNull(byte0);
      assertEquals((byte) (-38), (byte)byte0);
      
      Byte byte1 = new Byte((byte)29);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)29, (byte)byte1);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)36;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)36}, byteArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)36;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (int) (byte)36);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 36, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)104;
      boolean boolean0 = Boolean.logicalAnd(true, true);
      assertTrue(boolean0);
      
      boolean boolean1 = Boolean.getBoolean("LINUX");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = Boolean.logicalOr(true, true);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-30));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)104, (byte) (-54), (byte)104, (byte)104, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)104, (byte) (-54), (byte)104, (byte)104, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      Character character0 = new Character('w');
      assertNotNull(character0);
      assertEquals('w', (char)character0);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertArrayEquals(new char[] {'w', 'w'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1, 0}, intArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short) (-1903), (-47));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1, 0}, intArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      long[] longArray2 = ArrayUtils.addAll(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int[] intArray0 = new int[4];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 263.28502487891;
      doubleArray0[1] = 263.28502487891;
      doubleArray0[2] = (-4233.609281737091);
      doubleArray0[3] = 263.28502487891;
      doubleArray0[0] = (-4233.609281737091);
      doubleArray0[5] = 0.0;
      Integer[] integerArray0 = new Integer[0];
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(2, int0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (double) 2;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      int int1 = ArrayUtils.indexOf(doubleArray1, 1.0, 1.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 2.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 2;
      intArray0[7] = 0;
      int int2 = ArrayUtils.lastIndexOf(intArray0, 2, 2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, int2);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {2, 2, 2, 2, 0, 0, 2, 0}, intArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-733);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-733)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)93);
      assertNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.subarray((byte[]) null, (-2177), (int) (byte)93);
      assertNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "P7n@eQ5Kk";
      stringArray0[1] = "";
      stringArray0[2] = "";
      int int0 = ArrayUtils.indexOf((Object[]) stringArray0, (Object) null, (-428));
      assertEquals((-1), int0);
      assertEquals(3, stringArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-112));
      assertNull(byteArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '%';
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {37}, intArray0);
      assertArrayEquals(new int[] {37}, intArray1);
      
      String[] stringArray1 = ArrayUtils.clone(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      String[] stringArray2 = ArrayUtils.clone((String[]) null);
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Boolean boolean0 = new Boolean("]o6;/Xo");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = Boolean.getBoolean("]o6;/Xo");
      assertFalse(boolean1);
      
      int int0 = Boolean.compare(false, false);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      
      boolean boolean2 = ArrayUtils.isEquals(boolean0, (Object) null);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      char[] charArray0 = new char[1];
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'y');
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '_';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = 'z';
      charArray0[4] = '_';
      charArray0[5] = 'J';
      charArray0[6] = '_';
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'_', 'H', 'H', 'z', '_', 'J', '_', '\u0000'}, charArray0);
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'z';
      charArray1[1] = 'H';
      charArray1[2] = 'Q';
      charArray1[3] = '.';
      charArray1[4] = '_';
      charArray1[5] = 'J';
      charArray1[6] = '_';
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 2189.4F;
      floatArray0[1] = (-1241.9066F);
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.add(stringArray0, "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      Object[] objectArray0 = ArrayUtils.add((Object[]) stringArray1, 0, (Object) "");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(objectArray0);
      assertNotSame(stringArray0, objectArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, objectArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertEquals(2, objectArray0.length);
      
      short short0 = (short)1;
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 2631, 0);
      assertNull(booleanArray0);
      
      Short[] shortArray0 = new Short[3];
      Short short1 = new Short((short)18);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)18, (short)short1);
      
      shortArray0[0] = short1;
      try { 
        Short.valueOf("<:\"", 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 0 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((-1361.631F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1361.631F), (float)float1, 0.01F);
      
      Float float2 = new Float((-3731.0F));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals((-3731.0F), (float)float2, 0.01F);
      
      Float float3 = new Float(264.28502487891);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      assertEquals(264.28503F, (float)float3, 0.01F);
      
      Float float4 = new Float(1284.5445889749121);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotNull(float4);
      assertEquals(1284.5446F, (float)float4, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1.0F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-108));
      assertEquals((-1), int0);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray2);
      assertSame(floatArray2, floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[2] = Integer.MAX_VALUE;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) Integer.MAX_VALUE;
      boolean boolean2 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {2147483647L, 2147483647L}, longArray0);
      
      boolean boolean3 = ArrayUtils.isSameLength(charArray1, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      boolean boolean4 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      
      boolean boolean5 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertTrue(boolean0);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.5;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 3.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.5, 3.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(doubleArray1, doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.5, 3.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.5, 3.0}, doubleArray2, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = '#';
      charArray0[3] = '#';
      charArray0[4] = 'e';
      charArray0[5] = '#';
      charArray0[6] = '#';
      charArray0[7] = '#';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '#');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(7, charArray1.length);
      assertArrayEquals(new char[] {'#', '#', '#', '#', 'e', '#', '#', '#'}, charArray0);
      assertArrayEquals(new char[] {'#', '#', '#', 'e', '#', '#', '#'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      char[] charArray0 = new char[1];
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertSame(longArray0, longArray1);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      booleanArray1[6] = true;
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertEquals(8, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray2));
      
      int int0 = ArrayUtils.indexOf(booleanArray2, true, (-1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(0, int0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertEquals(8, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray2));
      
      boolean[] booleanArray3 = new boolean[1];
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      booleanArray3[0] = true;
      boolean[] booleanArray4 = ArrayUtils.addAll(booleanArray0, booleanArray3);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray3));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      assertNotNull(booleanArray4);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray4);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray4);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray4, booleanArray2);
      assertNotSame(booleanArray4, booleanArray3);
      assertNotSame(booleanArray4, booleanArray1);
      assertNotSame(booleanArray4, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray3.length);
      assertEquals(2, booleanArray4.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray4));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 2189.4F;
      floatArray0[1] = (-1241.9066F);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {2189.4F, (-1241.9066F)}, floatArray0, 0.01F);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.add(stringArray0, "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      Object[] objectArray0 = ArrayUtils.add((Object[]) stringArray1, 0, (Object) "");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(objectArray0);
      assertNotSame(stringArray0, objectArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, objectArray0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertEquals(2, objectArray0.length);
      
      short[] shortArray0 = ArrayUtils.add((short[]) null, 0, (short)1);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)1}, shortArray0);
      
      String[] stringArray2 = ArrayUtils.nullToEmpty(stringArray1);
      assertFalse(stringArray0.equals((Object)objectArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)objectArray0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)objectArray0));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, objectArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, objectArray0);
      assertSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray2, objectArray0);
      assertSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertEquals(1, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Object[] objectArray0 = new Object[1];
      float[] floatArray0 = null;
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, (-2916), (byte) (-118));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2916, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)0;
      ArrayUtils.reverse(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)2, (short) (-1)}, shortArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)84, (byte)10, (byte)10}, byteArray0);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      ArrayUtils.reverse((long[]) null);
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(1.5);
      assertNotNull(double0);
      assertEquals(1.5, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (short)2);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.5}, doubleArray1, 0.01);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((-900.985493));
      assertNotNull(float0);
      assertEquals((-900.9855F), (float)float0, 0.01F);
      
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, true, false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Byte[] byteArray0 = new Byte[12];
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = Byte.toUnsignedInt((byte)36);
      assertEquals(36, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 36;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 36;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertArrayEquals(new double[] {36.0, 0.0, 36.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {36.0, 0.0, 36.0, 0.0, 0.0, 36.0, 0.0, 36.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-6));
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-6)}, byteArray0);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (byte) (-6);
      doubleArray2[1] = (double) 0.0F;
      doubleArray2[2] = 105.0;
      doubleArray2[3] = (double) 36;
      doubleArray2[4] = 1.0;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) (byte)57;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {36.0, 0.0, 36.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-6.0), 0.0, 105.0, 36.0, 1.0, 0.0, 57.0}, doubleArray2, 0.01);
      
      boolean[] booleanArray1 = new boolean[1];
      booleanArray1[0] = true;
      int int1 = ArrayUtils.lastIndexOf((byte[]) null, (byte)36, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1718L;
      longArray0[1] = (long) 36;
      ArrayUtils.reverse(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {36L, 1718L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(2, int0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (double) 2;
      doubleArray1[1] = (double) 2;
      doubleArray1[4] = 0.0;
      int int1 = ArrayUtils.indexOf(doubleArray1, 1.0, (-1.0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 2.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = 2;
      intArray0[7] = (-1);
      int int2 = ArrayUtils.lastIndexOf((int[]) null, (-1), 2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-733);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-733)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-733)}, shortArray1);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 2, 1.0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) 0);
      assertNull(longArray0);
      
      long[] longArray1 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((long[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1.0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = 4669.4F;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) (-1);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-1.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 4669.4F, (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 4669.4F, (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1222;
      shortArray0[2] = (short) (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)1222, (short) (-1)}, shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short) (-1);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, objectArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)208);
      assertNotNull(short0);
      assertEquals((short)208, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)208, (short)short1);
      assertEquals(2, shortArray0.length);
      
      shortArray0[1] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)208, (short)208}, shortArray1);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'F';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'F';
      charArray0[4] = 'o';
      charArray0[5] = 'F';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'F', 'n', 'n', 'F', 'o', 'F'}, charArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((Object[]) null, (Object[]) byteArray1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = true;
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertEquals(11, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, false}, booleanArray1));
      
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'X';
      intArray0[1] = (int) '`';
      intArray0[2] = (int) '`';
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 88;
      doubleArray0[1] = (double) 96;
      doubleArray0[2] = 1.5;
      doubleArray0[4] = 43.793053276931;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-4293.306973642), 88, (double) 88);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {88.0, 96.0, 1.5, 0.0, 43.793053276931, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int int0 = Byte.toUnsignedInt((byte)36);
      assertEquals(36, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, object0);
      assertFalse(boolean0);
      
      Long long0 = Long.getLong("", 191L);
      assertNotNull(long0);
      assertEquals(191L, (long)long0);
      
      Long long1 = new Long(376L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(376L, (long)long1);
      
      Long long2 = new Long(376L);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(376L, (long)long2);
      
      Long long3 = Long.valueOf(191L);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals(191L, (long)long3);
      
      Long long4 = new Long(36);
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertNotNull(long4);
      assertEquals(36L, (long)long4);
      
      Long[] longArray0 = new Long[7];
      Long long5 = new Long(36);
      assertTrue(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long1));
      assertNotNull(long5);
      assertEquals(36L, (long)long5);
      
      longArray0[0] = long5;
      longArray0[1] = long0;
      longArray0[2] = long4;
      longArray0[3] = long2;
      longArray0[4] = long2;
      longArray0[5] = long3;
      longArray0[6] = long3;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = ArrayUtils.add((String[]) null, "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((-3731.0F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-3731.0F), (float)float1, 0.01F);
      
      Float float2 = new Float((-1.0));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals((-1.0F), (float)float2, 0.01F);
      
      Float float3 = new Float(1.0);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      assertEquals(1.0F, (float)float3, 0.01F);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 1.0F);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-108));
      assertEquals((-1), int0);
      
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 91.09F;
      floatArray0[2] = 3520.0F;
      floatArray0[3] = 110.13703F;
      floatArray0[4] = 110.13703F;
      floatArray0[5] = 1004.75586F;
      floatArray0[7] = 2735.978F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(16, floatArray1.length);
      assertArrayEquals(new float[] {91.09F, 0.0F, 3520.0F, 110.13703F, 110.13703F, 1004.75586F, 0.0F, 2735.978F}, floatArray0, 0.01F);
      
      Boolean[] booleanArray0 = new Boolean[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) null, (-14), (-14));
      assertNull(objectArray0);
      
      boolean boolean1 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Integer integer0 = new Integer(86);
      assertNotNull(integer0);
      assertEquals(86, (int)integer0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean2 = ArrayUtils.isSameType(integer0, object1);
      assertFalse(object1.equals((Object)object0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[1] = (float) 'E';
      floatArray0[4] = 0.0F;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      float[] floatArray1 = ArrayUtils.addAll((float[]) null, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 69.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 69.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Comparable<String>[] comparableArray0 = (Comparable<String>[]) Array.newInstance(Comparable.class, 2);
      String string0 = ArrayUtils.toString((Object) "java.lang.Byte");
      assertNotNull(string0);
      assertEquals("java.lang.Byte", string0);
      
      comparableArray0[0] = (Comparable<String>) "java.lang.Byte";
      String string1 = ArrayUtils.toString((Object) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("{}", string1);
      
      comparableArray0[1] = (Comparable<String>) "{}";
      Comparable<String>[] comparableArray1 = ArrayUtils.addAll(comparableArray0, comparableArray0);
      assertFalse(comparableArray1.equals((Object)comparableArray0));
      assertNotNull(comparableArray1);
      assertNotSame(comparableArray0, comparableArray1);
      assertNotSame(comparableArray1, comparableArray0);
      assertEquals(2, comparableArray0.length);
      assertEquals(4, comparableArray1.length);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) stringArray0, (Object[]) stringArray0);
      assertTrue(boolean0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) stringArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, stringArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) stringArray0, (Object[]) stringArray0);
      assertTrue(boolean0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) stringArray0, (Object[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, stringArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-748L);
      longArray0[1] = (-748L);
      longArray0[2] = (-748L);
      longArray0[3] = 1L;
      longArray0[4] = (-997L);
      longArray0[5] = 0L;
      longArray0[6] = 1L;
      boolean boolean2 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-748L), (-748L), (-748L), 1L, (-997L), 0L, 1L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean("]o6;/Xo");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = Boolean.getBoolean("]o6;/Xo");
      assertFalse(boolean1);
      
      int int0 = Boolean.compare(false, false);
      assertEquals(0, int0);
      
      boolean boolean2 = Boolean.logicalAnd(true, true);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = Boolean.getBoolean((String) null);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = Boolean.logicalOr(true, false);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4);
      
      booleanArray0[0] = boolean0;
      Integer integer0 = new Integer((-1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer integer1 = new Integer(16);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(16, (int)integer1);
      
      Integer integer2 = new Integer(2146669014);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(2146669014, (int)integer2);
      
      Integer integer3 = new Integer(4460);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(4460, (int)integer3);
      
      Integer integer4 = new Integer(0);
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(0, (int)integer4);
      
      Integer integer5 = new Integer(0);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      
      Integer integer6 = new Integer(2801);
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      assertEquals(2801, (int)integer6);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer3;
      integerArray0[1] = integer2;
      integerArray0[2] = integer2;
      integerArray0[3] = integer2;
      Integer integer7 = new Integer((-1));
      assertFalse(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer6));
      assertNotNull(integer7);
      assertEquals((-1), (int)integer7);
      
      integerArray0[5] = integer7;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertNotNull(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      assertArrayEquals(new int[] {4460, 2146669014, 2146669014, 2146669014, 0, (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int int0 = Byte.toUnsignedInt((byte)36);
      assertEquals(36, int0);
      
      Byte byte0 = new Byte((byte)120);
      assertNotNull(byte0);
      assertEquals((byte)120, (byte)byte0);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte0;
      long long0 = Byte.toUnsignedLong((byte)36);
      assertEquals(36L, long0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)122);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)120}, byteArray1);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 263.28502487891);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 263.28502487891}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 263.28502487891}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 263.28502487891}, doubleArray2, 0.01);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Long long0 = new Long((-3375L));
      assertNotNull(long0);
      assertEquals((-3375L), (long)long0);
      
      Long long1 = new Long(1318L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1318L, (long)long1);
      
      long long2 = Long.min(1318L, (-3375L));
      assertEquals((-3375L), long2);
      
      Long[] longArray0 = new Long[8];
      longArray0[0] = long1;
      longArray0[1] = long0;
      longArray0[2] = long1;
      longArray0[3] = long1;
      longArray0[4] = long0;
      long long3 = Long.remainderUnsigned(2511L, (-418L));
      assertFalse(long3 == long2);
      assertEquals(2511L, long3);
      
      longArray0[5] = long1;
      longArray0[6] = long0;
      longArray0[7] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 118L);
      assertNotNull(longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {1318L, (-3375L), 1318L, 1318L, (-3375L), 1318L, (-3375L), (-3375L)}, longArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.remove(charArray0, 0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)1518);
      assertNotNull(short0);
      assertEquals((short)1518, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)376);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)376, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)376);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short)376, (short)short2);
      
      shortArray0[2] = short2;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      long[] longArray0 = new long[4];
      int int0 = Short.compare((short)376, (short) shortArray0[2]);
      assertEquals(0, int0);
      assertSame(shortArray0, shortArray1);
      assertEquals(3, shortArray0.length);
      
      longArray0[0] = (long) (short)shortArray0[1];
      longArray0[1] = (long) (-2963);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      int int1 = ArrayUtils.indexOf(longArray0, 0L);
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {376L, (-2963L), 0L, 0L}, longArray0);
      
      int int2 = ArrayUtils.lastIndexOf(charArray1, '=', 0);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (int) shortArray0[0], 0L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1518, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) "A=/W-0E*2f=x");
      assertNotNull(string0);
      assertEquals("A=/W-0E*2f=x", string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Y';
      charArray0[1] = '5';
      charArray0[2] = 'M';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-4511), (-4511));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'Y', '5', 'M'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'M';
      intArray0[1] = (int) '5';
      intArray0[2] = (-852);
      intArray0[3] = 2448;
      intArray0[4] = (int) 'M';
      int int0 = ArrayUtils.lastIndexOf(intArray0, 961);
      assertEquals((-1), int0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {77, 53, (-852), 2448, 77}, intArray0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) Integer.MAX_VALUE);
      assertNull(longArray0);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-1164);
      shortArray1[1] = (short) (-1164);
      shortArray1[2] = (short) (-1164);
      boolean boolean1 = ArrayUtils.isSameLength(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1164), (short) (-1164), (short) (-1164)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[1] = (-950);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertArrayEquals(new int[] {0, (-950), Integer.MAX_VALUE}, intArray0);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (-2101L));
      assertNull(longArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-2101L), 1180);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) booleanArray1, object0);
      assertFalse(boolean0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1);
      assertEquals(0, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      Character character0 = Character.valueOf('@');
      assertNotNull(character0);
      assertEquals('@', (char)character0);
      
      Character character1 = new Character('Y');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('Y', (char)character1);
      
      Character character2 = Character.valueOf('n');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('n', (char)character2);
      
      Character character3 = new Character('7');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      assertEquals('7', (char)character3);
      
      Character character4 = Character.valueOf('h');
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertNotNull(character4);
      assertEquals('h', (char)character4);
      
      Character character5 = new Character('@');
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertNotNull(character5);
      assertEquals('@', (char)character5);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1, 1}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short) (-1903), (-47));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1, 1}, intArray0);
      
      boolean boolean3 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)109, 1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7, (byte)7}, byteArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 1;
      objectArray0[1] = (Object) (byte)7;
      objectArray0[2] = (Object) 1;
      objectArray0[3] = (Object) (byte)7;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      boolean boolean4 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Byte[] byteArray0 = new Byte[14];
      int[] intArray0 = new int[1];
      intArray0[0] = 64;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 64;
      intArray1[1] = 64;
      intArray1[2] = 64;
      intArray1[3] = 64;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {64}, intArray0);
      assertArrayEquals(new int[] {64, 64, 64, 64}, intArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) byteArray0, (Object[]) byteArray0);
      assertNotNull(objectArray0);
      assertNotSame(byteArray0, objectArray0);
      assertEquals(14, byteArray0.length);
      assertEquals(28, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-525);
      shortArray0[1] = (short)345;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-525), (short)345}, shortArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((int[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte) (-33);
      Byte byte1 = new Byte((byte) (-33));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-33), (byte)byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-117);
      Byte byte3 = new Byte((byte) (-117));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte) (-117), (byte)byte3);
      
      long long0 = Byte.toUnsignedLong((byte)118);
      assertEquals(118L, long0);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte)2);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      assertEquals((byte)2, (byte)byte4);
      
      long long1 = Byte.toUnsignedLong(byte2);
      assertFalse(byte2 == byte0);
      assertFalse(long1 == long0);
      assertEquals(139L, long1);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte0);
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte0 == byte2);
      assertNotNull(byte5);
      assertEquals((byte) (-33), (byte)byte5);
      
      byteArray0[3] = byte5;
      // Undeclared exception!
      try { 
        Byte.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 0L;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertTrue(boolean0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        ArrayUtils.add((short[]) null, 2, (short) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      int[] intArray0 = new int[4];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 263.28502487891;
      doubleArray0[2] = (-4233.609281737091);
      doubleArray0[3] = 263.28502487891;
      doubleArray0[0] = (-4233.609281737091);
      doubleArray0[5] = 263.28502487891;
      doubleArray0[6] = (-4233.609281737091);
      ArrayUtils.reverse(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-4233.609281737091), 263.28502487891, 0.0, 263.28502487891, (-4233.609281737091), 263.28502487891, (-4233.609281737091)}, doubleArray0, 0.01);
      
      ArrayUtils.reverse((short[]) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.lang3.builder.ToStringStyle";
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '`';
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) '`';
      floatArray0[3] = (-1.0F);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2351.0834, 10, (double) (-1.0F));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 's';
      Double double0 = new Double(279.2102293070358);
      assertNotNull(double0);
      assertEquals(279.2102293070358, (double)double0, 0.01);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)3741;
      shortArray0[2] = (short)48;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1902, (int) (short)1902);
      assertEquals((-1), int0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)3741, (short)0, (short)48}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) Integer.MAX_VALUE);
      assertNull(longArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1164);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1164)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1164)}, shortArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty(shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1164)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1164)}, shortArray1);
      
      boolean boolean3 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) null, (-14), (-14));
      assertNull(objectArray0);
      
      Short short0 = new Short((short)971);
      assertNotNull(short0);
      assertEquals((short)971, (short)short0);
      
      Short short1 = new Short((short) (-13));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-13), (short)short1);
      
      Short short2 = new Short((short)812);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short)812, (short)short2);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Short short3 = new Short((short) (-13));
      assertFalse(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      assertEquals((short) (-13), (short)short3);
      
      Character character0 = Character.valueOf('d');
      assertNotNull(character0);
      assertEquals('d', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '3');
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Character character0 = Character.valueOf('@');
      assertNotNull(character0);
      assertEquals('@', (char)character0);
      
      Character character1 = new Character('n');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('n', (char)character1);
      
      Character character2 = Character.valueOf('$');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('$', (char)character2);
      
      Character character3 = new Character('n');
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('n', (char)character3);
      
      Character character4 = Character.valueOf('7');
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertNotNull(character4);
      assertEquals('7', (char)character4);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_FLOAT_ARRAY, 3732.8076F);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 1557.065109146;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 1557.065109146}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1557.065109146, 0.0, 1557.065109146}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)46;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-774);
      shortArray0[3] = (short) (-1216);
      shortArray0[4] = (short) (-2289);
      shortArray0[5] = (short) (-1096);
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)46, (short)0, (short) (-774), (short) (-1216), (short) (-2289), (short) (-1096)}, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short) (-1216), (int) (short) (-774));
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
      Character[] characterArray0 = new Character[3];
      char char0 = 'E';
      Character character0 = Character.valueOf('E');
      assertNotNull(character0);
      assertEquals('E', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('E', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('E');
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('E', (char)character2);
      
      char char1 = Character.highSurrogate(char0);
      assertFalse(char1 == char0);
      assertEquals('\uD7C0', char1);
      
      char char2 = Character.highSurrogate(0);
      assertTrue(char2 == char1);
      assertFalse(char2 == char0);
      assertEquals('\uD7C0', char2);
      
      characterArray0[2] = character2;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      
      int int0 = ArrayUtils.indexOf((int[]) null, 2169, (int) char0);
      assertFalse(char0 == char2);
      assertFalse(char0 == char1);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) characterArray1, (Object) "Windows");
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.String
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean boolean1 = Boolean.getBoolean("]o6;/Xo");
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.indexOf((char[]) null, 'V');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      boolean boolean0 = Character.isAlphabetic(645);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 645;
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(645L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(object2, "{}");
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(object0, "m#+iy45:,J>&v:]");
      assertFalse(object0.equals((Object)object1));
      assertFalse(object0.equals((Object)object2));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry1);
      
      AbstractMap.SimpleEntry<Object, String>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Object, String>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 6);
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry1;
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry1;
      abstractMap_SimpleEntryArray0[3] = abstractMap_SimpleEntry1;
      abstractMap_SimpleEntryArray0[4] = abstractMap_SimpleEntry0;
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry1);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object0.equals((Object)object2));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertTrue(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertNotNull(abstractMap_SimpleEntry2);
      
      Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Comparable<Integer>>, Comparable<Object>>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      String string0 = abstractMap_SimpleEntry2.setValue("TV}vUmR&SA\"c@\"+|F-g");
      assertFalse(object0.equals((Object)object1));
      assertFalse(object0.equals((Object)object2));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertNotNull(string0);
      assertEquals("m#+iy45:,J>&v:]", string0);
      assertNotSame(object0, object1);
      assertNotSame(object0, object2);
      assertNotSame(abstractMap_SimpleEntry1, abstractMap_SimpleEntry0);
      assertNotSame(abstractMap_SimpleEntry1, abstractMap_SimpleEntry2);
      assertNotSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);
      assertNotSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry1);
      
      abstractMap_SimpleEntryArray0[5] = abstractMap_SimpleEntry2;
      AbstractMap.SimpleEntry<Object, String>[] abstractMap_SimpleEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray0);
      assertFalse(abstractMap_SimpleEntryArray1.equals((Object)abstractMap_SimpleEntryArray0));
      assertNotNull(abstractMap_SimpleEntryArray1);
      assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
      assertNotSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
      assertEquals(12, abstractMap_SimpleEntryArray1.length);
      assertEquals(6, abstractMap_SimpleEntryArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(abstractMap_SimpleEntryArray1);
      assertFalse(abstractMap_SimpleEntryArray1.equals((Object)abstractMap_SimpleEntryArray0));
      assertFalse(abstractMap_SimpleEntryArray0.equals((Object)abstractMap_SimpleEntryArray1));
      assertNotNull(map0);
      assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
      assertNotSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
      assertFalse(map0.isEmpty());
      assertEquals(2, map0.size());
      assertEquals(12, abstractMap_SimpleEntryArray1.length);
      assertEquals(6, abstractMap_SimpleEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = 100;
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {100, 0, 0, 0, 0, 0}, intArray0);
      
      float[] floatArray1 = ArrayUtils.subarray((float[]) null, 100, 100);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "P7n@eQ5Kk";
      stringArray0[1] = "";
      double[] doubleArray2 = ArrayUtils.clone(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) stringArray0, (-2146640822), (-241));
      assertNotNull(objectArray0);
      assertNotSame(stringArray0, objectArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-19);
      Integer integer0 = new Integer((-1474));
      assertNotNull(integer0);
      assertEquals((-1474), (int)integer0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 2917);
      assertNotNull(intArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1474), (-1474), (-1474)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Byte[] byteArray0 = new Byte[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[11];
      Object[] objectArray1 = ArrayUtils.addAll((Object[]) byteArray0, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertNotSame(byteArray0, objectArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(11, objectArray0.length);
      assertEquals(19, objectArray1.length);
      
      Object[] objectArray2 = ArrayUtils.nullToEmpty(objectArray1);
      assertFalse(byteArray0.equals((Object)objectArray1));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray2.equals((Object)objectArray0));
      assertNotNull(objectArray2);
      assertNotSame(byteArray0, objectArray1);
      assertNotSame(byteArray0, objectArray2);
      assertSame(objectArray1, objectArray2);
      assertSame(objectArray2, objectArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(11, objectArray0.length);
      assertEquals(19, objectArray1.length);
      assertEquals(19, objectArray2.length);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Double double0 = new Double(2350.0);
      assertNotNull(double0);
      assertEquals(2350.0, (double)double0, 0.01);
      
      Double double1 = new Double(1.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1.0, (double)double1, 0.01);
      
      Double double2 = new Double(403.3453879);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(403.3453879, (double)double2, 0.01);
      
      Double double3 = new Double(1.5);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      assertEquals(1.5, (double)double3, 0.01);
      
      Double double4 = new Double((-1.0));
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      assertEquals((-1.0), (double)double4, 0.01);
      
      Double double5 = new Double(2197.8753272);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotNull(double5);
      assertEquals(2197.8753272, (double)double5, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double5;
      doubleArray0[1] = double1;
      doubleArray0[2] = double2;
      doubleArray0[3] = double5;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {2197.8753272, 1.0, 403.3453879, 2197.8753272}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 2189.4F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {2189.4F, 0.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      
      char[] charArray2 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertNotSame(charArray2, charArray0);
      assertSame(charArray2, charArray1);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {}, charArray2);
      
      boolean boolean1 = ArrayUtils.isSameLength(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertSame(charArray1, charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains((double[]) null, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int int0 = Byte.toUnsignedInt((byte)36);
      assertEquals(36, int0);
      
      Byte byte0 = new Byte((byte) (-96));
      assertNotNull(byte0);
      assertEquals((byte) (-96), (byte)byte0);
      
      Character character0 = new Character('.');
      assertNotNull(character0);
      assertEquals('.', (char)character0);
      
      Character character1 = new Character(' ');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals(' ', (char)character1);
      
      Character character2 = Character.valueOf('`');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('`', (char)character2);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-1L));
      assertNull(longArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 36, (int) (byte) (-96));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      char[] charArray0 = new char[9];
      int int0 = ArrayUtils.indexOf(charArray0, '\u0000');
      assertEquals(0, int0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 2189.4F;
      floatArray0[1] = (-1241.9066F);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {2189.4F, (-1241.9066F)}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte) (-107);
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte) (-1);
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)119, (byte) (-107), (byte)119, (byte) (-107), (byte) (-107), (byte) (-1), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Byte[] byteArray0 = new Byte[16];
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) byteArray0, (Object[]) byteArray0);
      assertNotNull(objectArray0);
      assertNotSame(byteArray0, objectArray0);
      assertEquals(16, byteArray0.length);
      assertEquals(32, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\u0000', 38);
      assertEquals(0, int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      long[] longArray0 = new long[14];
      longArray0[0] = (long) 38;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(14, longArray0.length);
      assertEquals(14, longArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertSame(longArray0, longArray1);
      assertEquals(14, longArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) 'E';
      floatArray0[2] = 0.0F;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)99;
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte)99;
      shortArray0[3] = (short) (byte)99;
      ArrayUtils.reverse(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)99, (short)99, (short) (-1), (short)99}, shortArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte) (-1);
      ArrayUtils.reverse(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)99, (byte)7, (byte)99, (byte) (-1), (byte)99, (byte)99}, byteArray0);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)99);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(3, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)99, (short) (-1), (short)99}, shortArray1);
      assertArrayEquals(new short[] {(short)99, (short)99, (short) (-1), (short)99}, shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 69.0F;
      doubleArray0[1] = (double) (byte)99;
      doubleArray0[2] = (-143.11321546639);
      doubleArray0[3] = (double) (byte)99;
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = (double) 'E';
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short) (-1), (int) (byte)99);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {69.0, 99.0, (-143.11321546639), 99.0, (-1.0), 69.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {69.0, 99.0, (-143.11321546639), 99.0, (-1.0), 69.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = '!';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'!', '!', '\'', '\''}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-5387);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short) (-5387)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-5387), (short)0, (short) (-5387)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      String[] stringArray0 = ArrayUtils.clone((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[3] = (-1596);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, (-1596), 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, (-1596), 0, 0, 0, 0, (-1596), 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-150.17146319);
      boolean boolean1 = ArrayUtils.contains((double[]) null, (-150.17146319), (-150.17146319));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[1];
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      boolean boolean3 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(map0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null);
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (-2963));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2963, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      float[] floatArray0 = new float[16];
      floatArray0[0] = (float) '!';
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(16, floatArray0.length);
      assertEquals(16, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte) (-107);
      byteArray0[8] = (byte)116;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-1), (byte)6, (byte)105, (byte) (-1), (byte)2, (byte)119, (byte) (-107), (byte)116}, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2447;
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte)6;
      intArray0[3] = (int) (byte)116;
      intArray0[4] = (int) (byte)2;
      boolean boolean1 = ArrayUtils.contains(intArray0, 0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {2447, (-1), 6, 116, 2}, intArray0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)959;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-27989);
      shortArray0[3] = (short)198;
      shortArray0[4] = (short) (-1903);
      shortArray0[5] = (short)2457;
      shortArray0[6] = (short)1082;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)959, (short)1, (short) (-27989), (short)198, (short) (-1903), (short)2457, (short)1082}, shortArray0);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)959;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short) (-27989), (int) (short)1);
      assertEquals((-1), int0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {959L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-3407L);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-47);
      longArray0[3] = (long) (-47);
      longArray0[4] = (long) (-47);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-47);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-47), 12);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {(-3407L), (-1L), (-47L), (-47L), (-47L), (-1L), (-47L)}, longArray0);
      assertArrayEquals(new long[] {(-3407L), (-1L), (-47L), (-47L), (-47L), (-1L), (-47L)}, longArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-47);
      intArray0[1] = 12;
      intArray0[2] = 12;
      intArray0[3] = 12;
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-47);
      intArray0[7] = 12;
      intArray0[8] = 12;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-47), 12, 12, 12, (-1), (-1), (-47), 12, 12}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      long[] longArray2 = ArrayUtils.addAll(longArray1, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertEquals(7, longArray0.length);
      assertEquals(14, longArray2.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {(-3407L), (-1L), (-47L), (-47L), (-47L), (-1L), (-47L)}, longArray0);
      assertArrayEquals(new long[] {(-3407L), (-1L), (-47L), (-47L), (-47L), (-1L), (-47L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 124;
      intArray0[2] = (-1993);
      intArray0[3] = 1699;
      intArray0[4] = (-128);
      intArray0[5] = 2;
      intArray0[6] = (-417);
      intArray0[7] = 2;
      intArray0[8] = 2144445562;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2144445562, 36);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 124, (-1993), 1699, (-128), 2, (-417), 2, 2144445562}, intArray0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(0, int0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) false;
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, object1);
      assertFalse(object1.equals((Object)object0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertNotSame(object1, object0);
      assertEquals(2, objectArray0.length);
      
      int int2 = ArrayUtils.indexOf(doubleArray0, (-1.0));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.add(stringArray0, "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      Object[] objectArray0 = ArrayUtils.add((Object[]) stringArray1, 0, (Object) "");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(objectArray0);
      assertNotSame(stringArray0, objectArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, objectArray0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertEquals(2, objectArray0.length);
      
      String[] stringArray2 = ArrayUtils.nullToEmpty(stringArray1);
      assertFalse(stringArray0.equals((Object)objectArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)objectArray0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)objectArray0));
      assertNotNull(stringArray2);
      assertNotSame(stringArray0, objectArray0);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, objectArray0);
      assertSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, objectArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertEquals(1, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      int int0 = Byte.toUnsignedInt((byte)36);
      assertEquals(36, int0);
      
      Byte byte0 = new Byte((byte) (-53));
      assertNotNull(byte0);
      assertEquals((byte) (-53), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-96));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-96), (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-96));
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte) (-96), (byte)byte2);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.indexOf((short[]) null, (short)3, (int) (byte) (-53));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "P7n@eQ5Kk";
      stringArray0[1] = "";
      stringArray0[2] = "";
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'E';
      intArray0[1] = (int) 'E';
      intArray0[2] = (int) 'z';
      intArray0[3] = (int) 'z';
      intArray0[4] = (int) 'E';
      intArray0[5] = (int) 'z';
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {69, 69, 122, 122, 69, 122}, intArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {'E', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'E', '\u0000', '\u0000', 'E', '\u0000', '\u0000'}, charArray1);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\u0000', 0);
      assertEquals(0, int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      long[] longArray1 = new long[6];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 0;
      longArray1[1] = 1L;
      longArray1[2] = 97L;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 0;
      ArrayUtils.reverse(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 97L, 1L, 0L}, longArray1);
      
      Double double0 = new Double(0L);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Float float0 = new Float((-3246.2358766));
      assertNotNull(float0);
      assertEquals((-3246.2358F), (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, true, true, false, false, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Byte byte0 = new Byte((byte)87);
      assertNotNull(byte0);
      assertEquals((byte)87, (byte)byte0);
      
      Byte[] byteArray0 = new Byte[19];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-1));
      assertNotNull(byteArray1);
      assertEquals(19, byteArray0.length);
      assertEquals(19, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, 1, (int) (byte) (-1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(19, byteArray0.length);
      assertEquals(19, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      short[] shortArray0 = new short[2];
      Double double0 = new Double(2350.0);
      assertNotNull(double0);
      assertEquals(2350.0, (double)double0, 0.01);
      
      Double double1 = new Double(1.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1.0, (double)double1, 0.01);
      
      Double double2 = new Double(403.3453879);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(403.3453879, (double)double2, 0.01);
      
      Double double3 = new Double(1.5);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(1.5, (double)double3, 0.01);
      
      Double double4 = new Double((-1.0));
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      assertEquals((-1.0), (double)double4, 0.01);
      
      Double double5 = new Double(2197.8753272);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotNull(double5);
      assertEquals(2197.8753272, (double)double5, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double5;
      doubleArray0[1] = double1;
      doubleArray0[2] = double2;
      doubleArray0[3] = double5;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {2197.8753272, 1.0, 403.3453879, 2197.8753272}, doubleArray1, 0.01);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-2070787803), 1547);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-5.69295527);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, (-5.69295527)}, doubleArray0, 0.01);
      
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-3188.073F);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2688);
      shortArray0[1] = (short) (-1258);
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)2;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2688), (short) (-1258), (short)2, (short)2, (short) (-1)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-2688), (short) (-1258), (short)2, (short)2}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'X';
      intArray0[1] = (int) '`';
      intArray0[2] = (int) '`';
      intArray0[3] = (-1530);
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-82));
      assertNull(byteArray0);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('X');
      assertNotNull(character0);
      assertEquals('X', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('`');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('`', (char)character1);
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {88, 96, 96, (-1530)}, intArray0);
      assertArrayEquals(new int[] {88, 96, 96, (-1530)}, intArray1);
      
      ArrayUtils.reverse((Object[]) characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '*';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '2';
      charArray0[4] = '$';
      charArray0[5] = 'E';
      charArray0[6] = '9';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '=', 2631);
      assertEquals((-1), int0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'*', '5', '5', '2', '$', 'E', '9'}, charArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (long) '2';
      longArray2[1] = (long) '2';
      longArray2[2] = (long) '*';
      longArray2[3] = (long) '$';
      longArray2[4] = (long) '5';
      longArray2[5] = (long) '$';
      boolean boolean0 = ArrayUtils.isSameLength(longArray2, longArray1);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(boolean0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(6, longArray2.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {50L, 50L, 42L, 36L, 53L, 36L}, longArray2);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)882;
      shortArray0[2] = (short)882;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)882, (short)0, (short)882}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertFalse(boolean0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)882, (short)0, (short)882}, shortArray0);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((-1885.0));
      assertNotNull(float0);
      assertEquals((-1885.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float float1 = Float.min((-2786.6057F), (-2183.8962F));
      assertEquals((-2786.6057F), float1, 0.01F);
      
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 846.303F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-1885.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      short[] shortArray0 = new short[5];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'-'}, charArray0);
      assertArrayEquals(new char[] {'-', '-'}, charArray1);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-540L);
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-2146534692));
      assertEquals((-1), int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Character character0 = Character.valueOf('@');
      assertNotNull(character0);
      assertEquals('@', (char)character0);
      
      Character character1 = new Character('@');
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('@', (char)character1);
      
      Character character2 = Character.valueOf('Y');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('Y', (char)character2);
      
      Character character3 = new Character('n');
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('n', (char)character3);
      
      Character character4 = Character.valueOf('u');
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      assertEquals('u', (char)character4);
      
      Character character5 = new Character('7');
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertNotNull(character5);
      assertEquals('7', (char)character5);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      Boolean[] booleanArray1 = new Boolean[8];
      booleanArray1[0] = (Boolean) false;
      Boolean boolean1 = Boolean.valueOf("");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray1[1] = boolean1;
      booleanArray1[2] = (Boolean) false;
      booleanArray1[3] = (Boolean) false;
      booleanArray1[4] = (Boolean) false;
      booleanArray1[5] = (Boolean) false;
      booleanArray1[6] = (Boolean) false;
      booleanArray1[7] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(8, booleanArray2.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = 100;
      intArray0[1] = (-2063);
      intArray0[2] = (-49);
      intArray0[3] = 3134;
      intArray0[4] = 100;
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      char[] charArray0 = new char[1];
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.add(stringArray0, "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      Object[] objectArray0 = ArrayUtils.add((Object[]) stringArray1, 0, (Object) "");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(objectArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, objectArray0);
      assertNotSame(stringArray1, objectArray0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertEquals(2, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) stringArray1, (Object[]) null);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)objectArray0));
      assertFalse(stringArray1.equals((Object)objectArray0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, objectArray0);
      assertNotSame(stringArray1, objectArray0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '`';
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) '`';
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (float) 6111;
      floatArray0[5] = (float) 6111;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 6111, 575);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {96.0F, (-1.0F), 96.0F, (-1.0F), 6111.0F, 6111.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(5, int0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 0.0, 1.0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameType("", "");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2602;
      shortArray0[1] = (short)1398;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1473);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)7;
      shortArray0[6] = (short)1;
      shortArray0[7] = (short)46;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short)2602, (short)1398, (short) (-1), (short) (-1473), (short) (-1), (short)7, (short)1, (short)46}, shortArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      charArray0[1] = '&';
      charArray0[2] = 'E';
      charArray0[3] = 'o';
      charArray0[4] = 'F';
      charArray0[5] = ' ';
      charArray0[6] = 'N';
      boolean boolean1 = ArrayUtils.contains(charArray0, '5');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {']', '&', 'E', 'o', 'F', ' ', 'N'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Short[] shortArray0 = new Short[9];
      Short short0 = new Short((short) (-232));
      assertNotNull(short0);
      assertEquals((short) (-232), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-232));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-232), (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-1));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short) (-1), (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)730);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      assertEquals((short)730, (short)short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) shortArray0[0]);
      assertTrue(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short1));
      assertNotNull(short4);
      assertEquals((short) (-232), (short)short4);
      assertEquals(9, shortArray0.length);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short)1377);
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short1));
      assertNotNull(short5);
      assertEquals((short)1377, (short)short5);
      
      shortArray0[5] = short5;
      Short short6 = new Short((short)730);
      assertFalse(short6.equals((Object)short4));
      assertTrue(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short2));
      assertNotNull(short6);
      assertEquals((short)730, (short)short6);
      
      shortArray0[6] = short6;
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.reverse((Object[]) shortArray0);
      assertEquals(9, shortArray0.length);
      
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) shortArray0, (Object) short1);
      assertTrue(short1.equals((Object)short0));
      assertTrue(short1.equals((Object)short4));
      assertFalse(short1.equals((Object)short5));
      assertFalse(short1.equals((Object)short2));
      assertFalse(short1.equals((Object)short6));
      assertFalse(short1.equals((Object)short3));
      assertNotNull(objectArray0);
      assertNotSame(shortArray0, objectArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(8, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      
      char[] charArray2 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {}, charArray2);
      
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((Object[]) shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) shortArray0, (Object) "");
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.String
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      long[] longArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((long[]) null, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 2189.4F;
      floatArray0[1] = (-1241.9066F);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {2189.4F, (-1241.9066F)}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte) (-107);
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte) (-1);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-107);
      doubleArray0[1] = (double) (byte) (-107);
      doubleArray0[2] = (double) (byte) (-107);
      doubleArray0[3] = (double) 2189.4F;
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = (double) (byte)119;
      doubleArray0[6] = (double) (byte)119;
      doubleArray0[7] = 4.0;
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-107.0), (-107.0), (-107.0), 2189.39990234375, (-1.0), 119.0, 119.0, 4.0}, doubleArray0, 0.01);
      
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('I');
      assertNotNull(character0);
      assertEquals('I', (char)character0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, object0, 0);
      assertEquals((-1), int0);
      assertEquals(6, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      int int0 = ArrayUtils.indexOf(objectArray0, object0, 0);
      assertEquals(0, int0);
      assertEquals(1, objectArray0.length);
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(3723.43);
      assertNotNull(double0);
      assertEquals(3723.43, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      char[] charArray0 = new char[1];
      charArray0[0] = '`';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'`'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) 0);
      assertNull(longArray0);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'X';
      longArray0[1] = (long) 'X';
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {88L, 88L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      Object[] objectArray0 = new Object[1];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals(0, int0);
      assertEquals(1, objectArray0.length);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[2] = (float) 0;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Short[] shortArray0 = new Short[9];
      try { 
        Short.valueOf("}Se{hAQ\"x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"}Se{hAQ\"x\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'F'}, charArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Byte byte0 = new Byte((byte)103);
      assertNotNull(byte0);
      assertEquals((byte)103, (byte)byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'java.lang.Object@6b0ddac3', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "P7n@eQ5Kk";
      stringArray0[2] = "";
      stringArray0[2] = "";
      int int0 = ArrayUtils.indexOf((Object[]) stringArray0, (Object) null, (-428));
      assertEquals(1, int0);
      assertEquals(3, stringArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '%';
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {37}, intArray0);
      assertArrayEquals(new int[] {37}, intArray1);
      
      String[] stringArray1 = ArrayUtils.clone(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "P7n@eQ5Kk";
      stringArray0[1] = "";
      stringArray0[2] = "";
      int int0 = ArrayUtils.indexOf((Object[]) stringArray0, (Object) null, (-428));
      assertEquals((-1), int0);
      assertEquals(3, stringArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-112));
      assertNull(byteArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '%';
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {37}, intArray0);
      assertArrayEquals(new int[] {37}, intArray1);
      
      String[] stringArray1 = ArrayUtils.clone(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 2361, 2);
      assertNull(shortArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1988L;
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray2, 1.0, 263.28502487891);
      assertFalse(int1 == int0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, int1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte) (-112));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("java.lang.String", ", Length: 0");
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((AbstractMap.SimpleImmutableEntry<Object, String>[]) null, (-1), abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) Integer.MAX_VALUE);
      assertNull(longArray0);
      
      float float0 = Float.min((short) (-1164), (-971.5893F));
      assertEquals((-1164.0F), float0, 0.01F);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-893.35394F));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Double double0 = new Double(1466.54337236196);
      assertNotNull(double0);
      assertEquals(1466.54337236196, (double)double0, 0.01);
      
      Double double1 = new Double((-1.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1.0), (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1.0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      charArray0[1] = ')';
      charArray0[2] = ':';
      charArray0[3] = 'o';
      charArray0[4] = '8';
      charArray0[5] = '8';
      charArray0[6] = '^';
      charArray0[7] = '7';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      assertArrayEquals(new char[] {'H', ')', ':', 'o', '8', '8', '^', '7', '\u0000'}, charArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) ')';
      longArray0[1] = (long) '\u0000';
      longArray0[2] = (long) 'o';
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {41L, 0L, 111L}, longArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength(charArray1, charArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      assertArrayEquals(new char[] {'H', ')', ':', 'o', '8', '8', '^', '7', '\u0000'}, charArray0);
      
      boolean boolean3 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean4 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.remove(charArray0, 0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)1518);
      assertNotNull(short0);
      assertEquals((short)1518, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)376);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)376, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)376);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short)376, (short)short2);
      
      shortArray0[2] = short2;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      long[] longArray0 = new long[4];
      int int0 = Short.compare((short)376, (short) shortArray0[2]);
      assertEquals(0, int0);
      assertSame(shortArray0, shortArray1);
      assertEquals(3, shortArray0.length);
      
      longArray0[0] = (long) (short)shortArray0[1];
      longArray0[1] = (long) (-2963);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      int int1 = ArrayUtils.indexOf(longArray0, 0L);
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {376L, (-2963L), 0L, 0L}, longArray0);
      
      ArrayUtils.reverse((Object[]) shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(3, shortArray0.length);
      
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) shortArray1, (Object) short1);
      assertTrue(short1.equals((Object)short2));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(objectArray0);
      assertSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, objectArray0);
      assertNotSame(shortArray1, objectArray0);
      assertSame(shortArray1, shortArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      char[] charArray3 = new char[5];
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray0));
      
      charArray3[0] = 'o';
      charArray3[1] = 'D';
      charArray3[2] = 'p';
      charArray3[3] = 'c';
      charArray3[4] = '}';
      boolean boolean0 = ArrayUtils.contains(charArray3, 'p');
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray0));
      assertTrue(boolean0);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray0);
      assertEquals(5, charArray3.length);
      assertArrayEquals(new char[] {'o', 'D', 'p', 'c', '}'}, charArray3);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 605;
      intArray0[1] = 0;
      intArray0[2] = (-23);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {605, 0, (-23)}, intArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1, 605);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {605, 0, (-23)}, intArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      long[] longArray2 = ArrayUtils.addAll((long[]) null, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      int int0 = Byte.toUnsignedInt((byte)36);
      assertEquals(36, int0);
      
      Byte byte0 = new Byte((byte) (-53));
      assertNotNull(byte0);
      assertEquals((byte) (-53), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-96));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-96), (byte)byte1);
      
      Byte byte2 = new Byte((byte)11);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)11, (byte)byte2);
      
      Byte byte3 = new Byte((byte) (-96));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte) (-96), (byte)byte3);
      
      Long long0 = Long.valueOf((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long long1 = new Long((byte) (-96));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-96L), (long)long1);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = Integer.MAX_VALUE;
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, Integer.MAX_VALUE, 0}, intArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean2 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = '!';
      charArray0[2] = '!';
      charArray0[3] = '+';
      charArray0[5] = 'w';
      charArray0[7] = '<';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1), 9);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '!', '!', '+', '\u0000', 'w', '\u0000', '<'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '!', '!', '+', '\u0000', 'w', '\u0000', '<'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-5.69295527);
      doubleArray0[2] = (-5.69295527);
      doubleArray0[3] = (-5.69295527);
      doubleArray0[4] = (-5.69295527);
      doubleArray0[6] = (-5.69295527);
      doubleArray0[7] = (-5.69295527);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-5.69295527), 0.0, (-5.69295527), (-5.69295527), (-5.69295527), 0.0, (-5.69295527), (-5.69295527), 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)25, (byte)23, (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      
      int[] intArray0 = new int[0];
      boolean boolean3 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Short short0 = new Short((short)46);
      assertNotNull(short0);
      assertEquals((short)46, (short)short0);
      
      Short short1 = new Short((short)0);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      
      int int0 = Short.toUnsignedInt((short) (-4));
      assertEquals(65532, int0);
      
      Short short2 = new Short((short)46);
      assertTrue(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short)46, (short)short2);
      
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short1;
      shortArray0[1] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)46}, shortArray1);
      
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray2);
      assertSame(shortArray0, shortArray2);
      assertSame(shortArray2, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.remove(charArray0, 0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)1518);
      assertNotNull(short0);
      assertEquals((short)1518, (short)short0);
      
      shortArray0[0] = short0;
      long long0 = Short.toUnsignedLong((short)1518);
      assertEquals(1518L, long0);
      
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) shortArray0, (int) 1518, 0);
      assertNotNull(objectArray0);
      assertNotSame(shortArray0, objectArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(0, objectArray0.length);
      
      Short short1 = new Short((byte)12);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)12, (short)short1);
      
      Short short2 = new Short((short)1518);
      assertTrue(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short)1518, (short)short2);
      
      Short short3 = new Short((byte)12);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short1));
      assertNotNull(short3);
      assertEquals((short)12, (short)short3);
      
      Short short4 = new Short((short)971);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertNotNull(short4);
      assertEquals((short)971, (short)short4);
      
      int int0 = Short.toUnsignedInt((short) shortArray0[0]);
      assertFalse(shortArray0.equals((Object)objectArray0));
      assertEquals(1518, int0);
      assertNotSame(shortArray0, objectArray0);
      assertEquals(3, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)64;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)64, 2264);
      assertEquals(3, int0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-22), (byte)28, (byte)64}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean("]o6;/Xo");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = Boolean.getBoolean("]o6;/Xo");
      assertFalse(boolean1);
      
      int int0 = Boolean.compare(false, false);
      assertEquals(0, int0);
      
      boolean boolean2 = Boolean.logicalAnd(true, true);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = Boolean.getBoolean((String) null);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = Boolean.logicalOr(true, false);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertTrue(boolean0.equals((Object)boolean3));
      assertFalse(boolean0.equals((Object)boolean2));
      assertFalse(boolean0.equals((Object)boolean4));
      assertTrue(boolean0.equals((Object)boolean1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertTrue(boolean0.equals((Object)boolean3));
      assertFalse(boolean0.equals((Object)boolean2));
      assertFalse(boolean0.equals((Object)boolean4));
      assertTrue(boolean0.equals((Object)boolean1));
      assertNotNull(booleanArray2);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-112));
      assertNull(byteArray0);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)882;
      shortArray0[2] = (short)882;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short)882, (short)882}, shortArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)882;
      doubleArray0[1] = (double) (short)882;
      doubleArray0[2] = (double) (short)882;
      doubleArray0[3] = (double) (short)882;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short)882, (-2135070446));
      assertEquals(0, int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {882.0, 882.0, 882.0, 882.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 263.285025;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(7, int0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true, false, false, true}, booleanArray0));
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 263.285025, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 263.285025, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 263.285025, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 263.285025, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      int int0 = Byte.toUnsignedInt((byte)36);
      assertEquals(36, int0);
      
      Byte byte0 = new Byte((byte)120);
      assertNotNull(byte0);
      assertEquals((byte)120, (byte)byte0);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte0;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)36;
      boolean boolean0 = ArrayUtils.contains(longArray0, 1L);
      assertFalse(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {36L}, longArray0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)120);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)120}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      int int0 = ArrayUtils.indexOf(charArray0, 'V');
      assertEquals(0, int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'V'}, charArray0);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 4079.441F;
      floatArray0[1] = 212.78236F;
      floatArray0[2] = 1817.0312F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-2324.934F);
      floatArray0[5] = 1731.72F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertArrayEquals(new float[] {4079.441F, 212.78236F, 1817.0312F, 1.0F, (-2324.934F), 1731.72F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {4079.441F, 212.78236F, 1817.0312F, 1.0F, (-2324.934F), 1731.72F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = 3;
      intArray0[2] = 3132;
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1), 3, 3132}, intArray0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean("]o6;/Xo");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1825.5618265);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2606.38771703292);
      doubleArray0[4] = (-3109.9981330748096);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-1825.5618265), (-1.0), (-2606.38771703292), (-3109.9981330748096)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1825.5618265), (-1.0), (-2606.38771703292), (-3109.9981330748096), 0.0, (-1825.5618265), (-1.0), (-2606.38771703292), (-3109.9981330748096)}, doubleArray1, 0.01);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-1));
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean("!8=_C:cF+`(B");
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      boolean boolean3 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean3);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1825.5618265), (-1.0), (-2606.38771703292), (-3109.9981330748096)}, doubleArray0, 0.01);
      
      boolean[] booleanArray2 = new boolean[0];
      boolean boolean4 = ArrayUtils.isNotEmpty(booleanArray2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 1431655765, 0.0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, int0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1825.5618265), (-1.0), (-2606.38771703292), (-3109.9981330748096)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[1];
      doubleArray0[4] = (double) (byte) (-1);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray2 = ArrayUtils.subarray((double[]) null, 441, 441);
      assertNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-150.0);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-150.0), (-150.0));
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-150.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 2189.4F;
      floatArray0[1] = (-1241.9066F);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {2189.4F, (-1241.9066F)}, floatArray0, 0.01F);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.add(stringArray0, "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      Object[] objectArray0 = ArrayUtils.add((Object[]) stringArray1, 0, (Object) "");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(objectArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, objectArray0);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, objectArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertEquals(2, objectArray0.length);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)18, (int) (byte)18);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Short short0 = new Short((byte)18);
      assertNotNull(short0);
      assertEquals((short)18, (short)short0);
      
      Short short1 = new Short((short)2);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)2, (short)short1);
      
      int int1 = Short.compare((short)10, (short) (-2963));
      assertFalse(int1 == int0);
      assertEquals(2973, int1);
      
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short1;
      shortArray0[1] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray0, (short)36);
      assertNotNull(shortArray2);
      assertSame(shortArray0, shortArray1);
      assertEquals(2, shortArray2.length);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)18}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-540L);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)11}, byteArray0);
      
      Short short0 = new Short((byte)11);
      assertNotNull(short0);
      assertEquals((short)11, (short)short0);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray1 = ArrayUtils.removeElement((long[]) null, 496L);
      assertNull(longArray1);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray1, (byte[]) null);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean[] booleanArray2 = new boolean[8];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = true;
      booleanArray2[1] = false;
      booleanArray2[2] = false;
      booleanArray2[3] = true;
      booleanArray2[4] = true;
      booleanArray2[5] = true;
      booleanArray2[6] = true;
      booleanArray2[7] = true;
      Boolean[] booleanArray3 = ArrayUtils.toObject(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(8, booleanArray2.length);
      assertEquals(8, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, true, true, true}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean("]o6;/Xo");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = Boolean.getBoolean("]o6;/Xo");
      assertFalse(boolean1);
      
      int int0 = Boolean.compare(false, false);
      assertEquals(0, int0);
      
      boolean boolean2 = Boolean.logicalAnd(true, true);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = Boolean.getBoolean((String) null);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = Boolean.logicalOr(true, false);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertFalse(boolean0.equals((Object)boolean4));
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean3));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertFalse(boolean0.equals((Object)boolean4));
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean3));
      assertNotNull(booleanArray2);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-112));
      assertNull(byteArray0);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character(';');
      assertNotNull(character0);
      assertEquals(';', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {';'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      Double double0 = new Double(1);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)1;
      byteArray0[1] = (byte) (-6);
      boolean boolean1 = ArrayUtils.isNotEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      float[] floatArray0 = new float[5];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-106);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-106), (byte) (-106), (byte)0, (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Byte[] byteArray0 = new Byte[17];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-150.17146319);
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-150.17146319)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Float float0 = new Float((-1350.42852935881));
      assertNotNull(float0);
      assertEquals((-1350.4286F), (float)float0, 0.01F);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      charArray0[1] = 'v';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'[', 'v'}, charArray0);
      assertArrayEquals(new char[] {'[', 'v'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-110);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-63), (byte)2, (byte) (-110)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-63), (byte)2, (byte) (-110), (byte) (-118), (byte) (-63), (byte)2, (byte) (-110)}, byteArray1);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)23815);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'h';
      charArray0[1] = 'B';
      charArray0[2] = 'P';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {'h', 'B', 'P'}, charArray0);
      assertArrayEquals(new char[] {'h', 'B', 'P', 'h', 'B', 'P'}, charArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)2731;
      shortArray0[2] = (short) (-2963);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short)2731, (short) (-2963)}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((Integer[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-2843L);
      longArray1[1] = 87L;
      boolean boolean1 = ArrayUtils.isSameLength(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-2843L), 87L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-56);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-56)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-56)}, byteArray1);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer((-2548));
      assertNotNull(integer0);
      assertEquals((-2548), (int)integer0);
      
      boolean boolean0 = ArrayUtils.isEquals(integer0, "java.home");
      assertFalse(boolean0);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray2);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-56)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-56)}, byteArray2);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1842L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {1842L}, longArray0);
      
      Character character0 = Character.valueOf('=');
      assertNotNull(character0);
      assertEquals('=', (char)character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'n');
      assertNotNull(charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'=', '=', '='}, charArray0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2, (-3544));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 64.0F;
      floatArray0[1] = (-601.1F);
      intArray0[2] = (-3544);
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) 233;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2, 1516);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {64.0F, (-601.1F), 0.0F, 2.0F, 2.0F, 233.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 2.0F, 2.0F, 233.0F}, floatArray1, 0.01F);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[1] = (-950);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertArrayEquals(new int[] {0, (-950), 0}, intArray0);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (-2101L));
      assertNull(longArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-950);
      floatArray0[1] = (float) (short) (-1164);
      floatArray0[2] = (float) (-2101L);
      floatArray0[3] = (float) (-2101L);
      floatArray0[4] = (float) (-950);
      floatArray0[5] = (float) (-950);
      floatArray0[6] = (float) (-2101L);
      floatArray0[7] = (float) (short) (-1164);
      floatArray0[8] = (float) (-950);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2947), (-950));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-950.0F), (-1164.0F), (-2101.0F), (-2101.0F), (-950.0F), (-950.0F), (-2101.0F), (-1164.0F), (-950.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = 'X';
      charArray0[4] = '`';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'`', '`', '`', 'X', '`'}, charArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, integerArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) Integer.MAX_VALUE);
      assertNull(longArray0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean1 = Boolean.valueOf("P]B83M,_6OQm.)");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = new Boolean("P]B83M,_6OQm.)");
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      boolean boolean4 = Boolean.logicalXor(true, false);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      
      boolean boolean5 = Boolean.logicalAnd((boolean) boolean2, (boolean) boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean2.equals((Object)boolean3));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean4));
      assertTrue(boolean5);
      
      booleanArray0[2] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean5));
      assertFalse(boolean3.equals((Object)boolean4));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean5));
      assertFalse(boolean3.equals((Object)boolean4));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(booleanArray2);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray2.length);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray2));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-112));
      assertNull(byteArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'X';
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {88.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {88.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Boolean boolean0 = new Boolean("]o6;/Xo");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = Boolean.getBoolean("]o6;/Xo");
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Double double0 = new Double((-1457.4));
      assertNotNull(double0);
      assertEquals((-1457.4), (double)double0, 0.01);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3741;
      shortArray0[1] = (short)10;
      shortArray0[2] = (short) (-157);
      shortArray0[3] = (short)1902;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)280, 64);
      assertEquals((-1), int0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)3741, (short)10, (short) (-157), (short)1902}, shortArray0);
      
      boolean boolean3 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 's';
      charArray0[1] = 'X';
      int[] intArray0 = new int[2];
      intArray0[0] = 100;
      intArray0[1] = (-1530);
      Integer integer0 = new Integer((-1530));
      assertNotNull(integer0);
      assertEquals((-1530), (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      Integer integer2 = new Integer((-1530));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-1530), (int)integer2);
      
      Integer integer3 = new Integer(2025);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(2025, (int)integer3);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 50;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {50}, intArray0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-942);
      floatArray0[1] = (float) 1717986918;
      floatArray0[2] = (float) 1717986918;
      floatArray0[3] = (float) 1717986918;
      floatArray0[4] = (float) 50;
      boolean boolean1 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2.0215163F);
      floatArray0[1] = 110.13703F;
      floatArray0[3] = 91.09F;
      floatArray0[4] = 110.13703F;
      floatArray0[5] = (-2.0215163F);
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(6, floatArray2.length);
      assertArrayEquals(new float[] {(-2.0215163F), 110.13703F, 0.0F, 91.09F, 110.13703F, (-2.0215163F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-2.0215163F), 110.13703F, 0.0F, 91.09F, 110.13703F, (-2.0215163F)}, floatArray2, 0.01F);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      int[] intArray0 = new int[4];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte)120;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)120, (-2146669168));
      assertEquals((-1), int0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)120, (byte)74, (byte)120, (byte) (-64), (byte)120, (byte)120, (byte)120}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals((-1), int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2863.385);
      doubleArray0[5] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-2863.385), 0.0, (-1.0), 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2863.385), 0.0, (-1.0), 0.0, 0.0, (-1.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      int int0 = Byte.toUnsignedInt((byte)36);
      assertEquals(36, int0);
      
      Double double0 = new Double(36);
      assertNotNull(double0);
      assertEquals(36.0, (double)double0, 0.01);
      
      Double double1 = new Double((-1.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1.0), (double)double1, 0.01);
      
      Double double2 = new Double(1518.0);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(1518.0, (double)double2, 0.01);
      
      double double3 = Double.min((-1.0), (-1416.0902));
      assertEquals((-1416.0902), double3, 0.01);
      
      Double double4 = new Double(1.0);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      assertEquals(1.0, (double)double4, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double1;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-679.0F);
      floatArray0[2] = (float) (byte)36;
      floatArray0[3] = (-4256.769F);
      floatArray0[4] = (-679.0F);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-679.0F), 36.0F, (-4256.769F), (-679.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (long) (byte)57;
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 57L}, longArray0);
      
      Short short0 = new Short((short) (-411));
      assertNotNull(short0);
      assertEquals((short) (-411), (short)short0);
      
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      int[] intArray0 = new int[5];
      intArray0[0] = 512;
      intArray0[1] = (-2147483646);
      intArray0[2] = 57;
      intArray0[3] = 8;
      intArray0[4] = 2;
      ArrayUtils.reverse(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {2, 8, 57, (-2147483646), 512}, intArray0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 2);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      
      Byte byte0 = new Byte((byte) (-46));
      assertNotNull(byte0);
      assertEquals((byte) (-46), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-1), (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-88));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte) (-88), (byte)byte2);
      
      Byte byte3 = new Byte((byte)6);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte)6, (byte)byte3);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '{';
      charArray0[1] = 'V';
      charArray0[2] = '{';
      charArray0[3] = '{';
      charArray0[4] = '{';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 46);
      assertEquals(0, int0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 57, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 57, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)578;
      shortArray0[2] = (short)882;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)578, (short)0, (short)882}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertFalse(boolean0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)578, (short)0, (short)882}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-601.1F);
      floatArray0[1] = (-2165.1F);
      floatArray0[3] = (-1750.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-601.1F));
      assertEquals(0, int0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-601.1F), (-2165.1F), 0.0F, (-1750.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\u0000', 0);
      assertEquals(0, int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) null, object0, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(10, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-540L);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (-540L);
      ArrayUtils.reverse((char[]) null);
      Byte byte0 = new Byte((byte) (-91));
      assertNotNull(byte0);
      assertEquals((byte) (-91), (byte)byte0);
      
      Byte byte1 = new Byte((byte)5);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)5, (byte)byte1);
      
      Byte byte2 = new Byte((byte)126);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)126, (byte)byte2);
      
      Byte byte3 = new Byte((byte)122);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      assertEquals((byte)122, (byte)byte3);
      
      Byte byte4 = new Byte((byte)7);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      assertEquals((byte)7, (byte)byte4);
      
      Byte byte5 = new Byte((byte)59);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      assertEquals((byte)59, (byte)byte5);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte3;
      byteArray0[1] = byte5;
      byteArray0[2] = byte3;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-3L));
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 186L;
      doubleArray0[1] = (double) 's';
      doubleArray0[2] = (-40.251682);
      doubleArray0[3] = (double) 2262L;
      doubleArray0[4] = (double) 's';
      doubleArray0[5] = (double) 0L;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {186.0, 115.0, (-40.251682), 2262.0, 115.0, 0.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      int int1 = 10;
      Integer integer1 = new Integer((-1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      Integer integer2 = new Integer(10);
      assertTrue(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(10, (int)integer2);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer1;
      Integer integer3 = new Integer(10);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int1));
      assertNotNull(integer3);
      assertEquals(10, (int)integer3);
      
      integerArray0[1] = integer3;
      Integer integer4 = new Integer(10);
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)int1));
      assertNotNull(integer4);
      assertEquals(10, (int)integer4);
      
      integerArray0[2] = integer4;
      integerArray0[3] = integer2;
      integerArray0[4] = integer0;
      integerArray0[5] = integer2;
      integerArray0[6] = integer1;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(7, integerArray1.length);
      assertEquals(7, integerArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-22836);
      shortArray0[2] = (short) (-3308);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short) (-22836), (short) (-3308)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-22836), (short) (-3308)}, shortArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 's';
      floatArray0[1] = (float) int1;
      floatArray0[2] = (float) int1;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) int1;
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short) (-22836);
      int int2 = ArrayUtils.indexOf(floatArray0, 10.0F, (-658));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {115.0F, 10.0F, 10.0F, 0.0F, 10.0F, 0.0F, (-22836.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-1);
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      ArrayUtils.reverse(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Double double0 = new Double((byte) (-1));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Float float0 = new Float((-1.0));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte) (-1), (int) (byte) (-1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\u0000', 0);
      assertEquals(0, int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Long long0 = Long.valueOf(75L);
      assertNotNull(long0);
      assertEquals(75L, (long)long0);
      
      Long long1 = new Long(0);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      Long[] longArray2 = new Long[1];
      longArray2[0] = (Long) 0L;
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2);
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertNotNull(longArray3);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      assertEquals(1, longArray2.length);
      assertEquals(1, longArray3.length);
      assertArrayEquals(new long[] {0L}, longArray3);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 's';
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {115L, 0L}, longArray0);
      
      Float float0 = new Float((-1885.0));
      assertNotNull(float0);
      assertEquals((-1885.0F), (float)float0, 0.01F);
      
      float float1 = Float.min((-2786.6057F), 1.0F);
      assertEquals((-2786.6057F), float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      byte[] byteArray0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean("]o6;/Xo");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = Boolean.getBoolean("]o6;/Xo");
      assertFalse(boolean1);
      
      int int0 = Boolean.compare(false, false);
      assertEquals(0, int0);
      
      boolean boolean2 = Boolean.logicalAnd(true, true);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = Boolean.logicalXor(false, false);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = Boolean.getBoolean((String) null);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4);
      
      boolean boolean5 = Boolean.logicalOr(true, false);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5);
      
      booleanArray0[0] = boolean0;
      Integer integer0 = new Integer((-1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(12, intArray1.length);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), 2, 0, (-1), (-1)}, intArray0);
      
      boolean boolean6 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6);
      
      boolean boolean7 = ArrayUtils.contains(intArray0, 0);
      assertFalse(boolean7 == boolean6);
      assertFalse(boolean7 == boolean4);
      assertFalse(boolean7 == boolean3);
      assertFalse(boolean7 == boolean1);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean5);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(boolean7);
      assertNotSame(intArray0, intArray1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), 2, 0, (-1), (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      char[] charArray0 = ArrayUtils.add((char[]) null, 0, '=');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'='}, charArray0);
      
      char[] charArray1 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray1);
      
      Character character0 = Character.valueOf('=');
      assertNotNull(character0);
      assertEquals('=', (char)character0);
      
      Character character1 = new Character('t');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('t', (char)character1);
      
      Character character2 = new Character('z');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('z', (char)character2);
      
      String string0 = Character.getName(0);
      assertNotNull(string0);
      assertEquals("NULL", string0);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long(2981L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(2981L, (long)long1);
      
      long long2 = Long.min(0, 0L);
      assertEquals(0L, long2);
      
      Long[] longArray0 = new Long[3];
      longArray0[0] = long0;
      longArray0[1] = long0;
      Long long3 = Long.getLong("Cannot store ");
      assertNull(long3);
      
      longArray0[2] = null;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-3881L));
      assertNotNull(longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, (-3881L)}, longArray1);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(8, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "P7n@eQ5Kk";
      stringArray0[1] = "";
      double[] doubleArray2 = ArrayUtils.clone(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (-308L);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 1721;
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, (-308L), 0L, 0L, 1721L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 91.09F;
      Integer integer0 = new Integer(57);
      assertNotNull(integer0);
      assertEquals(57, (int)integer0);
      
      Integer integer1 = new Integer(57);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(57, (int)integer1);
      
      Integer integer2 = new Integer(100);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(100, (int)integer2);
      
      Integer integer3 = new Integer(57);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(57, (int)integer3);
      
      Integer integer4 = new Integer(0);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(0, (int)integer4);
      
      Integer integer5 = new Integer(2185);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      assertEquals(2185, (int)integer5);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-657));
      assertNull(intArray0);
      
      String[] stringArray0 = ArrayUtils.add((String[]) null, "}Mz$i R)Yb9@?__|B}/");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Character[] characterArray0 = new Character[6];
      Character character0 = Character.valueOf('S');
      assertNotNull(character0);
      assertEquals('S', (char)character0);
      
      characterArray0[0] = character0;
      char char0 = 'o';
      Character character1 = new Character('o');
      assertFalse(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertNotNull(character1);
      assertEquals('o', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('s');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('s', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character(char0);
      assertTrue(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)char0));
      assertNotNull(character3);
      assertEquals('o', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('}');
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertNotNull(character4);
      assertEquals('}', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('s');
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)char0));
      assertTrue(character5.equals((Object)character2));
      assertNotNull(character5);
      assertEquals('s', (char)character5);
      
      characterArray0[5] = character5;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      assertEquals(6, characterArray1.length);
      assertEquals(6, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte)57);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)57}, byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)57;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)36);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)57, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)57, (short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1222;
      shortArray0[2] = (short) (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)1222, (short) (-1)}, shortArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 91.09F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 3520.0F;
      floatArray0[3] = 110.13703F;
      floatArray0[4] = 2065.7F;
      floatArray0[5] = 1004.75586F;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = 2735.978F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(16, floatArray1.length);
      assertArrayEquals(new float[] {91.09F, 1.0F, 3520.0F, 110.13703F, 2065.7F, 1004.75586F, (-1.0F), 2735.978F}, floatArray0, 0.01F);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean("R('1~H*[/zln7xsd");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>("R('1~H*[/zln7xsd", boolean0);
      assertNotNull(abstractMap_SimpleEntry0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)46;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)57, (byte)103, (byte)68, (byte)10, (byte)46}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      char[] charArray0 = new char[3];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 's';
      doubleArray0[1] = 263.28502487891;
      doubleArray0[2] = 263.28502487891;
      doubleArray0[3] = (double) 's';
      doubleArray0[4] = 263.28502487891;
      doubleArray0[6] = (double) 's';
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1.5);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {115.0, 263.28502487891, 263.28502487891, 115.0, 263.28502487891, 0.0, 115.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {115.0, 263.28502487891, 263.28502487891, 115.0, 263.28502487891, 0.0, 115.0, 0.0, 1.5}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(doubleArray1, doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertArrayEquals(new double[] {115.0, 263.28502487891, 263.28502487891, 115.0, 263.28502487891, 0.0, 115.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {115.0, 263.28502487891, 263.28502487891, 115.0, 263.28502487891, 0.0, 115.0, 0.0, 1.5}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {115.0, 263.28502487891, 263.28502487891, 115.0, 263.28502487891, 0.0, 115.0, 0.0, 1.5}, doubleArray2, 0.01);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '#');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)1919, 1226);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1226;
      floatArray0[1] = (float) (short)1919;
      floatArray0[2] = (float) (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1226.0F, 1919.0F, (-1.0F)}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 1226.0F;
      objectArray0[2] = (Object) (-1.0F);
      objectArray0[3] = (Object) (-1.0F);
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray1, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(boolean0);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      
      Double double0 = new Double(0.0F);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Byte[] byteArray0 = new Byte[11];
      int[] intArray0 = new int[4];
      intArray0[1] = (-622);
      intArray0[2] = 2022;
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertFalse(boolean0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, (-622), 2022, 0}, intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) byteArray0, (Object[]) byteArray0);
      assertNotNull(objectArray0);
      assertNotSame(byteArray0, objectArray0);
      assertEquals(11, byteArray0.length);
      assertEquals(22, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      AbstractMap.SimpleImmutableEntry<Object, String>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Object, String>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Byte byte0 = new Byte((byte)105);
      assertNotNull(byte0);
      assertEquals((byte)105, (byte)byte0);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (byte)105, (int) (byte)105);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 2189.4F;
      floatArray0[1] = (-1241.9066F);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {2189.4F, (-1241.9066F)}, floatArray0, 0.01F);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.add(stringArray0, "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      float float0 = Float.min(410.2494F, (-1241.9066F));
      assertEquals((-1241.9066F), float0, 0.01F);
      
      Float[] floatArray1 = new Float[5];
      floatArray1[1] = (Float) 2189.4F;
      floatArray0[1] = (-1241.9066F);
      floatArray1[1] = (Float) (-1241.9066F);
      floatArray1[4] = (Float) 2189.4F;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, 1.0F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray2.length);
      assertArrayEquals(new float[] {1.0F, (-1241.9066F), 1.0F, 1.0F, 2189.4F}, floatArray2, 0.01F);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'G';
      charArray0[3] = 'M';
      charArray0[4] = '1';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'M', 'M', 'G', 'M', '1', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'M', 'M', 'G', 'M', '1', '\u0000'}, charArray0);
      
      Float[] floatArray3 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray3);
      assertSame(floatArray3, floatArray1);
      assertSame(floatArray1, floatArray3);
      assertEquals(5, floatArray3.length);
      assertEquals(5, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-5.69295527);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, (-5.69295527)}, doubleArray0, 0.01);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, (-5.69295527)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-5.69295527), 1.0, (-5.69295527)}, doubleArray1, 0.01);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)10;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(9, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)64, (byte)64, (byte)36, (byte)10, (byte)64, (byte)64, (byte)93, (byte)10, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)64, (byte)64, (byte)36, (byte)10, (byte)64, (byte)64, (byte)93, (byte)10}, byteArray0);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      float[] floatArray2 = new float[8];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) (byte)64;
      floatArray2[1] = (float) (byte)36;
      floatArray2[2] = (float) (byte)93;
      floatArray2[3] = (float) (byte)36;
      floatArray2[4] = (float) (byte)93;
      floatArray2[5] = (float) (byte)64;
      floatArray2[6] = (float) 0;
      floatArray2[7] = (float) (byte)93;
      int int0 = ArrayUtils.lastIndexOf(floatArray2, 1731.72F, (int) (byte)36);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals((-1), int0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(8, floatArray2.length);
      assertArrayEquals(new float[] {64.0F, 36.0F, 93.0F, 36.0F, 93.0F, 64.0F, 0.0F, 93.0F}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 2189.4F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {2189.4F, 0.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      String[] stringArray2 = ArrayUtils.nullToEmpty(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringArray2.length);
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 2189.4F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'n';
      charArray0[1] = 'U';
      charArray0[2] = 'Z';
      charArray0[3] = 'H';
      char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'n', 'U', 'Z', 'H'}, charArray0);
      assertArrayEquals(new char[] {'n', 'U', 'Z', 'H'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = 'a';
      charArray0[2] = 'o';
      char[] charArray1 = ArrayUtils.add(charArray0, 1, 'v');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'v', 'a', 'o'}, charArray0);
      assertArrayEquals(new char[] {'v', 'v', 'a', 'o'}, charArray1);
      
      char[] charArray2 = ArrayUtils.addAll(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertEquals(7, charArray2.length);
      assertArrayEquals(new char[] {'v', 'a', 'o'}, charArray0);
      assertArrayEquals(new char[] {'v', 'v', 'a', 'o'}, charArray1);
      assertArrayEquals(new char[] {'v', 'v', 'a', 'o', 'v', 'a', 'o'}, charArray2);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'a';
      floatArray0[1] = (float) 'o';
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 'v';
      floatArray0[4] = (float) 'v';
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (float) 1;
      floatArray0[7] = 512.0F;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {97.0F, 111.0F, 1.0F, 118.0F, 118.0F, (-1.0F), 1.0F, 512.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {97.0F, 111.0F, 1.0F, 118.0F, 118.0F, (-1.0F), 1.0F, 512.0F}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 512.0F;
      objectArray0[1] = (Object) 97.0F;
      objectArray0[2] = (Object) 118.0F;
      objectArray0[3] = (Object) 512.0F;
      objectArray0[4] = (Object) 512.0F;
      objectArray0[5] = (Object) 118.0F;
      objectArray0[6] = (Object) (-1.0F);
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertTrue(boolean0);
      assertEquals(7, objectArray0.length);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long(1);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      longArray0[1] = long0;
      Long long1 = new Long((-1L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      
      longArray0[2] = long1;
      Long long2 = Long.valueOf(97L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(97L, (long)long2);
      
      longArray0[3] = long2;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      float[] floatArray0 = new float[2];
      ArrayUtils.reverse(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 156.5F;
      floatArray0[2] = (-3523.7344F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, (-601.1F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 156.5F, (-3523.7344F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-601.1F), 1.0F, 156.5F, (-3523.7344F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte) (-50);
      byteArray0[6] = (byte) (-128);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-34));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-99), (byte)59, (byte) (-85), (byte)53, (byte) (-50), (byte) (-128)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-34), (byte) (-99), (byte)59, (byte) (-85), (byte)53, (byte) (-50), (byte) (-128)}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-106);
      longArray0[1] = (long) (byte)57;
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (byte)57, (int) (byte) (-106));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {(-106L), 57L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)57;
      intArray0[1] = (int) (byte) (-106);
      intArray0[2] = (int) (byte)57;
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {57, (-106), 57}, intArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean("]o6;/Xo");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = Boolean.getBoolean("]o6;/Xo");
      assertFalse(boolean1);
      
      int int0 = Boolean.compare(false, false);
      assertEquals(0, int0);
      
      boolean boolean2 = Boolean.getBoolean((String) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-1));
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      
      Boolean boolean3 = new Boolean(false);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      Boolean boolean4 = new Boolean("]<g26Uw;u~*A");
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      boolean boolean5 = ArrayUtils.isSameLength((double[]) null, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      boolean[] booleanArray2 = new boolean[4];
      booleanArray2[0] = true;
      booleanArray2[1] = false;
      booleanArray2[2] = true;
      booleanArray2[3] = false;
      boolean boolean6 = ArrayUtils.isNotEmpty(booleanArray2);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6);
      assertEquals(4, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray2));
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, 0.0, 1431655765, 0.0);
      assertFalse(int1 == int0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, int1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 7;
      floatArray0[1] = (float) (byte) (-1);
      floatArray0[2] = (float) 1431655765;
      int int2 = ArrayUtils.lastIndexOf(floatArray0, (float) 1431655765, (-2087831323));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {7.0F, (-1.0F), 1.43165581E9F}, floatArray0, 0.01F);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray0, (int) (byte) (-1), (-1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Character character0 = new Character('E');
      assertNotNull(character0);
      assertEquals('E', (char)character0);
      
      boolean boolean0 = Character.isAlphabetic(645);
      assertTrue(boolean0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'Y');
      assertNotNull(charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'E', 'E', 'E'}, charArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, object0, 645);
      assertEquals((-1), int0);
      assertEquals(3, characterArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 645;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) (-2009));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {645L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2786.6057F);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-2786.6057F)}, floatArray0, 0.01F);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray1, byteArray1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      Float[] floatArray1 = new Float[1];
      floatArray1[0] = (Float) (-2786.6057F);
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (float) floatArray1[0]);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertArrayEquals(new float[] {(-2786.6057F)}, floatArray2, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte) (-1), (int) (byte) (-1));
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean2 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1), (-1), (-1)}, intArray1);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1), (-1), (-1)}, intArray0);
      
      boolean boolean3 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean4 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(boolean4);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2786.6057F);
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) (float)floatArray1[0];
      boolean boolean5 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-2786.605712890625)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-2786.605712890625)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      int int0 = Byte.toUnsignedInt((byte)36);
      assertEquals(36, int0);
      
      byte[] byteArray0 = new byte[1];
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)36, (int) (byte)36);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      Double double0 = new Double((-1));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1829L);
      longArray0[1] = 1L;
      long[] longArray1 = ArrayUtils.add(longArray0, 737L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {(-1829L), 1L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1829L), 1L, 0L, 0L, 737L}, longArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 737L;
      floatArray0[1] = (float) 1L;
      floatArray0[2] = (float) 1L;
      floatArray0[3] = (float) 1L;
      floatArray0[4] = (float) 1L;
      floatArray0[5] = (float) (-1829L);
      floatArray0[6] = (float) (-1829L);
      floatArray0[7] = 2429.6392F;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {737.0F, 1.0F, 1.0F, 1.0F, 1.0F, (-1829.0F), (-1829.0F), 2429.6392F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 263.285025;
      long[] longArray0 = new long[6];
      longArray0[0] = 48L;
      longArray0[1] = (-1565L);
      longArray0[2] = 1970L;
      longArray0[3] = 1959L;
      longArray0[4] = (-1068L);
      longArray0[5] = 121L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1365, 1365);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {48L, (-1565L), 1970L, 1959L, (-1068L), 121L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      long[] longArray2 = ArrayUtils.addAll(longArray1, (long[]) null);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {48L, (-1565L), 1970L, 1959L, (-1068L), 121L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)29;
      Byte byte0 = new Byte((byte) (-38));
      assertNotNull(byte0);
      assertEquals((byte) (-38), (byte)byte0);
      
      Byte byte1 = new Byte((byte)29);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)29, (byte)byte1);
      
      Byte byte2 = new Byte((byte) byte0);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte) (-38), (byte)byte2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)29, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)29, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-2187.864F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 2221.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-2187.864F), 1.0F, (-1.0F), 2221.0F}, floatArray0, 0.01F);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'H');
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-2187.864F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) 2221.0F;
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) (-2187.864F);
      doubleArray0[6] = (double) (-2187.864F);
      doubleArray0[7] = (double) (-1.0F);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0), (-2187.864013671875), (-1.0), 2221.0, (-1.0), (-2187.864013671875), (-2187.864013671875), (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-2187.864013671875), (-1.0), 2221.0, (-1.0), (-2187.864013671875), (-2187.864013671875), (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) null, (Object[]) null);
      assertNull(objectArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) null, (-2040), (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      long[] longArray0 = new long[0];
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[7] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, false, false}, booleanArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = 1L;
      longArray0[1] = 4060L;
      longArray0[2] = (-1432L);
      longArray0[3] = (-89L);
      longArray0[4] = 1218L;
      longArray0[5] = 1L;
      int int0 = ArrayUtils.indexOf(longArray0, 1L, (-2135));
      assertEquals(0, int0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {1L, 4060L, (-1432L), (-89L), 1218L, 1L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertNotNull(object4);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals((-1), int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.indexOf(doubleArray0, (-1.0), 3.0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      int int2 = ArrayUtils.lastIndexOf(intArray0, 442, (-1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-733);
      shortArray0[1] = (short) (-733);
      shortArray0[2] = (short) (-733);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-733), (short) (-733), (short) (-733)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-733), (short) (-733), (short) (-733)}, shortArray0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.0, (double) (short) (-733));
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-5.69295527);
      doubleArray0[1] = (-719.03);
      doubleArray0[2] = (-5.69295527);
      doubleArray0[3] = (-5.69295527);
      doubleArray0[4] = (-5.69295527);
      doubleArray0[6] = (-5.69295527);
      doubleArray0[7] = (-5.69295527);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-5.69295527), (-719.03), (-5.69295527), (-5.69295527), (-5.69295527), 0.0, (-5.69295527), (-5.69295527), 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)0;
      Byte[] byteArray1 = new Byte[4];
      byteArray1[0] = (Byte) (byte)0;
      byteArray1[1] = (Byte) (byte)23;
      byteArray1[2] = (Byte) (byte)0;
      byteArray1[3] = (Byte) (byte)25;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(4, byteArray2.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)23, (byte)0, (byte)25}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertTrue(boolean0);
      assertEquals(0, objectArray0.length);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)70, (int) (byte)70);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)70;
      floatArray0[1] = (float) (byte)70;
      floatArray0[2] = 0.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {70.0F, 70.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)70;
      shortArray0[1] = (short) (byte)70;
      shortArray0[2] = (short) (byte)70;
      shortArray0[3] = (short) (byte)70;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)2985, 713);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)70, (short)70, (short)70, (short)70}, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (int) (short)70, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 70, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Byte[] byteArray0 = new Byte[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 7);
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      comparableArray0[0] = (Comparable<Integer>) (-1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 30.172490236163142;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1), (-1.0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {30.172490236163142, (-1.0), 2.147483647E9}, doubleArray0, 0.01);
      
      comparableArray0[1] = (Comparable<Integer>) (-1);
      int int2 = ArrayUtils.lastIndexOf((Object[]) comparableArray0, object0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(7, comparableArray0.length);
      
      comparableArray0[2] = (Comparable<Integer>) (-1);
      Integer integer0 = new Integer((-1685));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals((-1685), (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      boolean boolean0 = Boolean.getBoolean("]o6;/Xo");
      assertFalse(boolean0);
      
      int int0 = Boolean.compare(false, false);
      assertEquals(0, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[1];
      boolean boolean2 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 1;
      longArray1[4] = (long) 1;
      longArray1[6] = (long) 0;
      boolean boolean3 = ArrayUtils.isNotEmpty(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      assertNotSame(longArray1, longArray0);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 1L, 1L, 0L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      int[] intArray0 = new int[9];
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = 'X';
      charArray0[4] = '`';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'`', '`', '`', 'X', '`'}, charArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, integerArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) Integer.MAX_VALUE);
      assertNull(longArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1164);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1164), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1164), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty(shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1164), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1164), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      
      boolean boolean3 = ArrayUtils.contains(shortArray1, (short) (-1164));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1164), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1164), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean("]o6;/Xo");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = Boolean.getBoolean("]o6;/Xo");
      assertFalse(boolean1);
      
      int int0 = Boolean.compare(false, false);
      assertEquals(0, int0);
      
      boolean boolean2 = Boolean.logicalAnd(true, true);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = Boolean.getBoolean((String) null);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = Boolean.logicalOr(true, false);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertTrue(boolean0.equals((Object)boolean3));
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean4));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertTrue(boolean0.equals((Object)boolean3));
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean4));
      assertNotNull(booleanArray2);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      
      boolean boolean5 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-262.28502487891);
      doubleArray0[1] = (-1466.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1466.0), (-712), 1.0);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-262.28502487891), (-1466.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      byte byte0 = (byte)87;
      Byte byte1 = new Byte((byte)87);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)87, (byte)byte1);
      
      Byte[] byteArray0 = new Byte[6];
      Byte byte2 = new Byte((byte)87);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)87, (byte)byte2);
      
      byteArray0[0] = byte2;
      long long0 = Byte.toUnsignedLong((byte) (-1));
      assertEquals(255L, long0);
      
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte)87, (byte)byte3);
      
      byteArray0[3] = byte3;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)87, (byte)87, (byte)87, (byte)87, (byte)87, (byte)87}, byteArray1);
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, (int) byte0, (int) byte0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)87, (byte)87, (byte)87, (byte)87, (byte)87, (byte)87}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) byte0;
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1368));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) shortArray0, (Object[]) shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) booleanArray1, object0);
      assertFalse(boolean0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      Character character0 = Character.valueOf('@');
      assertNotNull(character0);
      assertEquals('@', (char)character0);
      
      Character character1 = new Character('Y');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('Y', (char)character1);
      
      Character character2 = new Character('7');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('7', (char)character2);
      
      Character character3 = Character.valueOf('h');
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('h', (char)character3);
      
      Character character4 = Character.valueOf('7');
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character2));
      assertNotNull(character4);
      assertEquals('7', (char)character4);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(booleanArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'true', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      int int0 = ArrayUtils.indexOf(charArray0, 'V');
      assertEquals(0, int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'V'}, charArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1845L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 'V';
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 'V';
      longArray0[5] = (long) 'V';
      longArray0[6] = (long) 0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {1845L, 0L, 86L, 0L, 86L, 86L, 0L}, longArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1845L;
      floatArray0[1] = (float) 'V';
      floatArray0[2] = (float) 86L;
      floatArray0[3] = (float) 'V';
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0;
      floatArray0[6] = 1731.72F;
      floatArray0[7] = (float) 0L;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {1845.0F, 86.0F, 86.0F, 86.0F, 0.0F, 0.0F, 1731.72F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[1] = 'c';
      charArray0[2] = '3';
      charArray0[3] = 'M';
      charArray0[4] = 'P';
      charArray0[5] = '{';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'7', 'c', '3', 'M', 'P', '{'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-5.69295527);
      doubleArray0[1] = (-719.03);
      doubleArray0[2] = (-5.69295527);
      doubleArray0[3] = (-5.69295527);
      doubleArray0[4] = (-5.69295527);
      doubleArray0[5] = (-46.071207142);
      doubleArray0[6] = (-5.69295527);
      doubleArray0[7] = (-5.69295527);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-5.69295527), (-719.03), (-5.69295527), (-5.69295527), (-5.69295527), (-46.071207142), (-5.69295527), (-5.69295527)}, doubleArray0, 0.01);
      
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-36.619453F);
      floatArray0[1] = (-3188.073F);
      floatArray0[2] = 0.0F;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-36.619453F), (-3188.073F), 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[6];
      intArray0[0] = Integer.MAX_VALUE;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {(-5.69295527), (-719.03), (-5.69295527), (-5.69295527), (-5.69295527), (-46.071207142), (-5.69295527), (-5.69295527)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-5.69295527), (-719.03), (-5.69295527), (-5.69295527), (-5.69295527), (-46.071207142), (-5.69295527), (-5.69295527)}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      int int0 = Byte.toUnsignedInt((byte)36);
      assertEquals(36, int0);
      
      Byte byte0 = new Byte((byte) (-53));
      assertNotNull(byte0);
      assertEquals((byte) (-53), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-96));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-96), (byte)byte1);
      
      Byte byte2 = new Byte((byte)11);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)11, (byte)byte2);
      
      Byte byte3 = new Byte((byte) (-96));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      assertEquals((byte) (-96), (byte)byte3);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte) (-96);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-53), (byte) (-96), (byte)36, (byte) (-53), (byte) (-96)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte) (-96), (byte)36, (byte) (-53), (byte) (-96), (byte) (-53), (byte) (-96), (byte)36, (byte) (-53), (byte) (-96)}, byteArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-96);
      doubleArray0[1] = (double) (byte) (-96);
      doubleArray0[2] = (double) (byte) (-53);
      doubleArray0[3] = (double) (byte) (-53);
      doubleArray0[4] = (double) (byte)36;
      doubleArray0[5] = (double) (byte) (-96);
      doubleArray0[6] = (double) (byte)36;
      doubleArray0[7] = (double) (byte) (-96);
      doubleArray0[8] = (double) 36;
      int int1 = ArrayUtils.indexOf(doubleArray0, (-1.0), (int) (byte) (-96), 0.0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-96.0), (-96.0), (-53.0), (-53.0), 36.0, (-96.0), 36.0, (-96.0), 36.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 2262L;
      longArray0[1] = 2147483647L;
      longArray0[2] = 321L;
      longArray0[3] = 321L;
      longArray0[4] = (-2635L);
      longArray0[5] = 321L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {2262L, 2147483647L, 321L, 321L, (-2635L), 321L}, longArray0);
      
      int[] intArray0 = new int[6];
      intArray0[1] = 64;
      intArray0[2] = 2146196743;
      intArray0[3] = 268;
      intArray0[4] = (-1885);
      intArray0[5] = 5;
      int[] intArray1 = ArrayUtils.add(intArray0, (-1529));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {0, 64, 2146196743, 268, (-1885), 5}, intArray0);
      assertArrayEquals(new int[] {0, 64, 2146196743, 268, (-1885), 5, (-1529)}, intArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '2262', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-39);
      shortArray0[1] = (short)1163;
      shortArray0[2] = (short) (-34);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2211), (-1691));
      assertEquals((-1), int0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-39), (short)1163, (short) (-34)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) 0);
      assertNull(longArray0);
      
      long[] longArray1 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals((-1), int0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-950);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertArrayEquals(new int[] {(-950)}, intArray0);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) Integer.MAX_VALUE);
      assertNull(longArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1164);
      shortArray0[1] = (short) (-1164);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1164), (short) (-1164)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1164), (short) (-1164)}, shortArray1);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {(-950)}, intArray0);
      assertArrayEquals(new int[] {(-950)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 156.5F;
      floatArray0[2] = (-3523.7344F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, (-601.1F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 156.5F, (-3523.7344F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-601.1F), 1.0F, 156.5F, (-3523.7344F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte) (-128);
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      char char0 = 'a';
      char char1 = 'v';
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = 'a';
      charArray0[2] = 'o';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (int) 'a', 'v');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 97, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-601.1F);
      floatArray0[1] = (-2165.1F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-1750.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F);
      assertEquals((-1), int0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-601.1F), (-2165.1F), 1.0F, (-1750.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, (short[]) null);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, Integer.MAX_VALUE, 70);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 326.24997F;
      floatArray0[1] = (-1.0F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 575, 6111);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {326.24997F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2189.4F;
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Float float0 = new Float((double) 2189.4F);
      assertNotNull(float0);
      assertEquals(2189.4F, (float)float0, 0.01F);
      
      float float1 = Float.min(264.0F, (-1.0F));
      assertEquals((-1.0F), float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[0];
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Byte byte0 = new Byte((byte) (-96));
      assertNotNull(byte0);
      assertEquals((byte) (-96), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-96));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-96), (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-96));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte) (-96), (byte)byte2);
      
      Byte byte3 = new Byte((byte) (-96));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      assertEquals((byte) (-96), (byte)byte3);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-96);
      shortArray0[1] = (short) (byte) (-96);
      shortArray0[2] = (short)7;
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (byte) (-96));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      short[] shortArray1 = ArrayUtils.addAll((short[]) null, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-96), (short) (-96), (short)7}, shortArray0);
      assertArrayEquals(new short[] {(short) (-96), (short) (-96), (short)7}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, (int) (byte)25);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-3169);
      intArray0[6] = (-1873);
      intArray0[7] = 0;
      intArray0[8] = (-1);
      ArrayUtils.reverse(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0, (-1873), (-3169), (-1), (-1), 0, 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, (long) (-1));
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'B';
      charArray0[1] = '%';
      charArray0[2] = 't';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '}', (-3169));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'B', '%', 't'}, charArray0);
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(3, charArray1.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'B', '%', 't'}, charArray1);
      assertArrayEquals(new char[] {'B', '%', 't'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0}, intArray0);
      
      byte[] byteArray0 = new byte[2];
      intArray0[1] = (int) (byte)1;
      byteArray0[1] = (byte) (-6);
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-6)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = (-1524);
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) null, (-1524), (Object) "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1524, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      int[] intArray0 = new int[4];
      ArrayUtils.isSameLength((float[]) null, (float[]) null);
      ArrayUtils.isEmpty(intArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (-4233.609281737091);
      doubleArray0[0] = (-4233.609281737091);
      doubleArray0[6] = (-4233.609281737091);
      ArrayUtils.reverse(doubleArray0);
      ArrayUtils.reverse((short[]) null);
      String[] stringArray0 = new String[1];
      ArrayUtils.addAll(stringArray0, stringArray0);
      ArrayUtils.subarray((int[]) null, 7, 7);
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 1208L;
      longArray0[1] = 1214L;
      Byte byte0 = new Byte((byte) (-82));
      ArrayUtils.toPrimitive((Byte[]) null, (byte) (-82));
      Character character0 = new Character('e');
      Character character1 = new Character('e');
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'U';
      intArray0[1] = (int) 'e';
      intArray0[2] = (-2126221432);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(3, intArray1.length);
      
      ArrayUtils.reverse((Object[]) characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.add(stringArray0, "");
      ArrayUtils.add((Object[]) stringArray0, 0, (Object) "");
      ArrayUtils.nullToEmpty(stringArray1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "";
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-2049), (-2049));
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.remove(charArray0, 0);
      ArrayUtils.nullToEmpty(charArray1);
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)1518);
      shortArray0[0] = short0;
      Short.toUnsignedLong((short)1518);
      ArrayUtils.add((byte[]) null, (byte)12);
      ArrayUtils.nullToEmpty((Boolean[]) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)shortArray0[0];
      ArrayUtils.subarray((float[]) null, Integer.MAX_VALUE, (-1));
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      ArrayUtils.toPrimitive((Short[]) null, (short)1421);
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      Double double0 = new Double(4571.1359727);
      Double double1 = new Double(4571.1359727);
      ArrayUtils.toPrimitive((Double[]) null, 860.0);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("`L&(d?<r", "`L&(d?<r");
      Float float0 = new Float((double) (-2963));
      Float float1 = new Float(4571.1359727);
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float0;
      floatArray0[1] = float1;
      floatArray0[2] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[1]);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2963.0F), 4571.1357F, 4571.1357F}, floatArray1, 0.01F);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-114));
      assertEquals((-1), int0);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {(-2963.0F), 4571.1357F, 4571.1357F}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)0;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-1), (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = '`';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.add(stringArray0, "");
      Object[] objectArray0 = ArrayUtils.add((Object[]) stringArray1, 0, (Object) "");
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) "";
      objectArray1[1] = (Object) "";
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, objectArray1);
      Object[] objectArray2 = new Object[6];
      objectArray2[0] = (Object) "";
      objectArray2[1] = (Object) "";
      objectArray2[2] = (Object) "";
      objectArray2[3] = (Object) "";
      objectArray2[4] = (Object) "";
      objectArray2[5] = (Object) "";
      boolean boolean1 = ArrayUtils.isSameLength(objectArray2, objectArray0);
      assertEquals(2, objectArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) null, (Object[]) null);
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Object object0 = new Object();
      double[] doubleArray0 = new double[2];
      ArrayUtils.nullToEmpty(doubleArray0);
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      char char0 = 's';
      Integer integer0 = new Integer(100);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      Integer integer2 = new Integer((-1530));
      Integer integer3 = new Integer(100);
      Integer integer4 = new Integer(100);
      Integer integer5 = new Integer(2025);
      Integer integer6 = new Integer((-1530));
      Character character0 = Character.valueOf('s');
      Character character1 = new Character('X');
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character1;
      characterArray0[4] = character1;
      characterArray0[5] = character0;
      characterArray0[6] = character1;
      characterArray0[7] = character0;
      ArrayUtils.toPrimitive(characterArray0);
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) char0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.toObject(shortArray0);
      ArrayUtils.isSameLength(shortArray0, (short[]) null);
      Float float0 = new Float((-1350.42852935881));
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)70, (int) (byte)70);
      assertEquals((-1), int0);
      
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float(1983.0F);
      floatArray0[0] = float0;
      Float float1 = new Float(0.0F);
      floatArray0[1] = float1;
      Float float2 = new Float((-1169.9498F));
      floatArray0[2] = float2;
      Float float3 = new Float((double) floatArray0[0]);
      floatArray0[3] = float3;
      Float float4 = new Float((double) (byte)70);
      floatArray0[4] = float4;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1169.9498F));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1983.0F, 0.0F, (-1169.9498F), 1983.0F, 70.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Double double0 = new Double(1466.54337236196);
      Double.isFinite(1466.54337236196);
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = 'p';
      ArrayUtils.indexOf(charArray0, 'o');
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.remove(charArray0, 0);
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      ArrayUtils.subarray((Object[]) null, 0, 0);
      Short short0 = new Short((short) (-1));
      Short short1 = new Short((short) (-1));
      ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      Short short2 = new Short((short)971);
      Character character0 = Character.valueOf('G');
      Character[] characterArray0 = new Character[3];
      Character.isSurrogate('G');
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      ArrayUtils.clone((short[]) null);
      boolean boolean1 = ArrayUtils.isSameLength(charArray1, charArray0);
      assertEquals(0, charArray1.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-49);
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertFalse(boolean2 == boolean1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, (boolean[]) null);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[6];
      boolean boolean0 = true;
      Boolean boolean1 = new Boolean(true);
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf(true);
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf("");
      Boolean.logicalOr(true, boolean0);
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      booleanArray0[3] = boolean4;
      Boolean boolean5 = new Boolean("");
      Boolean.getBoolean((String) null);
      booleanArray0[4] = boolean5;
      Boolean boolean6 = new Boolean("");
      booleanArray0[5] = boolean6;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 4154.86;
      doubleArray0[2] = 1223.631;
      doubleArray0[3] = (-4277.169);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, (boolean) boolean3);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1829L);
      longArray0[1] = (-1829L);
      longArray0[2] = 742L;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1829L);
      doubleArray0[1] = (double) (-1829L);
      doubleArray0[2] = (double) 742L;
      doubleArray0[3] = (double) (-1829L);
      ArrayUtils.contains(doubleArray0, (-1829.0));
      ArrayUtils.toObject((float[]) null);
      String[] stringArray0 = ArrayUtils.clone((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)105;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (byte) (-1));
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray1);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Integer integer0 = new Integer(100);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      Integer integer2 = new Integer((-1530));
      Integer integer3 = new Integer(100);
      Integer integer4 = new Integer(100);
      Integer integer5 = new Integer(2025);
      Integer integer6 = new Integer((-1530));
      Character character0 = Character.valueOf('s');
      Character character1 = new Character('X');
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      boolean boolean0 = ArrayUtils.isNotEmpty((Object[]) characterArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (-3124));
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 50;
      ArrayUtils.isNotEmpty(intArray0);
      ArrayUtils.isSameLength((float[]) null, (float[]) null);
      ArrayUtils.reverse((float[]) null);
  }
}

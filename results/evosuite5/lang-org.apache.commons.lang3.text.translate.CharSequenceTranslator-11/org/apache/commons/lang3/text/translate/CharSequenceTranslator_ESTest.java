/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 15:54:13 GMT 2019
 */

package org.apache.commons.lang3.text.translate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang3.text.translate.AggregateTranslator;
import org.apache.commons.lang3.text.translate.CharSequenceTranslator;
import org.apache.commons.lang3.text.translate.NumericEntityEscaper;
import org.apache.commons.lang3.text.translate.NumericEntityUnescaper;
import org.apache.commons.lang3.text.translate.UnicodeEscaper;
import org.apache.commons.lang3.text.translate.UnicodeUnescaper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class CharSequenceTranslator_ESTest extends CharSequenceTranslator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NumericEntityEscaper numericEntityEscaper0 = NumericEntityEscaper.below(0);
      StringWriter stringWriter0 = new StringWriter(777);
      StringWriter stringWriter1 = stringWriter0.append(';');
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.above((-918));
      unicodeEscaper0.translate((CharSequence) stringBuffer0, (Writer) stringWriter1);
      CharSequenceTranslator[] charSequenceTranslatorArray0 = new CharSequenceTranslator[3];
      charSequenceTranslatorArray0[0] = (CharSequenceTranslator) numericEntityEscaper0;
      charSequenceTranslatorArray0[1] = (CharSequenceTranslator) unicodeEscaper0;
      AggregateTranslator aggregateTranslator0 = new AggregateTranslator(charSequenceTranslatorArray0);
      String string0 = aggregateTranslator0.translate((CharSequence) stringBuffer0);
      assertEquals(7, stringBuffer0.length());
      assertEquals("\\u003B\\u005C\\u0075\\u0030\\u0030\\u0033\\u0042", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NumericEntityEscaper numericEntityEscaper0 = NumericEntityEscaper.below(0);
      StringWriter stringWriter0 = new StringWriter(777);
      stringWriter0.append(';');
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      String string0 = numericEntityEscaper0.translate((CharSequence) stringBuffer0);
      assertEquals(";", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
      StringWriter stringWriter0 = new StringWriter();
      numericEntityUnescaper0.translate((CharSequence) null, (Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UnicodeUnescaper.OPTION[] unicodeUnescaper_OPTIONArray0 = new UnicodeUnescaper.OPTION[6];
      UnicodeUnescaper.OPTION unicodeUnescaper_OPTION0 = UnicodeUnescaper.OPTION.escapePlus;
      unicodeUnescaper_OPTIONArray0[0] = unicodeUnescaper_OPTION0;
      unicodeUnescaper_OPTIONArray0[1] = unicodeUnescaper_OPTIONArray0[0];
      unicodeUnescaper_OPTIONArray0[2] = unicodeUnescaper_OPTIONArray0[0];
      unicodeUnescaper_OPTIONArray0[3] = unicodeUnescaper_OPTIONArray0[0];
      unicodeUnescaper_OPTIONArray0[4] = unicodeUnescaper_OPTIONArray0[2];
      unicodeUnescaper_OPTIONArray0[5] = unicodeUnescaper_OPTIONArray0[4];
      UnicodeUnescaper unicodeUnescaper0 = new UnicodeUnescaper(unicodeUnescaper_OPTIONArray0);
      // Undeclared exception!
      try { 
        unicodeUnescaper0.translate((CharSequence) null, (Writer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
         verifyException("org.apache.commons.lang3.text.translate.CharSequenceTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.outsideOf(739, 43);
      String string0 = unicodeEscaper0.translate((CharSequence) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NumericEntityEscaper numericEntityEscaper0 = NumericEntityEscaper.between((-1205), (-1205));
      CharSequenceTranslator[] charSequenceTranslatorArray0 = new CharSequenceTranslator[8];
      CharSequenceTranslator charSequenceTranslator0 = numericEntityEscaper0.with(charSequenceTranslatorArray0);
      assertNotNull(charSequenceTranslator0);
  }
}

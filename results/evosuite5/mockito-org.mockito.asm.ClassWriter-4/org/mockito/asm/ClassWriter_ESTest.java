/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 21:37:18 GMT 2019
 */

package org.mockito.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.asm.Attribute;
import org.mockito.asm.ClassReader;
import org.mockito.asm.ClassWriter;
import org.mockito.asm.Item;
import org.mockito.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(13);
      classWriter0.index = 1184;
      classWriter0.visitInnerClass("zADm&EKY\"z2\"EJj)A", "zADm&EKY\"z2\"EJj)A", "zADm&EKY\"z2\"EJj)A", 13);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(26);
      String string0 = classWriter0.getCommonSuperClass("org.mockito.asm.Attribute", "java/lang/Object");
      assertEquals("java/lang/Object", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(13);
      String string0 = classWriter0.getCommonSuperClass("org.mockito.asm.ClassReader", "org.mockito.asm.ClassReader");
      assertEquals("org.mockito.asm.ClassReader", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(13);
      String string0 = classWriter0.getCommonSuperClass("org.mockito.asm.Attribute", "org.mockito.asm.ClassReader");
      assertEquals("java/lang/Object", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(13);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((-371), 202);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(13);
      Item[] itemArray0 = new Item[1];
      classWriter0.typeTable = itemArray0;
      int int0 = classWriter0.addUninitializedType("zADm&EKY\"z2\"EJj)A", (byte)14);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(13);
      int int0 = classWriter0.addUninitializedType("", 13);
      assertEquals(1, int0);
      
      int int1 = classWriter0.addType("org.mockito.asm.ClassReader");
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1924));
      int int0 = classWriter0.addUninitializedType("", (-1924));
      int int1 = classWriter0.addUninitializedType("", (-1924));
      assertTrue(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      int int0 = classWriter0.addType("");
      assertEquals(1, int0);
      
      int int1 = classWriter0.addType("");
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-359));
      classWriter0.newFieldItem("h}%{N]cokZ", "h}%{N]cokZ", "h}%{N]cokZ");
      int int0 = classWriter0.newNameType("h}%{N]cokZ", "h}%{N]cokZ");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65535);
      Item item0 = classWriter0.newDouble(65535);
      Item item1 = classWriter0.newDouble(65535);
      assertSame(item1, item0);
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2770));
      Long long0 = new Long(1);
      classWriter0.newConst(long0);
      Item item0 = classWriter0.newLong(1);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Item item0 = classWriter0.newFloat(2150.7F);
      Item item1 = classWriter0.newFloat(2150.7F);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newMethod("*c/k]fPA@Kh7K39xV0", "*c/k]fPA@Kh7K39xV0", "*c/k]fPA@Kh7K39xV0", true);
      Item item0 = classWriter0.newMethodItem("*c/k]fPA@Kh7K39xV0", "*c/k]fPA@Kh7K39xV0", "*c/k]fPA@Kh7K39xV0", true);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Item item0 = classWriter0.newMethodItem("", "K\"VWV90,", "x(J*kskW1", false);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-359));
      Item item0 = classWriter0.newFieldItem("-Y)<t`,6cyn+S", "-Y)<t`,6cyn+S", "-Y)<t`,6cyn+S");
      Item item1 = classWriter0.newFieldItem("-Y)<t`,6cyn+S", "-Y)<t`,6cyn+S", "-Y)<t`,6cyn+S");
      assertNotNull(item1);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2162));
      Class<Float> class0 = Float.class;
      Type type0 = Type.getType(class0);
      int int0 = classWriter0.newConst(type0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-620));
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        classWriter0.newConst(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@50d4d62c
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(298);
      Type type0 = Type.DOUBLE_TYPE;
      int int0 = classWriter0.newConst(type0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      Double double0 = new Double(1);
      int int0 = classWriter0.newConst(double0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(15);
      Float float0 = new Float(0.0F);
      int int0 = classWriter0.newConst(float0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-359));
      Boolean boolean0 = Boolean.valueOf(true);
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2046);
      Boolean boolean0 = Boolean.FALSE;
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-609));
      Short short0 = new Short((short)1527);
      Item item0 = classWriter0.newConstItem(short0);
      Item item1 = classWriter0.newConstItem(short0);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3);
      Character character0 = new Character(',');
      int int0 = classWriter0.newConst(character0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-11));
      Byte byte0 = new Byte((byte) (-124));
      Item item0 = classWriter0.newConstItem(byte0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      int int0 = classWriter0.newConst(classWriter0.COMPUTE_MAXS);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2417);
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(13);
      classWriter0.visitInnerClass("zADm&EKY\"z2\"EJj)A", "%VLT%#EM|rR#OzdwT", "zADm&EKY\"z2\"EJj)A", 13);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(101, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3194));
      String[] stringArray0 = new String[0];
      classWriter0.visit((-3194), (-3194), ":(_ZvZ@ume$i27", "#EzUkgPis|E<Km", "", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(107, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-626));
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, (-626));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(13);
      classWriter0.visitInnerClass("zADm&EKY\"z2\"EJj)A", "%VLT%#EM|rR#OzdwT", "zADm&EKY\"z2\"EJj)A", 13);
      classWriter0.visitInnerClass("%VLT%#EM|rR#OzdwT", "zADm&EKY\"z2\"EJj)A", "zADm&EKY\"z2\"EJj)A", 13);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-8));
      classWriter0.visitAnnotation("", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(67, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitAnnotation("\"`uNL~:", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(76, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-624));
      classWriter0.visitOuterClass("u1*MplXe", "-Y)<t`,6cyn+S", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-359));
      classWriter0.visitOuterClass("^", (String) null, (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4603);
      classWriter0.visitSource("qSOF[+|", "qSOF[+|");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(91, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1599);
      classWriter0.visitSource((String) null, (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-8));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.mockito.asm.ClassReader";
      stringArray0[1] = "org.mockito.asm.ClassReader";
      stringArray0[2] = "org.mockito.asm.ClassReader";
      stringArray0[3] = "org.mockito.asm.ClassReader";
      classWriter0.visit(46, (-300), "org.mockito.asm.ClassReader", "org.mockito.asm.ClassReader", "org.mockito.asm.ClassReader", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(122, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      classWriter0.visit(1009, 18, "Deprecated", "Deprecated", (String) null, (String[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2148));
      String[] stringArray0 = new String[0];
      classWriter0.visit((-2148), (-2148), "char", (String) null, ".class", stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-402));
      classWriter0.visitField((-402), ".WQka|-T`", "jt", "jt", "jt");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(133, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(13);
      classWriter0.newConst("org.mockito.asm.ClassReader");
      int int0 = classWriter0.newConst("org.mockito.asm.ClassReader");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(285212700);
      String[] stringArray0 = new String[0];
      classWriter0.visitMethod((-1), "6ojZuS+7}Pq=^M]D#", "XWPG:_$7s", "7O0#C", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(129, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(40);
      Attribute attribute0 = new Attribute("Signature");
      classWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-646));
      int int0 = classWriter0.newField("}v6_m1HMD{`8pIU", "}v6_m1HMD{`8pIU", "McoqRs7P");
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-509));
      classWriter0.visitOuterClass("c)", "c)", "c)");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(65, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassWriter classWriter0 = null;
      try {
        classWriter0 = new ClassWriter((ClassReader) null, (-359));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(23);
      classWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }
}

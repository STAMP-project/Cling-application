/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 22:04:26 GMT 2019
 */

package org.mockito.cglib.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.asm.ClassWriter;
import org.mockito.asm.Type;
import org.mockito.cglib.core.ClassEmitter;
import org.mockito.cglib.core.CodeEmitter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ClassEmitter_ESTest extends ClassEmitter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(69);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.SHORT_TYPE;
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo(3, "v3fw/2`\"lX", type0, (Object) null);
      // Undeclared exception!
      try { 
        classEmitter0.declare_field((-1387), "hSU[4W8", type0, classEmitter_FieldInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.cglib.core.ClassEmitter$FieldInfo@715a3aa8
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(93);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.SHORT_TYPE;
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo(1, "Vh-Zi,WUF0yhB>", type0, type0);
      // Undeclared exception!
      try { 
        classEmitter0.declare_field(6, "Vh-Zi,WUF0yhB>", type0, classEmitter_FieldInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.cglib.core.ClassEmitter$FieldInfo@7e87e2eb
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(45);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.BOOLEAN_TYPE;
      classEmitter0.declare_field(1, "Yt0*>", type0, "Yt0*>");
      // Undeclared exception!
      try { 
        classEmitter0.declare_field(1, "Yt0*>", type0, classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field \"Yt0*>\" has been declared differently
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(48);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.SHORT_TYPE;
      classEmitter0.declare_field(1, "?*f", type0, (Object) null);
      classEmitter0.declare_field(1, "?*f", type0, (Object) null);
      assertEquals(3, Type.BYTE);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(63);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.CHAR_TYPE;
      classEmitter0.declare_field(1, "_,3|jj-jr;(", type0, (Object) null);
      // Undeclared exception!
      try { 
        classEmitter0.declare_field(1, "_,3|jj-jr;(", type0, "_,3|jj-jr;(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field \"_,3|jj-jr;(\" has been declared differently
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-833));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.SHORT_TYPE;
      classEmitter0.declare_field(1, "IH0#>", type0, "IH0#>");
      Type type1 = Type.getReturnType("IH0#>");
      // Undeclared exception!
      try { 
        classEmitter0.declare_field(1, "IH0#>", type1, "IH0#>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field \"IH0#>\" has been declared differently
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo((-1445), "|'KJNY/}5W+~^", (Type) null, "|'KJNY/}5W+~^");
      ClassEmitter.FieldInfo classEmitter_FieldInfo1 = new ClassEmitter.FieldInfo((-1445), (String) null, (Type) null, classEmitter_FieldInfo0);
      boolean boolean0 = classEmitter_FieldInfo0.equals(classEmitter_FieldInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(45);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.SHORT_TYPE;
      classEmitter0.declare_field(2, "u*f", type0, "u*f");
      // Undeclared exception!
      try { 
        classEmitter0.declare_field(1, "u*f", type0, "u*f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field \"u*f\" has been declared differently
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Type type0 = Type.BYTE_TYPE;
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo((-744), "Boolean", type0, "Boolean");
      boolean boolean0 = classEmitter_FieldInfo0.equals("Boolean");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo(100, ")", (Type) null, (Object) null);
      boolean boolean0 = classEmitter_FieldInfo0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassEmitter classEmitter1 = new ClassEmitter(classEmitter0);
      // Undeclared exception!
      try { 
        classEmitter1.getFieldInfo("QcZESL5u2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(59);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.FLOAT_TYPE;
      classEmitter0.declare_field(1, "f[7k4L0cr^B6_u4pRC;", type0, "f[7k4L0cr^B6_u4pRC;");
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = classEmitter0.getFieldInfo("f[7k4L0cr^B6_u4pRC;");
      assertNotNull(classEmitter_FieldInfo0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(47);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.SHORT_TYPE;
      classEmitter0.declare_field(4, "L", type0, type0);
      boolean boolean0 = classEmitter0.isFieldDeclared("L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassEmitter classEmitter1 = new ClassEmitter(classEmitter0);
      boolean boolean0 = classEmitter1.isFieldDeclared("33X\"D kvf;#\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(48);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.SHORT_TYPE;
      classEmitter0.declare_field(1, "", type0, "");
      classEmitter0.declare_field(1, "", type0, "");
      assertEquals(0, Type.VOID);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2364));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit(1, (-2364), "float floatValue()", "float floatValue()", "float floatValue()", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      assertEquals(108, CodeEmitter.DIV);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      // Undeclared exception!
      try { 
        classEmitter0.begin_static();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // classInfo is null! org.mockito.cglib.core.ClassEmitter@1
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      // Undeclared exception!
      try { 
        classEmitter0.end_class();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(53);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(2, 2, "t`$R8dcR;$x", "t`$R8dcR;$x", "t`$R8dcR;$x", stringArray0);
      classEmitter0.begin_static();
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      assertEquals(128, CodeEmitter.OR);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2364));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[8];
      classEmitter0.visit(2, (-2364), "float flotValue()", "float flotValue()", "float flotValue()", stringArray0);
      // Undeclared exception!
      try { 
        classEmitter0.getStaticHook();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // static hook is invalid for this class
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2393));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.begin_class(2746, (-2393), "^", (Type) null, (Type[]) null, "^");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        classEmitter0.visitField((-11), "{#", "{#", "{#", object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.mockito.asm.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      // Undeclared exception!
      try { 
        classEmitter0.getSuperType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(47);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      ClassEmitter classEmitter1 = new ClassEmitter(classEmitter0);
      String[] stringArray0 = new String[0];
      classEmitter1.visit(2, 2, "t`$R8dcR;$x", "t`$R8dcR;$x", "t`$R8dcR;$x", stringArray0);
      classEmitter1.begin_static();
      classEmitter1.end_class();
      assertNotSame(classEmitter1, classEmitter0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(19);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[0];
      classEmitter0.visit(19, 1, "t$Rl1ZZ8cR<\"$", "t$Rl1ZZ8cR<\"$", "t$Rl1ZZ8cR<\"$", stringArray0);
      classEmitter0.getStaticHook();
      classEmitter0.end_class();
  }
}

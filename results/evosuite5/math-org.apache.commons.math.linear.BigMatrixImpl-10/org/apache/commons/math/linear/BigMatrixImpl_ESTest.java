/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 23:38:25 GMT 2019
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math.linear.BigMatrix;
import org.apache.commons.math.linear.BigMatrixImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class BigMatrixImpl_ESTest extends BigMatrixImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(613, 1);
      assertEquals(613, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getEntry(1, (-489));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix entry does not exist
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(1);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertNotNull(bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      
      BigDecimal bigDecimal0 = bigMatrixImpl1.getDeterminant();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl2 = (BigMatrixImpl)bigMatrixImpl1.getLUMatrix();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(1, bigMatrixImpl2.getRowDimension());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertTrue(bigMatrixImpl2.isSquare());
      assertEquals(1, bigMatrixImpl2.getColumnDimension());
      assertTrue(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertNotNull(bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(16);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(16, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(16, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertNotNull(bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      
      bigMatrixImpl1.hashCode();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(16, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(16, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1, 1);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(1);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      
      boolean boolean0 = bigMatrixImpl1.equals(bigMatrixImpl0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1, 1);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(1);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl2 = (BigMatrixImpl)bigMatrixImpl1.getLUMatrix();
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertEquals(1, bigMatrixImpl2.getColumnDimension());
      assertTrue(bigMatrixImpl2.isSquare());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertEquals(1, bigMatrixImpl2.getRowDimension());
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertTrue(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      
      boolean boolean0 = bigMatrixImpl1.equals(bigMatrixImpl2);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertEquals(1, bigMatrixImpl2.getColumnDimension());
      assertTrue(bigMatrixImpl2.isSquare());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertEquals(1, bigMatrixImpl2.getRowDimension());
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertTrue(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl0));
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(615, 615);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(615, bigMatrixImpl0.getRowDimension());
      assertEquals(615, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(2826, 1718);
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1718, bigMatrixImpl1.getColumnDimension());
      assertFalse(bigMatrixImpl1.isSquare());
      assertEquals(2826, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      boolean boolean0 = bigMatrixImpl1.equals(bigMatrixImpl0);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(615, bigMatrixImpl0.getRowDimension());
      assertEquals(615, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1718, bigMatrixImpl1.getColumnDimension());
      assertFalse(bigMatrixImpl1.isSquare());
      assertEquals(2826, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      boolean boolean0 = bigMatrixImpl0.equals(bigDecimal0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(2836, 2836);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(2836, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(2836, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      bigMatrixImpl0.toString();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[3];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(3, bigMatrixImpl0.getRowDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(3, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      String string0 = bigMatrixImpl0.toString();
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(3, bigMatrixImpl0.getRowDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(3, bigDecimalArray0.length);
      assertNotNull(string0);
      assertEquals("BigMatrixImpl{{null},{null},{null}}", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      String string0 = bigMatrixImpl0.toString();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(string0);
      assertEquals("BigMatrixImpl{}", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[4][7];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[4];
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      bigDecimalArray1[1] = bigDecimal1;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[4];
      assertFalse(bigDecimalArray2.equals((Object)bigDecimalArray1));
      
      bigDecimalArray2[0] = bigDecimalArray1[1];
      bigDecimalArray0[1] = bigDecimalArray2;
      bigDecimalArray0[2] = bigDecimalArray2;
      bigDecimalArray0[3] = bigDecimalArray2;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.luDecompose();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[10][4];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(4, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(10, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(10, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getLUMatrix();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // LU decomposition requires that the matrix be square.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.solve(bigDecimalArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Matrix is singular.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[7];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(7, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(7, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.solve(bigDecimalArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // coefficient matrix is not square
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1723, 282);
      assertEquals(1723, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(282, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(2826, 282);
      assertEquals(2826, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(282, bigMatrixImpl1.getColumnDimension());
      assertFalse(bigMatrixImpl1.isSquare());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      try { 
        bigMatrixImpl1.solve((BigMatrix) bigMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incorrect row dimension
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1607, 1607);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1607, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1607, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      double[] doubleArray0 = new double[6];
      try { 
        bigMatrixImpl0.solve(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // constant vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(1);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertNotNull(bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal[] bigDecimalArray1 = bigMatrixImpl1.solve(bigDecimalArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, bigDecimalArray0.length);
      assertEquals(1, bigDecimalArray1.length);
      assertFalse(bigDecimalArray1.equals((Object)bigDecimalArray0));
      assertNotNull(bigDecimalArray1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigDecimalArray0, bigDecimalArray1);
      assertNotSame(bigDecimalArray1, bigDecimalArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(1);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertNotNull(bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal[] bigDecimalArray1 = bigMatrixImpl1.preMultiply(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(1, bigDecimalArray0.length);
      assertEquals(1, bigDecimalArray1.length);
      assertFalse(bigDecimalArray1.equals((Object)bigDecimalArray0));
      assertNotNull(bigDecimalArray1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigDecimalArray0, bigDecimalArray1);
      assertNotSame(bigDecimalArray1, bigDecimalArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1108, 1108);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1108, bigMatrixImpl0.getColumnDimension());
      assertEquals(1108, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray0 = new BigDecimal[0];
      try { 
        bigMatrixImpl0.preMultiply(bigDecimalArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(1);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertNotNull(bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal[] bigDecimalArray1 = bigMatrixImpl1.operate(bigDecimalArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(1, bigDecimalArray0.length);
      assertEquals(1, bigDecimalArray1.length);
      assertFalse(bigDecimalArray1.equals((Object)bigDecimalArray0));
      assertNotNull(bigDecimalArray1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigDecimalArray0, bigDecimalArray1);
      assertNotSame(bigDecimalArray1, bigDecimalArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1173, 1173);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1173, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1173, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      double[] doubleArray0 = new double[1];
      try { 
        bigMatrixImpl0.operate(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(2015, 1);
      assertEquals(2015, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getTrace();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix is not square
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(31);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(31, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(31, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertNotNull(bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      
      BigDecimal bigDecimal0 = bigMatrixImpl1.getTrace();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(31, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(31, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals((byte)31, bigDecimal0.byteValue());
      assertEquals((short)31, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(6);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(6, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(6, bigMatrixImpl1.getRowDimension());
      assertNotNull(bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl2 = (BigMatrixImpl)bigMatrixImpl1.inverse();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(6, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(6, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl2.isSquare());
      assertEquals(6, bigMatrixImpl2.getColumnDimension());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertEquals(6, bigMatrixImpl2.getRowDimension());
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertNotNull(bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      
      BigDecimal bigDecimal0 = bigMatrixImpl1.getDeterminant();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(6, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(6, bigMatrixImpl1.getRowDimension());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertNotNull(bigDecimal0);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal bigDecimal1 = bigMatrixImpl0.getDeterminant();
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[6];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(6, bigMatrixImpl0.getRowDimension());
      assertEquals(6, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getDeterminant();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix is not square
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(3, 3);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(3, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(3, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getEntry((-4258), (-4258));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix entry does not exist
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(7, 7);
      assertEquals(7, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(7, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getColumnAsDoubleArray(7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(15);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(15, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(15, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertNotNull(bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      
      double[] doubleArray0 = bigMatrixImpl1.getColumnAsDoubleArray(0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(15, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(15, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(15, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(8, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(8, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getColumn(2186);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(615, 615);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(615, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(615, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray0 = bigMatrixImpl0.getColumn(119);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(615, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(615, bigMatrixImpl0.getRowDimension());
      assertEquals(615, bigDecimalArray0.length);
      assertNotNull(bigDecimalArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(24, 24);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(24, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(24, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(24);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(24, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(24, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(24, bigMatrixImpl1.getRowDimension());
      assertEquals(24, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertTrue(bigMatrixImpl1.isSquare());
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      
      double[] doubleArray0 = bigMatrixImpl1.getRowAsDoubleArray(1);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(24, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(24, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(24, bigMatrixImpl1.getRowDimension());
      assertEquals(24, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(24, doubleArray0.length);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(doubleArray0);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1707, 1707);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1707, bigMatrixImpl0.getRowDimension());
      assertEquals(1707, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getRowAsDoubleArray(1707);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1707, 1707);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1707, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1707, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getRow(1707);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1707, 1707);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1707, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1707, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray0 = bigMatrixImpl0.getRow(1);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1707, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1707, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1707, bigDecimalArray0.length);
      assertNotNull(bigDecimalArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(2629, 2629);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(2629, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(2629, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getColumnMatrix(2629);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(21, 21);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(21, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(21, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getRowMatrix(21);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][5];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray0, 31, 31);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][9];
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray0, 0, 23);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix must be initialized to perfom this method
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][4];
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray0, 2382, 484);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix must be initialized to perfom this method
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[6];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(6, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(6, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[1][4];
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray1, 0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[3];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(3, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(3, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[4][9];
      bigDecimalArray1[1] = bigDecimalArray0;
      // Undeclared exception!
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray1, 64, 2370);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][9];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[0];
      bigDecimalArray0[0] = bigDecimalArray1;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one column.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[0][6];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one row.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.setSubMatrix((BigDecimal[][]) null, 684, (-1630));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[0][7];
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray0, (-552), (-552));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(34, 34);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(34, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(34, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      int[] intArray0 = new int[0];
      try { 
        bigMatrixImpl0.getSubMatrix(intArray0, intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // selected row and column index arrays must be non-empty
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1607, 1607);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1607, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1607, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      int[] intArray0 = new int[1];
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getSubMatrix(intArray0, intArray0);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1607, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1607, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, intArray0.length);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(118, 4);
      try { 
        bigMatrixImpl0.getSubMatrix(4, 4, 118, 118);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1607, 1607);
      try { 
        bigMatrixImpl0.getSubMatrix(1607, 1607, 5489, 1607);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1979, 1979);
      try { 
        bigMatrixImpl0.getSubMatrix(1979, 1979, (-2991), (-2991));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[6];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      try { 
        bigMatrixImpl0.getSubMatrix(0, 2598, 0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1697, 1697);
      try { 
        bigMatrixImpl0.getSubMatrix(1697, 92, 92, 1697);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[6];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getSubMatrix(0, 0, 0, 0);
      bigMatrixImpl0.equals(bigMatrixImpl1);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      try { 
        bigMatrixImpl0.getSubMatrix((-2564), (-2564), 1, (-2564));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(8);
      BigDecimal bigDecimal0 = bigMatrixImpl1.getNorm();
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(8, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(1);
      double[][] doubleArray0 = bigMatrixImpl1.getDataAsDoubleArray();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, doubleArray0.length);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1707, 1707);
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(31, 31);
      try { 
        bigMatrixImpl0.preMultiply((BigMatrix) bigMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrices are not multiplication compatible.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[][] doubleArray0 = new double[10][4];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.scalarMultiply(bigDecimal0);
      assertFalse(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(8);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigMatrixImpl bigMatrixImpl2 = (BigMatrixImpl)bigMatrixImpl1.scalarAdd(bigDecimal0);
      assertEquals(8, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(8, bigMatrixImpl2.getColumnDimension());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1, 1);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(1);
      BigMatrixImpl bigMatrixImpl2 = (BigMatrixImpl)bigMatrixImpl1.subtract(bigMatrixImpl1);
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(626, 626);
      BigMatrix bigMatrix0 = bigMatrixImpl0.getRowMatrix(575);
      try { 
        bigMatrix0.subtract(bigMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1356, 1356);
      BigMatrix bigMatrix0 = bigMatrixImpl0.getColumnMatrix(1314);
      try { 
        bigMatrixImpl0.subtract(bigMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1, 1);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(1);
      assertTrue(bigMatrixImpl1.isSquare());
      
      BigMatrixImpl bigMatrixImpl2 = (BigMatrixImpl)bigMatrixImpl1.add(bigMatrixImpl1);
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1472, 1472);
      BigMatrix bigMatrix0 = bigMatrixImpl0.getRowMatrix(1443);
      try { 
        bigMatrixImpl0.add(bigMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String[][] stringArray0 = new String[6][3];
      String[] stringArray1 = new String[1];
      stringArray0[0] = stringArray1;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String[][] stringArray0 = new String[1][0];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one column.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String[][] stringArray0 = new String[0][0];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one row.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String[][] stringArray0 = new String[6][3];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[10][4];
      doubleArray1[0] = doubleArray0;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      double[][] doubleArray0 = new double[10][4];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      BigMatrix bigMatrix0 = bigMatrixImpl0.transpose();
      try { 
        bigMatrixImpl0.add(bigMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one column.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one row.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(2498, (-1303));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be positive
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl((-1736), (-1736));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be positive
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(7, 7);
      int int0 = bigMatrixImpl0.getRoundingMode();
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, int0);
      assertEquals(64, bigMatrixImpl0.getScale());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(6, 6);
      // Undeclared exception!
      try { 
        bigMatrixImpl0.preMultiply((BigMatrix) bigMatrixImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(6, 6);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(6);
      BigMatrixImpl bigMatrixImpl2 = (BigMatrixImpl)bigMatrixImpl1.copy();
      BigMatrixImpl bigMatrixImpl3 = (BigMatrixImpl)bigMatrixImpl1.preMultiply((BigMatrix) bigMatrixImpl2);
      assertEquals(64, bigMatrixImpl3.getScale());
      assertEquals(4, bigMatrixImpl3.getRoundingMode());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertTrue(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertEquals(64, bigMatrixImpl1.getScale());
      assertTrue(bigMatrixImpl2.isSquare());
      assertTrue(bigMatrixImpl3.equals((Object)bigMatrixImpl1));
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      bigMatrixImpl0.setScale(31);
      assertEquals(31, bigMatrixImpl0.getScale());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[16];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      int int0 = bigMatrixImpl0.getScale();
      assertEquals(64, int0);
      assertEquals(16, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(615, 615);
      bigMatrixImpl0.setRoundingMode(615);
      assertEquals(615, bigMatrixImpl0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1707, 1707);
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getPermutation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getEntryAsDouble(8, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}

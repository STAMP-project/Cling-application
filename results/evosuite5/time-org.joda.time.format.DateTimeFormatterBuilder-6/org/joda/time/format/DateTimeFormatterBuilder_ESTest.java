/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 05:41:38 GMT 2019
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DateTimeFormatterBuilder_ESTest extends DateTimeFormatterBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 93, false);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2, 3);
      Locale locale0 = new Locale("pzADN:mOU&5a");
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[7];
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
      dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_TwoDigitYear0;
      dateTimeParserArray0[2] = (DateTimeParser) dateTimeFormatterBuilder_TwoDigitYear0;
      dateTimeParserArray0[3] = (DateTimeParser) dateTimeFormatterBuilder_TwoDigitYear0;
      dateTimeParserArray0[4] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(4717L, iSOChronology0, locale0, (Integer) null, 35);
      dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, "K7l;F).ZkwM^#.VUY", 2);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      linkedList0.add((Object) dateTimeFormatterBuilder_Composite0);
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite1 = null;
      try {
        dateTimeFormatterBuilder_Composite1 = new DateTimeFormatterBuilder.Composite(linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseDateTime("0_>]F{");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      YearMonth yearMonth0 = YearMonth.now();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Composite0.printTo((Writer) charArrayWriter0, (ReadablePartial) yearMonth0, (Locale) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      StringBuffer stringBuffer0 = new StringBuffer(2212);
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Composite0.printTo(stringBuffer0, (ReadablePartial) null, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-538));
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Composite0.printTo((Writer) charArrayWriter0, (-7755433L), (Chronology) gJChronology0, (-538), dateTimeZone0, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      StringBuffer stringBuffer0 = new StringBuffer(1260);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      Locale locale0 = Locale.US;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Composite0.printTo(stringBuffer0, (long) 1260, (Chronology) copticChronology0, 1260, dateTimeZone0, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Locale locale0 = Locale.ENGLISH;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(205L, ethiopicChronology0, locale0, (Integer) 1, (-454));
      dateTimeFormatterBuilder_TimeZoneId0.parseInto(dateTimeParserBucket0, "<<oms", 1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("pzADN:mOU&5a");
      Locale locale0 = Locale.ROOT;
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      dateTimeFormatterBuilder_TimeZoneId0.printTo((Writer) mockFileWriter0, 355922222L, (Chronology) iSOChronology0, 339, dateTimeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      PipedWriter pipedWriter0 = new PipedWriter();
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      try { 
        dateTimeFormatterBuilder_TimeZoneId0.printTo((Writer) pipedWriter0, 5097600000L, (Chronology) null, 0, (DateTimeZone) null, locale0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "UCT");
      Locale locale0 = new Locale("UCT");
      dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (long) 33, (Chronology) copticChronology0, 34, (DateTimeZone) fixedDateTimeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Locale locale0 = Locale.GERMANY;
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, 833L, (Chronology) gregorianChronology0, 2354, (DateTimeZone) null, locale0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      hashMap0.put(",eN", fixedDateTimeZone0);
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2, hashMap0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDate("SST");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"SST\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      hashMap0.put(",eN", fixedDateTimeZone0);
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2, hashMap0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      dateTimeFormatter0.parseDateTime(",eN");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
      dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      Locale locale0 = Locale.JAPAN;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "hJza?");
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(1, hashMap0);
      dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (-1935L), (Chronology) zonedChronology0, 1, dateTimeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("pzADN:mOU&5a");
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale locale0 = Locale.ROOT;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, (Map<String, DateTimeZone>) null);
      dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (-2295L), (Chronology) islamicChronology0, 1622, (DateTimeZone) fixedDateTimeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-2424), (Map<String, DateTimeZone>) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        dateTimeFormatterBuilder_TimeZoneName0.printTo((Writer) pipedWriter0, 1214593627L, (Chronology) iSOChronology0, 3, (DateTimeZone) null, locale0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendYearOfEra(33, 33);
      dateTimeFormatterBuilder0.appendTimeZoneName();
      dateTimeFormatterBuilder0.canBuildFormatter();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours((-1));
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone.forTimeZone(timeZone0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(14);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone.forTimeZone(timeZone0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("bce", "8t;)SI4sP<JC+tL[:", true, 1896, 1896);
      Locale locale0 = Locale.CHINA;
      Integer integer0 = Integer.getInteger("bce", 1896);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1896, (Chronology) null, locale0, integer0, (-1228));
      int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "org.joda.time.format.DateTimeFormatterBuilder$Composite", 1896);
      assertEquals((-1897), int0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("Rxa|", "US/Samoa0_>]F{", false, 46, 46);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseDateTime("Rxa|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Rxa|\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", false, 6, 6);
      Integer integer0 = new Integer(29);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(6, (Chronology) null, (Locale) null, integer0, 29);
      int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "F70^KFqeA M", 2510);
      assertEquals(0, (int)dateTimeParserBucket0.getOffsetInteger());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(2510, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", false, 6, 6);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseDateTime("0_>]F{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0_>]F{\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID("-w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-w\" is malformed at \"w\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", false, 6, 6);
      MockFile mockFile0 = new MockFile("F70^KFqeA M");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) mockPrintWriter0, (long) 6, (Chronology) null, 6, (DateTimeZone) fixedDateTimeZone0, (Locale) null);
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("hJza?");
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      Locale locale0 = Locale.FRANCE;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("US/EasternNo parser supplied", "Years", false, 1, 1);
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) mockPrintWriter0, 1929L, (Chronology) islamicChronology0, 862, dateTimeZone0, locale0);
      assertEquals(28, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("k", "k", true, 611, 611);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Locale locale0 = Locale.ROOT;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(2000000L, islamicChronology0, locale0, (Integer) 1, 611);
      MockFileWriter mockFileWriter0 = new MockFileWriter("k");
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) mockFileWriter0, (long) 611, (Chronology) islamicChronology0, 1, dateTimeZone0, locale0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("+[X&tBC,.8m925dJ4BJ", "jeV", true, 28, 86400000);
      MockFileWriter mockFileWriter0 = new MockFileWriter("K0ooZpDkH", true);
      Locale locale0 = Locale.CHINA;
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) mockFileWriter0, (long) 617, (Chronology) gJChronology0, 28, (DateTimeZone) null, locale0);
      assertEquals(19, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("W-SUOU&5a", "W-SUOU&5a", true, 20, 844);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("TKR");
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) mockFileWriter0, (long) 20, (Chronology) islamicChronology0, (-2698), dateTimeZone0, (Locale) null);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("N|YjGP}DHi5HTqW/, 2", "N|YjGP}DHi5HTqW/, 2", false, 32, 32);
      StringBuffer stringBuffer0 = new StringBuffer(9);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (long) 32, (Chronology) ethiopicChronology0, 5, dateTimeZone0, locale0);
      assertEquals(10, stringBuffer0.length());
      assertEquals("+000000005", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("+[X&tBC,.8m925dJ4BJ", "jeV", true, 28, 86400000);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Zulua.time.format.DateTimeFormatterBuilder$NumberFormatter");
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(14);
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-299697L), (Chronology) gJChronology0, 86400000, dateTimeZone0, (Locale) null);
      assertEquals(71, stringBuffer0.length());
      assertEquals("Zulua.time.format.DateTimeFormatterBuilder$NumberFormatter+24:00:00.000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("W-SUOU&5a", "W-SUOU&5a", true, 20, 844);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "jeV");
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, 198135074L, (Chronology) islamicChronology0, (-2698), dateTimeZone0, (Locale) null);
      assertEquals(16, stringBuffer0.length());
      assertEquals("jeV-00:00:02.698", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("aA,R.<{76'v4#Ai}", "aA,R.<{76'v4#Ai}", true, 2687, 2687);
      StringBuffer stringBuffer0 = new StringBuffer();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Locale locale0 = Locale.forLanguageTag("aA,R.<{76'v4#Ai}");
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, 1000000000000000000L, (Chronology) julianChronology0, 2687, (DateTimeZone) null, locale0);
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("aA,R.<{76'v4#Ai}", "aA,R.<{76'v4#Ai}", true, 2687, 2687);
      int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, "bKdVg({mb", true, 62, 429);
      int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = null;
      try {
        dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("nk", "nk", false, 0, (-1197));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 9, 43);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Integer integer0 = new Integer(43);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(9, iSOChronology0, locale0, integer0, 43);
      int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "aN4dAj>?V34xsi!;yYdn", 9);
      assertEquals((-10), int0);
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(5523);
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      Locale locale0 = new Locale("org.joa.time.format.DateTimeFormattrBuilder$NumberFormatter", "org.joa.time.format.DateTimeFormattrBuilder$NumberFormatter", "US/Central%");
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(23, gJChronology0, locale0, (Integer) 2, 23);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 23, 690562340);
      int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, " * ", 1);
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2554, 2554);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.ENGLISH;
      Integer integer0 = new Integer(2554);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(3L, gJChronology0, locale0, integer0, 2554);
      int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "Zulua.time.format.DateTimeFormatterBuilder$NumberFormatter", 3228);
      assertEquals((-3229), int0);
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 35, 35);
      StringBuffer stringBuffer0 = new StringBuffer(35);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Singapore");
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charsetEncoder0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) outputStreamWriter0, (long) 35, (Chronology) ethiopicChronology0);
      assertEquals(14, stringBuffer0.length());
      assertEquals("00058333333333", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("pzADN:mOU&5a");
      Locale locale0 = Locale.ROOT;
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("US/Pacific");
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 3, 5);
      dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockFileWriter0, (ReadablePartial) localTime0, locale0);
      assertEquals(5, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MockFileWriter mockFileWriter0 = new MockFileWriter("UCT%");
      LocalTime localTime0 = LocalTime.now((DateTimeZone) fixedDateTimeZone0);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 30, 2);
      Locale locale0 = Locale.KOREA;
      dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockFileWriter0, (ReadablePartial) localTime0, locale0);
      assertEquals(2, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.joda.time.base.BaseSingleFieldPeriod");
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 3240, 1);
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) bufferedWriter0, 378810368L, (Chronology) gJChronology0);
      assertEquals(41, stringBuffer0.length());
      assertEquals("org.joda.time.base.BaseSingleFieldPeriod0", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      MockFileWriter mockFileWriter0 = new MockFileWriter("pzADN:mOU&5a");
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2, 3);
      StringBuffer stringBuffer0 = new StringBuffer(2);
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 2);
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) mockFileWriter0, 7L, (Chronology) julianChronology0);
      assertEquals("000", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 815, 13);
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.joda.time.format.DateTimeFormatterBuilder", false);
      MockDate mockDate0 = new MockDate(0L);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      LocalTime localTime1 = localTime0.withMillisOfDay(5);
      Locale locale0 = new Locale("-w");
      dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockFileWriter0, (ReadablePartial) localTime1, locale0);
      assertEquals(13, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MockFileWriter mockFileWriter0 = new MockFileWriter("UCT%");
      LocalTime localTime0 = LocalTime.now((DateTimeZone) fixedDateTimeZone0);
      Locale locale0 = new Locale("UCT%");
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-3965), 32);
      dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockFileWriter0, (ReadablePartial) localTime0, locale0);
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("DsO,S:2le{&");
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1, 339);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "DsO,S:2le{&");
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) mockFileWriter0, 1000000000L, (Chronology) null);
      assertEquals("DsO,S:2le{&0", stringBuffer0.toString());
      assertEquals(12, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(6, (Chronology) null, (Locale) null, (Integer) null, 6);
      dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "5A`1qU/G>Vd?`U:p4", 6);
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      Integer integer0 = Integer.getInteger("");
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(22, (Chronology) null, (Locale) null, integer0, (-559));
      dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "5A`1qU/G>Vd?`U:p4", 16);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      Locale locale0 = Locale.ITALY;
      Integer integer0 = new Integer((-286));
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(48, (Chronology) null, locale0, integer0, 1);
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "w)fkeqxmGu", 12);
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals((-13), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(julianChronology0);
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_TextField0;
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      Locale locale0 = Locale.UK;
      Integer integer0 = new Integer((-1844011738));
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(521, lenientChronology0, locale0, integer0, 521);
      int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, "pzADN:mOU&5a", (-1844011738));
      assertEquals(1844011737, int0);
      assertEquals(6, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      MonthDay monthDay0 = new MonthDay();
      dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
      assertEquals("\uFFFD", stringBuffer0.toString());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      Locale locale0 = Locale.ENGLISH;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      StringBuffer stringBuffer0 = new StringBuffer(89);
      dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (-1729L), (Chronology) julianChronology0, 89, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals("23", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 93, false);
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_TwoDigitYear0, (DateTimeParser) dateTimeFormatterBuilder_TextField0);
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildFormatter();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 11, false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.joda.time.format.DateTimeFormatterBuilder");
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalTime localTime0 = LocalTime.now((DateTimeZone) fixedDateTimeZone0);
      Locale locale0 = Locale.ROOT;
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockFileWriter0, (ReadablePartial) localTime0, locale0);
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("hJza?");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      Locale locale0 = Locale.FRANCE;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 93, true);
      LocalTime localTime0 = LocalTime.now((DateTimeZone) fixedDateTimeZone0);
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) bufferedWriter0, (ReadablePartial) localTime0, locale0);
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 6, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      YearMonth yearMonth0 = new YearMonth((Chronology) lenientChronology0);
      String string0 = dateTimeFormatter0.print((ReadablePartial) yearMonth0);
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals("\uFFFD\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 92, false);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalTime localTime0 = LocalTime.now((DateTimeZone) fixedDateTimeZone0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Locale locale0 = Locale.UK;
      dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
      assertEquals(2, stringBuffer0.length());
      assertEquals("01", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear((DateTimeFieldType) null, (-114), true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("hJza?");
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      Locale locale0 = Locale.JAPAN;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockPrintWriter0, (long) (-1935), (Chronology) zonedChronology0, 1, dateTimeZone0, locale0);
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MockFileWriter mockFileWriter0 = new MockFileWriter("DsO,S:2le{&");
      Locale locale0 = Locale.ROOT;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 339, true);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockFileWriter0, (long) 1, (Chronology) ethiopicChronology0, 339, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear((DateTimeFieldType) null, (-114), true);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      Locale locale0 = Locale.JAPAN;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      StringBuffer stringBuffer0 = new StringBuffer("hJza?");
      dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (long) 2, (Chronology) zonedChronology0, 80, dateTimeZone0, locale0);
      assertEquals(7, stringBuffer0.length());
      assertEquals("hJza?\uFFFD\uFFFD", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      StringBuffer stringBuffer0 = new StringBuffer("UCT%");
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 9, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      dateTimeFormatter0.printTo(stringBuffer0, (long) 9);
      assertEquals(6, stringBuffer0.length());
      assertEquals("UCT%00", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Integer integer0 = new Integer(43);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(9, iSOChronology0, locale0, integer0, 43);
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 66, false);
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "aN4dAj>?V34xsi!;yYdn", 11);
      assertEquals((-12), int0);
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 6, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDate("6c]ByC=uy679`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"6c]ByC=uy679`\" is malformed at \"c]ByC=uy679`\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2304, true);
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto((DateTimeParserBucket) null, ",G_s!{jV6", 3);
      assertEquals((-4), int0);
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 46, true);
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Locale locale0 = Locale.ITALY;
      Integer integer0 = Integer.valueOf(58);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(46, iSOChronology0, locale0, integer0, 46);
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "7~zqe!8A", 46);
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals((-47), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 93, false);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale locale0 = new Locale("pzADN:mOU&5a");
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, fixedDateTimeZone0);
      Integer integer0 = Integer.getInteger("^m #K/<oHX~_XI8G`", 93);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(3, zonedChronology0, locale0, integer0, 1214);
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "^m #K/<oHX~_XI8G`", 2);
      assertEquals((-3), int0);
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 5, false);
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto((DateTimeParserBucket) null, "No printer supplied", 45);
      assertEquals((-46), int0);
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(7);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 7, 7);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-2088), true);
      Locale locale0 = new Locale("Id must not be null");
      Integer integer0 = new Integer(7);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2088), gJChronology0, locale0, integer0, (-411));
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "StrictChronology[GJChronology[UTC,cutover=1970-01-01T00:00:00.007Z,mdfw=7]]", 47);
      assertEquals(49, int0);
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 1354, true);
      dateTimeFormatterBuilder0.appendOptional(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-1469), false);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
      Locale locale0 = Locale.UK;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-1469), zonedChronology0, locale0, (Integer) null, (-1469));
      int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "lv}tBJ87f/*", (-1469));
      assertEquals(2936, int0);
      assertEquals((-1469), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 7, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseDateTime("0_>]F{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0_>]F{\" is malformed at \"_>]F{\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 4, true);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_FixedNumber0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseDateTime("0_>]F{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0_>]F{\" is malformed at \"_>]F{\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(7);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 7, false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) buddhistChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      LocalDate localDate0 = new LocalDate(1101L, (Chronology) gJChronology0);
      Locale locale0 = Locale.KOREAN;
      dateTimeFormatterBuilder_FixedNumber0.printTo((Writer) bufferedWriter0, (ReadablePartial) localDate0, locale0);
      assertEquals(7, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      MockFileWriter mockFileWriter0 = new MockFileWriter("pzADN:mOU&5a");
      LocalTime localTime0 = LocalTime.now();
      Locale locale0 = Locale.ROOT;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 49, false);
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockFileWriter0, (ReadablePartial) localTime0, locale0);
      assertEquals(49, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("hJza?");
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, (-1935), true);
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
      assertEquals((-1935), dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      StringBuffer stringBuffer0 = new StringBuffer("pzADN:mOU&5a");
      LocalTime localTime0 = LocalTime.now();
      Locale locale0 = Locale.ROOT;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 17, false);
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
      assertEquals("pzADN:mOU&5a76881", stringBuffer0.toString());
      assertEquals(17, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      String string0 = yearMonth0.toString("k");
      assertEquals("\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime("93SDP/C{lI=I", gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"93SDP/C{lI=I\" is malformed at \"SDP/C{lI=I\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.parse("+V!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+V!\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.parse("+!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+!\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 617, false);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_FixedNumber0, dateTimeFormatterBuilder_FixedNumber0);
      // Undeclared exception!
      try { 
        DateTime.parse("+[X&tBC,.8m925dJ4BJ", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+[X&tBC,.8m925dJ4BJ\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTime dateTime0 = dateTimeFormatter0.parseDateTime("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral");
      assertEquals((-3600000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale locale0 = new Locale("pzADN:mOU&5a");
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('a');
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 3);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-61L), ethiopicChronology0, locale0, (Integer) ethiopicChronology0.EE, 3);
      int int0 = dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket0, "R@;a&Jmxq3$f=", 3);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('0');
      Locale locale0 = Locale.KOREA;
      Integer integer0 = new Integer(45);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-61L), (Chronology) null, locale0, integer0, 45);
      int int0 = dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket0, "US/Pacific-New", 45);
      assertEquals((-46), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MockFileWriter mockFileWriter0 = new MockFileWriter("GCF]^,?lf");
      LocalTime localTime0 = LocalTime.now((DateTimeZone) fixedDateTimeZone0);
      Locale locale0 = Locale.ROOT;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 15, false);
      dateTimeFormatterBuilder_FixedNumber0.printTo((Writer) mockFileWriter0, (ReadablePartial) localTime0, locale0);
      assertEquals(15, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 4, true);
      StringBuffer stringBuffer0 = new StringBuffer("iiOU");
      MonthDay monthDay0 = new MonthDay();
      Locale locale0 = Locale.TAIWAN;
      dateTimeFormatterBuilder_FixedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
      assertEquals(8, stringBuffer0.length());
      assertEquals("iiOU\uFFFD\uFFFD\uFFFD\uFFFD", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 93, false);
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[2];
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_TwoDigitYear0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_TwoDigitYear0, dateTimeParserArray0);
      boolean boolean0 = dateTimeFormatterBuilder1.canBuildFormatter();
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFractionOfDay((-40), (-40));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFractionOfDay(0, (-2674));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFraction((DateTimeFieldType) null, 76, 3148);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendShortText((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendText((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, (-4584));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: -4584
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFixedSignedDecimal((DateTimeFieldType) null, 58);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, 11);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, 1, 1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, (-821), (-821));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYear(1238, 543);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendSignedDecimal((DateTimeFieldType) null, 1024, 1024);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, (-1165));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: -1165
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFixedDecimal((DateTimeFieldType) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, 82);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendSecondOfDay((-1127));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendDecimal((DateTimeFieldType) null, 18, 18);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral("'");
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral("");
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendLiteral((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimeParser) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No parser supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 93, false);
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("(t[WBL,", "MI)", true, 32, 1432);
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_TwoDigitYear0;
      dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeParserArray0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 48, true);
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeParserArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No parser supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-781), true);
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No parsers supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 93, false);
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[2];
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_TwoDigitYear0, dateTimeParserArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incomplete parser array
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimeFormatter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.toParser();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing is not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.toPrinter();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing is not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.toFormatter();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Both printing and parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 815, 13);
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.joda.time.format.DateTimeFormatterBuilder", false);
      MockDate mockDate0 = new MockDate(0L);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      Locale locale0 = new Locale("-w");
      dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockFileWriter0, (ReadablePartial) localTime0, locale0);
      assertEquals(13, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MockFileWriter mockFileWriter0 = new MockFileWriter("pzADN:mOU&5a");
      Locale locale0 = Locale.ROOT;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 353, 0);
      dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockFileWriter0, (long) 20, (Chronology) julianChronology0, 3, dateTimeZone0, locale0);
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "<V(2/!*$yy&p\"'$");
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      Locale locale0 = new Locale("SZT", "SSTCentral%", "SZT");
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) localDateTime0, locale0);
      assertEquals("SZT", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      Locale locale0 = Locale.ITALY;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      StringWriter stringWriter0 = new StringWriter();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(15);
      dateTimeFormatterBuilder_TextField0.printTo((Writer) stringWriter0, (long) 63, (Chronology) gJChronology0, (-2), dateTimeZone0, locale0);
      assertEquals("12", stringWriter0.toString());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("pzADN:mOU&5a");
      Locale locale0 = Locale.ROOT;
      dateTimeFormatterBuilder_TextField0.printTo((Writer) mockFileWriter0, (ReadablePartial) localDateTime0, locale0);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale locale0 = new Locale("ALL_IDS", "pzADN:mOU&5a", "org.joda.time.chrono.CopticChronology");
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-2474), false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (-2831L), (Chronology) iSOChronology0, 0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals((-2474), dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      Locale locale0 = Locale.forLanguageTag("");
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (-159L), (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
      assertEquals(5, stringBuffer0.length());
      assertEquals(0, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("pzADN:mOU&5a");
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(julianChronology0);
      Locale locale0 = Locale.ITALY;
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("$'\"D/Go");
      dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (long) 89, (Chronology) lenientChronology0, 0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber");
      MockDate mockDate0 = new MockDate(63, 100, 20, 63, 12, 45);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_StringLiteral0.printTo((Writer) null, (ReadablePartial) localDateTime0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("hJza?");
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      Locale locale0 = Locale.FRANCE;
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      dateTimeFormatterBuilder_StringLiteral0.printTo((Writer) mockPrintWriter0, 63158400000L, (Chronology) islamicChronology0, 2687, dateTimeZone0, locale0);
      assertEquals("Europe/Amsterdam", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber");
      Locale locale0 = Locale.ITALY;
      StringBuffer stringBuffer0 = new StringBuffer("--MM-dd");
      YearMonth yearMonth0 = new YearMonth((long) 3);
      dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MockFileWriter mockFileWriter0 = new MockFileWriter("UCT%");
      Locale locale0 = Locale.KOREA;
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('i');
      dateTimeFormatterBuilder_CharacterLiteral0.printTo((Writer) mockFileWriter0, 604800000L, (Chronology) copticChronology0, 312, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals("ko", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("hJza?");
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('#');
      dateTimeFormatterBuilder_CharacterLiteral0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
      assertEquals("ja", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MockFileWriter mockFileWriter0 = new MockFileWriter("UCT%");
      Locale locale0 = Locale.KOREA;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(93, hashMap0);
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      dateTimeFormatterBuilder_TimeZoneName0.printTo((Writer) mockFileWriter0, (long) (-5), (Chronology) copticChronology0, (-5), (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("hJza?");
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2, hashMap0);
      dateTimeFormatterBuilder_TimeZoneName0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Locale locale0 = Locale.forLanguageTag("");
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
      dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (ReadablePartial) null, locale0);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneId();
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName();
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimePrinter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No printer supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHalfdayOfDayText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfDay(1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfCentury(575, 1354);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendTimeZoneOffset("pzADN:mOU&5a", "Property[", false, 261, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfDay(1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendDayOfWeekShortText();
      DateTimePrinter dateTimePrinter0 = dateTimeFormatterBuilder0.toPrinter();
      assertEquals(6, dateTimePrinter0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearShortText();
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildPrinter();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfSecond(339);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildParser();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(261);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.clear();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendPattern("US/Michigan");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendEraText();
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      dateTimeFormatterBuilder1.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap0);
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildFormatter();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.canBuildFormatter();
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildFormatter();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHourOfHalfday(14);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTime.parse("1S(9d#|OWi #");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"1S(9d#|OWi #\" is malformed at \"S(9d#|OWi #\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendCenturyOfEra(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.parse("-1d=J{;eg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-1d=J{;eg\" is malformed at \"d=J{;eg\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitYear(40);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.joda.time.format.DateTimeFormatterBuilder", false);
      MockDate mockDate0 = new MockDate(0L);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      Locale locale0 = new Locale("-w");
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      dateTimeFormatterBuilder_TimeZoneId0.printTo((Writer) mockFileWriter0, (ReadablePartial) localTime0, locale0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "3-w");
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("MI)", "(t[WBL,", false, 2, 2881);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_TimeZoneOffset0;
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_MatchingParser0);
      MonthDay monthDay0 = MonthDay.parse("(t[WBL,", dateTimeFormatter0);
      dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
      assertEquals(6, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId[] dateTimeFormatterBuilder_TimeZoneIdArray0 = DateTimeFormatterBuilder.TimeZoneId.values();
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeFormatterBuilder_TimeZoneIdArray0);
      assertEquals(32, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      int int0 = dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength();
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      String string0 = localDateTime0.toString();
      assertEquals("2014-02-14T21:21:21.320", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      Locale locale0 = Locale.ITALY;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, "pMS4;V;{Yg|vI!4E", false, 1, 13);
      Partial partial0 = new Partial(dateTimeFieldType0, 1000);
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) null, (ReadablePartial) partial0, locale0);
      assertEquals(4, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-781), true);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(28);
      Locale locale0 = new Locale("\"6sP}*+A{X=yh");
      dateTimeFormatterBuilder_FixedNumber0.printTo((Writer) charArrayWriter0, (-533653614741L), (Chronology) ethiopicChronology0, 1880, (DateTimeZone) null, locale0);
      assertEquals("259", charArrayWriter0.toString());
      assertEquals(3, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(7);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 7, 7);
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      String string0 = strictChronology0.toString();
      assertEquals("StrictChronology[GJChronology[+07:00,cutover=1970-01-01T00:00:00.007Z,mdfw=7]]", string0);
  }
}

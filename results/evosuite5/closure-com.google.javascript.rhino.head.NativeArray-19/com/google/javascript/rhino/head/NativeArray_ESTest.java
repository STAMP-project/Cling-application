/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 21 17:09:11 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BoundFunction;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.Delegator;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeJavaTopPackage;
import com.google.javascript.rhino.head.NativeString;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import java.util.Collection;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NativeArray_ESTest extends NativeArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2);
      nativeArray0.findPrototypeId("concat");
  }

  @Test(timeout = 4000)
  @Ignore
  public void test001()  throws Throwable  {
      Context context0 = new Context();
      NativeArray nativeArray0 = null;
      try {
        nativeArray0 = new NativeArray(context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483632L);
      nativeArray0.findPrototypeId("getFullYear");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483633L);
      nativeArray0.findPrototypeId("Function");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(480L);
      nativeArray0.findPrototypeId("uneval");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-1923L));
      nativeArray0.findPrototypeId("Date");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483647L);
      nativeArray0.findPrototypeId("get");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-2248L));
      nativeArray0.findPrototypeId("language version");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-2248L));
      nativeArray0.findPrototypeId("JavaException");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.findPrototypeId("Continuation");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483632L);
      nativeArray0.findPrototypeId("%m9]&Gy7oj");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1431655767L);
      nativeArray0.findPrototypeId("decodeURI");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-18L));
      // Undeclared exception!
      try { 
        nativeArray0.listIterator();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-1L));
      // Undeclared exception!
      try { 
        nativeArray0.listIterator((-1882356977));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1882356977
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(4503599627370496L);
      // Undeclared exception!
      try { 
        nativeArray0.listIterator(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1L);
      nativeArray0.lastIndexOf(nativeArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Context context0 = Context.enter();
      Object[] objectArray0 = new Object[7];
      objectArray0[6] = (Object) context0;
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.lastIndexOf(objectArray0[3]);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Object[] objectArray0 = new Object[8];
      objectArray0[7] = (Object) nativeContinuation0;
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.lastIndexOf(objectArray0[7]);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483662L);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      // Undeclared exception!
      try { 
        nativeArray0.lastIndexOf(nativeIterator_StopIteration0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-2248L));
      nativeArray0.lastIndexOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) nativeError0;
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.containsAll(nativeArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Context context0 = Context.enter();
      NativeArray nativeArray0 = new NativeArray((-1));
      nativeArray0.indexOf(context0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test022()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483647L);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) nativeArray0;
      NativeArray nativeArray1 = new NativeArray(objectArray0);
      // Undeclared exception!
      nativeArray0.containsAll(nativeArray1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(4503599627370496L);
      // Undeclared exception!
      try { 
        nativeArray0.contains("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(4096L);
      // Undeclared exception!
      try { 
        nativeArray0.get(4096L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-1106L));
      // Undeclared exception!
      try { 
        nativeArray0.get((-1106L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483658L);
      // Undeclared exception!
      try { 
        nativeArray0.size();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      int int0 = nativeArray0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-2836L));
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = nativeArray0.toArray(objectArray0);
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeArray nativeArray0 = new NativeArray(1);
      assertEquals(1L, nativeArray0.getLength());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) nativeArray0;
      objectArray0[1] = (Object) nativeContinuation0;
      objectArray0[2] = (Object) nativeContinuation0;
      objectArray0[3] = (Object) nativeContinuation0;
      NativeArray nativeArray1 = new NativeArray(objectArray0);
      boolean boolean0 = nativeArray1.containsAll(nativeArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test030()  throws Throwable  {
      Context context0 = Context.getContext();
      NativeString nativeString0 = new NativeString("error reporter");
      long long0 = NativeArray.getLengthProperty(context0, nativeString0);
      assertEquals(14L, long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147478656L);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      // Undeclared exception!
      try { 
        nativeArray0.setInstanceIdValue(1, nativeJavaTopPackage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // RangeError: Inappropriate array length.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      Context context0 = Context.enter();
      nativeArray0.defineOwnProperty(context0, (Object) context0, (ScriptableObject) nativeArray0, false);
      // Undeclared exception!
      try { 
        nativeArray0.setDenseOnly(true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      nativeArray0.setDenseOnly(true);
      assertEquals(0L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      nativeArray0.setDenseOnly(false);
      assertEquals(0L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      IdFunctionObject idFunctionObject0 = nativeArray0.exportAsJSClass(188, (Scriptable) null, false);
      Context context0 = Context.enter();
      Object[] objectArray1 = new Object[1];
      nativeArray0.execIdCall(idFunctionObject0, context0, nativeArray0, idFunctionObject0, objectArray1);
      assertFalse(nativeArray0.isEmpty());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test036()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-2248L));
      Context context0 = Context.getContext();
      IdFunctionObject idFunctionObject0 = nativeArray0.exportAsJSClass(12, nativeArray0, false);
      // Undeclared exception!
      try { 
        nativeArray0.execIdCall(idFunctionObject0, context0, idFunctionObject0, nativeArray0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      LinkedList<BoundFunction> linkedList0 = new LinkedList<BoundFunction>();
      NativeArray nativeArray1 = new NativeArray((-2774));
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enter();
      nativeArray1.defineOwnProperty(context0, (Object) linkedList0, (ScriptableObject) nativeArray0, false);
      assertEquals(0L, nativeArray1.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      Context context0 = Context.enter();
      nativeArray0.defineOwnProperty(context0, (Object) null, (ScriptableObject) nativeArray0, false);
      assertEquals(4L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1431655764L);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      NativeCall nativeCall0 = new NativeCall();
      // Undeclared exception!
      try { 
        nativeArray0.defineOwnProperty(context0, (Object) nativeCall0, (ScriptableObject) nativeCall0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(19L);
      Byte byte0 = new Byte((byte)1);
      // Undeclared exception!
      try { 
        nativeArray0.getOwnPropertyDescriptor((Context) null, byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1431655764L);
      nativeArray0.getOwnPropertyDescriptor((Context) null, (Object) null);
      assertEquals(1431655764L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      int int0 = nativeArray0.getAttributes(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test043()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(5326L);
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes(1214);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property 1214 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test044()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes(13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property 13 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test045()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes((-7));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property -7 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test046()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1431655764L);
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes((-2147331050));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property -2147331050 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      ScriptableObject scriptableObject0 = nativeArray0.getOwnPropertyDescriptor((Context) null, 0);
      assertEquals("object", scriptableObject0.getTypeOf());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test048()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1L);
      // Undeclared exception!
      try { 
        nativeArray0.setInstanceIdValue(1, nativeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.defineConst("ritable", nativeArray0);
      Integer[] integerArray0 = nativeArray0.getIndexIds();
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test050()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-2248L));
      Context context0 = Context.getContext();
      context0.initStandardObjects((ScriptableObject) nativeArray0);
      ScriptableObject.putProperty((Scriptable) nativeArray0, (-1452786477), (Object) null);
      nativeArray0.getIndexIds();
      assertEquals(0L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test051()  throws Throwable  {
      Context context0 = Context.enter();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeArray nativeArray0 = null;
      try {
        nativeArray0 = new NativeArray(context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test052()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-2242L));
      Context context0 = Context.getContext();
      Scriptable scriptable0 = context0.initStandardObjects((ScriptableObject) nativeArray0);
      scriptable0.delete(4);
      assertEquals(0L, nativeArray0.jsGet_length());
      assertEquals(0L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test053()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(4096L);
      nativeArray0.sealObject();
      // Undeclared exception!
      try { 
        nativeArray0.delete(109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot modify a property of a sealed object: 109.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(4);
      nativeArray0.delete(0);
      assertEquals(4L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(13);
      nativeArray0.delete(13);
      assertEquals(13L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483647L);
      nativeArray0.delete(8);
      assertEquals(2147483647L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      ScriptableObject.putProperty((Scriptable) nativeArray0, 8, (Object) nativeArray0);
      assertFalse(nativeArray0.isEmpty());
      assertEquals(9L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeArray nativeArray0 = new NativeArray(4);
      nativeArray0.put(2528, (Scriptable) nativeContinuation0, (Object) nativeContinuation0);
      assertEquals(4L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeArray nativeArray0 = new NativeArray(1);
      ScriptableObject.putProperty((Scriptable) nativeArray0, 13, (Object) nativeContinuation0);
      assertEquals(14L, nativeArray0.getLength());
      assertEquals(14L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      NativeArray nativeArray1 = new NativeArray(1);
      nativeArray0.put("/!rTzG:-F", (Scriptable) nativeArray1, (Object) nativeArray1);
      assertEquals(1L, nativeArray1.jsGet_length());
      assertEquals(1L, nativeArray1.getLength());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test061()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-2242L));
      Context context0 = Context.getContext();
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      nativeArray0.getOwnPropertyDescriptor(context0, integer0);
      assertEquals((-2242L), nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-2248L));
      NativeString nativeString0 = new NativeString("error reporter");
      NativeError nativeError0 = new NativeError();
      nativeString0.addIdFunctionProperty(nativeArray0, nativeError0, 8, "-1", 5977);
      assertEquals(0L, nativeArray0.getLength());
      assertEquals(0L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test063()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-2242L));
      Context context0 = Context.getContext();
      nativeArray0.getOwnPropertyDescriptor(context0, nativeArray0.CONST);
      assertEquals((-2242L), nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-7L));
      nativeArray0.getOwnPropertyDescriptor((Context) null, "UsXGAKk");
      assertEquals((-7L), nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      ScriptableObject.putProperty((Scriptable) nativeArray0, 0, (Object) nativeArray0);
      assertTrue(nativeArray0.isEmpty());
      assertEquals(2L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483632L);
      ScriptableObject.putProperty((Scriptable) nativeArray0, 8, (Object) nativeArray0);
      assertEquals(2147483632L, nativeArray0.getLength());
      assertEquals(2147483632L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-2248L));
      IdFunctionObject idFunctionObject0 = nativeArray0.exportAsJSClass(12, nativeArray0, false);
      ScriptableObject.putProperty((Scriptable) nativeArray0, 6, (Object) idFunctionObject0);
      assertEquals(7L, nativeArray0.jsGet_length());
      assertEquals(7L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test068()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      NativeArray nativeArray1 = new NativeArray(1);
      IdFunctionObject idFunctionObject0 = nativeArray0.exportAsJSClass(13, nativeArray1, true);
      // Undeclared exception!
      try { 
        ScriptableObject.putProperty((Scriptable) nativeArray0, 2, (Object) idFunctionObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot modify a property of a sealed object: 2.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeArray nativeArray0 = new NativeArray((-316522074587315140L));
      nativeArray0.get(758, (Scriptable) nativeIterator_StopIteration0);
      assertEquals((-316522074587315140L), nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeArray nativeArray0 = new NativeArray(4);
      nativeArray0.get((-204), (Scriptable) nativeContinuation0);
      assertEquals(4L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      IdFunctionObject idFunctionObject0 = nativeArray0.exportAsJSClass(188, (Scriptable) null, false);
      Context context0 = Context.enter();
      NativeArray nativeArray1 = (NativeArray)nativeArray0.execIdCall(idFunctionObject0, context0, nativeArray0, idFunctionObject0, objectArray0);
      assertEquals("Array", nativeArray1.getClassName());
      assertEquals(1, idFunctionObject0.getArity());
      assertEquals(4L, nativeArray1.getLength());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2433L);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArray0, nativeArray0, 1, 0);
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        nativeArray0.execIdCall(idFunctionObject0, context0, idFunctionObject0, idFunctionObject0, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BAD FUNCTION ID=1 MASTER=com.google.javascript.rhino.head.NativeArray@1
         //
         verifyException("com.google.javascript.rhino.head.IdFunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeArray nativeArray0 = new NativeArray(8);
      nativeArray0.exportAsJSClass(250, nativeError0, false);
      // Undeclared exception!
      try { 
        nativeArray0.getIndexIds();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 24
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeArray nativeArray0 = new NativeArray(8);
      nativeArray0.exportAsJSClass(13, nativeError0, false);
      nativeArray0.getIndexIds();
      assertEquals(8L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.setInstanceIdValue((byte)1, (Object) null);
      assertEquals(0L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      ListIterator listIterator0 = nativeArray0.listIterator();
      // Undeclared exception!
      try { 
        nativeArray0.setInstanceIdValue(13, listIterator0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 13
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Context context0 = Context.enter();
      NativeArray nativeArray0 = new NativeArray(12);
      Delegator delegator0 = new Delegator(nativeArray0);
      long long0 = NativeArray.getLengthProperty(context0, delegator0);
      assertEquals(12L, long0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1431655759L);
      // Undeclared exception!
      try { 
        nativeArray0.getInstanceIdValue(8);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 8
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-1923L));
      // Undeclared exception!
      try { 
        nativeArray0.getInstanceIdName(2689);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2689
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      nativeArray0.setInstanceIdAttributes(1, 2);
      assertEquals(0L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1431655764L);
      nativeArray0.setInstanceIdAttributes(82, (-5));
      assertEquals(1431655764L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      Predicate<NativeContinuation> predicate0 = Predicate.isEqual((Object) nativeArray0);
      Predicate<NativeContinuation> predicate1 = predicate0.negate();
      Predicate<NativeContinuation> predicate2 = predicate0.or(predicate1);
      // Undeclared exception!
      try { 
        nativeArray0.removeIf(predicate2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147478667L);
      UnaryOperator<NativeJavaTopPackage> unaryOperator0 = UnaryOperator.identity();
      // Undeclared exception!
      try { 
        nativeArray0.replaceAll(unaryOperator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(19L);
      // Undeclared exception!
      try { 
        nativeArray0.add((Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1L);
      // Undeclared exception!
      try { 
        nativeArray0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(4);
      // Undeclared exception!
      try { 
        nativeArray0.remove(8);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-2248L));
      // Undeclared exception!
      try { 
        nativeArray0.addAll(1381, (Collection) nativeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test088()  throws Throwable  {
      int int0 = NativeArray.getMaximumInitialCapacity();
      assertEquals(10000, int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2);
      // Undeclared exception!
      try { 
        nativeArray0.subList(1, 4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483647L);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        nativeArray0.retainAll(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(4);
      assertEquals(4L, nativeArray0.jsGet_length());
      
      Object[] objectArray0 = nativeArray0.getAllIds();
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1L);
      long long0 = nativeArray0.jsGet_length();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeArray nativeArray0 = new NativeArray(1);
      // Undeclared exception!
      try { 
        nativeArray0.set(0, nativeContinuation0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(4);
      LinkedList<IdFunctionObject> linkedList0 = new LinkedList<IdFunctionObject>();
      // Undeclared exception!
      try { 
        nativeArray0.addAll((Collection) linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      Integer[] integerArray0 = nativeArray0.getIndexIds();
      NativeArray nativeArray1 = new NativeArray(4503599627370496L);
      // Undeclared exception!
      try { 
        nativeArray1.toArray((Object[]) integerArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.exportAsJSClass(188, (Scriptable) null, false);
      Context context0 = Context.enter();
      nativeArray0.getOwnPropertyDescriptor(context0, nativeArray0);
      assertFalse(nativeArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(4);
      Object[] objectArray0 = nativeArray0.toArray();
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1018L);
      Double double0 = new Double((-1988.0));
      // Undeclared exception!
      try { 
        nativeArray0.add((-1443), (Object) double0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      // Undeclared exception!
      try { 
        nativeArray0.remove((Object) nativeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(19L);
      // Undeclared exception!
      try { 
        nativeArray0.removeAll((Collection) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      NativeArray.setMaximumInitialCapacity(4);
  }
}

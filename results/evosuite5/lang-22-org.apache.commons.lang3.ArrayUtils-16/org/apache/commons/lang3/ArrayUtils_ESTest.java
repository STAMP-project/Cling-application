/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 16:31:11 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Map;
import org.apache.commons.lang3.ArrayUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)93;
      doubleArray0[1] = (double) 501L;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {93.0, 501.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      boolean boolean1 = ArrayUtils.contains((byte[]) null, (byte)10);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.contains(doubleArray0, 1.0);
      assertArrayEquals(new double[] {93.0, 501.0}, doubleArray0, 0.01);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(2, doubleArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
      
      Integer integer0 = new Integer((-316));
      assertNotNull(integer0);
      assertEquals((-316), (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType("java.class.path", integer0);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-316);
      floatArray0[1] = (float) (-316);
      floatArray0[2] = (float) (-316);
      floatArray0[3] = (float) (-316);
      floatArray0[4] = (float) (-316);
      floatArray0[5] = (float) (-316);
      floatArray0[6] = (float) (-316);
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-316.0F));
      assertArrayEquals(new float[] {(-316.0F), (-316.0F), (-316.0F), (-316.0F), (-316.0F), (-316.0F), (-316.0F)}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(7, floatArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      int int0 = ArrayUtils.lastIndexOf(charArray0, ';', (-316));
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[1] = 64;
      intArray0[2] = (-2526);
      intArray0[3] = 558;
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = 988;
      intArray0[6] = (-2926);
      intArray0[7] = 4545;
      intArray0[8] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 988);
      assertArrayEquals(new int[] {0, 64, (-2526), 558, Integer.MAX_VALUE, 988, (-2926), 4545, 0}, intArray0);
      assertEquals(5, int0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 13);
      assertNull(intArray0);
      
      long long0 = Integer.toUnsignedLong(2896);
      assertEquals(2896L, long0);
      
      boolean[] booleanArray0 = new boolean[16];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2896, 0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(16, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, 100);
      assertEquals((-1), int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-903));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-903), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("java.awt.fonts");
      assertNull(integer2);
      
      integerArray0[2] = null;
      Integer integer3 = new Integer((int) integerArray0[1]);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertEquals((-903), (int)integer3);
      assertEquals(5, integerArray0.length);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals((-1), (int)integer4);
      assertEquals(5, integerArray0.length);
      
      integerArray0[4] = integer4;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertNotNull(integerArray1);
      assertEquals(5, integerArray1.length);
      assertEquals(5, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Float float0 = new Float(4017.555620892);
      assertNotNull(float0);
      assertEquals(4017.5557F, (float)float0, 0.01F);
      
      Float float1 = new Float((-1.0F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      ArrayUtils.reverse((double[]) null);
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '!', 100);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = ArrayUtils.clone((Object[]) floatArray0);
      assertNotSame(floatArray0, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 778);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      Character[] characterArray0 = new Character[4];
      char char0 = 'Z';
      Character character0 = new Character('Z');
      assertNotNull(character0);
      assertTrue(character0.equals((Object)char0));
      assertEquals('Z', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('Z', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('v');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('v', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('C');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertEquals('C', (char)character3);
      
      characterArray0[3] = character3;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(4, characterArray0.length);
      assertEquals(4, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[0] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(2, booleanArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertSame(booleanArray0, booleanArray2);
      assertSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) booleanArray1, 0, (Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 731;
      intArray0[1] = (-627);
      intArray0[3] = (-383);
      intArray0[4] = (-794);
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte)94;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)94, (byte)95, (byte)84, (byte)94, (byte)1, (byte) (-1), (byte)11}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1938, 3);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean2 = ArrayUtils.isEmpty(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)94;
      boolean boolean3 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {94.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Integer integer0 = new Integer((-1073741824));
      assertNotNull(integer0);
      assertEquals((-1073741824), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-1.0F));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      Character character0 = new Character('1');
      assertNotNull(character0);
      assertEquals('1', (char)character0);
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertArrayEquals(new char[] {'1'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-316), (-3027));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1901.648);
      doubleArray0[2] = (-729.464036810478);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1566.997);
      doubleArray0[6] = 1005.0547626612365;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {1005.0547626612365, (-1566.997), (-1.0), 0.0, (-729.464036810478), (-1901.648), 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '7', (-1416));
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1416);
      floatArray0[1] = (float) (-1416);
      floatArray0[2] = (float) '7';
      floatArray0[3] = (float) (-1416);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {(-1416.0F), (-1416.0F), 55.0F, (-1416.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      Object[] objectArray0 = ArrayUtils.clone((Object[]) floatArray1);
      assertArrayEquals(new float[] {(-1416.0F), (-1416.0F), 55.0F, (-1416.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertEquals(4, objectArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)46;
      shortArray0[1] = (short) (-751);
      shortArray0[2] = (short)100;
      shortArray0[3] = (short)48;
      shortArray0[4] = (short)178;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)46, (short) (-751), (short)100, (short)48, (short)178}, shortArray0);
      assertArrayEquals(new short[] {(short)46, (short) (-751), (short)100, (short)48, (short)178, (short)46, (short) (-751), (short)100, (short)48, (short)178}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      
      int int1 = ArrayUtils.indexOf((char[]) null, 'g', (int) (short) (-751));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = 'y';
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '\u0000';
      longArray0[1] = (long) '\u0000';
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'y';
      doubleArray0[3] = (double) '\u0000';
      doubleArray0[4] = 121.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 903.65399652, 3138.2396267262648);
      assertArrayEquals(new double[] {121.0, 0.0, 0.0, 0.0, 121.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'y';
      intArray0[1] = 1794;
      intArray0[2] = (int) 'y';
      intArray0[3] = (int) 'y';
      intArray0[4] = (int) 'y';
      intArray0[5] = (int) '/';
      intArray0[6] = (int) '/';
      intArray0[7] = (int) 'y';
      intArray0[8] = (int) '/';
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {121, 1794, 121, 121, 121, 47, 47, 121, 47}, intArray1);
      assertArrayEquals(new int[] {121, 1794, 121, 121, 121, 47, 47, 121, 47}, intArray0);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 469.39120433272, (double) 47);
      assertArrayEquals(new double[] {121.0, 0.0, 0.0, 0.0, 121.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {121, 1794, 121, 121, 121, 47, 47, 121, 47}, intArray0);
      assertSame(intArray0, intArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf((int[]) null, 1747, (-393));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 57, 2);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, (double) 2, 2, (-905.779919));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 585L;
      longArray0[2] = 1215L;
      longArray0[3] = 3466L;
      longArray0[4] = 1L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 585L, 1215L, 3466L, 1L}, longArray0);
      assertArrayEquals(new long[] {0L, 585L, 1215L, 3466L, 1L, 0L, 585L, 1215L, 3466L, 1L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(5, longArray0.length);
      assertEquals(10, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf((int[]) null, 1747, (-393));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 57, 2);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, (double) 2, 2, (-905.779919));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, true);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'S';
      charArray0[2] = '{';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '{');
      assertArrayEquals(new char[] {'\u0000', 'S', '{'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'S'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      
      boolean boolean2 = ArrayUtils.isEmpty((short[]) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '5';
      charArray0[1] = '~';
      charArray0[2] = 'g';
      charArray0[3] = '<';
      charArray0[4] = '3';
      charArray0[5] = 'D';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'5', '~', 'g', '<', '3', 'D'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-511);
      intArray0[2] = 1668;
      long[] longArray0 = new long[9];
      longArray0[0] = 1L;
      longArray0[1] = (-611L);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-511);
      longArray0[4] = (long) (-511);
      longArray0[5] = (long) 1668;
      longArray0[6] = (long) 1668;
      longArray0[7] = (long) 1668;
      longArray0[8] = (long) (-511);
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)387);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean boolean2 = ArrayUtils.contains(longArray0, 3094L);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(0, longArray0.length);
      
      boolean boolean3 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 501L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {501L}, longArray0);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 501L;
      objectArray0[1] = (Object) 501L;
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(2, objectArray0.length);
      assertEquals(4, objectArray1.length);
      
      Long[] longArray1 = new Long[7];
      longArray1[0] = (Long) 501L;
      longArray1[1] = (Long) 501L;
      longArray1[2] = (Long) 501L;
      longArray1[3] = (Long) 501L;
      longArray1[4] = (Long) 501L;
      longArray1[5] = (Long) 501L;
      longArray1[6] = (Long) 501L;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertArrayEquals(new long[] {501L, 501L, 501L, 501L, 501L, 501L, 501L}, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short)1477);
      assertNotNull(short0);
      assertEquals((short)1477, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)1477, (short)short1);
      assertEquals(4, shortArray0.length);
      
      shortArray0[1] = short1;
      Short short2 = Short.valueOf((short)1477);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short)1477, (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) shortArray0[2]);
      assertNotNull(short3);
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short0));
      assertEquals((short)1477, (short)short3);
      assertEquals(4, shortArray0.length);
      
      shortArray0[3] = short3;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-855));
      assertArrayEquals(new short[] {(short)1477, (short)1477, (short)1477, (short)1477}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.clone(shortArray1);
      assertArrayEquals(new short[] {(short)1477, (short)1477, (short)1477, (short)1477}, shortArray1);
      assertArrayEquals(new short[] {(short)1477, (short)1477, (short)1477, (short)1477}, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray2.length);
      
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-66), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(5, byteArray0.length);
      assertEquals(10, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      
      objectArray0[3] = object3;
      int int0 = ArrayUtils.indexOf(objectArray0, object0, 10);
      assertNotSame(object0, object1);
      assertNotSame(object0, object3);
      assertNotSame(object0, object2);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object0.equals((Object)object3));
      assertFalse(object0.equals((Object)object2));
      assertEquals((-1), int0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)48;
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-25), (byte)21, (byte)48}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, byteArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte) (-25);
      doubleArray0[1] = (double) (byte)21;
      doubleArray0[2] = (double) (byte) (-25);
      doubleArray0[3] = (double) (byte)48;
      doubleArray0[4] = (double) (byte)21;
      doubleArray0[5] = (double) (byte) (-25);
      boolean boolean2 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-25.0), 21.0, (-25.0), 48.0, 21.0, (-25.0)}, doubleArray0, 0.01);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(6, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray1.length);
      
      Byte byte0 = Byte.valueOf((byte) (-115));
      assertNotNull(byte0);
      assertEquals((byte) (-115), (byte)byte0);
      
      Byte[] byteArray2 = new Byte[0];
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotNull(byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[4] = 1.0F;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-115);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-115)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-115)}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char[] charArray0 = new char[1];
      long[] longArray0 = new long[5];
      longArray0[2] = (long) '\u0000';
      longArray0[3] = (long) '\u0000';
      longArray0[4] = (long) '\u0000';
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(5, longArray0.length);
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 512;
      intArray0[1] = 512;
      intArray0[3] = 512;
      intArray0[4] = (int) '\u0000';
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray1.length);
      
      boolean boolean3 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(1, charArray0.length);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean4 = ArrayUtils.isSameLength(charArray1, (char[]) null);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean4);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = 'y';
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '\u0000';
      longArray0[1] = (long) '\u0000';
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'y';
      doubleArray0[2] = (double) 'y';
      doubleArray0[3] = (double) '\u0000';
      doubleArray0[4] = 5364.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 903.65399652, 3138.2396267262648);
      assertArrayEquals(new double[] {121.0, 0.0, 121.0, 0.0, 5364.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'y';
      intArray0[1] = 1794;
      intArray0[2] = (int) 'y';
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = (int) 'y';
      intArray0[5] = (int) '/';
      intArray0[6] = (int) '/';
      intArray0[7] = (int) 'y';
      intArray0[8] = (int) '/';
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {121, 1794, 121, Integer.MAX_VALUE, 121, 47, 47, 121, 47}, intArray1);
      assertArrayEquals(new int[] {121, 1794, 121, Integer.MAX_VALUE, 121, 47, 47, 121, 47}, intArray0);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {121.0, 0.0, 121.0, 0.0, 5364.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(5, doubleArray0.length);
      
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray2.length);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)109);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Short[] shortArray0 = new Short[1];
      try { 
        Short.decode("860Z@s");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"860Z@s\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, doubleArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      charArray0[1] = 'X';
      charArray0[2] = '$';
      boolean boolean2 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'M', 'X', '$'}, charArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(3, charArray0.length);
      
      boolean boolean3 = ArrayUtils.contains(doubleArray0, (double) '$', (double) 'M');
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '$';
      intArray0[2] = (int) '$';
      boolean boolean4 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {36, 0, 36}, intArray0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1248.4226357;
      doubleArray0[1] = 1373.4003262093238;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1248.4226357, 1373.4003262093238, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1248.4226357, 1373.4003262093238, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean3 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1248.4226357, 1373.4003262093238, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = new int[6];
      intArray0[0] = (-5211);
      intArray0[1] = (-81);
      intArray0[2] = 6;
      intArray0[3] = (-5211);
      boolean boolean0 = ArrayUtils.contains(intArray0, 6);
      assertArrayEquals(new int[] {(-5211), (-81), 6, (-5211), 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean(true);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      
      Boolean boolean3 = Boolean.FALSE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(2, booleanArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray2));
      assertSame(booleanArray0, booleanArray2);
      assertSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray2, true);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray2));
      assertSame(booleanArray0, booleanArray2);
      assertSame(booleanArray2, booleanArray0);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int2 = ArrayUtils.lastIndexOf(intArray0, (-2789), 0);
      assertArrayEquals(new int[] {1, 0, 0}, intArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short)1477);
      assertNotNull(short0);
      assertEquals((short)1477, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)1477, (short)short1);
      assertEquals(4, shortArray0.length);
      
      shortArray0[1] = shortArray0[0];
      Short short2 = Short.valueOf((short)1477);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short)1477, (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) shortArray0[2]);
      assertNotNull(short3);
      assertTrue(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short0));
      assertEquals((short)1477, (short)short3);
      assertEquals(4, shortArray0.length);
      
      shortArray0[3] = short3;
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      int int0 = Short.toUnsignedInt((short) shortArray0[0]);
      assertEquals(1477, int0);
      assertEquals(4, shortArray0.length);
      
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((-1880.3662F));
      assertNotNull(float0);
      assertEquals((-1880.3662F), (float)float0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) shortArray0[1]);
      assertArrayEquals(new float[] {1477.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\u0016';
      charArray0[1] = '\u0016';
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray1.length);
      
      int int1 = ArrayUtils.indexOf((Object[]) floatArray0, (Object) boolean0, (int) shortArray0[1]);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(4, shortArray0.length);
      assertEquals(1, floatArray0.length);
      
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)2013);
      assertArrayEquals(new short[] {(short)1477, (short)1477, (short)1477, (short)1477}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'\u0016', '\u0016'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(boolean1);
      assertEquals(2, charArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf(floatArray1, 1.0F, (int) shortArray0[1]);
      assertArrayEquals(new float[] {1477.0F}, floatArray1, 0.01F);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(4, shortArray0.length);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-437);
      shortArray0[3] = (short) (-437);
      shortArray0[4] = (short) (-437);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-1);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-437), (short) (-437), (short) (-437), (short)1, (short)1}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)104;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)46);
      assertArrayEquals(new byte[] {(byte)46, (byte)104}, byteArray0);
      assertEquals(0, int0);
      assertEquals(2, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-437), (short) (-437), (short) (-437), (short)1, (short)1}, shortArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 46);
      assertArrayEquals(new char[] {'Z', 'Z'}, charArray0);
      assertArrayEquals(new char[] {'Z', 'Z'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float(605.54604071086);
      assertNotNull(float0);
      assertEquals(605.546F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1.5);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) 3641.4075F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(3641.4075F, (float)float2, 0.01F);
      
      boolean boolean0 = Float.isFinite((float) floatArray0[0]);
      assertTrue(boolean0);
      assertEquals(5, floatArray0.length);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[1]);
      assertNotNull(float3);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(1.5F, (float)float3, 0.01F);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 512, 512);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1.0F));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(8, booleanArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-819);
      shortArray0[1] = (short)1189;
      shortArray0[2] = (short)4479;
      shortArray0[3] = (short)40;
      shortArray0[4] = (short)480;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(43.919474321609);
      assertNotNull(double0);
      assertEquals(43.919474321609, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(43.919474321609, (double)double1, 0.01);
      assertEquals(5, doubleArray0.length);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((short) (-1));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-1.0), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-3536.09819709537));
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((-3536.09819709537), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-2175.35304179));
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((-2175.35304179), (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {43.919474321609, 43.919474321609, (-1.0), (-3536.09819709537), (-2175.35304179)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) double0, 1);
      assertEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double4, 0.01);
      assertEquals(1, int0);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {43.919474321609, 43.919474321609, (-1.0), (-3536.09819709537), (-2175.35304179)}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-2808), 467);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)458;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)458}, shortArray0);
      assertTrue(boolean0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1, 1);
      assertArrayEquals(new char[] {'q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'q';
      objectArray0[1] = (Object) 'q';
      ArrayUtils.reverse(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = 4.04407873178884;
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 4.04407873178884, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)910;
      shortArray0[1] = (short)458;
      shortArray0[2] = (short)910;
      shortArray0[1] = (short) (-835);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)2, (byte)2, (byte)23, (byte) (-115), (byte)1, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)2, (byte)2, (byte)23, (byte) (-115), (byte)1, (byte)1}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("@o`0v2H[6)c)U");
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3);
      
      booleanArray0[3] = boolean3;
      ArrayUtils.reverse(byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte) (-115), (byte)23, (byte)2, (byte)2, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte) (-115), (byte)23, (byte)2, (byte)2, (byte)1}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)2, 439);
      assertArrayEquals(new short[] {(short)910, (short) (-835), (short)910, (short)0}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(4, shortArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'h';
      charArray0[1] = 'l';
      charArray0[2] = 'K';
      charArray0[3] = 'u';
      char[] charArray1 = ArrayUtils.add(charArray0, 'h');
      assertArrayEquals(new char[] {'h', 'l', 'K', 'u'}, charArray0);
      assertArrayEquals(new char[] {'h', 'l', 'K', 'u', 'h'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Integer integer0 = new Integer((-1073741824));
      assertNotNull(integer0);
      assertEquals((-1073741824), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1073741824);
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-1.0F));
      assertArrayEquals(new float[] {(-1.07374182E9F)}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      int int0 = new Character('1');
      assertEquals('1', int0);
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertArrayEquals(new char[] {'1'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2884, (-3027));
      assertArrayEquals(new float[] {(-1.07374182E9F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      ArrayUtils.reverse((long[]) null);
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray1 = new boolean[3];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray2.length);
      
      short[] shortArray1 = ArrayUtils.subarray((short[]) null, 5, 57);
      assertNull(shortArray1);
      
      Short[] shortArray2 = ArrayUtils.nullToEmpty((Short[]) null);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray2.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = ", Length: 0";
      // Undeclared exception!
      try { 
        ArrayUtils.add(stringArray0, 57, ", Length: 0");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 57, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.toArray(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false);
      assertEquals((-1), int0);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(boolean0);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'B';
      charArray0[1] = '\'';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-2173), (-2173));
      assertArrayEquals(new char[] {'B', '\''}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertFalse(boolean0);
      assertEquals(2, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'B';
      doubleArray0[1] = (double) 'B';
      doubleArray0[2] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), 2925);
      assertArrayEquals(new double[] {66.0, 66.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {66.0, 66.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.add((short[]) null, (short) (-3478));
      assertArrayEquals(new short[] {(short) (-3478)}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-3478);
      doubleArray0[1] = (double) (short) (-3478);
      doubleArray0[2] = (double) (short) (-3478);
      doubleArray0[3] = (double) (short) (-3478);
      doubleArray0[4] = (double) (short) (-3478);
      doubleArray0[5] = (double) (short) (-3478);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) (short) (-3478);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-3478.0));
      assertArrayEquals(new double[] {(-3478.0), (-3478.0), (-3478.0), (-3478.0), (-3478.0), (-3478.0), 0.0, (-3478.0)}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-330.1138804896572);
      doubleArray0[1] = (-330.1138804896572);
      doubleArray0[2] = (-330.1138804896572);
      doubleArray0[3] = (-330.1138804896572);
      doubleArray0[4] = 0.0;
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (-1), (-432));
      assertNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)9;
      shortArray0[1] = (short)3231;
      shortArray0[2] = (short) (-2325);
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)9, (short)3231, (short) (-2325)}, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, shortArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short)9;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (short) (-2325);
      objectArray0[3] = (Object) (short) (-2325);
      objectArray0[4] = (Object) (short)9;
      objectArray0[5] = (Object) (short)9;
      objectArray0[6] = (Object) (short)3231;
      objectArray0[7] = (Object) (short)9;
      objectArray0[8] = (Object) (short)9;
      boolean boolean2 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, byteArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1446);
      shortArray0[1] = (short) (-1558);
      shortArray0[2] = (short) (-3);
      shortArray0[3] = (short)4102;
      shortArray0[4] = (short)1061;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-3), 2144069524);
      assertArrayEquals(new short[] {(short) (-1446), (short) (-1558), (short) (-3), (short)4102, (short)1061}, shortArray0);
      assertEquals(2, int0);
      assertEquals(5, shortArray0.length);
      
      boolean boolean2 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(0, byteArray0.length);
      
      boolean boolean3 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-1446), (short) (-1558), (short) (-3), (short)4102, (short)1061}, shortArray0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      assertEquals(5, shortArray0.length);
      
      boolean boolean4 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4);
      assertEquals(0, byteArray0.length);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      Double double0 = new Double(1243.4226357);
      assertNotNull(double0);
      assertEquals(1243.4226357, (double)double0, 0.01);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[1];
      long[] longArray0 = new long[5];
      longArray0[2] = (long) '\u0000';
      longArray0[3] = (long) '\u0000';
      longArray0[4] = (long) '\u0000';
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(5, longArray0.length);
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      
      int[] intArray0 = new int[5];
      intArray0[4] = (int) '\u0000';
      int[] intArray1 = ArrayUtils.add(intArray0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      
      boolean boolean3 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)46;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)46}, shortArray0);
      assertArrayEquals(new short[] {(short)46}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = ArrayUtils.add((Object[]) null, object0);
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
      
      short[] shortArray2 = ArrayUtils.add(shortArray0, (short)2);
      assertArrayEquals(new short[] {(short)46}, shortArray0);
      assertArrayEquals(new short[] {(short)46, (short)2}, shortArray2);
      assertSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray2.length);
      
      Short[] shortArray3 = new Short[3];
      shortArray3[0] = (Short) (short)46;
      Float float0 = new Float((-1403.0F));
      assertNotNull(float0);
      assertEquals((-1403.0F), (float)float0, 0.01F);
      
      Float float1 = new Float((float) (short)46);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(46.0F, (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float1;
      floatArray0[1] = float1;
      floatArray0[2] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {46.0F, 46.0F, (-1403.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte1 = (byte)0;
      Short short0 = new Short((short) (-1643));
      assertNotNull(short0);
      assertEquals((short) (-1643), (short)short0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      int int0 = (-6667);
      // Undeclared exception!
      try { 
        ArrayUtils.remove((short[]) null, (-6667));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -6667, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Integer integer0 = new Integer((-1073741824));
      assertNotNull(integer0);
      assertEquals((-1073741824), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-23));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)94;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)94, (byte)94, (byte)94}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)94, (byte)94, (byte)94}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-115);
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-115), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Float float0 = new Float(605.54604071086);
      assertNotNull(float0);
      assertEquals(605.546F, (float)float0, 0.01F);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1323.4899F;
      floatArray0[1] = 1107.0F;
      floatArray0[2] = 1323.4899F;
      floatArray0[3] = 1323.4899F;
      floatArray0[4] = 1323.4899F;
      floatArray0[5] = 1323.4899F;
      floatArray0[6] = 1323.4899F;
      int int0 = ArrayUtils.indexOf(floatArray0, 1323.4899F, (-3211));
      assertArrayEquals(new float[] {1323.4899F, 1107.0F, 1323.4899F, 1323.4899F, 1323.4899F, 1323.4899F, 1323.4899F}, floatArray0, 0.01F);
      assertEquals(0, int0);
      assertEquals(7, floatArray0.length);
      
      Double double0 = new Double(1323.4899F);
      assertNotNull(double0);
      assertEquals(1323.4898681640625, (double)double0, 0.01);
      
      Double double1 = new Double(2421.31);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(2421.31, (double)double1, 0.01);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Character character0 = Character.valueOf('5');
      assertNotNull(character0);
      assertEquals('5', (char)character0);
      
      Character character1 = Character.valueOf('5');
      assertNotNull(character1);
      assertEquals('5', (char)character1);
      
      Character character2 = new Character('5');
      assertNotNull(character2);
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertEquals('5', (char)character2);
      
      Character character3 = new Character('B');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertEquals('B', (char)character3);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = character3;
      boolean boolean0 = Character.isIdeographic(0);
      assertFalse(boolean0);
      
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character3;
      characterArray0[4] = character3;
      characterArray0[5] = character2;
      characterArray0[6] = character1;
      characterArray0[7] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '|');
      assertArrayEquals(new char[] {'B', '5', '5', 'B', 'B', '5', '5', '5'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1.0F));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)48;
      longArray0[2] = (long) (byte)48;
      longArray0[3] = (long) (byte)48;
      longArray0[4] = (long) (byte) (-115);
      longArray0[5] = (long) (byte)0;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, (-115L), 48L, 48L, 0L, 48L}, longArray0);
      assertEquals(6, longArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-115);
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short)849;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)48;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-115), (short)0, (short)849, (short)0, (short)48}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) shortArray1, (Object[]) shortArray1);
      assertArrayEquals(new short[] {(short) (-115), (short)0, (short)849, (short)0, (short)48}, shortArray0);
      assertTrue(boolean0);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      
      Double double0 = new Double(48L);
      assertNotNull(double0);
      assertEquals(48.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) null, (Object[]) null);
      assertNull(objectArray0);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 322L;
      longArray0[1] = 0L;
      longArray0[2] = 1086L;
      longArray0[3] = (-2153L);
      longArray0[4] = 0L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertArrayEquals(new long[] {322L, 0L, 1086L, (-2153L), 0L}, longArray0);
      assertEquals(4, int0);
      assertEquals(5, longArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-5030);
      shortArray0[1] = (short)1;
      short[] shortArray1 = ArrayUtils.add(shortArray0, 0, (short)1486);
      assertArrayEquals(new short[] {(short) (-5030), (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1486, (short) (-5030), (short)1}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-2153L);
      floatArray0[1] = (float) (short) (-5030);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 1086L;
      int int1 = ArrayUtils.indexOf(floatArray0, 0.0F, 0);
      assertArrayEquals(new float[] {(-2153.0F), (-5030.0F), 0.0F, 1086.0F}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      assertEquals(4, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 322L;
      doubleArray0[1] = (double) (-2153L);
      doubleArray0[2] = (double) 0.0F;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {322.0, (-2153.0), 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) (short) (-5030));
      assertArrayEquals(new double[] {322.0, (-2153.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {322.0, (-2153.0), 0.0, (-5030.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2489.2);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2313.61158463;
      doubleArray0[4] = 747.9515160307043;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 5440.23200626;
      doubleArray0[7] = (-1263.57);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0, (-2489.2), 0.0, 2313.61158463, 747.9515160307043, 0.0, 5440.23200626, (-1263.57)}, doubleArray0, 0.01);
      assertEquals(5, int0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[10];
      longArray0[0] = (long) (-1);
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1L);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, booleanArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Double double0 = new Double((-947.99));
      assertNotNull(double0);
      assertEquals((-947.99), (double)double0, 0.01);
      
      Double double1 = new Double(30.55941228598098);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(30.55941228598098, (double)double1, 0.01);
      
      boolean[] booleanArray1 = new boolean[4];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[1] = false;
      booleanArray1[3] = false;
      boolean[] booleanArray2 = new boolean[6];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      booleanArray2[2] = true;
      booleanArray2[3] = false;
      booleanArray2[4] = false;
      booleanArray2[5] = false;
      boolean[] booleanArray3 = ArrayUtils.addAll(booleanArray1, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true, false, false, false}, booleanArray3));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotNull(booleanArray3);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertEquals(4, booleanArray1.length);
      assertEquals(6, booleanArray2.length);
      assertEquals(10, booleanArray3.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)0, (byte)0, (byte)0, (byte)5, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(5, byteArray0.length);
      assertEquals(10, byteArray1.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)5;
      shortArray0[1] = (short) (byte)5;
      shortArray0[2] = (short) (byte)5;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, (short[]) null);
      assertArrayEquals(new short[] {(short)5, (short)5, (short)5}, shortArray0);
      assertArrayEquals(new short[] {(short)5, (short)5, (short)5}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      Integer integer0 = new Integer(16);
      assertNotNull(integer0);
      assertEquals(16, (int)integer0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      Long[] longArray2 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray2);
      assertEquals(0, longArray2.length);
      
      boolean boolean1 = ArrayUtils.contains((short[]) null, (short) (-1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '+';
      charArray0[1] = 'B';
      charArray0[2] = ';';
      charArray0[3] = '*';
      charArray0[4] = '`';
      charArray0[5] = '`';
      charArray0[6] = 'P';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'+', 'B', ';', '*', '`', '`', 'P'}, charArray0);
      assertTrue(boolean0);
      assertEquals(7, charArray0.length);
      
      Character character0 = Character.valueOf(';');
      assertNotNull(character0);
      assertEquals(';', (char)character0);
      
      Character character1 = new Character(';');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals(';', (char)character1);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, booleanArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(object0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 501L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {501L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(6, longArray0.length);
      
      int[] intArray0 = new int[1];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 501L;
      doubleArray0[2] = (double) 501L;
      doubleArray0[3] = (double) 501L;
      Double[] doubleArray1 = new Double[0];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 501.0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray2, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      charArray0[3] = 'q';
      charArray0[4] = 'b';
      charArray0[5] = 'q';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1, 1);
      assertArrayEquals(new char[] {'q', 'q', 'q', 'q', 'b', 'q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(6, charArray0.length);
      assertEquals(0, charArray1.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-521.114300984), 1.5);
      assertEquals((-1), int0);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray1);
      assertArrayEquals(new char[] {'q', 'q', 'q', 'q', 'b', 'q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertSame(charArray1, charArray2);
      assertSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(6, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'q';
      objectArray0[1] = (Object) 'q';
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[1]);
      assertTrue(boolean0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '*';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'*'}, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      
      Byte byte0 = new Byte((byte) (-107));
      assertNotNull(byte0);
      assertEquals((byte) (-107), (byte)byte0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(1, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(booleanArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'false', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(2, booleanArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1530.0F);
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1530.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 501L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {501L}, longArray0);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      
      Character character0 = new Character('{');
      assertNotNull(character0);
      assertEquals('{', (char)character0);
      
      Character character1 = new Character('~');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('~', (char)character1);
      
      Character character2 = Character.valueOf('9');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('9', (char)character2);
      
      Character character3 = Character.valueOf('9');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertEquals('9', (char)character3);
      
      Character character4 = Character.valueOf('{');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertEquals('{', (char)character4);
      
      Character[] characterArray0 = new Character[1];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '{');
      assertArrayEquals(new char[] {'{'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, '~');
      assertArrayEquals(new char[] {'~'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte)48;
      Object[] objectArray1 = ArrayUtils.add(objectArray0, object0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(2, objectArray0.length);
      assertEquals(3, objectArray1.length);
      
      short[] shortArray2 = ArrayUtils.add(shortArray0, (short) (byte)0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray2.length);
      
      Float float0 = new Float(1736.16F);
      assertNotNull(float0);
      assertEquals(1736.16F, (float)float0, 0.01F);
      
      Float float1 = new Float((float) (byte)48);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(48.0F, (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {48.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)16);
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)93, (byte)48, (byte)48, (byte)0, (byte)40, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(8, byteArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'x', 'x', 'x'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(charArray0, 'x');
      assertArrayEquals(new char[] {'x', 'x', 'x'}, charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (int) (byte)48);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray0, objectArray0);
      assertFalse(boolean0);
      assertEquals(1, integerArray0.length);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Float float0 = new Float((-704.64246F));
      assertNotNull(float0);
      assertEquals((-704.64246F), (float)float0, 0.01F);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (-704.64246F), (double) (-704.64246F));
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.add((short[]) null, (short) (-3478));
      assertArrayEquals(new short[] {(short) (-3478)}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)45, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = (Object) (byte)0;
      objectArray0[5] = (Object) (byte)0;
      objectArray0[6] = (Object) (byte)0;
      objectArray0[7] = (Object) (byte)0;
      boolean boolean1 = ArrayUtils.isNotEmpty(objectArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(8, objectArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      charArray0[1] = '#';
      charArray0[2] = '\'';
      charArray0[3] = '4';
      charArray0[4] = 'x';
      charArray0[5] = 'F';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'F', (int) (byte)45);
      assertArrayEquals(new char[] {'O', '#', '\'', '4', 'x', 'F'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[0] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false, true, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(8, booleanArray0.length);
      
      double[] doubleArray0 = new double[1];
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)774;
      shortArray0[1] = (short)64;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)2601;
      boolean boolean1 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)774, (short)64, (short) (-1), (short)2601, (short)0}, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(5, shortArray0.length);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 0.0F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-2725.187F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 4819;
      intArray0[1] = 4819;
      intArray0[2] = 4819;
      intArray0[3] = 4819;
      intArray0[4] = 4819;
      intArray0[5] = 4819;
      intArray0[6] = 4819;
      intArray0[7] = 4819;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 4819);
      assertArrayEquals(new int[] {4819, 4819, 4819, 4819, 4819, 4819, 4819, 4819}, intArray0);
      assertArrayEquals(new int[] {4819, 4819, 4819, 4819, 4819, 4819, 4819}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)117;
      intArray0[7] = (int) (byte)117;
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)42, (byte)16, (byte)42, (byte)117, (byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(5, byteArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)117;
      shortArray0[1] = (short) (byte)16;
      shortArray0[2] = (short) (byte)42;
      shortArray0[3] = (short) (byte)42;
      shortArray0[4] = (short) (byte)42;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertArrayEquals(new short[] {(short)117, (short)16, (short)42, (short)42, (short)42}, shortArray0);
      assertArrayEquals(new short[] {(short)117, (short)16, (short)42, (short)42, (short)42}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) integerArray0, (Object[]) null);
      assertNotSame(integerArray0, objectArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotNull(objectArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertEquals(0, integerArray0.length);
      assertEquals(0, objectArray0.length);
      
      boolean[] booleanArray2 = new boolean[0];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray2, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, booleanArray2.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 113L;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(5, booleanArray0.length);
      
      Double double0 = new Double(113L);
      assertNotNull(double0);
      assertEquals(113.0, (double)double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      Double double2 = new Double((-889.0165674613));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-889.0165674613), (double)double2, 0.01);
      
      Double double3 = new Double((-309.0));
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((-309.0), (double)double3, 0.01);
      
      Double double4 = new Double(4041.8936232462647);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals(4041.8936232462647, (double)double4, 0.01);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double3;
      doubleArray0[1] = double1;
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {(-309.0), 0.0, (-889.0165674613)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {(-309.0), 0.0, (-889.0165674613)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-309.0), 0.0, (-889.0165674613), (-309.0), 0.0, (-889.0165674613)}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(3, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray1);
      
      double[] doubleArray3 = ArrayUtils.nullToEmpty(doubleArray1);
      assertArrayEquals(new double[] {(-309.0), 0.0, (-889.0165674613)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-309.0), 0.0, (-889.0165674613)}, doubleArray3, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray3.length);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 585, (-488));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray1);
      
      float[] floatArray0 = new float[11];
      floatArray0[0] = (float) (-488);
      floatArray0[1] = (-485.621F);
      floatArray0[2] = (float) 585;
      floatArray0[3] = (float) (-488);
      floatArray0[4] = (float) 107;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-485.621F));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(11, floatArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Boolean boolean0 = Boolean.valueOf("java.vendor");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Float float0 = Float.valueOf((float) 1);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((double) 1);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      Float float2 = new Float(107.0F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(107.0F, (float)float2, 0.01F);
      
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray1);
      
      long[] longArray2 = ArrayUtils.removeElement((long[]) null, 1696L);
      assertNull(longArray2);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 585;
      intArray0[1] = 585;
      intArray0[2] = (-488);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {585, 585, (-488)}, intArray0);
      assertArrayEquals(new int[] {585, 585, (-488), 585, 585, (-488)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      
      int int2 = ArrayUtils.lastIndexOf(longArray0, 1696L, 585);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'Z';
      charArray0[1] = 'T';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-393), 1856);
      assertArrayEquals(new char[] {'\u0000', 'T'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'T'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '\u0000';
      longArray0[1] = (long) 1856;
      longArray0[2] = (long) 'T';
      longArray0[3] = (long) 'T';
      longArray0[4] = (long) 1856;
      longArray0[5] = (long) 1856;
      longArray0[6] = 1180L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 1856L, 84L, 84L, 1856L, 1856L, 1180L}, longArray0);
      assertArrayEquals(new long[] {0L, 1856L, 84L, 84L, 1856L, 1856L, 1180L}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      
      long[] longArray2 = ArrayUtils.addAll(longArray1, longArray1);
      assertArrayEquals(new long[] {0L, 1856L, 84L, 84L, 1856L, 1856L, 1180L}, longArray0);
      assertArrayEquals(new long[] {0L, 1856L, 84L, 84L, 1856L, 1856L, 1180L}, longArray1);
      assertSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertEquals(14, longArray2.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-393));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(2, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray2, longArray1);
      assertArrayEquals(new long[] {0L, 1856L, 84L, 84L, 1856L, 1856L, 1180L}, longArray0);
      assertArrayEquals(new long[] {0L, 1856L, 84L, 84L, 1856L, 1856L, 1180L}, longArray1);
      assertSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(boolean0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertEquals(14, longArray2.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1856L;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 2969.0, 1061, 1869.0);
      assertArrayEquals(new double[] {1856.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean2 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte)0;
      doubleArray1[1] = (double) (byte)0;
      doubleArray1[2] = (double) (byte)0;
      doubleArray1[3] = (double) (byte)0;
      doubleArray1[4] = (double) (byte)0;
      doubleArray1[5] = (double) (byte)0;
      doubleArray1[6] = (double) (byte)0;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean boolean3 = ArrayUtils.isSameLength(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(7, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      byte[] byteArray1 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1, 1);
      assertArrayEquals(new char[] {'q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'q';
      objectArray0[1] = (Object) 'q';
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, true, false, true}, booleanArray0));
      assertEquals(1, int0);
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1783L);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte)75, (byte) (-110), (byte)0, (byte)121, (byte) (-56), (byte) (-58), (byte)87, (byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)75, (byte) (-110), (byte)0, (byte)121, (byte) (-56), (byte) (-58), (byte)87, (byte)0, (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Integer integer0 = new Integer((-1073741824));
      assertNotNull(integer0);
      assertEquals((-1073741824), (int)integer0);
      
      char[] charArray0 = new char[23];
      charArray0[0] = 'J';
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      charArray0[3] = 'J';
      charArray0[4] = 'q';
      charArray0[5] = 'q';
      charArray0[6] = 'q';
      int int0 = Integer.divideUnsigned((-23), (-23));
      assertEquals(1, int0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 560, (-2126));
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(23, charArray0.length);
      assertEquals(0, charArray1.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) integer0;
      int int1 = ArrayUtils.indexOf(objectArray0, (Object) integer0, (-2126));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf((boolean) boolean0);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean("yrQ)wAnA43_sA");
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Double double0 = new Double(1.0F);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(2, doubleArray2.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 4417L, 2125114026);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1743.54558);
      doubleArray0[1] = 851.7186342662;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1, 0.0);
      assertArrayEquals(new double[] {(-1743.54558), 851.7186342662}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1743.54558), 0.0, 851.7186342662}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      float[] floatArray0 = new float[1];
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean3 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      ArrayUtils.reverse(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, object1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(object1, object0);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertFalse(object1.equals((Object)object0));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(5, objectArray0.length);
      assertEquals(4, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = 'X';
      charArray0[2] = ']';
      charArray0[3] = '>';
      charArray0[4] = '#';
      charArray0[5] = 'X';
      charArray0[6] = '2';
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertArrayEquals(new char[] {'G', 'X', ']', '>', '#', 'X', '2'}, charArray0);
      assertFalse(boolean0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2247.993F);
      floatArray0[2] = (-2247.993F);
      floatArray0[2] = (-2247.993F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1046.1167F), 5);
      assertArrayEquals(new float[] {(-2247.993F), 0.0F, (-2247.993F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(2, booleanArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(4, booleanArray0.length);
      
      Double double0 = new Double((-947.99));
      assertNotNull(double0);
      assertEquals((-947.99), (double)double0, 0.01);
      
      Double double1 = new Double((-947.99));
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-947.99), (double)double1, 0.01);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 13);
      assertNull(intArray0);
      
      long long0 = Integer.toUnsignedLong(2896);
      assertEquals(2896L, long0);
      
      boolean[] booleanArray0 = new boolean[16];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2896, 0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(16, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0);
      assertNotSame(object0, object1);
      assertNotSame(object0, object2);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object0.equals((Object)object2));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Integer[] integerArray0 = new Integer[10];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(10, integerArray0.length);
      assertEquals(10, integerArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray2, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(boolean1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) integerArray0, (Object[]) null);
      assertNotSame(integerArray0, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[7];
      floatArray0[5] = (-813.0F);
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-813.0F), 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, byteArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)0, (int) (byte)0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      
      boolean boolean2 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(3, byteArray0.length);
      
      boolean boolean3 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      assertEquals(0, shortArray0.length);
      
      boolean boolean4 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      assertEquals(3, byteArray0.length);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean5 = ArrayUtils.isSameLength(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 113L;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-38);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)36, (byte) (-59), (byte)40, (byte) (-38)}, byteArray0);
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {113L, 0L}, longArray0);
      assertArrayEquals(new long[] {113L, 0L}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      Long[] longArray2 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray2);
      assertEquals(0, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 43.919474321609;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-309.0));
      assertArrayEquals(new double[] {0.0, 0.0, 43.919474321609}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)0;
      boolean boolean3 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      assertEquals(12, byteArray0.length);
      
      boolean boolean4 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
      
      byte[] byteArray1 = ArrayUtils.addAll((byte[]) null, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(12, byteArray0.length);
      assertEquals(12, byteArray1.length);
      
      boolean boolean5 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean6 = ArrayUtils.isSameLength(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6);
      assertEquals(12, byteArray0.length);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 113L;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) 113L;
      objectArray0[4] = (Object) 113L;
      objectArray0[5] = (Object) 113L;
      objectArray0[6] = object0;
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {','}, charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '(';
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {40}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 40, 40);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[5];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = 1137;
      byte byte0 = (byte)91;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 1137, (byte)91);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1137, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(2, booleanArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = 1.5;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 1.5, (-1.0));
      assertArrayEquals(new double[] {0.0, 1.5}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, doubleArray0.length);
      
      short[] shortArray0 = new short[0];
      boolean boolean2 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(0, shortArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.5}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 501L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {501L}, longArray0);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-219);
      intArray0[1] = 100;
      intArray0[2] = (-4591);
      double[] doubleArray0 = new double[5];
      Integer integer0 = new Integer((-219));
      assertNotNull(integer0);
      assertEquals((-219), (int)integer0);
      
      Integer integer1 = new Integer(161);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(161, (int)integer1);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {(-219), 100, (-4591), 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-219), 100, (-4591), 0, 0, 0, 0}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Byte byte0 = Byte.valueOf((byte)20);
      assertNotNull(byte0);
      assertEquals((byte)20, (byte)byte0);
      
      Byte[] byteArray1 = new Byte[5];
      byteArray1[0] = byte0;
      long long0 = Byte.toUnsignedLong((byte)20);
      assertEquals(20L, long0);
      
      long long1 = Byte.toUnsignedLong((byte)2);
      assertFalse(long1 == long0);
      assertEquals(2L, long1);
      
      byteArray1[1] = byte0;
      byteArray1[2] = byte0;
      byteArray1[3] = byte0;
      byteArray1[4] = byte0;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertArrayEquals(new byte[] {(byte)20, (byte)20, (byte)20, (byte)20, (byte)20}, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(5, byteArray2.length);
      assertEquals(5, byteArray1.length);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {501L}, longArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(2, booleanArray0.length);
      
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) false;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-767);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-767)}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      Object[] objectArray1 = new Object[4];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) (short) (-767);
      objectArray1[1] = (Object) false;
      objectArray1[2] = (Object) false;
      objectArray1[3] = (Object) false;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray2 = ArrayUtils.removeElement(objectArray1, object1);
      assertNotSame(object1, object0);
      assertNotSame(objectArray2, objectArray1);
      assertNotSame(objectArray2, objectArray0);
      assertNotSame(objectArray1, objectArray2);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray2);
      assertFalse(object1.equals((Object)object0));
      assertFalse(objectArray2.equals((Object)objectArray1));
      assertFalse(objectArray2.equals((Object)objectArray0));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(4, objectArray2.length);
      assertEquals(4, objectArray1.length);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (short) (-1);
      floatArray0[3] = 68.0F;
      floatArray0[4] = (-0.6519513F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1.0F), 68.0F, (-0.6519513F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1.0F), 68.0F, (-0.6519513F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(5, floatArray0.length);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '*';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 451, (-1684));
      assertArrayEquals(new char[] {'*'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Float float0 = new Float(605.54604071086);
      assertNotNull(float0);
      assertEquals(605.546F, (float)float0, 0.01F);
      
      Float float1 = new Float(4017.555620892);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(4017.5557F, (float)float1, 0.01F);
      
      Float float2 = new Float((-1.0F));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, longArray0.length);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.lang3.builder.ToStringBuilder";
      stringArray0[2] = "";
      stringArray0[3] = "java.lang.Long";
      stringArray0[4] = "BIBrEhz5u8k|m";
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray0.length);
      assertEquals(10, stringArray1.length);
      
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-1801L);
      longArray1[1] = 4113L;
      longArray1[2] = 0L;
      boolean boolean2 = ArrayUtils.isSameLength(longArray1, (long[]) null);
      assertArrayEquals(new long[] {(-1801L), 4113L, 0L}, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      short short0 = (short)46;
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf(true);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("");
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean(false);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf("");
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5);
      
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(1, objectArray0.length);
      assertEquals(2, objectArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 0L, 2146138005);
      assertEquals((-1), int0);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '_';
      charArray0[1] = '>';
      charArray0[2] = 'h';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2348, 2348);
      assertArrayEquals(new char[] {'_', '>', 'h', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(7, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-0.6519513F));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Float float0 = new Float((-0.6519513F));
      assertNotNull(float0);
      assertEquals((-0.6519513F), (float)float0, 0.01F);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-0.6519513F);
      doubleArray0[4] = 4.04407873178884;
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {(-0.6519513130187988), 0.0, 0.0, 0.0, 4.04407873178884, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1707;
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {1707}, intArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, intArray0.length);
      
      Double double0 = new Double((-1549.999451730817));
      assertNotNull(double0);
      assertEquals((-1549.999451730817), (double)double0, 0.01);
      
      double double1 = Double.min(4.04407873178884, (-0.6519513130187988));
      assertEquals((-0.6519513130187988), double1, 0.01);
      
      Double double2 = new Double((-0.6519513130187988));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((-0.6519513130187988), (double)double2, 0.01);
      
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) 4.04407873178884;
      Double double3 = new Double(1595.654);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(1595.654, (double)double3, 0.01);
      
      doubleArray1[1] = double3;
      doubleArray1[3] = double0;
      doubleArray1[4] = (Double) (-0.6519513130187988);
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (double) (-0.6519513F));
      assertArrayEquals(new double[] {4.04407873178884, 1595.654, (-0.6519513130187988), (-1549.999451730817), (-0.6519513130187988)}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-115);
      doubleArray0[2] = (double) (byte)93;
      doubleArray0[3] = (double) (byte)93;
      doubleArray0[4] = (double) (byte) (-115);
      doubleArray0[5] = (double) (byte)93;
      doubleArray0[6] = (double) (byte) (-115);
      doubleArray0[7] = (double) (byte)0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {(-115.0), 0.0, 93.0, 93.0, (-115.0), 93.0, (-115.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = ArrayUtils.add((Object[]) null, 0, object0);
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(1, objectArray0.length);
      
      Float float0 = new Float((float) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-1369L);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[0] = (long) 0;
      longArray0[4] = (long) 0;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      Long[] longArray2 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray2);
      assertEquals(0, longArray2.length);
      
      boolean boolean1 = ArrayUtils.contains((short[]) null, (short) (-1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2);
      assertArrayEquals(new long[] {}, longArray3);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      assertNotNull(longArray3);
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-73);
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte)44, (byte)51, (byte) (-73)}, byteArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-525.2);
      doubleArray0[1] = (-673.3419666216907);
      doubleArray0[2] = (-2459.93844592515);
      doubleArray0[3] = 2086.4901329062;
      doubleArray0[4] = (-232.0);
      doubleArray0[5] = 2021.493722403;
      doubleArray0[6] = (-144.1);
      doubleArray0[7] = 197.11306914756173;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-525.2), (-673.3419666216907), (-2459.93844592515), 2086.4901329062, (-232.0), 2021.493722403, (-144.1), 197.11306914756173}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((boolean[]) null, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, floatArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 13);
      assertNull(intArray0);
      
      long long0 = Integer.toUnsignedLong(2896);
      assertEquals(2896L, long0);
      
      boolean[] booleanArray0 = new boolean[16];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2896, 2896);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(16, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Float[] floatArray2 = new Float[2];
      Float float0 = new Float((double) 2896L);
      assertNotNull(float0);
      assertEquals(2896.0F, (float)float0, 0.01F);
      
      floatArray2[0] = float0;
      Float float1 = new Float((-1.0F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      floatArray2[1] = float1;
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2);
      assertArrayEquals(new float[] {2896.0F, (-1.0F)}, floatArray3, 0.01F);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      assertNotNull(floatArray3);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertEquals(2, floatArray2.length);
      assertEquals(2, floatArray3.length);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 1L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L, 2125114026);
      assertArrayEquals(new long[] {0L, 1L}, longArray0);
      assertEquals(1, int0);
      assertEquals(2, longArray0.length);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, 1L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(1098.639929909);
      assertNotNull(float0);
      assertEquals(1098.6399F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Integer integer0 = new Integer((-686));
      assertNotNull(integer0);
      assertEquals((-686), (int)integer0);
      
      Integer integer1 = new Integer(48);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(48, (int)integer1);
      
      Integer integer2 = new Integer(48);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(48, (int)integer2);
      
      boolean boolean0 = ArrayUtils.contains((long[]) null, 478L);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.lang3.builder.EqualsBuilder";
      stringArray0[1] = "org.apache.commons.lang3.builder.EqualsBuilder";
      stringArray0[2] = "java.lang.Object";
      stringArray0[3] = "org.apache.commons.lang3.builder.EqualsBuilder";
      stringArray0[4] = "EnBzG:}v g\"(&,Yg";
      stringArray0[5] = "', is neither of type Map.Entry nor an Array";
      stringArray0[6] = "<size=";
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(7, stringArray0.length);
      assertEquals(14, stringArray1.length);
      
      String[] stringArray2 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertSame(stringArray2, stringArray0);
      assertSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(7, stringArray2.length);
      assertEquals(7, stringArray0.length);
      
      Integer integer3 = new Integer(48);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertEquals(48, (int)integer3);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(integer3, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1.0F));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      
      integerArray0[3] = integer2;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) shortArray1, (Object) null);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray1, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertEquals(5, objectArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short)0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(7, floatArray0.length);
      
      byte[] byteArray1 = new byte[0];
      boolean boolean1 = ArrayUtils.isEmpty(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1, 1);
      assertArrayEquals(new char[] {'q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'q';
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {113.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {113.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Wv`sWzMN ";
      stringArray0[1] = "0]FuIM2Gj=XjykF";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, (-4131), (-2513));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray0.length);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) booleanArray1, (Object[]) null);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2247.993F);
      floatArray0[1] = (-2247.993F);
      floatArray0[2] = (-2247.993F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1046.1167F), (-2396));
      assertArrayEquals(new float[] {(-2247.993F), (-2247.993F), (-2247.993F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Integer integer0 = new Integer((-1073741824));
      assertNotNull(integer0);
      assertEquals((-1073741824), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-1.0F));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-316));
      assertNotNull(double0);
      assertEquals((-316.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1.0F));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      boolean[] booleanArray0 = new boolean[21];
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 18, 79);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1345.4006;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {1345.4006}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1345.4006}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(3, objectArray0.length);
      assertEquals(6, objectArray1.length);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Integer integer0 = new Integer((-1073741824));
      assertNotNull(integer0);
      assertEquals((-1073741824), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, charArray0.length);
      
      Long long0 = new Long(547L);
      assertNotNull(long0);
      assertEquals(547L, (long)long0);
      
      Long[] longArray0 = new Long[2];
      longArray0[0] = long0;
      longArray0[1] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.clone(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      boolean[] booleanArray3 = ArrayUtils.add(booleanArray1, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray3));
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotNull(booleanArray3);
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(1, booleanArray3.length);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.clone(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      boolean[] booleanArray3 = new boolean[7];
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      
      booleanArray3[0] = false;
      booleanArray3[1] = false;
      booleanArray3[2] = true;
      booleanArray3[3] = false;
      booleanArray3[4] = true;
      booleanArray3[5] = false;
      booleanArray3[6] = false;
      boolean[] booleanArray4 = ArrayUtils.add(booleanArray3, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, false, false}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, false, false, false}, booleanArray4));
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray4);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray4, booleanArray1);
      assertNotSame(booleanArray4, booleanArray3);
      assertNotSame(booleanArray4, booleanArray2);
      assertNotNull(booleanArray4);
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertEquals(7, booleanArray3.length);
      assertEquals(8, booleanArray4.length);
      
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)37;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)37);
      assertArrayEquals(new byte[] {(byte) (-13), (byte) (-118), (byte)37, (byte)37}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-13), (byte) (-118), (byte)37}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray1.length);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 13);
      assertNull(intArray0);
      
      long long0 = Integer.toUnsignedLong(2896);
      assertEquals(2896L, long0);
      
      boolean[] booleanArray0 = new boolean[16];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2896, 0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(16, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Float[] floatArray2 = new Float[2];
      Float float0 = new Float((double) 2896L);
      assertNotNull(float0);
      assertEquals(2896.0F, (float)float0, 0.01F);
      
      floatArray2[0] = float0;
      Float float1 = new Float((-1.0F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      floatArray2[1] = float1;
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2);
      assertArrayEquals(new float[] {2896.0F, (-1.0F)}, floatArray3, 0.01F);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertNotNull(floatArray3);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertEquals(2, floatArray2.length);
      assertEquals(2, floatArray3.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) floatArray2[0], (-1749));
      assertEquals((-1), int0);
      assertEquals(2, floatArray2.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-670), 13);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)1;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)57, (-2326));
      assertArrayEquals(new byte[] {(byte)57, (byte)1}, byteArray0);
      assertEquals(0, int0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Integer integer0 = new Integer((-39));
      assertNotNull(integer0);
      assertEquals((-39), (int)integer0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)10;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)10}, shortArray0);
      assertArrayEquals(new short[] {(short)10}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      long[] longArray0 = new long[13];
      longArray0[0] = (long) (short)10;
      longArray0[1] = 3094L;
      longArray0[2] = (long) (short)10;
      longArray0[3] = (long) (-39);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-1L));
      assertFalse(boolean0);
      assertEquals(13, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray1, shortArray1);
      assertArrayEquals(new short[] {(short)10}, shortArray0);
      assertArrayEquals(new short[] {(short)10}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1.0F));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 107L;
      longArray1[1] = 1137L;
      long[] longArray2 = ArrayUtils.addAll(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {107L, 1137L}, longArray1);
      assertArrayEquals(new long[] {107L, 1137L}, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertEquals(0, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray2.length);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-3415));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(9, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(longArray2, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {107L, 1137L}, longArray1);
      assertArrayEquals(new long[] {107L, 1137L}, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray2.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-3415);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1.0);
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(9, booleanArray0.length);
      
      String[] stringArray0 = ArrayUtils.addAll((String[]) null, (String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-2725.187F);
      floatArray0[1] = (-2725.187F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1.0F;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      ArrayUtils.reverse((long[]) null);
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      Double double0 = new Double(2747.356);
      assertNotNull(double0);
      assertEquals(2747.356, (double)double0, 0.01);
      
      ArrayUtils.reverse((short[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)57;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-64));
      assertArrayEquals(new byte[] {(byte) (-88), (byte) (-64), (byte)57}, byteArray0);
      assertEquals(1, int0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 731;
      intArray0[1] = (-627);
      intArray0[3] = (-369);
      intArray0[4] = (-794);
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-794), 57);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 322L;
      longArray0[1] = 0L;
      longArray0[2] = 1086L;
      longArray0[3] = (-2153L);
      longArray0[4] = 0L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertArrayEquals(new long[] {322L, 0L, 1086L, (-2153L), 0L}, longArray0);
      assertEquals(4, int0);
      assertEquals(5, longArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-5030);
      shortArray0[1] = (short)1;
      short[] shortArray1 = ArrayUtils.add(shortArray0, 0, (short)1486);
      assertArrayEquals(new short[] {(short) (-5030), (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1486, (short) (-5030), (short)1}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-2153L);
      floatArray0[1] = (float) (short) (-5030);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 1086L;
      int int1 = ArrayUtils.indexOf(floatArray0, 0.0F, 0);
      assertArrayEquals(new float[] {(-2153.0F), (-5030.0F), 0.0F, 1086.0F}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      assertEquals(4, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 4019.555620892;
      doubleArray0[2] = (-2344.88067);
      doubleArray0[3] = (-2561.734554);
      doubleArray0[4] = (-4564.7017);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 4019.555620892, (-2344.88067), (-2561.734554), (-4564.7017)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[0];
      boolean boolean2 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(0, longArray0.length);
      
      boolean boolean3 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      boolean boolean4 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      Integer[] integerArray1 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 13);
      assertNull(intArray0);
      
      long long0 = Integer.toUnsignedLong(2896);
      assertEquals(2896L, long0);
      
      boolean[] booleanArray0 = new boolean[16];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2896, 0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(16, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Float[] floatArray2 = new Float[2];
      Float float0 = new Float((double) 2896L);
      assertNotNull(float0);
      assertEquals(2896.0F, (float)float0, 0.01F);
      
      floatArray2[0] = float0;
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 2896L, (-2145479688));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(floatArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '2896.0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-0.6519513F));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Float float0 = new Float((-0.6519513F));
      assertNotNull(float0);
      assertEquals((-0.6519513F), (float)float0, 0.01F);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-0.6519513F);
      doubleArray0[4] = 4.04407873178884;
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {(-0.6519513130187988), 0.0, 0.0, 0.0, 4.04407873178884, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(2, int0);
      assertEquals(3, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 2;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-0.6519513130187988), 0.0, 0.0, 0.0, 4.04407873178884, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte) (-3);
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte) (-3);
      shortArray0[5] = (short) (byte) (-3);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1);
      assertArrayEquals(new short[] {(short)0, (short) (-3), (short)0, (short)0, (short) (-3), (short) (-3)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-3), (short)0, (short)0, (short) (-3), (short) (-3)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)10);
      assertArrayEquals(new byte[] {(byte) (-3), (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-3), (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      Integer integer0 = new Integer((-1688));
      assertNotNull(integer0);
      assertEquals((-1688), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 501L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {501L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(6, longArray0.length);
      
      int[] intArray0 = new int[1];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      
      int int1 = Short.compare((short)21, (short)21);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((short[]) null, (int) (short)21);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 21, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte) (-85);
      Byte byte1 = new Byte((byte) (-85));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-85), (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-85));
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte) (-85), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-11));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte) (-11), (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertEquals((byte) (-85), (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte) (-20));
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertEquals((byte) (-20), (byte)byte5);
      
      byteArray0[4] = byte5;
      byteArray0[5] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte) (-85), (byte) (-11), (byte) (-85), (byte) (-20), (byte) (-85)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 113L;
      longArray0[1] = 1686L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {113L, 1686L}, longArray0);
      assertArrayEquals(new long[] {113L, 1686L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      ArrayUtils.reverse(longArray1);
      assertArrayEquals(new long[] {113L, 1686L}, longArray0);
      assertArrayEquals(new long[] {1686L, 113L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) shortArray1, (Object) null);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray1, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertEquals(5, objectArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (short)0, (-4085));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(11, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(11, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-2725.187F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1.0F;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      ArrayUtils.reverse((long[]) null);
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      Double double0 = new Double(2747.356);
      assertNotNull(double0);
      assertEquals(2747.356, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 1314, '/');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1314, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Long[] longArray2 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray2);
      assertEquals(0, longArray2.length);
      
      boolean boolean1 = ArrayUtils.contains((short[]) null, (short)8);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      long[] longArray0 = new long[1];
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-3882.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 108.0F;
      floatArray0[3] = 10.0F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 108.0F);
      assertArrayEquals(new float[] {(-3882.0F), (-1.0F), 108.0F, 10.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3882.0F), (-1.0F), 10.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      Integer integer0 = new Integer(46);
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) null, 1064, (Object) "Index: ");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1064, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      long[] longArray0 = new long[11];
      longArray0[0] = (-404L);
      longArray0[2] = (-404L);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-404L));
      assertTrue(boolean0);
      assertEquals(11, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (-393), 2125114026);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-1));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 113L;
      longArray0[1] = 1686L;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      ArrayUtils.reverse(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1686L;
      doubleArray0[1] = (double) 1686L;
      doubleArray0[2] = (double) 113L;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1686.0, 1686.0, 113.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1686.0, 1686.0, 113.0, 1686.0, 1686.0, 113.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertSame(booleanArray0, booleanArray2);
      assertSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
      
      boolean[] booleanArray3 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray3));
      assertSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotNull(booleanArray3);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray3.length);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.indexOf((int[]) null, (-393), (-393));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-2);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (-393));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -393, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 501L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {501L}, longArray0);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 558;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 558);
      assertArrayEquals(new int[] {558}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 1869L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 1869L}, longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      Byte byte2 = new Byte((byte)11);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)11, (byte)byte2);
      
      Byte byte3 = new Byte((byte)0);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte3);
      
      Byte[] byteArray0 = new Byte[9];
      Byte byte4 = new Byte((byte)0);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertEquals((byte)0, (byte)byte4);
      
      byteArray0[1] = byte4;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte2;
      byteArray0[5] = byte3;
      byteArray0[6] = byte2;
      byteArray0[7] = byte1;
      byteArray0[8] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)11, (byte)0, (byte)11, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '*';
      Short[] shortArray2 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray2.length);
      
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) shortArray2, (Object) null);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, objectArray0);
      assertNotNull(objectArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray2.length);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 113L;
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((byte) (-115));
      assertNotNull(integer0);
      assertEquals((-115), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte) (-115));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-115), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((byte)0);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((byte) (-115));
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals((-115), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(239);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals(239, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-970));
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertEquals((-970), (int)integer5);
      
      Integer integer6 = Integer.getInteger("", integer5);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertEquals((-970), (int)integer6);
      
      integerArray0[5] = integer6;
      Integer integer7 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer2));
      assertEquals(Integer.MAX_VALUE, (int)integer7);
      
      integerArray0[6] = integer7;
      try { 
        Integer.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.add(intArray0, (-508));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-508)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-508)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      boolean boolean3 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertArrayEquals(new char[] {'n', 'n'}, charArray0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-5211);
      intArray0[1] = (-81);
      intArray0[2] = 6;
      intArray0[3] = (-2509);
      boolean boolean0 = ArrayUtils.contains(intArray0, 3671);
      assertArrayEquals(new int[] {(-5211), (-81), 6, (-2509), 0, 0}, intArray0);
      assertFalse(boolean0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, objectArray0);
      assertFalse(boolean0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, byteArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)40);
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte) (-115), (byte)93, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(6, byteArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'x'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'x';
      int int1 = ArrayUtils.indexOf((double[]) null, (double) (byte)93);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-330.1138804896572);
      doubleArray0[1] = 1.0;
      int[] intArray0 = new int[8];
      intArray0[0] = 87;
      intArray0[1] = (-1966);
      intArray0[2] = 87;
      intArray0[3] = (-1966);
      intArray0[4] = 1424;
      intArray0[5] = (-2509);
      intArray0[6] = (-2509);
      intArray0[7] = 47;
      boolean boolean0 = ArrayUtils.contains(intArray0, 36);
      assertArrayEquals(new int[] {87, (-1966), 87, (-1966), 1424, (-2509), (-2509), 47}, intArray0);
      assertFalse(boolean0);
      assertEquals(8, intArray0.length);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertArrayEquals(new int[] {87, (-1966), 87, (-1966), 1424, (-2509), (-2509), 47}, intArray0);
      assertArrayEquals(new int[] {87, (-1966), 87, (-1966), 1424, (-2509), (-2509), 47}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      
      objectArray0[4] = object4;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object2);
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertNotSame(object2, object3);
      assertNotSame(object2, object4);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object3));
      assertFalse(object2.equals((Object)object4));
      assertEquals(2, int0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-59), (byte) (-59)}, byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-59), (byte) (-59)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)175, (int) (byte) (-59));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      char[] charArray0 = new char[1];
      long[] longArray0 = new long[5];
      longArray0[2] = (long) '\u0000';
      longArray0[3] = (long) '\u0000';
      longArray0[4] = (long) '\u0000';
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(5, longArray0.length);
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      int[] intArray0 = new int[5];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3786.49382;
      doubleArray0[1] = (double) 512;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 512;
      doubleArray0[4] = (double) 512;
      boolean boolean3 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3786.49382, 512.0, 0.0, 512.0, 512.0}, doubleArray0, 0.01);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Byte byte0 = Byte.valueOf((byte)45);
      assertNotNull(byte0);
      assertEquals((byte)45, (byte)byte0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray1);
      
      Character[] characterArray0 = new Character[7];
      char char0 = '}';
      Character character0 = Character.valueOf('}');
      assertNotNull(character0);
      assertEquals('}', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertNotNull(character1);
      assertEquals('}', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('r');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertEquals('r', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('i');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertEquals('i', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf(char0);
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertEquals('}', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('r');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)char0));
      assertEquals('r', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character('3');
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character5));
      assertEquals('3', (char)character6);
      
      characterArray0[6] = character6;
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'}', '}', 'r', 'i', '}', 'r', '3'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(7, charArray1.length);
      assertEquals(7, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)5;
      byteArray1[1] = (byte)110;
      byteArray1[2] = (byte)19;
      byteArray1[3] = (byte)15;
      byteArray1[4] = (byte)18;
      byteArray1[5] = (byte) (-1);
      byteArray1[6] = (byte) (-1);
      byteArray1[7] = (byte)15;
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)110, (byte)19, (byte)15, (byte)18, (byte) (-1), (byte) (-1), (byte)15}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, byteArray0.length);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = '+';
      charArray0[2] = '8';
      charArray0[3] = 'n';
      char[] charArray1 = ArrayUtils.subarray(charArray0, Integer.MAX_VALUE, 1);
      assertArrayEquals(new char[] {'o', '+', '8', 'n'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 1, 4099.53);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      char[] charArray2 = new char[2];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = '8';
      charArray2[1] = 'o';
      char[] charArray3 = ArrayUtils.nullToEmpty(charArray2);
      assertArrayEquals(new char[] {'8', 'o'}, charArray2);
      assertArrayEquals(new char[] {'8', 'o'}, charArray3);
      assertNotSame(charArray2, charArray0);
      assertSame(charArray2, charArray3);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray3, charArray0);
      assertSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray1);
      assertNotNull(charArray3);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      assertEquals(2, charArray2.length);
      assertEquals(2, charArray3.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'n';
      objectArray0[1] = (Object) (byte)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertFalse(boolean0);
      assertEquals(2, objectArray0.length);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean1 = ArrayUtils.isSameType(object1, objectArray0[0]);
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, objectArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) '+';
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 43.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 43.0F, 0.0F, 43.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte) (-1);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = 547L;
      longArray0[4] = (-441L);
      longArray0[5] = (long) (byte)0;
      longArray0[6] = (long) (byte) (-1);
      longArray0[7] = (long) (byte) (-1);
      int int0 = ArrayUtils.indexOf(longArray0, 2209L, (-1380));
      assertArrayEquals(new long[] {0L, 0L, 0L, 547L, (-441L), 0L, (-1L), (-1L)}, longArray0);
      assertEquals((-1), int0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      Short[] shortArray1 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) shortArray1, (Object) null);
      assertNotSame(shortArray1, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(0, objectArray0.length);
      
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray1, objectArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertFalse(shortArray1.equals((Object)objectArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((int[]) null);
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.valueOf(false);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4);
      
      booleanArray0[3] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.clone(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray2));
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      
      boolean[] booleanArray3 = ArrayUtils.add(booleanArray2, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true}, booleanArray3));
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotNull(booleanArray3);
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      assertEquals(5, booleanArray3.length);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-12);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-12), (byte) (-12)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-12), (byte) (-12), (byte) (-12), (byte) (-12), (byte) (-12)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1456L);
      longArray0[1] = 0L;
      longArray0[2] = 113L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {(-1456L), 0L, 113L}, longArray0);
      assertArrayEquals(new long[] {(-1456L), 0L, 113L}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)97;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-89);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-59), (int) (byte) (-93));
      assertArrayEquals(new byte[] {(byte) (-59), (byte)97, (byte) (-93), (byte)97, (byte)0, (byte)2, (byte)0, (byte) (-89)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[23];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(23, booleanArray0.length);
      assertEquals(23, booleanArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(23, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(23, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(booleanArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'false', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 113L;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)40;
      Float float0 = new Float(605.546F);
      assertNotNull(float0);
      assertEquals(605.546F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      Float float1 = new Float((double) (byte)2);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2.0F, (float)float1, 0.01F);
      
      floatArray0[0] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {2.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) floatArray0, (Object) float1, 2321);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0, int0);
      assertEquals(1, floatArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-59);
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)36;
      shortArray0[4] = (short) (byte)36;
      shortArray0[5] = (short) (byte)36;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1749), 2321);
      assertArrayEquals(new short[] {(short) (-59), (short)2, (short)2, (short)36, (short)36, (short)36}, shortArray1);
      assertArrayEquals(new short[] {(short) (-59), (short)2, (short)2, (short)36, (short)36, (short)36}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf((int[]) null, 1747, (-393));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 57, 57);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short)671, 5);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      int int1 = ArrayUtils.indexOf((int[]) null, (int) (short)671, 2884);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-1));
      assertNull(intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[1] = '\u0000';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      short[] shortArray0 = new short[0];
      int int2 = ArrayUtils.lastIndexOf(shortArray0, (short) (-504), (-1416));
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(0, shortArray0.length);
      
      int int3 = ArrayUtils.lastIndexOf(charArray0, '2', 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      assertEquals(5, charArray0.length);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(3304);
      assertNotNull(integer0);
      assertEquals(3304, (int)integer0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(integerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) shortArray1, (Object) "org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle");
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertNotSame(shortArray1, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1042, 1042);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1042;
      intArray0[1] = 1042;
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[23];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(23, booleanArray0.length);
      assertEquals(23, booleanArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.addAll((Object[]) integerArray0, (Object[]) booleanArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot store java.lang.Boolean in an array of java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-0.6519513F));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object[] objectArray0 = ArrayUtils.add((Object[]) null, 0, (Object) integer0);
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(1, objectArray0.length);
      
      Float float0 = new Float((-0.6519513F));
      assertNotNull(float0);
      assertEquals((-0.6519513F), (float)float0, 0.01F);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-0.6519513F);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = 4.04407873178884;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = 0L;
      longArray0[3] = (long) 0;
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null, (double) 0L);
      assertNull(doubleArray1);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-0.6519513130187988), 0.0, 0.0, 0.0, 4.04407873178884, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(boolean1);
      assertEquals(0, doubleArray2.length);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = '(';
      charArray0[3] = ',';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {',', ',', '(', ','}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, charArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) ',';
      intArray0[1] = (int) ',';
      intArray0[3] = (int) '(';
      intArray0[4] = (int) ',';
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-115);
      byteArray0[5] = (byte)0;
      char[] charArray0 = new char[3];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-115);
      doubleArray0[1] = (double) (byte) (-115);
      doubleArray0[2] = (double) (byte)93;
      doubleArray0[3] = (double) (byte)93;
      doubleArray0[4] = (double) (byte) (-115);
      doubleArray0[5] = (double) (byte)93;
      doubleArray0[6] = (double) (byte) (-115);
      doubleArray0[7] = (double) (byte)0;
      doubleArray0[8] = (double) (byte)93;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {(-115.0), (-115.0), 93.0, 93.0, (-115.0), 93.0, (-115.0), 0.0, 93.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean1 = ArrayUtils.contains(byteArray1, (byte)44);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, byteArray1.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray1, (byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 1L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L, 2125114026);
      assertArrayEquals(new long[] {0L, 1L}, longArray0);
      assertEquals(1, int0);
      assertEquals(2, longArray0.length);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, 1L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) longArray1, (Object) null);
      assertArrayEquals(new long[] {0L, 1L}, longArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Integer integer0 = new Integer(3754);
      assertNotNull(integer0);
      assertEquals(3754, (int)integer0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) integer0;
      objectArray0[5] = (Object) integer0;
      objectArray0[6] = (Object) integer0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(objectArray0, 3754, (Object) "java.lang.Integer");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3754, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Integer integer0 = new Integer(997);
      assertNotNull(integer0);
      assertEquals(997, (int)integer0);
      
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) null, (Object) integer0);
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1L);
      longArray0[1] = 1869L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertArrayEquals(new long[] {(-1L), 1869L}, longArray0);
      assertFalse(boolean0);
      assertEquals(2, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1869L;
      doubleArray0[1] = (-1238.4226357);
      doubleArray0[2] = (double) 1869L;
      doubleArray0[3] = (double) 1869L;
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (-1L);
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1869.0, (-1238.4226357), 1869.0, 1869.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(6, doubleArray0.length);
      
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      
      boolean[] booleanArray2 = new boolean[8];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      booleanArray2[2] = false;
      booleanArray2[3] = true;
      booleanArray2[4] = false;
      booleanArray2[5] = false;
      booleanArray2[6] = false;
      booleanArray2[7] = false;
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray2, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, false, false}, booleanArray2));
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(8, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(1, objectArray0.length);
      assertEquals(2, objectArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-201);
      intArray0[1] = (-1493);
      intArray0[2] = (-1);
      intArray0[3] = 1856;
      intArray0[4] = (-3107);
      intArray0[5] = (-2504);
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(boolean0);
      assertEquals(0, shortArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)16549;
      floatArray0[1] = (float) (short)16549;
      floatArray0[2] = (float) '*';
      floatArray0[3] = (float) (short)16549;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {16549.0F, 16549.0F, 42.0F, 16549.0F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-527.3827983334357);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 2375.5213599999997;
      doubleArray0[3] = 64.5746913;
      doubleArray0[4] = (-92.126);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (-477.807506);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), 0, 382.7751191);
      assertArrayEquals(new double[] {(-527.3827983334357), (-1.0), 2375.5213599999997, 64.5746913, (-92.126), 1.0, 1.0, (-477.807506)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2165);
      intArray0[1] = (-2165);
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {(-2165), (-2165)}, intArray0);
      assertEquals(2, intArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.clone(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      boolean[] booleanArray3 = ArrayUtils.add(booleanArray2, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray3));
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotNull(booleanArray3);
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertEquals(1, booleanArray3.length);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(2, booleanArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      short[] shortArray0 = new short[5];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      assertEquals(5, shortArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = 1.0F;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, floatArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 1L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L, 2125114026);
      assertArrayEquals(new long[] {0L, 1L}, longArray0);
      assertEquals(1, int0);
      assertEquals(2, longArray0.length);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, 1L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 1L}, longArray0);
      assertFalse(boolean0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 501L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {501L}, longArray0);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-193);
      intArray0[1] = (-115);
      intArray0[2] = (-4591);
      intArray0[3] = 48;
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'u'}, charArray0);
      assertArrayEquals(new char[] {'u', 'u'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(charArray1, charArray1);
      assertArrayEquals(new char[] {'u'}, charArray0);
      assertArrayEquals(new char[] {'u', 'u'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, longArray0.length);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean boolean2 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(0, shortArray0.length);
      
      boolean boolean3 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int int0 = (-31);
      Integer integer0 = new Integer((-31));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-31), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = 3237;
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) null, 3237, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 107L;
      longArray0[1] = (-4064L);
      longArray0[2] = 1L;
      int int0 = ArrayUtils.indexOf(longArray0, 0L, 3177);
      assertArrayEquals(new long[] {107L, (-4064L), 1L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (-4064L);
      objectArray0[1] = (Object) (-4064L);
      objectArray0[2] = (Object) 1L;
      objectArray0[3] = (Object) 1L;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) (-4064L);
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[6] = object1;
      objectArray0[7] = (Object) 107L;
      objectArray0[8] = (Object) 1L;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      assertNotNull(objectArray1);
      assertEquals(9, objectArray1.length);
      assertEquals(9, objectArray0.length);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 3177;
      intArray0[3] = (-1);
      intArray0[4] = 3177;
      intArray0[5] = 3177;
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {(-1), (-1), 3177, (-1), 3177, 3177, (-1), (-1)}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Short short0 = new Short((short)3529);
      assertNotNull(short0);
      assertEquals((short)3529, (short)short0);
      
      Short short1 = new Short((short)1309);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)1309, (short)short1);
      
      Short short2 = Short.valueOf((short)1465);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short)1465, (short)short2);
      
      Short short3 = new Short((short) (-2039));
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertEquals((short) (-2039), (short)short3);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.clone(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      
      boolean boolean0 = ArrayUtils.contains(shortArray1, (short)14259);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(boolean0);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(2, booleanArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) booleanArray1, (Object[]) booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Integer integer0 = new Integer((-1073741824));
      assertNotNull(integer0);
      assertEquals((-1073741824), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-23));
      assertArrayEquals(new byte[] {(byte) (-3), (byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (double) (byte) (-3);
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (byte) (-3);
      doubleArray0[5] = (-1391.2972488663);
      doubleArray0[6] = (double) (byte)0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-626.94490773), (-644), 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.0), (-3.0), (-1391.2972488663), 0.0}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Integer[] integerArray0 = new Integer[16];
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) integerArray0);
      assertSame(integerArray0, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(16, integerArray0.length);
      assertEquals(16, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'Z', 'Z'}, charArray0);
      assertArrayEquals(new char[] {'Z', 'Z'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)3970;
      shortArray0[1] = (short)100;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)48;
      shortArray0[5] = (short) (-4686);
      shortArray0[6] = (short)3;
      shortArray0[7] = (short) (-7709);
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertFalse(boolean1 == boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 506, (int) (short)100);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short) (-1171);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-1171), (short)1, (short)2, (short) (-1), (short)2}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) booleanArray1, (Object[]) null);
      assertTrue(boolean0);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)93;
      byteArray0[5] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)40);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-115), (byte)93, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(6, byteArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'x'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-853));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-853), (int)integer0);
      
      int int1 = Integer.divideUnsigned((short) (-1), 1);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {(-853)}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray2.length);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      int int2 = ArrayUtils.indexOf(shortArray1, (short) (-2525), (-1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertEquals((-1), int2);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 1869L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertArrayEquals(new long[] {0L, 1869L}, longArray0);
      assertFalse(boolean0);
      assertEquals(2, longArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0;
      int int0 = new Integer(0);
      assertEquals(0, int0);
      
      Double double0 = new Double(607.7058);
      assertNotNull(double0);
      assertEquals(607.7058, (double)double0, 0.01);
      
      Double double1 = new Double(4016.555620892);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(4016.555620892, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = double1;
      Character character0 = new Character('%');
      assertNotNull(character0);
      assertEquals('%', (char)character0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = '{';
      charArray0[3] = '%';
      charArray0[4] = '%';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertArrayEquals(new char[] {'%', '%', '{', '%', '%'}, charArray0);
      assertArrayEquals(new char[] {'%', '%', '{', '%', '%'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 1664);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(integerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 501L;
      boolean[] booleanArray0 = new boolean[3];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(0, booleanArray2.length);
      
      Short short0 = new Short((short)288);
      assertNotNull(short0);
      assertEquals((short)288, (short)short0);
      
      Short[] shortArray0 = new Short[10];
      shortArray0[0] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(10, shortArray0.length);
      assertEquals(10, shortArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(booleanArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'false', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.addAll((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'Z';
      charArray0[1] = 'T';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-393), 1856);
      assertArrayEquals(new char[] {'Z', 'T'}, charArray0);
      assertArrayEquals(new char[] {'Z', 'T'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) "java.lang.Object", (-1443));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'Z';
      intArray0[1] = 1856;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-219), 365);
      assertArrayEquals(new int[] {90, 1856}, intArray0);
      assertArrayEquals(new int[] {90, 1856}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)3146);
      assertNotNull(short0);
      assertEquals((short)3146, (short)short0);
      
      shortArray0[0] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      short short0 = (short)1465;
      Short short1 = new Short((short)1465);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)1465, (short)short1);
      
      byte byte0 = (byte) (-115);
      byte byte1 = (byte)0;
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)40);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      Integer integer0 = new Integer((short)1465);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1465, (int)integer0);
      
      int int1 = 1;
      // Undeclared exception!
      try { 
        Integer.divideUnsigned(1543, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      short[] shortArray0 = new short[3];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      assertEquals(3, shortArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)0;
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object4));
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertNotNull(object6);
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object0));
      
      objectArray0[6] = object6;
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(14, objectArray1.length);
      assertEquals(7, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 731;
      intArray0[1] = (-627);
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.contains(longArray0, (long) (-627));
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, longArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {731, (-627), 0, 0, 0, 0}, intArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(6, intArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[1] = '&';
      charArray0[2] = 'U';
      charArray0[3] = '1';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'1', 'U', '&', '3'}, charArray0);
      assertEquals(4, charArray0.length);
      
      Long[] longArray1 = new Long[2];
      Long long0 = new Long(2L);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      longArray1[0] = long0;
      Long long1 = new Long((-1422L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-1422L), (long)long1);
      
      longArray1[1] = long1;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertArrayEquals(new long[] {2L, (-1422L)}, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(2, longArray2.length);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      double[] doubleArray0 = new double[18];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(18, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(18, doubleArray0.length);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[1] = (-627);
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-627);
      intArray1[1] = (-627);
      intArray1[2] = (-627);
      intArray1[3] = (-627);
      boolean boolean1 = ArrayUtils.isSameLength(intArray1, intArray1);
      assertArrayEquals(new int[] {(-627), (-627), (-627), (-627)}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(4, intArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (-627), (-627));
      assertEquals((-1), int0);
      
      boolean boolean2 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-18), (-18));
      assertArrayEquals(new char[] {'q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.indexOf(charArray0, '/', (-4591));
      assertArrayEquals(new char[] {'q'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(1, booleanArray0.length);
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-1605L);
      longArray1[1] = (-404L);
      longArray1[2] = (-1457L);
      boolean boolean2 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-1605L), (-404L), (-1457L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(0, longArray0.length);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, charArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isEmpty(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-7);
      floatArray0[1] = (float) (-7);
      floatArray0[2] = (float) (-7);
      floatArray0[3] = (float) (-823);
      floatArray0[4] = (float) (-7);
      boolean boolean4 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-7.0F), (-7.0F), (-7.0F), (-823.0F), (-7.0F)}, floatArray0, 0.01F);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) shortArray1, (Object) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotSame(shortArray1, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1, 1);
      assertArrayEquals(new char[] {'q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      
      double[] doubleArray0 = new double[2];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-481.59415833343576), (-45.78864));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[1] = (-316.0F);
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, (-316.0F), 1.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(5, floatArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(2, booleanArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[5];
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-2808), 467);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)899;
      shortArray0[1] = (short)458;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)899, (short)458}, shortArray0);
      assertTrue(boolean0);
      assertEquals(2, shortArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte) (-82);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)79);
      assertArrayEquals(new byte[] {(byte) (-55), (byte)79, (byte)3, (byte)111, (byte) (-82)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte)3, (byte)111, (byte) (-82)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte) (-82);
      floatArray0[1] = (float) (byte)111;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {(-82.0F), 111.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray0.length);
      
      Object[] objectArray2 = new Object[3];
      assertFalse(objectArray2.equals((Object)objectArray1));
      assertFalse(objectArray2.equals((Object)objectArray0));
      
      objectArray2[0] = (Object) (byte) (-55);
      objectArray2[1] = (Object) (byte) (-82);
      objectArray2[2] = (Object) (byte)3;
      boolean boolean1 = ArrayUtils.isSameLength(objectArray2, objectArray0);
      assertNotSame(objectArray2, objectArray1);
      assertNotSame(objectArray2, objectArray0);
      assertNotSame(objectArray0, objectArray2);
      assertNotSame(objectArray0, objectArray1);
      assertFalse(objectArray2.equals((Object)objectArray1));
      assertFalse(objectArray2.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray2));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3, objectArray2.length);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = ArrayUtils.add((Object[]) null, 0, object0);
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 107L;
      longArray0[1] = (-4064L);
      longArray0[2] = 1L;
      int int0 = ArrayUtils.indexOf(longArray0, 0L, 3177);
      assertArrayEquals(new long[] {107L, (-4064L), 1L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (-4064L);
      objectArray0[1] = (Object) (-4064L);
      objectArray0[2] = (Object) 1L;
      objectArray0[3] = (Object) 1L;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[6] = object1;
      objectArray0[7] = (Object) 107L;
      objectArray0[8] = (Object) 1L;
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 3177;
      intArray0[3] = (-1);
      intArray0[4] = 3177;
      intArray0[5] = 3177;
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {(-1), (-1), 3177, (-1), 3177, 3177, (-1), (-1)}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, objectArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-794), 57);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 731;
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1), (int)integer0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) 731;
      integerArray0[1] = integer0;
      integerArray0[2] = (Integer) 731;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = (Integer) 731;
      integerArray0[6] = (Integer) 731;
      integerArray0[7] = (Integer) 731;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[7]);
      assertArrayEquals(new int[] {731, (-1), 731, (-1), (-1), 731, 731, 731}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, integerArray0.length);
      assertEquals(8, intArray1.length);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "V:";
      stringArray0[1] = "java.lang.String";
      stringArray0[2] = "km(F%DI6K<+%<9";
      stringArray0[3] = "java.lang.String";
      stringArray0[4] = "P|,";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, int0, 2351);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray1.length);
      assertEquals(5, stringArray0.length);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (double) 731);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 501L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {501L}, longArray0);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {501L}, longArray0);
      assertEquals(1, longArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '=';
      charArray0[1] = 'J';
      charArray0[2] = '=';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'=', 'J', '='}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, charArray0.length);
      
      Long long0 = new Long((-2340L));
      assertNotNull(long0);
      assertEquals((-2340L), (long)long0);
      
      Long[] longArray1 = new Long[0];
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray1));
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short)1477);
      assertNotNull(short0);
      assertEquals((short)1477, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)1477, (short)short1);
      assertEquals(4, shortArray0.length);
      
      shortArray0[1] = short1;
      Short short2 = Short.valueOf((short)1477);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals((short)1477, (short)short2);
      
      shortArray0[2] = short2;
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf((String) null);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(0, booleanArray2.length);
      
      boolean[] booleanArray3 = ArrayUtils.add(booleanArray1, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotNull(booleanArray3);
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertEquals(4, booleanArray3.length);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 391.21912F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Integer integer0 = new Integer((-1073741824));
      assertNotNull(integer0);
      assertEquals((-1073741824), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-316);
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-1.0F));
      assertArrayEquals(new float[] {(-316.0F)}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'm', (-1073741824));
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertArrayEquals(new char[] {'1'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 501L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {501L}, longArray0);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = new int[7];
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-219);
      floatArray0[2] = (float) 501L;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {(-219.0F), 0.0F, 501.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-219.0F), 0.0F, 501.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      String[] stringArray0 = ArrayUtils.subarray((String[]) null, (-219), (-2682));
      assertNull(stringArray0);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {501L}, longArray0);
      assertArrayEquals(new long[] {501L, 501L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-2808), (-2808));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'v');
      assertArrayEquals(new char[] {'o'}, charArray0);
      assertArrayEquals(new char[] {'o'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      char[] charArray2 = ArrayUtils.removeElement(charArray0, 'o');
      assertArrayEquals(new char[] {'o'}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray2.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'o';
      intArray0[1] = (int) 'v';
      intArray0[2] = (int) 'o';
      intArray0[3] = (int) 'o';
      intArray0[4] = (int) 'v';
      intArray0[5] = 1;
      intArray0[6] = (int) 'v';
      intArray0[7] = (int) 'v';
      intArray0[8] = (int) 'o';
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {111, 118, 111, 111, 118, 1, 118, 118, 111}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = 'h';
      charArray0[2] = '=';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'>', 'h', '='}, charArray0);
      assertArrayEquals(new char[] {'>', 'h', '=', '>', 'h', '='}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-89);
      byteArray0[3] = (byte) (-63);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-95), (-1));
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-63), (byte)0, (byte) (-63), (byte) (-89), (byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(6, byteArray0.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte) (-63);
      objectArray0[2] = (Object) '>';
      objectArray0[3] = (Object) (byte) (-63);
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(objectArray0, (int)  (-89), object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -89, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.add((short[]) null, (short) (-3478));
      assertArrayEquals(new short[] {(short) (-3478)}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[0] = (byte) (-115);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-115), (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)45, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte) (-115), (byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte) (-115);
      objectArray0[3] = (Object) (byte) (-115);
      objectArray0[4] = (Object) (byte) (-115);
      objectArray0[5] = (Object) (byte) (-115);
      objectArray0[6] = (Object) (byte)0;
      objectArray0[7] = (Object) (byte)0;
      boolean boolean1 = ArrayUtils.isNotEmpty(objectArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(8, objectArray0.length);
      
      int[] intArray0 = new int[0];
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(0, intArray0.length);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      boolean boolean3 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      assertEquals(2, booleanArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short) (-3478);
      longArray0[1] = (long) (byte) (-115);
      longArray0[2] = (long) (-1);
      longArray0[3] = 413L;
      longArray0[4] = (long) (short) (-3478);
      longArray0[5] = (long) (byte)0;
      boolean boolean4 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {(-3478L), (-115L), (-1L), 413L, (-3478L), 0L}, longArray0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1, 1);
      assertArrayEquals(new char[] {'q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'q';
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) 'q';
      floatArray0[3] = (float) 'q';
      floatArray0[4] = (float) 1;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {113.0F, 0.0F, 113.0F, 113.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {113.0F, 0.0F, 113.0F, 113.0F, 1.0F, 113.0F, 0.0F, 113.0F, 113.0F, 1.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(5, floatArray0.length);
      assertEquals(10, floatArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-2406.709091025755);
      doubleArray0[2] = (double) 113.0F;
      doubleArray0[3] = (-2406.709091025755);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2406.709091025755), 2680);
      assertArrayEquals(new double[] {1.0, (-2406.709091025755), 113.0, (-2406.709091025755)}, doubleArray0, 0.01);
      assertEquals(3, int0);
      assertEquals(4, doubleArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-1112.106759296), 4819);
      assertArrayEquals(new double[] {1.0, (-2406.709091025755), 113.0, (-2406.709091025755)}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(4, doubleArray0.length);
      
      char[] charArray2 = new char[9];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = 'q';
      charArray2[1] = 'q';
      charArray2[2] = 'q';
      charArray2[3] = 'K';
      charArray2[4] = 'q';
      charArray2[5] = 'q';
      charArray2[6] = 'q';
      charArray2[7] = 'q';
      charArray2[8] = '&';
      char[] charArray3 = ArrayUtils.addAll(charArray2, (char[]) null);
      assertArrayEquals(new char[] {'q', 'q', 'q', 'K', 'q', 'q', 'q', 'q', '&'}, charArray2);
      assertArrayEquals(new char[] {'q', 'q', 'q', 'K', 'q', 'q', 'q', 'q', '&'}, charArray3);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray3);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray2);
      assertNotNull(charArray3);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      assertEquals(9, charArray2.length);
      assertEquals(9, charArray3.length);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[3] = 'J';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'\'', '\'', '\u0000', 'J'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      ArrayUtils.reverse(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (int) (short)0, (-2820));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 731;
      intArray0[1] = 731;
      int int0 = ArrayUtils.indexOf(intArray0, 731, (-2679));
      assertArrayEquals(new int[] {731, 731, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 731;
      longArray0[2] = (long) 731;
      longArray0[1] = 1L;
      boolean boolean1 = ArrayUtils.contains(longArray0, 1L);
      assertArrayEquals(new long[] {731L, 1L, 731L, 0L}, longArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Integer integer0 = new Integer((-1073741824));
      assertNotNull(integer0);
      assertEquals((-1073741824), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('a');
      assertNotNull(character0);
      assertEquals('a', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('a');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('a', (char)character1);
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'a', 'a'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'a', 'a'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = '/';
      charArray0[2] = 'y';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'y');
      assertArrayEquals(new char[] {'O', '/', 'y'}, charArray0);
      assertArrayEquals(new char[] {'O', '/'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      
      Byte[] byteArray0 = new Byte[8];
      Byte byte0 = new Byte((byte)57);
      assertNotNull(byte0);
      assertEquals((byte)57, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)57);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)57, (byte)byte1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray0, (Object) null);
      assertEquals(7, int0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2232);
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 6;
      intArray0[3] = 46;
      intArray0[4] = 0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {(-2232), Integer.MAX_VALUE, 6, 46, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(5, intArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 46;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-2232);
      floatArray0[4] = 458.0F;
      floatArray0[5] = (float) Integer.MAX_VALUE;
      floatArray0[6] = (float) Integer.MAX_VALUE;
      floatArray0[7] = (float) 46;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 46.0F, 0.0F, (-2232.0F), 458.0F, 2.14748365E9F, 2.14748365E9F, 46.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(16, floatArray1.length);
      assertEquals(8, floatArray0.length);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'f');
      assertNull(charArray0);
      
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null, 'H');
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray1.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertSame(integerArray0, integerArray1);
      assertNotNull(map0);
      assertEquals(0, integerArray0.length);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) integerArray0, (Object[]) integerArray1);
      assertNotSame(integerArray0, objectArray0);
      assertSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, objectArray0);
      assertSame(integerArray1, integerArray0);
      assertNotNull(objectArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-115);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-115), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(6, byteArray0.length);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-115), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(6, byteArray0.length);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)93;
      boolean boolean2 = ArrayUtils.isSameLength(byteArray1, (byte[]) null);
      assertArrayEquals(new byte[] {(byte)0, (byte)93}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short)671, 5);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      int int1 = ArrayUtils.indexOf((int[]) null, (int) (short)671, 2884);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-1));
      assertNull(intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[1] = '\u0000';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)16}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Double double0 = new Double(5);
      assertNotNull(double0);
      assertEquals(5.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 1314, 'S');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1314, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 1869L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertArrayEquals(new long[] {0L, 1869L}, longArray0);
      assertFalse(boolean0);
      assertEquals(2, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertSame(booleanArray0, booleanArray2);
      assertSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray2, true, 1840);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertSame(booleanArray0, booleanArray2);
      assertSame(booleanArray2, booleanArray0);
      assertEquals((-1), int0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
      
      long[] longArray1 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((int[]) null);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, false, false, true}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(9, booleanArray0.length);
      
      char[] charArray0 = new char[0];
      boolean boolean2 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)93;
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-115), (byte)93, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)93;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)40);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-115), (byte)93}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(4, byteArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'x'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(charArray0, 'c');
      assertArrayEquals(new char[] {'x'}, charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 742);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 742, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-875);
      intArray0[1] = 2973;
      intArray0[2] = 131;
      intArray0[3] = 2294;
      intArray0[4] = 6;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {(-875), 2973, 131, 2294, 6}, intArray0);
      assertArrayEquals(new int[] {(-875), 2973, 131, 2294, 6, (-875), 2973, 131, 2294, 6}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 131;
      longArray0[1] = (long) 131;
      longArray0[2] = (long) (-875);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {131L, 131L, (-875L)}, longArray0);
      assertArrayEquals(new long[] {131L, 131L, (-875L)}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (long) 131;
      longArray2[1] = (long) 2294;
      longArray2[2] = (long) 131;
      longArray2[3] = (long) 2294;
      long[] longArray3 = ArrayUtils.addAll(longArray0, longArray2);
      assertArrayEquals(new long[] {131L, 131L, (-875L), 131L, 2294L, 131L, 2294L}, longArray3);
      assertArrayEquals(new long[] {131L, 131L, (-875L)}, longArray0);
      assertArrayEquals(new long[] {131L, 2294L, 131L, 2294L}, longArray2);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      assertSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray3);
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(7, longArray3.length);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray2.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray3, longArray3);
      assertArrayEquals(new long[] {131L, 131L, (-875L), 131L, 2294L, 131L, 2294L}, longArray3);
      assertArrayEquals(new long[] {131L, 131L, (-875L)}, longArray0);
      assertArrayEquals(new long[] {131L, 2294L, 131L, 2294L}, longArray2);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      assertSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray3));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray3));
      assertFalse(longArray2.equals((Object)longArray0));
      assertTrue(boolean0);
      assertEquals(7, longArray3.length);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray2.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2294L;
      doubleArray0[1] = (double) (-875);
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) 2294;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 131, 2957, (double) 0);
      assertArrayEquals(new double[] {2294.0, (-875.0), 6.0, 2294.0}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 501L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {501L}, longArray0);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-193);
      intArray0[1] = (-115);
      intArray0[2] = (-4597);
      intArray0[3] = 48;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)18;
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte) (-1), (byte)47, (byte)47, (byte)116, (byte)18}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, byteArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-193);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)47;
      shortArray0[1] = (short) (byte)47;
      shortArray0[2] = (short) (byte) (-1);
      byteArray0[0] = (byte) (-110);
      shortArray0[4] = (short) (byte)18;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)47, (short)47, (short) (-1), (short)0, (short)18}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, object0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(3, objectArray0.length);
      assertEquals(3, objectArray1.length);
      
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ')';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {')'}, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-3590);
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (-3590));
      assertArrayEquals(new short[] {(short) (-3590)}, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short)1477);
      assertNotNull(short0);
      assertEquals((short)1477, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)1477, (short)short1);
      assertEquals(4, shortArray0.length);
      
      shortArray0[1] = short1;
      Short short2 = Short.valueOf((short)1477);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short)1477, (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) shortArray0[2]);
      assertNotNull(short3);
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short0));
      assertEquals((short)1477, (short)short3);
      assertEquals(4, shortArray0.length);
      
      shortArray0[3] = short3;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-855));
      assertArrayEquals(new short[] {(short)1477, (short)1477, (short)1477, (short)1477}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.clone(shortArray1);
      assertArrayEquals(new short[] {(short)1477, (short)1477, (short)1477, (short)1477}, shortArray1);
      assertArrayEquals(new short[] {(short)1477, (short)1477, (short)1477, (short)1477}, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray2.length);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) shortArray0[2], (int) shortArray0[3]);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(4, shortArray0.length);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 1869L;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(2, booleanArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-4163);
      shortArray0[1] = (short)2574;
      shortArray0[2] = (short) (-580);
      short[] shortArray1 = new short[8];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-4163);
      shortArray1[1] = (short) (-4163);
      shortArray1[2] = (short) (-4163);
      shortArray1[3] = (short)2574;
      shortArray1[4] = (short) (-580);
      shortArray1[5] = (short)2574;
      shortArray1[6] = (short) (-580);
      shortArray1[7] = (short)2574;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-4163), (short)2574, (short) (-580)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4163), (short) (-4163), (short) (-4163), (short)2574, (short) (-580), (short)2574, (short) (-580), (short)2574}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean0);
      assertEquals(3, shortArray0.length);
      assertEquals(8, shortArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-36);
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-36)}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, byteArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)2574;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {2574L}, longArray0);
      assertArrayEquals(new long[] {2574L}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      Double double0 = new Double(351.7564);
      assertNotNull(double0);
      assertEquals(351.7564, (double)double0, 0.01);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-4163);
      intArray0[1] = (int) (byte) (-36);
      intArray0[2] = (int) (short) (-4163);
      intArray0[3] = 3108;
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertArrayEquals(new int[] {(-4163), (-36), (-4163), 3108}, intArray1);
      assertArrayEquals(new int[] {(-4163), (-36), (-4163), 3108}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ',';
      charArray0[1] = '(';
      charArray0[2] = '(';
      charArray0[3] = ',';
      charArray0[4] = ',';
      charArray0[5] = ',';
      charArray0[6] = ',';
      boolean boolean0 = ArrayUtils.isEquals(',', ',');
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) ',';
      Integer[] integerArray1 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {44}, intArray0);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short)1465);
      assertNotNull(short0);
      assertEquals((short)1465, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)1465, (short)short1);
      assertEquals(4, shortArray0.length);
      
      shortArray0[1] = short1;
      Short short2 = Short.valueOf((short)1465);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals((short)1465, (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) shortArray0[2]);
      assertNotNull(short3);
      assertTrue(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short0));
      assertEquals((short)1465, (short)short3);
      assertEquals(4, shortArray0.length);
      
      shortArray0[2] = short3;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-855));
      assertArrayEquals(new short[] {(short)1465, (short)1465, (short)1465, (short) (-855)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.clone(shortArray1);
      assertArrayEquals(new short[] {(short)1465, (short)1465, (short)1465, (short) (-855)}, shortArray1);
      assertArrayEquals(new short[] {(short)1465, (short)1465, (short)1465, (short) (-855)}, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray2.length);
      
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1323.4899F;
      floatArray0[1] = (float) 0;
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, 2);
      assertArrayEquals(new float[] {1323.4899F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[1] = 1L;
      longArray0[2] = (long) (short) (-1);
      longArray0[3] = 0L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {1L, 1L, (-1L), 0L}, longArray0);
      assertArrayEquals(new long[] {1L, 1L, (-1L), 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      Double double0 = new Double(3641.407470703125);
      assertNotNull(double0);
      assertEquals(3641.407470703125, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      boolean boolean1 = Double.isFinite(2421.31);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      doubleArray0[2] = double0;
      Double double1 = new Double((-629.5562392284812));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-629.5562392284812), (double)double1, 0.01);
      
      doubleArray0[3] = double1;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1, 1);
      assertArrayEquals(new char[] {'q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 'q';
      longArray0[3] = (long) 'q';
      longArray0[4] = (long) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L), (int) (byte)0);
      assertArrayEquals(new long[] {0L, 1L, 113L, 113L, 0L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
      
      int int1 = ArrayUtils.indexOf((int[]) null, 1491, 1);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) 1491);
      assertArrayEquals(new long[] {0L, 1L, 113L, 113L, 0L}, longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(2, booleanArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray2));
      assertSame(booleanArray0, booleanArray2);
      assertSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)100;
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-38), (byte) (-115), (byte)100, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (byte[]) null);
      assertArrayEquals(new byte[] {(byte) (-38), (byte) (-115), (byte)100, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-38), (byte) (-115), (byte)100, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-2808), 467);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)899;
      shortArray0[1] = (short)458;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)899, (short)458}, shortArray0);
      assertTrue(boolean0);
      assertEquals(2, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)899, (short)458}, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, shortArray0.length);
      
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (long) (short)458;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)458;
      intArray0[1] = (int) (short)458;
      intArray0[2] = (int) (short)899;
      intArray0[3] = (int) (short)458;
      intArray0[4] = (int) (short)458;
      intArray0[5] = (int) (short)899;
      intArray0[6] = 467;
      boolean boolean2 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {458, 458, 899, 458, 458, 899, 467}, intArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(7, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 6, (int) (short)458);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-1016.13F));
      assertNull(floatArray0);
      
      Integer integer0 = new Integer(1676);
      assertNotNull(integer0);
      assertEquals(1676, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      
      Integer integer3 = new Integer(0);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertEquals(0, (int)integer3);
      
      int int0 = Integer.sum(2931, 1676);
      assertEquals(4607, int0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer2;
      Integer integer4 = new Integer(8);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals(8, (int)integer4);
      
      integerArray0[2] = integer4;
      int int1 = Integer.compare((-2077), 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      integerArray0[3] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1);
      assertArrayEquals(new int[] {0, 1, 8, 1676}, intArray0);
      assertNotNull(intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      
      Character character0 = Character.valueOf('k');
      assertNotNull(character0);
      assertEquals('k', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Integer integer0 = new Integer((-1073741824));
      assertNotNull(integer0);
      assertEquals((-1073741824), (int)integer0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1073741824);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1073741824), (-1073741824));
      assertArrayEquals(new int[] {(-1073741824)}, intArray0);
      assertEquals((-1), int0);
      assertEquals(1, intArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 3564L;
      longArray0[1] = 1373L;
      longArray0[2] = (long) (-1073741824);
      longArray0[3] = (-441L);
      long[] longArray1 = ArrayUtils.remove(longArray0, 0);
      assertArrayEquals(new long[] {3564L, 1373L, (-1073741824L), (-441L)}, longArray0);
      assertArrayEquals(new long[] {1373L, (-1073741824L), (-441L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 3564L;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {3564.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = '{';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'W', '{'}, charArray0);
      assertArrayEquals(new char[] {'W', '{', 'W', '{'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)48;
      shortArray0[1] = (short)48;
      shortArray0[2] = (short)1884;
      shortArray0[3] = (short) (-393);
      shortArray0[4] = (short)57;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)57);
      assertArrayEquals(new short[] {(short)48, (short)48, (short)1884, (short) (-393), (short)57}, shortArray0);
      assertArrayEquals(new short[] {(short)48, (short)48, (short)1884, (short) (-393)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[1] = (int) '{';
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (int) (short)48, (-2645));
      assertNull(booleanArray0);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      Double[] doubleArray1 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray1);
      
      AbstractMap.SimpleImmutableEntry<Object, Object>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Object, Object>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 2);
      AbstractMap.SimpleImmutableEntry<Object, Object>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertEquals(2, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(4, abstractMap_SimpleImmutableEntryArray1.length);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1, 1);
      assertArrayEquals(new char[] {'q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      long[] longArray0 = new long[5];
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) 'q';
      longArray0[3] = (long) 585;
      longArray0[4] = (long) 1;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 113L, 107);
      assertArrayEquals(new long[] {0L, 0L, 113L, 585L, 1L}, longArray0);
      assertEquals(2, int0);
      assertEquals(5, longArray0.length);
      
      Long[] longArray1 = new Long[8];
      longArray1[0] = (Long) 585L;
      longArray1[1] = (Long) 1L;
      longArray1[2] = (Long) 0L;
      longArray1[3] = (Long) 113L;
      longArray1[4] = (Long) 113L;
      longArray1[5] = (Long) 0L;
      longArray1[6] = (Long) 0L;
      longArray0[4] = 0L;
      long long0 = 0L;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, 0L);
      assertArrayEquals(new long[] {585L, 1L, 0L, 113L, 113L, 0L, 0L, 0L}, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(8, longArray2.length);
      assertEquals(8, longArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) long0;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) long0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, floatArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-405.795299));
      assertNotNull(double0);
      assertEquals((-405.795299), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(927.53504011895);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(927.53504011895, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-4017.555620892));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-4017.555620892), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      doubleArray0[3] = doubleArray0[1];
      Double double3 = new Double(0L);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[4] = double3;
      try { 
        Double.valueOf("Caught a SecurityException reading the system property '");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(2, booleanArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 68;
      floatArray0[1] = (float) 68;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) 0, 2146588116);
      assertArrayEquals(new float[] {68.0F, 68.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      assertEquals(4, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)37, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)37, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int0);
      assertEquals(5, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(objectArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(5, objectArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 585L;
      longArray0[1] = (long) 0;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {585L, 0L}, longArray0);
      assertArrayEquals(new long[] {585L, 0L}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      Long[] longArray2 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray2);
      assertEquals(0, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[1];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)48;
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-25), (byte)21, (byte)48}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, byteArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, 0);
      assertEquals((-1), int0);
      assertEquals(1, objectArray0.length);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-1), 2211);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray0, (Object[]) integerArray0);
      assertTrue(boolean0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, (-981.224), 0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      int int1 = ArrayUtils.indexOf(floatArray0, (float) (-1), 1);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, 0.0F, (-1.0F), (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(8, floatArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)48;
      shortArray0[1] = (short) (-1712);
      shortArray0[2] = (short) (-2075);
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)2227;
      shortArray0[5] = (short)48;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (-4288), (short)3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4288, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 43.919474321609;
      int int0 = ArrayUtils.indexOf((long[]) null, (long) (short) (-1));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '|';
      charArray0[2] = 'k';
      charArray0[3] = 'i';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000', '|', 'k', 'i'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '|', 'k', 'i'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 4, (int) (short) (-1));
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1456L);
      longArray0[1] = 0L;
      longArray0[2] = 113L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {(-1456L), 0L, 113L}, longArray0);
      assertArrayEquals(new long[] {(-1456L), 0L, 113L}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-89);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-59), (int) (byte) (-93));
      assertArrayEquals(new byte[] {(byte) (-59), (byte)97, (byte) (-93), (byte)0, (byte)105, (byte)2, (byte)0, (byte) (-89)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-59), (byte)97, (byte) (-93), (byte)0, (byte)105, (byte)2, (byte)0, (byte) (-89)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-59), (byte)97, (byte) (-93), (byte)0, (byte)105, (byte)2, (byte)0, (byte) (-89)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(map0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 6, (int) (byte)0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 1.0F;
      floatArray0[3] = 1.0F;
      Character[] characterArray0 = new Character[8];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(8, characterArray0.length);
      assertEquals(8, characterArray1.length);
      
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 113L;
      longArray0[1] = 1686L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {113L, 1686L}, longArray0);
      assertArrayEquals(new long[] {113L, 1686L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (-1), object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      Integer integer0 = new Integer((-23));
      assertNotNull(integer0);
      assertEquals((-23), (int)integer0);
      
      Integer integer1 = new Integer((-2808));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-2808), (int)integer1);
      
      int int0 = Integer.max((-999), (-999));
      assertEquals((-999), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'w';
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {119}, intArray0);
      assertArrayEquals(new int[] {119}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3786.49382;
      doubleArray0[1] = 1905.289;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) 1794;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 1794.0;
      objectArray0[1] = (Object) 1794.0;
      objectArray0[2] = (Object) 3786.49382;
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer1, (-23));
      assertFalse(int1 == int0);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1), int1);
      assertEquals(3, objectArray0.length);
      
      int[] intArray2 = ArrayUtils.subarray(intArray0, (-2808), 1794);
      assertArrayEquals(new int[] {119}, intArray2);
      assertArrayEquals(new int[] {119}, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotNull(intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(1, intArray2.length);
      assertEquals(1, intArray0.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "q";
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray0.length);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      long[] longArray0 = new long[4];
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertFalse(boolean0);
      assertEquals(4, longArray0.length);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 12, 12);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)10, 3304);
      assertArrayEquals(new byte[] {(byte) (-64), (byte)10, (byte) (-1), (byte)0}, byteArray0);
      assertEquals(1, int0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 113L;
      Double double0 = new Double(113L);
      assertNotNull(double0);
      assertEquals(113.0, (double)double0, 0.01);
      
      Double double1 = new Double((-309.0));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-309.0), (double)double1, 0.01);
      
      Double double2 = new Double((-889.0165674613));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-889.0165674613), (double)double2, 0.01);
      
      Double double3 = new Double(4041.8936232462647);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals(4041.8936232462647, (double)double3, 0.01);
      
      Double[] doubleArray0 = new Double[3];
      double double4 = Double.sum(113L, (-317.34772));
      assertEquals((-204.34771999999998), double4, 0.01);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = double1;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 4041.8936232462647;
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, (-1384), (-1384));
      assertArrayEquals(new double[] {4041.8936232462647}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(1, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {4041.8936232462647}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean0);
      assertEquals(1, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      int int0 = (-2147);
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, (-2147), (long) (-2147));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2147, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (double) 1686L;
      doubleArray0[4] = (-2406.709091025755);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 113L, (int) (short)0);
      assertArrayEquals(new double[] {0.0, 0.0, 1686.0, 0.0, (-2406.709091025755)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2146512375;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (-269);
      intArray0[3] = 2680;
      intArray0[4] = (-1);
      intArray0[5] = 2680;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {2146512375, 0, (-269), 2680, (-1), 2680}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      
      Object[] objectArray0 = ArrayUtils.clone((Object[]) integerArray0);
      assertArrayEquals(new int[] {2146512375, 0, (-269), 2680, (-1), 2680}, intArray0);
      assertNotSame(integerArray0, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      long[] longArray0 = new long[3];
      longArray0[0] = (-2285L);
      longArray0[1] = (-404L);
      longArray0[2] = (-1L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertArrayEquals(new long[] {(-2285L), (-404L), (-1L)}, longArray0);
      assertFalse(boolean0);
      assertEquals(3, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((long[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1901.648);
      doubleArray0[2] = (-729.464036810478);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1566.997);
      doubleArray0[6] = 994.95370692;
      Integer integer0 = new Integer((-1416));
      assertNotNull(integer0);
      assertEquals((-1416), (int)integer0);
      
      Integer integer1 = new Integer((-2808));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-2808), (int)integer1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1073741823);
      intArray0[1] = 1794;
      intArray0[2] = 1794;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {(-1073741823), 1794, 1794}, intArray0);
      assertArrayEquals(new int[] {(-1073741823), 1794, 1794}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1901.648), (-729.464036810478), 0.0, (-1.0), (-1566.997), 994.95370692}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '|';
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Byte[] byteArray1 = new Byte[1];
      byte byte0 = (byte) (-121);
      Byte byte1 = Byte.valueOf((byte) (-121));
      assertNotNull(byte1);
      assertEquals((byte) (-121), (byte)byte1);
      
      byteArray1[0] = byte1;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-121)}, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (-538));
      assertArrayEquals(new double[] {0.0, (-1901.648), (-729.464036810478), 0.0, (-1.0), (-1566.997), 994.95370692}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(7, doubleArray0.length);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = Short.valueOf((short) (byte) (-121));
      assertNotNull(short0);
      assertEquals((short) (-121), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)2102);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)2102, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) short0);
      assertNotNull(short2);
      assertFalse(short0.equals((Object)short1));
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals((short) (-121), (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)1183);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short)1183, (short)short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((byte) (-121));
      assertNotNull(short4);
      assertTrue(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short2));
      assertEquals((short) (-121), (short)short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short(byte0);
      assertNotNull(short5);
      assertTrue(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short1));
      assertTrue(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short3));
      assertTrue(short5.equals((Object)short4));
      assertEquals((short) (-121), (short)short5);
      
      shortArray0[5] = short5;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1938));
      assertArrayEquals(new short[] {(short) (-121), (short)2102, (short) (-121), (short)1183, (short) (-121), (short) (-121)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Integer integer0 = new Integer((-1073741824));
      assertNotNull(integer0);
      assertEquals((-1073741824), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray0 = new double[1];
      boolean boolean2 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(1, doubleArray0.length);
      
      Float float0 = new Float((-1256.22));
      assertNotNull(float0);
      assertEquals((-1256.22F), (float)float0, 0.01F);
      
      Float float1 = Float.valueOf((-2289.953F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2289.953F), (float)float1, 0.01F);
      
      Float float2 = new Float((-2289.953F));
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-2289.953F), (float)float2, 0.01F);
      
      Float float3 = new Float(315.352F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(315.352F, (float)float3, 0.01F);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-329);
      shortArray1[1] = (short)16819;
      shortArray1[2] = (short) (-588);
      boolean boolean1 = ArrayUtils.isSameLength(shortArray1, (short[]) null);
      assertArrayEquals(new short[] {(short) (-329), (short)16819, (short) (-588)}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean1);
      assertEquals(3, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 9, 9);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 113L;
      longArray0[1] = 1686L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {113L, 1686L}, longArray0);
      assertArrayEquals(new long[] {113L, 1686L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      ArrayUtils.reverse(longArray1);
      assertArrayEquals(new long[] {113L, 1686L}, longArray0);
      assertArrayEquals(new long[] {1686L, 113L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-2820);
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[5] = (-2820);
      intArray0[6] = (-1);
      intArray0[7] = (int) (short)0;
      int[] intArray1 = ArrayUtils.add(intArray0, (-1));
      assertArrayEquals(new int[] {(-1), (-2820), 0, 0, 0, (-2820), (-1), 0, (-1)}, intArray1);
      assertArrayEquals(new int[] {(-1), (-2820), 0, 0, 0, (-2820), (-1), 0}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(9, intArray1.length);
      assertEquals(8, intArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-757), (-2146029697));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)3, (-1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 1869L;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1869L;
      doubleArray0[1] = (double) 1869L;
      doubleArray0[2] = (double) 1869L;
      doubleArray0[3] = (double) 0L;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {1869.0, 1869.0, 1869.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)10);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, byteArray0.length);
      
      boolean boolean2 = ArrayUtils.contains(doubleArray0, (double) 0L);
      assertArrayEquals(new double[] {1869.0, 1869.0, 1869.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(4, doubleArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[13];
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean0);
      assertEquals(13, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Double double0 = new Double((-2024.8216924737));
      assertNotNull(double0);
      assertEquals((-2024.8216924737), (double)double0, 0.01);
      
      Double double1 = new Double((-2024.8216924737));
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2024.8216924737), (double)double1, 0.01);
      
      Double double2 = new Double(64.0);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(64.0, (double)double2, 0.01);
      
      Double double3 = new Double(0.0);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 1686L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {0L, 1686L}, longArray0);
      assertArrayEquals(new long[] {0L, 1686L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      ArrayUtils.reverse(longArray1);
      assertArrayEquals(new long[] {0L, 1686L}, longArray0);
      assertArrayEquals(new long[] {1686L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      short[] shortArray0 = new short[5];
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-2820);
      intArray0[2] = (int) (short)0;
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)105;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 910, (int) (byte)2);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-89), (byte)2, (byte)0, (byte)105}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray1.length);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Integer integer0 = new Integer((-1073741824));
      assertNotNull(integer0);
      assertEquals((-1073741824), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-23));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Integer integer0 = Integer.getInteger("c*Z\"sU<bOy3E4,#");
      assertNull(integer0);
      
      int int0 = Integer.sum(2, 2);
      assertEquals(4, int0);
      
      String string0 = Integer.toUnsignedString(46);
      assertNotNull(string0);
      assertEquals("46", string0);
      
      int int1 = Integer.sum((-2143866046), 46);
      assertFalse(int1 == int0);
      assertEquals((-2143866000), int1);
      
      String string1 = ArrayUtils.toString((Object) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-437);
      shortArray0[3] = (short) (-437);
      shortArray0[4] = (short) (-437);
      shortArray0[5] = (short) (-1);
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (short)1, (int) (short) (-437));
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      Object[] objectArray0 = ArrayUtils.clone((Object[]) null);
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1050;
      shortArray0[2] = (short) (-1603);
      shortArray0[3] = (short) (-193);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)100;
      shortArray0[6] = (short)2;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (short)1050;
      objectArray0[1] = (Object) (short)1;
      objectArray0[2] = (Object) (short)100;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) (short)100;
      objectArray0[5] = (Object) (short)2;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, object1);
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertFalse(boolean0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte)0, (byte)64, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1243;
      intArray0[1] = 0;
      intArray0[2] = 2;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 1243, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1243, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Float float0 = new Float(4017.555620892);
      assertNotNull(float0);
      assertEquals(4017.5557F, (float)float0, 0.01F);
      
      Float float1 = new Float((-312.013F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-312.013F), (float)float1, 0.01F);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.lang.Object";
      stringArray0[1] = "";
      stringArray0[2] = "Wv`sWzMN ";
      stringArray0[3] = "%iAx0u53&nbs";
      stringArray0[4] = "java.lang.Object";
      stringArray0[5] = "java.lang.String";
      stringArray0[6] = "";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 18, (-710));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(7, stringArray0.length);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-7);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-3), (byte) (-7)}, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[1] = (float) (byte) (-3);
      floatArray0[2] = (float) (byte) (-3);
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (int) (byte) (-3), (-3.0F));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 1869L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertArrayEquals(new long[] {0L, 1869L}, longArray0);
      assertFalse(boolean0);
      assertEquals(2, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertSame(booleanArray0, booleanArray2);
      assertSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, (long[]) null);
      assertArrayEquals(new long[] {0L, 1869L}, longArray0);
      assertArrayEquals(new long[] {0L, 1869L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      Integer[] integerArray0 = new Integer[7];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(5, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-61));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals((-61), (int)integer1);
      
      integerArray0[1] = integer1;
      int int1 = 0;
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int1));
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(int0 == int1);
      assertEquals(5, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(512);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals(512, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-61));
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertEquals((-61), (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = Integer.valueOf(int1);
      assertNotNull(integer6);
      assertFalse(int1 == int0);
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer2));
      assertEquals(0, (int)integer6);
      
      integerArray0[6] = integer6;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {5, (-61), 0, 5, 512, (-61), 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(7, integerArray0.length);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      Boolean boolean0 = Boolean.valueOf("K+ITTHC");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = Boolean.getBoolean("K+ITTHC");
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) (byte)0;
      boolean boolean2 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(7, doubleArray0.length);
      
      Float float0 = new Float((-3603.348));
      assertNotNull(float0);
      assertEquals((-3603.348F), (float)float0, 0.01F);
      
      Float float1 = Float.valueOf((-488.0974F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-488.0974F), (float)float1, 0.01F);
      
      Float float2 = new Float((double) (-488.0974F));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-488.0974F), (float)float2, 0.01F);
      
      Float float3 = new Float(1475.94F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(1475.94F, (float)float3, 0.01F);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 4108);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      
      float[] floatArray1 = ArrayUtils.subarray((float[]) null, (int) (byte)0, 512);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[4] = 1.0F;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-111), (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(objectArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (-2808), (-815));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = ArrayUtils.toPrimitive((Long[]) null, 423L);
      assertNull(longArray1);
      
      int int1 = ArrayUtils.lastIndexOf((float[]) null, 395.59F);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Double double0 = new Double(1460.42079);
      assertNotNull(double0);
      assertEquals(1460.42079, (double)double0, 0.01);
      
      Double double1 = new Double((-1.0));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      
      Double double2 = new Double(0.0);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      
      Double double3 = new Double(1176.806444809984);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals(1176.806444809984, (double)double3, 0.01);
      
      // Undeclared exception!
      try { 
        Double.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(1, booleanArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1, 1);
      assertArrayEquals(new char[] {'q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'i', (int) (byte)0);
      assertArrayEquals(new char[] {'q'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Short short0 = new Short((short)3529);
      assertNotNull(short0);
      assertEquals((short)3529, (short)short0);
      
      Short short1 = new Short((short)392);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)392, (short)short1);
      
      Short short2 = Short.valueOf((short)1465);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short)1465, (short)short2);
      
      Short short3 = new Short((short) (-2039));
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short) (-2039), (short)short3);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)3529);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.clone(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float(605.54604071086);
      assertNotNull(float0);
      assertEquals(605.546F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1.5);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(3641.4075F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(3641.4075F, (float)float2, 0.01F);
      
      float[] floatArray1 = new float[3];
      floatArray1[0] = (float) floatArray0[0];
      floatArray1[1] = (-868.97845F);
      floatArray1[2] = 3641.4075F;
      float[] floatArray2 = ArrayUtils.addAll(floatArray1, floatArray1);
      assertArrayEquals(new float[] {605.546F, (-868.97845F), 3641.4075F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {605.546F, (-868.97845F), 3641.4075F, 605.546F, (-868.97845F), 3641.4075F}, floatArray2, 0.01F);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(3, floatArray1.length);
      assertEquals(6, floatArray2.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3641.4075F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, 3575);
      assertArrayEquals(new double[] {3641.407470703125}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) booleanArray1, (Object[]) integerArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotSame(booleanArray1, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, integerArray0.length);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Character[] characterArray0 = new Character[7];
      Character character0 = new Character('B');
      assertNotNull(character0);
      assertEquals('B', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('B');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('B', (char)character1);
      
      characterArray0[1] = character1;
      char char0 = 't';
      Character character2 = Character.valueOf('t');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('t', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf(char0);
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertEquals('t', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('J');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertEquals('J', (char)character4);
      
      characterArray0[4] = character4;
      char char1 = 'l';
      Character character5 = new Character('l');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)char1));
      assertFalse(character5.equals((Object)character0));
      assertEquals('l', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character(char1);
      assertNotNull(character6);
      assertFalse(char1 == char0);
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character4));
      assertTrue(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character2));
      assertTrue(character6.equals((Object)char1));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character0));
      assertEquals('l', (char)character6);
      
      characterArray0[6] = character6;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(7, characterArray0.length);
      assertEquals(7, characterArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((AbstractMap.SimpleEntry<Object, Object>[]) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)5;
      shortArray0[1] = (short)12;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)1;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-838);
      shortArray0[6] = (short) (-1300);
      shortArray0[7] = (short) (-2756);
      shortArray0[8] = (short) (-884);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-31), 0);
      assertArrayEquals(new short[] {(short)5, (short)12, (short) (-1), (short)1, (short) (-1), (short) (-838), (short) (-1300), (short) (-2756), (short) (-884)}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, longArray0.length);
      
      short[] shortArray0 = new short[0];
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short)671, 5);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      int int1 = ArrayUtils.indexOf((int[]) null, (int) (short)671, 2884);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)671;
      doubleArray0[1] = 1017.8;
      doubleArray0[2] = 406.3144096;
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (-1147.251), (-1));
      assertArrayEquals(new double[] {671.0, 1017.8, 406.3144096}, doubleArray0, 0.01);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(3, doubleArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      Object[] objectArray0 = ArrayUtils.clone((Object[]) null);
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)64;
      shortArray0[1] = (short)64;
      Character character0 = new Character('W');
      assertNotNull(character0);
      assertEquals('W', (char)character0);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'E');
      assertArrayEquals(new char[] {'W'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'y';
      charArray0[1] = 'T';
      charArray0[2] = 's';
      charArray0[3] = 'Z';
      charArray0[4] = 'i';
      charArray0[5] = '\\';
      charArray0[6] = 'v';
      charArray0[8] = 'F';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'v', (-1));
      assertArrayEquals(new char[] {'y', 'T', 's', 'Z', 'i', '\\', 'v', '\u0000', 'F'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(9, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'y', 'T', 's', 'Z', 'i', '\\', 'v', '\u0000', 'F'}, charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'v';
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 'T';
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 'v';
      floatArray0[5] = (float) 'F';
      floatArray0[6] = (float) '\\';
      floatArray0[7] = (float) 'F';
      floatArray0[8] = (float) 'v';
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0.0F);
      assertArrayEquals(new float[] {118.0F, (-1.0F), 84.0F, (-1.0F), 118.0F, 70.0F, 92.0F, 70.0F, 118.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {118.0F, (-1.0F), 84.0F, (-1.0F), 118.0F, 70.0F, 92.0F, 70.0F, 118.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(10, floatArray1.length);
      assertEquals(9, floatArray0.length);
      
      Float[] floatArray2 = new Float[1];
      floatArray2[0] = (Float) (-1.0F);
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray3, 0.01F);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      assertNotNull(floatArray3);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertEquals(1, floatArray2.length);
      assertEquals(1, floatArray3.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)117;
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte)118, (byte)60, (byte)0, (byte) (-23), (byte) (-1), (byte)48, (byte)117}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Integer integer0 = new Integer((-39));
      assertNotNull(integer0);
      assertEquals((-39), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) null, (-39), object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -39, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 113L;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)40;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)36;
      objectArray0[1] = (Object) (byte)2;
      objectArray0[2] = (Object) (byte)40;
      objectArray0[3] = (Object) (byte) (-59);
      objectArray0[4] = (Object) (byte)2;
      objectArray0[5] = (Object) (byte)36;
      objectArray0[6] = (Object) 113L;
      objectArray0[7] = (Object) (byte)2;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[5], (int) (byte)36);
      assertEquals((-1), int0);
      assertEquals(8, objectArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1797), (int) (byte)2);
      assertArrayEquals(new long[] {113L, 0L}, longArray0);
      assertArrayEquals(new long[] {113L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      Integer[] integerArray0 = new Integer[5];
      try { 
        Integer.decode(";ED");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \";ED\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float(605.54604071086);
      assertNotNull(float0);
      assertEquals(605.546F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      long[] longArray0 = new long[1];
      longArray0[0] = 1448L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {1448L}, longArray0);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 558;
      intArray0[1] = 558;
      intArray0[2] = 558;
      intArray0[3] = 558;
      intArray0[4] = 558;
      intArray0[5] = 558;
      intArray0[6] = 558;
      intArray0[7] = 558;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1686);
      assertArrayEquals(new int[] {558, 558, 558, 558, 558, 558, 558, 558}, intArray0);
      assertEquals((-1), int0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-2725.187F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F, 0);
      assertArrayEquals(new float[] {(-2725.187F), 1.0F, 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(1, int0);
      assertEquals(5, floatArray0.length);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(1);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-144.8));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-144.8), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(2, booleanArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      short[] shortArray0 = new short[5];
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = 1.0F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {1.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 1L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L, 2125114026);
      assertArrayEquals(new long[] {0L, 1L}, longArray0);
      assertEquals(1, int0);
      assertEquals(2, longArray0.length);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, 1L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)2);
      assertNull(byteArray0);
      
      try { 
        Short.decode("2W!O");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2W!O\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 3094L;
      longArray0[1] = 3094L;
      longArray0[2] = 3094L;
      longArray0[3] = 1100L;
      longArray0[4] = 3094L;
      longArray0[5] = 3094L;
      longArray0[7] = 3094L;
      longArray0[8] = 3094L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertArrayEquals(new long[] {3094L, 3094L, 3094L, 1100L, 3094L, 3094L, 0L, 3094L, 3094L}, longArray0);
      assertTrue(boolean0);
      assertEquals(9, longArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1234);
      shortArray0[1] = (short) (-105);
      shortArray0[2] = (short)0;
      short[] shortArray1 = new short[2];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[1] = (short)0;
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-1234), (short) (-105), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean1);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1901.648);
      doubleArray0[2] = (-729.464036810478);
      doubleArray0[4] = (-1.0);
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1901.648), (-729.464036810478), 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Byte byte0 = new Byte((byte)39);
      assertNotNull(byte0);
      assertEquals((byte)39, (byte)byte0);
      
      int int0 = Byte.compare((byte)63, (byte)39);
      assertEquals(24, int0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      
      Byte[] byteArray2 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      
      float[] floatArray0 = new float[0];
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-709.711F), 1517);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 2375.52136);
      assertArrayEquals(new double[] {0.0, (-1901.648), (-729.464036810478), 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1901.648), (-729.464036810478), 0.0, (-1.0), 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(1, booleanArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray1.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, booleanArray0.length);
      
      Integer integer0 = new Integer((-2299));
      assertNotNull(integer0);
      assertEquals((-2299), (int)integer0);
      
      boolean boolean2 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertSame(integerArray0, integerArray1);
      assertNotNull(map0);
      assertEquals(0, integerArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer1 = new Integer((-2299));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-2299), (int)integer1);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(integer1, object0);
      assertNotNull(abstractMap_SimpleEntry0);
      assertTrue(integer1.equals((Object)integer0));
      
      Comparator<Map.Entry<String, String>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      Integer integer2 = new Integer((-2299));
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals((-2299), (int)integer2);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(integer2, (Object) null);
      assertNotNull(abstractMap_SimpleEntry1);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      
      AbstractMap.SimpleEntry<Object, Object>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Object, Object>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 1);
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      AbstractMap.SimpleEntry<Object, Object>[] abstractMap_SimpleEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray0);
      assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
      assertNotSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
      assertNotNull(abstractMap_SimpleEntryArray1);
      assertFalse(abstractMap_SimpleEntryArray1.equals((Object)abstractMap_SimpleEntryArray0));
      assertEquals(2, abstractMap_SimpleEntryArray1.length);
      assertEquals(1, abstractMap_SimpleEntryArray0.length);
      
      Map<Object, Object> map1 = ArrayUtils.toMap(abstractMap_SimpleEntryArray1);
      assertFalse(map1.isEmpty());
      assertEquals(1, map1.size());
      assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
      assertNotSame(map1, map0);
      assertNotSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
      assertNotNull(map1);
      assertFalse(abstractMap_SimpleEntryArray1.equals((Object)abstractMap_SimpleEntryArray0));
      assertFalse(map1.equals((Object)map0));
      assertFalse(abstractMap_SimpleEntryArray0.equals((Object)abstractMap_SimpleEntryArray1));
      assertEquals(2, abstractMap_SimpleEntryArray1.length);
      assertEquals(1, abstractMap_SimpleEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Integer integer0 = new Integer((-1073741824));
      assertNotNull(integer0);
      assertEquals((-1073741824), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-316);
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-1.0F));
      assertArrayEquals(new float[] {(-316.0F)}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 2509.185F, 1375);
      assertArrayEquals(new float[] {(-316.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short)671, 5);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      int int1 = ArrayUtils.indexOf((int[]) null, (int) (short)671, 2884);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-1));
      assertNull(intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[1] = '\u0000';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      short[] shortArray0 = new short[0];
      int int2 = ArrayUtils.lastIndexOf(shortArray0, (short) (-504), (-1416));
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(0, shortArray0.length);
      
      int int3 = ArrayUtils.lastIndexOf(charArray0, '2', 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Integer integer0 = new Integer((-1073741824));
      assertNotNull(integer0);
      assertEquals((-1073741824), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-48);
      char char0 = '+';
      Character[] characterArray0 = new Character[3];
      Character character0 = Character.valueOf('+');
      assertNotNull(character0);
      assertEquals('+', (char)character0);
      
      Character character1 = Character.valueOf('+');
      assertNotNull(character1);
      assertEquals('+', (char)character1);
      
      characterArray0[1] = character1;
      char char1 = '\u0018';
      Character character2 = new Character('\u0018');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)char1));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)char0));
      assertEquals('\u0018', (char)character2);
      
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char1);
      assertArrayEquals(new char[] {'\u0018', '+', '\u0018'}, charArray0);
      assertNotNull(charArray0);
      assertFalse(char1 == char0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte) (-3);
      byteArray1[2] = (byte) (-48);
      byteArray1[3] = (byte) (-48);
      byteArray1[4] = (byte) (-3);
      byteArray1[5] = (byte) (-48);
      byteArray1[6] = (byte) (-48);
      byteArray1[7] = (byte) (-48);
      byteArray1[8] = (byte) (-3);
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte) (-3), (byte) (-48), (byte) (-48), (byte) (-3), (byte) (-48), (byte) (-48), (byte) (-48), (byte) (-3)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-3), (byte) (-48)}, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(9, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertEquals(11, byteArray2.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) char1;
      doubleArray0[1] = (double) char0;
      doubleArray0[2] = (double) (-1073741824);
      doubleArray0[3] = (double) (-1073741824);
      doubleArray0[4] = (double) (byte) (-48);
      doubleArray0[5] = (double) (byte)48;
      doubleArray0[6] = (double) (byte) (-48);
      doubleArray0[7] = (double) (byte) (-48);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) (byte) (-48));
      assertArrayEquals(new double[] {24.0, 43.0, (-1.073741824E9), (-1.073741824E9), 48.0, (-48.0), (-48.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {24.0, 43.0, (-1.073741824E9), (-1.073741824E9), (-48.0), 48.0, (-48.0), (-48.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Integer integer0 = new Integer((-1073741824));
      assertNotNull(integer0);
      assertEquals((-1073741824), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-1.0F));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      Character character0 = Character.valueOf('1');
      assertNotNull(character0);
      assertEquals('1', (char)character0);
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertArrayEquals(new char[] {'1'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-316), (-3027));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      String string0 = ArrayUtils.toString(object1, "&SCW_/{B4U0j)ad");
      assertNotSame(object1, object0);
      assertNotNull(string0);
      assertFalse(object1.equals((Object)object0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-3027);
      doubleArray0[1] = (double) (-3027);
      doubleArray0[2] = (double) (-1073741824);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) (-316);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-3027.0), (-3027), 0.0);
      assertArrayEquals(new double[] {(-3027.0), (-3027.0), (-1.073741824E9), (-1.0), (-316.0)}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      int int1 = 48;
      Object[] objectArray1 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray1);
      assertEquals(0, objectArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 48;
      doubleArray0[2] = (double) 48;
      int int2 = 4637;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 4637);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4637, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Short short0 = new Short((short)3529);
      assertNotNull(short0);
      assertEquals((short)3529, (short)short0);
      
      Short short1 = new Short((short)3529);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)3529, (short)short1);
      
      Short short2 = new Short((short) (-2039));
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short) (-2039), (short)short2);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)3529);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(booleanArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'false', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      char[] charArray0 = new char[1];
      charArray0[0] = '/';
      int int0 = ArrayUtils.indexOf(charArray0, '/', 46);
      assertArrayEquals(new char[] {'/'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = 'J';
      charArray0[0] = 'J';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'J'}, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = (Character) 'J';
      characterArray0[1] = (Character) 'J';
      characterArray0[2] = (Character) 'J';
      characterArray0[3] = (Character) 'J';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertArrayEquals(new char[] {'J', 'J', 'J', 'J'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray1.length);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(4, booleanArray0.length);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray1);
      assertArrayEquals(new char[] {'J', 'J', 'J', 'J'}, charArray2);
      assertArrayEquals(new char[] {'J', 'J', 'J', 'J'}, charArray1);
      assertNotSame(charArray2, charArray0);
      assertSame(charArray2, charArray1);
      assertSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray2);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(4, charArray2.length);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(integerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      short[] shortArray0 = new short[5];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      assertEquals(5, shortArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = 1.0F;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, floatArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf(charArray1, 'E');
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      int int2 = ArrayUtils.indexOf(booleanArray0, true, (-538));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-729.464036810478);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 107;
      longArray0[1] = (long) 107;
      longArray0[2] = (long) 107;
      longArray0[3] = (long) 107;
      longArray0[4] = (long) 107;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 585, 585);
      assertArrayEquals(new long[] {107L, 107L, 107L, 107L, 107L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
      
      long[] longArray1 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray1);
      
      float[] floatArray0 = new float[1];
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) 107L);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, floatArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Float float0 = Float.valueOf((float) (-1));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      Float float1 = new Float((double) 585);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(585.0F, (float)float1, 0.01F);
      
      Float float2 = new Float(1.0F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float2, 0.01F);
      
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray1);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray0, 107L);
      assertArrayEquals(new long[] {107L, 107L, 107L, 107L}, longArray2);
      assertArrayEquals(new long[] {107L, 107L, 107L, 107L, 107L}, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(4, longArray2.length);
      assertEquals(5, longArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, (-1)}, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, (-1), Integer.MAX_VALUE, (-1)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object2;
      objectArray0[1] = object1;
      objectArray0[2] = object2;
      objectArray0[3] = object2;
      objectArray0[4] = object3;
      objectArray0[5] = object2;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object4);
      assertNotSame(object4, object3);
      assertNotSame(object4, object1);
      assertNotSame(object4, object2);
      assertNotSame(object4, object0);
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertEquals((-1), int0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 3749L;
      longArray0[1] = 453L;
      longArray0[2] = 1L;
      longArray0[3] = 1751L;
      longArray0[4] = (-1L);
      longArray0[5] = 3016L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {3749L, 453L, 1L, 1751L, (-1L), 3016L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) longArray1, object0, 46);
      assertArrayEquals(new long[] {3749L, 453L, 1L, 1751L, (-1L), 3016L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {3749L, 453L, 1L, 1751L, (-1L), 3016L}, longArray0);
      assertTrue(boolean0);
      assertEquals(6, longArray0.length);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)1044);
      assertNotNull(short0);
      assertEquals((short)1044, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)1044, (short)short1);
      assertEquals(3, shortArray0.length);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)2981);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short)2981, (short)short2);
      
      shortArray0[2] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)1044, (short)1044, (short)2981}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Float float0 = new Float((-1481.426F));
      assertNotNull(float0);
      assertEquals((-1481.426F), (float)float0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)48;
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-19), (byte)48}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, byteArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      float[] floatArray0 = new float[5];
      Character[] characterArray0 = new Character[8];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(8, characterArray0.length);
      assertEquals(8, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, 458);
      assertEquals((-1), int0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      boolean boolean0 = ArrayUtils.isSameType("}", object2);
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 458;
      floatArray0[1] = (float) 458;
      floatArray0[2] = (float) 458;
      floatArray0[3] = (float) 458;
      floatArray0[4] = (float) 458;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (float) 458;
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-2017.0F));
      assertArrayEquals(new float[] {458.0F, 458.0F, 458.0F, 458.0F, 458.0F, (-1.0F), 458.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, floatArray0.length);
      
      Character character0 = new Character('W');
      assertNotNull(character0);
      assertEquals('W', (char)character0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = 'W';
      charArray0[2] = 'm';
      charArray0[3] = '|';
      charArray0[4] = 'm';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertArrayEquals(new char[] {'1', 'W', 'm', '|', 'm'}, charArray1);
      assertArrayEquals(new char[] {'1', 'W', 'm', '|', 'm'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray0.length);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 458, 458);
      assertArrayEquals(new float[] {458.0F, 458.0F, 458.0F, 458.0F, 458.0F, (-1.0F), 458.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      boolean boolean0 = Character.isSurrogate(')');
      assertFalse(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1270L;
      longArray0[1] = (long) ')';
      longArray0[2] = (long) '<';
      longArray0[3] = (long) '<';
      longArray0[4] = (long) '<';
      longArray0[5] = (long) ')';
      longArray0[6] = (long) '<';
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {1270L, 41L, 60L, 60L, 60L, 41L, 60L}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(7, longArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean2 = ArrayUtils.contains(longArray0, 1270L);
      assertArrayEquals(new long[] {1270L, 41L, 60L, 60L, 60L, 41L, 60L}, longArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(7, longArray0.length);
      
      boolean boolean3 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(1, booleanArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertFalse(boolean0);
      assertEquals(3, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, booleanArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3422);
      shortArray0[1] = (short)1721;
      shortArray0[2] = (short) (-649);
      boolean boolean2 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertArrayEquals(new short[] {(short) (-3422), (short)1721, (short) (-649)}, shortArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(3, shortArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean3 = ArrayUtils.isSameLength(shortArray1, (short[]) null);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-330.1138804896572);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1898.246606101);
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      boolean boolean0 = Boolean.getBoolean("Windows 9");
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = ", Length: 0";
      stringArray0[1] = "Windows 9";
      stringArray0[3] = ", Length: 0";
      stringArray0[4] = ", Length: 0";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) integerArray0);
      assertTrue(boolean0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Float float0 = new Float((-2.14381274E9F));
      assertNotNull(float0);
      assertEquals((-2.14381274E9F), (float)float0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-265.0);
      doubleArray0[1] = (double) 1116.11F;
      doubleArray0[2] = (double) (-2.14381274E9F);
      doubleArray0[3] = (double) 1116.11F;
      doubleArray0[4] = (double) (-704.64246F);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-265.0), 1116.1099853515625, (-2.143812736E9), 1116.1099853515625, (-704.6424560546875)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.4307325F;
      floatArray0[1] = (-2.14381274E9F);
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-265.0), 1116.1099853515625, (-2.143812736E9), 1116.1099853515625, (-704.6424560546875)}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {1.4307325F, (-2.14381274E9F)}, floatArray0, 0.01F);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.clone(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      
      boolean[] booleanArray3 = ArrayUtils.add(booleanArray2, boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray3));
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotNull(booleanArray3);
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertEquals(3, booleanArray3.length);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-3478);
      doubleArray0[1] = (double) (short) (-3478);
      doubleArray0[2] = (double) (short) (-3478);
      doubleArray0[3] = (double) (short) (-3478);
      doubleArray0[4] = (double) (short) (-3478);
      doubleArray0[5] = (double) (short) (-3478);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) (short) (-3478);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-3478.0));
      assertArrayEquals(new double[] {(-3478.0), (-3478.0), (-3478.0), (-3478.0), (-3478.0), (-3478.0), 0.0, (-3478.0)}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      Byte byte0 = new Byte((byte) (-107));
      assertNotNull(byte0);
      assertEquals((byte) (-107), (byte)byte0);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[0] = 1L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L, 2125114026);
      assertArrayEquals(new long[] {1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(0, int0);
      assertEquals(8, longArray0.length);
      
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-2725.187F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, (-1));
      assertArrayEquals(new float[] {(-2725.187F), 1.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, int0);
      assertEquals(5, floatArray0.length);
      
      Double double0 = new Double(1119.4855053775113);
      assertNotNull(double0);
      assertEquals(1119.4855053775113, (double)double0, 0.01);
      
      Double double1 = new Double(0.0F);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)2);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray0, doubleArray2);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray1, doubleArray2);
      assertSame(doubleArray2, doubleArray0);
      assertSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 0);
      assertArrayEquals(new char[] {'q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      long[] longArray0 = new long[5];
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) 'q';
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 113L, 107);
      assertArrayEquals(new long[] {0L, 0L, 113L, 0L, 0L}, longArray0);
      assertEquals(2, int0);
      assertEquals(5, longArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) 0L);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(0, floatArray0.length);
      
      char[] charArray2 = ArrayUtils.clone(charArray1);
      assertArrayEquals(new char[] {'q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1236, 2);
      assertArrayEquals(new long[] {0L, 0L, 113L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 113L;
      longArray0[1] = 1686L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {113L, 1686L}, longArray0);
      assertArrayEquals(new long[] {113L, 1686L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      int int0 = ArrayUtils.indexOf((float[]) null, (-2153.0F), 2099761789);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 113L;
      objectArray0[1] = (Object) 113L;
      objectArray0[2] = (Object) 113L;
      objectArray0[3] = (Object) 1686L;
      objectArray0[4] = object1;
      objectArray0[5] = (Object) 113L;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(6, objectArray0.length);
      
      Boolean boolean1 = Boolean.valueOf("} m|S5VgM+x&QKAD`Rn");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      boolean boolean2 = Boolean.getBoolean("");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      int int0 = (-2147);
      // Undeclared exception!
      try { 
        ArrayUtils.remove((long[]) null, (-2147));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2147, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      
      objectArray0[1] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object3));
      
      objectArray0[5] = object5;
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(6, objectArray0.length);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2024.8216924737);
      doubleArray0[3] = 1.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2179.61428437316, 521);
      assertArrayEquals(new double[] {1.0, 1.0, (-2024.8216924737), 1.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      
      Object[] objectArray1 = ArrayUtils.clone(objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(6, objectArray0.length);
      assertEquals(6, objectArray1.length);
      
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      ArrayUtils.reverse(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, objectArray0[1]);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(5, objectArray0.length);
      assertEquals(4, objectArray1.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1300L);
      longArray0[1] = (-1300L);
      longArray0[2] = 0L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 585);
      assertArrayEquals(new long[] {(-1300L), (-1300L), 0L, 0L}, longArray0);
      assertEquals(3, int0);
      assertEquals(4, longArray0.length);
      
      Long[] longArray1 = new Long[0];
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, 0L);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1064;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {1064}, intArray0);
      assertArrayEquals(new int[] {1064, 1064}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      shortArray0[0] = short0;
      int int0 = Short.compare((short)2910, (short) (-975));
      assertEquals(3885, int0);
      
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) shortArray0, (Object[]) shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (-409L);
      boolean boolean0 = ArrayUtils.contains((long[]) null, (-409L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      float[] floatArray0 = new float[0];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-3);
      byteArray0[5] = (byte) (-49);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      double[] doubleArray0 = new double[0];
      boolean boolean2 = ArrayUtils.isNotEmpty(doubleArray0);
      assertFalse(boolean2 == boolean1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'Y';
      charArray0[1] = 'U';
      charArray0[2] = '@';
      charArray0[3] = 'q';
      charArray0[4] = 'M';
      charArray0[5] = 'j';
      boolean boolean3 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 113L;
      longArray0[1] = 1686L;
      ArrayUtils.clone(longArray0);
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.add(longArray0, (long) (-1));
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_INT_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-2725.187F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1.0F;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      Integer integer0 = new Integer((byte)0);
      Integer integer1 = new Integer((-2309));
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-2913));
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      long[] longArray0 = new long[19];
      longArray0[0] = (-404L);
      longArray0[2] = (-404L);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-312.68);
      doubleArray0[1] = 1243.4226357;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      boolean boolean2 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean2 == boolean1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 5427.6F;
      floatArray0[1] = 1560.0F;
      floatArray0[2] = 1506.1951F;
      floatArray0[3] = 1506.1951F;
      floatArray0[4] = (-94.51598F);
      boolean boolean3 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertFalse(boolean3 == boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-94.51598F);
      objectArray0[1] = (Object) 1506.1951F;
      objectArray0[2] = (Object) 1506.1951F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray1.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      ArrayUtils.toObject((boolean[]) null);
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'G';
      char[] charArray1 = new char[2];
      charArray1[0] = 'G';
      charArray1[1] = 'G';
      boolean boolean2 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      ArrayUtils.reverse(byteArray0);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short)4408;
      shortArray0[2] = (short) (-16808);
      doubleArray0[1] = (double) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, (int) (byte)0);
      assertEquals(0, int0);
      
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 4017.555620892);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)35;
      byteArray0[1] = (byte)39;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)49);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[4] = 1.0F;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-115);
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (-2675L);
      ArrayUtils.lastIndexOf(longArray0, (-2675L), (-70));
      int[] intArray0 = null;
      ArrayUtils.indexOf((int[]) null, 4, 48);
      Object[] objectArray0 = null;
      ArrayUtils.isEmpty((Object[]) null);
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (-1), (long) 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 501L;
      ArrayUtils.isNotEmpty(longArray0);
      Character character0 = new Character('{');
      Character character1 = new Character('~');
      Character.valueOf('9');
      Character.valueOf('9');
      Character.valueOf('{');
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '{');
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      ArrayUtils.toArray((Object[]) null);
      boolean[] booleanArray0 = new boolean[2];
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(1, int0);
      
      Boolean boolean0 = Boolean.FALSE;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-2247.993F);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 604.0F, 1);
      assertEquals((-1), int1);
      
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Integer integer0 = new Integer((-31));
      Object object0 = new Object();
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      boolean boolean1 = ArrayUtils.contains(longArray0, 1137L);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[3] = 48;
      boolean boolean2 = new Boolean(true);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-4635.3457F);
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 0);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short)1477);
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      shortArray0[1] = short1;
      Short short2 = Short.valueOf((short)1477);
      shortArray0[2] = short2;
      Short short3 = new Short((short) shortArray0[2]);
      shortArray0[3] = short3;
      Boolean boolean0 = Boolean.FALSE;
      Boolean[] booleanArray0 = new Boolean[5];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      boolean[] booleanArray3 = ArrayUtils.add(booleanArray2, (boolean) boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray3));
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((-1880.3662F));
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) shortArray0[1]);
      assertArrayEquals(new float[] {(-1880.3662F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      char[] charArray0 = new char[2];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(4, charArray1.length);
      
      ArrayUtils.indexOf((Object[]) floatArray0, (Object) boolean0, (int) shortArray0[1]);
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)2013);
      assertArrayEquals(new short[] {(short)1477, (short)1477, (short)1477, (short)1477}, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)3;
      shortArray0[2] = (short)554;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)100;
      shortArray0[7] = (short) (-3357);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)554, (-2444));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean0);
      
      Double double0 = new Double((-947.99));
      Double double1 = new Double((-947.99));
      boolean[] booleanArray1 = new boolean[3];
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, (boolean[]) null);
      assertNotNull(booleanArray2);
      assertEquals(3, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = (-2675L);
      longArray0[2] = 0L;
      Double double0 = new Double(2394.1612921767);
      Double.min((-3513.574394683), (-3513.574394683));
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      
      Character character0 = Character.valueOf('5');
      Character.valueOf('x');
      Character character1 = new Character('C');
      Character character2 = new Character('U');
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = character0;
      characterArray0[1] = character1;
      characterArray0[2] = character0;
      characterArray0[3] = character1;
      characterArray0[4] = character2;
      characterArray0[5] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '9');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'5', 'C', '5', 'C', 'U', '5'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      long[] longArray0 = new long[2];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Integer integer0 = new Integer((-31));
      Object object0 = new Object();
      ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, objectArray0);
      assertTrue(boolean0);
  }
}

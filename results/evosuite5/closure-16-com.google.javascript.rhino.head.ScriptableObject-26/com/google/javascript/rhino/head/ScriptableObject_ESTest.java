/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 07:05:31 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.BoundFunction;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.Delegator;
import com.google.javascript.rhino.head.FieldAndMethods;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.InterpretedFunction;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.JavaMembers;
import com.google.javascript.rhino.head.LazilyLoadedCtor;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeBoolean;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeDate;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeJavaArray;
import com.google.javascript.rhino.head.NativeJavaClass;
import com.google.javascript.rhino.head.NativeJavaMethod;
import com.google.javascript.rhino.head.NativeJavaPackage;
import com.google.javascript.rhino.head.NativeJavaTopPackage;
import com.google.javascript.rhino.head.NativeMath;
import com.google.javascript.rhino.head.NativeNumber;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.NativeScript;
import com.google.javascript.rhino.head.NativeWith;
import com.google.javascript.rhino.head.Script;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.TopLevel;
import com.google.javascript.rhino.head.UniqueTag;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ScriptableObject_ESTest extends ScriptableObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test00()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(nativeArray0);
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isEmpty());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(0L, nativeArray0.getLength());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.isSealed());
      
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      assertNotNull(nativeJavaClass0);
      assertEquals("JavaClass", nativeJavaClass0.getClassName());
      
      ScriptableObject.putProperty((Scriptable) nativeArray0, 0, (Object) nativeJavaClass0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isEmpty());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(1L, nativeArray0.getLength());
      assertEquals("Array", nativeArray0.getClassName());
      assertFalse(nativeArray0.isSealed());
      assertEquals(1L, nativeArray0.jsGet_length());
      assertEquals("JavaClass", nativeJavaClass0.getClassName());
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      
      Context context0 = Context.getCurrentContext();
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertNotNull(context0);
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      
      // Undeclared exception!
      try { 
        nativeIterator_StopIteration0.defineOwnProperties(context0, nativeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Expected argument of type object, but instead had type object
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeIterator_StopIteration0);
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      
      Double double0 = new Double(13);
      assertNotNull(double0);
      assertEquals(13.0, (double)double0, 0.01);
      
      Object object0 = nativeIterator_StopIteration0.remove((Object) double0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNull(object0);
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeCall0);
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertTrue(nativeCall0.isExtensible());
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      
      Object object0 = nativeIterator_StopIteration0.remove((Object) nativeCall0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNull(object0);
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test03()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(topLevel0);
      assertFalse(topLevel0.hasPrototypeMap());
      assertEquals("object", topLevel0.getTypeOf());
      assertTrue(topLevel0.isExtensible());
      assertTrue(topLevel0.isEmpty());
      assertEquals("global", topLevel0.getClassName());
      assertFalse(topLevel0.avoidObjectDetection());
      assertFalse(topLevel0.isSealed());
      
      ScriptableObject.defineConstProperty(topLevel0, "6");
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(topLevel0.hasPrototypeMap());
      assertEquals("object", topLevel0.getTypeOf());
      assertTrue(topLevel0.isExtensible());
      assertEquals("global", topLevel0.getClassName());
      assertFalse(topLevel0.avoidObjectDetection());
      assertFalse(topLevel0.isSealed());
      assertFalse(topLevel0.isEmpty());
      
      Context context0 = Context.getCurrentContext();
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertNotNull(context0);
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeIterator_StopIteration0);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      
      // Undeclared exception!
      try { 
        nativeIterator_StopIteration0.defineOwnProperties(context0, topLevel0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Expected argument of type object, but instead had type object
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      
      boolean boolean0 = nativeIterator_StopIteration0.isEmpty();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber((-434.96647666));
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeNumber0);
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertFalse(nativeNumber0.isSealed());
      assertTrue(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isExtensible());
      
      nativeNumber0.sealObject();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertTrue(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isSealed());
      assertTrue(nativeNumber0.isExtensible());
      
      int int0 = nativeNumber0.size();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertTrue(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isSealed());
      assertTrue(nativeNumber0.isExtensible());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber((-434.96647666));
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(nativeNumber0);
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.isSealed());
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      
      int int0 = nativeNumber0.size();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.isSealed());
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      Context context0 = contextFactory0.makeContext();
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertNotNull(context0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeArray0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(0L, nativeArray0.getLength());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      
      ScriptableObject scriptableObject0 = nativeArray0.getOwnPropertyDescriptor(context0, contextFactory0);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertNull(scriptableObject0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(0L, nativeArray0.getLength());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeIterator_StopIteration0);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      
      NativeArray nativeArray0 = new NativeArray(2);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeArray0);
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(2L, nativeArray0.getLength());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(2L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.avoidObjectDetection());
      
      NativeObject nativeObject0 = (NativeObject)ScriptableObject.buildDataDescriptor(nativeIterator_StopIteration0, nativeArray0, 1);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeObject0);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(2L, nativeArray0.getLength());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(2L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.isEmpty());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertFalse(nativeObject0.isSealed());
      
      Object[] objectArray0 = ScriptableObject.getPropertyIds(nativeObject0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, objectArray0.length);
      assertNotNull(objectArray0);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(2L, nativeArray0.getLength());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(2L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.isEmpty());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertFalse(nativeObject0.isSealed());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(2116.5644818);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeNumber0);
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertFalse(nativeNumber0.isSealed());
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isEmpty());
      assertTrue(nativeNumber0.isExtensible());
      
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeCall0);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertTrue(nativeCall0.isExtensible());
      assertTrue(nativeCall0.isEmpty());
      
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      nativeCall0.putConst((String) null, nativeNumber0, double0);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertFalse(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.isSealed());
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertTrue(nativeCall0.isExtensible());
      assertTrue(nativeCall0.isEmpty());
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeNumber0, (String) null);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertFalse(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.isSealed());
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(nativeError0);
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isExtensible());
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeJavaTopPackage0);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      
      NativeJavaPackage nativeJavaPackage0 = nativeJavaTopPackage0.forcePackage(")", nativeError0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeJavaPackage0);
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isExtensible());
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertFalse(nativeJavaPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeJavaTopPackage0, ")");
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(importerTopLevel0);
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isEmpty());
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeJavaTopPackage0);
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      
      NativeJavaPackage nativeJavaPackage0 = nativeJavaTopPackage0.forcePackage("&", importerTopLevel0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(nativeJavaPackage0);
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isEmpty());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertFalse(nativeJavaPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertTrue(nativeJavaPackage0.isExtensible());
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeJavaTopPackage0, "getCla");
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isEmpty());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeCall0);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isExtensible());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(importerTopLevel0);
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      
      nativeIterator_StopIteration0.addIdFunctionProperty(nativeCall0, importerTopLevel0, 116, "listIterator", 13);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.isEmpty());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeContinuation0);
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      
      nativeIterator_StopIteration0.put(0, (Scriptable) nativeCall0, (Object) nativeContinuation0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      
      LazilyLoadedCtor lazilyLoadedCtor0 = new LazilyLoadedCtor(nativeCall0, (String) null, (String) null, true, false);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(lazilyLoadedCtor0);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeBoolean0);
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
      
      Class<NativeArray> class0 = NativeArray.class;
      nativeBoolean0.defineProperty("^", class0, 8);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
      
      LazilyLoadedCtor lazilyLoadedCtor0 = new LazilyLoadedCtor(nativeBoolean0, "^", "^", false);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(lazilyLoadedCtor0);
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test14()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(nativeCall0);
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isEmpty());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.avoidObjectDetection());
      
      // Undeclared exception!
      try { 
        nativeCall0.getAttributes("finishInit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property finishInit not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(nativeBoolean0);
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      
      nativeBoolean0.preventExtensions();
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isExtensible());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      
      ScriptableObject.defineConstProperty(nativeBoolean0, "ms1Ag.modify.sealed");
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isExtensible());
      assertEquals("Boolean", nativeBoolean0.getClassName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeBoolean0);
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.isSealed());
      assertTrue(nativeBoolean0.isExtensible());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isEmpty());
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      nativeBoolean0.preventExtensions();
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isExtensible());
      assertTrue(nativeBoolean0.isEmpty());
      
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeBoolean0, double0, 13, "^", 0, nativeBoolean0);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(idFunctionObject0);
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isExtensible());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals(13, idFunctionObject0.methodId());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertTrue(idFunctionObject0.isEmpty());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertTrue(idFunctionObject0.isExtensible());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals(0, idFunctionObject0.getArity());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals(0, idFunctionObject0.getLength());
      assertEquals("^", idFunctionObject0.getFunctionName());
      
      Class<NativeArray> class0 = NativeArray.class;
      nativeBoolean0.defineProperty("duplicate.defineClass.name", class0, 8);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isExtensible());
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(importerTopLevel0);
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      
      idFunctionObject0.put("duplicate.defineClass.name", (Scriptable) nativeBoolean0, (Object) importerTopLevel0);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isExtensible());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals(13, idFunctionObject0.methodId());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertTrue(idFunctionObject0.isEmpty());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertTrue(idFunctionObject0.isExtensible());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals(0, idFunctionObject0.getArity());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals(0, idFunctionObject0.getLength());
      assertEquals("^", idFunctionObject0.getFunctionName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      
      // Undeclared exception!
      try { 
        nativeIterator_StopIteration0.associateValue(contextFactory0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      Context context0 = contextFactory0.enterContext();
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertNotNull(context0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      
      ImporterTopLevel importerTopLevel0 = (ImporterTopLevel)context0.scratchScriptable;
      assertNull(importerTopLevel0);
      
      Class<InterpretedFunction> class0 = InterpretedFunction.class;
      Class<NativeCall> class1 = NativeCall.class;
      // Undeclared exception!
      try { 
        JavaMembers.lookupClass(importerTopLevel0, class0, class1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeError0);
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      
      Delegator delegator0 = new Delegator(nativeError0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(delegator0);
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      
      // Undeclared exception!
      try { 
        NativeJavaArray.wrap((Scriptable) delegator0, (Object) 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test20()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      Context context0 = contextFactory0.makeContext();
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(importerTopLevel0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(importerTopLevel0.isEmpty());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeCall0);
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isEmpty());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(importerTopLevel0, context0, 50, "language version", 1368933789, nativeCall0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(idFunctionObject0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(importerTopLevel0.isEmpty());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isEmpty());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertEquals(1368933789, idFunctionObject0.getLength());
      assertTrue(idFunctionObject0.isEmpty());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertEquals(50, idFunctionObject0.methodId());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals("language version", idFunctionObject0.getFunctionName());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals(1368933789, idFunctionObject0.getArity());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      
      Object object0 = ScriptableObject.getTopScopeValue(importerTopLevel0, idFunctionObject0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNull(object0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(importerTopLevel0.isEmpty());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isEmpty());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertEquals(1368933789, idFunctionObject0.getLength());
      assertTrue(idFunctionObject0.isEmpty());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertEquals(50, idFunctionObject0.methodId());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals("language version", idFunctionObject0.getFunctionName());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals(1368933789, idFunctionObject0.getArity());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertFalse(idFunctionObject0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object[] objectArray0 = ScriptableObject.getPropertyIds((Scriptable) null);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      Context context0 = contextFactory0.enterContext();
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertNotNull(context0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      
      NativeObject nativeObject0 = (NativeObject)context0.initStandardObjects();
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(nativeObject0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertTrue(nativeObject0.isExtensible());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isEmpty());
      assertFalse(nativeObject0.isSealed());
      assertEquals("Object", nativeObject0.getClassName());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      
      Object[] objectArray0 = ScriptableObject.getPropertyIds(nativeObject0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertTrue(nativeObject0.isExtensible());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isEmpty());
      assertFalse(nativeObject0.isSealed());
      assertEquals("Object", nativeObject0.getClassName());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeIterator_StopIteration0, "");
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(nativeCall0);
      assertTrue(nativeCall0.isExtensible());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
      
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) nativeCall0, 2);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(nativeCall0.isExtensible());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test25()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(nativeBoolean0);
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.isSealed());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      
      Class<NativeArray> class0 = NativeArray.class;
      nativeBoolean0.defineProperty("^", class0, 8);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.isSealed());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      
      // Undeclared exception!
      try { 
        ScriptableObject.redefineProperty(nativeBoolean0, "^", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: redeclaration of var ^.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(nativeBoolean0);
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.isSealed());
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeBoolean0, double0, 13, "^", 0, nativeBoolean0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(idFunctionObject0);
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals(13, idFunctionObject0.methodId());
      assertTrue(idFunctionObject0.isEmpty());
      assertEquals(0, idFunctionObject0.getLength());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals("^", idFunctionObject0.getFunctionName());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals(0, idFunctionObject0.getArity());
      
      ScriptableObject.redefineProperty(idFunctionObject0, "=n?bM6di", false);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals(13, idFunctionObject0.methodId());
      assertTrue(idFunctionObject0.isEmpty());
      assertEquals(0, idFunctionObject0.getLength());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals("^", idFunctionObject0.getFunctionName());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals(0, idFunctionObject0.getArity());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeCall0);
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      
      Class<NativeMath> class0 = NativeMath.class;
      NativeMath nativeMath0 = ScriptableObject.getTypedProperty((Scriptable) nativeCall0, (String) null, class0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNull(nativeMath0);
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-3584L));
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeArray0);
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals((-3584L), nativeArray0.getLength());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals((-3584L), nativeArray0.jsGet_length());
      assertFalse(nativeArray0.isSealed());
      assertTrue(nativeArray0.isExtensible());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isEmpty());
      
      ScriptableObject.putProperty((Scriptable) nativeArray0, 2, (Object) nativeArray0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(3L, nativeArray0.getLength());
      assertFalse(nativeArray0.isSealed());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(3L, nativeArray0.jsGet_length());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isEmpty());
      
      Object[] objectArray0 = nativeArray0.toArray();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(3, objectArray0.length);
      assertNotNull(objectArray0);
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(3L, nativeArray0.getLength());
      assertFalse(nativeArray0.isSealed());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(3L, nativeArray0.jsGet_length());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isEmpty());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test29()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(587.87234647);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(nativeNumber0);
      assertFalse(nativeNumber0.isSealed());
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertTrue(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isExtensible());
      
      nativeNumber0.sealObject();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertTrue(nativeNumber0.isEmpty());
      assertTrue(nativeNumber0.isSealed());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isExtensible());
      
      // Undeclared exception!
      try { 
        ScriptableObject.defineConstProperty(nativeNumber0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot modify a property of a sealed object: 0.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        NativeDate.init((Scriptable) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot modify a property of a sealed object: Date.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(importerTopLevel0);
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      
      NativeObject nativeObject0 = (NativeObject)ScriptableObject.buildDataDescriptor(importerTopLevel0, importerTopLevel0, 8);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeObject0);
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.isEmpty());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isExtensible());
      
      nativeObject0.put("jsFunction_createObject", (Scriptable) importerTopLevel0, (Object) importerTopLevel0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(importerTopLevel0.isEmpty());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.isEmpty());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isExtensible());
      
      Scriptable scriptable0 = ScriptableObject.getClassPrototype(importerTopLevel0, "jsFunction_createObject");
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNull(scriptable0);
      assertFalse(importerTopLevel0.isEmpty());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test32()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(nativeError0);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      
      Class<InterpretedFunction> class0 = InterpretedFunction.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "UfRzC~";
      // Undeclared exception!
      try { 
        nativeError0.defineFunctionProperties(stringArray0, class0, (-526));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"UfRzC~\" not found in \"com.google.javascript.rhino.head.InterpretedFunction\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptableObject.ensureScriptable("__iterator__");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Expected argument of type object, but instead had type string
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test34()  throws Throwable  {
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("language version");
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(nativeJavaPackage0);
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertFalse(nativeJavaPackage0.isSealed());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      
      NativeJavaPackage nativeJavaPackage1 = (NativeJavaPackage)ScriptableObject.ensureScriptable(nativeJavaPackage0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeJavaPackage1);
      assertSame(nativeJavaPackage0, nativeJavaPackage1);
      assertSame(nativeJavaPackage1, nativeJavaPackage0);
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertFalse(nativeJavaPackage0.isSealed());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertFalse(nativeJavaPackage1.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaPackage1.getClassName());
      assertTrue(nativeJavaPackage1.isExtensible());
      assertFalse(nativeJavaPackage1.isSealed());
      assertEquals("object", nativeJavaPackage1.getTypeOf());
      assertTrue(nativeJavaPackage1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeBoolean0);
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      
      boolean boolean0 = nativeBoolean0.isGenericDescriptor(nativeBoolean0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeError0);
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      
      NativeObject nativeObject0 = (NativeObject)ScriptableObject.buildDataDescriptor(nativeError0, nativeError0, 4);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(nativeObject0);
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isEmpty());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeBoolean0);
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      
      boolean boolean0 = nativeBoolean0.isGenericDescriptor(nativeObject0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isEmpty());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeIterator_StopIteration0);
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      
      NativeArray nativeArray0 = new NativeArray(2);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeArray0);
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertEquals(2L, nativeArray0.jsGet_length());
      assertEquals(2L, nativeArray0.getLength());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isExtensible());
      
      NativeObject nativeObject0 = (NativeObject)ScriptableObject.buildDataDescriptor(nativeArray0, nativeIterator_StopIteration0, 2);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeObject0);
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertEquals(2L, nativeArray0.jsGet_length());
      assertEquals(2L, nativeArray0.getLength());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isExtensible());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertTrue(nativeObject0.isExtensible());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.isEmpty());
      
      int int0 = nativeArray0.applyDescriptorToAttributeBitset(103, nativeObject0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertEquals(2L, nativeArray0.jsGet_length());
      assertEquals(2L, nativeArray0.getLength());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isExtensible());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertTrue(nativeObject0.isExtensible());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.isEmpty());
      assertEquals(98, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test38()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeCall0);
      assertFalse(nativeCall0.hasPrototypeMap());
      assertFalse(nativeCall0.isSealed());
      assertEquals("object", nativeCall0.getTypeOf());
      assertTrue(nativeCall0.isEmpty());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isExtensible());
      
      Context context0 = Context.getContext();
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(importerTopLevel0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      
      NativeWith nativeWith0 = new NativeWith(nativeCall0, importerTopLevel0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(nativeWith0);
      assertFalse(nativeCall0.hasPrototypeMap());
      assertFalse(nativeCall0.isSealed());
      assertEquals("object", nativeCall0.getTypeOf());
      assertTrue(nativeCall0.isEmpty());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("With", nativeWith0.getClassName());
      
      NativeObject nativeObject0 = (NativeObject)ScriptableObject.buildDataDescriptor(nativeCall0, nativeWith0, 4);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeObject0);
      assertFalse(nativeCall0.hasPrototypeMap());
      assertFalse(nativeCall0.isSealed());
      assertEquals("object", nativeCall0.getTypeOf());
      assertTrue(nativeCall0.isEmpty());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("With", nativeWith0.getClassName());
      assertTrue(nativeObject0.isExtensible());
      assertFalse(nativeObject0.isEmpty());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isSealed());
      assertEquals("Object", nativeObject0.getClassName());
      
      int int0 = nativeCall0.applyDescriptorToAttributeBitset((-1624562641), nativeObject0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeCall0.hasPrototypeMap());
      assertFalse(nativeCall0.isSealed());
      assertEquals("object", nativeCall0.getTypeOf());
      assertTrue(nativeCall0.isEmpty());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("With", nativeWith0.getClassName());
      assertTrue(nativeObject0.isExtensible());
      assertFalse(nativeObject0.isEmpty());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isSealed());
      assertEquals("Object", nativeObject0.getClassName());
      assertEquals((-1624562644), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeIterator_StopIteration0);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      boolean boolean0 = nativeIterator_StopIteration0.sameValue(double0, double0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      
      Double double0 = new Double(8);
      assertNotNull(double0);
      assertEquals(8.0, (double)double0, 0.01);
      
      boolean boolean0 = nativeIterator_StopIteration0.sameValue(double0, double0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Double double0 = new Double(3);
      assertNotNull(double0);
      assertEquals(3.0, (double)double0, 0.01);
      
      NativeObject nativeObject0 = new NativeObject();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeObject0);
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isExtensible());
      assertTrue(nativeObject0.isEmpty());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertFalse(nativeObject0.isSealed());
      
      boolean boolean0 = nativeObject0.sameValue("language version", double0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isExtensible());
      assertTrue(nativeObject0.isEmpty());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertFalse(nativeObject0.isSealed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Double double0 = new Double(2);
      assertNotNull(double0);
      assertEquals(2.0, (double)double0, 0.01);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      
      Object object0 = ScriptableObject.getProperty((Scriptable) nativeIterator_StopIteration0, 4);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(object0);
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      
      boolean boolean0 = nativeIterator_StopIteration0.sameValue(double0, object0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      
      UniqueTag uniqueTag0 = (UniqueTag)Scriptable.NOT_FOUND;
      assertNotNull(uniqueTag0);
      
      Delegator delegator0 = new Delegator();
      assertNotNull(delegator0);
      
      boolean boolean0 = nativeIterator_StopIteration0.sameValue(uniqueTag0, delegator0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(5);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeNumber0);
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isEmpty());
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.isSealed());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertTrue(nativeNumber0.isExtensible());
      assertEquals("object", nativeNumber0.getTypeOf());
      
      BaseFunction baseFunction0 = new BaseFunction(nativeNumber0, nativeNumber0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(baseFunction0);
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isEmpty());
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.isSealed());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertTrue(nativeNumber0.isExtensible());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertEquals("function", baseFunction0.getTypeOf());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertEquals("Function", baseFunction0.getClassName());
      assertFalse(baseFunction0.isSealed());
      assertTrue(baseFunction0.isEmpty());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertTrue(baseFunction0.isExtensible());
      
      baseFunction0.checkPropertyChange("=", nativeNumber0, nativeNumber0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isEmpty());
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.isSealed());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertTrue(nativeNumber0.isExtensible());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertEquals("function", baseFunction0.getTypeOf());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertEquals("Function", baseFunction0.getClassName());
      assertFalse(baseFunction0.isSealed());
      assertTrue(baseFunction0.isEmpty());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertTrue(baseFunction0.isExtensible());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test45()  throws Throwable  {
      Context context0 = Context.getContext();
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertNotNull(context0);
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeCall0);
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      
      BaseFunction baseFunction0 = new BaseFunction();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(baseFunction0);
      assertFalse(baseFunction0.avoidObjectDetection());
      assertEquals("Function", baseFunction0.getClassName());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertTrue(baseFunction0.isExtensible());
      assertFalse(baseFunction0.isSealed());
      assertEquals("function", baseFunction0.getTypeOf());
      assertTrue(baseFunction0.isEmpty());
      
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertNotNull(classLoader0);
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeJavaTopPackage0);
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      
      NativeJavaPackage nativeJavaPackage0 = nativeJavaTopPackage0.forcePackage("undefined", baseFunction0);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeJavaPackage0);
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertEquals("Function", baseFunction0.getClassName());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertTrue(baseFunction0.isExtensible());
      assertFalse(baseFunction0.isSealed());
      assertEquals("function", baseFunction0.getTypeOf());
      assertTrue(baseFunction0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.isEmpty());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertFalse(nativeJavaPackage0.isSealed());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      
      // Undeclared exception!
      try { 
        baseFunction0.checkPropertyChange("Sz8) bZ", nativeCall0, nativeJavaPackage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot change the configurable attribute of \"Sz8) bZ\" from false to true.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(importerTopLevel0);
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      
      NativeObject nativeObject0 = (NativeObject)ScriptableObject.buildDataDescriptor(importerTopLevel0, importerTopLevel0, 8);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeObject0);
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(nativeObject0.isEmpty());
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      
      BaseFunction baseFunction0 = new BaseFunction();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(baseFunction0);
      assertFalse(baseFunction0.avoidObjectDetection());
      assertFalse(baseFunction0.isSealed());
      assertEquals("Function", baseFunction0.getClassName());
      assertTrue(baseFunction0.isEmpty());
      assertTrue(baseFunction0.isExtensible());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertEquals("function", baseFunction0.getTypeOf());
      
      baseFunction0.checkPropertyChange((String) null, nativeObject0, importerTopLevel0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(nativeObject0.isEmpty());
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertFalse(baseFunction0.isSealed());
      assertEquals("Function", baseFunction0.getClassName());
      assertTrue(baseFunction0.isEmpty());
      assertTrue(baseFunction0.isExtensible());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertEquals("function", baseFunction0.getTypeOf());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeError0);
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      
      NativeObject nativeObject0 = (NativeObject)ScriptableObject.buildDataDescriptor(nativeError0, nativeError0, 4);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeObject0);
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.isEmpty());
      
      nativeError0.checkPropertyChange("cSua!v<L?4^Qf)!@Y", nativeObject0, nativeObject0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(importerTopLevel0);
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      
      NativeObject nativeObject0 = (NativeObject)ScriptableObject.buildDataDescriptor(importerTopLevel0, importerTopLevel0, 8);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeObject0);
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(nativeObject0.isSealed());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.isEmpty());
      assertFalse(nativeObject0.avoidObjectDetection());
      
      BaseFunction baseFunction0 = new BaseFunction();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(baseFunction0);
      assertEquals("function", baseFunction0.getTypeOf());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertTrue(baseFunction0.isExtensible());
      assertEquals("Function", baseFunction0.getClassName());
      assertTrue(baseFunction0.isEmpty());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertFalse(baseFunction0.isSealed());
      
      baseFunction0.checkPropertyDefinition(nativeObject0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(nativeObject0.isSealed());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.isEmpty());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("function", baseFunction0.getTypeOf());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertTrue(baseFunction0.isExtensible());
      assertEquals("Function", baseFunction0.getClassName());
      assertTrue(baseFunction0.isEmpty());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertFalse(baseFunction0.isSealed());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(nativeBoolean0);
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      
      Class<NativeArray> class0 = NativeArray.class;
      // Undeclared exception!
      try { 
        nativeBoolean0.defineProperty("", class0, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptableObject.defineConstProperty((Scriptable) null, "language version");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(nativeCall0);
      assertTrue(nativeCall0.isExtensible());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.avoidObjectDetection());
      
      Class<NativeObject> class0 = NativeObject.class;
      FunctionObject functionObject0 = (FunctionObject)ScriptableObject.buildClassCtor((Scriptable) nativeCall0, class0, true, true);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertNotNull(functionObject0);
      assertTrue(nativeCall0.isExtensible());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(functionObject0.hasPrototypeMap());
      assertTrue(functionObject0.isExtensible());
      assertTrue(functionObject0.isEmpty());
      assertEquals("function", functionObject0.getTypeOf());
      assertTrue(functionObject0.isSealed());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("Function", functionObject0.getClassName());
      assertEquals(0, functionObject0.getLength());
      assertEquals(0, functionObject0.getArity());
      assertEquals("Object", functionObject0.getFunctionName());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test52()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, objectArray0.length);
      assertNotNull(nativeArray0);
      assertTrue(nativeArray0.isEmpty());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertEquals(0L, nativeArray0.getLength());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals("Array", nativeArray0.getClassName());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.isSealed());
      
      Class<NativeJavaClass> class0 = NativeJavaClass.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) nativeArray0, class0, true, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't define constructor or class com.google.javascript.rhino.head.NativeJavaObject since more than one constructor has multiple parameters.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test53()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(nativeCall0);
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      
      Class<NativeJavaMethod> class0 = NativeJavaMethod.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) nativeCall0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot load class \"com.google.javascript.rhino.head.NativeJavaMethod\" which has no zero-parameter constructor.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test54()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(nativeCall0);
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("Call", nativeCall0.getClassName());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isEmpty());
      
      Class<NativeContinuation> class0 = NativeContinuation.class;
      ScriptableObject.defineClass((Scriptable) nativeCall0, class0, true);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("Call", nativeCall0.getClassName());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeCall0);
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.avoidObjectDetection());
      
      NativeNumber nativeNumber0 = new NativeNumber(13);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeNumber0);
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.isSealed());
      assertEquals("Number", nativeNumber0.getClassName());
      
      Object object0 = nativeCall0.equivalentValues(nativeNumber0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(object0);
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.isSealed());
      assertEquals("Number", nativeNumber0.getClassName());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeError0);
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      // Undeclared exception!
      try { 
        nativeError0.getDefaultValue(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test57()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      
      Class<FieldAndMethods> class0 = FieldAndMethods.class;
      // Undeclared exception!
      try { 
        ScriptableObject.getDefaultValue((Scriptable) nativeIterator_StopIteration0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type class com.google.javascript.rhino.head.FieldAndMethods
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeError0);
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.avoidObjectDetection());
      
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      
      // Undeclared exception!
      try { 
        nativeError0.getDefaultValue(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeError0);
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        nativeError0.getDefaultValue(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeError0);
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.avoidObjectDetection());
      
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        nativeError0.getDefaultValue(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(nativeError0);
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      
      // Undeclared exception!
      try { 
        nativeError0.getDefaultValue((Class<?>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(nativeIterator_StopIteration0);
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      Context context0 = contextFactory0.makeContext();
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertNotNull(context0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeArray0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0L, nativeArray0.getLength());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.avoidObjectDetection());
      
      // Undeclared exception!
      try { 
        nativeArray0.getOwnPropertyDescriptor(context0, nativeIterator_StopIteration0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test63()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(564.5950285194319);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeNumber0);
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertTrue(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.isSealed());
      assertEquals("Number", nativeNumber0.getClassName());
      
      boolean boolean0 = ScriptableObject.isFalse(nativeNumber0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertTrue(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.isSealed());
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeBoolean0);
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeBoolean0, double0, 13, "^", 0, nativeBoolean0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(idFunctionObject0);
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertEquals(0, idFunctionObject0.getLength());
      assertEquals(13, idFunctionObject0.methodId());
      assertEquals(0, idFunctionObject0.getArity());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertFalse(idFunctionObject0.isSealed());
      assertTrue(idFunctionObject0.isEmpty());
      assertEquals("^", idFunctionObject0.getFunctionName());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      
      LazilyLoadedCtor lazilyLoadedCtor0 = new LazilyLoadedCtor(nativeBoolean0, "^", "^", false);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(lazilyLoadedCtor0);
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      
      // Undeclared exception!
      try { 
        idFunctionObject0.addLazilyInitializedValue("^", 2, lazilyLoadedCtor0, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ^
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeBoolean0);
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.isSealed());
      
      Class<NativeScript> class0 = NativeScript.class;
      nativeBoolean0.defineProperty("SQRT2", class0, 2);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.isSealed());
      
      boolean boolean0 = nativeBoolean0.isGetterOrSetter("SQRT2", 0, false);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test66()  throws Throwable  {
      Context context0 = Context.getContext();
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      
      NativeArray nativeArray0 = new NativeArray(1496L);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeArray0);
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(1496L, nativeArray0.getLength());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals(1496L, nativeArray0.jsGet_length());
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeContinuation0);
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isEmpty());
      
      BoundFunction boundFunction0 = new BoundFunction(context0, nativeArray0, nativeContinuation0, nativeContinuation0, context0.emptyArgs);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(boundFunction0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(1496L, nativeArray0.getLength());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals(1496L, nativeArray0.jsGet_length());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(boundFunction0.hasPrototypeMap());
      assertTrue(boundFunction0.isExtensible());
      assertEquals("function", boundFunction0.getTypeOf());
      assertEquals(0, boundFunction0.getLength());
      assertFalse(boundFunction0.avoidObjectDetection());
      assertEquals("Function", boundFunction0.getClassName());
      assertFalse(boundFunction0.isEmpty());
      assertFalse(boundFunction0.isSealed());
      
      boolean boolean0 = boundFunction0.isGetterOrSetter("language version", 180, true);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(1496L, nativeArray0.getLength());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals(1496L, nativeArray0.jsGet_length());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(boundFunction0.hasPrototypeMap());
      assertTrue(boundFunction0.isExtensible());
      assertEquals("function", boundFunction0.getTypeOf());
      assertEquals(0, boundFunction0.getLength());
      assertFalse(boundFunction0.avoidObjectDetection());
      assertEquals("Function", boundFunction0.getClassName());
      assertFalse(boundFunction0.isEmpty());
      assertFalse(boundFunction0.isSealed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(100);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeNumber0);
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isEmpty());
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertFalse(nativeNumber0.isSealed());
      assertEquals("Number", nativeNumber0.getClassName());
      
      // Undeclared exception!
      try { 
        nativeNumber0.getGetterOrSetter("o!LYVnpK$o!", 2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // o!LYVnpK$o!
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeObject0);
      assertFalse(nativeObject0.isSealed());
      assertTrue(nativeObject0.isEmpty());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      
      Object object0 = nativeObject0.getGetterOrSetter("(*fyZBAaL\"X", 0, false);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNull(object0);
      assertFalse(nativeObject0.isSealed());
      assertTrue(nativeObject0.isEmpty());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(0.0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeNumber0);
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertTrue(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.isSealed());
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.avoidObjectDetection());
      
      Object object0 = nativeNumber0.getGetterOrSetter((String) null, 4, false);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNull(object0);
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertTrue(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.isSealed());
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(nativeContinuation0);
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.isSealed());
      
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeBoolean0);
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
      
      nativeBoolean0.preventExtensions();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.isExtensible());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals("object", nativeBoolean0.getTypeOf());
      
      nativeBoolean0.setGetterOrSetter("ms1Ag.modify.sealed", 0, nativeContinuation0, true);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.isExtensible());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals("object", nativeBoolean0.getTypeOf());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeContinuation0);
      assertTrue(nativeContinuation0.isExtensible());
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeBoolean0);
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertTrue(nativeBoolean0.isExtensible());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      
      // Undeclared exception!
      try { 
        nativeBoolean0.setGetterOrSetter("error reporter", 1, nativeContinuation0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // error reporter
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(nativeContinuation0);
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.isSealed());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeBoolean0);
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
      
      nativeBoolean0.setGetterOrSetter((String) null, 2, nativeContinuation0, true);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.isSealed());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test73()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(2116.5644818);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(nativeNumber0);
      assertEquals("Number", nativeNumber0.getClassName());
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertFalse(nativeNumber0.isSealed());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isEmpty());
      
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeCall0);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertTrue(nativeCall0.isExtensible());
      assertTrue(nativeCall0.isEmpty());
      
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      nativeCall0.putConst((String) null, nativeNumber0, double0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("Number", nativeNumber0.getClassName());
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertFalse(nativeNumber0.isSealed());
      assertFalse(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertTrue(nativeCall0.isExtensible());
      assertTrue(nativeCall0.isEmpty());
      
      // Undeclared exception!
      try { 
        ScriptableObject.redefineProperty(nativeNumber0, (String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: redeclaration of const null.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(nativeBoolean0);
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isExtensible());
      
      boolean boolean0 = nativeBoolean0.isConst("error reporter");
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeBoolean0);
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.isSealed());
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      
      Class<NativeArray> class0 = NativeArray.class;
      nativeBoolean0.defineProperty("^", class0, 8);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      
      ScriptableObject.redefineProperty(nativeBoolean0, "^", false);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(622.67942481);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeNumber0);
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertTrue(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.isSealed());
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.avoidObjectDetection());
      
      nativeNumber0.defineConst((String) null, (Scriptable) null);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertTrue(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.isSealed());
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(564.5950285194319);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeNumber0);
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertFalse(nativeNumber0.isSealed());
      assertEquals("Number", nativeNumber0.getClassName());
      assertTrue(nativeNumber0.isEmpty());
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      
      BaseFunction baseFunction0 = new BaseFunction(nativeNumber0, nativeNumber0);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(baseFunction0);
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertFalse(nativeNumber0.isSealed());
      assertEquals("Number", nativeNumber0.getClassName());
      assertTrue(nativeNumber0.isEmpty());
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertTrue(baseFunction0.isEmpty());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertFalse(baseFunction0.isSealed());
      assertEquals("Function", baseFunction0.getClassName());
      assertTrue(baseFunction0.isExtensible());
      assertEquals("function", baseFunction0.getTypeOf());
      assertFalse(baseFunction0.hasPrototypeMap());
      
      nativeNumber0.defineConst("msg.setter.return", baseFunction0);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertFalse(nativeNumber0.isSealed());
      assertEquals("Number", nativeNumber0.getClassName());
      assertTrue(nativeNumber0.isEmpty());
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertFalse(baseFunction0.isSealed());
      assertEquals("Function", baseFunction0.getClassName());
      assertTrue(baseFunction0.isExtensible());
      assertEquals("function", baseFunction0.getTypeOf());
      assertFalse(baseFunction0.isEmpty());
      assertFalse(baseFunction0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeBoolean0);
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isEmpty());
      
      // Undeclared exception!
      try { 
        nativeBoolean0.putConst("VpmVZX+N5QIBI\"El", (Scriptable) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test79()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      
      Context context0 = contextFactory0.makeContext();
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertNotNull(context0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(importerTopLevel0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      
      Class<NativeIterator.StopIteration> class0 = NativeIterator.StopIteration.class;
      NativeIterator.StopIteration nativeIterator_StopIteration0 = ScriptableObject.getTypedProperty((Scriptable) importerTopLevel0, (-9), class0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNull(nativeIterator_StopIteration0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeObject0);
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertFalse(nativeObject0.isSealed());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertTrue(nativeObject0.isEmpty());
      
      Delegator delegator0 = new Delegator(nativeObject0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(delegator0);
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertFalse(nativeObject0.isSealed());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertTrue(nativeObject0.isEmpty());
      
      ScriptableObject.putProperty((Scriptable) nativeObject0, 13, (Object) delegator0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertFalse(nativeObject0.isSealed());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isEmpty());
      
      boolean boolean0 = nativeObject0.containsValue(delegator0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertFalse(nativeObject0.isSealed());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test81()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      
      Context context0 = contextFactory0.makeContext();
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertNotNull(context0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(importerTopLevel0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) importerTopLevel0, 1445582840);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeBoolean0);
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
      
      Class<NativeScript> class0 = NativeScript.class;
      nativeBoolean0.defineProperty("SQRT2", class0, 2);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
      
      ScriptableObject.putConstProperty(nativeBoolean0, "SQRT2", "SQRT2");
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeBoolean0);
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
      
      Class<NativeArray> class0 = NativeArray.class;
      // Undeclared exception!
      try { 
        nativeBoolean0.defineProperty("language version", class0, 2045);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2045
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test84()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeCall0);
      assertFalse(nativeCall0.hasPrototypeMap());
      assertFalse(nativeCall0.isSealed());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isEmpty());
      
      Context context0 = Context.getContext();
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertNotNull(context0);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(importerTopLevel0);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      
      NativeArray nativeArray0 = (NativeArray)context0.newArray((Scriptable) nativeCall0, (-1939501217));
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(nativeArray0);
      assertFalse(nativeCall0.hasPrototypeMap());
      assertFalse(nativeCall0.isSealed());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals((-1939501217L), nativeArray0.getLength());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals((-1939501217L), nativeArray0.jsGet_length());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isEmpty());
      assertEquals("Array", nativeArray0.getClassName());
      
      NativeWith nativeWith0 = new NativeWith(importerTopLevel0, nativeArray0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(nativeWith0);
      assertFalse(nativeCall0.hasPrototypeMap());
      assertFalse(nativeCall0.isSealed());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals((-1939501217L), nativeArray0.getLength());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals((-1939501217L), nativeArray0.jsGet_length());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isEmpty());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals("With", nativeWith0.getClassName());
      
      NativeObject nativeObject0 = (NativeObject)ScriptableObject.buildDataDescriptor(nativeArray0, nativeWith0, 159);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeObject0);
      assertFalse(nativeCall0.hasPrototypeMap());
      assertFalse(nativeCall0.isSealed());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals((-1939501217L), nativeArray0.getLength());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals((-1939501217L), nativeArray0.jsGet_length());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isEmpty());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals("With", nativeWith0.getClassName());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertFalse(nativeObject0.isSealed());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isEmpty());
      
      int int0 = nativeCall0.applyDescriptorToAttributeBitset(0, nativeObject0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(nativeCall0.hasPrototypeMap());
      assertFalse(nativeCall0.isSealed());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals((-1939501217L), nativeArray0.getLength());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals((-1939501217L), nativeArray0.jsGet_length());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isEmpty());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals("With", nativeWith0.getClassName());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertFalse(nativeObject0.isSealed());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isEmpty());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(2116.5644818);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeNumber0);
      assertTrue(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.isSealed());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertEquals("Number", nativeNumber0.getClassName());
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(nativeCall0);
      assertFalse(nativeCall0.hasPrototypeMap());
      assertFalse(nativeCall0.isSealed());
      assertEquals("object", nativeCall0.getTypeOf());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isEmpty());
      assertEquals("Call", nativeCall0.getClassName());
      
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      nativeCall0.setAttributes((String) null, (Scriptable) nativeNumber0, 0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.isSealed());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertEquals("Number", nativeNumber0.getClassName());
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertFalse(nativeCall0.isSealed());
      assertEquals("object", nativeCall0.getTypeOf());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isEmpty());
      assertEquals("Call", nativeCall0.getClassName());
      
      nativeCall0.putConst((String) null, nativeNumber0, double0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeNumber0.isSealed());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertEquals("Number", nativeNumber0.getClassName());
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertFalse(nativeCall0.isSealed());
      assertEquals("object", nativeCall0.getTypeOf());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isEmpty());
      assertEquals("Call", nativeCall0.getClassName());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeCall0);
      assertTrue(nativeCall0.isExtensible());
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      
      Scriptable scriptable0 = ScriptableObject.getArrayPrototype(nativeCall0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNull(scriptable0);
      assertTrue(nativeCall0.isExtensible());
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(nativeBoolean0);
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isEmpty());
      
      NativeError nativeError0 = new NativeError();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeError0);
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      
      boolean boolean0 = nativeError0.hasInstance(nativeBoolean0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test88()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertNotNull(nativeContinuation0);
      //  // Unstable assertion: assertFalse(nativeContinuation0.isSealed());
      //  // Unstable assertion: assertTrue(nativeContinuation0.isEmpty());
      //  // Unstable assertion: assertFalse(nativeContinuation0.avoidObjectDetection());
      //  // Unstable assertion: assertEquals("object", nativeContinuation0.getTypeOf());
      //  // Unstable assertion: assertFalse(nativeContinuation0.hasPrototypeMap());
      //  // Unstable assertion: assertEquals("Continuation", nativeContinuation0.getClassName());
      //  // Unstable assertion: assertTrue(nativeContinuation0.isExtensible());
      
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertNotNull(nativeBoolean0);
      //  // Unstable assertion: assertTrue(nativeBoolean0.isEmpty());
      //  // Unstable assertion: assertFalse(nativeBoolean0.avoidObjectDetection());
      //  // Unstable assertion: assertFalse(nativeBoolean0.isSealed());
      //  // Unstable assertion: assertEquals("Boolean", nativeBoolean0.getClassName());
      //  // Unstable assertion: assertTrue(nativeBoolean0.isExtensible());
      //  // Unstable assertion: assertFalse(nativeBoolean0.hasPrototypeMap());
      //  // Unstable assertion: assertEquals("object", nativeBoolean0.getTypeOf());
      
      nativeBoolean0.setGetterOrSetter("ms1Ag.modify.sealed", 0, nativeContinuation0, false);
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertFalse(nativeContinuation0.isSealed());
      //  // Unstable assertion: assertTrue(nativeContinuation0.isEmpty());
      //  // Unstable assertion: assertFalse(nativeContinuation0.avoidObjectDetection());
      //  // Unstable assertion: assertEquals("object", nativeContinuation0.getTypeOf());
      //  // Unstable assertion: assertFalse(nativeContinuation0.hasPrototypeMap());
      //  // Unstable assertion: assertEquals("Continuation", nativeContinuation0.getClassName());
      //  // Unstable assertion: assertTrue(nativeContinuation0.isExtensible());
      //  // Unstable assertion: assertFalse(nativeBoolean0.avoidObjectDetection());
      //  // Unstable assertion: assertFalse(nativeBoolean0.isSealed());
      //  // Unstable assertion: assertEquals("Boolean", nativeBoolean0.getClassName());
      //  // Unstable assertion: assertTrue(nativeBoolean0.isExtensible());
      //  // Unstable assertion: assertFalse(nativeBoolean0.isEmpty());
      //  // Unstable assertion: assertFalse(nativeBoolean0.hasPrototypeMap());
      //  // Unstable assertion: assertEquals("object", nativeBoolean0.getTypeOf());
      
      // Undeclared exception!
      try { 
        ScriptableObject.defineConstProperty(nativeBoolean0, "ms1Ag.modify.sealed");
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // TypeError: redeclaration of var ms1Ag.modify.sealed.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test89()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertNotNull(nativeCall0);
      //  // Unstable assertion: assertFalse(nativeCall0.avoidObjectDetection());
      //  // Unstable assertion: assertTrue(nativeCall0.isEmpty());
      //  // Unstable assertion: assertFalse(nativeCall0.hasPrototypeMap());
      //  // Unstable assertion: assertEquals("object", nativeCall0.getTypeOf());
      //  // Unstable assertion: assertTrue(nativeCall0.isExtensible());
      //  // Unstable assertion: assertEquals("Call", nativeCall0.getClassName());
      //  // Unstable assertion: assertFalse(nativeCall0.isSealed());
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertNotNull(nativeContinuation0);
      //  // Unstable assertion: assertTrue(nativeContinuation0.isEmpty());
      //  // Unstable assertion: assertFalse(nativeContinuation0.avoidObjectDetection());
      //  // Unstable assertion: assertEquals("Continuation", nativeContinuation0.getClassName());
      //  // Unstable assertion: assertEquals("object", nativeContinuation0.getTypeOf());
      //  // Unstable assertion: assertFalse(nativeContinuation0.hasPrototypeMap());
      //  // Unstable assertion: assertTrue(nativeContinuation0.isExtensible());
      //  // Unstable assertion: assertFalse(nativeContinuation0.isSealed());
      
      // Undeclared exception!
      try { 
        nativeCall0.getAttributes((String) null, (Scriptable) nativeContinuation0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Property 0 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeIterator_StopIteration0);
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      
      BaseFunction baseFunction0 = new BaseFunction(nativeIterator_StopIteration0, nativeIterator_StopIteration0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(baseFunction0);
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(baseFunction0.isSealed());
      assertTrue(baseFunction0.isExtensible());
      assertTrue(baseFunction0.isEmpty());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertEquals("function", baseFunction0.getTypeOf());
      assertEquals("Function", baseFunction0.getClassName());
      assertFalse(baseFunction0.avoidObjectDetection());
      
      baseFunction0.setAttributes(4, (Scriptable) nativeIterator_StopIteration0, 0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(baseFunction0.isSealed());
      assertTrue(baseFunction0.isExtensible());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertEquals("function", baseFunction0.getTypeOf());
      assertEquals("Function", baseFunction0.getClassName());
      assertFalse(baseFunction0.isEmpty());
      assertFalse(baseFunction0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeCall0);
      assertTrue(nativeCall0.isExtensible());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod((Scriptable) nativeCall0, "jsStaticFunction_", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000003 is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaAdapter.runScript((Script) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.JavaAdapter$2", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test93()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(587.87234647);
      BaseFunction baseFunction0 = new BaseFunction(nativeNumber0, nativeNumber0);
      // Undeclared exception!
      try { 
        nativeNumber0.getAttributes(8, (Scriptable) baseFunction0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Property 8 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      nativeError0.getAllIds();
      assertTrue(nativeError0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      nativeBoolean0.preventExtensions();
      NativeScript.init(nativeBoolean0, false);
      assertEquals("Boolean", nativeBoolean0.getClassName());
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      ImporterTopLevel importerTopLevel0 = (ImporterTopLevel)context0.scratchScriptable;
      // Undeclared exception!
      try { 
        NativeMath.init(importerTopLevel0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      nativeIterator_StopIteration0.put(0, (Scriptable) nativeCall0, (Object) nativeContinuation0);
      LazilyLoadedCtor lazilyLoadedCtor0 = new LazilyLoadedCtor(nativeCall0, (String) null, (String) null, true, false);
  }
}

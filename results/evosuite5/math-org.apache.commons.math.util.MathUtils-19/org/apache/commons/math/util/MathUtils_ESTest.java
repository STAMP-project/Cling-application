/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 15:14:54 GMT 2019
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck((long) 31, (-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MathUtils.subAndCheck((-9223372036854775808L), (-9223372036854775808L));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck(31, (-2147483646));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MathUtils.subAndCheck(2387, 12);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck((-2147483645), 26);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MathUtils.sign((short)3091);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MathUtils.sign((short) (-17));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MathUtils.sign((-715L));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MathUtils.sign((long) 0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MathUtils.sign(4503599627370534L);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MathUtils.sign(1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MathUtils.sign((-294));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MathUtils.sign((float) (-52));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MathUtils.sign(1.0F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MathUtils.sign(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MathUtils.sign(0.0F);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MathUtils.sign(Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MathUtils.sign(1.0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MathUtils.sign((double) Float.NaN);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MathUtils.sign((double) 0.0F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MathUtils.sign((byte) (-1));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MathUtils.sign((byte)0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MathUtils.sign((byte)22);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round((float) 0, 2400, 7);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Inexact result from rounding
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MathUtils.round((float) (-1986), (-1));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MathUtils.round(0.0F, 45, 6);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MathUtils.round((-850.96F), (-1), 6);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MathUtils.round(1348.9F, (-1), 6);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MathUtils.round((float) 5, 261, 5);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MathUtils.round((float) 53, 53, 3);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MathUtils.round((float) 2, 2, 2);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round((float) (-6), (-6), (-6));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding method.
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MathUtils.round((-5555.0923F), (-2147483646), 7);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MathUtils.round((float) 1, 1, 1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MathUtils.round(Double.NaN, 1201);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MathUtils.round((float) (-4), (-4), 2);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MathUtils.nextAfter((-0.9999999999999999), (-1.0));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MathUtils.nextAfter((-1.0), 7643);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MathUtils.round(0.0F, 5, 5);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MathUtils.round(0.0F, 0, 0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(4503599627370495L, 4503599627370495L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MathUtils.mulAndCheck((long) 0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MathUtils.mulAndCheck((long) 1, (-2754L));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MathUtils.mulAndCheck(0L, (-249L));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-9223372036854775808L), (-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MathUtils.mulAndCheck((long) (-11), (long) (-11));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MathUtils.mulAndCheck((long) 1, (long) 1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(123L, (-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MathUtils.mulAndCheck(3044, 3044);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-98307), (-98307));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MathUtils.indicator((short)0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MathUtils.indicator((short) (-1));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MathUtils.indicator(0L);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MathUtils.indicator((-9223372036854775808L));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MathUtils.indicator(957);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MathUtils.indicator((-328));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MathUtils.round((-4310.0F), 16, 3);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MathUtils.round(Float.NaN, 2400);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MathUtils.indicator(2572.0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MathUtils.indicator(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MathUtils.indicator((-655.5568727562437));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MathUtils.indicator((byte)0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MathUtils.indicator((byte) (-1));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MathUtils.hash((double[]) null);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MathUtils.gcd((-328), 3066);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MathUtils.gcd((-643), (-643));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MathUtils.gcd(6, 3066);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MathUtils.gcd(2506, 0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1835));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n > 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-27));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(2390);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // result too large to represent in a long integer
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MathUtils.factorial(3);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 4800L;
      double[] doubleArray1 = new double[8];
      MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[0];
      MathUtils.equals(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MathUtils.equals((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathUtils.equals(doubleArray0, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathUtils.equals((double[]) null, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MathUtils.equals((double) Float.NaN, 1625.0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) Float.NaN;
      MathUtils.equals(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MathUtils.binomialCoefficientDouble(0, (-1));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MathUtils.binomialCoefficientLog(1, 0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MathUtils.binomialCoefficientLog(31, 31);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1986), (-1986));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1), 2083);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(801, 641);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // result too large to represent in a long integer
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(2, (-1942));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(2433, 1);
      assertEquals(2433L, long0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(32, 0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(31, 31);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1897), (-1897));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-1), 192);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, (-1));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(4800L, 9223372036854775770L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck((-9223372036854775808L), (-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-9223372036854775808L), (long) 0);
      assertEquals((-9223372036854775808L), long0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((long) 3044, (-293L));
      assertEquals(3337L, long0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-3077), (-3077));
      assertEquals((-6154), int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(1073741824, 1073741824);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck((-2147483619), (-2147483619));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = MathUtils.log(0L, 0.0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = MathUtils.round(Double.NEGATIVE_INFINITY, 1179);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = MathUtils.cosh(1784.6);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(13, 1);
      assertEquals(13.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(172.153, 172.153);
      assertEquals(172.153, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = MathUtils.sinh(172.153);
      assertEquals(2.9111725491578223E74, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((long) (-1), (long) (-1));
      assertEquals((-2L), long0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      float float0 = MathUtils.round((float) 6, 3066, 6);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm((-999), 68517888);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }
}

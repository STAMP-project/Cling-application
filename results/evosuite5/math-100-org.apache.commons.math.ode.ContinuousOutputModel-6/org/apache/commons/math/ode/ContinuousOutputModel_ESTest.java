/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 11:42:53 GMT 2019
 */

package org.apache.commons.math.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator;
import org.apache.commons.math.ode.ContinuousOutputModel;
import org.apache.commons.math.ode.DormandPrince853StepInterpolator;
import org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ContinuousOutputModel_ESTest extends ContinuousOutputModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      dormandPrince853StepInterpolator0.currentTime = 1.0;
      continuousOutputModel0.handleStep(dormandPrince853StepInterpolator0, true);
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime(975.89);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.DormandPrince853StepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      classicalRungeKuttaStepInterpolator0.previousTime = 0.0;
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, true);
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime((-579.1398863971));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[] doubleArray0 = new double[5];
      double[][] doubleArray1 = new double[12][4];
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator0 = new GraggBulirschStoerStepInterpolator(doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, false);
      graggBulirschStoerStepInterpolator0.currentTime = 501.77026515;
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, false);
      graggBulirschStoerStepInterpolator0.previousTime = 501.77026515;
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator1 = new GraggBulirschStoerStepInterpolator(doubleArray0, doubleArray1[0], doubleArray1[0], doubleArray0, doubleArray1, true);
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, false);
      graggBulirschStoerStepInterpolator1.previousTime = (-1415.0);
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator1, false);
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      continuousOutputModel1.append(continuousOutputModel0);
      continuousOutputModel1.append(continuousOutputModel0);
      continuousOutputModel1.append(continuousOutputModel0);
      // Undeclared exception!
      try { 
        continuousOutputModel1.setInterpolatedTime((-112.56140374703205));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      double[] doubleArray0 = new double[5];
      double[][] doubleArray1 = new double[12][4];
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator0 = new GraggBulirschStoerStepInterpolator(doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, false);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertNotNull(graggBulirschStoerStepInterpolator0);
      
      graggBulirschStoerStepInterpolator0.currentTime = 501.77026515;
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(501.77026515, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, false);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(501.77026515, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      
      graggBulirschStoerStepInterpolator0.reinitialize(doubleArray0, false);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator1 = new GraggBulirschStoerStepInterpolator(doubleArray0, doubleArray1[0], doubleArray1[0], doubleArray0, doubleArray1, true);
      assertFalse(graggBulirschStoerStepInterpolator1.equals((Object)graggBulirschStoerStepInterpolator0));
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator1.getPreviousTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator1.isForward());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertNotNull(graggBulirschStoerStepInterpolator1);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertNotSame(graggBulirschStoerStepInterpolator0, graggBulirschStoerStepInterpolator1);
      assertFalse(graggBulirschStoerStepInterpolator0.equals((Object)graggBulirschStoerStepInterpolator1));
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      
      graggBulirschStoerStepInterpolator1.previousTime = (-1415.0);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals((-1415.0), graggBulirschStoerStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator1.isForward());
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator1, true);
      assertNotSame(graggBulirschStoerStepInterpolator1, graggBulirschStoerStepInterpolator0);
      assertFalse(graggBulirschStoerStepInterpolator1.equals((Object)graggBulirschStoerStepInterpolator0));
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals((-1415.0), graggBulirschStoerStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator1.getCurrentTime(), 0.01);
      assertTrue(graggBulirschStoerStepInterpolator1.isForward());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertNotNull(continuousOutputModel1);
      
      continuousOutputModel1.append(continuousOutputModel0);
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      
      continuousOutputModel0.append(continuousOutputModel1);
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      
      continuousOutputModel1.append(continuousOutputModel0);
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      
      // Undeclared exception!
      try { 
        continuousOutputModel1.setInterpolatedTime((-112.56140374703205));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[24][4];
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator0 = new GraggBulirschStoerStepInterpolator(doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, false);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(24, doubleArray1.length);
      assertNotNull(graggBulirschStoerStepInterpolator0);
      
      graggBulirschStoerStepInterpolator0.currentTime = 520.548418811924;
      assertEquals(520.548418811924, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator1 = new GraggBulirschStoerStepInterpolator(graggBulirschStoerStepInterpolator0);
      assertFalse(graggBulirschStoerStepInterpolator1.equals((Object)graggBulirschStoerStepInterpolator0));
      assertEquals(520.548418811924, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(520.548418811924, graggBulirschStoerStepInterpolator1.getCurrentTime(), 0.01);
      assertFalse(graggBulirschStoerStepInterpolator1.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator1.getInterpolatedTime(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(24, doubleArray1.length);
      assertNotNull(graggBulirschStoerStepInterpolator1);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      assertNotSame(graggBulirschStoerStepInterpolator0, graggBulirschStoerStepInterpolator1);
      assertFalse(graggBulirschStoerStepInterpolator0.equals((Object)graggBulirschStoerStepInterpolator1));
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(520.548418811924, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(520.548418811924, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(24, doubleArray1.length);
      
      graggBulirschStoerStepInterpolator1.previousTime = (-2495.6692616);
      assertEquals(520.548418811924, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(520.548418811924, graggBulirschStoerStepInterpolator1.getCurrentTime(), 0.01);
      assertFalse(graggBulirschStoerStepInterpolator1.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals((-2495.6692616), graggBulirschStoerStepInterpolator1.getPreviousTime(), 0.01);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator1, false);
      assertNotSame(graggBulirschStoerStepInterpolator0, graggBulirschStoerStepInterpolator1);
      assertNotSame(graggBulirschStoerStepInterpolator1, graggBulirschStoerStepInterpolator0);
      assertFalse(graggBulirschStoerStepInterpolator0.equals((Object)graggBulirschStoerStepInterpolator1));
      assertFalse(graggBulirschStoerStepInterpolator1.equals((Object)graggBulirschStoerStepInterpolator0));
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(520.548418811924, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(520.548418811924, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(520.548418811924, graggBulirschStoerStepInterpolator1.getCurrentTime(), 0.01);
      assertFalse(graggBulirschStoerStepInterpolator1.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals((-2495.6692616), graggBulirschStoerStepInterpolator1.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(24, doubleArray1.length);
      
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertNotNull(continuousOutputModel1);
      
      continuousOutputModel1.append(continuousOutputModel0);
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(520.548418811924, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(520.548418811924, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      
      continuousOutputModel1.handleStep(graggBulirschStoerStepInterpolator1, false);
      assertNotSame(graggBulirschStoerStepInterpolator0, graggBulirschStoerStepInterpolator1);
      assertNotSame(graggBulirschStoerStepInterpolator1, graggBulirschStoerStepInterpolator0);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertFalse(graggBulirschStoerStepInterpolator0.equals((Object)graggBulirschStoerStepInterpolator1));
      assertFalse(graggBulirschStoerStepInterpolator1.equals((Object)graggBulirschStoerStepInterpolator0));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertEquals(520.548418811924, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(520.548418811924, graggBulirschStoerStepInterpolator1.getCurrentTime(), 0.01);
      assertFalse(graggBulirschStoerStepInterpolator1.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals((-2495.6692616), graggBulirschStoerStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(520.548418811924, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(24, doubleArray1.length);
      
      continuousOutputModel1.append(continuousOutputModel0);
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(520.548418811924, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(520.548418811924, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      
      continuousOutputModel0.append(continuousOutputModel1);
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(520.548418811924, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(520.548418811924, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime(0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertNotNull(continuousOutputModel0);
      
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      assertNotNull(classicalRungeKuttaStepInterpolator0);
      
      continuousOutputModel0.handleStep(classicalRungeKuttaStepInterpolator0, true);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(classicalRungeKuttaStepInterpolator0.isForward());
      assertEquals(Double.NaN, classicalRungeKuttaStepInterpolator0.getPreviousTime(), 0.01);
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime((-579.1398863971));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertNotNull(continuousOutputModel0);
      
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[21][4];
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator0 = new GraggBulirschStoerStepInterpolator(doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, false);
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(21, doubleArray1.length);
      assertNotNull(graggBulirschStoerStepInterpolator0);
      
      graggBulirschStoerStepInterpolator0.currentTime = 520.548418811924;
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(520.548418811924, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      
      graggBulirschStoerStepInterpolator0.previousTime = 520.548418811924;
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(520.548418811924, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(520.548418811924, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator1 = new GraggBulirschStoerStepInterpolator(doubleArray0, doubleArray1[0], doubleArray1[0], doubleArray0, doubleArray1, false);
      assertFalse(graggBulirschStoerStepInterpolator1.equals((Object)graggBulirschStoerStepInterpolator0));
      assertFalse(graggBulirschStoerStepInterpolator1.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator1.getPreviousTime(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(21, doubleArray1.length);
      assertNotNull(graggBulirschStoerStepInterpolator1);
      
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, false);
      assertNotSame(graggBulirschStoerStepInterpolator0, graggBulirschStoerStepInterpolator1);
      assertFalse(graggBulirschStoerStepInterpolator0.equals((Object)graggBulirschStoerStepInterpolator1));
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(520.548418811924, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
      assertEquals(520.548418811924, graggBulirschStoerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(520.548418811924, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(21, doubleArray1.length);
      
      graggBulirschStoerStepInterpolator1.previousTime = (-1400.0966918059014);
      assertEquals((-1400.0966918059014), graggBulirschStoerStepInterpolator1.getPreviousTime(), 0.01);
      assertFalse(graggBulirschStoerStepInterpolator1.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator1.getCurrentTime(), 0.01);
      
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertNotNull(continuousOutputModel1);
      
      continuousOutputModel1.handleStep(graggBulirschStoerStepInterpolator1, false);
      assertNotSame(graggBulirschStoerStepInterpolator1, graggBulirschStoerStepInterpolator0);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertFalse(graggBulirschStoerStepInterpolator1.equals((Object)graggBulirschStoerStepInterpolator0));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertEquals((-1400.0966918059014), graggBulirschStoerStepInterpolator1.getPreviousTime(), 0.01);
      assertFalse(graggBulirschStoerStepInterpolator1.isForward());
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertEquals((-1400.0966918059014), continuousOutputModel1.getInitialTime(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(21, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.append(continuousOutputModel1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hole between time ranges
         //
         verifyException("org.apache.commons.math.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[] doubleArray0 = new double[5];
      double[][] doubleArray1 = new double[12][4];
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator0 = new GraggBulirschStoerStepInterpolator(doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, false);
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator1 = new GraggBulirschStoerStepInterpolator(doubleArray0, (double[]) null, doubleArray0, (double[]) null, doubleArray1, true);
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator1, true);
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      continuousOutputModel1.handleStep(graggBulirschStoerStepInterpolator0, true);
      // Undeclared exception!
      try { 
        continuousOutputModel1.append(continuousOutputModel0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // propagation direction mismatch
         //
         verifyException("org.apache.commons.math.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[] doubleArray0 = new double[5];
      double[][] doubleArray1 = new double[12][4];
      double[] doubleArray2 = new double[0];
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator0 = new GraggBulirschStoerStepInterpolator(doubleArray0, doubleArray0, doubleArray0, doubleArray2, doubleArray1, true);
      continuousOutputModel0.handleStep(graggBulirschStoerStepInterpolator0, true);
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator1 = new GraggBulirschStoerStepInterpolator(doubleArray2, doubleArray0, doubleArray0, doubleArray0, doubleArray1, true);
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      continuousOutputModel1.handleStep(graggBulirschStoerStepInterpolator1, true);
      // Undeclared exception!
      try { 
        continuousOutputModel1.append(continuousOutputModel0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // state vector dimension mismatch
         //
         verifyException("org.apache.commons.math.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      continuousOutputModel0.append(continuousOutputModel0);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      // Undeclared exception!
      try { 
        continuousOutputModel0.getInterpolatedTime();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double double0 = continuousOutputModel0.getFinalTime();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      boolean boolean0 = continuousOutputModel0.requiresDenseOutput();
      assertTrue(boolean0);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 00:04:17 GMT 2019
 */

package org.apache.commons.lang3.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.Callable;
import java.util.concurrent.Delayed;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import org.apache.commons.lang3.concurrent.CallableBackgroundInitializer;
import org.apache.commons.lang3.concurrent.MultiBackgroundInitializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class BackgroundInitializer_ESTest extends BackgroundInitializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      assertFalse(multiBackgroundInitializer0.isStarted());
      
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      Callable<Delayed> callable0 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      CallableBackgroundInitializer<Delayed> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Delayed>(callable0);
      callableBackgroundInitializer0.start();
      Callable<String> callable1 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      CallableBackgroundInitializer<String> callableBackgroundInitializer1 = new CallableBackgroundInitializer<String>(callable1);
      callableBackgroundInitializer1.initialize();
      callableBackgroundInitializer0.start();
      callableBackgroundInitializer0.getTaskCount();
      Callable<Integer> callable2 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer2 = new CallableBackgroundInitializer<Integer>(callable2);
      callableBackgroundInitializer0.getTaskCount();
      callableBackgroundInitializer2.start();
      // Undeclared exception!
      try { 
        callableBackgroundInitializer2.setExternalExecutor((ExecutorService) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot set ExecutorService after start()!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      ForkJoinTask<Object> forkJoinTask0 = forkJoinPool0.submit(callable0);
      Callable<ForkJoinTask<Object>> callable1 = (Callable<ForkJoinTask<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(forkJoinTask0).when(callable1).call();
      ForkJoinPool forkJoinPool1 = ForkJoinPool.commonPool();
      CallableBackgroundInitializer<ForkJoinTask<Object>> callableBackgroundInitializer0 = new CallableBackgroundInitializer<ForkJoinTask<Object>>(callable1, forkJoinPool1);
      callableBackgroundInitializer0.start();
      Callable<Object> callable2 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      Callable<String> callable3 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<String> callableBackgroundInitializer1 = new CallableBackgroundInitializer<String>(callable3);
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer(forkJoinPool1);
      multiBackgroundInitializer0.addInitializer("Child initializer must not be null!", callableBackgroundInitializer0);
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Callable<ForkJoinTask<Object>> callable0 = (Callable<ForkJoinTask<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      CallableBackgroundInitializer<ForkJoinTask<Object>> callableBackgroundInitializer0 = new CallableBackgroundInitializer<ForkJoinTask<Object>>(callable0);
      callableBackgroundInitializer0.start();
      ForkJoinTask<Object> forkJoinTask0 = callableBackgroundInitializer0.get();
      assertNull(forkJoinTask0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0);
      // Undeclared exception!
      try { 
        callableBackgroundInitializer0.getFuture();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Callable<Callable<Callable<Integer>>> callable0 = (Callable<Callable<Callable<Integer>>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      CallableBackgroundInitializer<Callable<Callable<Integer>>> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Callable<Callable<Integer>>>(callable0, forkJoinPool0);
      boolean boolean0 = callableBackgroundInitializer0.start();
      assertTrue(callableBackgroundInitializer0.isStarted());
      assertTrue(boolean0);
  }
}

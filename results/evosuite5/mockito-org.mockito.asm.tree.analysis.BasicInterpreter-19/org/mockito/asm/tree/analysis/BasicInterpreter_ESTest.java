/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 13:04:42 GMT 2019
 */

package org.mockito.asm.tree.analysis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.asm.Label;
import org.mockito.asm.Type;
import org.mockito.asm.tree.FieldInsnNode;
import org.mockito.asm.tree.IincInsnNode;
import org.mockito.asm.tree.InsnNode;
import org.mockito.asm.tree.IntInsnNode;
import org.mockito.asm.tree.JumpInsnNode;
import org.mockito.asm.tree.LabelNode;
import org.mockito.asm.tree.LdcInsnNode;
import org.mockito.asm.tree.LineNumberNode;
import org.mockito.asm.tree.MethodInsnNode;
import org.mockito.asm.tree.TypeInsnNode;
import org.mockito.asm.tree.VarInsnNode;
import org.mockito.asm.tree.analysis.BasicInterpreter;
import org.mockito.asm.tree.analysis.BasicValue;
import org.mockito.asm.tree.analysis.SourceValue;
import org.mockito.asm.tree.analysis.Value;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class BasicInterpreter_ESTest extends BasicInterpreter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicValue basicValue1 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicValue basicValue2 = (BasicValue)basicInterpreter0.merge(basicValue0, basicValue1);
      assertFalse(basicValue2.isReference());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.merge(basicValue0, basicValue0);
      assertTrue(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(197);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      // Undeclared exception!
      try { 
        basicInterpreter0.naryOperation(insnNode0, linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mockito.asm.tree.InsnNode cannot be cast to org.mockito.asm.tree.MultiANewArrayInsnNode
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(basicInterpreter0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        basicInterpreter0.naryOperation(ldcInsnNode0, linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mockito.asm.tree.LdcInsnNode cannot be cast to org.mockito.asm.tree.MethodInsnNode
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(181);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(180);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(179, 68);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(178, 178);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(177, 177);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(176, 176);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(175, 175);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(174, 125);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(149, 149);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      intInsnNode0.setOpcode(173);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(172, 172);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(171);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(170, (-1));
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(169, 169);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(168, 168);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(167);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(166);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(165, 165);
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, (Value) null, (Value) null);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(164, 164);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(163, 163);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(162, 162);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(161, 161);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(160, 160);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(159);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(158);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(157, 116);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(156, 156);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(154, 154);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(153, 153);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(152, 152);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(151);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(150, 150);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(149, 149);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(148, 1);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, (Value) null, (Value) null);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(147, 147);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(146, 146);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(145, 145);
      Type type0 = Type.CHAR_TYPE;
      BasicValue basicValue0 = new BasicValue(type0);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(144, 144);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(143);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(142);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(141, 141);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(140, 140);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(139, 52);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(138, 138);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(137);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(136, 97);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(135, 135);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(134, 134);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(133, (-58));
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(132, 132);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(131, 131);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(130, 130);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(129, 129);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(128, 128);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(127, 127);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(126, 126);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(125, 125);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(124, 124);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(123, 123);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(122);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(121, 121);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(120, 120);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(119, 119);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(118, 118);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(117, 117);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(116, 116);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(115, 115);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(114, 114);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(113, 113);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(112, 112);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(111, 111);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(110, 110);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(109, 109);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(108, (-624));
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(107, 107);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      VarInsnNode varInsnNode0 = new VarInsnNode(106, 10);
      SourceValue sourceValue0 = new SourceValue(0);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.binaryOperation(varInsnNode0, sourceValue0, sourceValue0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(105, 105);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(104, 104);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(103, 103);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(102, 102);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(101, 101);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(100, 100);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.newValue((Type) null);
      Value value1 = basicInterpreter0.binaryOperation(intInsnNode0, value0, value0);
      assertNotSame(value1, value0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(99, 99);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(98, 98);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(97, 97);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(96, 1048575);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(95, 95);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      SourceValue sourceValue0 = new SourceValue(8, intInsnNode0);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, sourceValue0, sourceValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(94, 94);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(93, 93);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(92, 92);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(91, 91);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(90, 1781);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(89, 89);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(88, 88);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(87, 87);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(86, 86);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(85, 85);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(84, 84);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(83, 83);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(82, 82);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(81, 81);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(80, 80);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(79, 79);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(78, 78);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(77, 77);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(76, 76);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(75);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(74, 74);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(73);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(72, 207);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(71, 207);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(70);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(69, 69);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(68, 68);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Class<Double> class0 = Double.class;
      Type type0 = Type.getType(class0);
      BasicValue basicValue0 = new BasicValue(type0);
      IntInsnNode intInsnNode0 = new IntInsnNode(67, 67);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(66, "");
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(typeInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(65, 65);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(64, 64);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(63, 63);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(62);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(61, 61);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(60);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(59, 59);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(58);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(57, 57);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(56, 56);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(55, 55);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(54, 54);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(53, 53);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(52, 52);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(51);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(insnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(50, 50);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(49, 49);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(48, 48);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(47, 47);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(155, 155);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(46, 46);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 188);
      intInsnNode0.operand = 11;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertTrue(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 188);
      Type type0 = Type.FLOAT_TYPE;
      intInsnNode0.operand = 9;
      BasicValue basicValue0 = new BasicValue(type0);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      intInsnNode0.operand = 10;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertTrue(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 188);
      intInsnNode0.operand = 9;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertTrue(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 8);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.unaryOperation(intInsnNode0, (Value) null);
      assertTrue(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 188);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      intInsnNode0.operand = 7;
      LinkedHashSet<FieldInsnNode> linkedHashSet0 = new LinkedHashSet<FieldInsnNode>();
      SourceValue sourceValue0 = new SourceValue(2, linkedHashSet0);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.unaryOperation(intInsnNode0, sourceValue0);
      assertTrue(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 188);
      Type type0 = Type.LONG_TYPE;
      intInsnNode0.operand = 6;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = new BasicValue(type0);
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertTrue(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 5);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertTrue(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 188);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid array type
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Type type0 = Type.BYTE_TYPE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.newValue(type0);
      InsnNode insnNode0 = new InsnNode(8);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, value0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(199, 2047);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(198, 124);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(197, 197);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(196, 196);
      Type type0 = Type.CHAR_TYPE;
      Value value0 = basicInterpreter0.newValue(type0);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, value0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(195, 195);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(194, 65);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(193, 160);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(192, 120);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, (Value) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mockito.asm.tree.IntInsnNode cannot be cast to org.mockito.asm.tree.TypeInsnNode
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(191, 54);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(190, 190);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(189, 189);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mockito.asm.tree.IntInsnNode cannot be cast to org.mockito.asm.tree.TypeInsnNode
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 188);
      intInsnNode0.setOpcode(187);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(186, 1004);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(185, "nB[Iw=PX4^i6/AC$r", "nB[Iw=PX4^i6/AC$r", "nB[Iw=PX4^i6/AC$r");
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(fieldInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(129, 129);
      intInsnNode0.setOpcode(184);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(183, 172);
      SourceValue sourceValue0 = new SourceValue(7);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, sourceValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      MethodInsnNode methodInsnNode0 = new MethodInsnNode(182, "LocalVariableTypeTable", "LocalVariableTypeTable", "LocalVariableTypeTable");
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(methodInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(181, 181);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(180, " AzPB:}", (String) null, " AzPB:}");
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(fieldInsnNode0, basicValue0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.mockito.asm.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(179, "ScT");
      Value value0 = basicInterpreter0.unaryOperation(typeInsnNode0, (Value) null);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(178, (-2317));
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(177, 255);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(176, 176);
      Type type0 = Type.INT_TYPE;
      Value value0 = basicInterpreter0.newValue(type0);
      Value value1 = basicInterpreter0.unaryOperation(intInsnNode0, value0);
      assertNull(value1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(175, 2047);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(174, 2826);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(173, 173);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(172, 172);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(171, 3);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, (Value) null);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(170, 170);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, (Value) null);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(169, 171);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(168, 168);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(167, 167);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(166, 166);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(165, 10);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(164, 164);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(163, 163);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(162, 162);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(161, 161);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(160, 197);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(159, 159);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      MethodInsnNode methodInsnNode0 = new MethodInsnNode(120, "F4j:3O{&y4Mz", "", "F4j:3O{&y4Mz");
      methodInsnNode0.setOpcode(158);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(methodInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(157, 157);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(156, 156);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(155, 155);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(154, 154);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      LinkedHashSet<FieldInsnNode> linkedHashSet0 = new LinkedHashSet<FieldInsnNode>();
      SourceValue sourceValue0 = new SourceValue(13, linkedHashSet0);
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, sourceValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(153, 153);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(152, 152);
      Type type0 = Type.SHORT_TYPE;
      Value value0 = basicInterpreter0.newValue(type0);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, value0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(151);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(150, 150);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(149, 149);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(148, 148);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(147, 147);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(146, 146);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(145, 145);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(144, 144);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(143, 143);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, (Value) null);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(142, 142);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(141, 76);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(140, 140);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(139, 52);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(138, 138);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(137, 137);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(136, 136);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(135, 135);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(134, 134);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(133, 133);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      IincInsnNode iincInsnNode0 = new IincInsnNode(161, 161);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.unaryOperation(iincInsnNode0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(131, 131);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(130, 130);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(129, 129);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(128);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(127, 127);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(126, 126);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(125, 125);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(124, 124);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(123, 167);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(122);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(121, 121);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(120, 120);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(119, 119);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(118, 167);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(117, 117);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(116, 116);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Type type0 = Type.SHORT_TYPE;
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(type0);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(ldcInsnNode0);
      assertTrue(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Double double0 = new Double(0.0);
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(double0);
      Value value0 = basicInterpreter0.newOperation(ldcInsnNode0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Long long0 = new Long(7);
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(long0);
      Value value0 = basicInterpreter0.newOperation(ldcInsnNode0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Float float0 = new Float(1.0F);
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(float0);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(ldcInsnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Type type0 = Type.SHORT_TYPE;
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(type0.VOID);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(ldcInsnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(184);
      // Undeclared exception!
      try { 
        basicInterpreter0.newOperation(insnNode0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Label label0 = new Label();
      LabelNode labelNode0 = new LabelNode(label0);
      JumpInsnNode jumpInsnNode0 = new JumpInsnNode(187, labelNode0);
      // Undeclared exception!
      try { 
        basicInterpreter0.newOperation(jumpInsnNode0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mockito.asm.tree.JumpInsnNode cannot be cast to org.mockito.asm.tree.TypeInsnNode
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(178);
      // Undeclared exception!
      try { 
        basicInterpreter0.newOperation(insnNode0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mockito.asm.tree.InsnNode cannot be cast to org.mockito.asm.tree.FieldInsnNode
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      VarInsnNode varInsnNode0 = new VarInsnNode(168, 168);
      Value value0 = basicInterpreter0.newOperation(varInsnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      InsnNode insnNode0 = new InsnNode(17);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(insnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(16, 16777215);
      Value value0 = basicInterpreter0.newOperation(intInsnNode0);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, value0, value0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      VarInsnNode varInsnNode0 = new VarInsnNode(15, 9);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(varInsnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      VarInsnNode varInsnNode0 = new VarInsnNode(14, 14);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(varInsnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      LabelNode labelNode0 = new LabelNode();
      JumpInsnNode jumpInsnNode0 = new JumpInsnNode(13, labelNode0);
      Value value0 = basicInterpreter0.newOperation(jumpInsnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      VarInsnNode varInsnNode0 = new VarInsnNode(12, 146);
      Value value0 = basicInterpreter0.newOperation(varInsnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(11);
      Value value0 = basicInterpreter0.newOperation(insnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(10);
      Value value0 = basicInterpreter0.newOperation(insnNode0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(9);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(insnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(8);
      Value value0 = basicInterpreter0.newOperation(insnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      LabelNode labelNode0 = new LabelNode();
      JumpInsnNode jumpInsnNode0 = new JumpInsnNode(7, labelNode0);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(jumpInsnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(6);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(insnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(5, "L-+l~\fCI\"2:");
      Value value0 = basicInterpreter0.newOperation(typeInsnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(4);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(insnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(3);
      Value value0 = basicInterpreter0.newOperation(insnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(2, 12);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(intInsnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(1, 14);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(intInsnNode0);
      assertTrue(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 188);
      intInsnNode0.operand = 4;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = new BasicValue((Type) null);
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertTrue(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Type type0 = Type.DOUBLE_TYPE;
      Value value0 = basicInterpreter0.newValue(type0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Type type0 = Type.LONG_TYPE;
      Value value0 = basicInterpreter0.newValue(type0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Type type0 = Type.FLOAT_TYPE;
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newValue(type0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Type type0 = Type.BOOLEAN_TYPE;
      Value value0 = basicInterpreter0.newValue(type0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Type type0 = Type.VOID_TYPE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.newValue(type0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(basicInterpreter0);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(ldcInsnNode0);
      assertTrue(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(121, 121);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.copyOperation(intInsnNode0, basicValue0);
      assertSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      LabelNode labelNode0 = new LabelNode();
      LineNumberNode lineNumberNode0 = new LineNumberNode(0, labelNode0);
      SourceValue sourceValue0 = new SourceValue(9, labelNode0);
      Value value0 = basicInterpreter0.ternaryOperation(lineNumberNode0, sourceValue0, sourceValue0, sourceValue0);
      assertNull(value0);
  }
}

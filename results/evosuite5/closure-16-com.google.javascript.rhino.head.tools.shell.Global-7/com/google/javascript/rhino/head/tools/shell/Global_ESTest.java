/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 22:36:39 GMT 2019
 */

package com.google.javascript.rhino.head.tools.shell;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.Delegator;
import com.google.javascript.rhino.head.Function;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeJavaClass;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.Synchronizer;
import com.google.javascript.rhino.head.commonjs.module.Require;
import com.google.javascript.rhino.head.tools.shell.Global;
import com.google.javascript.rhino.head.tools.shell.QuitAction;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.util.Enumeration;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Global_ESTest extends Global_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Context context0 = Context.enter();
      NativeObject nativeObject0 = new NativeObject();
      Object[] objectArray0 = new Object[7];
      Delegator delegator0 = new Delegator();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("null");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "error reporter");
      try { 
        Global.readFile(context0, nativeObject0, objectArray0, delegator0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Context context0 = Context.enter();
      NativeObject nativeObject0 = new NativeObject();
      Object[] objectArray0 = new Object[1];
      Delegator delegator0 = new Delegator();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("null");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "reaUrl");
      Object object0 = Global.readFile(context0, nativeObject0, objectArray0, delegator0);
      assertEquals("reaUrl\n", object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, false, false).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      Global global0 = new Global();
      PrintStream printStream0 = global0.getErr();
      // Undeclared exception!
      try { 
        Global.pipe(true, sequenceInputStream1, printStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test03()  throws Throwable  {
      Context context0 = new Context();
      Global global0 = new Global(context0);
      PrintStream printStream0 = global0.getOut();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Global.pipe(false, byteArrayInputStream0, printStream0);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Context context0 = Context.enter();
      PipedInputStream pipedInputStream0 = new PipedInputStream(9);
      Global global0 = new Global(context0);
      PrintStream printStream0 = global0.getOut();
      MockPrintStream mockPrintStream0 = new MockPrintStream(printStream0, true);
      try { 
        Global.pipe(false, pipedInputStream0, mockPrintStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("language version");
      Global.pipe(true, bufferedInputStream0, mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Global global0 = new Global();
      InputStream inputStream0 = global0.getIn();
      InputStream inputStream1 = global0.getIn();
      assertSame(inputStream1, inputStream0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Context context0 = Context.enter();
      String[] stringArray0 = Locale.getISOCountries();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Object object0 = Global.toint32(context0, nativeContinuation0, stringArray0, nativeContinuation0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Context context0 = new Context();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Object object0 = Global.toint32(context0, nativeContinuation0, context0.emptyArgs, nativeContinuation0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Context context0 = new Context();
      Object[] objectArray0 = new Object[1];
      Delegator delegator0 = new Delegator();
      try { 
        Global.readUrl(context0, delegator0, objectArray0, delegator0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: null
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test10()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      // Undeclared exception!
      try { 
        Global.readUrl(context0, nativeContinuation0, context0.emptyArgs, nativeContinuation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // readUrl require at least file path to be specified
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Global global0 = new Global();
      Context context0 = Context.getCurrentContext();
      String[] stringArray0 = global0.getPrompts(context0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      try { 
        Global.readUrl(context0, global0, stringArray0, nativeContinuation0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: js> 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Context context0 = Context.enter();
      NativeObject nativeObject0 = new NativeObject();
      Object[] objectArray0 = new Object[7];
      Delegator delegator0 = new Delegator();
      try { 
        Global.readFile(context0, nativeObject0, objectArray0, delegator0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // File not found: null
         //
         verifyException("com.google.javascript.rhino.head.tools.shell.Global", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Context context0 = Context.enter();
      Delegator delegator0 = new Delegator();
      // Undeclared exception!
      try { 
        Global.readFile(context0, delegator0, context0.emptyArgs, delegator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // readFile require at least file path to be specified
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Context context0 = new Context();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) nativeContinuation0;
      Global.seal(context0, nativeContinuation0, objectArray0, nativeContinuation0);
      assertTrue(nativeContinuation0.isSealed());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      Delegator delegator0 = new Delegator(nativeJavaClass0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) delegator0;
      // Undeclared exception!
      try { 
        Global.seal(context0, delegator0, objectArray0, nativeJavaClass0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // seal function supports only sealing of ScriptableObject instances
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test16()  throws Throwable  {
      Context context0 = new Context();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) nativeContinuation0;
      // Undeclared exception!
      try { 
        Global.seal(context0, nativeContinuation0, objectArray0, nativeContinuation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // seal function can only be applied to objects
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Synchronizer synchronizer0 = new Synchronizer(nativeContinuation0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) nativeContinuation0;
      // Undeclared exception!
      try { 
        Global.runCommand(context0, synchronizer0, objectArray0, nativeContinuation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property msg.bad.shell.function.scope
         //
         verifyException("com.google.javascript.rhino.head.tools.ToolErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Global global0 = new Global();
      Context context0 = Context.enter();
      NativeObject nativeObject0 = new NativeObject();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) global0;
      Delegator delegator0 = new Delegator();
      // Undeclared exception!
      try { 
        Global.runCommand(context0, nativeObject0, objectArray0, delegator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The first argument to runCommand must be a command name.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Context context0 = Context.enter();
      Object[] objectArray0 = new Object[1];
      Delegator delegator0 = new Delegator();
      // Undeclared exception!
      try { 
        Global.runCommand(context0, delegator0, objectArray0, delegator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Delegator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Context context0 = Context.enter();
      Global global0 = new Global();
      String[] stringArray0 = global0.getPrompts(context0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(global0, byteArrayInputStream0, 8, "error reporter", 4, global0);
      try { 
        Global.runCommand(context0, global0, stringArray0, idFunctionObject0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot start processes in a unit test
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Context context0 = new Context();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) nativeContinuation0;
      Object object0 = Global.sync(context0, nativeContinuation0, objectArray0, nativeContinuation0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      Global global0 = new Global();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) nativeContinuation0;
      Object object0 = Global.sync(context0, global0, objectArray0, nativeContinuation0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        Global.sync(context0, nativeContinuation0, objectArray0, nativeContinuation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property msg.sync.args
         //
         verifyException("com.google.javascript.rhino.head.tools.ToolErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      Global global0 = new Global();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        Global.sync(context0, global0, objectArray0, nativeContinuation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property msg.sync.args
         //
         verifyException("com.google.javascript.rhino.head.tools.ToolErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Context context0 = new Context();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      // Undeclared exception!
      try { 
        Global.sync(context0, nativeContinuation0, context0.emptyArgs, nativeContinuation0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // no message resource found for message property msg.sync.args
         //
         verifyException("com.google.javascript.rhino.head.tools.ToolErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Context context0 = Context.enter();
      Global global0 = new Global();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) nativeContinuation0;
      MockThread mockThread0 = (MockThread)Global.spawn(context0, global0, objectArray0, nativeContinuation0);
      assertEquals(0, mockThread0.countStackFrames());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Context context0 = Context.enter();
      Global global0 = new Global();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) nativeContinuation0;
      MockThread mockThread0 = (MockThread)Global.spawn(context0, global0, objectArray0, nativeContinuation0);
      assertEquals(0, mockThread0.countStackFrames());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Context context0 = Context.enter();
      Global global0 = new Global();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        Global.spawn(context0, global0, objectArray0, nativeContinuation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Argument to spawn() must be a function or script.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test29()  throws Throwable  {
      Context context0 = new Context();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      // Undeclared exception!
      try { 
        Global.spawn(context0, nativeContinuation0, context0.emptyArgs, nativeContinuation0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Argument to spawn() must be a function or script.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Global global0 = new Global();
      Context context0 = new Context();
      NativeObject nativeObject0 = new NativeObject();
      int int0 = global0.runDoctest(context0, nativeObject0, "language version", ":#AU", 3);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test31()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        Global.deserialize(context0, nativeContinuation0, context0.emptyArgs, nativeContinuation0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Expected a filename to read the serialization from
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Global global0 = new Global();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Context context0 = Context.enter();
      String[] stringArray0 = global0.getPrompts(context0);
      try { 
        Global.deserialize(context0, (Scriptable) null, stringArray0, nativeContinuation0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Global global0 = new Global();
      Context context0 = Context.getCurrentContext();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        Global.serialize(context0, global0, objectArray0, nativeContinuation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object for excluded name Object not found.
         //
         verifyException("com.google.javascript.rhino.head.serialize.ScriptableOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) nativeJavaClass0;
      // Undeclared exception!
      try { 
        Global.loadClass((Context) null, nativeContinuation0, objectArray0, nativeContinuation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeJavaClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Context context0 = Context.enter();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      // Undeclared exception!
      try { 
        Global.defineClass(context0, (Scriptable) nativeContinuation0, context0.emptyArgs, (Function) nativeContinuation0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Expected a string argument.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test36()  throws Throwable  {
      Global global0 = new Global();
      Context context0 = Context.getCurrentContext();
      String[] stringArray0 = global0.getPrompts(context0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      // Undeclared exception!
      try { 
        Global.load(context0, global0, stringArray0, nativeContinuation0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Couldn't read source file \"js> \": null.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Global global0 = new Global();
      Context context0 = Context.enter();
      String[] stringArray0 = global0.getPrompts(context0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(global0, nativeContinuation0, 2, "language version", 933, global0);
      Global.print(context0, nativeContinuation0, stringArray0, idFunctionObject0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Context context0 = Context.enter();
      String[] stringArray0 = Locale.getISOLanguages();
      NativeArray nativeArray0 = new NativeArray(stringArray0);
      Global global0 = new Global(context0);
      Require require0 = global0.installRequire(context0, nativeArray0, true);
      assertTrue(require0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Context context0 = new Context();
      Global global0 = new Global();
      Require require0 = global0.installRequire(context0, (List<String>) null, false);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(require0, (Object) null, 13, "language version", 12, global0);
      Global.quit(context0, global0, context0.emptyArgs, idFunctionObject0);
      assertFalse(require0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Global global0 = new Global();
      // Undeclared exception!
      try { 
        global0.initQuitAction((QuitAction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // quitAction is null
         //
         verifyException("com.google.javascript.rhino.head.tools.shell.Global", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Global global0 = new Global();
      QuitAction quitAction0 = mock(QuitAction.class, new ViolatedAssumptionAnswer());
      global0.initQuitAction(quitAction0);
      QuitAction quitAction1 = mock(QuitAction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        global0.initQuitAction(quitAction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The method is once-call.
         //
         verifyException("com.google.javascript.rhino.head.tools.shell.Global", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test42()  throws Throwable  {
      Global global0 = new Global();
      Context context0 = Context.getCurrentContext();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(global0, context0, 171, "", 120, global0);
      // Undeclared exception!
      try { 
        Global.runCommand(context0, global0, context0.emptyArgs, idFunctionObject0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // The first argument to runCommand must be a command name.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Global global0 = new Global();
      global0.setSealedStdLib(false);
      assertEquals("object", global0.getTypeOf());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Global global0 = new Global();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      global0.setIn(pipedInputStream0);
      assertEquals(13, ScriptableObject.CONST);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Context context0 = Context.enter();
      Global global0 = new Global();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      // Undeclared exception!
      try { 
        global0.runDoctest(context0, nativeContinuation0, "js>(Lorg/mozilla/javascript/NativeFunction;Lorg/mozilla/javascript/Scriptable;Lorg/mozilla/javascript/Scriptable;II)Lorg/mozilla/javascript/Scriptable;", "1{F6~kJy'", (-228210849));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -228210849
         //
         verifyException("com.google.javascript.rhino.head.RhinoException", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Global global0 = new Global();
      Context context0 = Context.enter();
      ContextFactory contextFactory0 = context0.getFactory();
      global0.init(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Context context0 = Context.enter();
      BaseFunction baseFunction0 = new BaseFunction();
      // Undeclared exception!
      try { 
        Global.help(context0, baseFunction0, context0.emptyArgs, baseFunction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property msg.bad.shell.function.scope
         //
         verifyException("com.google.javascript.rhino.head.tools.ToolErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Context context0 = Context.enter();
      Global global0 = new Global(context0);
      boolean boolean0 = global0.isInitialized();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Context context0 = Context.enter();
      NativeObject nativeObject0 = new NativeObject();
      Object[] objectArray0 = new Object[1];
      Delegator delegator0 = new Delegator();
      // Undeclared exception!
      try { 
        Global.loadClass(context0, nativeObject0, objectArray0, delegator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class \"null\" not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }
}

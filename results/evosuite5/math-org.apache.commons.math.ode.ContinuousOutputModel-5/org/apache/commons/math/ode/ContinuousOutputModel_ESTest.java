/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 11:42:41 GMT 2019
 */

package org.apache.commons.math.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import org.apache.commons.math.ode.ContinuousOutputModel;
import org.apache.commons.math.ode.DummyStepInterpolator;
import org.apache.commons.math.ode.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ContinuousOutputModel_ESTest extends ContinuousOutputModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator();
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(dummyStepInterpolator0.isForward());
      assertNotNull(dummyStepInterpolator0);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator0, true);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(dummyStepInterpolator0.isForward());
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime(0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.DummyStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertNotNull(continuousOutputModel0);
      
      boolean boolean0 = continuousOutputModel0.requiresDenseOutput();
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[10];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(10, doubleArray0.length);
      assertNotNull(dummyStepInterpolator0);
      
      DummyStepInterpolator dummyStepInterpolator1 = new DummyStepInterpolator(dummyStepInterpolator0);
      assertFalse(dummyStepInterpolator1.equals((Object)dummyStepInterpolator0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(dummyStepInterpolator1.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(10, doubleArray0.length);
      assertNotNull(dummyStepInterpolator1);
      
      dummyStepInterpolator1.storeTime(9.785396503109435);
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator1));
      assertFalse(dummyStepInterpolator1.equals((Object)dummyStepInterpolator0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator1);
      assertNotSame(dummyStepInterpolator1, dummyStepInterpolator0);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(dummyStepInterpolator1.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(9.785396503109435, dummyStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(9.785396503109435, dummyStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(10, doubleArray0.length);
      
      dummyStepInterpolator1.shift();
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator1));
      assertFalse(dummyStepInterpolator1.equals((Object)dummyStepInterpolator0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator1);
      assertNotSame(dummyStepInterpolator1, dummyStepInterpolator0);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(dummyStepInterpolator1.isForward());
      assertEquals(9.785396503109435, dummyStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(9.785396503109435, dummyStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(9.785396503109435, dummyStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(10, doubleArray0.length);
      
      dummyStepInterpolator0.previousTime = (-1764.8898721897563);
      assertEquals((-1764.8898721897563), dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator1, true);
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator1));
      assertFalse(dummyStepInterpolator1.equals((Object)dummyStepInterpolator0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator1);
      assertNotSame(dummyStepInterpolator1, dummyStepInterpolator0);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(9.785396503109435, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(9.785396503109435, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(9.785396503109435, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals((-1764.8898721897563), dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertFalse(dummyStepInterpolator1.isForward());
      assertEquals(9.785396503109435, dummyStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(9.785396503109435, dummyStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(9.785396503109435, dummyStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(10, doubleArray0.length);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator0, true);
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator1);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(9.785396503109435, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals((-1764.8898721897563), dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(10, doubleArray0.length);
      
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertNotNull(continuousOutputModel1);
      
      continuousOutputModel1.append(continuousOutputModel0);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(9.785396503109435, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(9.785396503109435, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      
      continuousOutputModel1.append(continuousOutputModel0);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(9.785396503109435, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(9.785396503109435, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      
      continuousOutputModel1.handleStep(dummyStepInterpolator0, true);
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertEquals((-1764.8898721897563), dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(9.785396503109435, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(10, doubleArray0.length);
      
      continuousOutputModel1.setInterpolatedTime(9.785396503109435);
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertEquals(9.785396503109435, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(9.785396503109435, continuousOutputModel1.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      
      continuousOutputModel1.append(continuousOutputModel0);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(9.785396503109435, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(9.785396503109435, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      
      continuousOutputModel1.setInterpolatedTime(9.785396503109435);
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertEquals(9.785396503109435, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(9.785396503109435, continuousOutputModel1.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      
      continuousOutputModel1.setInterpolatedTime(0.0);
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertEquals(0.0, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(9.785396503109435, continuousOutputModel1.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      
      continuousOutputModel0.setInterpolatedTime((-1.0));
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(9.785396503109435, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals((-1.0), continuousOutputModel0.getInterpolatedTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      continuousOutputModel0.reset();
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      
      double double0 = continuousOutputModel0.getFinalTime();
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertNotNull(continuousOutputModel0);
      
      continuousOutputModel0.reset();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.getInterpolatedTime();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertNotNull(continuousOutputModel0);
      
      boolean boolean0 = continuousOutputModel0.requiresDenseOutput();
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(dummyStepInterpolator0);
      
      DummyStepInterpolator dummyStepInterpolator1 = new DummyStepInterpolator(dummyStepInterpolator0);
      assertFalse(dummyStepInterpolator1.equals((Object)dummyStepInterpolator0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(dummyStepInterpolator1.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(dummyStepInterpolator1);
      
      dummyStepInterpolator1.storeTime(34.90394192716427);
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator1));
      assertFalse(dummyStepInterpolator1.equals((Object)dummyStepInterpolator0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator1);
      assertNotSame(dummyStepInterpolator1, dummyStepInterpolator0);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(34.90394192716427, dummyStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(34.90394192716427, dummyStepInterpolator1.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator1.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      dummyStepInterpolator0.previousTime = (-1764.889872189756);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-1764.889872189756), dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator1, true);
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator1));
      assertFalse(dummyStepInterpolator1.equals((Object)dummyStepInterpolator0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator1);
      assertNotSame(dummyStepInterpolator1, dummyStepInterpolator0);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(34.90394192716427, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(34.90394192716427, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-1764.889872189756), dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(34.90394192716427, dummyStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(34.90394192716427, dummyStepInterpolator1.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator1.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator0, true);
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator1);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-1764.889872189756), dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertNotNull(continuousOutputModel1);
      
      continuousOutputModel1.append(continuousOutputModel0);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      
      continuousOutputModel1.append(continuousOutputModel0);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      
      continuousOutputModel1.handleStep(dummyStepInterpolator0, true);
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-1764.889872189756), dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      continuousOutputModel1.append(continuousOutputModel0);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      
      continuousOutputModel1.setInterpolatedTime((-682.6067692560514));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals((-682.6067692560514), continuousOutputModel1.getInterpolatedTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator();
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(dummyStepInterpolator0.isForward());
      assertNotNull(dummyStepInterpolator0);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator0, false);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(dummyStepInterpolator0.isForward());
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.append(continuousOutputModel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      boolean boolean0 = continuousOutputModel0.requiresDenseOutput();
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(dummyStepInterpolator0);
      
      DummyStepInterpolator dummyStepInterpolator1 = new DummyStepInterpolator(dummyStepInterpolator0);
      assertFalse(dummyStepInterpolator1.equals((Object)dummyStepInterpolator0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getPreviousTime(), 0.01);
      assertFalse(dummyStepInterpolator1.isForward());
      assertEquals(3, doubleArray0.length);
      assertNotNull(dummyStepInterpolator1);
      
      dummyStepInterpolator1.storeTime(34.90394192716427);
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator1));
      assertFalse(dummyStepInterpolator1.equals((Object)dummyStepInterpolator0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator1);
      assertNotSame(dummyStepInterpolator1, dummyStepInterpolator0);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getPreviousTime(), 0.01);
      assertFalse(dummyStepInterpolator1.isForward());
      assertEquals(34.90394192716427, dummyStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(34.90394192716427, dummyStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      dummyStepInterpolator0.previousTime = (-1764.889872189756);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-1764.889872189756), dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator1, true);
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator1));
      assertFalse(dummyStepInterpolator1.equals((Object)dummyStepInterpolator0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator1);
      assertNotSame(dummyStepInterpolator1, dummyStepInterpolator0);
      assertEquals(34.90394192716427, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(34.90394192716427, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-1764.889872189756), dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getPreviousTime(), 0.01);
      assertFalse(dummyStepInterpolator1.isForward());
      assertEquals(34.90394192716427, dummyStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(34.90394192716427, dummyStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator0, true);
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator1);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-1764.889872189756), dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertNotNull(continuousOutputModel1);
      
      continuousOutputModel1.append(continuousOutputModel0);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      
      continuousOutputModel1.append(continuousOutputModel0);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      
      continuousOutputModel1.handleStep(dummyStepInterpolator0, true);
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-1764.889872189756), dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      continuousOutputModel1.append(continuousOutputModel0);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      
      continuousOutputModel1.setInterpolatedTime(34.90394192716427);
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(34.90394192716427, continuousOutputModel1.getInterpolatedTime(), 0.01);
      
      continuousOutputModel1.setInterpolatedTime((-12.48837839566819));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertEquals((-12.48837839566819), continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      double[] doubleArray0 = new double[6];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(dummyStepInterpolator0);
      
      dummyStepInterpolator0.previousTime = (-3354.2818);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-3354.2818), dummyStepInterpolator0.getPreviousTime(), 0.01);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals((-3354.2818), continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-3354.2818), dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(6, doubleArray0.length);
      
      continuousOutputModel0.setInterpolatedTime((-1766.0));
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals((-3354.2818), continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals((-1766.0), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.append(continuousOutputModel0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertNotNull(continuousOutputModel0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(dummyStepInterpolator0);
      
      DummyStepInterpolator dummyStepInterpolator1 = new DummyStepInterpolator(dummyStepInterpolator0);
      assertFalse(dummyStepInterpolator1.equals((Object)dummyStepInterpolator0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(dummyStepInterpolator1.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(dummyStepInterpolator1);
      
      dummyStepInterpolator1.storeTime(8.86949797391526);
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator1));
      assertFalse(dummyStepInterpolator1.equals((Object)dummyStepInterpolator0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator1);
      assertNotSame(dummyStepInterpolator1, dummyStepInterpolator0);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(dummyStepInterpolator1.isForward());
      assertEquals(8.86949797391526, dummyStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(8.86949797391526, dummyStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      dummyStepInterpolator0.previousTime = 0.0;
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(0.0, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator1, false);
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator1));
      assertFalse(dummyStepInterpolator1.equals((Object)dummyStepInterpolator0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator1);
      assertNotSame(dummyStepInterpolator1, dummyStepInterpolator0);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(8.86949797391526, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(0.0, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator1.isForward());
      assertEquals(8.86949797391526, dummyStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(8.86949797391526, dummyStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator0, true);
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator1);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(0.0, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertNotNull(continuousOutputModel1);
      
      continuousOutputModel1.append(continuousOutputModel0);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      
      continuousOutputModel1.setInterpolatedTime(0.1);
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(0.1, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      continuousOutputModel0.reset();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      
      double double0 = continuousOutputModel0.getInitialTime();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator();
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertNotNull(dummyStepInterpolator0);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator0, false);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertNotNull(continuousOutputModel1);
      
      continuousOutputModel1.append(continuousOutputModel0);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      continuousOutputModel0.append(continuousOutputModel0);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator();
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(dummyStepInterpolator0.isForward());
      assertNotNull(dummyStepInterpolator0);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator0, true);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(dummyStepInterpolator0.isForward());
      
      continuousOutputModel0.handleStep(dummyStepInterpolator0, true);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(dummyStepInterpolator0.isForward());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      boolean boolean0 = continuousOutputModel0.requiresDenseOutput();
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (-1698.496654396723);
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      assertArrayEquals(new double[] {0.0, 0.0, (-1698.496654396723), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(dummyStepInterpolator0);
      
      DummyStepInterpolator dummyStepInterpolator1 = new DummyStepInterpolator(dummyStepInterpolator0);
      assertFalse(dummyStepInterpolator1.equals((Object)dummyStepInterpolator0));
      assertArrayEquals(new double[] {0.0, 0.0, (-1698.496654396723), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator1.isForward());
      assertEquals(7, doubleArray0.length);
      assertNotNull(dummyStepInterpolator1);
      
      dummyStepInterpolator0.currentTime = (-1698.496654396723);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-1698.496654396723), dummyStepInterpolator0.getCurrentTime(), 0.01);
      
      dummyStepInterpolator1.storeTime((-0.07665486019485875));
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator1));
      assertFalse(dummyStepInterpolator1.equals((Object)dummyStepInterpolator0));
      assertArrayEquals(new double[] {0.0, 0.0, (-1698.496654396723), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator1);
      assertNotSame(dummyStepInterpolator1, dummyStepInterpolator0);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-1698.496654396723), dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals((-0.07665486019485875), dummyStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals((-0.07665486019485875), dummyStepInterpolator1.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator1.isForward());
      assertEquals(7, doubleArray0.length);
      
      dummyStepInterpolator0.previousTime = (-1698.496654396723);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals((-1698.496654396723), dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-1698.496654396723), dummyStepInterpolator0.getCurrentTime(), 0.01);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator1, true);
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator1));
      assertFalse(dummyStepInterpolator1.equals((Object)dummyStepInterpolator0));
      assertArrayEquals(new double[] {0.0, 0.0, (-1698.496654396723), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator1);
      assertNotSame(dummyStepInterpolator1, dummyStepInterpolator0);
      assertEquals((-0.07665486019485875), continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals((-0.07665486019485875), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals((-1698.496654396723), dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-1698.496654396723), dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals((-0.07665486019485875), dummyStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals((-0.07665486019485875), dummyStepInterpolator1.getCurrentTime(), 0.01);
      assertFalse(dummyStepInterpolator1.isForward());
      assertEquals(7, doubleArray0.length);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator0, true);
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator1));
      assertArrayEquals(new double[] {0.0, 0.0, (-1698.496654396723), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator1);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals((-1698.496654396723), continuousOutputModel0.getFinalTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals((-1698.496654396723), dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-1698.496654396723), dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(7, doubleArray0.length);
      
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertNotNull(continuousOutputModel1);
      
      continuousOutputModel1.append(continuousOutputModel0);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals((-1698.496654396723), continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals((-1698.496654396723), continuousOutputModel1.getFinalTime(), 0.01);
      
      continuousOutputModel1.append(continuousOutputModel0);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals((-1698.496654396723), continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals((-1698.496654396723), continuousOutputModel1.getFinalTime(), 0.01);
      
      continuousOutputModel1.handleStep(dummyStepInterpolator0, true);
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertArrayEquals(new double[] {0.0, 0.0, (-1698.496654396723), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals((-1698.496654396723), dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-1698.496654396723), dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals((-1698.496654396723), continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(7, doubleArray0.length);
      
      continuousOutputModel1.append(continuousOutputModel0);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals((-1698.496654396723), continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals((-1698.496654396723), continuousOutputModel1.getFinalTime(), 0.01);
      
      continuousOutputModel1.setInterpolatedTime((-682.1985171692));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertEquals((-682.1985171692), continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals((-1698.496654396723), continuousOutputModel1.getFinalTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator();
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(dummyStepInterpolator0.isForward());
      assertNotNull(dummyStepInterpolator0);
      
      dummyStepInterpolator0.currentTime = (-30.0);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-30.0), dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dummyStepInterpolator0.isForward());
      
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      continuousOutputModel0.reset();
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator0, false);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-30.0), dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dummyStepInterpolator0.isForward());
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime(1013.161779513172);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.DummyStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-1766.0);
      doubleArray0[2] = (-1766.0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      doubleArray0[4] = (-1766.0);
      doubleArray0[6] = (-1766.0);
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      assertArrayEquals(new double[] {0.0, (-1766.0), (-1766.0), 0.0, (-1766.0), 0.0, (-1766.0)}, doubleArray0, 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(dummyStepInterpolator0);
      
      DummyStepInterpolator dummyStepInterpolator1 = new DummyStepInterpolator(dummyStepInterpolator0);
      assertFalse(dummyStepInterpolator1.equals((Object)dummyStepInterpolator0));
      assertArrayEquals(new double[] {0.0, (-1766.0), (-1766.0), 0.0, (-1766.0), 0.0, (-1766.0)}, doubleArray0, 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getInterpolatedTime(), 0.01);
      assertFalse(dummyStepInterpolator1.isForward());
      assertEquals(7, doubleArray0.length);
      assertNotNull(dummyStepInterpolator1);
      
      dummyStepInterpolator0.currentTime = (-1766.0);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-1766.0), dummyStepInterpolator0.getCurrentTime(), 0.01);
      
      dummyStepInterpolator1.storeTime(0.09114583333333333);
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator1));
      assertFalse(dummyStepInterpolator1.equals((Object)dummyStepInterpolator0));
      assertArrayEquals(new double[] {0.0, (-1766.0), (-1766.0), 0.0, (-1766.0), 0.0, (-1766.0)}, doubleArray0, 0.01);
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator1);
      assertNotSame(dummyStepInterpolator1, dummyStepInterpolator0);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-1766.0), dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(0.09114583333333333, dummyStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(0.09114583333333333, dummyStepInterpolator1.getInterpolatedTime(), 0.01);
      assertFalse(dummyStepInterpolator1.isForward());
      assertEquals(7, doubleArray0.length);
      
      dummyStepInterpolator0.previousTime = (-1766.0);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-1766.0), dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-1766.0), dummyStepInterpolator0.getCurrentTime(), 0.01);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator1, false);
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator1));
      assertFalse(dummyStepInterpolator1.equals((Object)dummyStepInterpolator0));
      assertArrayEquals(new double[] {0.0, (-1766.0), (-1766.0), 0.0, (-1766.0), 0.0, (-1766.0)}, doubleArray0, 0.01);
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator1);
      assertNotSame(dummyStepInterpolator1, dummyStepInterpolator0);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(0.09114583333333333, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-1766.0), dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-1766.0), dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(0.09114583333333333, dummyStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(0.09114583333333333, dummyStepInterpolator1.getInterpolatedTime(), 0.01);
      assertFalse(dummyStepInterpolator1.isForward());
      assertEquals(7, doubleArray0.length);
      
      dummyStepInterpolator1.storeTime((-1766.0));
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator1));
      assertFalse(dummyStepInterpolator1.equals((Object)dummyStepInterpolator0));
      assertArrayEquals(new double[] {0.0, (-1766.0), (-1766.0), 0.0, (-1766.0), 0.0, (-1766.0)}, doubleArray0, 0.01);
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator1);
      assertNotSame(dummyStepInterpolator1, dummyStepInterpolator0);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-1766.0), dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-1766.0), dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-1766.0), dummyStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals((-1766.0), dummyStepInterpolator1.getInterpolatedTime(), 0.01);
      assertFalse(dummyStepInterpolator1.isForward());
      assertEquals(7, doubleArray0.length);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator1, true);
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator1));
      assertFalse(dummyStepInterpolator1.equals((Object)dummyStepInterpolator0));
      assertArrayEquals(new double[] {0.0, (-1766.0), (-1766.0), 0.0, (-1766.0), 0.0, (-1766.0)}, doubleArray0, 0.01);
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator1);
      assertNotSame(dummyStepInterpolator1, dummyStepInterpolator0);
      assertEquals((-1766.0), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals((-1766.0), continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-1766.0), dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-1766.0), dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals((-1766.0), dummyStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals((-1766.0), dummyStepInterpolator1.getInterpolatedTime(), 0.01);
      assertFalse(dummyStepInterpolator1.isForward());
      assertEquals(7, doubleArray0.length);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator0, false);
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator1));
      assertArrayEquals(new double[] {0.0, (-1766.0), (-1766.0), 0.0, (-1766.0), 0.0, (-1766.0)}, doubleArray0, 0.01);
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator1);
      assertEquals((-1766.0), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals((-1766.0), continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-1766.0), dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-1766.0), dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(7, doubleArray0.length);
      
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertNotNull(continuousOutputModel1);
      
      continuousOutputModel1.append(continuousOutputModel0);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertEquals((-1766.0), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals((-1766.0), continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals((-1766.0), continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      
      continuousOutputModel1.append(continuousOutputModel0);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertEquals((-1766.0), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals((-1766.0), continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals((-1766.0), continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      
      continuousOutputModel1.handleStep(dummyStepInterpolator0, true);
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator1));
      assertArrayEquals(new double[] {0.0, (-1766.0), (-1766.0), 0.0, (-1766.0), 0.0, (-1766.0)}, doubleArray0, 0.01);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator1);
      assertEquals((-1766.0), continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-1766.0), dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals((-1766.0), dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(7, doubleArray0.length);
      
      ContinuousOutputModel continuousOutputModel2 = new ContinuousOutputModel();
      assertFalse(continuousOutputModel2.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel2.equals((Object)continuousOutputModel0));
      assertEquals(Double.NaN, continuousOutputModel2.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel2.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel2.requiresDenseOutput());
      assertNotNull(continuousOutputModel2);
      
      continuousOutputModel0.append(continuousOutputModel2);
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel2));
      assertFalse(continuousOutputModel2.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel2.equals((Object)continuousOutputModel0));
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(continuousOutputModel0, continuousOutputModel2);
      assertNotSame(continuousOutputModel2, continuousOutputModel1);
      assertNotSame(continuousOutputModel2, continuousOutputModel0);
      assertEquals((-1766.0), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals((-1766.0), continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel2.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel2.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel2.requiresDenseOutput());
      
      continuousOutputModel0.setInterpolatedTime((-1623.865456));
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel1));
      assertFalse(continuousOutputModel0.equals((Object)continuousOutputModel2));
      assertNotSame(continuousOutputModel0, continuousOutputModel1);
      assertNotSame(continuousOutputModel0, continuousOutputModel2);
      assertEquals((-1623.865456), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals((-1766.0), continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      
      continuousOutputModel1.setInterpolatedTime((-1743.1129224));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel2));
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertNotSame(continuousOutputModel1, continuousOutputModel2);
      assertEquals((-1766.0), continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals((-1743.1129224), continuousOutputModel1.getInterpolatedTime(), 0.01);
      
      // Undeclared exception!
      try { 
        continuousOutputModel2.setInterpolatedTime(4218.652);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertNotNull(continuousOutputModel0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(dummyStepInterpolator0);
      
      DummyStepInterpolator dummyStepInterpolator1 = new DummyStepInterpolator(dummyStepInterpolator0);
      assertFalse(dummyStepInterpolator1.equals((Object)dummyStepInterpolator0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getInterpolatedTime(), 0.01);
      assertFalse(dummyStepInterpolator1.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator1.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(dummyStepInterpolator1);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1698.4966543967);
      doubleArray1[1] = 0.09114583333333333;
      doubleArray1[2] = (-1698.4966543967);
      doubleArray1[3] = (-1698.4966543967);
      DummyStepInterpolator dummyStepInterpolator2 = new DummyStepInterpolator(doubleArray1, true);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(dummyStepInterpolator2.equals((Object)dummyStepInterpolator0));
      assertFalse(dummyStepInterpolator2.equals((Object)dummyStepInterpolator1));
      assertArrayEquals(new double[] {(-1698.4966543967), 0.09114583333333333, (-1698.4966543967), (-1698.4966543967)}, doubleArray1, 0.01);
      assertTrue(dummyStepInterpolator2.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator2.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator2.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator2.getCurrentTime(), 0.01);
      assertEquals(4, doubleArray1.length);
      assertNotNull(dummyStepInterpolator2);
      
      dummyStepInterpolator2.storeTime((-1586.146251273131));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(dummyStepInterpolator2.equals((Object)dummyStepInterpolator0));
      assertFalse(dummyStepInterpolator2.equals((Object)dummyStepInterpolator1));
      assertArrayEquals(new double[] {(-1698.4966543967), 0.09114583333333333, (-1698.4966543967), (-1698.4966543967)}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(dummyStepInterpolator2, dummyStepInterpolator0);
      assertNotSame(dummyStepInterpolator2, dummyStepInterpolator1);
      assertTrue(dummyStepInterpolator2.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator2.getPreviousTime(), 0.01);
      assertEquals((-1586.146251273131), dummyStepInterpolator2.getInterpolatedTime(), 0.01);
      assertEquals((-1586.146251273131), dummyStepInterpolator2.getCurrentTime(), 0.01);
      assertEquals(4, doubleArray1.length);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator0, true);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator2));
      assertFalse(dummyStepInterpolator0.equals((Object)dummyStepInterpolator1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator2);
      assertNotSame(dummyStepInterpolator0, dummyStepInterpolator1);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(7, doubleArray0.length);
      
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel1.getFinalTime(), 0.01);
      assertNotNull(continuousOutputModel1);
      
      continuousOutputModel1.handleStep(dummyStepInterpolator2, true);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(dummyStepInterpolator2.equals((Object)dummyStepInterpolator0));
      assertFalse(dummyStepInterpolator2.equals((Object)dummyStepInterpolator1));
      assertFalse(continuousOutputModel1.equals((Object)continuousOutputModel0));
      assertArrayEquals(new double[] {(-1698.4966543967), 0.09114583333333333, (-1698.4966543967), (-1698.4966543967)}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(dummyStepInterpolator2, dummyStepInterpolator0);
      assertNotSame(dummyStepInterpolator2, dummyStepInterpolator1);
      assertNotSame(continuousOutputModel1, continuousOutputModel0);
      assertTrue(dummyStepInterpolator2.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator2.getPreviousTime(), 0.01);
      assertEquals((-1586.146251273131), dummyStepInterpolator2.getInterpolatedTime(), 0.01);
      assertEquals((-1586.146251273131), dummyStepInterpolator2.getCurrentTime(), 0.01);
      assertEquals((-1586.146251273131), continuousOutputModel1.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel1.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel1.getInitialTime(), 0.01);
      assertEquals((-1586.146251273131), continuousOutputModel1.getFinalTime(), 0.01);
      assertEquals(4, doubleArray1.length);
      
      ContinuousOutputModel continuousOutputModel2 = new ContinuousOutputModel();
      assertFalse(continuousOutputModel2.equals((Object)continuousOutputModel0));
      assertFalse(continuousOutputModel2.equals((Object)continuousOutputModel1));
      assertEquals(Double.NaN, continuousOutputModel2.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel2.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel2.requiresDenseOutput());
      assertNotNull(continuousOutputModel2);
      
      // Undeclared exception!
      try { 
        continuousOutputModel1.append(continuousOutputModel0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // state vector dimension mismatch
         //
         verifyException("org.apache.commons.math.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      double[] doubleArray0 = new double[6];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(dummyStepInterpolator0);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.append(continuousOutputModel0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.getInterpolatedState();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertNotNull(continuousOutputModel0);
      
      double[] doubleArray0 = new double[4];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(dummyStepInterpolator0);
      
      dummyStepInterpolator0.currentTime = (-1418.42);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-1418.42), dummyStepInterpolator0.getCurrentTime(), 0.01);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals((-1418.42), dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(4, doubleArray0.length);
      
      continuousOutputModel0.setInterpolatedTime((-1766.0));
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals((-1766.0), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      
      continuousOutputModel0.setInterpolatedTime((-1766.0));
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals((-1766.0), continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertNotNull(continuousOutputModel0);
      
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator();
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertNotNull(dummyStepInterpolator0);
      
      dummyStepInterpolator0.previousTime = 11.71875;
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dummyStepInterpolator0.isForward());
      assertEquals(11.71875, dummyStepInterpolator0.getPreviousTime(), 0.01);
      
      StepInterpolator stepInterpolator0 = dummyStepInterpolator0.doCopy();
      assertFalse(stepInterpolator0.equals((Object)dummyStepInterpolator0));
      assertNotSame(dummyStepInterpolator0, stepInterpolator0);
      assertNotSame(stepInterpolator0, dummyStepInterpolator0);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dummyStepInterpolator0.isForward());
      assertEquals(11.71875, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(11.71875, stepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(stepInterpolator0.isForward());
      assertEquals(Double.NaN, stepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, stepInterpolator0.getCurrentTime(), 0.01);
      assertNotNull(stepInterpolator0);
      
      continuousOutputModel0.handleStep(stepInterpolator0, true);
      assertFalse(dummyStepInterpolator0.equals((Object)stepInterpolator0));
      assertFalse(stepInterpolator0.equals((Object)dummyStepInterpolator0));
      assertNotSame(dummyStepInterpolator0, stepInterpolator0);
      assertNotSame(stepInterpolator0, dummyStepInterpolator0);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(11.71875, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(dummyStepInterpolator0.isForward());
      assertEquals(11.71875, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(11.71875, stepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(stepInterpolator0.isForward());
      assertEquals(Double.NaN, stepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, stepInterpolator0.getCurrentTime(), 0.01);
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.setInterpolatedTime((-1024.6989349395237));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.DummyStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      assertEquals(Double.NaN, continuousOutputModel0.getInitialTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertNotNull(continuousOutputModel0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(dummyStepInterpolator0);
      
      dummyStepInterpolator0.storeTime(3658.46);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(3658.46, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(3658.46, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      dummyStepInterpolator0.previousTime = 0.0;
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(0.0, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(3658.46, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(3658.46, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3658.46, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(0.0, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(0.0, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(3658.46, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(3658.46, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      continuousOutputModel0.handleStep(dummyStepInterpolator0, true);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3658.46, continuousOutputModel0.getFinalTime(), 0.01);
      assertEquals(3658.46, continuousOutputModel0.getInterpolatedTime(), 0.01);
      assertEquals(0.0, continuousOutputModel0.getInitialTime(), 0.01);
      assertTrue(continuousOutputModel0.requiresDenseOutput());
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(0.0, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(3658.46, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(3658.46, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        continuousOutputModel0.append(continuousOutputModel0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hole between time ranges
         //
         verifyException("org.apache.commons.math.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      continuousOutputModel0.reset();
      double[] doubleArray0 = new double[6];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      DummyStepInterpolator dummyStepInterpolator1 = new DummyStepInterpolator(doubleArray0, true);
      dummyStepInterpolator1.interpolatedState = doubleArray0;
      continuousOutputModel0.handleStep(dummyStepInterpolator0, false);
      ContinuousOutputModel continuousOutputModel1 = new ContinuousOutputModel();
      continuousOutputModel1.handleStep(dummyStepInterpolator1, false);
      ContinuousOutputModel continuousOutputModel2 = new ContinuousOutputModel();
      continuousOutputModel2.append(continuousOutputModel1);
      ContinuousOutputModel continuousOutputModel3 = new ContinuousOutputModel();
      // Undeclared exception!
      try { 
        continuousOutputModel0.append(continuousOutputModel2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // propagation direction mismatch
         //
         verifyException("org.apache.commons.math.ode.ContinuousOutputModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      double[] doubleArray0 = new double[6];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      continuousOutputModel0.handleStep(dummyStepInterpolator0, false);
      continuousOutputModel0.setInterpolatedTime((-1766.0));
      assertEquals((-1766.0), continuousOutputModel0.getInterpolatedTime(), 0.01);
  }
}

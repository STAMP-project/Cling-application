/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 11:55:12 GMT 2019
 */

package org.apache.commons.math.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectOutputStream;
import org.apache.commons.math.ode.DormandPrince54StepInterpolator;
import org.apache.commons.math.ode.DormandPrince853StepInterpolator;
import org.apache.commons.math.ode.DummyStepInterpolator;
import org.apache.commons.math.ode.EulerStepInterpolator;
import org.apache.commons.math.ode.GillStepInterpolator;
import org.apache.commons.math.ode.HighamHall54StepInterpolator;
import org.apache.commons.math.ode.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AbstractStepInterpolator_ESTest extends AbstractStepInterpolator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.math.ode.DerivaiveException");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      dummyStepInterpolator0.writeExternal(objectOutputStream0);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GillStepInterpolator gillStepInterpolator0 = new GillStepInterpolator();
      gillStepInterpolator0.finalizeStep();
      gillStepInterpolator0.finalizeStep();
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator();
      double[] doubleArray0 = new double[1];
      dummyStepInterpolator0.currentState = doubleArray0;
      // Undeclared exception!
      try { 
        dummyStepInterpolator0.doCopy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      // Undeclared exception!
      try { 
        dormandPrince853StepInterpolator0.storeTime((-3408.82152));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EulerStepInterpolator eulerStepInterpolator0 = new EulerStepInterpolator();
      // Undeclared exception!
      try { 
        eulerStepInterpolator0.reinitialize((double[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator();
      // Undeclared exception!
      try { 
        dummyStepInterpolator0.setInterpolatedTime(2252.41);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.DummyStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      double double0 = dormandPrince54StepInterpolator0.getCurrentTime();
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, dormandPrince54StepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(dormandPrince54StepInterpolator0.isForward());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HighamHall54StepInterpolator highamHall54StepInterpolator0 = new HighamHall54StepInterpolator();
      double double0 = highamHall54StepInterpolator0.getPreviousTime();
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(highamHall54StepInterpolator0.isForward());
      assertEquals(Double.NaN, highamHall54StepInterpolator0.getInterpolatedTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GillStepInterpolator gillStepInterpolator0 = new GillStepInterpolator();
      gillStepInterpolator0.shift();
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GillStepInterpolator gillStepInterpolator0 = new GillStepInterpolator();
      boolean boolean0 = gillStepInterpolator0.isForward();
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      double double0 = dormandPrince853StepInterpolator0.getInterpolatedTime();
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dormandPrince853StepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(dormandPrince853StepInterpolator0.isForward());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DormandPrince54StepInterpolator dormandPrince54StepInterpolator0 = new DormandPrince54StepInterpolator();
      StepInterpolator stepInterpolator0 = dormandPrince54StepInterpolator0.copy();
      assertEquals(Double.NaN, stepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(stepInterpolator0.isForward());
      assertEquals(Double.NaN, stepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, stepInterpolator0.getInterpolatedTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      // Undeclared exception!
      try { 
        dormandPrince853StepInterpolator0.getInterpolatedState();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.AbstractStepInterpolator", e);
      }
  }
}

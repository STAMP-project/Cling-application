/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 16:42:12 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Map;
import org.apache.commons.lang3.ArrayUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      ArrayUtils.isSameLength(byteArray0, byteArray0);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)205;
      shortArray0[6] = (short)4999;
      shortArray0[7] = (short) (-1);
      short[] shortArray1 = new short[6];
      shortArray1[0] = (short) (byte)1;
      shortArray1[2] = (short) (-1);
      shortArray1[3] = (short) (byte)1;
      shortArray1[4] = (short) (byte)1;
      shortArray1[5] = (short)205;
      ArrayUtils.addAll(shortArray0, shortArray1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1540), (-1073741823));
      ArrayUtils.reverse(byteArray1);
      float[] floatArray0 = new float[0];
      ArrayUtils.lastIndexOf(floatArray0, (float) (short) (-1732), (-1));
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)1;
      ArrayUtils.subarray((double[]) null, (int) (short)1, (int) (short)1);
      ArrayUtils.nullToEmpty(floatArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.reverse(booleanArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = 932L;
      longArray0[1] = 932L;
      longArray0[2] = 0L;
      longArray0[3] = 932L;
      longArray0[4] = 932L;
      longArray0[5] = 932L;
      longArray0[6] = 932L;
      ArrayUtils.isNotEmpty(longArray0);
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      Boolean[] booleanArray1 = new Boolean[1];
      booleanArray1[0] = (Boolean) false;
      ArrayUtils.toPrimitive(booleanArray1, true);
      ArrayUtils.isSameLength(longArray0, longArray0);
      ArrayUtils.addAll((char[]) null, (char[]) null);
      ArrayUtils.reverse((Object[]) booleanArray1);
      Integer integer0 = new Integer((-8));
      ArrayUtils.isSameType(integer0, integer0);
      ArrayUtils.nullToEmpty((Long[]) null);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      ArrayUtils.toPrimitive(byteArray0);
      Boolean[] booleanArray0 = new Boolean[0];
      ArrayUtils.nullToEmpty(booleanArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-722.93F);
      floatArray0[1] = (-771.3557F);
      floatArray0[2] = (-722.93F);
      ArrayUtils.removeElement(floatArray0, (-771.3557F));
      double[] doubleArray0 = new double[0];
      ArrayUtils.toObject(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.add((String[]) null, (-2300), "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2300, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.nullToEmpty(intArray0);
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      Double double0 = new Double(729.003263301669);
      Double double1 = new Double(729.003263301669);
      Double.valueOf(63.0);
      Double double2 = new Double((-2372.0));
      Double double3 = new Double((-2103.60124));
      ArrayUtils.isSameLength((Object[]) null, (Object[]) byteArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 0.0;
      long[] longArray0 = new long[4];
      longArray0[0] = 1472L;
      longArray0[1] = (-1L);
      byte[] byteArray0 = new byte[0];
      ArrayUtils.lastIndexOf(byteArray0, (byte)1, (-1942));
      ArrayUtils.nullToEmpty(longArray0);
      ArrayUtils.nullToEmpty((short[]) null);
      ArrayUtils.indexOf((boolean[]) null, false, (-1942));
      ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Character character0 = new Character('Z');
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.isNotEmpty(booleanArray0);
      ArrayUtils.clone((boolean[]) null);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'Z';
      intArray0[1] = (int) 'Z';
      intArray0[2] = (int) 'Z';
      intArray0[3] = (int) 'Z';
      intArray0[5] = 3;
      intArray0[6] = (int) 'Z';
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-90);
      ArrayUtils.reverse(byteArray0);
      Float float0 = new Float((-76.0F));
      ArrayUtils.toPrimitive((Float[]) null, (float) 90);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1816);
      ArrayUtils.lastIndexOf(shortArray0, (short)20679, 0);
      ArrayUtils.toPrimitive((Float[]) null);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1066.1543F);
      floatArray0[5] = 3886.6482F;
      floatArray0[6] = (-946.8F);
      int int0 = 3960;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 3960, (-1066.1543F));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3960, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      short[] shortArray0 = new short[6];
      ArrayUtils.isSameLength(shortArray0, shortArray0);
      Object object0 = new Object();
      float[] floatArray0 = new float[0];
      ArrayUtils.isSameLength(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '?';
      ArrayUtils.contains(doubleArray0, 1534.44444790543, 63.0);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      ArrayUtils.indexOf(doubleArray0, 1798.64516116, 1019, 1798.64516116);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      longArray0[1] = (-2501L);
      longArray0[2] = (-2501L);
      ArrayUtils.clone(longArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      ArrayUtils.nullToEmpty(longArray0);
      double[] doubleArray0 = new double[10];
      ArrayUtils.lastIndexOf(doubleArray0, (double) 0L, (-3750));
      ArrayUtils.isSameLength((double[]) null, (double[]) null);
      ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      short[] shortArray0 = new short[0];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)57;
      ArrayUtils.isSameLength((byte[]) null, byteArray0);
      Integer integer0 = new Integer(2);
      Object object0 = new Object();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(integer0, object0);
      AbstractMap.SimpleEntry<Object, Object>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Object, Object>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 1);
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      ArrayUtils.addAll(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray0);
      ArrayUtils.isSameLength(shortArray0, shortArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      Short.compare((short)1, (short)1);
      shortArray0[1] = shortArray0[0];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3103);
      intArray0[1] = 2327;
      intArray0[2] = 0;
      intArray0[3] = (-346);
      ArrayUtils.lastIndexOf(intArray0, (-1936));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)0;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.lang3.builder.ToStringStyle$MultiLineToStringStyle";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      ArrayUtils.nullToEmpty(stringArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[1];
      Character.toChars(0, charArray0, 0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-258);
      intArray0[2] = 92;
      intArray0[3] = (int) '5';
      ArrayUtils.reverse(intArray0);
      Object[] objectArray0 = new Object[0];
      ArrayUtils.lastIndexOf(intArray0, 0, 1728);
      ArrayUtils.toMap(objectArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[3];
      ArrayUtils.isNotEmpty((char[]) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-709.46018184027);
      char[] charArray0 = new char[0];
      ArrayUtils.isSameLength(charArray0, (char[]) null);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '?';
      intArray0[1] = (-1585);
      intArray0[2] = (int) '?';
      intArray0[3] = (int) '?';
      intArray0[4] = (int) 'S';
      intArray0[5] = (int) '?';
      intArray0[6] = (int) 'S';
      ArrayUtils.isNotEmpty(intArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      ArrayUtils.indexOf(longArray1, 3782L);
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      double[] doubleArray0 = new double[0];
      ArrayUtils.lastIndexOf(doubleArray0, 0.0, (-1682), 0.0);
      ArrayUtils.lastIndexOf((Object[]) integerArray0, object2);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2171);
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)16987;
      shortArray0[3] = (short)24;
      ArrayUtils.removeElement(shortArray0, (short)16987);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (-1037.66879);
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      Character character0 = new Character(',');
      Character.isSurrogate('9');
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      ArrayUtils.lastIndexOf(doubleArray0, (double) 11, 2);
      ArrayUtils.isSameLength((double[]) null, doubleArray0);
      ArrayUtils.isNotEmpty((double[]) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      long[] longArray0 = new long[3];
      longArray0[0] = 64L;
      longArray0[1] = (-126L);
      longArray0[2] = 57L;
      ArrayUtils.indexOf(longArray0, 62L, (-3301));
      Double double0 = new Double(0.0);
      Double double1 = new Double((-126L));
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 0.0;
      ArrayUtils.toPrimitive(doubleArray1);
      ArrayUtils.subarray((int[]) null, (-507), Integer.MAX_VALUE);
      ArrayUtils.subarray(doubleArray0, (-507), 717);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte) (-121);
      ArrayUtils.addAll(byteArray0, byteArray0);
      ArrayUtils.lastIndexOf(byteArray0, (byte)69, (int) (byte)72);
      ArrayUtils.removeElement(byteArray0, (byte) (-92));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[2];
      intArray1[0] = 3413;
      intArray1[1] = (-552);
      ArrayUtils.isSameLength(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.isSameLength((int[]) null, intArray0);
      ArrayUtils.isSameLength(intArray0, intArray0);
      ArrayUtils.isSameLength((int[]) null, (int[]) null);
      int[] intArray1 = new int[0];
      ArrayUtils.isSameLength((int[]) null, intArray1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (-1037.66879);
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      Character character0 = new Character(',');
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      ArrayUtils.toPrimitive(characterArray0);
      ArrayUtils.isNotEmpty(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray0);
      ArrayUtils.isSameLength((char[]) null, (char[]) null);
      Object object0 = new Object();
      Integer integer0 = new Integer((-324));
      Integer.toUnsignedString(970);
      ArrayUtils.lastIndexOf((Object[]) longArray1, (Object) "/#DU", 2293);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      ArrayUtils.isSameLength((char[]) null, (char[]) null);
      ArrayUtils.nullToEmpty(longArray2);
      ArrayUtils.toObject((int[]) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1019;
      ArrayUtils.isSameLength(shortArray0, shortArray0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      ArrayUtils.toMap(objectArray0);
      Float float0 = new Float((-979.0572F));
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = float0;
      Float float1 = new Float((double) floatArray0[0]);
      floatArray0[1] = float1;
      ArrayUtils.toPrimitive(floatArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ArrayUtils.isEmpty((short[]) null);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayUtils.isSameLength(doubleArray0, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.isSameLength(byteArray0, byteArray0);
      ArrayUtils.isEmpty(byteArray0);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)67;
      shortArray0[1] = (short) (byte)67;
      shortArray0[2] = (short) (byte)67;
      ArrayUtils.isEmpty(shortArray0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = ',';
      ArrayUtils.isSameLength(charArray0, charArray0);
      ArrayUtils.isSameLength(shortArray0, shortArray0);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.subarray(booleanArray0, (int) (short)67, (int) (short)67);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)67;
      doubleArray0[1] = (double) ',';
      doubleArray0[2] = (double) 'W';
      doubleArray0[3] = (double) (byte)67;
      doubleArray0[4] = (double) (byte)67;
      doubleArray0[5] = (-2274.747152769993);
      doubleArray0[6] = (double) (byte)67;
      doubleArray0[7] = (double) 'W';
      doubleArray0[8] = (double) 'W';
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      ArrayUtils.addAll(doubleArray1, doubleArray0);
      ArrayUtils.contains(charArray0, 'W');
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 881.656;
      doubleArray0[1] = (-1406.7975328800767);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 390.698044351055;
      doubleArray0[5] = 1056.743741393409;
      ArrayUtils.add(doubleArray0, 0, (-1.0));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      ArrayUtils.isNotEmpty(longArray0);
      ArrayUtils.isSameLength((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) '}';
      doubleArray0[1] = (double) (-964L);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (-2697L);
      doubleArray0[5] = (double) 0L;
      ArrayUtils.lastIndexOf(doubleArray0, (-2697.0), 125.0);
      Double double0 = new Double(4);
      Double[] doubleArray1 = new Double[9];
      Double double1 = new Double(4);
      Double.max(4, 0.0);
      doubleArray1[0] = double1;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 125.0;
      doubleArray1[3] = (Double) 125.0;
      doubleArray1[4] = double0;
      doubleArray1[5] = (Double) 0.0;
      doubleArray1[6] = (Double) 0.0;
      Double.min(0L, (-1977.9422521));
      ArrayUtils.toPrimitive((Byte[]) null, (byte)0);
      ArrayUtils.clone((byte[]) null);
      ArrayUtils.subarray((Object[]) doubleArray1, 83, (-42));
      ArrayUtils.addAll((byte[]) null, (byte[]) null);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-125);
      ArrayUtils.lastIndexOf(byteArray0, (byte) (-57), (-1816));
      ArrayUtils.removeElement(byteArray0, (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Integer integer0 = new Integer(1940);
      ArrayUtils.isSameType(integer0, integer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.lastIndexOf(byteArray0, (byte)90);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)90;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)90;
      doubleArray0[4] = (double) 1940;
      ArrayUtils.lastIndexOf(doubleArray0, (-1233.590533), 395, 90.0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)63;
      doubleArray0[3] = (-2372.0);
      ArrayUtils.subarray((boolean[]) null, 1856, (-1270));
      Object object0 = new Object();
      ArrayUtils.lastIndexOf((Object[]) null, object0, 2318);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)63;
      intArray0[1] = 2318;
      intArray0[2] = (int) (byte)63;
      intArray0[3] = (-18046);
      intArray0[4] = 1856;
      ArrayUtils.isSameLength(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = 'f';
      charArray0[1] = 'z';
      charArray0[2] = 'f';
      ArrayUtils.isNotEmpty(charArray0);
      Long long0 = new Long((byte)1);
      Long long1 = new Long((byte)1);
      Long long2 = new Long((byte)1);
      ArrayUtils.subarray((float[]) null, (int) (byte)38, 1336);
      ArrayUtils.lastIndexOf(charArray0, 'L');
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.toObject(booleanArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)38;
      doubleArray0[1] = (double) 'L';
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 'z';
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      ArrayUtils.add(booleanArray0, true);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int[] intArray0 = new int[8];
      ArrayUtils.nullToEmpty(intArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = 91.0F;
      ArrayUtils.reverse(intArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = Long.getLong((String) null, (-487L));
      longArray0[0] = long0;
      Long long1 = new Long(1L);
      longArray0[1] = long1;
      char[] charArray0 = new char[5];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      ArrayUtils.isNotEmpty(charArray0);
      Long long2 = new Long((long) longArray0[0]);
      Long long3 = new Long((-2451L));
      Long long4 = new Long((long) longArray0[0]);
      ArrayUtils.subarray((float[]) null, 1336, (int) (byte)38);
      ArrayUtils.lastIndexOf(charArray0, 'f');
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.toObject(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ArrayUtils.isEmpty((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      ArrayUtils.isNotEmpty(longArray0);
      Double double0 = new Double(0L);
      Double double1 = new Double(908.9682328);
      Double double2 = new Double(1707.8);
      Double double3 = new Double((-348.0));
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      ArrayUtils.addAll(floatArray0, floatArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      ArrayUtils.indexOf((Object[]) doubleArray1, (Object) "$^At$b~dZi)$3Bzn", (-2282));
      Byte byte0 = new Byte((byte)10);
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte0;
      ArrayUtils.nullToEmpty(byteArray0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "$^At$b~dZi)$3Bzn";
      stringArray0[1] = "$^At$b~dZi)$3Bzn";
      stringArray0[2] = "$^At$b~dZi)$3Bzn";
      stringArray0[3] = "$^At$b~dZi)$3Bzn";
      stringArray0[4] = "$^At$b~dZi)$3Bzn";
      ArrayUtils.subarray(stringArray0, (-1), (-2282));
      Boolean[] booleanArray0 = new Boolean[0];
      ArrayUtils.toPrimitive(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      ArrayUtils.isSameLength(byteArray0, byteArray0);
      ArrayUtils.isEmpty(byteArray0);
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)67;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      shortArray0[4] = (short) (byte)1;
      shortArray0[5] = (short) (byte)1;
      ArrayUtils.isEmpty(shortArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 'W';
      doubleArray0[3] = (double) (byte)67;
      doubleArray0[4] = (double) (short)1;
      doubleArray0[0] = (double) (short)1;
      ArrayUtils.indexOf(doubleArray0, (-2938.53451807), (int) (short)1, 324.03990697);
      ArrayUtils.reverse(byteArray0);
      Float float0 = new Float((float) (byte)40);
      ArrayUtils.toPrimitive((Float[]) null, (float) (-1));
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (byte)0;
      ArrayUtils.isEmpty(intArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-203);
      shortArray0[1] = (short)3807;
      ArrayUtils.isEmpty(shortArray0);
      ArrayUtils.isSameLength(shortArray0, shortArray0);
      ArrayUtils.isEmpty(shortArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-203);
      floatArray0[1] = (float) (short)3807;
      floatArray0[2] = (float) (short)3807;
      ArrayUtils.addAll(floatArray0, floatArray0);
      ArrayUtils.nullToEmpty((Float[]) null);
      Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Long long0 = new Long(0);
      Long long1 = new Long(3237L);
      Long.getLong("java.util.prefs.PreferencesFactory", (long) 0);
      Short short0 = new Short((short)2);
      Short short1 = new Short((short)0);
      Short[] shortArray0 = new Short[5];
      shortArray0[0] = short0;
      Short short2 = new Short((short)2);
      shortArray0[1] = short2;
      shortArray0[2] = short1;
      Short short3 = new Short((short) (-803));
      shortArray0[3] = short3;
      shortArray0[4] = short1;
      ArrayUtils.toPrimitive(shortArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)80;
      ArrayUtils.indexOf(byteArray0, (byte)46, (-4490));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)111;
      double[] doubleArray0 = new double[0];
      ArrayUtils.lastIndexOf(doubleArray0, (-1811.556094666811), (double) (byte) (-101));
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)59;
      shortArray0[1] = (short) (byte)59;
      ArrayUtils.isNotEmpty(shortArray0);
      Integer integer0 = new Integer((byte)111);
      Integer integer1 = new Integer((byte) (-101));
      Integer integer2 = new Integer((-1100));
      Integer integer3 = new Integer((byte) (-101));
      Integer integer4 = new Integer((byte)111);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)59;
      floatArray0[1] = (float) (byte)59;
      floatArray0[2] = (float) (byte) (-101);
      floatArray0[3] = (float) (byte)111;
      floatArray0[4] = (float) (byte) (-101);
      floatArray0[5] = (float) (byte)59;
      floatArray0[6] = (float) (byte)111;
      floatArray0[7] = (float) (-1);
      ArrayUtils.nullToEmpty(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object object0 = new Object();
      ArrayUtils.toString(object0, "k@}W3!4");
      ArrayUtils.indexOf((short[]) null, (short)0, (int) (short)0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      ArrayUtils.nullToEmpty(charArray0);
      int int0 = new Short((short)0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 'n';
      ArrayUtils.contains(objectArray0, (Object) "java.lang.Object@2d655b02");
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = new Boolean((String) null);
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      booleanArray0[1] = boolean1;
      Short short0 = new Short((short)36);
      Short short1 = new Short((short) (-1799));
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      ArrayUtils.nullToEmpty(shortArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = (-1);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-722.93F);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (-771.3557F);
      ArrayUtils.removeElement(floatArray0, (float) (byte)67);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-119);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-2742);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-119);
      longArray0[0] = 1L;
      longArray0[3] = (-4140L);
      longArray0[4] = (-4140L);
      longArray0[5] = (long) (short)0;
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      ArrayUtils.nullToEmpty(longArray1);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.toObject(longArray0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short) (-119);
      floatArray0[2] = (float) (-119L);
      floatArray0[3] = (float) (short) (-119);
      floatArray0[4] = (float) (short) (-2742);
      floatArray0[5] = (float) (short) (-2742);
      floatArray0[6] = (float) (short)0;
      ArrayUtils.lastIndexOf(floatArray0, (float) (short) (-119), (int) (short)0);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short) (-2742);
      intArray0[2] = (int) (short) (-2742);
      ArrayUtils.clone(intArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-76);
      ArrayUtils.isNotEmpty(byteArray0);
      Short short0 = new Short((short)5422);
      Short.toUnsignedLong((short)2882);
      ArrayUtils.isSameLength((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      ArrayUtils.isSameLength(floatArray0, floatArray0);
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1L));
      Object object0 = new Object();
      Object object1 = new Object();
      ArrayUtils.isSameType(object1, "");
      ArrayUtils.addAll(longArray0, longArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = (-2372.0);
      ArrayUtils.contains(doubleArray0, (-1846.2294000000002), 929.99);
      Integer integer0 = new Integer(2146710398);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ArrayUtils.isEmpty((long[]) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2250L;
      doubleArray0[1] = (double) 2250L;
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (-1922.052520159);
      doubleArray0[4] = (double) 2250L;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 2250.0;
      objectArray0[1] = (Object) (-1922.052520159);
      objectArray0[2] = (Object) 2250.0;
      ArrayUtils.isEmpty(objectArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      ArrayUtils.addAll((Object[]) longArray0, (Object[]) null);
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = new Integer[1];
      Integer integer0 = new Integer((-630));
      Integer.max(3095, 19593);
      Integer.toUnsignedLong(2709);
      integerArray1[0] = integer0;
      ArrayUtils.addAll(integerArray0, integerArray1);
      int[] intArray0 = new int[0];
      ArrayUtils.isSameLength(intArray0, (int[]) null);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      ArrayUtils.add(charArray0, '?');
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '?';
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-3574), 2123688815);
      ArrayUtils.reverse(byteArray1);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '?';
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) '?';
      ArrayUtils.lastIndexOf(floatArray0, 74.0F, 2146649025);
      ArrayUtils.lastIndexOf(byteArray1, (byte)1, (int) (byte)16);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 36;
      Object[] objectArray0 = new Object[0];
      ArrayUtils.toMap(objectArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      ArrayUtils.addAll(doubleArray0, (double[]) null);
      Object object0 = new Object();
      ArrayUtils.addAll(objectArray0, objectArray0);
      ArrayUtils.nullToEmpty((float[]) null);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 36;
      ArrayUtils.isSameLength(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = new short[2];
      shortArray1[1] = (short) (-1585);
      ArrayUtils.isSameLength(shortArray0, shortArray1);
      ArrayUtils.isEmpty(shortArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2393.39585);
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll(doubleArray0, doubleArray0);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      ArrayUtils.toMap(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      ArrayUtils.addAll((Object[]) arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Object[]) arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-76);
      byteArray0[3] = (byte) (-1);
      ArrayUtils.lastIndexOf(byteArray0, (byte) (-76), 1050);
      short[] shortArray0 = new short[0];
      ArrayUtils.isNotEmpty(shortArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-76), 1);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("java.compiler", "java.compiler");
      Map.Entry.comparingByValue();
      abstractMap_SimpleEntry0.setValue("Cannot store ");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<String, String>("%snsTmt)&!O`Y-\rq", "java.compiler");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<String, String>("[T:H", "java.lang.String");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry4 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleEntry3);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry5 = new AbstractMap.SimpleEntry<String, String>("[T:H", "[T:H");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("java.lang.Object", "java.lang.String");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry6 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleEntry2);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry7 = new AbstractMap.SimpleEntry<String, String>("java.compiler", "&p^3wa@)1f*\"");
      AbstractMap.SimpleEntry<String, String>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<String, String>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 1);
      ArrayUtils.isNotEmpty(abstractMap_SimpleEntryArray0);
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      ArrayUtils.nullToEmpty((Character[]) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Object object0 = new Object();
      String string0 = "jdox.cfFH<\\";
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) longArray0, (Object) "jdox.cfFH<");
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.String
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      Object object0 = new Object();
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-2300));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2300, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[18];
      ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      ArrayUtils.contains(booleanArray0, true);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.addAll(booleanArray0, booleanArray0);
      ArrayUtils.isNotEmpty((int[]) null);
      ArrayUtils.getLength((Object) null);
      ArrayUtils.lastIndexOf((float[]) null, (float) (-1683L));
      Character character0 = new Character('1');
      Character character1 = new Character('1');
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1683L);
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = 'p';
      charArray0[2] = '$';
      charArray0[3] = '?';
      ArrayUtils.reverse(charArray0);
      ArrayUtils.isSameLength(charArray0, charArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'f';
      charArray0[1] = 'z';
      charArray0[2] = 'Q';
      ArrayUtils.isNotEmpty(charArray0);
      Long long0 = new Long((byte)1);
      Long long1 = new Long((byte)1);
      Long long2 = new Long((byte)1);
      ArrayUtils.subarray((float[]) null, (int) (byte)38, 1336);
      ArrayUtils.lastIndexOf(charArray0, 'L');
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.toObject(booleanArray0);
      ArrayUtils.isNotEmpty((float[]) null);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Character character0 = new Character('Z');
      ArrayUtils.subarray((long[]) null, (-4541), (int) (short) (-1));
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1374);
      shortArray0[1] = (short) (-1);
      shortArray0[3] = (short) (-2437);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)2796;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short) (-1);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1302), 81);
      ArrayUtils.reverse(shortArray1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      ArrayUtils.isEmpty((short[]) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[^d]";
      stringArray0[1] = "java.lang.Object";
      ArrayUtils.subarray(stringArray0, (-1088), 1588);
      ArrayUtils.isSameLength(byteArray0, byteArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)36;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)36;
      longArray0[1] = (long) (short)36;
      longArray0[2] = (long) (short)36;
      longArray0[3] = (long) 86;
      longArray0[4] = (long) (short)36;
      longArray0[5] = (long) 3;
      longArray0[7] = (-3210L);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short)36, (int) (short)36);
      ArrayUtils.subarray(shortArray0, (-2710), 2372);
      ArrayUtils.isNotEmpty(longArray1);
      ArrayUtils.isSameLength((Object[]) shortArray1, (Object[]) null);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(shortArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '36', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ArrayUtils.isSameLength((char[]) null, (char[]) null);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1585);
      shortArray0[1] = (short)1011;
      shortArray0[2] = (short)1011;
      shortArray0[3] = (short) (-1585);
      shortArray0[4] = (short)1011;
      shortArray0[5] = (short) (-1585);
      shortArray0[6] = (short)1011;
      shortArray0[7] = (short) (-1585);
      shortArray0[8] = (short) (-1585);
      ArrayUtils.contains((short[]) null, (short) (-1585));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-1585);
      doubleArray0[1] = (double) (short) (-1585);
      doubleArray0[2] = (double) (short)1011;
      doubleArray0[3] = (double) (short) (-1585);
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = 'z';
      charArray0[2] = 'Q';
      charArray0[3] = 'Q';
      ArrayUtils.isNotEmpty(charArray0);
      Long long0 = new Long(762L);
      Long long1 = new Long(762L);
      Long long2 = new Long((-78L));
      ArrayUtils.toPrimitive((Long[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-113);
      ArrayUtils.isSameLength(charArray0, charArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      short[] shortArray0 = new short[18];
      short[] shortArray1 = new short[1];
      ArrayUtils.isSameLength(shortArray0, shortArray1);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)56;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)56;
      intArray0[1] = (int) (byte)56;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)54;
      intArray0[4] = (int) (byte)54;
      ArrayUtils.isSameLength(intArray0, intArray0);
      int int0 = new Short((byte)54);
      Double double0 = new Double(273.0);
      Double double1 = new Double(273.0);
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      ArrayUtils.subarray(intArray0, 3036, (short)54);
      ArrayUtils.subarray(doubleArray1, 48, 56);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Short short0 = new Short((short)46);
      ArrayUtils.toPrimitive((Short[]) null, (short)46);
      ArrayUtils.isSameLength((long[]) null, (long[]) null);
      ArrayUtils.addAll((short[]) null, (short[]) null);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)46;
      doubleArray0[1] = (double) (short)46;
      doubleArray0[2] = (double) (short)46;
      doubleArray0[3] = (double) (short)46;
      doubleArray0[4] = (double) (short)46;
      doubleArray0[5] = (double) (short)46;
      doubleArray0[6] = (double) (short)46;
      doubleArray0[7] = (double) (short)46;
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[0];
      ArrayUtils.addAll(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.isSameLength(longArray0, longArray0);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      ArrayUtils.lastIndexOf(objectArray0, (Object) "java.lang.Boolean", 2907);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      short[] shortArray0 = new short[6];
      ArrayUtils.isSameLength(shortArray0, shortArray0);
      Object object0 = new Object();
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      Short[] shortArray1 = new Short[7];
      shortArray1[0] = short1;
      Short short2 = new Short((short)57);
      shortArray1[1] = short2;
      shortArray1[2] = short1;
      shortArray1[3] = short1;
      shortArray1[4] = short1;
      Short.compare(short0, (short)2137);
      shortArray1[5] = short1;
      shortArray1[6] = short1;
      ArrayUtils.toPrimitive(shortArray1);
      Short.toUnsignedInt(short0);
      ArrayUtils.isSameLength((long[]) null, (long[]) null);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) short0;
      longArray0[2] = (long) short0;
      ArrayUtils.isSameLength(longArray0, (long[]) null);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) short0;
      ArrayUtils.addAll(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ArrayUtils.isEmpty((byte[]) null);
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      ArrayUtils.isSameLength(charArray0, (char[]) null);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.subarray(booleanArray0, 2, 1507);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)1435;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-2530);
      shortArray0[5] = (short)898;
      shortArray0[6] = (short)699;
      shortArray0[7] = (short) (-1);
      shortArray0[8] = (short)1351;
      ArrayUtils.add(shortArray0, (short)1351);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short) (-2530);
      floatArray0[1] = (float) (short)0;
      ArrayUtils.contains((byte[]) null, (byte) (-110));
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (byte)2;
      intArray0[4] = (int) (short) (-1);
      intArray0[5] = (int) (short)1351;
      ArrayUtils.clone(intArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      ArrayUtils.addAll((float[]) null, floatArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      ArrayUtils.nullToEmpty(longArray0);
      double[] doubleArray0 = new double[0];
      ArrayUtils.lastIndexOf(doubleArray0, (double) 0L, (-3750));
      ArrayUtils.isSameLength((double[]) null, (double[]) null);
      ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 985.0;
      doubleArray0[1] = (-1037.66879);
      doubleArray0[2] = (-3517.4);
      doubleArray0[3] = (-2807.945224686);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1003.8351709170593);
      ArrayUtils.removeElement(doubleArray0, 0.0);
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 3959;
      intArray0[1] = 2145862404;
      intArray0[2] = (-724);
      intArray0[3] = 64;
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = (-1901);
      intArray0[6] = (-619);
      ArrayUtils.add(intArray0, 0, 54);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1L);
      ArrayUtils.lastIndexOf(longArray0, 273L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)28;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (byte)111, (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 111, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.toObject(intArray0);
      Object object0 = new Object();
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 1958);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1958, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = 78.52672F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      ArrayUtils.reverse((boolean[]) null);
      ArrayUtils.isSameLength(floatArray0, floatArray1);
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      charArray0[1] = 'Q';
      charArray0[2] = 'L';
      charArray0[3] = '(';
      charArray0[4] = 'W';
      charArray0[5] = 'O';
      charArray0[6] = '[';
      charArray0[7] = '|';
      ArrayUtils.isSameLength(charArray0, charArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 9L;
      longArray0[2] = 9L;
      short[] shortArray0 = new short[0];
      ArrayUtils.add(shortArray0, (short) (-1));
      float[] floatArray0 = new float[0];
      ArrayUtils.subarray(floatArray0, 828, (-3442));
      ArrayUtils.lastIndexOf((char[]) null, '9');
      ArrayUtils.toObject((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short)1);
      shortArray0[1] = short0;
      Short short1 = new Short((short)573);
      shortArray0[2] = short1;
      Short short2 = new Short((short)573);
      shortArray0[3] = short2;
      short short3 = (short)57;
      Short short4 = new Short((short)57);
      shortArray0[4] = short4;
      Short short5 = new Short(short3);
      shortArray0[5] = short5;
      Short short6 = new Short(short3);
      shortArray0[6] = short6;
      ArrayUtils.nullToEmpty(shortArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)1;
      ArrayUtils.isSameLength(byteArray0, (byte[]) null);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long[] longArray0 = new long[0];
      Short.toUnsignedInt((short)100);
      ArrayUtils.isSameLength(longArray0, (long[]) null);
      ArrayUtils.isSameLength(longArray0, longArray0);
      ArrayUtils.isSameLength((long[]) null, longArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayUtils.isNotEmpty(longArray0);
      ArrayUtils.isSameLength((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) '}';
      doubleArray0[1] = (double) (-964L);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (-2697L);
      doubleArray0[5] = (double) 0L;
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1942), 3719);
      ArrayUtils.reverse(byteArray1);
      ArrayUtils.lastIndexOf(byteArray1, (byte)0, (int) (byte)0);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      char[] charArray0 = new char[9];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = '}';
      ArrayUtils.subarray(byteArray1, 1, 486);
      ArrayUtils.reverse(byteArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-1942);
      ArrayUtils.lastIndexOf(intArray0, 486, (int) (byte)0);
      ArrayUtils.lastIndexOf(longArray1, (long) (-1942), (-1012));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.lastIndexOf(booleanArray0, true, (-1295));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Character.valueOf('Z');
      ArrayUtils.isEmpty((long[]) null);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2;
      shortArray0[0] = (short)17;
      shortArray0[2] = (short) (-1087);
      shortArray0[3] = (short) (-639);
      shortArray0[4] = (short) (-1);
      ArrayUtils.isEmpty(shortArray0);
      String[] stringArray0 = new String[0];
      ArrayUtils.nullToEmpty(stringArray0);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'Z';
      longArray0[1] = (long) (short) (-1);
      longArray0[2] = (long) (short) (-639);
      longArray0[3] = (long) (short) (-639);
      longArray0[4] = (-1933L);
      longArray0[5] = 2378L;
      ArrayUtils.subarray(longArray0, 4402, (-2265));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (-1683L);
      longArray0[2] = 2379L;
      longArray0[3] = (-1683L);
      longArray0[4] = 641L;
      longArray0[5] = (long) (short) (-1);
      ArrayUtils.subarray(longArray0, (-4541), 1);
      ArrayUtils.subarray(shortArray0, (int) (short) (-1), (int) (short)0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Character character0 = new Character('Z');
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      Character.toChars(0, charArray0, 0);
      int[] intArray0 = new int[27];
      intArray0[0] = (-1173);
      intArray0[1] = (-1173);
      intArray0[2] = 2105;
      intArray0[3] = 0;
      intArray0[4] = (-1173);
      intArray0[5] = 1;
      intArray0[6] = (-1173);
      intArray0[7] = 2105;
      ArrayUtils.remove(intArray0, 1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Short.compare((short)643, (short)3321);
      Short short0 = new Short((short) (-1304));
      Short.compare((short)2310, (short) (-1740));
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short0;
      ArrayUtils.toPrimitive(shortArray0, (short) (-1304));
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 4050;
      longArray0[1] = (long) (-2678);
      longArray0[2] = 1L;
      ArrayUtils.clone(longArray0);
      ArrayUtils.reverse(longArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      ArrayUtils.lastIndexOf(doubleArray0, 0.0, 2144256582);
      ArrayUtils.isSameLength((double[]) null, (double[]) null);
      ArrayUtils.isNotEmpty(doubleArray0);
      ArrayUtils.addAll(intArray0, intArray0);
      Float float0 = new Float((-1.0));
      ArrayUtils.nullToEmpty((Float[]) null);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[2] = false;
      ArrayUtils.remove(booleanArray0, 1);
      char[] charArray2 = new char[7];
      boolean boolean0 = new Boolean(false);
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3735);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(3735);
      integerArray0[2] = integer2;
      Integer.valueOf(89);
      Integer integer3 = new Integer(1);
      Integer integer4 = new Integer(0);
      integerArray0[5] = integer4;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 0.0;
      long[] longArray0 = new long[4];
      longArray0[0] = 1472L;
      longArray0[1] = (-1L);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 78, 3719);
      ArrayUtils.reverse(byteArray1);
      int int0 = new Byte((byte)1);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      ArrayUtils.nullToEmpty((short[]) null);
      Character[] characterArray0 = new Character[0];
      ArrayUtils.toPrimitive(characterArray0, '\"');
      ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      int[] intArray0 = new int[8];
      intArray0[0] = 78;
      intArray0[1] = 3719;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (int) (byte)1;
      intArray0[4] = (byte)1;
      intArray0[5] = (-1651);
      intArray0[6] = (int) '\"';
      intArray0[7] = (int) (byte)1;
      ArrayUtils.isSameLength(intArray0, intArray0);
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      ArrayUtils.lastIndexOf(longArray1, 1472L, 1);
      Byte[] byteArray2 = new Byte[5];
      Byte byte0 = new Byte((byte)121);
      byteArray2[0] = byte0;
      Byte byte1 = new Byte((byte)38);
      byteArray2[1] = byte1;
      Byte byte2 = new Byte((byte)2);
      byteArray2[2] = byte2;
      Byte byte3 = new Byte((byte)2);
      byteArray2[3] = byte3;
      Byte byte4 = new Byte((byte) (-8));
      byteArray2[4] = byte4;
      ArrayUtils.toPrimitive(byteArray2);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = (float) 'J';
      floatArray0[3] = (float) 828;
      floatArray0[4] = (float) '2';
      ArrayUtils.subarray(floatArray0, (-3442), (-3442));
      ArrayUtils.lastIndexOf((char[]) null, 'm');
      ArrayUtils.indexOf(floatArray0, (float) (-1), (-3442));
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-1));
      doubleArray0[0] = double0;
      Double double1 = new Double(1.5);
      doubleArray0[1] = double1;
      Double double2 = new Double((-801.3240896146333));
      doubleArray0[2] = double2;
      doubleArray0[3] = double0;
      ArrayUtils.toPrimitive(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1.0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      short[] shortArray0 = new short[15];
      shortArray0[0] = (short)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)2;
      shortArray0[7] = (short) (byte)0;
      ArrayUtils.addAll(shortArray0, shortArray0);
      ArrayUtils.subarray(byteArray0, (int) (byte)0, (int) (short)0);
      int[] intArray0 = new int[0];
      ArrayUtils.isEmpty(intArray0);
      ArrayUtils.isSameLength(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 46, 'K');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 46, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 36;
      Object[] objectArray0 = new Object[0];
      ArrayUtils.toMap(objectArray0);
      ArrayUtils.isSameLength((double[]) null, (double[]) null);
      ArrayUtils.addAll((double[]) null, (double[]) null);
      Object object0 = new Object();
      Object object1 = new Object();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object object0 = new Object();
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = (-1447);
      ArrayUtils.indexOf(intArray0, 2, (-1447));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = 'z';
      charArray0[2] = 'Q';
      charArray0[3] = 'Q';
      ArrayUtils.isNotEmpty(charArray0);
      Long long0 = new Long(762L);
      Long long1 = new Long(762L);
      Long long2 = new Long((-78L));
      ArrayUtils.toPrimitive((Long[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-110);
      Byte byte0 = new Byte((byte)0);
      Byte[] byteArray1 = new Byte[0];
      ArrayUtils.toPrimitive(byteArray1, (byte)0);
      ArrayUtils.clone(byteArray0);
      ArrayUtils.subarray((Object[]) null, (int) 0, (int)  (-110));
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)115;
      ArrayUtils.isSameLength(floatArray0, floatArray0);
      ArrayUtils.nullToEmpty((String[]) null);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 930.2796911592287;
      doubleArray0[1] = 930.2796911592287;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.remove(booleanArray0, 0);
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = (Double) 930.2796911592287;
      doubleArray1[1] = (Double) 0.0;
      ArrayUtils.nullToEmpty(doubleArray1);
      ArrayUtils.isSameLength((Object[]) doubleArray1, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ArrayUtils.addAll((char[]) null, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ArrayUtils.isEmpty((double[]) null);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = 'f';
      charArray0[1] = 'z';
      charArray0[2] = 'f';
      ArrayUtils.isNotEmpty(charArray0);
      Long long0 = new Long((byte) (-15));
      Long long1 = new Long((byte) (-15));
      Long long2 = new Long((byte) (-15));
      ArrayUtils.subarray((float[]) null, (int) (byte)38, 1336);
      ArrayUtils.lastIndexOf(charArray0, 'L');
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.toObject(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Character character0 = new Character('Z');
      Long long0 = new Long(1246L);
      Long long1 = new Long(0);
      Long[] longArray0 = new Long[0];
      ArrayUtils.toPrimitive(longArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-1333L);
      longArray0[1] = (-154L);
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = (-964L);
      longArray0[5] = (-2697L);
      ArrayUtils.isNotEmpty(longArray0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[3] = (float) (-154L);
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) (-154L);
      floatArray0[6] = (float) (-964L);
      floatArray0[7] = (float) 0L;
      ArrayUtils.isSameLength(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0.0F;
      ArrayUtils.lastIndexOf(doubleArray0, (-1170.902035), (-1719.317489));
      Double[] doubleArray1 = new Double[5];
      doubleArray1[1] = (Double) 0.0;
      Double double0 = new Double(0L);
      doubleArray1[1] = double0;
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = (Double) 0.0;
      doubleArray1[4] = (Double) 0.0;
      ArrayUtils.toPrimitive(doubleArray1, (-3775.6));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      ArrayUtils.isSameLength((Object[]) null, objectArray0);
      ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (-2164.052F);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      Long[] longArray0 = new Long[9];
      long long0 = 81L;
      Long long1 = new Long(81L);
      longArray0[0] = long1;
      Long long2 = new Long(long0);
      longArray0[1] = long2;
      Object object0 = new Object();
      ArrayUtils.indexOf(floatArray1, (float) 81L);
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      ArrayUtils.indexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true, (-1));
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ArrayUtils.isNotEmpty((double[]) null);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.isSameLength(shortArray0, (short[]) null);
      int[] intArray0 = new int[7];
      intArray0[0] = 1383;
      intArray0[1] = (-496);
      intArray0[2] = 1050;
      intArray0[3] = (-1912);
      intArray0[4] = 1717;
      intArray0[5] = 356;
      intArray0[6] = Integer.MAX_VALUE;
      ArrayUtils.isSameLength(intArray0, intArray0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) Integer.MAX_VALUE;
      objectArray0[1] = (Object) 1717;
      objectArray0[2] = (Object) Integer.MAX_VALUE;
      objectArray0[3] = (Object) 1383;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) 1050;
      objectArray0[6] = (Object) Integer.MAX_VALUE;
      objectArray0[7] = (Object) 1383;
      ArrayUtils.addAll((Object[]) null, objectArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      ArrayUtils.nullToEmpty(longArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = 29;
      intArray0[1] = 0;
      intArray0[2] = 0;
      ArrayUtils.subarray(intArray0, 0, 0);
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      ArrayUtils.reverse(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.isSameLength(byteArray0, byteArray0);
      ArrayUtils.isEmpty(byteArray0);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)67;
      shortArray0[1] = (short) (byte)67;
      shortArray0[2] = (short) (byte)67;
      ArrayUtils.isEmpty(shortArray0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = ',';
      ArrayUtils.isSameLength(charArray0, charArray0);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.subarray(booleanArray0, (int) (short)67, (int) (short)67);
      ArrayUtils.indexOf(byteArray0, (byte) (-118));
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-118);
      intArray0[1] = (int) 'W';
      intArray0[2] = (int) (byte) (-118);
      intArray0[3] = (int) (short)67;
      ArrayUtils.contains(intArray0, (-118));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Short.compare((short) (-4475), (short) (-1740));
      Short[] shortArray0 = new Short[0];
      ArrayUtils.toObject((float[]) null);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ArrayUtils.isSameLength((double[]) null, (double[]) null);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      objectArray0[6] = object1;
      ArrayUtils.lastIndexOf(objectArray0, (Object) null, 1);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'java.lang.Object@50cb40db', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.toObject(intArray0);
      Object object0 = new Object();
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = '$';
      ArrayUtils.toObject(charArray0);
      ArrayUtils.lastIndexOf(charArray0, '$', (-1046));
      ArrayUtils.isEmpty(charArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "'(8u|ZcQ6V~";
      stringArray0[1] = "";
      stringArray0[2] = "java.lang.Integer";
      ArrayUtils.add(stringArray0, "java.lang.Integer");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'S';
      charArray0[1] = '8';
      charArray0[2] = '6';
      charArray0[3] = 'S';
      charArray0[4] = 'y';
      Boolean boolean0 = new Boolean(false);
      Integer integer0 = new Integer('8');
      Integer integer1 = new Integer(3735);
      Integer integer2 = new Integer(3735);
      Integer.valueOf(2);
      Integer integer3 = new Integer(1770);
      Integer integer4 = new Integer((-993));
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer1;
      ArrayUtils.toPrimitive(integerArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1214.98368);
      doubleArray0[2] = 3015.3;
      int int0 = new Integer(825);
      ArrayUtils.clone((long[]) null);
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      ArrayUtils.isNotEmpty((long[]) null);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Object object0 = new Object();
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '';
      ArrayUtils.contains((int[]) null, (int) '');
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ArrayUtils.nullToEmpty((Float[]) null);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('Z');
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      characterArray0[0] = character0;
      Character character1 = new Character('Z');
      ArrayUtils.toPrimitive(characterArray0, '5');
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.isNotEmpty(charArray0);
      Object object0 = new Object();
      Integer integer0 = new Integer((-324));
      ArrayUtils.isSameLength((int[]) null, (int[]) null);
      ArrayUtils.indexOf((int[]) null, (-324), 2774);
      try { 
        Integer.parseUnsignedInt("java.lang.Double");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Double\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)1);
      Short.toUnsignedLong((short)1);
      Short.compare((short)1, (short)1);
      shortArray0[0] = short0;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)1;
      floatArray0[1] = (float) (short)1;
      floatArray0[2] = 316.06F;
      floatArray0[3] = 2928.174F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) (short)1;
      ArrayUtils.isSameLength(floatArray0, (float[]) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2928.174F;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1078);
      doubleArray0[3] = (double) (-1078);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1L;
      ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      Float float0 = new Float((-390.45068115744));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int[] intArray0 = new int[18];
      ArrayUtils.nullToEmpty(intArray0);
      ArrayUtils.isNotEmpty((byte[]) null);
      ArrayUtils.isSameLength((char[]) null, (char[]) null);
      Object object0 = new Object();
      Integer integer0 = new Integer((byte)67);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) integer0;
      ArrayUtils.lastIndexOf(objectArray0, objectArray0[2], (-1585));
      ArrayUtils.isSameLength(objectArray0, objectArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '67', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (-126L);
      longArray0[2] = (-1336L);
      longArray0[3] = (-154L);
      longArray0[4] = 0L;
      longArray0[5] = (-1L);
      longArray0[6] = 1579L;
      longArray0[7] = 3782L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      ArrayUtils.indexOf(longArray1, (-1L));
      int[] intArray0 = new int[2];
      intArray0[0] = 5;
      intArray0[1] = 5;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) integerArray0, (Object) "$IFUWA.>l");
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.String
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      short short0 = (short)1;
      Short short1 = new Short((short)1);
      Short.compare((short)1, (short)1);
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      shortArray0[1] = short2;
      ArrayUtils.toPrimitive(shortArray0);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[3] = false;
      ArrayUtils.addAll(booleanArray0, (boolean[]) null);
      ArrayUtils.isNotEmpty((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.reverse(booleanArray0);
      Float float0 = new Float(0.0);
      Float[] floatArray0 = new Float[1];
      Float.max(1233.0F, 1233.0F);
      floatArray0[0] = float0;
      ArrayUtils.nullToEmpty(floatArray0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 930.2796911592287;
      doubleArray0[1] = 930.2796911592287;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      Integer integer0 = new Integer(49);
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(integer0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = (-1);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 0;
      ArrayUtils.isSameLength(floatArray0, floatArray0);
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1L));
      Object object0 = new Object();
      Object object1 = new Object();
      Integer integer0 = new Integer((-1));
      Integer.divideUnsigned(0, (-1401));
      Integer.remainderUnsigned(0, 46);
      ArrayUtils.isSameType("java.lang.String", integer0);
      ArrayUtils.addAll(longArray0, (long[]) null);
      ArrayUtils.contains(intArray0, (-1206));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1.0F);
      ArrayUtils.removeElement(doubleArray0, (-89.0));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      ArrayUtils.nullToEmpty(floatArray0);
      ArrayUtils.reverse((int[]) null);
      float[] floatArray1 = new float[6];
      floatArray1[2] = 547.105F;
      floatArray1[3] = 2286.3472F;
      floatArray1[4] = 1587.3745F;
      floatArray1[5] = (-2909.15F);
      ArrayUtils.addAll(floatArray1, floatArray1);
      double[] doubleArray0 = new double[1];
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.isSameLength(booleanArray0, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-1L);
      longArray0[1] = 1L;
      longArray0[2] = 844L;
      longArray0[3] = 671L;
      longArray0[4] = (-2536L);
      longArray0[5] = 414L;
      longArray0[6] = 0L;
      longArray0[7] = (-78L);
      ArrayUtils.lastIndexOf(longArray0, 0L);
      short[] shortArray0 = new short[0];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1L);
      ArrayUtils.indexOf(doubleArray0, 0.0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 414L;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) 671L;
      floatArray0[3] = (-594.0F);
      ArrayUtils.add(floatArray0, (float) 844L);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)699;
      ArrayUtils.add(shortArray0, (short) (-651));
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) (short) (-1);
      floatArray0[2] = (float) (short)1351;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)1351;
      floatArray0[5] = (float) (short)898;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (-1.0F);
      floatArray0[8] = (float) (short)898;
      ArrayUtils.subarray(floatArray0, (int) (short)1, 7);
      ArrayUtils.lastIndexOf((char[]) null, 'J');
      ArrayUtils.toObject(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.isSameLength(shortArray0, (short[]) null);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (-2164.052F);
      ArrayUtils.nullToEmpty(floatArray0);
      Long[] longArray0 = new Long[9];
      char[] charArray0 = new char[2];
      charArray0[0] = 'Z';
      charArray0[1] = '%';
      ArrayUtils.isNotEmpty(charArray0);
      Long long0 = new Long(1379L);
      long long1 = (-3133L);
      Long long2 = new Long((-3133L));
      Long long3 = new Long(1379L);
      ArrayUtils.subarray(floatArray0, 1336, 1336);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ArrayUtils.isEmpty((byte[]) null);
      ArrayUtils.add((String[]) null, 0, "");
      ArrayUtils.toMap((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = (-1);
      intArray1[3] = 0;
      intArray1[4] = 0;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)205;
      shortArray0[1] = (short) (-1732);
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = '\u0010';
      ArrayUtils.indexOf(charArray0, '4');
      ArrayUtils.toObject(charArray0);
      ArrayUtils.nullToEmpty(intArray1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) '\u0010';
      doubleArray0[2] = (double) '4';
      doubleArray0[3] = (double) (short) (-1732);
      ArrayUtils.indexOf(doubleArray0, 1169.0706, (int) (short) (-1732), 3015.3);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) '\u0010';
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (short)205;
      longArray0[5] = (-2501L);
      longArray0[6] = (long) (-1);
      longArray0[7] = (-728L);
      ArrayUtils.clone(longArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2393.39585);
      doubleArray0[1] = (-552.3181116);
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = (-1409);
      Short[] shortArray0 = new Short[0];
      ArrayUtils.toPrimitive(shortArray0);
      ArrayUtils.isSameLength((long[]) null, (long[]) null);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      ArrayUtils.addAll(doubleArray0, doubleArray0);
      char[] charArray0 = new char[11];
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3203.0);
      doubleArray0[1] = (-1922.052520159);
      doubleArray0[2] = (-2697.0);
      ArrayUtils.indexOf(doubleArray0, (-3203.0), 3787);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Short short0 = new Short((short)46);
      ArrayUtils.toPrimitive((Short[]) null);
      ArrayUtils.isSameLength((long[]) null, (long[]) null);
      ArrayUtils.addAll((short[]) null, (short[]) null);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int[] intArray0 = new int[15];
      ArrayUtils.isNotEmpty(intArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Character character0 = new Character('Z');
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'Z';
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) 'Z';
      doubleArray0[3] = (double) 'Z';
      doubleArray0[3] = (double) 0;
      ArrayUtils.lastIndexOf(doubleArray0, 1.0, 0, 90.0);
      ArrayUtils.nullToEmpty(charArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'Z';
      intArray0[1] = (int) 'Z';
      intArray0[2] = 0;
      intArray0[3] = (int) 'Z';
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      ArrayUtils.nullToEmpty(intArray0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.removeElement(booleanArray0, true);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      ArrayUtils.isSameLength((Object[]) byteArray0, (Object[]) byteArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      Float float0 = new Float((-1.0F));
      Float float1 = new Float((double) (-1131));
      Float[] floatArray0 = new Float[7];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float1;
      floatArray0[4] = float1;
      floatArray0[5] = float1;
      floatArray0[6] = float0;
      ArrayUtils.toPrimitive(floatArray0);
      ArrayUtils.lastIndexOf((short[]) null, (short)647);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Byte[] byteArray0 = new Byte[20];
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      short short0 = (short)1;
      Short short1 = new Short((short)1);
      Short.compare((short)1, (short)1);
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      shortArray0[1] = short2;
      ArrayUtils.toPrimitive(shortArray0);
      ArrayUtils.lastIndexOf((Object[]) shortArray0, (Object) short0, 3971);
      ArrayUtils.add((Object[]) shortArray0, (Object) short2);
      ArrayUtils.indexOf((Object[]) shortArray0, (Object) short0, (int) short0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      ArrayUtils.isSameLength(byteArray0, byteArray0);
      ArrayUtils.isEmpty(byteArray0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      ArrayUtils.indexOf(objectArray0, (Object) "1NO4&&cx^KBj", 1306);
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.valueOf("1NO4&&cx^KBj");
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf((boolean) boolean1);
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf((boolean) boolean1);
      booleanArray0[3] = boolean3;
      ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ArrayUtils.isEmpty((byte[]) null);
      char[] charArray0 = new char[7];
      ArrayUtils.isSameLength((char[]) null, charArray0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Short short0 = new Short((short)1);
      Short.toUnsignedLong((short) (-1792));
      Short.compare((short)1, (short)1);
      ArrayUtils.isSameLength((float[]) null, (float[]) null);
      ArrayUtils.subarray((long[]) null, 2140960478, (int) (short) (-1792));
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)186;
      shortArray0[1] = (short)186;
      shortArray0[2] = (short) (-1792);
      shortArray0[3] = (short)186;
      shortArray0[4] = (short) (-1792);
      shortArray0[5] = (short)186;
      shortArray0[6] = (short)186;
      ArrayUtils.subarray(shortArray0, 5, 724);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-1L);
      longArray0[1] = 1224L;
      longArray0[2] = 122L;
      longArray0[3] = 2473L;
      longArray0[4] = 462L;
      longArray0[5] = (-2608L);
      longArray0[6] = (-1240L);
      longArray0[7] = 1914L;
      ArrayUtils.lastIndexOf(longArray0, (-1240L), 99);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      char[] charArray0 = new char[6];
      charArray0[0] = '-';
      charArray0[1] = 'G';
      ArrayUtils.subarray(charArray0, (-3357), 181);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-3);
      shortArray0[1] = (short)512;
      ArrayUtils.clone(shortArray0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      long[] longArray0 = new long[4];
      longArray0[0] = 1472L;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 78, 3719);
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.FALSE;
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("{}");
      booleanArray0[1] = boolean1;
      Boolean.compare((boolean) boolean0, (boolean) boolean0);
      booleanArray0[2] = boolean0;
      ArrayUtils.nullToEmpty(booleanArray0);
      ArrayUtils.isEmpty(byteArray1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2393.39585);
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll(doubleArray0, doubleArray0);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      ArrayUtils.addAll(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      ArrayUtils.nullToEmpty((Double[]) null);
      ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false, (-1));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ArrayUtils.isEmpty((char[]) null);
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-3862.8381806123175);
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      ArrayUtils.subarray((byte[]) null, (-1540), 78);
      ArrayUtils.reverse((byte[]) null);
      ArrayUtils.lastIndexOf((byte[]) null, (byte)1, 78);
      ArrayUtils.nullToEmpty((long[]) null);
      ArrayUtils.nullToEmpty((short[]) null);
      char char0 = '+';
      Character[] characterArray0 = new Character[3];
      Character character0 = Character.valueOf('+');
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      characterArray0[1] = character1;
      Character character2 = new Character('F');
      characterArray0[2] = character2;
      ArrayUtils.toPrimitive(characterArray0, char0);
      ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2027.269277598819);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1481.124;
      doubleArray0[3] = (-2455.876467084);
      doubleArray0[4] = 100.0;
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.isNotEmpty(booleanArray0);
      Short[] shortArray0 = new Short[3];
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      shortArray0[0] = short1;
      Short short2 = new Short((short) (-262));
      Short.compare(short0, short0);
      shortArray0[1] = short2;
      Short short3 = new Short((short) (-262));
      Short.compare((short) (-262), (short)2187);
      shortArray0[2] = short3;
      ArrayUtils.toPrimitive(shortArray0);
      ArrayUtils.toObject((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.toMap(objectArray0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Character character0 = new Character('Z');
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.isNotEmpty(booleanArray0);
      ArrayUtils.clone((boolean[]) null);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'Z';
      ArrayUtils.isNotEmpty((boolean[]) null);
      ArrayUtils.subarray(intArray0, 0, 56);
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.removeElement(arrayUtils0.EMPTY_CHAR_ARRAY, 'Z');
      ArrayUtils.removeElement((Object[]) arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, (Object) "java.lang.Integer");
      ArrayUtils.toString((Object) null);
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1019;
      short[] shortArray1 = new short[5];
      shortArray1[0] = (short)1019;
      ArrayUtils.isSameLength(shortArray0, shortArray1);
      Long long0 = new Long(1050L);
      Long long1 = new Long((short)1019);
      Long[] longArray0 = new Long[4];
      longArray0[0] = long1;
      longArray0[1] = long1;
      longArray0[2] = long1;
      longArray0[3] = long0;
      Long.getLong(".v^wHqT9|&g}iUC[", 273L);
      ArrayUtils.toPrimitive(longArray0, (-2140L));
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)1019;
      intArray0[1] = (int) (short)1019;
      intArray0[2] = (int) (short)1019;
      intArray0[3] = (int) (short)1019;
      intArray0[4] = (int) (short)1019;
      intArray0[5] = (int) (short)1019;
      intArray0[6] = 0;
      ArrayUtils.isSameLength(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 273L;
      doubleArray0[1] = (double) (short)1019;
      doubleArray0[2] = (double) 1019;
      doubleArray0[3] = (double) (short)1019;
      ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      // Undeclared exception!
      try { 
        ArrayUtils.add((String[]) null, 1019, "java.lang.String");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1019, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Short.compare((short)37, (short)64);
      Short short0 = new Short((short)10349);
      Short.compare((short)37, (short)37);
      float[] floatArray0 = new float[0];
      ArrayUtils.contains(floatArray0, (float) (short)10349);
      ArrayUtils.indexOf(floatArray0, (float) (-27));
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.add(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-13));
      ArrayUtils.add(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-29));
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_CHAR_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.nullToEmpty(intArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = 91.0F;
      int[] intArray1 = new int[5];
      intArray1[1] = 323;
      ArrayUtils.clone(intArray1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-709.46018184027);
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = 'k';
      charArray0[2] = 'H';
      charArray0[3] = '~';
      ArrayUtils.addAll(charArray0, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-709.46018184027);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1018.9);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      ArrayUtils.add(intArray0, 2145416113);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Object object0 = new Object();
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      ArrayUtils.nullToEmpty(charArray0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 'n';
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = new Boolean("k@}W3!4");
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("k@}W3!4");
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf(true);
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean("&=JOa/CN4`sz-,DJZ");
      booleanArray0[4] = boolean4;
      ArrayUtils.toPrimitive(booleanArray0);
      ArrayUtils.addAll(objectArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 1);
      double[] doubleArray0 = new double[20];
      ArrayUtils.lastIndexOf(doubleArray0, (double) 1, 1);
      ArrayUtils.lastIndexOf(booleanArray0, false, (-1));
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      ArrayUtils.isSameLength(objectArray0, objectArray0);
      Character[] characterArray0 = new Character[2];
      char char0 = 'z';
      Character character0 = Character.valueOf('z');
      characterArray0[0] = character0;
      Character character1 = new Character('z');
      characterArray0[1] = character1;
      ArrayUtils.nullToEmpty(characterArray0);
      ArrayUtils.subarray(booleanArray1, (-1), (int) char0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-76);
      byteArray0[3] = (byte) (-1);
      ArrayUtils.lastIndexOf(byteArray0, (byte) (-76), 1050);
      short[] shortArray0 = new short[0];
      ArrayUtils.isNotEmpty(shortArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-76), 1);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("java.compiler", "java.compiler");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<String, String>("%snsTmt)&!O`Y-\rq", "java.compiler");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<String, String>("[T:H", "java.lang.String");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry4 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleEntry3);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry5 = new AbstractMap.SimpleEntry<String, String>("[T:H", "[T:H");
      ArrayUtils.nullToEmpty(shortArray0);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      ArrayUtils.nullToEmpty(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-771.3557F);
      floatArray0[1] = (-771.3557F);
      floatArray0[2] = (-722.93F);
      floatArray0[3] = (-771.3557F);
      floatArray0[4] = (-771.3557F);
      floatArray0[5] = (-1.3190058F);
      floatArray0[6] = (-1.3190058F);
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-64);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-64);
      byteArray1[1] = (byte)57;
      byteArray1[2] = (byte) (-64);
      byteArray1[3] = (byte) (-64);
      byteArray1[4] = (byte)61;
      byteArray1[5] = (byte) (-64);
      byteArray1[6] = (byte)57;
      byteArray1[7] = (byte) (-64);
      byteArray1[8] = (byte)57;
      ArrayUtils.removeElement(byteArray1, (byte)57);
      ArrayUtils.addAll((long[]) null, (long[]) null);
      Integer[] integerArray0 = new Integer[0];
      ArrayUtils.toPrimitive(integerArray0, (-28));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 930.2796911592287;
      doubleArray0[1] = 930.2796911592287;
      doubleArray0[3] = (double) 0;
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      ArrayUtils.addAll((Object[]) integerArray1, (Object[]) integerArray1);
      Double double0 = new Double(0.0);
      Double.valueOf((-697.0));
      Double double1 = new Double(0.0);
      Double double2 = new Double(40.0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) double0;
      ArrayUtils.isSameLength(objectArray0, (Object[]) integerArray1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte) (-1);
      ArrayUtils.lastIndexOf(byteArray0, (byte) (-76), 1050);
      short[] shortArray0 = new short[0];
      ArrayUtils.isNotEmpty(shortArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-86);
      ArrayUtils.addAll(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-76);
      floatArray0[1] = (float) (byte) (-51);
      floatArray0[2] = (float) (byte) (-51);
      ArrayUtils.contains(floatArray0, (float) (byte) (-51));
      ArrayUtils.toPrimitive((Long[]) null, 1940L);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ArrayUtils.toMap((Object[]) null);
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      ArrayUtils.subarray((short[]) null, (-2300), (-2300));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      charArray0[5] = 'f';
      charArray0[6] = 'f';
      ArrayUtils.isNotEmpty(charArray0);
      Long long0 = new Long(46L);
      Long long1 = new Long(46L);
      Long long2 = new Long(1L);
      ArrayUtils.subarray((float[]) null, 1336, (int) (byte)38);
      ArrayUtils.toMap((Object[]) null);
      Float float0 = new Float((float) (byte)1);
      Float.min((byte)38, (-54.0F));
      Float[] floatArray0 = new Float[4];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      ArrayUtils.toPrimitive(floatArray0);
      ArrayUtils.removeElement(charArray0, 'f');
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Long long0 = new Long((byte)48);
      Long long1 = new Long(3237L);
      Long.getLong("5oPPH", (long) (byte)48);
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (byte)48);
      int[] intArray0 = new int[0];
      ArrayUtils.isSameLength(intArray0, intArray0);
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      ArrayUtils.toObject(longArray1);
      ArrayUtils.toMap(stringArray0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.indexOf(booleanArray0, false, (int) (byte)48);
      ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      Object object0 = new Object();
      ArrayUtils.lastIndexOf((Object[]) stringArray0, object0, (-1));
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      short[] shortArray0 = new short[6];
      ArrayUtils.isSameLength(shortArray0, shortArray0);
      Object object0 = new Object();
      short[] shortArray1 = new short[0];
      ArrayUtils.isEmpty(shortArray1);
      ArrayUtils.isSameLength(shortArray0, shortArray0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      ArrayUtils.clone(doubleArray0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      charArray0[1] = 'D';
      charArray0[3] = 'y';
      charArray0[4] = 'y';
      ArrayUtils.indexOf(charArray0, 'c');
      ArrayUtils.toObject(charArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '\u0000';
      ArrayUtils.nullToEmpty(intArray0);
      ArrayUtils.indexOf(doubleArray0, (-1.0), 1484, (double) 0);
      ArrayUtils.clone((long[]) null);
      ArrayUtils.reverse((long[]) null);
      ArrayUtils.removeElement(charArray0, '/');
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.isSameLength(shortArray0, shortArray0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)63;
      ArrayUtils.reverse((Object[]) null);
      ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      ArrayUtils.isSameLength((double[]) null, (double[]) null);
      ArrayUtils.isNotEmpty((double[]) null);
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      ArrayUtils.isNotEmpty(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayUtils.isSameLength((double[]) null, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int[] intArray0 = null;
      ArrayUtils.getLength((Object) null);
      ArrayUtils.lastIndexOf((float[]) null, (float) (-1683L));
      Character.valueOf('1');
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[1] = true;
      booleanArray0[3] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 1020);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1020, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ArrayUtils.lastIndexOf(objectArray0, (Object) null, 923);
      Object object0 = new Object();
      ArrayUtils.indexOf(objectArray0, object0, 0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)59;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-101);
      shortArray0[1] = (short) (-1164);
      shortArray0[2] = (short) (byte)111;
      shortArray0[3] = (short) (byte)59;
      shortArray0[4] = (short) (byte) (-101);
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 23, (-1073741823));
      ArrayUtils.reverse(byteArray1);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-1164);
      floatArray0[1] = (float) (byte) (-101);
      floatArray0[2] = (float) (byte) (-101);
      ArrayUtils.lastIndexOf(floatArray0, (-1051.7F), (-125));
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-1164);
      longArray0[1] = (long) (-1540);
      longArray0[2] = (long) (byte)59;
      longArray0[3] = (long) (byte) (-101);
      longArray0[4] = (long) (byte)59;
      ArrayUtils.toObject(longArray0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      Float float1 = new Float((-89.0));
      ArrayUtils.toPrimitive(floatArray0, (-54.0F));
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.isNotEmpty(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ArrayUtils.isEmpty((char[]) null);
      double[] doubleArray0 = new double[0];
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      ArrayUtils.lastIndexOf((long[]) null, (long) (-1585), 2);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      char[] charArray0 = new char[1];
      Character.toChars(0, charArray0, 0);
      Character character0 = new Character('Z');
      int[] intArray0 = new int[4];
      intArray0[0] = (-258);
      intArray0[2] = 92;
      intArray0[3] = (int) '5';
      ArrayUtils.reverse(intArray0);
      Object[] objectArray0 = new Object[0];
      ArrayUtils.toMap(objectArray0);
      ArrayUtils.lastIndexOf(intArray0, 0, 1735);
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 53;
      integerArray0[1] = (Integer) 0;
      ArrayUtils.toPrimitive(integerArray0, 1073741824);
      ArrayUtils.lastIndexOf(charArray0, '5', 46);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ArrayUtils.toMap((Object[]) null);
      char[] charArray0 = new char[0];
      ArrayUtils.subarray(charArray0, 2146556009, 2146556009);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      ArrayUtils.clone(doubleArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-78);
      ArrayUtils.nullToEmpty(byteArray0);
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      int[] intArray0 = new int[0];
      ArrayUtils.removeElement(intArray0, 1);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-78);
      ArrayUtils.clone(longArray0);
      ArrayUtils.isEmpty(shortArray0);
      ArrayUtils.isSameLength((Object[]) shortArray1, (Object[]) shortArray1);
      ArrayUtils.add(byteArray0, (byte) (-77));
      Integer integer0 = new Integer((byte) (-78));
      Byte[] byteArray1 = new Byte[0];
      ArrayUtils.nullToEmpty(byteArray1);
      try { 
        Integer.parseUnsignedInt("lrt8IT");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"lrt8IT\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ArrayUtils.toMap((Object[]) null);
      double[] doubleArray0 = new double[8];
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], 3971);
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 574.4F;
      floatArray0[1] = 574.4F;
      floatArray0[2] = 574.4F;
      floatArray0[3] = 574.4F;
      floatArray0[4] = 574.4F;
      floatArray0[5] = (-2164.052F);
      floatArray0[6] = (-1.0F);
      floatArray0[7] = (-2164.052F);
      floatArray0[8] = (-2164.052F);
      ArrayUtils.nullToEmpty(floatArray0);
      Long long0 = new Long(81L);
      Long long1 = new Long(1L);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      ArrayUtils.toMap(objectArray0);
      Float float0 = new Float((-1070.7607F));
      ArrayUtils.toPrimitive((Float[]) null);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2393.39585);
      doubleArray0[1] = (-552.3181116);
      Double double0 = new Double((-552.3181116));
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      charArray0[1] = 'Q';
      ArrayUtils.toObject(charArray0);
      ArrayUtils.lastIndexOf(charArray0, ']', 2);
      ArrayUtils.isEmpty(charArray0);
      String[] stringArray0 = new String[0];
      ArrayUtils.add(stringArray0, "java.lang.Integer");
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ArrayUtils.addAll((Integer[]) null, (Integer[]) null);
      ArrayUtils.addAll((Object[]) null, (Object[]) null);
      Integer integer0 = new Integer(1364);
      ArrayUtils.isSameLength((float[]) null, (float[]) null);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Character character0 = new Character('Z');
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.isNotEmpty(booleanArray0);
      ArrayUtils.clone((boolean[]) null);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'Z';
      ArrayUtils.isNotEmpty((boolean[]) null);
      ArrayUtils.subarray(intArray0, 0, 56);
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.removeElement((Object[]) arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, (Object) "java.lang.Integer");
      ArrayUtils.toString((Object) null);
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      ArrayUtils.isNotEmpty(longArray0);
      ArrayUtils.isSameLength((float[]) null, (float[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-78);
      ArrayUtils.clone(byteArray0);
      short[] shortArray0 = new short[0];
      ArrayUtils.isNotEmpty(shortArray0);
      Integer integer0 = new Integer(48);
      Integer integer1 = new Integer((byte) (-78));
      Integer integer2 = new Integer(652);
      Integer integer3 = new Integer(2);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer2;
      integerArray0[1] = integer2;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      ArrayUtils.nullToEmpty(integerArray0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      ArrayUtils.isEmpty((byte[]) null);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)67;
      ArrayUtils.isEmpty(shortArray0);
      ArrayUtils.isEmpty((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      ArrayUtils.lastIndexOf((Object[]) shortArray0, (Object) null, (-1676));
      Object[] objectArray0 = ArrayUtils.add((Object[]) shortArray0, (Object) null);
      ArrayUtils.indexOf(objectArray0, (Object) "~", (-1));
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1676);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) (-1);
      ArrayUtils.addAll(floatArray0, (float[]) null);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      short short0 = (short)1;
      Short short1 = new Short((short)1);
      Short.compare((short)1, (short)64);
      shortArray0[0] = short1;
      short[] shortArray1 = new short[2];
      shortArray1[0] = (short)64;
      shortArray1[1] = short0;
      ArrayUtils.nullToEmpty(shortArray1);
      ArrayUtils.indexOf((boolean[]) null, false, 3);
      ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.indexOf(floatArray0, (-1221.283F), 1527);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      ArrayUtils.indexOf(longArray1, 64L);
      int[] intArray0 = new int[5];
      intArray0[0] = 1527;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) integerArray0, object0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Object
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = '\\';
      charArray0[2] = '1';
      charArray0[3] = 'j';
      charArray0[4] = 'c';
      charArray0[5] = ';';
      ArrayUtils.lastIndexOf(charArray0, 'y', 1338);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)36;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      long[] longArray0 = new long[8];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 929.99;
      ArrayUtils.contains(doubleArray0, (double) (short)36, (double) 86);
      ArrayUtils.reverse((Object[]) shortArray1);
      ArrayUtils.isSameLength(longArray0, longArray0);
      ArrayUtils.isSameType("+dgDUvp|Fn?N 4)r", "+dgDUvp|Fn?N 4)r");
      long[] longArray1 = new long[6];
      longArray1[0] = 0L;
      longArray1[1] = (long) 86;
      longArray1[2] = (long) 86;
      longArray1[3] = (long) 86;
      longArray1[4] = (long) (short)36;
      longArray1[5] = (long) (short)36;
      ArrayUtils.nullToEmpty(longArray1);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      ArrayUtils.lastIndexOf(booleanArray0, false, 86);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.isSameLength(byteArray0, byteArray0);
      ArrayUtils.isEmpty(byteArray0);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)67;
      shortArray0[1] = (short) (byte)67;
      shortArray0[2] = (short) (byte)67;
      ArrayUtils.isEmpty(shortArray0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = ',';
      ArrayUtils.isSameLength(charArray0, charArray0);
      ArrayUtils.isSameLength(shortArray0, shortArray0);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.subarray(booleanArray0, (int) (short)67, (int) (short)67);
      ArrayUtils.indexOf(byteArray0, (byte) (-118));
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-118);
      intArray0[1] = (int) 'W';
      intArray0[2] = (int) (byte) (-118);
      intArray0[3] = (int) (short)67;
      ArrayUtils.contains(intArray0, (-118));
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) ',';
      objectArray0[1] = (Object) 67;
      objectArray0[2] = (Object) (-118);
      ArrayUtils.indexOf(objectArray0, objectArray0[2], (-118));
      ArrayUtils.isSameLength(shortArray0, shortArray0);
      ArrayUtils.removeElement(booleanArray0, true);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 52.0F;
      floatArray0[1] = (-1190.8512F);
      ArrayUtils.isSameLength(floatArray0, floatArray0);
      char[] charArray0 = new char[0];
      ArrayUtils.isSameLength((char[]) null, charArray0);
      Object[] objectArray0 = new Object[0];
      Integer integer0 = new Integer(749);
      ArrayUtils.lastIndexOf(objectArray0, (Object) integer0, 749);
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean(true);
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("jIZ6*RFv\"d$CSQ");
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      booleanArray0[3] = boolean3;
      ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Character.valueOf('V');
      ArrayUtils.clone((boolean[]) null);
      ArrayUtils arrayUtils0 = new ArrayUtils();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-709.46018184027);
      doubleArray0[1] = 0.0;
      long[] longArray0 = new long[4];
      longArray0[0] = 1472L;
      longArray0[1] = (-1L);
      longArray0[2] = 0L;
      longArray0[3] = 1472L;
      ArrayUtils.lastIndexOf(doubleArray0, (-335.5646), (-1585));
      ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      ArrayUtils.add(stringArray0, (String) null);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1585);
      intArray0[2] = (-1);
      intArray0[3] = (-1585);
      intArray0[4] = (-1);
      intArray0[5] = (-1585);
      intArray0[6] = (-1585);
      intArray0[7] = (-1585);
      ArrayUtils.removeElement(intArray0, (-1585));
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ArrayUtils.lastIndexOf(objectArray0, (Object) null, 738);
      Object object0 = new Object();
      ArrayUtils.indexOf(objectArray0, (Object) null, 372);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[2] = false;
      ArrayUtils.remove(booleanArray0, 1);
      ArrayUtils.indexOf(charArray0, '4');
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = (-1);
      intArray0[4] = (int) '4';
      intArray0[5] = (-1);
      ArrayUtils.nullToEmpty(intArray0);
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      Float float0 = new Float((float) 1);
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      ArrayUtils.toPrimitive(floatArray0, (float) 1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Character character0 = new Character('Z');
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      Double double0 = new Double(0);
      Double double1 = new Double((-961.6670718));
      Double double2 = new Double((-348.0));
      ArrayUtils.toObject(charArray0);
      char[] charArray1 = new char[3];
      charArray1[0] = '1';
      charArray1[1] = 'Q';
      charArray1[2] = '1';
      ArrayUtils.lastIndexOf(charArray1, 'Z', 2145672664);
      ArrayUtils.isEmpty(charArray0);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) '1';
      longArray0[1] = 735L;
      longArray0[2] = (long) '1';
      longArray0[3] = (long) (-1);
      longArray0[4] = (-4061L);
      longArray0[5] = (long) 'Z';
      long[] longArray1 = new long[0];
      ArrayUtils.isSameLength(longArray0, longArray1);
      ArrayUtils.isSameType("#Mr\"c\"huW]k/|s8XL T", "G&2/sQW<$Ko");
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-3611);
      shortArray0[2] = (short)3360;
      shortArray0[3] = (short)1099;
      ArrayUtils.add(shortArray0, (short)3235);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      byteArray0[0] = byte1;
      Byte byte2 = Byte.valueOf(byte0);
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-28));
      byteArray0[3] = byte4;
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = '*';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      ArrayUtils.indexOf(charArray1, '<', 0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 0.0;
      long[] longArray0 = new long[4];
      longArray0[0] = 1472L;
      longArray0[1] = (-1L);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 78, 3719);
      ArrayUtils.reverse(byteArray1);
      ArrayUtils.lastIndexOf(byteArray0, (byte)1, (-1942));
      ArrayUtils.nullToEmpty(longArray0);
      ArrayUtils.nullToEmpty((short[]) null);
      Character[] characterArray0 = new Character[0];
      ArrayUtils.toPrimitive(characterArray0, '+');
      ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)36;
      ArrayUtils.toObject(shortArray0);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)36;
      longArray0[1] = (long) (short)36;
      longArray0[2] = (long) (short)36;
      longArray0[3] = (long) (-501);
      longArray0[4] = 3573L;
      longArray0[5] = (long) 3;
      longArray0[6] = (long) (-501);
      longArray0[7] = (-3210L);
      ArrayUtils.subarray(longArray0, (int) (short)36, (int) (short)36);
      ArrayUtils.subarray(shortArray0, (-2704), 2372);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      ArrayUtils.indexOf(objectArray0, object0, 0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)1;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (int) (byte)1;
      ArrayUtils.isSameLength(intArray0, intArray0);
      ArrayUtils.indexOf((long[]) null, (long) 1, 1);
      Double double0 = new Double(1);
      Double.isFinite(1);
      Double double1 = new Double(1);
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      ArrayUtils.nullToEmpty((char[]) null);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[2] = false;
      ArrayUtils.remove(booleanArray0, 1);
      ArrayUtils.indexOf(charArray0, '4');
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '4';
      doubleArray0[1] = (double) '4';
      int int0 = new Integer('4');
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      ArrayUtils.addAll((Object[]) doubleArray1, (Object[]) doubleArray1);
      Short[] shortArray0 = new Short[0];
      ArrayUtils.toPrimitive(shortArray0);
      ArrayUtils.toPrimitive(shortArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      Integer integer0 = new Integer(52);
      Integer integer1 = new Integer(1793);
      ArrayUtils.isSameType(integer1, integer1);
      ArrayUtils.reverse((Object[]) shortArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "%L;ee<'^fUjGe\"4 ";
      stringArray0[1] = "java.specification.vendor";
      ArrayUtils.nullToEmpty(charArray0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'S';
      charArray0[1] = '8';
      charArray0[2] = '6';
      ArrayUtils.lastIndexOf((char[]) null, 'm');
      ArrayUtils.toObject((boolean[]) null);
      Double double0 = new Double(1019.0);
      Double double1 = new Double((-1563.1528));
      Double double2 = new Double(4);
      Double double3 = new Double(4184.3706);
      ArrayUtils.toPrimitive((Double[]) null);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      ArrayUtils.indexOf(objectArray0, (Object) null, 0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      byteArray0[0] = byte1;
      Byte byte2 = Byte.valueOf(byte0);
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      byteArray0[2] = (Byte) byte0;
      Byte byte4 = new Byte((byte) (-28));
      ArrayUtils.toObject((long[]) null);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((-527L));
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (-2164.052F);
      ArrayUtils.nullToEmpty(floatArray0);
      Long[] longArray0 = new Long[9];
      long long0 = 81L;
      Long long1 = new Long(81L);
      longArray0[0] = long1;
      Long long2 = new Long(long0);
      longArray0[1] = long2;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '81', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = (float) 'J';
      floatArray0[3] = (float) 828;
      floatArray0[4] = (float) '2';
      ArrayUtils.subarray(floatArray0, (-3426), (-3426));
      ArrayUtils.lastIndexOf((char[]) null, 'm');
      ArrayUtils.indexOf(floatArray0, (float) (-1), (-3426));
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-1));
      doubleArray0[0] = double0;
      ArrayUtils.add((Object[]) doubleArray0, (Object) double0);
      ArrayUtils.nullToEmpty((double[]) null);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 828;
      longArray0[1] = (long) 'J';
      longArray0[2] = (long) '2';
      longArray0[3] = (long) 'm';
      longArray0[4] = (long) 'm';
      longArray0[5] = (long) 828;
      longArray0[6] = (long) 828;
      longArray0[7] = (long) 828;
      ArrayUtils.contains(longArray0, (long) 828);
      ArrayUtils.lastIndexOf(floatArray0, 828.0F, 828);
      ArrayUtils.toObject(longArray0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 36;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      ArrayUtils.addAll(doubleArray0, (double[]) null);
      Object object0 = new Object();
      ArrayUtils.isSameLength(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 510L;
      longArray0[2] = (-935L);
      ArrayUtils.add(longArray0, (-1L));
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.isNotEmpty(intArray0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)1;
      ArrayUtils.isSameLength(byteArray0, byteArray0);
      ArrayUtils.subarray((char[]) null, 2146556009, 2146556009);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean[] booleanArray0 = new boolean[6];
      boolean boolean0 = new Boolean(true);
      ArrayUtils.contains(booleanArray0, false);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)699;
      shortArray0[1] = (short)1351;
      shortArray0[1] = (short)2;
      ArrayUtils.add(shortArray0, (short) (-26));
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)898;
      floatArray0[1] = (float) (short)22;
      ArrayUtils.subarray(floatArray0, 974, 0);
      ArrayUtils.lastIndexOf((char[]) null, 'z');
      ArrayUtils.toObject(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayUtils.isNotEmpty(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Object object0 = new Object();
      ArrayUtils.toString(object0, "k@}W3!4");
      ArrayUtils.indexOf((short[]) null, (short)0, (int) (short)0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      ArrayUtils.nullToEmpty(charArray0);
      ArrayUtils.indexOf(charArray0, 'a', (-1));
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'S';
      charArray0[1] = '8';
      charArray0[2] = '6';
      charArray0[3] = 'Y';
      charArray0[4] = 'y';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      ArrayUtils.indexOf(charArray1, '_', 3562);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) '8';
      objectArray0[1] = (Object) 'y';
      ArrayUtils.contains(objectArray0, objectArray0[1]);
      Boolean boolean0 = new Boolean("^6%NHv+;8r!vj,?Hy");
      Boolean boolean1 = Boolean.TRUE;
      Boolean boolean2 = new Boolean((String) null);
      Boolean boolean3 = Boolean.valueOf(true);
      Boolean.valueOf(true);
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean3;
      booleanArray0[1] = boolean1;
      Boolean boolean4 = new Boolean("^6%NHv+;8r!vj,?Hy");
      booleanArray0[2] = boolean4;
      booleanArray0[3] = boolean2;
      booleanArray0[4] = boolean1;
      booleanArray0[5] = boolean3;
      ArrayUtils.toPrimitive(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-78);
      ArrayUtils.nullToEmpty(byteArray0);
      short[] shortArray0 = new short[0];
      ArrayUtils.addAll(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      Object object0 = new Object();
      ArrayUtils.contains(intArray0, 14);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      ArrayUtils.add(charArray0, '?');
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '?';
      ArrayUtils.contains(doubleArray0, 1534.44444790543, 63.0);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.remove(booleanArray0, 1);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 1, 547L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Double double0 = new Double((-552.3181116));
      char[] charArray0 = new char[0];
      ArrayUtils.toObject(charArray0);
      ArrayUtils.lastIndexOf(charArray0, ']', 57);
      ArrayUtils.isEmpty(charArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "java.lang.Integer";
      stringArray0[1] = "java.lang.Integer";
      ArrayUtils.add(stringArray0, "_d'(.kJj?w),t~3ob");
      ArrayUtils.lastIndexOf((long[]) null, (-3582L), 1811);
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float((-552.3181116));
      floatArray0[0] = float0;
      Float float1 = new Float(673.64905F);
      floatArray0[1] = float1;
      Float float2 = new Float(238.048F);
      floatArray0[2] = float2;
      Float float3 = new Float((float) 57);
      floatArray0[3] = float3;
      Float float4 = new Float((float) (-1));
      floatArray0[4] = float4;
      Float float5 = new Float((-3402.825F));
      floatArray0[5] = float5;
      ArrayUtils.nullToEmpty(floatArray0);
      Long[] longArray0 = new Long[1];
      Long.getLong("_.;=1%{CU*MQTZT_u_");
      longArray0[0] = null;
      ArrayUtils.nullToEmpty(longArray0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ArrayUtils.clone((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      Object object0 = new Object();
      ArrayUtils.toMap(floatArray1);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.isSameLength(booleanArray0, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ArrayUtils.indexOf((Object[]) null, (Object) null, (-2447));
      Object object0 = new Object();
      ArrayUtils.lastIndexOf((Object[]) null, object0, (-1));
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ArrayUtils.toMap((Object[]) null);
      short[] shortArray0 = new short[3];
      short short0 = (short)1011;
      shortArray0[1] = (short)1011;
      short short1 = (short) (-1585);
      shortArray0[2] = (short) (-1585);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short) (-1585);
      floatArray0[1] = (float) (short) (-1585);
      floatArray0[2] = (float) (short) (-1585);
      floatArray0[3] = (float) (short) (-1585);
      floatArray0[4] = (float) (short)1011;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      ArrayUtils.addAll(floatArray1, floatArray1);
      ArrayUtils.addAll((String[]) null, (String[]) null);
      // Undeclared exception!
      try { 
        ArrayUtils.add((String[]) null, (-1494), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = ',';
      charArray0[2] = '&';
      ArrayUtils.toObject(charArray0);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) '&';
      longArray0[1] = (long) ',';
      longArray0[2] = (-1240L);
      longArray0[3] = (long) '&';
      longArray0[4] = (long) '>';
      longArray0[5] = (long) '>';
      longArray0[6] = (-990L);
      longArray0[7] = (long) '&';
      longArray0[8] = 2314L;
      ArrayUtils.lastIndexOf(longArray0, (-1082L), 3079);
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double((-1));
      doubleArray0[0] = double0;
      Double double1 = new Double(2314L);
      doubleArray0[1] = double1;
      ArrayUtils.removeElement((Object[]) doubleArray0, (Object) double1);
      ArrayUtils.toString((Object) doubleArray0[1]);
      ArrayUtils.nullToEmpty(charArray0);
      float[] floatArray0 = new float[0];
      ArrayUtils.isNotEmpty(floatArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) ',';
      intArray0[1] = (int) '&';
      intArray0[2] = (int) '&';
      intArray0[3] = (int) '&';
      ArrayUtils.removeElement(intArray0, 3079);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      ArrayUtils.nullToEmpty(longArray0);
      ArrayUtils.isSameLength((char[]) null, (char[]) null);
      Object object0 = new Object();
      Integer integer0 = new Integer((-324));
      Integer.toUnsignedString(970);
      ArrayUtils.lastIndexOf((Object[]) longArray1, (Object) "/#DU", 2293);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      ArrayUtils.indexOf(booleanArray0, true, (int) integer0);
      ArrayUtils.isSameLength(booleanArray0, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Object object0 = new Object();
      ArrayUtils.toString(object0, "k@}W3!4");
      Byte byte0 = new Byte((byte)36);
      byte byte1 = (byte)37;
      Byte byte2 = new Byte((byte)37);
      Byte byte3 = new Byte((byte)37);
      Byte[] byteArray0 = new Byte[8];
      byteArray0[1] = byte3;
      byteArray0[2] = byte2;
      byteArray0[0] = byte2;
      byteArray0[4] = byte3;
      byteArray0[5] = byte2;
      Byte byte4 = new Byte(byte1);
      byteArray0[7] = byte4;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-24));
      ArrayUtils.clone(byteArray1);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "java.lang.Integer";
      stringArray0[2] = "java.lang.Integer";
      stringArray0[3] = "java.lang.Integer";
      // Undeclared exception!
      try { 
        ArrayUtils.add(stringArray0, (-1676), stringArray0[0]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1676, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayUtils.isEmpty(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1019;
      ArrayUtils.isSameLength(shortArray0, shortArray0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      ArrayUtils.toMap(objectArray0);
      Float float0 = new Float((-979.0572F));
      ArrayUtils.reverse(objectArray0);
      ArrayUtils.isSameLength((long[]) null, (long[]) null);
      ArrayUtils.isSameType(object0, "+dgDUvp|Fn?N 4)r");
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      ArrayUtils.indexOf(objectArray0, object8);
      Boolean[] booleanArray0 = new Boolean[0];
      ArrayUtils.nullToEmpty(booleanArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-97);
      ArrayUtils.add(byteArray0, (byte)0);
      ArrayUtils.reverse((char[]) null);
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1527));
      integerArray0[1] = integer1;
      Integer.getInteger(")^AbIgV1Y^J%1[");
      integerArray0[2] = null;
      Integer integer2 = new Integer((-1527));
      integerArray0[3] = integer2;
      ArrayUtils.toPrimitive(integerArray0, (int) (byte)31);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      int int0 = (-2494);
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, (-2494));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2494, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ArrayUtils.nullToEmpty((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.isSameLength((short[]) null, shortArray0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[2] = false;
      ArrayUtils.remove(booleanArray0, 1);
      ArrayUtils.indexOf(charArray0, '4');
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '4';
      doubleArray0[1] = (double) '4';
      Integer integer0 = new Integer('4');
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      ArrayUtils.addAll((Object[]) doubleArray1, (Object[]) doubleArray1);
      Short[] shortArray0 = new Short[0];
      ArrayUtils.toPrimitive(shortArray0);
      ArrayUtils.toPrimitive(shortArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      Integer integer1 = new Integer((int) integer0);
      Integer integer2 = new Integer(1793);
      ArrayUtils.isSameType(integer2, integer2);
      ArrayUtils.reverse((Object[]) shortArray0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = 353.149F;
      floatArray0[3] = (float) 1793;
      ArrayUtils.toObject(floatArray0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1019;
      ArrayUtils.isSameLength(shortArray0, shortArray0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      ArrayUtils.toMap(objectArray0);
      Float float0 = new Float((-979.0572F));
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = float0;
      Float float1 = new Float((double) floatArray0[0]);
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Character character0 = new Character('Z');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)57;
      ArrayUtils.isEmpty(byteArray0);
      ArrayUtils.isEmpty((short[]) null);
      ArrayUtils.isSameLength((char[]) null, (char[]) null);
      Long[] longArray0 = new Long[0];
      ArrayUtils.nullToEmpty(longArray0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Character character0 = new Character('Z');
      ArrayUtils.isEmpty((long[]) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2250L;
      doubleArray0[1] = (double) 2250L;
      doubleArray0[2] = (double) (-1L);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'Z';
      floatArray0[1] = (float) 'Z';
      floatArray0[2] = (float) 2250L;
      floatArray0[3] = (float) 'Z';
      ArrayUtils.isSameLength(floatArray0, floatArray0);
      ArrayUtils.lastIndexOf(doubleArray0, (-179.25), (double) 90.0F);
      Double double0 = new Double((-1.0));
      ArrayUtils.toPrimitive((Double[]) null, (double) 2250L);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = '?';
      ArrayUtils.isSameLength((char[]) null, charArray0);
      int[] intArray0 = new int[0];
      ArrayUtils.isNotEmpty(intArray0);
      ArrayUtils.isSameLength(intArray0, intArray0);
      ArrayUtils.toPrimitive((Boolean[]) null, false);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      short[] shortArray0 = new short[18];
      short[] shortArray1 = new short[1];
      shortArray1[0] = (short)1019;
      ArrayUtils.isSameLength(shortArray0, shortArray1);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-24);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 0, (byte)0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte) (-24);
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) (short)1019;
      floatArray0[4] = (float) (short)0;
      Byte byte0 = new Byte((byte)48);
      ArrayUtils.contains(byteArray1, (byte)48);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte) (-24);
      intArray0[2] = (int) (byte) (-24);
      intArray0[3] = (int) (byte)2;
      intArray0[4] = 837;
      intArray0[5] = 0;
      shortArray0[12] = (short) (byte)48;
      ArrayUtils.clone(intArray0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 1768L;
      longArray0[1] = (-1L);
      longArray0[3] = 2020L;
      longArray0[4] = 2676L;
      longArray0[5] = 507L;
      ArrayUtils.addAll(longArray0, longArray0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 507L;
      floatArray0[1] = (float) 1768L;
      floatArray0[2] = (float) (-2319L);
      floatArray0[3] = (-366.53717F);
      floatArray0[4] = (float) 1768L;
      floatArray0[5] = (float) 2020L;
      floatArray0[6] = (float) (-1L);
      floatArray0[7] = (float) (-1L);
      floatArray0[8] = (float) 1768L;
      ArrayUtils.isNotEmpty(floatArray0);
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)99;
      ArrayUtils.isNotEmpty(byteArray0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-709.46018184027);
      doubleArray0[1] = 0.0;
      Double double0 = new Double(2566.01629453);
      Double double1 = new Double(0.0);
      Double[] doubleArray1 = new Double[6];
      doubleArray1[0] = (Double) (-709.46018184027);
      doubleArray1[1] = double0;
      doubleArray1[2] = double0;
      doubleArray1[3] = (Double) 0.0;
      doubleArray1[4] = (Double) (-709.46018184027);
      doubleArray1[5] = double1;
      ArrayUtils.toPrimitive(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      long[] longArray0 = new long[6];
      Long long0 = new Long(1246L);
      Long long1 = new Long((-154L));
      Long[] longArray1 = new Long[2];
      Long long2 = new Long((-154L));
      longArray1[0] = long2;
      longArray1[1] = long1;
      ArrayUtils.toPrimitive(longArray1);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)111;
      double[] doubleArray0 = new double[0];
      ArrayUtils.lastIndexOf(doubleArray0, (-1811.556094666811), (-1.0));
      Double double0 = new Double((byte)59);
      Double double1 = new Double(48.0);
      Double[] doubleArray1 = new Double[0];
      ArrayUtils.toPrimitive(doubleArray1, (-1.0));
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.lastIndexOf(booleanArray0, true);
      ArrayUtils.indexOf(doubleArray0, 1.0, (double) (-1));
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-592.3F);
      floatArray0[1] = (float) (byte)59;
      floatArray0[2] = (float) (byte)111;
      ArrayUtils.toPrimitive(doubleArray1, (-90.0));
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)59;
      shortArray0[1] = (short) (byte)59;
      shortArray0[2] = (short) (byte)111;
      ArrayUtils.nullToEmpty(shortArray0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "8java.library.path";
      objectArray0[1] = (Object) "8java.library.path";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "8java.library.path";
      ArrayUtils.add(objectArray0, (Object) "bdO/Drj}6y3|d@GL3/");
      ArrayUtils.indexOf(objectArray0, object0, (-792));
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Integer integer0 = new Integer(14);
      ArrayUtils.add(objectArray0, 1, (Object) integer0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      ArrayUtils.isSameLength((Object[]) byteArray0, (Object[]) byteArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1862.711;
      doubleArray0[1] = 11.11972;
      doubleArray0[2] = 1566.7846541492818;
      doubleArray0[3] = 1.5;
      ArrayUtils.contains(doubleArray0, 11.11972, 1862.711);
      ArrayUtils.reverse((Object[]) byteArray0);
      ArrayUtils.add((String[]) null, "java.lang.Integer");
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      ArrayUtils.nullToEmpty((Float[]) null);
      ArrayUtils.isSameLength(booleanArray0, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Character character0 = new Character('Z');
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.isNotEmpty(booleanArray0);
      ArrayUtils.indexOf((float[]) null, (float) 'Z');
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      short short0 = (short)1;
      Short short1 = new Short((short)1);
      Short.compare((short)1, (short)1);
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      Object object0 = new Object();
      ArrayUtils.lastIndexOf((Object[]) shortArray0, object0, 160);
      ArrayUtils.indexOf((Object[]) shortArray0, (Object) short1, 2582);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.addAll(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      ArrayUtils.lastIndexOf((Object[]) shortArray0, (Object) null, (-1676));
      Object[] objectArray0 = ArrayUtils.add((Object[]) shortArray0, (Object) null);
      ArrayUtils.indexOf(objectArray0, (Object) "~", (-1));
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      ArrayUtils.nullToEmpty(longArray0);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.contains(booleanArray0, true);
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((-1221.282958984375));
      doubleArray0[0] = double0;
      Double double1 = new Double((-1221.282958984375));
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[0]);
      doubleArray0[3] = double3;
      Double double4 = new Double((-907.841555006));
      doubleArray0[4] = double4;
      ArrayUtils.toPrimitive(doubleArray0, (-106.76));
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (-126L);
      ArrayUtils.toObject(longArray0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1966.7314);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      String[] stringArray0 = new String[0];
      ArrayUtils.addAll(stringArray0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      ArrayUtils.addAll((Object[]) longArray0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      ArrayUtils.reverse(doubleArray0);
      Float float0 = new Float(0.0);
      Float float1 = new Float(1655.8664);
      Float float2 = new Float(1633.0F);
      Float float3 = new Float(1633.0F);
      Float float4 = new Float((-3320.305564403));
      Float float5 = new Float((double) (-653.6064F));
      Float float6 = new Float(443.67F);
      char[] charArray0 = new char[0];
      ArrayUtils.subarray(charArray0, 2, (-1));
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 482L;
      longArray0[1] = 0L;
      int[] intArray0 = new int[2];
      intArray0[0] = (-2145414120);
      intArray0[1] = (-2672);
      ArrayUtils.isSameLength(intArray0, intArray0);
      ArrayUtils.indexOf(longArray0, (long) (-2145414120), (-2672));
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "$IFUWA.>l";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "$IFUWA.>l";
      objectArray0[3] = (Object) (-2145414120);
      objectArray0[4] = (Object) 482L;
      Object object1 = new Object();
      objectArray0[5] = object1;
      Object object2 = new Object();
      objectArray0[6] = object2;
      ArrayUtils.add(objectArray0, objectArray0[2]);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[9];
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'i';
      longArray0[1] = 2314L;
      ArrayUtils.lastIndexOf(longArray0, (-990L), (-3695));
      Double double0 = new Double((-1240L));
      Double double1 = new Double((-1240L));
      Double double2 = new Double(2314L);
      ArrayUtils.reverse((char[]) null);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) double0;
      objectArray0[1] = (Object) 105L;
      Integer integer0 = new Integer((-3695));
      ArrayUtils.add(objectArray0, (Object) integer0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1019;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)1019;
      ArrayUtils.clone(doubleArray0);
      ArrayUtils.lastIndexOf(doubleArray0, (double) (short)1019, 6);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)10;
      longArray0[1] = (long) (short)1019;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 3237L);
      ArrayUtils.add(doubleArray0, (-2807.945224686));
      ArrayUtils.subarray(longArray1, (-114), 0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'i';
      charArray0[1] = 'R';
      charArray0[2] = 'o';
      charArray0[3] = ' ';
      charArray0[4] = 'k';
      charArray0[5] = 'J';
      charArray0[6] = ';';
      charArray0[7] = '4';
      charArray0[8] = 'X';
      ArrayUtils.isSameLength(charArray0, charArray0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      ArrayUtils.add(charArray0, '?');
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '?';
      boolean[] booleanArray0 = new boolean[4];
      ArrayUtils.remove(booleanArray0, 1);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)111;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.contains(booleanArray0, false);
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-101);
      doubleArray0[2] = (double) (byte) (-101);
      Integer integer0 = new Integer(277);
      ArrayUtils.nullToEmpty(integerArray0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      ArrayUtils.nullToEmpty((Boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      ArrayUtils.isEmpty((int[]) null);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '2';
      charArray0[2] = '}';
      charArray0[3] = 'z';
      charArray0[4] = 'Q';
      charArray0[5] = 'J';
      ArrayUtils.isNotEmpty(charArray0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = 'f';
      charArray0[1] = 'z';
      charArray0[2] = 'f';
      ArrayUtils.isNotEmpty(charArray0);
      Long long0 = new Long((byte)1);
      Long long1 = new Long((byte)1);
      Long long2 = new Long((byte)1);
      ArrayUtils.subarray((float[]) null, (int) (byte)38, 1336);
      ArrayUtils.toMap((Object[]) null);
      Float float0 = new Float(1542.543F);
      Float.min(1336, 504.0F);
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      ArrayUtils.toPrimitive(floatArray0);
      ArrayUtils.removeElement(charArray0, 'f');
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      ArrayUtils.toPrimitive((Integer[]) null, (-1948));
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayUtils.subarray(booleanArray0, 2, 2146710398);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Integer integer0 = new Integer(502);
      Integer.getInteger("java.library.path");
      ArrayUtils.toString((Object) integer0, "");
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      ArrayUtils.isSameLength(byteArray0, byteArray0);
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (byte)1;
      shortArray0[1] = (short) (-1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short) (-1);
      boolean boolean0 = new Boolean(true);
      ArrayUtils.subarray(doubleArray0, 1967, (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      ArrayUtils.isSameLength((short[]) null, (short[]) null);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (-2164.052F);
      ArrayUtils.nullToEmpty(floatArray0);
      Long[] longArray0 = new Long[9];
      Long long0 = new Long(81L);
      longArray0[0] = long0;
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 3;
      intArray0[7] = 0;
      ArrayUtils.subarray(intArray0, (-132), (-4893));
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      ArrayUtils.reverse(floatArray0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (byte)1;
      shortArray0[1] = (short) (-1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short) (-1);
      ArrayUtils.subarray(doubleArray0, (int) (short) (-1), (int) (byte)1);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (short) (-1);
      ArrayUtils.isSameLength(doubleArray1, doubleArray1);
      byte[] byteArray0 = new byte[0];
      ArrayUtils.isSameLength(byteArray0, byteArray0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[2] = false;
      ArrayUtils.remove(booleanArray0, 1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)40;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)1, 36);
      ArrayUtils.reverse(byteArray0);
      ArrayUtils.lastIndexOf(byteArray0, (byte) (-25), (int) (byte)0);
      ArrayUtils.subarray(byteArray0, (int) (byte)0, (-1624));
      ArrayUtils.reverse(byteArray1);
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)0;
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-325);
      intArray0[1] = (-325);
      intArray0[2] = (-325);
      intArray0[3] = (-325);
      intArray0[5] = 1108;
      intArray0[6] = (-325);
      ArrayUtils.isSameLength(intArray0, intArray0);
      AbstractMap.SimpleEntry<Object, Integer>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Object, Integer>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 4);
      Integer integer0 = new Integer((-325));
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>((Object) null, integer0);
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Integer>(abstractMap_SimpleEntry0);
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry1;
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Object, Integer>(abstractMap_SimpleEntry0, (Integer) (-325));
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry2;
      Integer integer1 = new Integer((-325));
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<Object, Integer>(abstractMap_SimpleEntry2, integer1);
      abstractMap_SimpleEntryArray0[3] = abstractMap_SimpleEntry3;
      AbstractMap.SimpleEntry<Object, Integer>[] abstractMap_SimpleEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray0);
      ArrayUtils.toMap(abstractMap_SimpleEntryArray1);
      ArrayUtils.isSameLength(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      ArrayUtils.nullToEmpty(longArray0);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("java.compiler", "java.lang.Object");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, String>("java.lang.Integer", "java.compiler");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<String, String>(".>Jje,,", "-$%YYi0##N");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleEntry2);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry4 = new AbstractMap.SimpleEntry<String, String>(", Length: ", "^Z&XO)ZK@.'+_/*%_");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("Q[>h*", "Ajy(fr8J9>fJ{");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry5 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleEntry3);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry6 = new AbstractMap.SimpleEntry<String, String>("Ajy(fr8J9>fJ{", "%snsTmt)&!O`Y-\rq");
      ArrayUtils.isNotEmpty((AbstractMap.SimpleEntry<String, String>[]) null);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Object object0 = new Object();
      short[] shortArray0 = new short[0];
      ArrayUtils.isSameType(object0, object0);
      ArrayUtils.isEquals(object0, object0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)1;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (int) (byte)1;
      ArrayUtils.isSameLength(intArray0, intArray0);
      ArrayUtils.indexOf((long[]) null, (long) 1, 1);
      Double double0 = new Double(1);
      Double double1 = new Double(1);
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      ArrayUtils.subarray(intArray0, 2145258828, 1);
      ArrayUtils.subarray(doubleArray1, (int) (byte)1, 1627);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.addAll(objectArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      ArrayUtils.isSameLength((Object[]) byteArray0, (Object[]) byteArray0);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.subarray(booleanArray0, (-1270), 1856);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      ArrayUtils.isSameLength((Object[]) byteArray0, (Object[]) byteArray0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)10;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (-1L);
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) (-1L);
      doubleArray2[1] = (double) (-1L);
      doubleArray2[2] = (double) 0L;
      doubleArray2[3] = 1.0;
      ArrayUtils.lastIndexOf(doubleArray2, (double) (byte)0, (int) (byte)0);
      ArrayUtils.removeElement(longArray0, (-1L));
      ArrayUtils.add(doubleArray1, 1.0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      short short0 = (short)1;
      Short short1 = new Short((short)1);
      Short.compare((short)1, (short)1);
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      shortArray0[1] = short2;
      String string0 = "java.lang.String";
      ArrayUtils.lastIndexOf((Object[]) shortArray0, (Object) "java.lang.String", 0);
      Object object0 = new Object();
      Short.compare((short)36, (short)1);
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) shortArray0, object0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Object
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      char[] charArray0 = new char[2];
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '\u0000';
      intArray0[4] = (-1425);
      ArrayUtils.indexOf(intArray0, (-1425), 0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      Object object0 = new Object();
      ArrayUtils.contains(intArray1, 2145142401);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      ArrayUtils.removeElement(doubleArray0, 0.0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      int[] intArray0 = new int[8];
      ArrayUtils.nullToEmpty(intArray0);
      ArrayUtils.nullToEmpty((Byte[]) null);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 482L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      short[] shortArray0 = new short[0];
      ArrayUtils.addAll(shortArray0, shortArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      ArrayUtils.subarray(byteArray0, (-799), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[4] = true;
      Short short0 = new Short((short)573);
      Short short1 = new Short((short)573);
      Short short2 = new Short((short)573);
      Short short3 = new Short((short)57);
      ArrayUtils.nullToEmpty((Short[]) null);
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((short) (-265));
      integerArray0[0] = integer0;
      Integer.max((-1031), (int) integerArray0[0]);
      Integer integer1 = new Integer((-3506));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((short)57);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(4963);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      integerArray0[4] = integer4;
      integerArray0[5] = integerArray0[3];
      ArrayUtils.isNotEmpty(integerArray0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ", Length: ";
      stringArray0[1] = "java.lang.Object";
      stringArray0[2] = "java.lang.Object";
      stringArray0[3] = "java.lang.Integer";
      stringArray0[4] = "org.apache.commons.lang3.builder.ToStringStyle$MultiLineToStringStyle";
      stringArray0[5] = "java.lang.Integer";
      ArrayUtils.nullToEmpty(stringArray0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)63;
      doubleArray0[3] = (-2372.0);
      ArrayUtils.contains(doubleArray0, (-1846.2294000000002), 929.99);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)63;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)40, (-545));
      ArrayUtils.reverse(byteArray0);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)48;
      byteArray2[1] = (byte) (-25);
      byteArray2[2] = (byte)40;
      byteArray2[3] = (byte)80;
      byteArray2[4] = (byte) (-25);
      byteArray2[5] = (byte)48;
      byteArray2[6] = (byte)48;
      ArrayUtils.lastIndexOf(byteArray2, (byte)48, 1);
      long[] longArray0 = new long[0];
      ArrayUtils.nullToEmpty(longArray0);
      byte[] byteArray3 = ArrayUtils.subarray(byteArray1, (int) (byte)48, (int) (byte)48);
      ArrayUtils.reverse(byteArray3);
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object[] objectArray0 = new Object[2];
      Object object5 = new Object();
      objectArray0[0] = object5;
      ArrayUtils.nullToEmpty(objectArray0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)1;
      ArrayUtils.isSameLength(byteArray0, byteArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)102;
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (byte)32;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = (double) (byte)1;
      doubleArray0[5] = (double) (byte) (-1);
      doubleArray0[6] = (-1846.2294000000002);
      ArrayUtils.indexOf(doubleArray0, (-1.0), (-3457));
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-1147));
      short[] shortArray0 = new short[0];
      ArrayUtils.addAll(shortArray0, shortArray0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Character character0 = new Character('Z');
      ArrayUtils.isEmpty((long[]) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2250L;
      doubleArray0[1] = (double) 2250L;
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (-1922.052520159);
      doubleArray0[4] = (double) 2250L;
      ArrayUtils.lastIndexOf(doubleArray0, 1335.4350871, 20);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)45;
      shortArray0[1] = (short)2906;
      shortArray0[2] = (short) (-2788);
      shortArray0[3] = (short) (-2171);
      ArrayUtils.contains(shortArray0, (short)2906);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.nullToEmpty(booleanArray0);
      ArrayUtils.clone(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)111;
      double[] doubleArray0 = new double[0];
      ArrayUtils.lastIndexOf(doubleArray0, (-1811.556094666811), (double) (byte) (-101));
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)59;
      shortArray0[1] = (short) (byte)59;
      ArrayUtils.isNotEmpty(shortArray0);
      Integer integer0 = new Integer((byte)111);
      Integer.valueOf((int) (byte) (-101));
      Integer integer1 = new Integer((-1100));
      Integer integer2 = new Integer((-2266));
      Integer integer3 = new Integer((byte)111);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.nullToEmpty(intArray0);
      float[] floatArray0 = new float[1];
      float[] floatArray1 = new float[1];
      floatArray1[0] = 91.0F;
      ArrayUtils.isSameLength(floatArray0, floatArray1);
      int[] intArray1 = new int[5];
      intArray1[1] = 323;
      ArrayUtils.clone(intArray1);
      Boolean[] booleanArray0 = new Boolean[0];
      ArrayUtils.toPrimitive(booleanArray0, true);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      char[] charArray0 = new char[3];
      ArrayUtils.isSameLength(charArray0, (char[]) null);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      ArrayUtils.isSameLength((double[]) null, (double[]) null);
      ArrayUtils.isNotEmpty((double[]) null);
      ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      ArrayUtils.isNotEmpty((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2393.39585);
      doubleArray0[1] = (-552.3181116);
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = (-1406);
      ArrayUtils.removeElement(doubleArray0, (double) 2);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ",";
      ArrayUtils.subarray(stringArray0, 2, (-1406));
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.isNotEmpty(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.isSameLength((double[]) null, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      ArrayUtils.isSameLength(byteArray0, byteArray0);
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = '\u0010';
      Short short0 = new Short((short) (-1));
      Short short1 = new Short((byte)1);
      Short short2 = new Short((short) (-294));
      Short short3 = new Short((byte)1);
      Short[] shortArray0 = new Short[0];
      ArrayUtils.nullToEmpty(shortArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 63.0;
      doubleArray0[1] = (double) 'D';
      ArrayUtils.reverse(doubleArray0);
      int[] intArray0 = new int[0];
      ArrayUtils.lastIndexOf(intArray0, (int) (short) (-1), (int) (short) (-1));
      Byte[] byteArray1 = new Byte[6];
      Byte byte0 = new Byte((byte)52);
      byteArray1[0] = byte0;
      byteArray1[1] = (Byte) (byte)1;
      byteArray1[2] = (Byte) (byte)1;
      byteArray1[3] = (Byte) (byte)1;
      byteArray1[4] = (Byte) (byte)1;
      byteArray1[5] = (Byte) (byte)1;
      ArrayUtils.toPrimitive(byteArray1);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      ArrayUtils.toMap((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[4] = 0;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)205;
      shortArray0[1] = (short) (-1732);
      Object object0 = new Object();
      Float float0 = new Float((float) 0);
      Float[] floatArray0 = new Float[0];
      ArrayUtils.toPrimitive(floatArray0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)48;
      doubleArray0[2] = (-2372.0);
      ArrayUtils.contains(doubleArray0, (-1846.2294000000002), 929.99);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      ArrayUtils.remove(booleanArray0, 1);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      Byte byte0 = new Byte((byte) (-1));
      float[] floatArray0 = new float[0];
      ArrayUtils.toObject(floatArray0);
      ArrayUtils.lastIndexOf((int[]) null, (int) (short) (-4475), (-2145726702));
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-709.46018184027);
      doubleArray0[1] = 0.0;
      long[] longArray0 = new long[4];
      longArray0[0] = 1472L;
      longArray0[1] = (-1L);
      longArray0[2] = 0L;
      longArray0[3] = 1472L;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-119), 48);
      ArrayUtils.reverse(byteArray1);
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.nullToEmpty(booleanArray0);
      long long0 = 701L;
      Long long1 = new Long(701L);
      long long2 = 0L;
      Long long3 = new Long((-2562L));
      Long long4 = new Long(459L);
      Long long5 = new Long(459L);
      try { 
        Long.valueOf("java.lang.String");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (-2164.052F);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      Long[] longArray0 = new Long[9];
      long long0 = 81L;
      Long long1 = new Long(81L);
      longArray0[0] = long1;
      Long long2 = new Long(long0);
      longArray0[1] = long2;
      Object object0 = new Object();
      ArrayUtils.indexOf(floatArray1, (float) 81L);
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short)0);
      ArrayUtils.toObject(arrayUtils0.EMPTY_CHAR_ARRAY);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1));
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2393.39585);
      doubleArray0[1] = (-552.3181116);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("ci", "java.compiler");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<String, String>("%snsTmt)&!O`Y-\rq", "java.lang.Integer");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<String, String>("java.lang.Object", "ci");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry4 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleEntry2);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry5 = new AbstractMap.SimpleEntry<String, String>(", Length: ", "ci");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("java.lang.String", "=");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry6 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleEntry1);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry7 = new AbstractMap.SimpleEntry<String, String>("ci", ",");
      AbstractMap.SimpleEntry<String, String>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<String, String>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 3);
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry4;
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry5;
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry4;
      ArrayUtils.isNotEmpty(abstractMap_SimpleEntryArray0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Long long0 = new Long(0);
      Long long1 = new Long(3237L);
      Long[] longArray0 = new Long[1];
      Long.getLong("java.util.prefs.PreferencesFactory", (long) 0);
      longArray0[0] = long1;
      ArrayUtils.toPrimitive(longArray0, (long) longArray0[0]);
      ArrayUtils.isSameLength(intArray0, intArray0);
      ArrayUtils.add((String[]) null, 0, "java.lang.String");
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.indexOf(booleanArray0, false, 0);
      ArrayUtils.isSameLength(booleanArray0, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)100;
      ArrayUtils.toString((Object) "k@}W3!4", "k@}W3!4");
      ArrayUtils.indexOf(shortArray0, (short)76, (-1345));
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      ArrayUtils.nullToEmpty(charArray0);
      ArrayUtils.indexOf(charArray0, 'V', (int) (short)76);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-709.46018184027);
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      ArrayUtils.subarray(longArray0, 3971, 234);
      short[] shortArray0 = new short[0];
      ArrayUtils.subarray(shortArray0, 3971, (-1));
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Byte byte0 = new Byte((byte)100);
      Byte[] byteArray0 = new Byte[0];
      ArrayUtils.toPrimitive(byteArray0, (byte)0);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)100;
      intArray0[2] = (int) (byte)100;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)100;
      intArray0[5] = (int) (byte)100;
      intArray0[6] = (int) (byte)100;
      intArray0[7] = (-584);
      intArray0[8] = (int) (byte)100;
      ArrayUtils.contains(intArray0, (-2706));
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 100;
      longArray0[1] = (long) 100;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = (long) 100;
      longArray0[6] = (long) 0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.isSameLength(byteArray0, (byte[]) null);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      ArrayUtils.toObject((char[]) null);
      ArrayUtils.lastIndexOf((char[]) null, 'V', (-1));
      ArrayUtils.isEmpty((char[]) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "->?q1heAy";
      stringArray0[1] = "drZJ^";
      stringArray0[2] = "D";
      stringArray0[3] = "!j@aT{DY7,*H3";
      stringArray0[4] = "";
      ArrayUtils.add(stringArray0, "->?q1heAy");
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      ArrayUtils.isNotEmpty((short[]) null);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      long[] longArray0 = new long[4];
      longArray0[0] = 1472L;
      longArray0[1] = (-1L);
      byte[] byteArray0 = new byte[0];
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.FALSE;
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("{}");
      booleanArray0[1] = boolean1;
      Boolean.compare((boolean) boolean0, (boolean) boolean0);
      Boolean boolean2 = Boolean.FALSE;
      booleanArray0[2] = boolean2;
      ArrayUtils.nullToEmpty(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      int[] intArray0 = new int[5];
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)27;
      byteArray1[1] = (byte)22;
      byteArray1[2] = (byte) (-84);
      byteArray1[3] = (byte) (-84);
      byteArray1[4] = (byte) (-84);
      byteArray1[5] = (byte)22;
      ArrayUtils.isSameLength(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      char[] charArray0 = new char[3];
      ArrayUtils.contains((char[]) null, 'S');
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String[] stringArray0 = new String[6];
      int[] intArray0 = new int[4];
      intArray0[0] = (-3436);
      intArray0[1] = 1736;
      intArray0[2] = 64;
      intArray0[3] = (-878);
      ArrayUtils.isSameLength(intArray0, intArray0);
      ArrayUtils.indexOf((long[]) null, (long) 1736, (-1984));
      ArrayUtils.add((Object[]) stringArray0, (Object) "$IFUWA.>l");
      double[] doubleArray0 = new double[0];
      ArrayUtils.addAll(doubleArray0, doubleArray0);
      ArrayUtils.contains((long[]) null, (long) 64);
      ArrayUtils.lastIndexOf(intArray0, (-1984), (-1327));
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)63;
      doubleArray0[3] = (-2372.0);
      ArrayUtils.contains(doubleArray0, (double) (byte)63, 929.99);
      ArrayUtils.addAll((short[]) null, (short[]) null);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = new boolean[0];
      ArrayUtils.isSameLength(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[2] = false;
      ArrayUtils.remove(booleanArray0, 1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-121);
      ArrayUtils.addAll(byteArray0, (byte[]) null);
      ArrayUtils.indexOf((double[]) null, 542.2784714532, (-1771));
      Float float0 = new Float((-1221.283F));
      Float float1 = new Float((float) (byte) (-112));
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-121);
      intArray0[1] = (-1);
      intArray0[2] = 1;
      ArrayUtils.addAll(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.isSameLength(objectArray0, objectArray0);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.subarray(booleanArray0, (-1), (-1270));
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      ArrayUtils.indexOf(charArray0, '?');
      Character[] characterArray0 = ArrayUtils.toObject(charArray1);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (int) 'y';
      intArray0[2] = (int) '?';
      intArray0[3] = (int) '4';
      intArray0[4] = (int) 'y';
      intArray0[5] = (int) '@';
      ArrayUtils.nullToEmpty(intArray0);
      ArrayUtils.lastIndexOf((double[]) null, (-283.39946137), (-2142));
      ArrayUtils.toObject((double[]) null);
      ArrayUtils.addAll((Object[]) characterArray0, (Object[]) null);
      ArrayUtils.isEmpty((int[]) null);
      ArrayUtils.toObject((double[]) null);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Object object0 = new Object();
      ArrayUtils.toString(object0, "k@}W3!4");
      Byte byte0 = new Byte((byte)36);
      byte byte1 = (byte)37;
      Byte byte2 = new Byte((byte)37);
      Byte byte3 = new Byte((byte)37);
      Byte[] byteArray0 = new Byte[8];
      byteArray0[1] = byte3;
      byteArray0[2] = byte2;
      byteArray0[0] = byte2;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) byte1;
      doubleArray0[1] = (double) byte1;
      doubleArray0[2] = (double) byte1;
      ArrayUtils.contains(doubleArray0, (double) byte1);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)48;
      doubleArray0[2] = (-2372.0);
      ArrayUtils.indexOf(doubleArray0, 1200.984716165372, 48);
      Float float0 = new Float(2833.64F);
      Float float1 = new Float(2833.64F);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)48;
      intArray0[1] = (-1);
      intArray0[2] = (int) (byte)48;
      intArray0[3] = 48;
      intArray0[4] = 5;
      intArray0[5] = (int) (byte)48;
      intArray0[6] = 3503;
      ArrayUtils.addAll(intArray0, (int[]) null);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      short short0 = (short)1;
      Short short1 = new Short((short)1);
      Short.compare((short)1, (short)1);
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      shortArray0[1] = short2;
      ArrayUtils.toPrimitive(shortArray0);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      ArrayUtils.isSameLength((long[]) null, longArray0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      ArrayUtils.contains((boolean[]) null, false);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.toObject(intArray0);
      Object object0 = new Object();
      Integer integer0 = new Integer(109);
      ArrayUtils.isSameType(object0, integer0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short) (-1685));
      shortArray0[0] = short0;
      Short short1 = new Short((short)1);
      shortArray0[1] = short1;
      Short short2 = new Short((short)573);
      shortArray0[2] = short2;
      Short short3 = new Short((short)573);
      Short.toUnsignedInt((short)1809);
      shortArray0[3] = short3;
      Short short4 = new Short((short)57);
      shortArray0[4] = short4;
      Boolean boolean0 = new Boolean("");
      Boolean.valueOf(true);
      Boolean boolean1 = new Boolean("&=JOa/CN4`sz-,DJZ");
      ArrayUtils.toPrimitive((Boolean[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)2;
      ArrayUtils.isNotEmpty(byteArray0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Short short0 = new Short((short)64);
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short0;
      ArrayUtils.toPrimitive(shortArray0);
      ArrayUtils.isSameLength((long[]) null, (long[]) null);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '*';
      char[] charArray1 = new char[10];
      charArray1[0] = '\'';
      ArrayUtils.isSameLength(charArray0, charArray1);
      Object object0 = new Object();
      Integer integer0 = new Integer((-324));
      Integer[] integerArray0 = new Integer[1];
      try { 
        Integer.decode("Array and element cannot both be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Array and element cannot both be null\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3436);
      intArray0[1] = 1736;
      intArray0[2] = 64;
      intArray0[3] = (-878);
      ArrayUtils.isSameLength(intArray0, intArray0);
      ArrayUtils.indexOf((long[]) null, (long) 1736, (-1984));
      double[] doubleArray0 = new double[0];
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      int[] intArray0 = new int[1];
      Long long0 = new Long(1338L);
      Long long1 = new Long(0);
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) 0);
      ArrayUtils.isSameLength(intArray0, intArray0);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.indexOf(booleanArray0, true, 10);
      ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      ArrayUtils.isSameLength(longArray1, longArray1);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      ArrayUtils.addAll((Object[]) null, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Double double0 = new Double(2);
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '\'';
      charArray0[3] = '1';
      ArrayUtils.toObject(charArray0);
      ArrayUtils.lastIndexOf(charArray0, '2', 2);
      char[] charArray1 = new char[1];
      charArray1[0] = '2';
      ArrayUtils.isEmpty(charArray1);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "java.lang.Integer";
      stringArray0[2] = "java.lang.Integer";
      stringArray0[3] = "java.lang.Integer";
      stringArray0[4] = "java.lang.Integer";
      stringArray0[5] = "java.lang.Integer";
      stringArray0[6] = "java.lang.Integer";
      stringArray0[7] = "java.lang.Integer";
      ArrayUtils.add(stringArray0, "java.lang.Integer");
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      ArrayUtils.addAll((short[]) null, (short[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)0;
      ArrayUtils.subarray(byteArray0, (-6), 0);
      ArrayUtils.reverse((byte[]) null);
      float[] floatArray0 = new float[0];
      ArrayUtils.lastIndexOf(floatArray0, (float) (-1), 0);
      ArrayUtils.lastIndexOf(byteArray0, (byte) (-60), 36);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.isEmpty(shortArray0);
      Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      float[] floatArray0 = new float[9];
      floatArray0[0] = 90.0F;
      floatArray0[1] = 2310.0F;
      floatArray0[2] = 205.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 81.0F;
      floatArray0[5] = (-651.13F);
      floatArray0[6] = 950.0F;
      floatArray0[7] = 69.0F;
      floatArray0[8] = 0.0F;
      ArrayUtils.addAll(floatArray0, floatArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 81.0F;
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      byte[] byteArray0 = new byte[0];
      ArrayUtils.isSameLength((byte[]) null, byteArray0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[2] = false;
      ArrayUtils.remove(booleanArray0, 1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)33;
      ArrayUtils.subarray(byteArray0, (int) (byte)1, 36);
      ArrayUtils.reverse(byteArray0);
      ArrayUtils.lastIndexOf(byteArray0, (byte) (-25), (int) (byte)0);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)33;
      ArrayUtils.nullToEmpty(longArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      Character[] characterArray0 = new Character[0];
      ArrayUtils.toPrimitive(characterArray0);
      ArrayUtils.isNotEmpty(doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 36;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = 1361;
      intArray0[3] = (int) (byte)48;
      intArray0[4] = 1;
      ArrayUtils.isSameLength(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = 2994.466653081386;
      ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      short[] shortArray0 = new short[0];
      ArrayUtils.isSameLength(shortArray0, shortArray0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Integer integer0 = new Integer((-345));
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      // Undeclared exception!
      try { 
        ArrayUtils.addAll((Object[]) longArray0, (Object[]) integerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot store java.lang.Integer in an array of java.lang.Long
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      ArrayUtils.isEmpty((char[]) null);
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-3862.8381806123175);
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.reverse(booleanArray0);
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[0] = 932L;
      longArray0[2] = (-4936L);
      longArray0[3] = 3237L;
      longArray0[4] = 932L;
      ArrayUtils.isNotEmpty(longArray0);
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      Boolean[] booleanArray1 = new Boolean[5];
      booleanArray1[0] = (Boolean) true;
      booleanArray1[1] = (Boolean) true;
      booleanArray1[2] = (Boolean) true;
      booleanArray1[3] = (Boolean) true;
      ArrayUtils.toPrimitive(booleanArray1, true);
      ArrayUtils.isSameLength(longArray0, longArray0);
      ArrayUtils.addAll((char[]) null, (char[]) null);
      ArrayUtils.reverse((Object[]) booleanArray1);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      ArrayUtils.addAll((float[]) null, (float[]) null);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-709.46018);
      ArrayUtils.lastIndexOf(doubleArray0, (double) 0L, (-1585));
      ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      ArrayUtils.contains(doubleArray0, (double) (-1585));
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-1585);
      intArray0[2] = (-1585);
      intArray0[3] = (-1585);
      intArray0[4] = (-1585);
      intArray0[5] = (-1585);
      intArray0[6] = (-1585);
      intArray0[7] = (-1585);
      intArray0[8] = (-1585);
      ArrayUtils.toObject(intArray0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (-1683L);
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short) (-1);
      doubleArray0[5] = (double) (short)0;
      ArrayUtils.lastIndexOf(doubleArray0, (double) (-1683L), (-1104.06986707));
      Double double0 = new Double(2565.7088);
      Double double1 = new Double((-36.47230311909956));
      Double.max((short)0, (-1.0));
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) (-1.0);
      Double double2 = new Double((-1683.0));
      doubleArray1[1] = double2;
      doubleArray1[2] = (Double) (-1.0);
      doubleArray1[3] = (Double) 0.0;
      doubleArray1[4] = (Double) 0.0;
      doubleArray1[5] = (Double) (-1.0);
      doubleArray1[6] = double0;
      doubleArray1[7] = (Double) 0.0;
      doubleArray1[8] = (Double) 0.0;
      ArrayUtils.toPrimitive(doubleArray1, (-1104.06986707));
      ArrayUtils.nullToEmpty(shortArray0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)111;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.contains(booleanArray0, false);
      ArrayUtils.nullToEmpty((Integer[]) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-101);
      Double[] doubleArray1 = new Double[0];
      ArrayUtils.toPrimitive(doubleArray1, 4.325493949);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-101);
      shortArray0[1] = (short) (byte)59;
      shortArray0[2] = (short) (byte) (-101);
      shortArray0[3] = (short) (byte) (-101);
      shortArray0[4] = (short) (byte)111;
      ArrayUtils.nullToEmpty(shortArray0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) objectArray0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 1, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-552.3181116);
      Double double0 = new Double((-552.3181116));
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      charArray0[1] = 'Q';
      ArrayUtils.isEmpty(charArray0);
      String[] stringArray0 = new String[0];
      ArrayUtils.add(stringArray0, "java.lang.Integer");
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = (short)1019;
      ArrayUtils.isSameLength(shortArray0, shortArray0);
      Long long0 = new Long((short)0);
      Long[] longArray0 = new Long[4];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      ArrayUtils.toPrimitive(longArray0, (long) longArray0[2]);
      Long long1 = new Long(322L);
      Long long2 = new Long((short)1019);
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (int) (short)1019, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1019, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-78);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte)111;
      ArrayUtils.isEmpty(shortArray0);
      char[] charArray0 = new char[3];
      charArray0[0] = '_';
      charArray0[1] = '`';
      charArray0[2] = 'k';
      ArrayUtils.isSameLength(charArray0, charArray0);
      ArrayUtils.isEmpty((Object[]) null);
      ArrayUtils.addAll(byteArray1, byteArray0);
      short[] shortArray1 = new short[4];
      shortArray1[0] = (short) (byte) (-78);
      shortArray1[1] = (short) (byte)59;
      shortArray1[2] = (short) (byte)111;
      shortArray1[3] = (short) (byte)111;
      ArrayUtils.lastIndexOf(shortArray1, (short) (byte) (-1), (-741));
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Short short0 = new Short((short)48);
      Short.compare((short)643, (short)3321);
      Short short1 = new Short((short) (-1304));
      Short.compare((short)2310, (short) (-1740));
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (-1740);
      shortArray0[2] = (short) (-1304);
      ArrayUtils.isEmpty(shortArray0);
      char[] charArray0 = new char[2];
      charArray0[1] = ',';
      ArrayUtils.isSameLength(charArray0, charArray0);
      Object[] objectArray0 = new Object[0];
      ArrayUtils.isEmpty(objectArray0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (-1683L);
      longArray0[2] = 2379L;
      longArray0[3] = (-1683L);
      longArray0[4] = 641L;
      longArray0[5] = (long) (short) (-1);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.toObject(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      int[] intArray0 = new int[20];
      ArrayUtils.isEmpty(intArray0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)63;
      doubleArray0[3] = (-2372.0);
      ArrayUtils.contains(doubleArray0, (-1846.2294000000002), (-1846.2294000000002));
      ArrayUtils.reverse((Object[]) null);
      String[] stringArray0 = new String[0];
      ArrayUtils.add(stringArray0, "java.lang.Integer");
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Integer integer0 = new Integer(43);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 43;
      floatArray0[1] = (float) (byte)63;
      ArrayUtils.isSameLength((float[]) null, floatArray0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      ArrayUtils.toObject(intArray0);
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)36;
      ArrayUtils.toObject(shortArray0);
      int[] intArray0 = new int[0];
      ArrayUtils.nullToEmpty(intArray0);
      ArrayUtils.reverse(intArray0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      ArrayUtils.contains(booleanArray0, true);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 36;
      Object[] objectArray0 = new Object[0];
      ArrayUtils.toMap(objectArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      ArrayUtils.add((double[]) null, 0.0);
      Object object0 = new Object();
      ArrayUtils.indexOf(objectArray0, object0, 274);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      ArrayUtils.addAll(objectArray0, objectArray0);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)3;
      ArrayUtils.isSameLength(shortArray0, shortArray0);
      double[] doubleArray0 = new double[0];
      ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'java.lang.Object@200f9f63', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      ArrayUtils.isEmpty((char[]) null);
      double[] doubleArray0 = new double[0];
      ArrayUtils.lastIndexOf(doubleArray0, (double) 1472L, (-1585));
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.lastIndexOf(booleanArray0, true, 2221);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (-1037.66879);
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      Character character0 = new Character(',');
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      Double double0 = new Double((-1166.290826323));
      Double[] doubleArray1 = new Double[0];
      ArrayUtils.nullToEmpty(doubleArray1);
      ArrayUtils.isSameLength((Object[]) doubleArray1, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      ArrayUtils.addAll(objectArray0, objectArray0);
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      ArrayUtils.reverse(doubleArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[0];
      ArrayUtils.nullToEmpty(objectArray0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      ArrayUtils.nullToEmpty((String[]) null);
      ArrayUtils.toMap((Object[]) null);
      ArrayUtils.toMap((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 0.0;
      doubleArray0[1] = (-1018.9);
      doubleArray0[3] = 1603.5798016;
      Character character0 = new Character('\'');
      Character.compare(',', '=');
      Character.valueOf('\'');
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)19593;
      ArrayUtils.lastIndexOf(shortArray0, (short)19593);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) '{';
      floatArray0[1] = (float) '\'';
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-17);
      ArrayUtils.addAll((float[]) null, floatArray0);
      ArrayUtils.isSameLength(shortArray0, shortArray0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float((-89.0));
      ArrayUtils.toPrimitive(floatArray0, (-54.0F));
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.isNotEmpty(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-76);
      byteArray0[0] = (byte) (-1);
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      Float float0 = new Float((float) (byte) (-1));
      Float float1 = new Float((float) (byte)0);
      int[] intArray0 = new int[0];
      ArrayUtils.addAll(intArray0, intArray0);
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 2659);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2659, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      short[] shortArray0 = new short[7];
      ArrayUtils.add(shortArray0, (short)0);
      ArrayUtils.nullToEmpty((byte[]) null);
      Byte byte0 = new Byte((byte)36);
      Byte byte1 = new Byte((byte)36);
      Byte byte2 = new Byte((byte)37);
      Byte byte3 = new Byte((byte)36);
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      ArrayUtils.toPrimitive(byteArray0, (byte)60);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      int[] intArray0 = new int[4];
      byte[] byteArray0 = new byte[0];
      ArrayUtils.isSameLength(byteArray0, byteArray0);
      double[] doubleArray0 = new double[0];
      ArrayUtils.isSameLength((double[]) null, doubleArray0);
      ArrayUtils.isSameLength(intArray0, intArray0);
      ArrayUtils.isNotEmpty(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      long[] longArray0 = new long[3];
      longArray0[0] = 641L;
      longArray0[1] = (-1683L);
      longArray0[2] = (long) 0;
      ArrayUtils.subarray(longArray0, 0, 0);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1525);
      shortArray0[1] = (short) (-1525);
      shortArray0[2] = (short)8;
      shortArray0[3] = (short) (-1031);
      shortArray0[4] = (short)318;
      shortArray0[6] = (short) (-1031);
      shortArray0[8] = (short) (-1525);
      ArrayUtils.subarray(shortArray0, (int) (short)0, (int) (short)543);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-1683L);
      objectArray0[1] = (Object) (short) (-1525);
      objectArray0[2] = (Object) 641L;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) (short)8;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(objectArray0, 2130440126);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2130440126, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 2702L;
      longArray0[3] = (-1410L);
      longArray0[4] = 284L;
      short[] shortArray0 = new short[0];
      ArrayUtils.addAll(shortArray0, shortArray0);
      ArrayUtils.subarray((byte[]) null, (-799), 17);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2702L;
      ArrayUtils.isEmpty(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 930.2796911592287;
      doubleArray0[1] = 930.2796911592287;
      doubleArray0[3] = (double) 0;
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      ArrayUtils.addAll((Object[]) integerArray1, (Object[]) integerArray1);
      Integer integer0 = new Integer(1364);
      float[] floatArray0 = new float[0];
      ArrayUtils.isSameLength((float[]) null, floatArray0);
      ArrayUtils.toMap(integerArray1);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      ArrayUtils.isSameLength(byteArray0, byteArray0);
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)205;
      shortArray0[6] = (short)4999;
      shortArray0[7] = (short) (-1);
      short[] shortArray1 = new short[6];
      shortArray1[0] = (short) (byte)1;
      shortArray1[2] = (short) (-1);
      shortArray1[3] = (short) (byte)1;
      shortArray1[4] = (short) (byte)1;
      ArrayUtils.addAll(shortArray0, shortArray1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1540), (-1073741823));
      ArrayUtils.reverse(byteArray1);
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)1;
      ArrayUtils.toObject(longArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) (short)1;
      floatArray0[2] = 0.0F;
      ArrayUtils.isSameLength(floatArray0, floatArray0);
      ArrayUtils.toPrimitive((Character[]) null, '{');
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-125);
      ArrayUtils.removeElement(byteArray0, (byte) (-13));
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Character character0 = new Character('Z');
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.isNotEmpty(booleanArray0);
      ArrayUtils.clone((boolean[]) null);
      int[] intArray0 = new int[7];
      ArrayUtils.isNotEmpty((boolean[]) null);
      ArrayUtils.subarray(intArray0, 0, 0);
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.removeElement((Object[]) arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, (Object) "java.lang.Integer");
      ArrayUtils.toString((Object) null);
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      ArrayUtils.isEmpty((byte[]) null);
      ArrayUtils.isEmpty((short[]) null);
      ArrayUtils.addAll((short[]) null, (short[]) null);
      ArrayUtils.addAll((short[]) null, (short[]) null);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ArrayUtils.isEquals("GF<oV=ODnG&", integer0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Object object0 = new Object();
      ArrayUtils.toString(object0, "k@}W3!4");
      ArrayUtils.indexOf((short[]) null, (short)0, (int) (short)0);
      Double double0 = new Double((-1922.052520159));
      Double.max((-1217.271735957219), (-585.500195043158));
      Double[] doubleArray0 = new Double[1];
      Double.sum((-1217.271735957219), (-1922.052520159));
      doubleArray0[0] = double0;
      ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[0]);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)2256;
      shortArray0[3] = (short)2141;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)2256;
      ArrayUtils.nullToEmpty(shortArray0);
      ArrayUtils.indexOf((byte[]) null, (byte)75, (int) (short)2);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      ArrayUtils.isSameLength(objectArray0, objectArray0);
      ArrayUtils.lastIndexOf((byte[]) null, (byte) (-1), 2847);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (-2164.052F);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      Long[] longArray0 = new Long[9];
      long long0 = 81L;
      Long long1 = new Long(81L);
      longArray0[0] = long1;
      Long long2 = new Long(long0);
      longArray0[1] = long2;
      Object object0 = new Object();
      ArrayUtils.indexOf(floatArray1, (float) 81L);
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short)0);
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1));
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Integer integer0 = new Integer(1940);
      ArrayUtils.isSameType(integer0, integer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.lastIndexOf(byteArray0, (byte)90);
      Character character0 = new Character('\u0084');
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.isSameLength(floatArray0, (float[]) null);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1078);
      longArray0[1] = (long) 1856;
      longArray0[2] = (long) (-1078);
      longArray0[3] = (long) (-1078);
      longArray0[4] = (long) 1856;
      longArray0[5] = (long) 1856;
      longArray0[6] = (long) (-1078);
      longArray0[7] = (long) (-1078);
      ArrayUtils.subarray(longArray0, 1856, 2);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-1078L);
      ArrayUtils.addAll(objectArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      Short.compare((short) (-4475), (short) (-1740));
      Short[] shortArray0 = new Short[0];
      ArrayUtils.toPrimitive(shortArray0, (short) (-54));
      ArrayUtils.contains((float[]) null, (float) (-2735));
      ArrayUtils.indexOf((float[]) null, 160.8213F);
      ArrayUtils arrayUtils0 = new ArrayUtils();
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      Boolean[] booleanArray0 = new Boolean[0];
      ArrayUtils.nullToEmpty(booleanArray0);
      ArrayUtils.isEmpty(byteArray1);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      ArrayUtils.nullToEmpty(objectArray0);
      short[] shortArray0 = new short[0];
      int int0 = 48;
      short short0 = (short)1089;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, 48, (short)1089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      ArrayUtils.isNotEmpty(longArray0);
      ArrayUtils.isSameLength((float[]) null, (float[]) null);
      ArrayUtils.subarray(longArray0, 1929, 1);
      short[] shortArray0 = new short[0];
      ArrayUtils.subarray(shortArray0, 1929, 1929);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "8java.library.path";
      objectArray0[1] = (Object) "8java.library.path";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "8java.library.path";
      objectArray0[4] = (Object) "8java.library.path";
      ArrayUtils.indexOf(objectArray0, (Object) null, 0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.isSameLength((short[]) null, shortArray0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      ArrayUtils.isSameLength((int[]) null, (int[]) null);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      ArrayUtils.add(objectArray0, 1, object0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.isSameLength(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)36;
      ArrayUtils.toObject(shortArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)36;
      doubleArray0[1] = (double) (short)36;
      doubleArray0[2] = (double) (short)36;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      ArrayUtils.lastIndexOf(doubleArray0, 2241.52856554, (-684), 36.0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'T';
      charArray0[1] = 'f';
      charArray0[2] = 'r';
      charArray0[3] = '4';
      charArray0[4] = 'c';
      charArray0[5] = 'r';
      ArrayUtils.nullToEmpty(charArray0);
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      ArrayUtils.addAll(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = 'f';
      charArray0[1] = '^';
      charArray0[2] = 'f';
      Long long0 = new Long(1L);
      Long long1 = new Long(81L);
      Object object0 = new Object();
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '^';
      floatArray0[1] = (float) 1L;
      floatArray0[2] = (float) 1L;
      floatArray0[3] = (float) 'f';
      floatArray0[4] = (float) '^';
      floatArray0[5] = (float) 'f';
      ArrayUtils.indexOf(floatArray0, (-1907.0F));
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      ArrayUtils.removeElement(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-2906.676242));
      ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, 122);
      ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.lastIndexOf(byteArray0, (byte)1, (int) (byte)1);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      ArrayUtils.isNotEmpty(byteArray1);
      Short[] shortArray0 = new Short[2];
      short short0 = (short)64;
      Short short1 = new Short((short)64);
      Short.compare((short) (-2180), (short) (-2180));
      shortArray0[0] = short1;
      Short.toUnsignedLong(short0);
      Short short2 = new Short((short)27);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)64;
      doubleArray0[1] = (double) 64L;
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      Character character0 = new Character('5');
      ArrayUtils.toPrimitive((Character[]) null);
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(3509);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short) (-2180));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(512);
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger("F@Q4/", (int) integerArray0[1]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2146358721));
      integerArray0[4] = integer4;
      ArrayUtils.addAll(integerArray0, integerArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) short0;
      longArray0[1] = (long) short0;
      longArray0[2] = (long) 3509;
      longArray0[3] = (-1431L);
      longArray0[4] = (long) 3509;
      longArray0[5] = (long) (short)64;
      longArray0[6] = (long) (int)integerArray0[0];
      ArrayUtils.isNotEmpty(longArray0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2393.39585);
      doubleArray0[1] = (-552.3181116);
      Float float0 = new Float((float) 1453);
      Float[] floatArray0 = new Float[0];
      ArrayUtils.toPrimitive(floatArray0, (float) 1453);
      ArrayUtils.toPrimitive((Byte[]) null);
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) floatArray0, 18, (Object) "6.1");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      ArrayUtils.nullToEmpty((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.isSameLength(intArray0, (int[]) null);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      ArrayUtils.addAll(doubleArray0, doubleArray0);
      char[] charArray0 = new char[11];
      charArray0[1] = '!';
      ArrayUtils.addAll(charArray0, charArray0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1019;
      ArrayUtils.isSameLength(shortArray0, shortArray0);
      Long long0 = new Long(1050L);
      Long long1 = new Long((short)1019);
      Long[] longArray0 = new Long[4];
      longArray0[0] = long1;
      longArray0[1] = long1;
      longArray0[2] = long1;
      ArrayUtils.toPrimitive(longArray0, (long) longArray0[2]);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)1019;
      intArray0[1] = (int) (short)1019;
      intArray0[2] = (int) (short)1019;
      intArray0[3] = (int) (short)1019;
      intArray0[4] = (int) (short)1019;
      intArray0[5] = (int) (short)1019;
      intArray0[6] = 0;
      ArrayUtils.isSameLength(intArray0, intArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.add((String[]) null, 1019, "java.lang.String");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1019, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '2';
      charArray0[1] = 'A';
      charArray0[2] = '}';
      charArray0[3] = 'z';
      charArray0[4] = 'Q';
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'z';
      longArray0[1] = 2250L;
      ArrayUtils.isEmpty(longArray0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)63;
      doubleArray0[3] = (-2372.0);
      ArrayUtils.contains(doubleArray0, (-1846.2294000000002), (-1846.2294000000002));
      Object object0 = new Object();
      Integer integer0 = new Integer((byte)63);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)63;
      ArrayUtils.addAll(shortArray0, shortArray0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      double[] doubleArray0 = new double[0];
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      ArrayUtils.indexOf(doubleArray0, (-1.0), (-2411));
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Character character0 = new Character('Z');
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.isNotEmpty(booleanArray0);
      ArrayUtils.clone((boolean[]) null);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'Z';
      intArray0[1] = (int) 'Z';
      intArray0[2] = (int) 'Z';
      intArray0[3] = (int) 'Z';
      intArray0[4] = (int) 'Z';
      intArray0[5] = 3;
      intArray0[6] = (int) 'Z';
      ArrayUtils.subarray(intArray0, 90, 0);
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.addAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      ArrayUtils.reverse(arrayUtils0.EMPTY_FLOAT_ARRAY);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Object object0 = new Object();
      ArrayUtils.indexOf((Object[]) null, (Object) null, 2146911970);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.isEmpty(shortArray0);
      ArrayUtils.isSameLength(shortArray0, (short[]) null);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      ArrayUtils.add(charArray0, '?');
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '?';
      ArrayUtils.contains(doubleArray0, 1534.44444790543, 63.0);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 1);
      ArrayUtils.isNotEmpty(booleanArray1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = ")3(WHE";
      stringArray0[1] = "J/'OpsO";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Wd4[nVU/~j";
      stringArray0[5] = "java.lang.String";
      ArrayUtils.toArray(stringArray0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)111;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.contains(booleanArray0, false);
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-101);
      doubleArray0[1] = (double) (byte)111;
      doubleArray0[2] = (double) (byte) (-101);
      doubleArray0[3] = (-2776.2194);
      doubleArray0[4] = (double) (byte)111;
      Integer integer0 = new Integer((byte) (-101));
      ArrayUtils.toPrimitive(integerArray0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      ArrayUtils.isNotEmpty(byteArray1);
      Short short0 = new Short((short)64);
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      ArrayUtils.toObject(byteArray1);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      ArrayUtils.addAll((int[]) null, (int[]) null);
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      ArrayUtils.isSameLength(charArray0, charArray0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      float[] floatArray0 = new float[1];
      float[] floatArray1 = new float[1];
      floatArray1[0] = 60.68937F;
      ArrayUtils.isSameLength(floatArray0, floatArray1);
      int[] intArray2 = new int[2];
      intArray2[0] = (-259);
      intArray2[1] = 327;
      ArrayUtils.clone(intArray2);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "jPojp4dYP";
      stringArray0[1] = "";
      ArrayUtils.subarray(stringArray0, (-2213), (-259));
      ArrayUtils.reverse(intArray1);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      ArrayUtils.toObject((short[]) null);
      ArrayUtils.add((short[]) null, (short)1271);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)1271;
      longArray0[1] = (long) (short)1271;
      longArray0[2] = (long) (short)1271;
      longArray0[3] = (long) (short)1271;
      longArray0[4] = (long) (short)1271;
      longArray0[5] = (long) (short)1271;
      longArray0[6] = (long) (short)1271;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1067, 0);
      ArrayUtils.isEmpty(longArray1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.isNotEmpty(booleanArray0);
      ArrayUtils.clone(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 0.0;
      long[] longArray0 = new long[4];
      longArray0[1] = (-1L);
      byte[] byteArray0 = new byte[8];
      ArrayUtils.nullToEmpty(longArray0);
      Short short0 = new Short((byte)1);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-76);
      byteArray0[3] = (byte) (-1);
      ArrayUtils.lastIndexOf(byteArray0, (byte) (-76), 1050);
      short[] shortArray0 = new short[0];
      ArrayUtils.isNotEmpty(shortArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-76), 1);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("java.compiler", "java.compiler");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<String, String>("%snsTmt)&!O`Y-\rq", "java.compiler");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<String, String>("[T:H", "java.lang.String");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry4 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleEntry3);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry5 = new AbstractMap.SimpleEntry<String, String>("[T:H", "[T:H");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("java.lang.Object", "java.lang.String");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry6 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleEntry2);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry7 = new AbstractMap.SimpleEntry<String, String>("java.compiler", "&p^3wa@)1f*\"");
      AbstractMap.SimpleEntry<String, String>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<String, String>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 0);
      ArrayUtils.isNotEmpty(abstractMap_SimpleEntryArray0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.isSameLength(longArray0, longArray0);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      ArrayUtils.addAll((char[]) null, (char[]) null);
      ArrayUtils.reverse(objectArray0);
      Integer integer0 = new Integer((-8));
      Object object4 = new Object();
      ArrayUtils.isSameType("^mlmoN(dEk#}Xm!zki", object4);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      short[] shortArray0 = new short[18];
      short[] shortArray1 = new short[1];
      ArrayUtils.isSameLength(shortArray0, shortArray1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)56;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)56;
      intArray0[1] = (int) (byte)56;
      intArray0[2] = (int) (byte)54;
      intArray0[3] = (int) (byte)54;
      intArray0[4] = (int) (byte)54;
      ArrayUtils.isSameLength(intArray0, intArray0);
      ArrayUtils.reverse((double[]) null);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 54;
      ArrayUtils.nullToEmpty(objectArray0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      ArrayUtils.isNotEmpty((int[]) null);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.isNotEmpty(shortArray0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)111;
      double[] doubleArray0 = new double[0];
      ArrayUtils.lastIndexOf(doubleArray0, (-1811.556094666811), (-1.0));
      Double double0 = new Double((byte)80);
      Double double1 = new Double(48.0);
      Double[] doubleArray1 = new Double[0];
      ArrayUtils.toPrimitive(doubleArray1, (-1.0));
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.lastIndexOf(booleanArray0, true);
      Short.compare((byte)111, (byte)111);
      ArrayUtils.toPrimitive((Short[]) null, (short)1514);
      float[] floatArray0 = new float[20];
      floatArray0[0] = (float) 0;
      ArrayUtils.contains(floatArray0, 928.26074F);
      ArrayUtils.indexOf((float[]) null, (-1740.0F));
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_DOUBLE_ARRAY);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-125);
      ArrayUtils.toObject(byteArray0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-709.46018184027);
      doubleArray0[1] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-45L), 36);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 2145292873, 2145292873);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, 2145292873);
      assertEquals(7, int1);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 36;
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) 36, (double) 36);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-916.2394000000002);
      doubleArray0[1] = (-1.0);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-916.2394000000002), (-1.0), (-916.2394000000002), (-1.0)}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (-1.0);
      objectArray0[1] = (Object) (-916.2394000000002);
      objectArray0[2] = (Object) (-1.0);
      objectArray0[3] = (Object) (-1.0);
      objectArray0[4] = (Object) (-1.0);
      objectArray0[5] = (Object) (-916.2394000000002);
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[3], 10);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1832);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      short[] shortArray2 = ArrayUtils.addAll(shortArray1, (short[]) null);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1832), (short) (-1), (short) (-1832)}, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(4, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.isSameLength(byteArray0, byteArray0);
      ArrayUtils.isEmpty(byteArray0);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)67;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)67;
      floatArray0[1] = (float) (byte)67;
      floatArray0[2] = (float) (byte)67;
      floatArray0[3] = (-1112.2F);
      floatArray0[4] = (float) (short)67;
      floatArray0[5] = (float) (short)67;
      floatArray0[6] = (float) (short)67;
      floatArray0[7] = (float) (byte)67;
      floatArray0[8] = (float) (byte)67;
      ArrayUtils.nullToEmpty(floatArray0);
      char[] charArray0 = new char[0];
      ArrayUtils.isSameLength(charArray0, charArray0);
      Integer integer0 = new Integer((short)67);
      Integer integer1 = new Integer((byte)67);
      Integer integer2 = new Integer(3541);
      Integer.valueOf(3541);
      Integer integer3 = new Integer(3735);
      Integer integer4 = new Integer(67);
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)1;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      
      Byte[] byteArray1 = new Byte[8];
      byteArray1[0] = (Byte) (byte)1;
      byteArray1[1] = (Byte) (byte)1;
      byteArray1[2] = (Byte) (byte)1;
      byteArray1[3] = (Byte) (byte)1;
      byteArray1[4] = (Byte) (byte)1;
      byteArray1[5] = (Byte) (byte)1;
      byteArray1[6] = (Byte) (byte)1;
      byteArray1[7] = (Byte) (byte)1;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1}, byteArray2);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      ArrayUtils.clone(doubleArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-78);
      ArrayUtils.nullToEmpty(byteArray0);
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      int[] intArray0 = new int[0];
      ArrayUtils.removeElement(intArray0, 1);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-78);
      ArrayUtils.clone(longArray0);
      ArrayUtils.isEmpty(shortArray0);
      ArrayUtils.isSameLength((Object[]) shortArray1, (Object[]) shortArray1);
      ArrayUtils.add(byteArray0, (byte)0);
      Integer integer0 = new Integer((byte)2);
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Character character0 = new Character('Z');
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      Double double0 = new Double(0);
      Double double1 = new Double((-961.6670718));
      ArrayUtils.nullToEmpty((int[]) null);
      Float float0 = new Float((float) 1453);
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) 1735);
      assertArrayEquals(new float[] {1453.0F, 1453.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(2, longArray1.length);
  }
}

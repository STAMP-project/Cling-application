/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 21:39:19 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.Seconds;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MutablePeriod_ESTest extends MutablePeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1105L, (Chronology) buddhistChronology0);
      Duration duration0 = Duration.standardMinutes(buddhistChronology0.BE);
      mutablePeriod0.add((ReadableDuration) duration0);
      assertEquals(60000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1105L, (Chronology) buddhistChronology0);
      mutablePeriod0.add((ReadableDuration) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1105L, (Chronology) buddhistChronology0);
      DateMidnight dateMidnight0 = DateMidnight.now();
      Duration duration0 = Duration.standardMinutes(buddhistChronology0.BE);
      MutableInterval mutableInterval0 = new MutableInterval(dateMidnight0, duration0);
      mutablePeriod0.add((ReadableInterval) mutableInterval0);
      assertEquals(1392332400000L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3314L));
      mutablePeriod0.add((ReadableInterval) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      DateTime dateTime0 = new DateTime((Object) null, dateTimeZone0);
      mutablePeriod0.setPeriod((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateTime dateTime0 = dateMidnight0.toDateTime();
      Minutes minutes0 = Minutes.THREE;
      Seconds seconds0 = minutes0.toStandardSeconds();
      PeriodType periodType0 = seconds0.getPeriodType();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTime dateTime1 = dateTime0.toDateTime(dateTimeZone0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, dateMidnight0, periodType0);
      mutablePeriod0.setPeriod((ReadableInstant) dateTime0, (ReadableInstant) dateTime1);
      assertFalse(dateTime0.equals((Object)dateTime1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1105L, (Chronology) buddhistChronology0);
      mutablePeriod0.setPeriod((ReadableInterval) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 0, 2920, 4287, (-1424), 0);
      mutablePeriod0.addHours(0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      PeriodType periodType0 = PeriodType.yearDay();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3314L), (-3314L), periodType0, julianChronology0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3314L));
      MutablePeriod mutablePeriod1 = new MutablePeriod(mutablePeriod0);
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, duration0, periodType0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1105L, (Chronology) buddhistChronology0);
      Period period0 = mutablePeriod0.toPeriod();
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1105L, (Chronology) buddhistChronology0);
      mutablePeriod0.clear();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1L);
      mutablePeriod0.setDays(0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(3389, 1852, 756, 756, 0, 3389, 1, 756, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1L);
      mutablePeriod0.add((-1L), (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      Duration duration0 = Duration.standardMinutes(0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateMidnight0, duration0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null, (Chronology) null);
      mutablePeriod0.setHours(0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1L);
      mutablePeriod0.setMonths(628);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1127L, (Chronology) buddhistChronology0);
      mutablePeriod0.add((long) 1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      PeriodType periodType0 = seconds0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1041L), periodType0);
      mutablePeriod0.addSeconds((-1149));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1L);
      // Undeclared exception!
      try { 
        mutablePeriod0.setValue((-292269054), (-4619));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -292269054
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1L);
      mutablePeriod0.addMillis((-11));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      StrictChronology strictChronology0 = StrictChronology.getInstance(copticChronology0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(2070L, (Chronology) strictChronology0);
      mutablePeriod0.setYears(3060);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-4), (-1), (-1), (-4));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1105L, (Chronology) buddhistChronology0);
      mutablePeriod0.setSeconds(0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3314L), (Chronology) julianChronology0);
      mutablePeriod0.addYears(756);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1L);
      mutablePeriod0.setPeriod(62035200000L, (long) 1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1105L, (Chronology) buddhistChronology0);
      DateMidnight dateMidnight0 = DateMidnight.now();
      Duration duration0 = Duration.standardMinutes(buddhistChronology0.BE);
      MutableInterval mutableInterval0 = new MutableInterval(dateMidnight0, duration0);
      mutablePeriod0.setPeriod((ReadableInterval) mutableInterval0);
      assertEquals(1392332460000L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      PeriodType periodType0 = seconds0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1L);
      MutablePeriod mutablePeriod1 = mutablePeriod0.copy();
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-254L), (-254L));
      Seconds seconds0 = Seconds.ONE;
      mutablePeriod0.mergePeriod(seconds0);
      assertEquals(1, seconds0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      MutablePeriod mutablePeriod0 = new MutablePeriod(3L, periodType0, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 10080L, (Chronology) null);
      mutablePeriod0.addWeeks((-793));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutablePeriod.parse("ON48Hz`\"sBn");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"ON48Hz`\"sBn\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1110L, (Chronology) buddhistChronology0);
      Duration duration0 = Duration.standardMinutes(0);
      mutablePeriod0.setPeriod((ReadableDuration) duration0);
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTime dateTime0 = new DateTime(10000000000000000L);
      Duration duration0 = new Duration(dateTime0, dateTime0);
      PeriodType periodType0 = PeriodType.minutes();
      MutablePeriod mutablePeriod0 = new MutablePeriod(duration0, dateTime0, periodType0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(164L);
      MutablePeriod mutablePeriod0 = new MutablePeriod(duration0, (ReadableInstant) null);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1L);
      mutablePeriod0.add(1, 60, 0, 0, 0, 60, 1, 0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      Days days0 = hours0.toStandardDays();
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      mutablePeriod0.setPeriod(0, (-1738), (-3182), 0, 0, 1311, 0, 0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3314L));
      PeriodType periodType0 = PeriodType.hours();
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      mutablePeriod0.set(durationFieldType0, 0);
      assertEquals("hours", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      Days days0 = hours0.toStandardDays();
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      MutablePeriod mutablePeriod1 = new MutablePeriod(mutablePeriod0, periodType0);
      assertFalse(mutablePeriod1.equals((Object)mutablePeriod0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1795L, 1886L, periodType0);
      mutablePeriod0.setPeriod(0L);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      mutablePeriod0.addMinutes(0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      StrictChronology strictChronology0 = StrictChronology.getInstance(copticChronology0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(2070L, (Chronology) strictChronology0);
      mutablePeriod0.addDays(3060);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1127L, (Chronology) buddhistChronology0);
      mutablePeriod0.addMonths(1561);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1127L, (Chronology) buddhistChronology0);
      mutablePeriod0.setMinutes(1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, dateTime0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3314L));
      Months months0 = Months.MAX_VALUE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      mutablePeriod0.add(durationFieldType0, 1);
      assertEquals("months", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null, (Chronology) null);
      mutablePeriod0.setWeeks((-2567));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3314L));
      mutablePeriod0.setMillis(5);
  }
}

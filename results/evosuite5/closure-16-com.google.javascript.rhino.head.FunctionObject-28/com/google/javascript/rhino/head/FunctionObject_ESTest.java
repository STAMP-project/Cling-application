/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 04:33:31 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.NativeBoolean;
import com.google.javascript.rhino.head.NativeGenerator;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeJavaClass;
import com.google.javascript.rhino.head.Script;
import com.google.javascript.rhino.head.Scriptable;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionObject_ESTest extends FunctionObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toCharArray");
      assertNotNull(method0);
      
      FunctionObject functionObject0 = new FunctionObject("toCharArray", method0, importerTopLevel0);
      boolean boolean0 = functionObject0.isVarArgsConstructor();
      assertFalse(boolean0);
      assertEquals(0, functionObject0.getArity());
      assertEquals(68, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toCharArray");
      FunctionObject functionObject0 = new FunctionObject("toCharArray", method0, importerTopLevel0);
      // Undeclared exception!
      try { 
        functionObject0.createObject(context0, importerTopLevel0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped java.lang.ClassCastException: java.lang.String cannot be cast to com.google.javascript.rhino.head.Scriptable
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test02()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toCharArray");
      NativeGenerator nativeGenerator0 = NativeGenerator.init(importerTopLevel0, false);
      FunctionObject functionObject0 = new FunctionObject("language version", method0, nativeGenerator0);
      // Undeclared exception!
      try { 
        functionObject0.call(context0, importerTopLevel0, importerTopLevel0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toCharArray");
      NativeGenerator nativeGenerator0 = NativeGenerator.init(importerTopLevel0, true);
      FunctionObject functionObject0 = new FunctionObject("language version", method0, nativeGenerator0);
      // Undeclared exception!
      try { 
        functionObject0.call(context0, importerTopLevel0, nativeGenerator0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"language version\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toCharArray");
      FunctionObject functionObject0 = new FunctionObject("toCharArray", method0, importerTopLevel0);
      // Undeclared exception!
      try { 
        functionObject0.call(context0, importerTopLevel0, importerTopLevel0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"toCharArray\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test05()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      Context context0 = new Context();
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeBoolean0, (Object) nativeBoolean0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't convert to type \"java.lang.reflect.Method\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test06()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      // Undeclared exception!
      try { 
        FunctionObject.findSingleMethod(methodArray0, "toLowerCase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"toLowerCase\" occurs multiple times in class \"java.lang.String\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Method[] methodArray0 = new Method[1];
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "EEI%$\"0M-*fh5w{l=@]");
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toCharArray");
      assertNotNull(method0);
      
      FunctionObject functionObject0 = new FunctionObject("toCharArray", method0, importerTopLevel0);
      functionObject0.getMethodOrConstructor();
      assertEquals(68, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toCharArray");
      FunctionObject functionObject0 = new FunctionObject((String) null, method0, importerTopLevel0);
      // Undeclared exception!
      try { 
        functionObject0.hasInstance(importerTopLevel0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: 'prototype' property of  is not an object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test10()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toCharArray");
      assertNotNull(method0);
      
      NativeGenerator nativeGenerator0 = NativeGenerator.init(importerTopLevel0, true);
      FunctionObject functionObject0 = new FunctionObject("error reporter", method0, nativeGenerator0);
      functionObject0.getFunctionName();
      assertEquals(0, functionObject0.getArity());
      assertEquals(68, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) importerTopLevel0, (Object) context0.generateObserverCount, 3);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeBoolean0, (Object) importerTopLevel0, 1);
      assertEquals("[object global]", object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg((Context) null, (Scriptable) nativeIterator_StopIteration0, (Object) class0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      Context context1 = (Context)FunctionObject.convertArg(context0, (Scriptable) nativeBoolean0, (Object) context0, 6);
      assertEquals(100, Context.VERSION_1_0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Context context0 = new Context();
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeBoolean0, (Object) context0, 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Context context0 = Context.enter();
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeBoolean0, (Object) nativeBoolean0, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Double> class0 = Double.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test18()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      Class<Boolean> class0 = Boolean.TYPE;
      Context context0 = new Context();
      FunctionObject.convertArg(context0, (Scriptable) nativeBoolean0, (Object) nativeBoolean0, (Class<?>) class0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<String> class0 = String.class;
      Context context0 = Context.getCurrentContext();
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeJavaClass0, (Object) "codePointCount", (Class<?>) class0);
      assertEquals("codePointCount", object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test20()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "contains");
      FunctionObject functionObject0 = null;
      try {
        functionObject0 = new FunctionObject("E#3zO", method0, importerTopLevel0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Unsupported parameter type \"java.lang.CharSequence\" in method \"contains\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test21()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getChars");
      FunctionObject functionObject0 = null;
      try {
        functionObject0 = new FunctionObject("getChars", method0, importerTopLevel0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Method \"getChars\" must be static with the signature \"(Context cx, Scriptable thisObj, Object[] args, Function funObj)\" to define a variable arguments function.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaAdapter.runScript((Script) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.JavaAdapter$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toCharArray");
      assertNotNull(method0);
      
      FunctionObject functionObject0 = new FunctionObject("toCharArray", method0, importerTopLevel0);
      functionObject0.addAsConstructor(importerTopLevel0, importerTopLevel0);
      assertEquals(68, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toCharArray");
      assertNotNull(method0);
      
      FunctionObject functionObject0 = new FunctionObject("toCharArray", method0, importerTopLevel0);
      Object object0 = functionObject0.getInstanceIdValue(1);
      assertEquals(68, methodArray0.length);
      assertEquals(0, object0);
  }
}

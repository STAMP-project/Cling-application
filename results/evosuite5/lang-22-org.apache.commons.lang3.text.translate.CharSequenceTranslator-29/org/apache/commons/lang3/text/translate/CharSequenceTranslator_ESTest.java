/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 12:25:55 GMT 2019
 */

package org.apache.commons.lang3.text.translate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import org.apache.commons.lang3.text.translate.CharSequenceTranslator;
import org.apache.commons.lang3.text.translate.NumericEntityUnescaper;
import org.apache.commons.lang3.text.translate.UnicodeEscaper;
import org.apache.commons.lang3.text.translate.UnicodeUnescaper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class CharSequenceTranslator_ESTest extends CharSequenceTranslator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
      assertNotNull(numericEntityUnescaper0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(4724);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(4724, charBuffer0.length());
      assertEquals(4724, charBuffer0.capacity());
      assertEquals(4724, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(4724, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      
      String string0 = numericEntityUnescaper0.translate((CharSequence) charBuffer0);
      assertNotNull(string0);
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(4724, charBuffer0.length());
      assertEquals(4724, charBuffer0.capacity());
      assertEquals(4724, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(4724, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UnicodeUnescaper.OPTION[] unicodeUnescaper_OPTIONArray0 = new UnicodeUnescaper.OPTION[0];
      UnicodeUnescaper unicodeUnescaper0 = new UnicodeUnescaper(unicodeUnescaper_OPTIONArray0);
      assertNotNull(unicodeUnescaper0);
      assertEquals(0, unicodeUnescaper_OPTIONArray0.length);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      unicodeUnescaper0.translate((CharSequence) null, (Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, unicodeUnescaper_OPTIONArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
      assertNotNull(numericEntityUnescaper0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      assertNotNull(charBuffer0);
      assertEquals("\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      
      // Undeclared exception!
      try { 
        numericEntityUnescaper0.translate((CharSequence) charBuffer0, (Writer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
         verifyException("org.apache.commons.lang3.text.translate.CharSequenceTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.below(4972);
      assertNotNull(unicodeEscaper0);
      
      String string0 = unicodeEscaper0.translate((CharSequence) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UnicodeUnescaper.OPTION[] unicodeUnescaper_OPTIONArray0 = new UnicodeUnescaper.OPTION[0];
      UnicodeUnescaper unicodeUnescaper0 = new UnicodeUnescaper(unicodeUnescaper_OPTIONArray0);
      assertNotNull(unicodeUnescaper0);
      assertEquals(0, unicodeUnescaper_OPTIONArray0.length);
      
      // Undeclared exception!
      try { 
        unicodeUnescaper0.with((CharSequenceTranslator[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.translate.CharSequenceTranslator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UnicodeEscaper unicodeEscaper0 = new UnicodeEscaper();
      CharBuffer charBuffer0 = CharBuffer.allocate(4724);
      String string0 = unicodeEscaper0.translate((CharSequence) charBuffer0);
      assertNotNull(string0);
  }
}

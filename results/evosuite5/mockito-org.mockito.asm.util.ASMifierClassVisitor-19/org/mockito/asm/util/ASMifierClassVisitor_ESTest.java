/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 21 15:39:50 GMT 2019
 */

package org.mockito.asm.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.mockito.asm.AnnotationVisitor;
import org.mockito.asm.FieldVisitor;
import org.mockito.asm.MethodVisitor;
import org.mockito.asm.util.ASMifierClassVisitor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ASMifierClassVisitor_ESTest extends ASMifierClassVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.appendAccess(131072);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.appendAccess(4096);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.appendAccess(2048);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.appendAccess(512);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.appendAccess((-353919680));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("gliLf");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.appendAccess((-1792));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.appendAccess(32767);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.appendAccess((-346919692));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.appendAccess(256);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("t>2sEK_UTV!;");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.appendAccess((-338105562));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.appendAccess((-2176));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("SourceDebugExtension", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.appendAccess(128);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      FieldVisitor fieldVisitor0 = aSMifierClassVisitor0.visitField(198, "-debug", "-debug", "T", "-debug");
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.appendAccess(64);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.appendAccess((-1984));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.appendAccess(3488);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.appendAccess(8);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod(68, "~@[42kvk(d,KhZ.2F]", "~@[42kvk(d,KhZ.2F]", "~@[42kvk(d,KhZ.2F]", stringArray0);
      assertNotNull(methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("SourceDebugExtension", true);
      String[] stringArray0 = new String[6];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod(196653, "6:j]&FIB(rwN", "pFJ0yzy3'hZ", "WexOZGWk<x", stringArray0);
      assertNotNull(methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.visit(47, (-1417), "mv.visitIincInsn(", "mv.visitIincInsn(", "mv.visitIincInsn(", stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.visit(2, 2, "d", "Y3A)Xp", "Y3A)Xp", (String[]) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.visit(2628, (-2563), "M5u?9a$jpK.class.class.class", "M5u?9a$jpK.class.class.class", "M5u?9a$jpK.class.class.class", aSMifierClassVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("SourceDebugExtension", true);
      String[] stringArray0 = new String[6];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visit(196653, 54, "9a$jpK", ":Q#ZG0rF;~", "9a$jpK", stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.visit(50, 1584, "0cR9~vD/H0L", "nJ]+%q!miMp-c", "0cR9~vD/H0L", aSMifierClassVisitor0.OPCODES);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[2];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("2Y=a$pb!");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visit(48, 1, "0cR9~vD/H0L", "Opcodes.FLOAT", "nJ]+%q!miMp-c", stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("8f");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visit(46, 3389, "Y3A)Xp", "Y3A)Xp", "Y3A)Xp", aSMifierClassVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.visit(47, 8192, "a:,", "RIVATE", "RIVATE", aSMifierClassVisitor0.OPCODES);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "*P/`";
      try { 
        ASMifierClassVisitor.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "k]cf";
      try { 
        ASMifierClassVisitor.main(stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Class not found
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = " }.class";
      try { 
        ASMifierClassVisitor.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-debug";
      try { 
        ASMifierClassVisitor.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-debug";
      ASMifierClassVisitor.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      ASMifierClassVisitor.main(aSMifierClassVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASMifierClassVisitor.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      String string0 = "\\u";
      AnnotationVisitor annotationVisitor0 = aSMifierClassVisitor0.visitAnnotation(string0, false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.mockito.asm.ClassWriter";
      ASMifierClassVisitor.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("2Y=a$pb!");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.visitOuterClass("8f", "8f", "8f");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.visitInnerClass("ACC_ANNOTATION", "I!,c8Di", "I!,c8Di", 732);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.visitSource("gtJ%a>T}BVs", "gtJ%a>T}BVs");
  }
}

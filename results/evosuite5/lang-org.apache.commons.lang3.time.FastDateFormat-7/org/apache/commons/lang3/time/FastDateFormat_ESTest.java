/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 21:33:41 GMT 2019
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.AttributedCharacterIterator;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParseException;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "The validated collection contains null element at index: %d", 1, 1, 1, 1, 1, 1, 1, 1, 1);
      assertNotNull(simpleTimeZone0);
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=The validated collection contains null element at index: %d,offset=1,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("The validated collection contains null element at index: %d", simpleTimeZone0.getID());
      assertEquals(1, simpleTimeZone0.getDSTSavings());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertNotNull(fastDateFormat0);
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=The validated collection contains null element at index: %d,offset=1,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("The validated collection contains null element at index: %d", simpleTimeZone0.getID());
      assertEquals(1, simpleTimeZone0.getDSTSavings());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
      assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
      
      String string0 = fastDateFormat0.format((long) 1);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals("12:00:00 AM GMT+00:00", string0);
      assertNotNull(string0);
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=The validated collection contains null element at index: %d,offset=1,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("The validated collection contains null element at index: %d", simpleTimeZone0.getID());
      assertEquals(1, simpleTimeZone0.getDSTSavings());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
      assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDateFormat");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=org.apache.commons.lang3.time.FastDateFormat,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("org.apache.commons.lang3.time.FastDateFormat", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertNotNull(fastDateFormat0);
      assertEquals("java.util.SimpleTimeZone[id=org.apache.commons.lang3.time.FastDateFormat,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("org.apache.commons.lang3.time.FastDateFormat", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
      
      String string0 = fastDateFormat0.format((long) 0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals("12:00:00 AM GMT+00:00", string0);
      assertNotNull(string0);
      assertEquals("java.util.SimpleTimeZone[id=org.apache.commons.lang3.time.FastDateFormat,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("org.apache.commons.lang3.time.FastDateFormat", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("k'1(d$2zcvwX");
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(fastDateFormat0);
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("k'1(d$2zcvwX", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      
      String string0 = fastDateFormat0.format((long) 1);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals("241(d$2zcvwX", string0);
      assertNotNull(string0);
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("k'1(d$2zcvwX", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyyk\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2'Tz");
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertNotNull(fastDateFormat0);
      assertEquals(24, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("yyyyk\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2'Tz", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      
      String string0 = fastDateFormat0.format((-948L));
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals("196923\u5E74M\u6708d\u65E5 H\u6642mm\u5206ss\u79D2Tz", string0);
      assertNotNull(string0);
      assertEquals(24, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("yyyyk\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2'Tz", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206's'\u79D2' z");
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertNotNull(fastDateFormat0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206's'\u79D2' z", fastDateFormat0.getPattern());
      assertEquals(32, fastDateFormat0.getMaxLengthEstimate());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 1893, 1);
      assertNotNull(mockGregorianCalendar0);
      
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals("0159\u5E7410\u67081\u65E5 0\u664200\u52060\u79D2 GMT", string0);
      assertNotNull(string0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206's'\u79D2' z", fastDateFormat0.getPattern());
      assertEquals(32, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-57126124800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=159,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=274,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(fastDateFormat0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      
      String string0 = fastDateFormat0.format((-439L));
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals("12/31/69 11:59 PM", string0);
      assertNotNull(string0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("S");
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertNotNull(fastDateFormat0);
      assertEquals("S", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(4, fastDateFormat0.getMaxLengthEstimate());
      
      String string0 = fastDateFormat0.format(4116L);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals("116", string0);
      assertNotNull(string0);
      assertEquals("S", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(4, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206's'\u79D2' z");
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertNotNull(fastDateFormat0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(32, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206's'\u79D2' z", fastDateFormat0.getPattern());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206's'\u79D2' z", locale0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotNull(fastDateFormat1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals(32, fastDateFormat1.getMaxLengthEstimate());
      assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206's'\u79D2' z", fastDateFormat1.getPattern());
      
      boolean boolean0 = fastDateFormat1.equals(fastDateFormat0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertFalse(boolean0);
      assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(32, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206's'\u79D2' z", fastDateFormat0.getPattern());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals(32, fastDateFormat1.getMaxLengthEstimate());
      assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206's'\u79D2' z", fastDateFormat1.getPattern());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'P'\u6708'd'\u65E5' H'\u6642 mm\u5206sss'\u79D2' z");
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(fastDateFormat0);
      assertEquals(25, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("yyyy'P'\u6708'd'\u65E5' H'\u6642 mm\u5206sss'\u79D2' z", fastDateFormat0.getPattern());
      
      Locale locale0 = new Locale("yyyy'P'\u6708'd'\u65E5' H'\u6642 mm\u5206sss'\u79D2' z", "yyyy'P'\u6708'd'\u65E5' H'\u6642 mm\u5206sss'\u79D2' z");
      assertNotNull(locale0);
      assertEquals("yyyy'p'\u6708'd'\u65E5' h'\u6642 mm\u5206sss'\u79D2' z", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("yyyy'p'\u6708'd'\u65E5' h'\u6642 mm\u5206sss'\u79D2' z_YYYY'P'\u6708'D'\u65E5' H'\u6642 MM\u5206SSS'\u79D2' Z", locale0.toString());
      assertEquals("YYYY'P'\u6708'D'\u65E5' H'\u6642 MM\u5206SSS'\u79D2' Z", locale0.getCountry());
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("yyyy'P'\u6708'd'\u65E5' H'\u6642 mm\u5206sss'\u79D2' z", locale0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotNull(fastDateFormat1);
      assertEquals("yyyy'p'\u6708'd'\u65E5' h'\u6642 mm\u5206sss'\u79D2' z", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("yyyy'p'\u6708'd'\u65E5' h'\u6642 mm\u5206sss'\u79D2' z_YYYY'P'\u6708'D'\u65E5' H'\u6642 MM\u5206SSS'\u79D2' Z", locale0.toString());
      assertEquals("YYYY'P'\u6708'D'\u65E5' H'\u6642 MM\u5206SSS'\u79D2' Z", locale0.getCountry());
      assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals("yyyy'P'\u6708'd'\u65E5' H'\u6642 mm\u5206sss'\u79D2' z", fastDateFormat1.getPattern());
      assertEquals(25, fastDateFormat1.getMaxLengthEstimate());
      
      boolean boolean0 = fastDateFormat1.equals(fastDateFormat0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertFalse(boolean0);
      assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertEquals(25, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("yyyy'P'\u6708'd'\u65E5' H'\u6642 mm\u5206sss'\u79D2' z", fastDateFormat0.getPattern());
      assertEquals("yyyy'p'\u6708'd'\u65E5' h'\u6642 mm\u5206sss'\u79D2' z", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("yyyy'p'\u6708'd'\u65E5' h'\u6642 mm\u5206sss'\u79D2' z_YYYY'P'\u6708'D'\u65E5' H'\u6642 MM\u5206SSS'\u79D2' Z", locale0.toString());
      assertEquals("YYYY'P'\u6708'D'\u65E5' H'\u6642 MM\u5206SSS'\u79D2' Z", locale0.getCountry());
      assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals("yyyy'P'\u6708'd'\u65E5' H'\u6642 mm\u5206sss'\u79D2' z", fastDateFormat1.getPattern());
      assertEquals(25, fastDateFormat1.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertNotNull(fastDateFormat0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(0);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotNull(fastDateFormat1);
      assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals(18, fastDateFormat1.getMaxLengthEstimate());
      assertEquals("h:mm:ss a z", fastDateFormat1.getPattern());
      
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertFalse(boolean0);
      assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals(18, fastDateFormat1.getMaxLengthEstimate());
      assertEquals("h:mm:ss a z", fastDateFormat1.getPattern());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertNotNull(fastDateFormat0);
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("", fastDateFormat0.getPattern());
      
      boolean boolean0 = fastDateFormat0.equals("");
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertFalse(boolean0);
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertNotNull(fastDateFormat0);
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(fastDateFormat0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) fastDateFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: org.apache.commons.lang3.time.FastDateFormat
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertNotNull(fastDateFormat0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(mockDate0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertNotNull(attributedCharacterIterator0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0, attributedCharacterIterator0.getBeginIndex());
      assertEquals(15, attributedCharacterIterator0.getEndIndex());
      assertEquals(15, attributedCharacterIterator0.getRunLimit());
      assertEquals(0, attributedCharacterIterator0.getIndex());
      assertEquals(0, attributedCharacterIterator0.getRunStart());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\u5E74''\u6708'd'\u65E5' H'\u6642'mm\u5206'ss'\u79D2' z");
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(fastDateFormat0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(26, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("yyyy'\u5E74''\u6708'd'\u65E5' H'\u6642'mm\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("MMM d, yyyy h:mm:ss a z");
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(fastDateFormat0);
      assertEquals(33, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("MMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("xYc9qn)AHqp9#1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(" ,v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("mu){$W7t_J5Vq(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("?t7y1i{#I}rp/Pp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("@r'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Fq!y)!^VVdBY'{&7],");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("`7&`pM.O]pDa40PT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("ni>_i,Ci~W>qe<Hb5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(":<ZlL@4XA7o*S[`JK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(":yjW;_MF#.Hk7s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("g7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(">6fSbQ069p|d*HSUg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("easC0&|fXerZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(" k;00cab~`SehbG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("b&XBO`p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("[DYKsD.S`Q_CK+8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("WHR=:7aHyJB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("0-VVb~\"c#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: VV
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Unknown class: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(".-E|0=1~Tv'8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("|`QvuQ`^~ql`Zm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("^Oqw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Negative values should not be possible");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("4^L9}C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("]EJj1d+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Illegal pattern component: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("5GPmHf?d3<=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("F3iW'w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(1, FastDateFormat.LONG);
      assertNotNull(fastDateFormat0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("DS97Xh", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("KS21>C 6}cq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("wK[(K@B9RIsMng^;Xmf9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("@AtX\u0007AFa;e;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertNotNull(fastDateFormat0);
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotNull(fastDateFormat1);
      assertEquals("M/d/yy h:mm a", fastDateFormat1.getPattern());
      assertEquals(21, fastDateFormat1.getMaxLengthEstimate());
      assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, locale0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertNotNull(fastDateFormat0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("H:mm:ss z", fastDateFormat0.getPattern());
      assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
      
      fastDateFormat0.init();
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("H:mm:ss z", fastDateFormat0.getPattern());
      assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      assertNotNull(decimalFormat0);
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      assertNotNull(fieldPosition0);
      assertEquals((-1), fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getEndIndex());
      
      String string0 = fastDateFormat0.getPattern();
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals("H:mm:ss z", string0);
      assertNotNull(string0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("H:mm:ss z", fastDateFormat0.getPattern());
      assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("y^yy'P'\u6708'd'\u65E5' H'\u6642 mm\u5206sss'\u79D2' z");
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertNotNull(fastDateFormat0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("y^yy'P'\u6708'd'\u65E5' H'\u6642 mm\u5206sss'\u79D2' z", fastDateFormat0.getPattern());
      assertEquals(26, fastDateFormat0.getMaxLengthEstimate());
      
      String string0 = fastDateFormat0.format((long) 0);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals("70^70P\u6708d\u65E5 H\u6642 00\u5206000\u79D2 GMT", string0);
      assertNotNull(string0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("y^yy'P'\u6708'd'\u65E5' H'\u6642 mm\u5206sss'\u79D2' z", fastDateFormat0.getPattern());
      assertEquals(26, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance((-4379), (-4379), timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -4379
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(fastDateFormat0);
      assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
      assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 0, 0, 1);
      assertNotNull(mockGregorianCalendar0);
      
      AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(mockGregorianCalendar0);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertNotNull(attributedCharacterIterator0);
      assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
      assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62133177540000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=6,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=31,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(40, attributedCharacterIterator0.getEndIndex());
      assertEquals(0, attributedCharacterIterator0.getBeginIndex());
      assertEquals(40, attributedCharacterIterator0.getRunLimit());
      assertEquals(0, attributedCharacterIterator0.getIndex());
      assertEquals(0, attributedCharacterIterator0.getRunStart());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertNotNull(fastDateFormat0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(1, FastDateFormat.LONG);
      assertFalse(boolean0);
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1131), "s^4Tg");
      assertNotNull(simpleTimeZone0);
      assertEquals("s^4Tg", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=s^4Tg,offset=-1131,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1131), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("Z", (TimeZone) simpleTimeZone0);
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertNotNull(fastDateFormat0);
      assertEquals("s^4Tg", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=s^4Tg,offset=-1131,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1131), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("Z", fastDateFormat0.getPattern());
      
      String string0 = fastDateFormat0.format((-116L));
      assertEquals(2, FastDateFormat.MEDIUM);
      assertEquals(3, FastDateFormat.SHORT);
      assertEquals(0, FastDateFormat.FULL);
      assertEquals(1, FastDateFormat.LONG);
      assertEquals("-0000", string0);
      assertNotNull(string0);
      assertEquals("s^4Tg", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=s^4Tg,offset=-1131,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1131), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("Z", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      assertEquals("February 14, 2014", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.FRANCE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
      TimeZone timeZone1 = fastDateFormat0.getTimeZone();
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
      assertSame(timeZone1, timeZone0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1);
      assertEquals("MMMM d, yyyy", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("Z");
      assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
      
      Long long0 = new Long(3);
      String string0 = fastDateFormat0.format((Object) long0);
      assertEquals("+0000", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.toString();
      assertEquals("FastDateFormat[M/d/yy h:mm a]", string0);
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance((-1968), locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1968
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1, locale0);
      fastDateFormat0.getLocale();
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' ahh'\u65F6'mm'\u5206'ss'\u79D2'", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z");
      try { 
        fastDateFormat0.parseObject("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
         verifyException("java.text.Format", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("%MM d, yyyy h:m:ss a z");
      String string0 = fastDateFormat0.format((long) 0);
      assertEquals("%01 1, 1970 12:0:00 AM GMT", string0);
      assertEquals(35, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "The validated collection contains null element at index: %d", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
      String string0 = fastDateFormat0.format((long) 1);
      assertEquals("12:00:00 AM GMT+00:00", string0);
  }
}

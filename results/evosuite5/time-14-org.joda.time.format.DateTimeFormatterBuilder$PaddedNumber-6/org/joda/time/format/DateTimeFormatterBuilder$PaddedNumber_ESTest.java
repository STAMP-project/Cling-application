/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 22:05:47 GMT 2019
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.Writer;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DateTimeFormatterBuilder$PaddedNumber_ESTest extends DateTimeFormatterBuilder$PaddedNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (byte)0, false, 0);
      PipedWriter pipedWriter0 = new PipedWriter();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(13, 1);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      Locale locale0 = Locale.PRC;
      try { 
        dateTimeFormatterBuilder_PaddedNumber0.printTo((Writer) pipedWriter0, (ReadablePartial) localDateTime0, locale0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 0);
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Locale locale0 = Locale.GERMAN;
      dateTimeFormatterBuilder_PaddedNumber0.printTo((Writer) null, (ReadablePartial) localTime0, locale0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2724, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      MockDate mockDate0 = new MockDate();
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      Locale locale0 = new Locale("org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber", "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber", "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber");
      dateTimeFormatterBuilder_FixedNumber0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
      assertEquals(2724, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2724, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(61);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      YearMonth yearMonth0 = new YearMonth((Chronology) copticChronology0);
      Locale locale0 = new Locale("org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber", "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber", "org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber");
      dateTimeFormatterBuilder_FixedNumber0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
      assertEquals(2724, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2724, true);
      int int0 = dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength();
      assertEquals(2724, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2505, true, 2505);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber");
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Locale locale0 = new Locale("org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber");
      dateTimeFormatterBuilder_PaddedNumber0.printTo((Writer) mockPrintWriter0, 0L, (Chronology) null, 2505, dateTimeZone0, locale0);
      assertEquals("org.joda.time.format.datetimeformatterbuilder$paddednumber", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 0);
      StringBuffer stringBuffer0 = new StringBuffer("ECR12Y?=msTz6$cyb");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) 165, (Chronology) islamicChronology0, 21, dateTimeZone0, (Locale) null);
      assertEquals(0, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 06:18:24 GMT 2019
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.Visitor;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class UnionType_ESTest extends UnionType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ",");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.hasAnyTemplate();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, objectType0);
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createDefaultObjectUnion(proxyObjectType0);
      boolean boolean0 = unionType0.hasAnyTemplateInternal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      NoType noType0 = (NoType)unionType0.getRestrictedUnion(allType0);
      unionType0.matchConstraint(noType0);
      assertTrue(noType0.isNullable());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) objectType0, (JSType) allType0, (JSType) objectType0, (JSType) allType0, (JSType) allType0, (JSType) objectType0, (JSType) objectType0, (JSType) allType0, (JSType) allType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      unionType0.collapseUnion();
      assertTrue(objectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType jSType0 = unionType0.collapseUnion();
      assertFalse(jSType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, objectType0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(proxyObjectType0);
      JSType jSType1 = jSType0.collapseUnion();
      assertEquals("<Any Type>", jSType1.getDisplayName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, "Not declared as a constructor");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) enumElementType0, (JSType) enumElementType0, (JSType) enumElementType0, (JSType) objectType0, (JSType) enumElementType0, (JSType) enumElementType0, (JSType) enumElementType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      unionType0.collapseUnion();
      assertTrue(objectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
      linkedHashSet0.add(unionType0);
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        unionType0.setValidator(predicate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = unionType0.setValidator(predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      String string0 = unionType0.toDebugHashCodeString();
      assertEquals("{({262},{262},{262},{262})}", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "^y6", "Unknown class name", (-961229017), (-4450));
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, "");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) namedType0, (JSType) namedType0, (JSType) enumElementType0, (JSType) objectType0, (JSType) enumElementType0, (JSType) allType0, (JSType) namedType0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>(immutableList0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
      // Undeclared exception!
      try { 
        unionType0.resolveInternal(simpleErrorReporter0, namedType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      unionType0.resolve(simpleErrorReporter0, objectType0);
      assertTrue(allType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, allType0, "Not declared as a type name");
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Named type with empty name component", 1, 1);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) enumElementType0, (JSType) allType0, (JSType) objectType0, (JSType) namedType0, (JSType) namedType0, (JSType) objectType0, (JSType) enumElementType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      unionType0.resolveInternal(simpleErrorReporter0, objectType0);
      assertTrue(namedType0.isResolved());
      assertTrue(allType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0, true);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(instanceObjectType0);
      JSType.TypePair jSType_TypePair0 = jSType0.getTypesUnderShallowInequality(jSType0);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, "Not declared as a constructor");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) enumElementType0, (JSType) enumElementType0, (JSType) enumElementType0, (JSType) objectType0, (JSType) enumElementType0, (JSType) enumElementType0, (JSType) enumElementType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality(objectType0);
      JSType.TypePair jSType_TypePair1 = unionType0.getTypesUnderShallowInequality(jSType_TypePair0.typeB);
      assertNotSame(jSType_TypePair0, jSType_TypePair1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, (String) null);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", (String) null, 412, (-545382359));
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) enumElementType0, (JSType) objectType0, (JSType) enumElementType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) namedType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      unionType0.getTypesUnderEquality(booleanType0);
      assertTrue(objectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
      assertEquals(BooleanLiteralSet.BOTH, booleanLiteralSet0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, (String) null);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", ",", 606, 0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) namedType0, (JSType) objectType0, (JSType) enumElementType0, (JSType) objectType0, (JSType) enumElementType0, (JSType) namedType0, (JSType) objectType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
      assertEquals(BooleanLiteralSet.TRUE, booleanLiteralSet0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType jSType0 = unionType0.getRestrictedTypeGivenToBooleanOutcome(false);
      assertFalse(jSType0.isOrdinaryFunction());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.isString();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.isSubtype(unionType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "e?U#>ID", (String) null, 412, (-1609));
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) namedType0, (JSType) namedType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType jSType0 = unionType0.collapseUnion();
      assertNotNull(jSType0);
      
      boolean boolean0 = unionType0.isSubtype(jSType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType jSType0 = unionType0.getGreatestSubtype(allType0);
      assertFalse(jSType0.isNullType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, "Not declared as a type name");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) objectType0, (JSType) objectType0, (JSType) enumElementType0, (JSType) enumElementType0, (JSType) objectType0, (JSType) objectType0, (JSType) enumElementType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      String string0 = unionType0.toAnnotationString();
      assertEquals("({}|{})", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, allType0, "Not declared as a type name");
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Named type with empty name component", 1, 1);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) enumElementType0, (JSType) allType0, (JSType) objectType0, (JSType) namedType0, (JSType) namedType0, (JSType) objectType0, (JSType) enumElementType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      unionType0.getRestrictedUnion(objectType0);
      assertTrue(objectType0.hasCachedValues());
      assertTrue(enumElementType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.contains(allType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.contains(unionType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      ImmutableList<JSType> immutableList1 = ImmutableList.of((JSType) unionType0, (JSType) unionType0, (JSType) allType0, (JSType) allType0);
      UnionType unionType1 = new UnionType(jSTypeRegistry0, immutableList1);
      boolean boolean0 = unionType0.isEquivalentTo(unionType1);
      assertTrue(unionType1.equals((Object)unionType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, objectType0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(proxyObjectType0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) objectType0, (JSType) objectType0, jSType0, jSType0, jSType0, jSType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.isEquivalentTo(jSType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, objectType0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(proxyObjectType0);
      boolean boolean0 = jSType0.isEquivalentTo((JSType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, (String) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) objectType0, (JSType) objectType0, (JSType) enumElementType0, (JSType) enumElementType0, (JSType) objectType0, (JSType) objectType0, (JSType) enumElementType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      unionType0.meet(arrowType0);
      assertTrue(objectType0.hasCachedValues());
      assertFalse(enumElementType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      NoType noType0 = (NoType)unionType0.getRestrictedUnion(allType0);
      unionType0.meet(noType0);
      assertTrue(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, "Not declared as a constructor");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) enumElementType0, (JSType) enumElementType0, (JSType) objectType0, (JSType) enumElementType0, (JSType) objectType0, (JSType) objectType0, (JSType) enumElementType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNative0;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      JSType jSType1 = unionType0.meet(jSType0);
      assertSame(jSType1, objectType0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, "Not declared as a constructor");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) enumElementType0, (JSType) enumElementType0, (JSType) objectType0, (JSType) enumElementType0, (JSType) objectType0, (JSType) objectType0, (JSType) enumElementType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType jSType0 = unionType0.meet(unionType0);
      assertFalse(jSType0.isNullType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, "Not declared as a constructor");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) enumElementType0, (JSType) enumElementType0, (JSType) enumElementType0, (JSType) objectType0, (JSType) enumElementType0, (JSType) enumElementType0, (JSType) enumElementType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      unionType0.meet(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, (String) null);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", ",", 606, 0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) namedType0, (JSType) objectType0, (JSType) enumElementType0, (JSType) objectType0, (JSType) enumElementType0, (JSType) namedType0, (JSType) objectType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      unionType0.getLeastSupertype(enumElementType0);
      assertTrue(objectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ")");
      JSType jSType0 = errorFunctionType0.getReturnType();
      JSType jSType1 = jSTypeRegistry0.createDefaultObjectUnion(jSType0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType2 = jSType1.getLeastSupertype(stringType0);
      assertNotSame(jSType2, jSType1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType jSType0 = unionType0.getLeastSupertype(unionType0);
      assertFalse(jSType0.isParameterizedType());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Unknown class name", (-987982297), (-1023));
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) objectType0, (JSType) objectType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType jSType0 = unionType0.getLeastSupertype(namedType0);
      assertFalse(jSType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0, true);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(instanceObjectType0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, (JSType) allType0, (JSType) noObjectType0, (JSType) noObjectType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType jSType1 = unionType0.collapseUnion();
      assertTrue(jSType1.hasDisplayName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, allType0, "Not declared as a type name");
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Named type with empty name component", 1, 1);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) enumElementType0, (JSType) allType0, (JSType) objectType0, (JSType) namedType0, (JSType) namedType0, (JSType) objectType0, (JSType) enumElementType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.isNullable();
      assertTrue(objectType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.isNullable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, objectType0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(proxyObjectType0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) objectType0, (JSType) objectType0, jSType0, jSType0, jSType0, jSType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.canTestForEqualityWith(objectType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType jSType0 = unionType0.restrictByNotNullOrUndefined();
      assertFalse(jSType0.isOrdinaryFunction());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType jSType0 = unionType0.autobox();
      assertFalse(jSType0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "e?U#>ID", (String) null, (-1609), (-1609));
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) namedType0, (JSType) namedType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.canBeCalled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.canBeCalled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, (String) null);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "e?U#>ID", (String) null, 445, (-1609));
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) objectType0, (JSType) enumElementType0, (JSType) objectType0, (JSType) enumElementType0, (JSType) objectType0, (JSType) objectType0, (JSType) namedType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.canAssignTo(namedType0);
      assertTrue(objectType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, objectType0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(proxyObjectType0);
      boolean boolean0 = jSType0.canAssignTo(jSType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality(allType0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = voidType0.restrictByNotNullOrUndefined();
      ImmutableList<JSType> immutableList1 = ImmutableList.of((JSType) unionType0, (JSType) unionType0, jSType_TypePair0.typeA, (JSType) allType0, jSType0, jSType_TypePair0.typeA, jSType0, jSType_TypePair0.typeA, (JSType) voidType0);
      UnionType unionType1 = new UnionType(jSTypeRegistry0, immutableList1);
      NoType noType0 = (NoType)unionType1.findPropertyType("!R]-]83H<A/E?Y>-");
      assertTrue(noType0.hasInstanceType());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, objectType0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(proxyObjectType0);
      JSType jSType1 = jSType0.findPropertyType("");
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, (Node) null, (JSType) null, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) arrowType0, (JSType) allType0, (JSType) arrowType0, (JSType) arrowType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.matchesObjectContext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      boolean boolean0 = unionType0.matchesObjectContext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, "Not declared as a constructor");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) enumElementType0, (JSType) enumElementType0, (JSType) objectType0, (JSType) enumElementType0, (JSType) objectType0, (JSType) objectType0, (JSType) enumElementType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.matchesStringContext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.matchesStringContext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, objectType0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(proxyObjectType0);
      boolean boolean0 = jSType0.matchesUint32Context();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.matchesUint32Context();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, (String) null);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "e?U#>ID", (String) null, 445, (-1609));
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) objectType0, (JSType) enumElementType0, (JSType) objectType0, (JSType) enumElementType0, (JSType) objectType0, (JSType) objectType0, (JSType) namedType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      Visitor<ParameterizedType> visitor0 = (Visitor<ParameterizedType>) mock(Visitor.class, new ViolatedAssumptionAnswer());
      doReturn((ParameterizedType) null).when(visitor0).caseUnionType(any(com.google.javascript.rhino.jstype.UnionType.class));
      ParameterizedType parameterizedType0 = unionType0.visit(visitor0);
      assertNull(parameterizedType0);
  }
}

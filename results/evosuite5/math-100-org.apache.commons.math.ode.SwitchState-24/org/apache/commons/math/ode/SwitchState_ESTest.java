/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 12:05:34 GMT 2019
 */

package org.apache.commons.math.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.DummyStepInterpolator;
import org.apache.commons.math.ode.SwitchState;
import org.apache.commons.math.ode.SwitchingFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class SwitchState_ESTest extends SwitchState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.054293734116568765, (-281.4391715439987), 0.0, 0.0).when(switchingFunction0).g(anyDouble() , any(double[].class));
      double[] doubleArray0 = new double[7];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      SwitchState switchState0 = new SwitchState(switchingFunction0, 0.054293734116568765, 115.49730880040129, 2);
      switchState0.stepAccepted(2, doubleArray0);
      // Undeclared exception!
      try { 
        switchState0.evaluateStep(dummyStepInterpolator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Function values at endpoints do not have different signs.  Endpoints: [2.0,NaN]  Values: [0.0,0.0]
         //
         verifyException("org.apache.commons.math.analysis.BrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(switchingFunction0).eventOccurred(anyDouble() , any(double[].class));
      doReturn(0.054293734116568765, (-281.4391715439987), (-281.4391715439987), 952.332, 0.054293734116568765).when(switchingFunction0).g(anyDouble() , any(double[].class));
      double[] doubleArray0 = new double[7];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      SwitchState switchState0 = new SwitchState(switchingFunction0, 0.054293734116568765, 952.332, 3);
      switchState0.stepAccepted(3, doubleArray0);
      switchState0.evaluateStep(dummyStepInterpolator0);
      switchState0.stepAccepted((-281.4391715439987), doubleArray0);
      assertEquals(3.0, switchState0.getEventTime(), 0.01);
      
      boolean boolean0 = switchState0.reset(1, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[7];
      SwitchState switchState0 = new SwitchState(switchingFunction0, 0.054293734116568765, 952.332, 3);
      boolean boolean0 = switchState0.reset((-2864.498316), doubleArray0);
      assertFalse(switchState0.stop());
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.054293734116568765, (-281.4391715439987), (-281.4391715439987), 952.332, 0.054293734116568765).when(switchingFunction0).g(anyDouble() , any(double[].class));
      double[] doubleArray0 = new double[7];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      SwitchState switchState0 = new SwitchState(switchingFunction0, 0.054293734116568765, 952.332, 3);
      switchState0.stepAccepted(3, doubleArray0);
      switchState0.evaluateStep(dummyStepInterpolator0);
      assertEquals(3.0, switchState0.getEventTime(), 0.01);
      
      boolean boolean0 = switchState0.reset(1, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(switchingFunction0).eventOccurred(anyDouble() , any(double[].class));
      doReturn(0.054293734116568765, (-281.4391715439987), (-231.5293791760455), 952.332, 0.054293734116568765).when(switchingFunction0).g(anyDouble() , any(double[].class));
      double[] doubleArray0 = new double[7];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      SwitchState switchState0 = new SwitchState(switchingFunction0, 0.054293734116568765, 106.9151186, 3);
      switchState0.stepAccepted(3, doubleArray0);
      switchState0.evaluateStep(dummyStepInterpolator0);
      switchState0.stepAccepted((-231.5293791760455), doubleArray0);
      boolean boolean0 = switchState0.stop();
      assertEquals(3.0, switchState0.getEventTime(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      SwitchState switchState0 = new SwitchState(switchingFunction0, 0.054293734116568765, 952.332, 3);
      boolean boolean0 = switchState0.stop();
      assertFalse(boolean0);
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-269.267101409623)).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, (-269.267101409623), (-3789), (-3789));
      switchState0.stepAccepted((-3789), doubleArray0);
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
      assertFalse(switchState0.stop());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(switchingFunction0).eventOccurred(anyDouble() , any(double[].class));
      doReturn(0.054293734116568765, (-281.4391715439987), (-231.5293791760455), 952.332, 0.054293734116568765).when(switchingFunction0).g(anyDouble() , any(double[].class));
      double[] doubleArray0 = new double[7];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      SwitchState switchState0 = new SwitchState(switchingFunction0, 0.054293734116568765, 115.49730880040129, 2);
      switchState0.stepAccepted(2, doubleArray0);
      switchState0.evaluateStep(dummyStepInterpolator0);
      switchState0.stepAccepted((-231.5293791760455), doubleArray0);
      // Undeclared exception!
      try { 
        switchState0.evaluateStep(dummyStepInterpolator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Function values at endpoints do not have different signs.  Endpoints: [-231.5293791760455,NaN]  Values: [0.054293734116568765,0.054293734116568765]
         //
         verifyException("org.apache.commons.math.analysis.BrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.054293734116568765).when(switchingFunction0).g(anyDouble() , any(double[].class));
      double[] doubleArray0 = new double[7];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      SwitchState switchState0 = new SwitchState(switchingFunction0, 0.054293734116568765, 952.332, 3);
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
      
      switchState0.evaluateStep(dummyStepInterpolator0);
      assertFalse(switchState0.stop());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(580.0, (-291.73672690189466), 0.0, 0.0).when(switchingFunction0).g(anyDouble() , any(double[].class));
      double[] doubleArray0 = new double[5];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      dummyStepInterpolator0.currentTime = (double) 1153;
      SwitchState switchState0 = new SwitchState(switchingFunction0, 580.0, (-291.73672690189466), 1153);
      switchState0.stepAccepted(580.0, doubleArray0);
      // Undeclared exception!
      try { 
        switchState0.evaluateStep(dummyStepInterpolator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Function values at endpoints do not have different signs.  Endpoints: [580.0,1444.7367269018946]  Values: [0.0,0.0]
         //
         verifyException("org.apache.commons.math.analysis.BrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.054293734116568765, (-281.4391715439987), (-281.4391715439987), 952.332, 0.054293734116568765).when(switchingFunction0).g(anyDouble() , any(double[].class));
      double[] doubleArray0 = new double[7];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      SwitchState switchState0 = new SwitchState(switchingFunction0, 0.054293734116568765, 952.332, 3);
      switchState0.stepAccepted(3, doubleArray0);
      switchState0.evaluateStep(dummyStepInterpolator0);
      switchState0.reinitializeBegin(952.332, doubleArray0);
      assertEquals(3.0, switchState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2368.04678758)).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, (-622.869049216897), (-622.869049216897), 0);
      double[] doubleArray0 = new double[0];
      switchState0.reinitializeBegin(34.08233, doubleArray0);
      assertFalse(switchState0.stop());
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      SwitchState switchState0 = new SwitchState(switchingFunction0, 2056, 2056, 2056);
      double double0 = switchState0.getEventTime();
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(switchState0.stop());
  }
}

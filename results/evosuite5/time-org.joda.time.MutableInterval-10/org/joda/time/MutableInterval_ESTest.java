/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 21:42:48 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalTime;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.Period;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.chrono.ISOChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MutableInterval_ESTest extends MutableInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      Duration duration0 = new Duration(dateMidnight0, dateMidnight0);
      MutableInterval mutableInterval0 = new MutableInterval(dateMidnight0, duration0);
      mutableInterval0.setPeriodBeforeEnd((ReadablePeriod) null);
      assertEquals((-3600000L), mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Period period0 = mutableInterval0.toPeriod();
      mutableInterval0.setPeriodBeforeEnd(period0);
      assertEquals(0L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      Duration duration0 = new Duration(dateMidnight0, dateMidnight0);
      MutableInterval mutableInterval0 = new MutableInterval(dateMidnight0, duration0);
      mutableInterval0.setPeriodAfterStart((ReadablePeriod) null);
      assertEquals(1392332400000L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Months months0 = Months.THREE;
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, months0);
      mutableInterval0.setInterval((ReadableInstant) null, (ReadableInstant) null);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) iSOChronology0);
      mutableInterval0.setInterval((ReadableInstant) null, (ReadableInstant) mutableDateTime0);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      DateTime dateTime0 = new DateTime();
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      Duration duration0 = new Duration(dateMidnight0, dateMidnight0);
      MutableInterval mutableInterval0 = new MutableInterval(dateMidnight0, duration0);
      // Undeclared exception!
      try { 
        mutableInterval0.setInterval((ReadableInterval) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Interval must not be null
         //
         verifyException("org.joda.time.MutableInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(2222L, 1000000000000000000L);
      mutableInterval0.setInterval((ReadableInterval) mutableInterval0);
      assertEquals(2222L, mutableInterval0.getStartMillis());
      assertEquals(1000000000000000000L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((Object) null);
      Seconds seconds0 = Seconds.ONE;
      Duration duration0 = seconds0.toStandardDuration();
      mutableInterval0.setDurationAfterStart((ReadableDuration) duration0);
      assertEquals(1392409282320L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Instant instant0 = new Instant();
      LocalTime localTime0 = LocalTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1058);
      DateTime dateTime0 = localTime0.toDateTimeToday(dateTimeZone0);
      MutableInterval mutableInterval0 = new MutableInterval(instant0, dateTime0);
      assertEquals(1392412880262L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      // Undeclared exception!
      try { 
        mutableInterval0.setDurationAfterStart((-3534L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      mutableInterval0.setEnd((ReadableInstant) null);
      assertEquals(1392409281320L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Duration duration0 = Duration.standardSeconds(4378L);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      assertEquals((-4378000L), mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      DateTime dateTime0 = new DateTime();
      MutableInterval mutableInterval0 = new MutableInterval(hours0, dateTime0);
      assertEquals(1392384081320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null);
      MutableInterval mutableInterval0 = new MutableInterval(mutableDateTime0, (ReadableDuration) null);
      mutableInterval0.setStart(mutableDateTime0);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      // Undeclared exception!
      try { 
        mutableInterval0.setDurationBeforeEnd((-1047L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      assertNotSame(mutableInterval1, mutableInterval0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Duration duration0 = Duration.standardDays(1248L);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      MutableInterval mutableInterval0 = new MutableInterval(duration0, mutableDateTime0);
      MutableInterval mutableInterval1 = new MutableInterval(mutableInterval0, (Chronology) null);
      assertTrue(mutableInterval1.equals((Object)mutableInterval0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutableInterval mutableInterval0 = MutableInterval.parse((String) null);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(2222L, 1000000000000000000L);
      Hours hours0 = Hours.SEVEN;
      mutableInterval0.setPeriodAfterStart(hours0);
      assertEquals(25202222L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      MutableInterval mutableInterval1 = mutableInterval0.toMutableInterval();
      assertNotSame(mutableInterval0, mutableInterval1);
  }
}

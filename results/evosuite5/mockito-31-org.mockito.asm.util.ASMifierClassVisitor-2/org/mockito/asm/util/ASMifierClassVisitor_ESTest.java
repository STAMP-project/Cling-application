/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 20:58:24 GMT 2019
 */

package org.mockito.asm.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.mockito.asm.AnnotationVisitor;
import org.mockito.asm.FieldVisitor;
import org.mockito.asm.MethodVisitor;
import org.mockito.asm.util.ASMifierClassVisitor;
import org.mockito.asm.util.ASMifierMethodVisitor;
import org.mockito.asm.util.AbstractVisitor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ASMifierClassVisitor_ESTest extends ASMifierClassVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ACC_VARARGS");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visitInnerClass("", "ACC_VARARGS", "D%cT", 131072);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Ho@<x.class", "Ho@<x.class");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.appendAccess(2048);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-c/IpD}?a^+-");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      ASMifierMethodVisitor aSMifierMethodVisitor0 = aSMifierClassVisitor0.createASMifierMethodVisitor();
      aSMifierClassVisitor0.visit(2688, 2688, "", "-c/IpD}?a^+-", "D]OZ=p0f&-m`[", aSMifierMethodVisitor0.OPCODES);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("mv.visitLineNumber(");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visit(1024, 1024, "r fv;\n", "Usage: ASMifierClassVisitor [-debug] <fully qualified class name or class file name>", "mv = cw.visitMethod(", aSMifierClassVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("RuntimeVisibleParameterAnnotations");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      ASMifierMethodVisitor aSMifierMethodVisitor0 = aSMifierClassVisitor0.createASMifierMethodVisitor();
      aSMifierClassVisitor0.visit(8192, 8192, "RuntimeVisibleParameterAnnotations", "V1_3", "ACC_FINAL", aSMifierMethodVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      File file0 = MockFile.createTempFile("'XWp\"", "'XWp\"", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visit((-2548), 16384, "l<J-p", "l<J-p", "l<J-p", aSMifierClassVisitor0.OPCODES);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.appendAccess(65535);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("mv.visitLineNumber(");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.appendAccess(256);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-c/IpD}?a^+-");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      FieldVisitor fieldVisitor0 = aSMifierClassVisitor0.visitField(2688, "-c/IpD}?a^+-", "-debug", "", "MethodVisitor mv;\n");
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod(128, "", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", aSMifierClassVisitor0.OPCODES);
      assertNotNull(methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(5yl-");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.appendAccess(192);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-c/IpD}?a^+-");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      FieldVisitor fieldVisitor0 = aSMifierClassVisitor0.visitField(32767, "-c/IpD}?a^+-", "-c/IpD}?a^+-", "-c/IpD}?a^+-", "-c/IpD}?a^+-");
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("RuntimeVisibleParameterAnnotations");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      ASMifierMethodVisitor aSMifierMethodVisitor0 = aSMifierClassVisitor0.createASMifierMethodVisitor();
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod((-2240), "", "", "mv.visitLineNumber(", aSMifierMethodVisitor0.TYPES);
      assertFalse(methodVisitor0.equals((Object)aSMifierMethodVisitor0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("RuntimeVisibleParameterAnnotations");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      ASMifierMethodVisitor aSMifierMethodVisitor0 = aSMifierClassVisitor0.createASMifierMethodVisitor();
      aSMifierClassVisitor0.visit(32, 32, "cw", "RuntimeVisibleParameterAnnotations", "cw", aSMifierMethodVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.visit(195, 136, "return cw.toByteArray();\n", "new byte[] {", ".visit(", aSMifierClassVisitor0.OPCODES);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      String[] stringArray0 = new String[0];
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod((-467), "'XW|\"", "7_ft/b", "'XW|\"", stringArray0);
      assertNotNull(methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod((-467), "", "", "up(oZpHT?=", (String[]) null);
      MethodVisitor methodVisitor1 = aSMifierClassVisitor0.visitMethod((-467), ", new Label[] {", "Usage: ASMifierClassVisitor [-debug] <fully qualified class name or class file name>", "dp", ((AbstractVisitor) methodVisitor0).TYPES);
      assertNotSame(methodVisitor0, methodVisitor1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      String[] stringArray0 = new String[0];
      aSMifierClassVisitor0.visit(48, 48, "Prints the ASM code to generate the given class.", "X", "", stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.visit((-467), 262144, "", "", "J2k~QUeHjvl([e", (String[]) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("RuntimeVisibleParameterAnnotations");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visit(50, (-5500), "RuntimeVisibleParameterAnnotations", "|FM56", "RuntimeVisibleParameterAnnotations", aSMifierClassVisitor0.OPCODES);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-c/IpD}?a^+-");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      ASMifierMethodVisitor aSMifierMethodVisitor0 = aSMifierClassVisitor0.createASMifierMethodVisitor();
      aSMifierClassVisitor0.visit(49, (-467), "-c/IpD}?a^+-", "", "", aSMifierMethodVisitor0.OPCODES);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.visit(47, 4096, "cw.visitOuterClass(", "X", "", aSMifierClassVisitor0.OPCODES);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("RuntimeVisibleParameterAnnotations");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      ASMifierMethodVisitor aSMifierMethodVisitor0 = aSMifierClassVisitor0.createASMifierMethodVisitor();
      aSMifierClassVisitor0.visit(46, 46, "^[|k(l=W.TUCs2", "^[|k(l=W.TUCs2", "return cw.toByteArray();\n", aSMifierMethodVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.visit(196653, 196653, "!.Qwm!m ]^8)/", "'A+FE{>Z9#_9T:W;4", "g^@", aSMifierClassVisitor0.TYPES);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-c/IpD}?a^+-";
      try { 
        ASMifierClassVisitor.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Ho@<x";
      try { 
        ASMifierClassVisitor.main(stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Class not found
         //
         verifyException("org.mockito.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ACC_FINAL.class";
      try { 
        ASMifierClassVisitor.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-debug";
      ASMifierClassVisitor.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-debug";
      try { 
        ASMifierClassVisitor.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASMifierClassVisitor.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      AnnotationVisitor annotationVisitor0 = aSMifierClassVisitor0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      MethodVisitor methodVisitor0 = aSMifierClassVisitor0.visitMethod((-467), "", "", "up(oZpHT?=", (String[]) null);
      ASMifierClassVisitor.main(((AbstractVisitor) methodVisitor0).TYPES);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFile mockFile0 = new MockFile("mv.visitLocalVariable(", "mv.visitLocalVariable(");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-c/IpD}?a^+-");
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor(mockPrintWriter0);
      aSMifierClassVisitor0.visitOuterClass("", "", "");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.visitInnerClass("-debug", "r fv;\n", "'XWp\"", 65535);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ASMifierClassVisitor aSMifierClassVisitor0 = new ASMifierClassVisitor((PrintWriter) null);
      aSMifierClassVisitor0.visitSource("dp", "");
  }
}

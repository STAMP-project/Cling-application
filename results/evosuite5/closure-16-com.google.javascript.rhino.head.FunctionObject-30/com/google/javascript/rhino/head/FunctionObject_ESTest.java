/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 04:36:09 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeJavaMethod;
import com.google.javascript.rhino.head.NativeNumber;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.Script;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.TopLevel;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionObject_ESTest extends FunctionObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test00()  throws Throwable  {
      Class<NativeCall> class0 = NativeCall.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      FunctionObject functionObject0 = new FunctionObject("error reporter", method0, importerTopLevel0);
      boolean boolean0 = functionObject0.isVarArgsConstructor();
      assertFalse(boolean0);
      assertEquals(2, methodArray0.length);
      assertEquals("error reporter", functionObject0.getFunctionName());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test01()  throws Throwable  {
      Class<NativeCall> class0 = NativeCall.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      assertEquals(2, methodArray0.length);
      
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      FunctionObject functionObject0 = new FunctionObject("error reporter", method0, importerTopLevel0);
      Scriptable scriptable0 = functionObject0.createObject(context0, importerTopLevel0);
      functionObject0.call(context0, scriptable0, scriptable0, context0.emptyArgs);
      assertEquals("error reporter", functionObject0.getFunctionName());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test02()  throws Throwable  {
      Class<NativeCall> class0 = NativeCall.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      FunctionObject functionObject0 = new FunctionObject("language version", method0, importerTopLevel0);
      // Undeclared exception!
      try { 
        functionObject0.call(context0, importerTopLevel0, importerTopLevel0, context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"language version\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test03()  throws Throwable  {
      Class<NativeCall> class0 = NativeCall.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.Array;
      BaseFunction baseFunction0 = importerTopLevel0.getBuiltinCtor(topLevel_Builtins0);
      FunctionObject functionObject0 = new FunctionObject("language version", method0, baseFunction0);
      // Undeclared exception!
      try { 
        functionObject0.call(context0, importerTopLevel0, baseFunction0, context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"language version\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test04()  throws Throwable  {
      Class<NativeCall> class0 = NativeCall.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      FunctionObject functionObject0 = new FunctionObject("error reporter", method0, importerTopLevel0);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeIterator_StopIteration0, nativeIterator_StopIteration0, context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"error reporter\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test05()  throws Throwable  {
      Class<NativeCall> class0 = NativeCall.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      assertNotNull(method0);
      
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      FunctionObject functionObject0 = new FunctionObject("error reporter", method0, importerTopLevel0);
      Scriptable scriptable0 = functionObject0.createObject(context0, importerTopLevel0);
      functionObject0.call(context0, scriptable0, scriptable0, methodArray0);
      assertEquals(2, methodArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test06()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Context context0 = Context.getContext();
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeError0, (Object) nativeError0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't convert to type \"java.lang.reflect.Method\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test07()  throws Throwable  {
      Class<NativeJavaMethod> class0 = NativeJavaMethod.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "call");
      Method[] methodArray1 = new Method[5];
      methodArray1[0] = method0;
      methodArray1[1] = methodArray1[0];
      // Undeclared exception!
      try { 
        FunctionObject.findSingleMethod(methodArray1, "call");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"call\" occurs multiple times in class \"com.google.javascript.rhino.head.NativeJavaMethod\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Method[] methodArray0 = new Method[5];
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "call");
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<NativeCall> class0 = NativeCall.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("error reporter", method0, importerTopLevel0);
      functionObject0.getMethodOrConstructor();
      assertEquals("error reporter", functionObject0.getFunctionName());
      assertEquals(2, methodArray0.length);
      assertEquals(0, functionObject0.getLength());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<NativeCall> class0 = NativeCall.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("error reporter", method0, importerTopLevel0);
      String string0 = functionObject0.getFunctionName();
      assertEquals("error reporter", string0);
      assertEquals(2, methodArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test11()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.Error;
      Scriptable scriptable0 = importerTopLevel0.getBuiltinPrototype(topLevel_Builtins0);
      Double double0 = new Double(9);
      Object object0 = FunctionObject.convertArg(context0, scriptable0, (Object) double0, 4);
      assertEquals(9.0, object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Context context0 = Context.enter();
      NativeCall nativeCall0 = context0.currentActivationCall;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeIterator_StopIteration0, (Object) nativeCall0, 3);
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Object object0 = FunctionObject.convertArg((Context) null, (Scriptable) nativeIterator_StopIteration0, (Object) nativeIterator_StopIteration0.PERMANENT, 2);
      assertEquals(4, object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(0.0);
      Object object0 = FunctionObject.convertArg((Context) null, (Scriptable) nativeNumber0, (Object) "L<Ef", 1);
      assertEquals("L<Ef", object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeIterator_StopIteration0, (Object) nativeIterator_StopIteration0, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test16()  throws Throwable  {
      Context context0 = Context.getContext();
      NativeObject nativeObject0 = new NativeObject();
      FunctionObject.convertArg((Context) null, (Scriptable) nativeObject0, (Object) context0, 6);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Context context0 = Context.getCurrentContext();
      NativeIterator.StopIteration nativeIterator_StopIteration1 = (NativeIterator.StopIteration)FunctionObject.convertArg(context0, (Scriptable) nativeIterator_StopIteration0, (Object) nativeIterator_StopIteration0, 5);
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      // Undeclared exception!
      try { 
        FunctionObject.convertArg((Context) null, (Scriptable) nativeError0, (Object) nativeError0, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Object object0 = FunctionObject.convertArg((Context) null, (Scriptable) nativeIterator_StopIteration0, (Object) null, 2);
      assertNotNull(object0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Context context0 = new Context();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) null, (Object) null, 1);
      assertNotNull(object0);
      assertEquals("null", object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Double> class0 = Double.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test23()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Context context0 = Context.getContext();
      Class<Boolean> class0 = Boolean.class;
      FunctionObject.convertArg(context0, (Scriptable) nativeError0, (Object) context0.generateObserverCount, (Class<?>) class0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test26()  throws Throwable  {
      Class<NativeJavaMethod> class0 = NativeJavaMethod.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeError nativeError0 = new NativeError();
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "call");
      FunctionObject functionObject0 = null;
      try {
        functionObject0 = new FunctionObject("call", method0, nativeError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported parameter type \"com.google.javascript.rhino.head.Context\" in method \"call\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaAdapter.runScript((Script) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.JavaAdapter$2", e);
      }
  }
}

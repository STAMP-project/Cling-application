/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 06:30:42 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.NativeBoolean;
import com.google.javascript.rhino.head.NativeJavaClass;
import com.google.javascript.rhino.head.NativeNumber;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.NativeString;
import com.google.javascript.rhino.head.Script;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionObject_ESTest extends FunctionObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(13);
      Class<BaseFunction> class0 = BaseFunction.class;
      FunctionObject functionObject0 = (FunctionObject)ScriptableObject.buildClassCtor((Scriptable) nativeNumber0, class0, false, false);
      boolean boolean0 = functionObject0.isVarArgsConstructor();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeNumber nativeNumber0 = new NativeNumber(13);
      Class<BaseFunction> class0 = BaseFunction.class;
      BaseFunction baseFunction0 = ScriptableObject.buildClassCtor((Scriptable) nativeNumber0, class0, false, false);
      Scriptable scriptable0 = baseFunction0.createObject(context0, nativeNumber0);
      assertNull(scriptable0);
      assertEquals("Function", baseFunction0.getFunctionName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeNumber nativeNumber0 = new NativeNumber(150);
      Class<BaseFunction> class0 = BaseFunction.class;
      BaseFunction baseFunction0 = ScriptableObject.buildClassCtor((Scriptable) nativeNumber0, class0, false, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) nativeNumber0;
      baseFunction0.call(context0, nativeNumber0, nativeNumber0, objectArray0);
      assertEquals("Function", baseFunction0.getFunctionName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeNumber nativeNumber0 = new NativeNumber(150);
      Class<BaseFunction> class0 = BaseFunction.class;
      BaseFunction baseFunction0 = ScriptableObject.buildClassCtor((Scriptable) nativeNumber0, class0, false, false);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        baseFunction0.call(context0, nativeNumber0, nativeNumber0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeBoolean0, (Object) null, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't convert to type \"java.lang.reflect.Method\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enter();
      Class<Double> class0 = Double.class;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) baseFunction0, (Object) contextFactory0, (Class<?>) class0);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test06()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      // Undeclared exception!
      try { 
        FunctionObject.findSingleMethod(methodArray0, "hashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"hashCode\" occurs multiple times in class \"java.lang.Double\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Method[] methodArray0 = new Method[5];
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "error reporter");
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(13);
      Class<BaseFunction> class0 = BaseFunction.class;
      FunctionObject functionObject0 = (FunctionObject)ScriptableObject.buildClassCtor((Scriptable) nativeNumber0, class0, false, false);
      Constructor constructor0 = (Constructor)functionObject0.getMethodOrConstructor();
      assertEquals("public com.google.javascript.rhino.head.BaseFunction(com.google.javascript.rhino.head.Scriptable,com.google.javascript.rhino.head.Scriptable)", constructor0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(13);
      Class<BaseFunction> class0 = BaseFunction.class;
      BaseFunction baseFunction0 = ScriptableObject.buildClassCtor((Scriptable) nativeNumber0, class0, false, false);
      String string0 = baseFunction0.getFunctionName();
      assertTrue(nativeNumber0.isEmpty());
      assertEquals("Function", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Context context0 = new Context();
      NativeString nativeString0 = new NativeString("error reporter");
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeString0, (Object) null, 3);
      assertNotNull(object0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Context context0 = Context.enter();
      NativeNumber nativeNumber0 = new NativeNumber(9);
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeNumber0, (Object) "(new ", 1);
      assertEquals("(new ", object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Context context0 = new Context();
      NativeNumber nativeNumber0 = new NativeNumber(150);
      Class<NativeObject> class0 = NativeObject.class;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeNumber0, (Object) class0, 140);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Context context0 = new Context();
      NativeString nativeString0 = new NativeString("language version");
      NativeString nativeString1 = (NativeString)FunctionObject.convertArg(context0, (Scriptable) nativeString0, (Object) nativeString0, 6);
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeNumber nativeNumber0 = new NativeNumber(13);
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeNumber0, (Object) "error reporter", 3);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Context context0 = new Context();
      NativeString nativeString0 = new NativeString("language version");
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeString0, (Object) nativeString0, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeNumber nativeNumber0 = new NativeNumber(13);
      Class<BaseFunction> class0 = BaseFunction.class;
      BaseFunction baseFunction0 = ScriptableObject.buildClassCtor((Scriptable) nativeNumber0, class0, false, false);
      // Undeclared exception!
      try { 
        baseFunction0.call(context0, nativeNumber0, nativeNumber0, context0.emptyArgs);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Wrapped org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeString nativeString0 = new NativeString("error reporter");
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeString0, (Object) nativeString0, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<String> class0 = String.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test23()  throws Throwable  {
      NativeString nativeString0 = new NativeString("error reporter");
      Class<NativeJavaClass> class0 = NativeJavaClass.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) nativeString0, class0, false, false);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Unsupported parameter type \"java.lang.Class\" in method \"com.google.javascript.rhino.head.NativeJavaClass\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(150);
      Class<NativeObject> class0 = NativeObject.class;
      ScriptableObject.defineClass((Scriptable) nativeNumber0, class0, false);
      assertFalse(nativeNumber0.isSealed());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaAdapter.runScript((Script) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.JavaAdapter$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(150);
      Class<BaseFunction> class0 = BaseFunction.class;
      FunctionObject functionObject0 = (FunctionObject)ScriptableObject.buildClassCtor((Scriptable) nativeNumber0, class0, false, false);
      // Undeclared exception!
      try { 
        functionObject0.addAsConstructor(nativeNumber0, nativeNumber0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.BaseFunction", e);
      }
  }
}

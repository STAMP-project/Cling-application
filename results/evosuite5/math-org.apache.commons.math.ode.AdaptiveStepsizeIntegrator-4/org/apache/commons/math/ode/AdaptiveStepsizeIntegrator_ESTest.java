/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 22:48:54 GMT 2019
 */

package org.apache.commons.math.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.ContinuousOutputModel;
import org.apache.commons.math.ode.DormandPrince54Integrator;
import org.apache.commons.math.ode.DormandPrince853Integrator;
import org.apache.commons.math.ode.FirstOrderConverter;
import org.apache.commons.math.ode.GraggBulirschStoerIntegrator;
import org.apache.commons.math.ode.HighamHall54Integrator;
import org.apache.commons.math.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math.ode.SwitchingFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AdaptiveStepsizeIntegrator_ESTest extends AdaptiveStepsizeIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(501.440529753175, 8.0, 1290.49, 0.25);
      double double0 = dormandPrince853Integrator0.filterStep((-2595.45), true);
      assertEquals(63.33659477762757, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals((-8.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2827.97247, 2827.97247, (-3.5362792904764904), 1.0E-12);
      try { 
        dormandPrince853Integrator0.filterStep(8, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // minimal step size (2,827.972) reached, integration needs 8
         //
         verifyException("org.apache.commons.math.ode.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(9.0, 2827.97247, (-5064.861136508), 2827.97247);
      double double0 = dormandPrince853Integrator0.filterStep(2.9525986892242035, true);
      assertEquals(9.0, double0, 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(159.5360530726519, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-2595.45), (-2595.45), (-2595.45), (-2268.4962843134426));
      double double0 = dormandPrince853Integrator0.filterStep((-2268.4962843134426), true);
      assertEquals(2595.45, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals((-2595.45), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-2595.45), (-2595.45), (-2595.45), (-2268.4962843134426));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2595.45);
      doubleArray0[1] = (-2268.4962843134426);
      doubleArray0[2] = (-2595.45);
      doubleArray0[3] = (double) 1114;
      doubleArray0[4] = (-2268.4962843134426);
      doubleArray0[5] = (-2595.45);
      doubleArray0[6] = (-2268.4962843134426);
      double double0 = dormandPrince853Integrator0.initializeStep(firstOrderConverter0, true, 1114, doubleArray0, 925.1, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals((-2595.45), dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(2595.45, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertArrayEquals(new double[] {(-2621.4044999999996), (-2291.1812471565772), (-2621.4044999999996), 1125.14, (-2291.1812471565772), (-2621.4044999999996), (-2291.1812471565772)}, doubleArray0, 0.01);
      assertEquals((-2595.45), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(3787.90128, 3787.90128, 3787.90128, 3787.90128);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[1];
      dormandPrince853Integrator0.vecRelativeTolerance = doubleArray0;
      double double0 = dormandPrince853Integrator0.initializeStep(firstOrderConverter0, false, 1114, dormandPrince853Integrator0.vecRelativeTolerance, 3787.90128, dormandPrince853Integrator0.vecRelativeTolerance, dormandPrince853Integrator0.vecRelativeTolerance, dormandPrince853Integrator0.vecRelativeTolerance, dormandPrince853Integrator0.vecRelativeTolerance);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(3787.90128, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(3787.90128, 3787.90128, 3787.90128, 3787.90128);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(241).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[1];
      try { 
        dormandPrince853Integrator0.sanityChecks(firstOrderConverter0, 27.94888452941996, doubleArray0, (-1.0), doubleArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // dimensions mismatch: ODE problem has dimension 482, initial state vector has dimension 1
         //
         verifyException("org.apache.commons.math.ode.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3787.90128, 3787.90128, 241, 6587.17318839395);
      try { 
        graggBulirschStoerIntegrator0.sanityChecks(firstOrderConverter0, 0.05950913748704926, doubleArray0, 0.05950913748704926, doubleArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math.ode.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1292.0932764955053), (-1292.0932764955053), (double[]) null, (double[]) null);
      dormandPrince54Integrator0.setInitialStepSize((-1015.735302784855));
      assertEquals(1292.0932764955053, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.0E-15, 1.0E-15, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setInitialStepSize(1.0E-15);
      assertEquals(1.0E-15, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.0E-15, 1.0E-15, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setInitialStepSize((-2027.957881740627));
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(1.0E-15, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(100.0, 501.440529753175, 35.81684148639408, (-231.5293791760455));
      double double0 = highamHall54Integrator0.getCurrentSignedStepsize();
      assertEquals(223.92867832262462, double0, 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(100.0, 501.440529753175, 35.81684148639408, (-231.5293791760455));
      double double0 = highamHall54Integrator0.getCurrentStepStart();
      assertEquals(223.92867832262462, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(3787.90128, 3787.90128, 3787.90128, 3787.90128);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      double double0 = dormandPrince853Integrator0.initializeStep(firstOrderConverter0, true, 241, doubleArray0, 3787.90128, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(3787.90128, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3787.90128, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(3787.90128, double0, 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.0E-15, 1.0E-15, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getStepHandler();
      assertEquals(1.0E-15, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(3787.90128, 551636.0, doubleArray0, doubleArray0);
      double double0 = highamHall54Integrator0.filterStep((-1.0), true);
      assertEquals((-3787.90128), double0, 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(45711.51616927708, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1707.0), (-1707.0), (-1707.0), 0.0);
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator0.addSwitchingFunction(switchingFunction0, 0.01, 0.0, 0);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(1707.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1251.0, 1251.0, 1251.0, 1251.0);
      ContinuousOutputModel continuousOutputModel0 = new ContinuousOutputModel();
      dormandPrince853Integrator0.setStepHandler(continuousOutputModel0);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(1251.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
  }
}

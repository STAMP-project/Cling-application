/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 20:01:50 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.Map;
import org.apache.commons.lang3.ArrayUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float[] floatArray0 = new float[2];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short)0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) (short)3146);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1286));
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 446.23575F);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) (-1));
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Integer integer0 = new Integer(2146018451);
      Integer[] integerArray0 = new Integer[2];
      // Undeclared exception!
      try { 
        ArrayUtils.add(integerArray0, (-3512), integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3512, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.add((String[]) null, 0, "y6H%WFqSP");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[8];
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) stringArray0, 46, (Object) integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 46, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, 64, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object object0 = new Object();
      Object[] objectArray1 = ArrayUtils.add(objectArray0, object0);
      assertEquals(1, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(10, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(10, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(6, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, (short[]) null);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[3];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(6, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, false);
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, (boolean[]) null);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Integer[] integerArray0 = new Integer[19];
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.addAll((Object[]) integerArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot store java.lang.Object in an array of java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Object, Object>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Object, Object>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 6);
      AbstractMap.SimpleImmutableEntry<Object, Object>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleImmutableEntryArray0, (AbstractMap.SimpleImmutableEntry<Object, Object>[]) null);
      assertEquals(6, abstractMap_SimpleImmutableEntryArray1.length);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float[] floatArray0 = new float[3];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte) (-21), (int) (byte) (-21));
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int[] intArray0 = new int[9];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(integerArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      boolean boolean0 = ArrayUtils.isNotEmpty(integerArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((Integer[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int[] intArray0 = new int[13];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.valueOf(true);
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.TRUE;
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = booleanArray0[1];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      float[] floatArray0 = new float[6];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(6, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Float float0 = new Float((float) 0L);
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 31.0F);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (byte) (-8));
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 812.97F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 31.0F);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {31.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Float float0 = new Float((-200.1308));
      Float[] floatArray0 = new Float[7];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      floatArray0[6] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-200.1308F), (-200.1308F), (-200.1308F), (-200.1308F), (-200.1308F), (-200.1308F), (-200.1308F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-1552.291626357887));
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-500.7897866152));
      assertArrayEquals(new double[] {(-1552.291626357887), (-500.7897866152), (-500.7897866152), (-500.7897866152)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1.5);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (-2616.520714765));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = (Double) 2708.0;
      doubleArray0[1] = (Double) 2708.0;
      doubleArray0[2] = (Double) 2708.0;
      doubleArray0[3] = (Double) 2708.0;
      doubleArray0[4] = (Double) 2708.0;
      doubleArray0[5] = (Double) 2708.0;
      doubleArray0[6] = (Double) 2708.0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {2708.0, 2708.0, 2708.0, 2708.0, 2708.0, 2708.0, 2708.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(10, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte) (-91));
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-34));
      assertArrayEquals(new byte[] {(byte) (-91), (byte) (-34)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)75);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)2);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)19);
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)19, (byte)19}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      short[] shortArray0 = new short[3];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(3, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Short[] shortArray0 = new Short[5];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1051));
      assertArrayEquals(new short[] {(short) (-1051), (short) (-1051), (short) (-1051), (short) (-1051), (short) (-1051)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-2167));
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-58));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((byte) (-58));
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[0]);
      assertArrayEquals(new short[] {(short) (-58)}, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)1);
      shortArray0[0] = short0;
      shortArray0[1] = shortArray0[0];
      shortArray0[2] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-75));
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-2129924501));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(3624);
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {3624}, intArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      long[] longArray0 = new long[2];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (byte)0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (long) (byte) (-31));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Long[] longArray0 = new Long[7];
      longArray0[3] = (Long) 1L;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[3]);
      assertArrayEquals(new long[] {1L, 1L, 1L, 1L, 1L, 1L, 1L}, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Long[] longArray0 = new Long[8];
      Long long0 = new Long(3L);
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = longArray0[1];
      longArray0[4] = longArray0[2];
      longArray0[5] = longArray0[1];
      longArray0[6] = longArray0[3];
      longArray0[7] = longArray0[2];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      char[] charArray0 = new char[3];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(3, characterArray0.length);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      char char0 = '7';
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('7');
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertArrayEquals(new char[] {'7', '7'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'z');
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'N');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Character character0 = Character.valueOf('U');
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'U', 'U'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (byte) (-109));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 78);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-907));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = 67.8F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 67.8F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      float[] floatArray0 = new float[3];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      float[] floatArray0 = new float[10];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1663.5938F), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1663.5938F), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (short) (-1), (int) (short) (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((float[]) null, 0.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 4403.5306366658, 4403.5306366658);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1464.662245287), 255.896);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2254.382689044, 0, 713.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0, (-1), 881.8981138103);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      char[] charArray0 = new char[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) charArray0[0], 46, (-4438.67139));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 229.48, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 75.0, 57);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 171.09745, (double) 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-2586.8378437070437), 827.18308728);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.indexOf(doubleArray0, 48.0, (-1), 48.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1122.748379909418, (-1), (double) (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = ArrayUtils.indexOf(doubleArray0, 2086.0, (-782));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-65);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-65));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), 122);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), 122);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-71), (int) (short) (-211));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-109), (int) (byte)2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-103), (-518));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte) (-29), (-491));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = '\u001A';
      boolean boolean0 = ArrayUtils.contains(charArray0, '\u001A');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'T');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'y', 9);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      char[] charArray0 = new char[4];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '_', 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      char[] charArray0 = new char[3];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'W', (-1249));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '!', 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      char[] charArray0 = new char[3];
      int int0 = ArrayUtils.indexOf(charArray0, '_', (int) (byte) (-48));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      short[] shortArray0 = new short[3];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)470;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)470);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      short[] shortArray0 = new short[7];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2346), (int) (short)1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      short[] shortArray0 = new short[5];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1, (-317));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)230, 64);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      short[] shortArray0 = new short[3];
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1), (int) (short) (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (-19));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[4] = (int) (byte) (-117);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-117));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-518));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Short short0 = new Short((short)2705);
      int[] intArray0 = new int[9];
      intArray0[0] = (-458);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-458), (int) short0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-463), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-2509));
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[0]);
      assertNotNull(intArray0);
      
      int int0 = ArrayUtils.indexOf(intArray0, (-108), (-1));
      assertArrayEquals(new int[] {(-2509), (-2509), (-2509), (-2509)}, intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((int[]) null, 2663, (-771));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 4566L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 4566L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[1] = (long) (byte)1;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L, (int) (byte)1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      long[] longArray0 = new long[7];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L, (int) (byte)1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      long[] longArray0 = new long[5];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 132L, (-782));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-3777L), (int) (byte) (-21));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      long[] longArray0 = new long[5];
      int int0 = ArrayUtils.indexOf(longArray0, (-1L), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((long[]) null, (-2660L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      boolean boolean0 = ArrayUtils.contains((Object[]) integerArray0, (Object) integerArray0[2]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) "', is neither of type Map.Entry nor an Array");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, 383);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      
      Integer integer0 = new Integer((-2135));
      int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray1, (Object) integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[2] = (Object) 132L;
      objectArray0[5] = objectArray0[2];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      int int0 = ArrayUtils.lastIndexOf((Object[]) longArray0, (Object) null, 11);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[2], (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) null, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      Object object0 = new Object();
      int int0 = ArrayUtils.indexOf((Object[]) longArray0, object0, 2111);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Object, String>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Object, String>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 3);
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>("java.vm.specification.name", "%P'vlwS");
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntryArray0[0];
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Object, String>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeElement(abstractMap_SimpleImmutableEntryArray0, (Object) null);
      assertEquals(3, abstractMap_SimpleImmutableEntryArray1.length);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Object, String>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Object, String>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 10);
      AbstractMap.SimpleImmutableEntry<Object, String>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeElement(abstractMap_SimpleImmutableEntryArray0, (Object) null);
      assertEquals(9, abstractMap_SimpleImmutableEntryArray1.length);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[24];
      int int0 = ArrayUtils.indexOf(objectArray0, object0, (-957));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) null, 2146799689);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      float[] floatArray0 = new float[2];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ArrayUtils.reverse((double[]) null);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      char[] charArray0 = new char[2];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ArrayUtils.reverse((int[]) null);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      int[] intArray0 = new int[4];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      long[] longArray0 = new long[5];
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ArrayUtils.reverse(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(object0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, 119);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 119, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = new boolean[6];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float[] floatArray1 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      float[] floatArray0 = new float[6];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[7];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      char[] charArray0 = new char[7];
      char[] charArray1 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray1, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      short[] shortArray0 = new short[6];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      int[] intArray0 = new int[4];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      int[] intArray0 = new int[9];
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      int[] intArray0 = new int[9];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[6];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      long[] longArray0 = new long[4];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      long[] longArray0 = new long[13];
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object[] objectArray1 = new Object[3];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, (Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) byteArray0, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 3756, (-1));
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 5, 2353);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short) (-512), 4645);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 69, 2);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (int) (byte) (-8), (int) (byte) (-1));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-84), 11);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1555), 2279);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-661), (-661));
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 3825, 3102);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, Integer.MAX_VALUE, 36);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (short) (-21), (int) (short) (-158));
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 2145521660, (int) (byte)100);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 3, (-1215));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-584), 2898);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      char[] charArray0 = new char[5];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-2623), 829);
      assertNotSame(charArray1, charArray0);
      assertEquals(5, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte)0, (int) (byte) (-8));
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (-1), 2041);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, 1015);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, (int) (short)0);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, Integer.MAX_VALUE, 738);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-3905), (-3905));
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-921), 6);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2323, 0);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-4910), (-932));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      long[] longArray0 = new long[9];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short)1, 2223);
      assertEquals(8, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      char char0 = 'U';
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-3367), (int) char0);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-659), (-1));
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      int[] intArray0 = new int[3];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (-3848), 2708);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray1.length);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 3, 3);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      int[] intArray0 = new int[3];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, Integer.MAX_VALUE, 1);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, (int)  (-101), 1976);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(8, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Float[] floatArray0 = new Float[5];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(5, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(3, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      char[] charArray0 = new char[9];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(9, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      long[] longArray0 = new long[9];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(9, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.add((String[]) null, "Q[M,");
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) doubleArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) doubleArray1);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertEquals(8, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-34));
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, (byte[]) null);
      assertArrayEquals(new byte[] {(byte) (-34), (byte) (-34)}, byteArray2);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'y');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertNotNull(intArray1);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = ArrayUtils.addAll(longArray0, (long[]) null);
      assertNotNull(longArray1);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.addAll((String[]) null, (String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) objectArray0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 1, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Object, Object>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Object, Object>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 6);
      Object object0 = new Object();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(object0, object0);
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntryArray0[0];
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry0;
      Map<Object, Object> map0 = ArrayUtils.toMap(abstractMap_SimpleImmutableEntryArray0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)13);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, 117, 'T');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 117, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)2708;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2708);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertArrayEquals(new int[] {2708, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1449;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) 1449);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertArrayEquals(new long[] {1449L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toArray((Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) 0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      long[] longArray0 = new long[7];
      long[] longArray1 = ArrayUtils.add(longArray0, (-1L));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, (-1L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 64, (float) 64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 64, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)33);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)33}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (int) (short)3, (double) 992);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 992.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '0';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '0');
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-65));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'V');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short[] shortArray1 = ArrayUtils.add(shortArray0, 1, (short) (-5314));
      assertArrayEquals(new short[] {(short)0, (short) (-5314), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = 375.38452F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 375.38452F);
      assertArrayEquals(new float[] {0.0F, 375.38452F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = object0;
      Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, object0);
      assertEquals(2, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ArrayUtils.isEquals(object0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte)2, (byte) (-84));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(11, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = ArrayUtils.add(intArray0, 0, (-642));
      assertArrayEquals(new int[] {(-642), 0, 0, 0, 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.add((short[]) null, (short) (-4638));
      assertArrayEquals(new short[] {(short) (-4638)}, shortArray0);
      assertNotNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-108));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Object object0 = new Object();
      String string0 = ArrayUtils.toString(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      long[] longArray0 = new long[4];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      float[] floatArray0 = new float[8];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 3146.0F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 112.0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[2] = (short) (-4243);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-4243));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      int[] intArray0 = new int[7];
      int[] intArray1 = ArrayUtils.add(intArray0, (-3675));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, (-3675)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (byte)46);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = ArrayUtils.add(longArray0, 2, (-1L));
      assertArrayEquals(new long[] {0L, 0L, (-1L), 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.add(arrayUtils0.EMPTY_CHAR_ARRAY, 'V');
      assertArrayEquals(new char[] {'V'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 6060.0283F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 6060.0283F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 825);
      assertEquals((-1), int0);
  }
}

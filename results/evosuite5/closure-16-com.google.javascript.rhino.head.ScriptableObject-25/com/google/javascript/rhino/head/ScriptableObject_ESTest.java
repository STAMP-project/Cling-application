/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 07:04:30 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.Arguments;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.BoundFunction;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.Delegator;
import com.google.javascript.rhino.head.EvaluatorException;
import com.google.javascript.rhino.head.Function;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.JavaScriptException;
import com.google.javascript.rhino.head.LazilyLoadedCtor;
import com.google.javascript.rhino.head.MemberBox;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeBoolean;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeDate;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeJSON;
import com.google.javascript.rhino.head.NativeJavaArray;
import com.google.javascript.rhino.head.NativeJavaClass;
import com.google.javascript.rhino.head.NativeJavaMethod;
import com.google.javascript.rhino.head.NativeJavaPackage;
import com.google.javascript.rhino.head.NativeJavaTopPackage;
import com.google.javascript.rhino.head.NativeMath;
import com.google.javascript.rhino.head.NativeNumber;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.NativeString;
import com.google.javascript.rhino.head.Script;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.Synchronizer;
import com.google.javascript.rhino.head.TopLevel;
import com.google.javascript.rhino.head.UniqueTag;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.util.HashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ScriptableObject_ESTest extends ScriptableObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      boolean boolean0 = importerTopLevel0.isConst((String) null);
      assertFalse(boolean0);
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      boolean boolean1 = ScriptableObject.deleteProperty((Scriptable) importerTopLevel0, 8);
      assertTrue(boolean1);
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test001()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        ScriptableObject.ensureScriptable(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type java.lang.Class
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isEmpty());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      int int0 = nativeError0.size();
      assertEquals(0, int0);
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isEmpty());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test003()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      assertNotNull(topLevel0);
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertTrue(topLevel0.isExtensible());
      assertEquals("global", topLevel0.getClassName());
      assertFalse(topLevel0.avoidObjectDetection());
      assertTrue(topLevel0.isEmpty());
      assertFalse(topLevel0.isSealed());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      
      Context context0 = Context.getContext();
      assertNotNull(context0);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) topLevel0, "error reporter");
      assertTrue(boolean0);
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertTrue(topLevel0.isExtensible());
      assertEquals("global", topLevel0.getClassName());
      assertFalse(topLevel0.avoidObjectDetection());
      assertTrue(topLevel0.isEmpty());
      assertFalse(topLevel0.isSealed());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      
      Context context1 = Context.enter(context0);
      assertSame(context0, context1);
      assertSame(context1, context0);
      assertNotNull(context1);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertEquals(0, context1.getLanguageVersion());
      assertFalse(context1.isSealed());
      assertFalse(context1.isGeneratingDebug());
      assertFalse(context1.isGeneratingDebugChanged());
      assertEquals(0, context1.getOptimizationLevel());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertTrue(context1.isGeneratingSource());
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context1.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      assertNotNull(nativeJavaClass0);
      assertEquals("JavaClass", nativeJavaClass0.getClassName());
      
      BoundFunction boundFunction0 = new BoundFunction(context1, topLevel0, nativeJavaClass0, nativeJavaClass0, context1.emptyArgs);
      assertNotNull(boundFunction0);
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertTrue(topLevel0.isExtensible());
      assertEquals("global", topLevel0.getClassName());
      assertFalse(topLevel0.avoidObjectDetection());
      assertTrue(topLevel0.isEmpty());
      assertFalse(topLevel0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertEquals(0, context1.getLanguageVersion());
      assertFalse(context1.isSealed());
      assertFalse(context1.isGeneratingDebug());
      assertFalse(context1.isGeneratingDebugChanged());
      assertEquals(0, context1.getOptimizationLevel());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertTrue(context1.isGeneratingSource());
      assertEquals("JavaClass", nativeJavaClass0.getClassName());
      assertTrue(boundFunction0.isExtensible());
      assertFalse(boundFunction0.hasPrototypeMap());
      assertEquals("function", boundFunction0.getTypeOf());
      assertFalse(boundFunction0.isSealed());
      assertFalse(boundFunction0.isEmpty());
      assertFalse(boundFunction0.avoidObjectDetection());
      assertEquals("Function", boundFunction0.getClassName());
      assertEquals(0, boundFunction0.getLength());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context1.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertNotNull(nativeJavaTopPackage0);
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      
      ScriptableObject.redefineProperty(nativeJavaTopPackage0, "msg.change.value.with.writable.false", false);
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test005()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      
      Class<NativeJavaClass> class0 = NativeJavaClass.class;
      // Undeclared exception!
      try { 
        ScriptableObject.buildClassCtor((Scriptable) nativeContinuation0, class0, true, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't define constructor or class com.google.javascript.rhino.head.NativeJavaObject since more than one constructor has multiple parameters.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      nativeIterator_StopIteration0.preventExtensions();
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      NativeString.init(nativeIterator_StopIteration0, true);
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isEmpty());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      Object[] objectArray0 = ScriptableObject.getPropertyIds(nativeIterator_StopIteration0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isEmpty());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.Object;
      Scriptable scriptable0 = TopLevel.getBuiltinPrototype((Scriptable) nativeContinuation0, topLevel_Builtins0);
      assertNull(scriptable0);
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test008()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertTrue(nativeError0.isExtensible());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      BaseFunction baseFunction0 = new BaseFunction();
      assertNotNull(baseFunction0);
      assertTrue(baseFunction0.isEmpty());
      assertFalse(baseFunction0.isSealed());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertEquals("function", baseFunction0.getTypeOf());
      assertTrue(baseFunction0.isExtensible());
      assertEquals("Function", baseFunction0.getClassName());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      IdFunctionObject idFunctionObject0 = nativeError0.exportAsJSClass(2, baseFunction0, true);
      assertNotNull(idFunctionObject0);
      assertTrue(nativeError0.isSealed());
      assertTrue(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(baseFunction0.isSealed());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertEquals("function", baseFunction0.getTypeOf());
      assertTrue(baseFunction0.isExtensible());
      assertFalse(baseFunction0.isEmpty());
      assertEquals("Function", baseFunction0.getClassName());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertEquals(1, idFunctionObject0.methodId());
      assertEquals(1, idFunctionObject0.getLength());
      assertTrue(idFunctionObject0.isExtensible());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertTrue(idFunctionObject0.isEmpty());
      assertEquals("Error", idFunctionObject0.getFunctionName());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals(1, idFunctionObject0.getArity());
      assertTrue(idFunctionObject0.isSealed());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      // Undeclared exception!
      try { 
        ScriptableObject.defineProperty((Scriptable) nativeError0, (String) null, (Object) nativeError0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot modify a property of a sealed object: 0.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      
      Context context0 = contextFactory0.enter();
      assertNotNull(context0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertNotNull(importerTopLevel0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("language version", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("language version", propertyChangeListenerProxy0.getPropertyName());
      
      context0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals("language version", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) importerTopLevel0, 8);
      assertFalse(boolean0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.Error;
      BaseFunction baseFunction0 = importerTopLevel0.getBuiltinCtor(topLevel_Builtins0);
      assertNull(baseFunction0);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      
      IdFunctionObject idFunctionObject0 = null;
      try {
        idFunctionObject0 = new IdFunctionObject(importerTopLevel0, importerTopLevel0, 9, "jsFunction_cacheBuiltins", 1, (Scriptable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = ScriptableObject.isFalse((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      Context context0 = contextFactory0.enter();
      assertNotNull(context0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertNotNull(importerTopLevel0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("language version", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("language version", propertyChangeListenerProxy0.getPropertyName());
      
      context0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals("language version", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      
      ScriptableObject.putProperty((Scriptable) importerTopLevel0, (-1850962679), (Object) importerTopLevel0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      NativeMath.init(importerTopLevel0, true);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertNotNull(nativeJavaTopPackage0);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      
      ScriptableObject.putProperty((Scriptable) nativeJavaTopPackage0, "msg.default.value", (Object) nativeJavaTopPackage0);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      
      NativeArray nativeArray0 = new NativeArray((-2111L));
      assertNotNull(nativeArray0);
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals((-2111L), nativeArray0.jsGet_length());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals((-2111L), nativeArray0.getLength());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isEmpty());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      boolean boolean0 = nativeArray0.isEmpty();
      assertTrue(boolean0);
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals((-2111L), nativeArray0.jsGet_length());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals((-2111L), nativeArray0.getLength());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isEmpty());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) importerTopLevel0, "jsFunction_getAllIds");
      assertTrue(boolean0);
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      
      int int0 = ScriptableObject.DONTENUM;
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test015()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertFalse(nativeError0.isSealed());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      
      Context context0 = Context.getContext();
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      
      TopLevel topLevel0 = new TopLevel();
      assertNotNull(topLevel0);
      assertTrue(topLevel0.isExtensible());
      assertEquals("global", topLevel0.getClassName());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertTrue(topLevel0.isEmpty());
      assertFalse(topLevel0.isSealed());
      assertFalse(topLevel0.avoidObjectDetection());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      nativeError0.defineOwnProperties(context0, topLevel0);
      assertFalse(nativeError0.isSealed());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(topLevel0.isExtensible());
      assertEquals("global", topLevel0.getClassName());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertTrue(topLevel0.isEmpty());
      assertFalse(topLevel0.isSealed());
      assertFalse(topLevel0.avoidObjectDetection());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      Byte byte0 = new Byte((byte)92);
      assertNotNull(byte0);
      assertEquals((byte)92, (byte)byte0);
      
      JavaScriptException javaScriptException0 = new JavaScriptException(byte0);
      assertNotNull(javaScriptException0);
      
      nativeError0.setStackProvider(javaScriptException0);
      assertFalse(nativeError0.isSealed());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals(0, javaScriptException0.lineNumber());
      assertEquals(0, javaScriptException0.getLineNumber());
      assertEquals("", javaScriptException0.getSourceName());
      assertEquals(0, javaScriptException0.columnNumber());
      assertEquals("", javaScriptException0.sourceName());
      assertNull(javaScriptException0.lineSource());
      assertFalse(javaScriptException0.usesMozillaStackStyle());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertNotNull(nativeJavaTopPackage0);
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      
      classLoader0.clearAssertionStatus();
      String string0 = "hasInstance";
      // Undeclared exception!
      try { 
        nativeJavaTopPackage0.associateValue((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      
      Class<TopLevel> class0 = TopLevel.class;
      String string0 = ScriptableObject.defineClass((Scriptable) importerTopLevel0, class0, false, false);
      assertNotNull(string0);
      assertEquals("global", string0);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.isEmpty());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      
      NativeString.init(importerTopLevel0, false);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.isEmpty());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test018()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      
      // Undeclared exception!
      try { 
        nativeError0.getAttributes("%j<\"p)ep?W}wLlLt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property %j<\"p)ep?W}wLlLt not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test019()  throws Throwable  {
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertFalse(context0.generateObserverCount);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      
      NativeCall nativeCall0 = new NativeCall();
      assertNotNull(nativeCall0);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isEmpty());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      // Undeclared exception!
      try { 
        ScriptableObject.getTypedProperty((Scriptable) nativeCall0, "language version", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot convert null to double
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<BoundFunction> class0 = BoundFunction.class;
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      assertNotNull(nativeJavaClass0);
      assertEquals("JavaClass", nativeJavaClass0.getClassName());
      
      // Undeclared exception!
      try { 
        JavaAdapter.createAdapterWrapper(nativeJavaClass0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      NativeArray nativeArray0 = new NativeArray(1);
      assertNotNull(nativeArray0);
      assertEquals(1L, nativeArray0.getLength());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(1L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      
      NativeObject nativeObject0 = (NativeObject)ScriptableObject.buildDataDescriptor(nativeArray0, nativeIterator_StopIteration0, (-1808118735));
      assertNotNull(nativeObject0);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals(1L, nativeArray0.getLength());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(1L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.isEmpty());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isExtensible());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      ScriptableObject.putProperty((Scriptable) nativeArray0, "msg.default.value", (Object) nativeArray0);
      assertEquals(1L, nativeArray0.getLength());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(1L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      
      boolean boolean0 = nativeArray0.isEmpty();
      assertFalse(boolean0);
      assertEquals(1L, nativeArray0.getLength());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(1L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      assertNotNull(topLevel0);
      assertFalse(topLevel0.isSealed());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertTrue(topLevel0.isEmpty());
      assertEquals("global", topLevel0.getClassName());
      assertFalse(topLevel0.avoidObjectDetection());
      assertTrue(topLevel0.isExtensible());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        ScriptableObject.getDefaultValue((Scriptable) topLevel0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertNotNull(nativeCall0);
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      ScriptableObject.checkValidAttributes(4);
      Class<Long> class0 = Long.class;
      boolean boolean0 = nativeCall0.sameValue("msg.method.not.found", "msg.method.not.found");
      assertTrue(boolean0);
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      assertNotNull(nativeBoolean0);
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertFalse(nativeBoolean0.isSealed());
      assertTrue(nativeBoolean0.isExtensible());
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      nativeCall0.delete(51);
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      nativeCall0.setAttributes(13, 4);
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      Object object0 = nativeIterator_StopIteration0.get("msg.method.not.found");
      assertNull(object0);
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      nativeBoolean0.put(4, (Scriptable) nativeCall0, (Object) null);
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertFalse(nativeBoolean0.isSealed());
      assertTrue(nativeBoolean0.isExtensible());
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      nativeCall0.defineProperty("msg.method.not.found", (Object) nativeBoolean0, 0);
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertFalse(nativeBoolean0.isSealed());
      assertTrue(nativeBoolean0.isExtensible());
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      nativeCall0.defineProperty("msg.method.not.found", class0, 0);
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isSealed());
      assertFalse(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test024()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      
      Context context0 = Context.getCurrentContext();
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      
      ScriptableObject scriptableObject0 = importerTopLevel0.getOwnPropertyDescriptor(context0, context0);
      assertNull(scriptableObject0);
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      
      ClassLoader classLoader0 = contextFactory0.getApplicationClassLoader();
      assertNull(classLoader0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      assertNotNull(nativeJavaTopPackage0);
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      
      Class<NativeIterator> class0 = NativeIterator.class;
      nativeJavaTopPackage0.defineProperty("C", class0, 13);
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isEmpty());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      
      nativeJavaTopPackage0.delete("C");
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isEmpty());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      
      ContextFactory contextFactory1 = new ContextFactory();
      assertNotNull(contextFactory1);
      assertFalse(contextFactory1.hasExplicitGlobal());
      assertFalse(contextFactory1.isSealed());
      assertFalse(contextFactory1.equals((Object)contextFactory0));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertNotNull(nativeJavaTopPackage0);
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      NativeJavaTopPackage nativeJavaTopPackage1 = new NativeJavaTopPackage(classLoader0);
      assertNotNull(nativeJavaTopPackage1);
      assertTrue(nativeJavaTopPackage1.isExtensible());
      assertEquals("JavaPackage", nativeJavaTopPackage1.getClassName());
      assertFalse(nativeJavaTopPackage1.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage1.isSealed());
      assertTrue(nativeJavaTopPackage1.isEmpty());
      assertEquals("object", nativeJavaTopPackage1.getTypeOf());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeJavaTopPackage1.equals((Object)nativeJavaTopPackage0));
      
      Object object0 = nativeJavaTopPackage0.equivalentValues(nativeJavaTopPackage1);
      assertNotSame(nativeJavaTopPackage0, nativeJavaTopPackage1);
      assertNotSame(nativeJavaTopPackage1, nativeJavaTopPackage0);
      assertNotNull(object0);
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage1.isExtensible());
      assertEquals("JavaPackage", nativeJavaTopPackage1.getClassName());
      assertFalse(nativeJavaTopPackage1.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage1.isSealed());
      assertTrue(nativeJavaTopPackage1.isEmpty());
      assertEquals("object", nativeJavaTopPackage1.getTypeOf());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeJavaTopPackage0.equals((Object)nativeJavaTopPackage1));
      assertTrue(nativeJavaTopPackage1.equals((Object)nativeJavaTopPackage0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2514L);
      assertNotNull(nativeArray0);
      assertFalse(nativeArray0.isSealed());
      assertEquals(2514L, nativeArray0.getLength());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(2514L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      
      long long0 = NativeArray.getLengthProperty(context0, nativeArray0);
      assertEquals(2514L, long0);
      assertFalse(nativeArray0.isSealed());
      assertEquals(2514L, nativeArray0.getLength());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(2514L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      
      String string0 = "string";
      ScriptableObject.redefineProperty(nativeArray0, "string", true);
      assertFalse(nativeArray0.isSealed());
      assertEquals(2514L, nativeArray0.getLength());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(2514L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      nativeIterator_StopIteration0.put("string", (Scriptable) nativeContinuation0, (Object) "string");
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isEmpty());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      // Undeclared exception!
      try { 
        nativeIterator_StopIteration0.defineConst("string", nativeContinuation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: redeclaration of var string.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) nativeError0, 1);
      assertFalse(boolean0);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      
      TopLevel topLevel0 = new TopLevel();
      assertNotNull(topLevel0);
      assertTrue(topLevel0.isEmpty());
      assertEquals("global", topLevel0.getClassName());
      assertTrue(topLevel0.isExtensible());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertFalse(topLevel0.avoidObjectDetection());
      assertFalse(topLevel0.isSealed());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      int int0 = nativeError0.applyDescriptorToAttributeBitset(1285, topLevel0);
      assertEquals(1285, int0);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertTrue(topLevel0.isEmpty());
      assertEquals("global", topLevel0.getClassName());
      assertTrue(topLevel0.isExtensible());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertFalse(topLevel0.avoidObjectDetection());
      assertFalse(topLevel0.isSealed());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      NativeObject nativeObject0 = (NativeObject)ScriptableObject.buildDataDescriptor(nativeIterator_StopIteration0, (Object) null, 624);
      assertNotNull(nativeObject0);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isEmpty());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      int int0 = nativeIterator_StopIteration0.applyDescriptorToAttributeBitset((-1850962687), nativeObject0);
      assertEquals((-1850962688), int0);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isEmpty());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "defineProperty";
      // Undeclared exception!
      try { 
        NativeJavaArray.wrap((Scriptable) nativeIterator_StopIteration0, (Object) "defineProperty");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      Context context0 = contextFactory0.makeContext();
      assertNotNull(context0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      
      BaseFunction baseFunction0 = new BaseFunction(nativeIterator_StopIteration0, nativeIterator_StopIteration0);
      assertNotNull(baseFunction0);
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(baseFunction0.isSealed());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertTrue(baseFunction0.isEmpty());
      assertEquals("function", baseFunction0.getTypeOf());
      assertTrue(baseFunction0.isExtensible());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertEquals("Function", baseFunction0.getClassName());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod(context0, (Scriptable) baseFunction0, "language version", context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000005 is not a function, it is function.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      
      NativeNumber nativeNumber0 = new NativeNumber(160);
      assertNotNull(nativeNumber0);
      assertTrue(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.isSealed());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertTrue(nativeNumber0.isExtensible());
      assertEquals("Number", nativeNumber0.getClassName());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      NativeNumber nativeNumber1 = (NativeNumber)ScriptableObject.ensureScriptable(nativeNumber0);
      assertSame(nativeNumber0, nativeNumber1);
      assertSame(nativeNumber1, nativeNumber0);
      assertNotNull(nativeNumber1);
      assertTrue(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.isSealed());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertTrue(nativeNumber0.isExtensible());
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber1.avoidObjectDetection());
      assertTrue(nativeNumber1.isEmpty());
      assertTrue(nativeNumber1.isExtensible());
      assertFalse(nativeNumber1.hasPrototypeMap());
      assertEquals("object", nativeNumber1.getTypeOf());
      assertEquals("Number", nativeNumber1.getClassName());
      assertFalse(nativeNumber1.isSealed());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      
      NativeObject nativeObject0 = (NativeObject)context0.initStandardObjects();
      assertNotNull(nativeObject0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isEmpty());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      ClassLoader classLoader0 = contextFactory0.getApplicationClassLoader();
      assertNull(classLoader0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeNumber nativeNumber0 = new NativeNumber((-315.552));
      assertNotNull(nativeNumber0);
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertFalse(nativeNumber0.isSealed());
      assertEquals("Number", nativeNumber0.getClassName());
      assertTrue(nativeNumber0.isEmpty());
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      
      Function function0 = JavaAdapter.getFunction(nativeNumber0, "*}gZy7V+");
      assertNull(function0);
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertFalse(nativeNumber0.isSealed());
      assertEquals("Number", nativeNumber0.getClassName());
      assertTrue(nativeNumber0.isEmpty());
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      Context context0 = new Context(contextFactory0);
      assertNotNull(context0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      
      NativeCall nativeCall0 = context0.currentActivationCall;
      assertNull(nativeCall0);
      
      // Undeclared exception!
      try { 
        nativeNumber0.putConst("`$t'T.", (Scriptable) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test033()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      Context context0 = Context.getCurrentContext();
      assertNotNull(context0);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      assertNotNull(importerTopLevel0);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      // Undeclared exception!
      try { 
        importerTopLevel0.initStandardObjects(context0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      nativeIterator_StopIteration0.preventExtensions();
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      assertNotNull(importerTopLevel0);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      ScriptableObject.putProperty((Scriptable) nativeIterator_StopIteration0, (-592065961), (Object) importerTopLevel0);
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      importerTopLevel0.delete(150);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      Class<BaseFunction> class0 = BaseFunction.class;
      String string0 = ScriptableObject.defineClass((Scriptable) importerTopLevel0, class0, true, false);
      assertNotNull(string0);
      assertEquals("Function", string0);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      
      ScriptableObject.putProperty((Scriptable) importerTopLevel0, (-1270), (Object) importerTopLevel0);
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      
      importerTopLevel0.delete((-1270));
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      
      Object[] objectArray0 = importerTopLevel0.getIds();
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      
      Class<BaseFunction> class0 = BaseFunction.class;
      String string0 = ScriptableObject.defineClass((Scriptable) importerTopLevel0, class0, false, false);
      assertNotNull(string0);
      assertEquals("Function", string0);
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      
      NativeObject nativeObject0 = (NativeObject)ScriptableObject.buildDataDescriptor(nativeError0, context0, 65535);
      assertNotNull(nativeObject0);
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isEmpty());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      
      int int0 = nativeIterator_StopIteration0.applyDescriptorToAttributeBitset(170, nativeObject0);
      assertEquals(175, int0);
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isEmpty());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      
      // Undeclared exception!
      try { 
        NativeJavaArray.wrap((Scriptable) nativeError0, (Object) "defineProperty");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertTrue(nativeError0.isExtensible());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      
      ClassLoader classLoader0 = contextFactory0.getApplicationClassLoader();
      assertNull(classLoader0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      assertNotNull(nativeJavaTopPackage0);
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      nativeJavaTopPackage0.putConst("n!C2!7", nativeError0, "n!C2!7");
      assertFalse(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertEquals("Error", nativeError0.getClassName());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      Object object0 = nativeJavaTopPackage0.equivalentValues((Object) null);
      assertNotNull(object0);
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      NativeArray nativeArray0 = new NativeArray(4);
      assertNotNull(nativeArray0);
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(4L, nativeArray0.getLength());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.isSealed());
      assertEquals(4L, nativeArray0.jsGet_length());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      
      ScriptableObject.defineConstProperty(nativeError0, "ME]>ZsRB67m<:3Vv{J");
      assertFalse(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      ScriptableObject.putProperty((Scriptable) nativeArray0, "msg.default.value", (Object) "msg.default.value");
      assertFalse(nativeArray0.isEmpty());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(4L, nativeArray0.getLength());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.isSealed());
      assertEquals(4L, nativeArray0.jsGet_length());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      
      boolean boolean0 = nativeArray0.isEmpty();
      assertFalse(boolean0);
      assertFalse(nativeArray0.isEmpty());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(4L, nativeArray0.getLength());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.isSealed());
      assertEquals(4L, nativeArray0.jsGet_length());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      Object[] objectArray0 = nativeError0.getIds();
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) nativeError0, 8);
      assertFalse(boolean0);
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      Class<BaseFunction> class0 = BaseFunction.class;
      String string0 = ScriptableObject.defineClass((Scriptable) nativeContinuation0, class0, false, true);
      assertNotNull(string0);
      assertEquals("Function", string0);
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isEmpty());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      
      // Undeclared exception!
      try { 
        ScriptableObject.getDefaultValue((Scriptable) importerTopLevel0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      
      Class<BaseFunction> class0 = BaseFunction.class;
      String string0 = ScriptableObject.defineClass((Scriptable) nativeContinuation0, class0, true, true);
      assertNotNull(string0);
      assertEquals("Function", string0);
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.isSealed());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertNotNull(nativeJavaTopPackage0);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeJavaTopPackage0, "~!.337.;A\"yI");
      assertFalse(boolean0);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      
      int int0 = ScriptableObject.DONTENUM;
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "error reporter";
      Class<NativeDate> class0 = NativeDate.class;
      // Undeclared exception!
      try { 
        importerTopLevel0.defineFunctionProperties(stringArray0, class0, 11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"error reporter\" not found in \"com.google.javascript.rhino.head.NativeDate\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test045()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-2698L));
      assertNotNull(nativeArray0);
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals((-2698L), nativeArray0.jsGet_length());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals((-2698L), nativeArray0.getLength());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      
      Context context0 = Context.getContext();
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      ClassLoader classLoader0 = contextFactory0.getApplicationClassLoader();
      assertNull(classLoader0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      assertNotNull(nativeJavaTopPackage0);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      // Undeclared exception!
      try { 
        nativeArray0.defineOwnProperty(context0, (Object) nativeJavaTopPackage0, (ScriptableObject) nativeJavaTopPackage0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      nativeIterator_StopIteration0.put("u.a|E.bgd'sBSK<", (Scriptable) nativeContinuation0, (Object) nativeContinuation0);
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.isEmpty());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      Object[] objectArray0 = ScriptableObject.getPropertyIds(nativeIterator_StopIteration0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod(context0, (Scriptable) importerTopLevel0, "language version", context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000005 is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test048()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertNotNull(nativeJavaTopPackage0);
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      nativeJavaTopPackage0.setParentScope(nativeContinuation0);
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      Float float0 = new Float((double) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      // Undeclared exception!
      try { 
        nativeContinuation0.defineOwnProperty((Context) null, float0, nativeJavaTopPackage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: com.google.javascript.rhino.head.NativeJavaPackage@0000000004 is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      assertNotNull(topLevel0);
      assertTrue(topLevel0.isEmpty());
      assertFalse(topLevel0.isSealed());
      assertFalse(topLevel0.avoidObjectDetection());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertTrue(topLevel0.isExtensible());
      assertEquals("global", topLevel0.getClassName());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      nativeContinuation0.defineConst("msg.zero.arg.ctor", topLevel0);
      assertFalse(topLevel0.isSealed());
      assertFalse(topLevel0.avoidObjectDetection());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertTrue(topLevel0.isExtensible());
      assertFalse(topLevel0.isEmpty());
      assertEquals("global", topLevel0.getClassName());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test050()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      // Undeclared exception!
      try { 
        nativeError0.getAttributes(34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property 34 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test051()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      
      Context context0 = new Context(contextFactory0);
      assertNotNull(context0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      assertNotNull(classLoader0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      
      Context context1 = Context.getContext();
      assertNotSame(context1, context0);
      assertNotNull(context1);
      assertEquals(0, context1.getLanguageVersion());
      assertFalse(context1.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertEquals(0, context1.getOptimizationLevel());
      assertTrue(context1.isGeneratingSource());
      assertFalse(context1.isGeneratingDebugChanged());
      assertFalse(context1.isSealed());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context1.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertFalse(context1.equals((Object)context0));
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertNotNull(nativeJavaTopPackage0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(context0.equals((Object)context1));
      
      Context context2 = new Context(contextFactory0);
      assertNotNull(context2);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context2.isGeneratingDebugChanged());
      assertTrue(context2.isGeneratingSource());
      assertEquals(0, context2.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context2.getMaximumInterpreterStackDepth());
      assertFalse(context2.isSealed());
      assertEquals(0, context2.getInstructionObserverThreshold());
      assertEquals(0, context2.getLanguageVersion());
      assertFalse(context2.isGeneratingDebug());
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context2.generateObserverCount);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context2.equals((Object)context0));
      assertFalse(context2.equals((Object)context1));
      
      NativeCall nativeCall0 = new NativeCall();
      assertNotNull(nativeCall0);
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isExtensible());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      
      NativeCall nativeCall1 = (NativeCall)context2.initStandardObjects((ScriptableObject) nativeCall0, false);
      assertNotSame(context2, context0);
      assertNotSame(context2, context1);
      assertSame(nativeCall0, nativeCall1);
      assertSame(nativeCall1, nativeCall0);
      assertNotNull(nativeCall1);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context2.isGeneratingDebugChanged());
      assertTrue(context2.isGeneratingSource());
      assertEquals(0, context2.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context2.getMaximumInterpreterStackDepth());
      assertFalse(context2.isSealed());
      assertEquals(0, context2.getInstructionObserverThreshold());
      assertEquals(0, context2.getLanguageVersion());
      assertFalse(context2.isGeneratingDebug());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall1.isSealed());
      assertFalse(nativeCall1.hasPrototypeMap());
      assertEquals("object", nativeCall1.getTypeOf());
      assertFalse(nativeCall1.isEmpty());
      assertEquals("Call", nativeCall1.getClassName());
      assertFalse(nativeCall1.avoidObjectDetection());
      assertTrue(nativeCall1.isExtensible());
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context2.generateObserverCount);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(context2.equals((Object)context0));
      assertFalse(context2.equals((Object)context1));
      
      nativeJavaTopPackage0.defineOwnProperties(context1, nativeCall0);
      assertNotSame(context0, context1);
      assertNotSame(context0, context2);
      assertNotSame(context1, context0);
      assertNotSame(context1, context2);
      assertSame(nativeCall0, nativeCall1);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context1.getLanguageVersion());
      assertFalse(context1.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertEquals(0, context1.getOptimizationLevel());
      assertTrue(context1.isGeneratingSource());
      assertFalse(context1.isGeneratingDebugChanged());
      assertFalse(context1.isSealed());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isExtensible());
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context1.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(context0.equals((Object)context1));
      assertFalse(context0.equals((Object)context2));
      assertFalse(context1.equals((Object)context0));
      assertFalse(context1.equals((Object)context2));
      
      Object object0 = ScriptableObject.getTopScopeValue(nativeCall0, context2);
      assertNotSame(context2, context0);
      assertNotSame(context2, context1);
      assertSame(nativeCall0, nativeCall1);
      assertNull(object0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context2.isGeneratingDebugChanged());
      assertTrue(context2.isGeneratingSource());
      assertEquals(0, context2.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context2.getMaximumInterpreterStackDepth());
      assertFalse(context2.isSealed());
      assertEquals(0, context2.getInstructionObserverThreshold());
      assertEquals(0, context2.getLanguageVersion());
      assertFalse(context2.isGeneratingDebug());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isExtensible());
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context2.generateObserverCount);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(context2.equals((Object)context0));
      assertFalse(context2.equals((Object)context1));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      Class<TopLevel> class0 = TopLevel.class;
      String string0 = ScriptableObject.defineClass((Scriptable) importerTopLevel0, class0, false, false);
      assertNotNull(string0);
      assertEquals("global", string0);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      Context context0 = contextFactory0.enterContext();
      assertNotNull(context0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      
      NativeObject nativeObject0 = (NativeObject)importerTopLevel0.getOwnPropertyDescriptor(context0, "global");
      assertNotNull(nativeObject0);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(nativeObject0.isEmpty());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isExtensible());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test053()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-1635L));
      assertNotNull(nativeArray0);
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals((-1635L), nativeArray0.getLength());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals((-1635L), nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      nativeArray0.delete(3064);
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals((-1635L), nativeArray0.getLength());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals((-1635L), nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      Class<Synchronizer> class0 = Synchronizer.class;
      // Undeclared exception!
      try { 
        ScriptableObject.getDefaultValue((Scriptable) nativeArray0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type class com.google.javascript.rhino.head.Synchronizer
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      
      NativeArray nativeArray0 = new NativeArray(4);
      assertNotNull(nativeArray0);
      assertFalse(nativeArray0.isSealed());
      assertEquals(4L, nativeArray0.getLength());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(4L, nativeArray0.jsGet_length());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isEmpty());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      ScriptableObject.putProperty((Scriptable) nativeArray0, "msg.default.value", (Object) "msg.default.value");
      assertFalse(nativeArray0.isSealed());
      assertEquals(4L, nativeArray0.getLength());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(4L, nativeArray0.jsGet_length());
      assertEquals("Array", nativeArray0.getClassName());
      assertFalse(nativeArray0.isEmpty());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      Object[] objectArray0 = ScriptableObject.getPropertyIds(nativeArray0);
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
      assertFalse(nativeArray0.isSealed());
      assertEquals(4L, nativeArray0.getLength());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(4L, nativeArray0.jsGet_length());
      assertEquals("Array", nativeArray0.getClassName());
      assertFalse(nativeArray0.isEmpty());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      assertNotNull(topLevel0);
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertFalse(topLevel0.isSealed());
      assertTrue(topLevel0.isExtensible());
      assertFalse(topLevel0.avoidObjectDetection());
      assertEquals("global", topLevel0.getClassName());
      assertTrue(topLevel0.isEmpty());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      Class<NativeJavaTopPackage> class0 = NativeJavaTopPackage.class;
      // Undeclared exception!
      try { 
        topLevel0.defineProperty("writable", class0, 237);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 237
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertNotNull(nativeJavaTopPackage0);
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) nativeJavaTopPackage0, "hasInstance");
      assertTrue(boolean0);
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      boolean boolean1 = nativeJavaTopPackage0.isGetterOrSetter("hasInstance", 1, true);
      assertFalse(boolean1);
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      assertNotNull(topLevel0);
      assertFalse(topLevel0.avoidObjectDetection());
      assertFalse(topLevel0.isSealed());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertTrue(topLevel0.isExtensible());
      assertTrue(topLevel0.isEmpty());
      assertEquals("global", topLevel0.getClassName());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      ScriptableObject.putConstProperty(topLevel0, "=c3z?{,blp", nativeContinuation0);
      assertFalse(topLevel0.avoidObjectDetection());
      assertFalse(topLevel0.isEmpty());
      assertFalse(topLevel0.isSealed());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertTrue(topLevel0.isExtensible());
      assertEquals("global", topLevel0.getClassName());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      
      Class<BoundFunction> class0 = BoundFunction.class;
      BoundFunction boundFunction0 = ScriptableObject.getTypedProperty((Scriptable) nativeError0, 0, class0);
      assertNull(boundFunction0);
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      
      ScriptableObject.putProperty((Scriptable) importerTopLevel0, (-1270), (Object) importerTopLevel0);
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      
      importerTopLevel0.delete((-1270));
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      
      Class<BaseFunction> class0 = BaseFunction.class;
      String string0 = ScriptableObject.defineClass((Scriptable) importerTopLevel0, class0, false, false);
      assertNotNull(string0);
      assertEquals("Function", string0);
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      nativeIterator_StopIteration0.preventExtensions();
      assertFalse(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      nativeContinuation0.defineConst("]CY6Jb;", nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertNotNull(nativeJavaTopPackage0);
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("kirw#\"", classLoader0);
      assertNotNull(nativeJavaPackage0);
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.isSealed());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      
      ScriptableObject.defineConstProperty(nativeJavaPackage0, "8h1EIVC_$NubH^E");
      assertFalse(nativeJavaPackage0.isEmpty());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.isSealed());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      
      nativeJavaTopPackage0.putConst("valueOf", nativeJavaPackage0, (Object) null);
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaPackage0.isEmpty());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.isSealed());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      
      // Undeclared exception!
      try { 
        nativeError0.defineOwnProperties(context0, nativeJavaPackage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Expected argument of type object, but instead had type object
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      ScriptableObject.putProperty((Scriptable) importerTopLevel0, (-3923), (Object) importerTopLevel0);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      assertNotNull(topLevel0);
      assertTrue(topLevel0.isExtensible());
      assertFalse(topLevel0.isSealed());
      assertFalse(topLevel0.avoidObjectDetection());
      assertTrue(topLevel0.isEmpty());
      assertEquals("global", topLevel0.getClassName());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      topLevel0.cacheBuiltins();
      assertTrue(topLevel0.isExtensible());
      assertFalse(topLevel0.isSealed());
      assertFalse(topLevel0.avoidObjectDetection());
      assertTrue(topLevel0.isEmpty());
      assertEquals("global", topLevel0.getClassName());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      Object[] objectArray0 = new Object[0];
      String string0 = NativeJavaMethod.scriptSignature(objectArray0);
      assertEquals(0, objectArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      assertNotNull(nativeJavaTopPackage0);
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      
      nativeJavaTopPackage0.checkPropertyChange("", topLevel0, topLevel0);
      assertTrue(topLevel0.isExtensible());
      assertFalse(topLevel0.isSealed());
      assertFalse(topLevel0.avoidObjectDetection());
      assertTrue(topLevel0.isEmpty());
      assertEquals("global", topLevel0.getClassName());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      
      nativeJavaTopPackage0.delete("");
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      Context context0 = new Context(contextFactory0);
      assertNotNull(context0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertNotNull(nativeJavaTopPackage0);
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      
      nativeIterator_StopIteration0.defineConst("msg.change.writable.false.to.true.with.configurable.false", nativeJavaTopPackage0);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      
      Object[] objectArray0 = ScriptableObject.getPropertyIds(nativeJavaTopPackage0);
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) nativeIterator_StopIteration0, 5821);
      assertFalse(boolean0);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      
      boolean boolean1 = nativeJavaTopPackage0.isConst("msg.change.writable.false.to.true.with.configurable.false");
      assertTrue(boolean1);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = ScriptableObject.isTrue((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1L);
      assertNotNull(nativeArray0);
      assertEquals("Array", nativeArray0.getClassName());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.isSealed());
      assertEquals(1L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(1L, nativeArray0.getLength());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      Integer[] integerArray0 = nativeArray0.getIndexIds();
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      assertEquals("Array", nativeArray0.getClassName());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.isSealed());
      assertEquals(1L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(1L, nativeArray0.getLength());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      Synchronizer synchronizer0 = new Synchronizer(nativeArray0, "Q2^3<Xo");
      assertNotNull(synchronizer0);
      assertEquals("Array", nativeArray0.getClassName());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.isSealed());
      assertEquals(1L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(1L, nativeArray0.getLength());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      nativeArray0.defineConst("Q2^3<Xo", synchronizer0);
      assertEquals("Array", nativeArray0.getClassName());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.isSealed());
      assertEquals(1L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(1L, nativeArray0.getLength());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test067()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      
      IdFunctionObject idFunctionObject0 = null;
      // Undeclared exception!
      try { 
        nativeError0.getAttributes(2470, (Scriptable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property 2470 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isEmpty());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      nativeContinuation0.defineOwnProperty((Context) null, "use stri(ct", nativeIterator_StopIteration0);
      assertFalse(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      Object[] objectArray0 = ScriptableObject.getPropertyIds(nativeIterator_StopIteration0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      NativeString.init(nativeContinuation0, true);
      assertFalse(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test069()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      boolean boolean0 = ScriptableObject.isFalse(importerTopLevel0);
      assertFalse(boolean0);
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.isSealed());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      
      ScriptableObject.putConstProperty(importerTopLevel0, "=c3z?{,blp", importerTopLevel0);
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test070()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertNotNull(nativeJavaTopPackage0);
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      ScriptableObject.putConstProperty(nativeJavaTopPackage0, "J4", "J4");
      assertSame(classLoader0, classLoader1);
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.isEmpty());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      // Undeclared exception!
      try { 
        ScriptableObject.redefineProperty(nativeJavaTopPackage0, "J4", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: redeclaration of const J4.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      
      Object object0 = ScriptableObject.getProperty((Scriptable) importerTopLevel0, 0);
      assertNotNull(object0);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      boolean boolean0 = ScriptableObject.isTrue(object0);
      assertFalse(boolean0);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test072()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(0.0);
      assertNotNull(nativeNumber0);
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.isSealed());
      assertTrue(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertEquals("Number", nativeNumber0.getClassName());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      String string0 = nativeNumber0.getClassName();
      assertNotNull(string0);
      assertEquals("Number", string0);
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.isSealed());
      assertTrue(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertEquals("Number", nativeNumber0.getClassName());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      Context context0 = contextFactory0.makeContext();
      assertNotNull(context0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      
      Context context1 = Context.enter(context0, contextFactory0);
      assertNotSame(context0, context1);
      assertNotSame(context1, context0);
      assertNotNull(context1);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context1.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertFalse(context1.isGeneratingDebug());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertFalse(context1.isSealed());
      assertTrue(context1.isGeneratingSource());
      assertEquals(0, context1.getLanguageVersion());
      assertFalse(context1.isGeneratingDebugChanged());
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context1.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertFalse(context1.equals((Object)context0));
      
      NativeNumber nativeNumber1 = (NativeNumber)context0.initStandardObjects((ScriptableObject) nativeNumber0, true);
      assertSame(nativeNumber0, nativeNumber1);
      assertNotSame(context0, context1);
      assertSame(nativeNumber1, nativeNumber0);
      assertNotNull(nativeNumber1);
      assertFalse(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.isSealed());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(nativeNumber1.avoidObjectDetection());
      assertFalse(nativeNumber1.isEmpty());
      assertEquals("Number", nativeNumber1.getClassName());
      assertFalse(nativeNumber1.isSealed());
      assertFalse(nativeNumber1.hasPrototypeMap());
      assertEquals("object", nativeNumber1.getTypeOf());
      assertTrue(nativeNumber1.isExtensible());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(context0.equals((Object)context1));
      
      nativeNumber0.defineOwnProperty(context1, (Object) "Number", (ScriptableObject) nativeNumber1, false);
      assertSame(nativeNumber0, nativeNumber1);
      assertNotSame(context0, context1);
      assertNotSame(context1, context0);
      assertSame(nativeNumber1, nativeNumber0);
      assertFalse(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.isSealed());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context1.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertFalse(context1.isGeneratingDebug());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertFalse(context1.isSealed());
      assertTrue(context1.isGeneratingSource());
      assertEquals(0, context1.getLanguageVersion());
      assertFalse(context1.isGeneratingDebugChanged());
      assertFalse(nativeNumber1.avoidObjectDetection());
      assertFalse(nativeNumber1.isEmpty());
      assertEquals("Number", nativeNumber1.getClassName());
      assertFalse(nativeNumber1.isSealed());
      assertFalse(nativeNumber1.hasPrototypeMap());
      assertEquals("object", nativeNumber1.getTypeOf());
      assertTrue(nativeNumber1.isExtensible());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context1.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(context0.equals((Object)context1));
      assertFalse(context1.equals((Object)context0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertNotNull(nativeJavaTopPackage0);
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      ScriptableObject.putConstProperty(nativeJavaTopPackage0, "]4", "]4");
      assertSame(classLoader0, classLoader1);
      assertFalse(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test074()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertTrue(nativeError0.isEmpty());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      assertNotNull(importerTopLevel0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      
      nativeContinuation0.defineConst("language version", importerTopLevel0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      NativeIterator.StopIteration nativeIterator_StopIteration1 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration1);
      assertTrue(nativeIterator_StopIteration1.isExtensible());
      assertFalse(nativeIterator_StopIteration1.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration1.getClassName());
      assertFalse(nativeIterator_StopIteration1.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration1.isEmpty());
      assertEquals("object", nativeIterator_StopIteration1.getTypeOf());
      assertFalse(nativeIterator_StopIteration1.hasPrototypeMap());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeIterator_StopIteration1.equals((Object)nativeIterator_StopIteration0));
      
      Object object0 = nativeIterator_StopIteration1.get("error reporter");
      assertNotSame(nativeIterator_StopIteration1, nativeIterator_StopIteration0);
      assertNull(object0);
      assertTrue(nativeIterator_StopIteration1.isExtensible());
      assertFalse(nativeIterator_StopIteration1.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration1.getClassName());
      assertFalse(nativeIterator_StopIteration1.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration1.isEmpty());
      assertEquals("object", nativeIterator_StopIteration1.getTypeOf());
      assertFalse(nativeIterator_StopIteration1.hasPrototypeMap());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeIterator_StopIteration1.equals((Object)nativeIterator_StopIteration0));
      
      Object[] objectArray0 = ScriptableObject.getPropertyIds(nativeIterator_StopIteration0);
      assertNotSame(nativeIterator_StopIteration0, nativeIterator_StopIteration1);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeIterator_StopIteration0.equals((Object)nativeIterator_StopIteration1));
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertNotNull(nativeJavaTopPackage0);
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      
      nativeIterator_StopIteration0.put("u.a|E.bgd'sBSK<", (Scriptable) nativeContinuation0, (Object) nativeContinuation0);
      assertFalse(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      
      nativeContinuation0.defineConst("u.a|E.bgd'sBSK<", nativeIterator_StopIteration0);
      assertFalse(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      
      Object[] objectArray0 = importerTopLevel0.getAllIds();
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test078()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertFalse(nativeError0.isSealed());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      
      Class<BoundFunction> class0 = BoundFunction.class;
      BoundFunction boundFunction0 = ScriptableObject.getTypedProperty((Scriptable) nativeError0, 101, class0);
      assertNull(boundFunction0);
      assertFalse(nativeError0.isSealed());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) nativeError0;
      objectArray0[2] = (Object) nativeError0;
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      assertEquals(3, objectArray0.length);
      assertNotNull(nativeArray0);
      assertEquals("Array", nativeArray0.getClassName());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.isSealed());
      assertEquals(3L, nativeArray0.getLength());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals(3L, nativeArray0.jsGet_length());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      
      Class<NativeContinuation> class1 = NativeContinuation.class;
      String string0 = ScriptableObject.defineClass((Scriptable) nativeError0, class1, false, false);
      assertNull(string0);
      assertFalse(nativeError0.isSealed());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertEquals("Error", nativeError0.getClassName());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      
      nativeArray0.setInstanceIdAttributes(1, 8);
      assertEquals(3, objectArray0.length);
      assertEquals("Array", nativeArray0.getClassName());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.isSealed());
      assertEquals(3L, nativeArray0.getLength());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals(3L, nativeArray0.jsGet_length());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      Context context0 = contextFactory0.enter();
      assertNotNull(context0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      
      importerTopLevel0.initStandardObjects(context0, true);
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      assertNotNull(topLevel0);
      assertFalse(topLevel0.isSealed());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertTrue(topLevel0.isExtensible());
      assertEquals("global", topLevel0.getClassName());
      assertFalse(topLevel0.avoidObjectDetection());
      assertTrue(topLevel0.isEmpty());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      
      boolean boolean0 = topLevel0.isGenericDescriptor(importerTopLevel0);
      assertTrue(boolean0);
      assertFalse(topLevel0.isSealed());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertTrue(topLevel0.isExtensible());
      assertEquals("global", topLevel0.getClassName());
      assertFalse(topLevel0.avoidObjectDetection());
      assertTrue(topLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test081()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertNotNull(nativeJavaTopPackage0);
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("kirw#\"", classLoader0);
      assertNotNull(nativeJavaPackage0);
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertFalse(nativeJavaPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      ScriptableObject.defineConstProperty(nativeJavaPackage0, "8h1EIVC_$NubH^E");
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertFalse(nativeJavaPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.isEmpty());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      
      nativeIterator_StopIteration0.put("<S>2|*Bwk7|=hUwLRSX", (Scriptable) nativeJavaTopPackage0, (Object) nativeJavaPackage0);
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertFalse(nativeJavaPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.isEmpty());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        ScriptableObject.getDefaultValue((Scriptable) nativeJavaTopPackage0, (Class<?>) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      assertNotNull(topLevel0);
      assertTrue(topLevel0.isExtensible());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertTrue(topLevel0.isEmpty());
      assertFalse(topLevel0.avoidObjectDetection());
      assertFalse(topLevel0.isSealed());
      assertEquals("global", topLevel0.getClassName());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      
      Object[] objectArray0 = ScriptableObject.getPropertyIds(nativeIterator_StopIteration0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test083()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      assertNotNull(nativeCall0);
      assertTrue(nativeCall0.isEmpty());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      
      ScriptableObject.checkValidAttributes(4);
      Class<Long> class0 = Long.class;
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      assertNotNull(nativeBoolean0);
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isExtensible());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      Object object0 = nativeIterator_StopIteration0.get(",}`3NXL>uM@f__bU(#@");
      assertNull(object0);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      nativeBoolean0.put(4, (Scriptable) nativeCall0, (Object) null);
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isExtensible());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      nativeCall0.defineProperty(",}`3NXL>uM@f__bU(#@", (Object) nativeBoolean0, 0);
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isExtensible());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      nativeCall0.defineProperty(",}`3NXL>uM@f__bU(#@", class0, 0);
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      
      Class<NativeJSON> class1 = NativeJSON.class;
      // Undeclared exception!
      try { 
        ScriptableObject.getDefaultValue((Scriptable) nativeCall0, (Class<?>) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type class com.google.javascript.rhino.head.NativeJSON
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test084()  throws Throwable  {
      Class<NativeContinuation> class0 = NativeContinuation.class;
      // Undeclared exception!
      try { 
        ScriptableObject.getDefaultValue((Scriptable) null, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type class com.google.javascript.rhino.head.NativeContinuation
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertNotNull(nativeJavaTopPackage0);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      Class<BoundFunction> class0 = BoundFunction.class;
      NativeObject nativeObject0 = (NativeObject)ScriptableObject.buildDataDescriptor(nativeError0, class0, 2);
      assertNotNull(nativeObject0);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isEmpty());
      assertFalse(nativeObject0.isSealed());
      assertTrue(nativeObject0.isExtensible());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      BoundFunction boundFunction0 = ScriptableObject.getTypedProperty((Scriptable) nativeJavaTopPackage0, 60, class0);
      assertNull(boundFunction0);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      assertNotNull(topLevel0);
      assertFalse(topLevel0.isSealed());
      assertFalse(topLevel0.avoidObjectDetection());
      assertTrue(topLevel0.isEmpty());
      assertTrue(topLevel0.isExtensible());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertEquals("global", topLevel0.getClassName());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod((Scriptable) topLevel0, "0;2*tu|L;.\"", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000003 is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertNotNull(nativeJavaTopPackage0);
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      
      String string0 = "";
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) nativeJavaTopPackage0, "");
      assertTrue(boolean0);
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      
      Class<IdFunctionObject> class0 = IdFunctionObject.class;
      // Undeclared exception!
      try { 
        nativeJavaTopPackage0.defineProperty("", class0, 3181);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1016L);
      assertNotNull(nativeArray0);
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(1016L, nativeArray0.getLength());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals(1016L, nativeArray0.jsGet_length());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test089()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      Context context0 = Context.getCurrentContext();
      assertNotNull(context0);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      
      NativeCall nativeCall0 = context0.currentActivationCall;
      assertNull(nativeCall0);
      
      Context context1 = Context.enter();
      assertSame(context1, context0);
      assertNotNull(context1);
      assertEquals(0, context1.getOptimizationLevel());
      assertFalse(context1.isGeneratingDebugChanged());
      assertFalse(context1.isSealed());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertEquals(0, context1.getLanguageVersion());
      assertFalse(context1.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertTrue(context1.isGeneratingSource());
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context1.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      
      Float float0 = new Float((float) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      ScriptableObject scriptableObject0 = importerTopLevel0.getOwnPropertyDescriptor(context1, float0);
      assertSame(context1, context0);
      assertNull(scriptableObject0);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertEquals(0, context1.getOptimizationLevel());
      assertFalse(context1.isGeneratingDebugChanged());
      assertFalse(context1.isSealed());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertEquals(0, context1.getLanguageVersion());
      assertFalse(context1.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertTrue(context1.isGeneratingSource());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context1.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      
      String string0 = importerTopLevel0.getTypeOf();
      assertNotNull(string0);
      assertEquals("object", string0);
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test091()  throws Throwable  {
      Class<NativeDate> class0 = NativeDate.class;
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      
      // Undeclared exception!
      try { 
        ScriptableObject.ensureScriptableObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type java.lang.Class
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      
      Context context0 = contextFactory0.enter();
      assertNotNull(context0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertNotNull(importerTopLevel0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("language version", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("language version", propertyChangeListenerProxy0.getPropertyName());
      
      context0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals("language version", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      
      ScriptableObject.putProperty((Scriptable) importerTopLevel0, (-1850962679), (Object) importerTopLevel0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      
      boolean boolean0 = ScriptableObject.isTrue(context0);
      assertTrue(boolean0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertTrue(nativeContinuation0.isEmpty());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      
      // Undeclared exception!
      try { 
        nativeContinuation0.setGetterOrSetter("-Q", 13, nativeContinuation0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -Q
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      Context context0 = new Context(contextFactory0);
      assertNotNull(context0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      assertNotNull(classLoader0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertNotNull(nativeJavaTopPackage0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      
      Object object0 = nativeJavaTopPackage0.getGetterOrSetter("language version", 0, false);
      assertNull(object0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeError0, 13);
      assertTrue(boolean0);
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      
      Context context0 = new Context(contextFactory0);
      assertNotNull(context0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      assertNotNull(classLoader0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertNotNull(nativeJavaTopPackage0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      
      // Undeclared exception!
      try { 
        nativeJavaTopPackage0.getGetterOrSetter("error reporter", 10, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // error reporter
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      Scriptable scriptable0 = ScriptableObject.getArrayPrototype(importerTopLevel0);
      assertNull(scriptable0);
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) importerTopLevel0, 2);
      assertFalse(boolean0);
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(160, Context.VERSION_1_6);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      
      NativeArray nativeArray0 = new NativeArray(3);
      assertNotNull(nativeArray0);
      assertFalse(nativeArray0.isSealed());
      assertEquals(3L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(3L, nativeArray0.getLength());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      
      Delegator delegator0 = new Delegator(nativeArray0);
      assertNotNull(delegator0);
      assertFalse(nativeArray0.isSealed());
      assertEquals(3L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(3L, nativeArray0.getLength());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      
      // Undeclared exception!
      try { 
        ScriptableObject.defineConstProperty(delegator0, "msg.setuter.return");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertNotNull(nativeJavaTopPackage0);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      nativeIterator_StopIteration0.defineConst("msg.change.writable.false.to.true.with.configurable.false", nativeJavaTopPackage0);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isEmpty());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      Object[] objectArray0 = ScriptableObject.getPropertyIds(nativeJavaTopPackage0);
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isEmpty());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) nativeIterator_StopIteration0, 5821);
      assertFalse(boolean0);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      NativeCall nativeCall0 = new NativeCall();
      assertNotNull(nativeCall0);
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isEmpty());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      Synchronizer synchronizer0 = new Synchronizer(nativeCall0);
      assertNotNull(synchronizer0);
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isEmpty());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      
      Context context1 = contextFactory0.enterContext(context0);
      assertSame(context0, context1);
      assertSame(context1, context0);
      assertNotNull(context1);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context1.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertEquals(0, context1.getLanguageVersion());
      assertFalse(context1.isGeneratingDebug());
      assertTrue(context1.isGeneratingSource());
      assertFalse(context1.isSealed());
      assertFalse(context1.isGeneratingDebugChanged());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertFalse(context1.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      
      NativeCall nativeCall1 = context1.currentActivationCall;
      assertNull(nativeCall1);
      
      ScriptableObject.putConstProperty(synchronizer0, "jsFunction_", nativeCall1);
      assertSame(context0, context1);
      assertSame(context1, context0);
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.isSealed());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context1.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertEquals(0, context1.getLanguageVersion());
      assertFalse(context1.isGeneratingDebug());
      assertTrue(context1.isGeneratingSource());
      assertFalse(context1.isSealed());
      assertFalse(context1.isGeneratingDebugChanged());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertFalse(context1.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test100()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      
      Context context0 = Context.getCurrentContext();
      assertNotNull(context0);
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      
      ScriptableObject.redefineProperty(importerTopLevel0, "language version", true);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      assertNotNull(importerTopLevel0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      int int0 = nativeIterator_StopIteration0.applyDescriptorToAttributeBitset(4, importerTopLevel0);
      assertEquals(4, int0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      // Undeclared exception!
      try { 
        NativeJavaArray.wrap((Scriptable) importerTopLevel0, (Object) context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Array expected
         //
         verifyException("com.google.javascript.rhino.head.NativeJavaArray", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test102()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      Class<Arguments> class0 = Arguments.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) importerTopLevel0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot load class \"com.google.javascript.rhino.head.Arguments\" which has no zero-parameter constructor.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test103()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      assertNotNull(topLevel0);
      assertFalse(topLevel0.isSealed());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertEquals("global", topLevel0.getClassName());
      assertTrue(topLevel0.isExtensible());
      assertFalse(topLevel0.avoidObjectDetection());
      assertTrue(topLevel0.isEmpty());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      Context context0 = Context.getCurrentContext();
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.generateObserverCount);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      
      NativeCall nativeCall0 = new NativeCall();
      assertNotNull(nativeCall0);
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isEmpty());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      // Undeclared exception!
      try { 
        topLevel0.getOwnPropertyDescriptor(context0, nativeCall0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      nativeIterator_StopIteration0.preventExtensions();
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      Class<BoundFunction> class0 = BoundFunction.class;
      BoundFunction boundFunction0 = ScriptableObject.getTypedProperty((Scriptable) nativeIterator_StopIteration0, 8, class0);
      assertNull(boundFunction0);
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      // Undeclared exception!
      try { 
        nativeIterator_StopIteration0.checkPropertyChange("}~X", (ScriptableObject) null, (ScriptableObject) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot add properties to this object because extensible is false.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      
      NativeArray nativeArray0 = new NativeArray(1);
      assertNotNull(nativeArray0);
      assertTrue(nativeArray0.isExtensible());
      assertTrue(nativeArray0.isEmpty());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(1L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(1L, nativeArray0.getLength());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      ScriptableObject.putProperty((Scriptable) nativeArray0, "toString", (Object) nativeError0);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeArray0.isEmpty());
      assertTrue(nativeArray0.isExtensible());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(1L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(1L, nativeArray0.getLength());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      boolean boolean0 = nativeArray0.isEmpty();
      assertFalse(boolean0);
      assertFalse(nativeArray0.isEmpty());
      assertTrue(nativeArray0.isExtensible());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(1L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(1L, nativeArray0.getLength());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isExtensible());
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertNotNull(importerTopLevel0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      boolean boolean0 = importerTopLevel0.isConst((String) null);
      assertFalse(boolean0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      boolean boolean1 = ScriptableObject.isTrue(importerTopLevel0);
      assertTrue(boolean1);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ScriptableObject.deleteProperty((Scriptable) nativeContinuation0, (String) null);
      assertTrue(boolean2);
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int int0 = ScriptableObject.DONTENUM;
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertNotNull(nativeJavaTopPackage0);
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      Object object0 = nativeJavaTopPackage0.equivalentValues("hasInstance");
      assertNotNull(object0);
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      int int0 = ScriptableObject.DONTENUM;
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test108()  throws Throwable  {
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(110, Context.VERSION_1_1);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      assertNotNull(importerTopLevel0);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(110, Context.VERSION_1_1);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      Object[] objectArray0 = importerTopLevel0.getAllIds();
      assertEquals(59, objectArray0.length);
      assertNotNull(objectArray0);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(110, Context.VERSION_1_1);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      
      ScriptableObject.putProperty((Scriptable) importerTopLevel0, (-1259), (Object) importerTopLevel0);
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      
      importerTopLevel0.delete(7);
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      
      Class<BaseFunction> class0 = BaseFunction.class;
      String string0 = ScriptableObject.defineClass((Scriptable) importerTopLevel0, class0, false, true);
      assertNotNull(string0);
      assertEquals("Function", string0);
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test110()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertNotNull(nativeJavaTopPackage0);
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.isSealed());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      nativeJavaTopPackage0.setParentScope(nativeContinuation0);
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.isSealed());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      Class<NativeIterator> class0 = NativeIterator.class;
      // Undeclared exception!
      try { 
        ScriptableObject.getTypedProperty((Scriptable) nativeJavaTopPackage0, "c`}/,{7M", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot convert [JavaPackage c`}/,{7M] to com.google.javascript.rhino.head.NativeIterator
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) nativeError0, "6w?2k$EAY0m+fWpE*");
      assertFalse(boolean0);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      
      int int0 = ScriptableObject.DONTENUM;
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test112()  throws Throwable  {
      Object[] objectArray0 = ScriptableObject.getPropertyIds((Scriptable) null);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      // Undeclared exception!
      try { 
        NativeString.init((Scriptable) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot modify a property of a sealed object: String.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      nativeContinuation0.delete(428);
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      nativeIterator_StopIteration0.setAttributes("XN", (Scriptable) nativeContinuation0, 0);
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      Class<BaseFunction> class0 = BaseFunction.class;
      String string0 = ScriptableObject.defineClass((Scriptable) nativeIterator_StopIteration0, class0, true, true);
      assertNotNull(string0);
      assertEquals("Function", string0);
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test114()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertNotNull(nativeJavaTopPackage0);
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) nativeJavaTopPackage0, "haszstance");
      assertTrue(boolean0);
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      // Undeclared exception!
      try { 
        ScriptableObject.redefineProperty(nativeJavaTopPackage0, "haszstance", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: redeclaration of var haszstance.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      
      NativeError nativeError1 = (NativeError)ScriptableObject.ensureScriptableObject(nativeError0);
      assertSame(nativeError0, nativeError1);
      assertSame(nativeError1, nativeError0);
      assertNotNull(nativeError1);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError1.isSealed());
      assertEquals("Error", nativeError1.getClassName());
      assertFalse(nativeError1.avoidObjectDetection());
      assertTrue(nativeError1.isEmpty());
      assertEquals("object", nativeError1.getTypeOf());
      assertFalse(nativeError1.hasPrototypeMap());
      assertTrue(nativeError1.isExtensible());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test116()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      nativeError0.delete("msg.const.redecl");
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      NativeArray nativeArray0 = new NativeArray(0);
      assertNotNull(nativeArray0);
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.isSealed());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(0L, nativeArray0.getLength());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      // Undeclared exception!
      try { 
        nativeError0.getAttributes("msg.const.redecl", (Scriptable) nativeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property msg.const.redecl not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      LazilyLoadedCtor lazilyLoadedCtor0 = new LazilyLoadedCtor(nativeError0, "", "", true, true);
      assertNotNull(lazilyLoadedCtor0);
      assertFalse(nativeError0.isEmpty());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      // Undeclared exception!
      try { 
        nativeError0.addLazilyInitializedValue((String) null, 747, lazilyLoadedCtor0, 747);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 747
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test118()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      Class<FunctionObject> class0 = FunctionObject.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) importerTopLevel0, class0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot load class \"com.google.javascript.rhino.head.FunctionObject\" which has no zero-parameter constructor.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      Object object0 = importerTopLevel0.getGetterOrSetter((String) null, (-469), false);
      assertNull(object0);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) importerTopLevel0, 8);
      assertTrue(boolean0);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test120()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      
      Context context0 = Context.getCurrentContext();
      assertNotNull(context0);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      
      BaseFunction baseFunction0 = new BaseFunction(importerTopLevel0, importerTopLevel0);
      assertNotNull(baseFunction0);
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertEquals("Function", baseFunction0.getClassName());
      assertFalse(baseFunction0.isSealed());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertEquals("function", baseFunction0.getTypeOf());
      assertTrue(baseFunction0.isExtensible());
      assertTrue(baseFunction0.isEmpty());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      
      ScriptableObject.putConstProperty(baseFunction0, "language version", context0);
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertEquals("Function", baseFunction0.getClassName());
      assertFalse(baseFunction0.isSealed());
      assertFalse(baseFunction0.isEmpty());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertEquals("function", baseFunction0.getTypeOf());
      assertTrue(baseFunction0.isExtensible());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      
      nativeIterator_StopIteration0.preventExtensions();
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      
      NativeIterator.StopIteration nativeIterator_StopIteration1 = (NativeIterator.StopIteration)nativeIterator_StopIteration0.getOrDefault(nativeIterator_StopIteration0, nativeIterator_StopIteration0);
      assertSame(nativeIterator_StopIteration0, nativeIterator_StopIteration1);
      assertSame(nativeIterator_StopIteration1, nativeIterator_StopIteration0);
      assertNotNull(nativeIterator_StopIteration1);
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration1.getTypeOf());
      assertFalse(nativeIterator_StopIteration1.isSealed());
      assertFalse(nativeIterator_StopIteration1.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration1.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration1.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration1.getClassName());
      assertFalse(nativeIterator_StopIteration1.isExtensible());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      
      String[] stringArray0 = new String[20];
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        ScriptableObject.getDefaultValue((Scriptable) importerTopLevel0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test123()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      Context context0 = new Context(contextFactory0);
      assertNotNull(context0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      
      EvaluatorException evaluatorException0 = new EvaluatorException("<J!;pW%)g+(cOzF|");
      assertNotNull(evaluatorException0);
      
      Context.reportWarning("language version", (Throwable) evaluatorException0);
      assertFalse(evaluatorException0.usesMozillaStackStyle());
      assertEquals(0, evaluatorException0.lineNumber());
      assertEquals(0, evaluatorException0.columnNumber());
      assertNull(evaluatorException0.lineSource());
      assertNull(evaluatorException0.getLineSource());
      assertEquals(0, evaluatorException0.getLineNumber());
      assertNull(evaluatorException0.sourceName());
      assertEquals(0, evaluatorException0.getColumnNumber());
      assertNull(evaluatorException0.getSourceName());
      
      NativeNumber nativeNumber0 = new NativeNumber((-1288.21666202156));
      assertNotNull(nativeNumber0);
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.isSealed());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertTrue(nativeNumber0.isEmpty());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      NativeNumber nativeNumber1 = (NativeNumber)ScriptableObject.getTopLevelScope(nativeNumber0);
      assertSame(nativeNumber0, nativeNumber1);
      assertSame(nativeNumber1, nativeNumber0);
      assertNotNull(nativeNumber1);
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.isSealed());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isExtensible());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertTrue(nativeNumber0.isEmpty());
      assertTrue(nativeNumber1.isExtensible());
      assertFalse(nativeNumber1.hasPrototypeMap());
      assertEquals("object", nativeNumber1.getTypeOf());
      assertTrue(nativeNumber1.isEmpty());
      assertFalse(nativeNumber1.avoidObjectDetection());
      assertFalse(nativeNumber1.isSealed());
      assertEquals("Number", nativeNumber1.getClassName());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      
      context0.setGeneratingDebug(true);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      
      IdFunctionObject idFunctionObject0 = nativeNumber0.exportAsJSClass(3, nativeNumber1, false);
      assertSame(nativeNumber0, nativeNumber1);
      assertSame(nativeNumber1, nativeNumber0);
      assertNotNull(idFunctionObject0);
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.isSealed());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.hasPrototypeMap());
      assertFalse(nativeNumber0.isEmpty());
      assertTrue(nativeNumber0.isExtensible());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertTrue(nativeNumber1.isExtensible());
      assertFalse(nativeNumber1.isEmpty());
      assertEquals("object", nativeNumber1.getTypeOf());
      assertTrue(nativeNumber1.hasPrototypeMap());
      assertFalse(nativeNumber1.avoidObjectDetection());
      assertFalse(nativeNumber1.isSealed());
      assertEquals("Number", nativeNumber1.getClassName());
      assertEquals("Number", idFunctionObject0.getFunctionName());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertTrue(idFunctionObject0.isExtensible());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals(1, idFunctionObject0.getArity());
      assertFalse(idFunctionObject0.isEmpty());
      assertEquals(1, idFunctionObject0.methodId());
      assertEquals(1, idFunctionObject0.getLength());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      
      NativeNumber nativeNumber2 = (NativeNumber)context0.initStandardObjects((ScriptableObject) nativeNumber0, true);
      assertSame(nativeNumber0, nativeNumber1);
      assertSame(nativeNumber0, nativeNumber2);
      assertSame(nativeNumber2, nativeNumber0);
      assertSame(nativeNumber2, nativeNumber1);
      assertNotNull(nativeNumber2);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.isSealed());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.hasPrototypeMap());
      assertFalse(nativeNumber0.isEmpty());
      assertTrue(nativeNumber0.isExtensible());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertFalse(nativeNumber2.avoidObjectDetection());
      assertTrue(nativeNumber2.hasPrototypeMap());
      assertFalse(nativeNumber2.isEmpty());
      assertFalse(nativeNumber2.isSealed());
      assertEquals("Number", nativeNumber2.getClassName());
      assertEquals("object", nativeNumber2.getTypeOf());
      assertTrue(nativeNumber2.isExtensible());
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      boolean boolean0 = nativeNumber2.isConst("language version");
      assertSame(nativeNumber0, nativeNumber1);
      assertSame(nativeNumber0, nativeNumber2);
      assertSame(nativeNumber2, nativeNumber0);
      assertSame(nativeNumber2, nativeNumber1);
      assertFalse(boolean0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.isSealed());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.hasPrototypeMap());
      assertFalse(nativeNumber0.isEmpty());
      assertTrue(nativeNumber0.isExtensible());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertFalse(nativeNumber2.avoidObjectDetection());
      assertTrue(nativeNumber2.hasPrototypeMap());
      assertFalse(nativeNumber2.isEmpty());
      assertFalse(nativeNumber2.isSealed());
      assertEquals("Number", nativeNumber2.getClassName());
      assertEquals("object", nativeNumber2.getTypeOf());
      assertTrue(nativeNumber2.isExtensible());
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      nativeNumber0.defineOwnProperty(context0, (Object) idFunctionObject0, (ScriptableObject) nativeNumber2, false);
      assertSame(nativeNumber0, nativeNumber1);
      assertSame(nativeNumber0, nativeNumber2);
      assertSame(nativeNumber1, nativeNumber2);
      assertSame(nativeNumber1, nativeNumber0);
      assertSame(nativeNumber2, nativeNumber0);
      assertSame(nativeNumber2, nativeNumber1);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.isSealed());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.hasPrototypeMap());
      assertFalse(nativeNumber0.isEmpty());
      assertTrue(nativeNumber0.isExtensible());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertTrue(nativeNumber1.isExtensible());
      assertFalse(nativeNumber1.isEmpty());
      assertEquals("object", nativeNumber1.getTypeOf());
      assertTrue(nativeNumber1.hasPrototypeMap());
      assertFalse(nativeNumber1.avoidObjectDetection());
      assertFalse(nativeNumber1.isSealed());
      assertEquals("Number", nativeNumber1.getClassName());
      assertEquals("Number", idFunctionObject0.getFunctionName());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertTrue(idFunctionObject0.isExtensible());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals(1, idFunctionObject0.getArity());
      assertFalse(idFunctionObject0.isEmpty());
      assertEquals(1, idFunctionObject0.methodId());
      assertEquals(1, idFunctionObject0.getLength());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertFalse(nativeNumber2.avoidObjectDetection());
      assertTrue(nativeNumber2.hasPrototypeMap());
      assertFalse(nativeNumber2.isEmpty());
      assertFalse(nativeNumber2.isSealed());
      assertEquals("Number", nativeNumber2.getClassName());
      assertEquals("object", nativeNumber2.getTypeOf());
      assertTrue(nativeNumber2.isExtensible());
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("/o7j%qSEb9f");
      assertNotNull(nativeJavaPackage0);
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertFalse(nativeJavaPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      MemberBox[] memberBoxArray0 = new MemberBox[0];
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod(memberBoxArray0, "A[AA,/./,.O;6W[wf");
      assertEquals(0, memberBoxArray0.length);
      assertNotNull(nativeJavaMethod0);
      assertTrue(nativeJavaMethod0.isExtensible());
      assertEquals("function", nativeJavaMethod0.getTypeOf());
      assertEquals("A[AA,/./,.O;6W[wf", nativeJavaMethod0.getFunctionName());
      assertEquals("Function", nativeJavaMethod0.getClassName());
      assertFalse(nativeJavaMethod0.avoidObjectDetection());
      assertFalse(nativeJavaMethod0.isSealed());
      assertTrue(nativeJavaMethod0.isEmpty());
      assertFalse(nativeJavaMethod0.hasPrototypeMap());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      UniqueTag uniqueTag0 = (UniqueTag)nativeError0.getStack();
      assertNotNull(uniqueTag0);
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.isSealed());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      
      // Undeclared exception!
      try { 
        nativeContinuation0.construct(context0, nativeNumber0, memberBoxArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Direct call is not supported
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        NativeString.init((Scriptable) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot modify a property of a sealed object: String.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test125()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertNotNull(nativeJavaTopPackage0);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      
      NativeJavaTopPackage nativeJavaTopPackage1 = new NativeJavaTopPackage(classLoader0);
      assertNotNull(nativeJavaTopPackage1);
      assertEquals("JavaPackage", nativeJavaTopPackage1.getClassName());
      assertTrue(nativeJavaTopPackage1.isEmpty());
      assertTrue(nativeJavaTopPackage1.isExtensible());
      assertEquals("object", nativeJavaTopPackage1.getTypeOf());
      assertFalse(nativeJavaTopPackage1.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage1.isSealed());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeJavaTopPackage1.equals((Object)nativeJavaTopPackage0));
      
      ScriptableObject.defineConstProperty(nativeJavaTopPackage1, "8h1EIVC_$NubH^E");
      assertNotSame(nativeJavaTopPackage1, nativeJavaTopPackage0);
      assertEquals("JavaPackage", nativeJavaTopPackage1.getClassName());
      assertTrue(nativeJavaTopPackage1.isExtensible());
      assertEquals("object", nativeJavaTopPackage1.getTypeOf());
      assertFalse(nativeJavaTopPackage1.isEmpty());
      assertFalse(nativeJavaTopPackage1.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage1.isSealed());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeJavaTopPackage1.equals((Object)nativeJavaTopPackage0));
      
      nativeJavaTopPackage0.putConst("throw", nativeJavaTopPackage1, (Object) null);
      assertNotSame(nativeJavaTopPackage0, nativeJavaTopPackage1);
      assertNotSame(nativeJavaTopPackage1, nativeJavaTopPackage0);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals("JavaPackage", nativeJavaTopPackage1.getClassName());
      assertTrue(nativeJavaTopPackage1.isExtensible());
      assertEquals("object", nativeJavaTopPackage1.getTypeOf());
      assertFalse(nativeJavaTopPackage1.isEmpty());
      assertFalse(nativeJavaTopPackage1.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage1.isSealed());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeJavaTopPackage0.equals((Object)nativeJavaTopPackage1));
      assertTrue(nativeJavaTopPackage1.equals((Object)nativeJavaTopPackage0));
      
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) nativeJavaTopPackage0, "throw");
      assertNotSame(nativeJavaTopPackage0, nativeJavaTopPackage1);
      assertTrue(boolean0);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(nativeJavaTopPackage0.equals((Object)nativeJavaTopPackage1));
      
      boolean boolean1 = ScriptableObject.isFalse(classLoader0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = ScriptableObject.DONTENUM;
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test126()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertNotNull(nativeJavaTopPackage0);
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      
      Float float0 = new Float((double) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      // Undeclared exception!
      try { 
        nativeContinuation0.defineOwnProperty((Context) null, float0, nativeJavaTopPackage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test127()  throws Throwable  {
      Context context0 = new Context();
      assertNotNull(context0);
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      assertNotNull(importerTopLevel0);
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      
      importerTopLevel0.cacheBuiltins();
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      Object object0 = ScriptableObject.getTopScopeValue(nativeIterator_StopIteration0, nativeIterator_StopIteration0);
      assertNull(object0);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains(false));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      
      importerTopLevel0.sealObject();
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      
      Context context1 = Context.enter(context0, contextFactory0);
      assertNotSame(context0, context1);
      assertNotSame(context1, context0);
      assertNotNull(context1);
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context1.isGeneratingDebugChanged());
      assertEquals(0, context1.getOptimizationLevel());
      assertTrue(context1.isGeneratingSource());
      assertFalse(context1.isGeneratingDebug());
      assertFalse(context1.isSealed());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertEquals(0, context1.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context1.generateObserverCount);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertFalse(context1.equals((Object)context0));
      
      String string0 = nativeIterator_StopIteration0.toString();
      assertNotNull(string0);
      assertEquals("[object StopIteration]", string0);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeIterator_StopIteration0, importerTopLevel0, 110, 52);
      assertNotNull(idFunctionObject0);
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals(52, idFunctionObject0.getArity());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertTrue(idFunctionObject0.isEmpty());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertEquals(110, idFunctionObject0.methodId());
      assertEquals(52, idFunctionObject0.getLength());
      assertEquals("", idFunctionObject0.getFunctionName());
      assertFalse(idFunctionObject0.isSealed());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(context0.equals((Object)context1));
      
      Class<Synchronizer> class0 = Synchronizer.class;
      // Undeclared exception!
      try { 
        ScriptableObject.getDefaultValue((Scriptable) nativeIterator_StopIteration0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type class com.google.javascript.rhino.head.Synchronizer
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.isSealed());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      
      NativeCall nativeCall0 = context0.currentActivationCall;
      assertNull(nativeCall0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      // Undeclared exception!
      try { 
        nativeError0.setAttributes((-3), (Scriptable) null, (-3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      assertNotNull(topLevel0);
      assertTrue(topLevel0.isExtensible());
      assertEquals("global", topLevel0.getClassName());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertTrue(topLevel0.isEmpty());
      assertFalse(topLevel0.avoidObjectDetection());
      assertFalse(topLevel0.isSealed());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      // Undeclared exception!
      try { 
        ScriptableObject.getDefaultValue((Scriptable) null, (Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      
      nativeIterator_StopIteration0.preventExtensions();
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isExtensible());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      
      NativeString.init(nativeIterator_StopIteration0, true);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration0.isExtensible());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeIterator_StopIteration0, nativeIterator_StopIteration0, 2, 4);
      assertNotNull(idFunctionObject0);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration0.isExtensible());
      assertTrue(idFunctionObject0.isEmpty());
      assertEquals(4, idFunctionObject0.getArity());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals("", idFunctionObject0.getFunctionName());
      assertFalse(idFunctionObject0.isSealed());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertEquals(2, idFunctionObject0.methodId());
      assertEquals(4, idFunctionObject0.getLength());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      boolean boolean0 = idFunctionObject0.sameValue(nativeIterator_StopIteration0, (Object) null);
      assertFalse(boolean0);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration0.isExtensible());
      assertTrue(idFunctionObject0.isEmpty());
      assertEquals(4, idFunctionObject0.getArity());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals("", idFunctionObject0.getFunctionName());
      assertFalse(idFunctionObject0.isSealed());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertEquals(2, idFunctionObject0.methodId());
      assertEquals(4, idFunctionObject0.getLength());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      int int0 = idFunctionObject0.methodId();
      assertEquals(2, int0);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration0.isExtensible());
      assertTrue(idFunctionObject0.isEmpty());
      assertEquals(4, idFunctionObject0.getArity());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals("", idFunctionObject0.getFunctionName());
      assertFalse(idFunctionObject0.isSealed());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertEquals(2, idFunctionObject0.methodId());
      assertEquals(4, idFunctionObject0.getLength());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      String string0 = idFunctionObject0.getInstanceIdName(1);
      assertNotNull(string0);
      assertEquals("length", string0);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertFalse(nativeIterator_StopIteration0.isExtensible());
      assertTrue(idFunctionObject0.isEmpty());
      assertEquals(4, idFunctionObject0.getArity());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals("", idFunctionObject0.getFunctionName());
      assertFalse(idFunctionObject0.isSealed());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertEquals(2, idFunctionObject0.methodId());
      assertEquals(4, idFunctionObject0.getLength());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test132()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      boolean boolean0 = ScriptableObject.isTrue(classLoader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      
      ClassLoader classLoader0 = contextFactory0.getApplicationClassLoader();
      assertNull(classLoader0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      assertNotNull(nativeJavaTopPackage0);
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      int int0 = 1784;
      // Undeclared exception!
      try { 
        JavaAdapter.runScript((Script) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.JavaAdapter$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isExtensible());
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      
      TopLevel topLevel0 = new TopLevel();
      assertNotNull(topLevel0);
      assertTrue(topLevel0.isEmpty());
      assertFalse(topLevel0.isSealed());
      assertFalse(topLevel0.avoidObjectDetection());
      assertTrue(topLevel0.isExtensible());
      assertEquals("global", topLevel0.getClassName());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      nativeError0.defineOwnProperties(context0, topLevel0);
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isExtensible());
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(topLevel0.isEmpty());
      assertFalse(topLevel0.isSealed());
      assertFalse(topLevel0.avoidObjectDetection());
      assertTrue(topLevel0.isExtensible());
      assertEquals("global", topLevel0.getClassName());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      int int0 = ScriptableObject.DONTENUM;
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertTrue(nativeError0.isEmpty());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      BaseFunction baseFunction0 = new BaseFunction();
      assertNotNull(baseFunction0);
      assertEquals("Function", baseFunction0.getClassName());
      assertTrue(baseFunction0.isExtensible());
      assertTrue(baseFunction0.isEmpty());
      assertEquals("function", baseFunction0.getTypeOf());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertFalse(baseFunction0.isSealed());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      boolean boolean0 = nativeError0.hasInstance(baseFunction0);
      assertFalse(boolean0);
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Function", baseFunction0.getClassName());
      assertTrue(baseFunction0.isExtensible());
      assertTrue(baseFunction0.isEmpty());
      assertEquals("function", baseFunction0.getTypeOf());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertFalse(baseFunction0.isSealed());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      boolean boolean1 = ScriptableObject.deleteProperty((Scriptable) nativeError0, 13);
      assertTrue(boolean1);
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertTrue(nativeError0.isEmpty());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      Context context0 = null;
      NativeObject nativeObject0 = (NativeObject)ScriptableObject.buildDataDescriptor(nativeError0, (Object) null, 4);
      assertNotNull(nativeObject0);
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(nativeObject0.isSealed());
      assertTrue(nativeObject0.isExtensible());
      assertFalse(nativeObject0.isEmpty());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertEquals("Object", nativeObject0.getClassName());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      int int0 = nativeIterator_StopIteration0.applyDescriptorToAttributeBitset(1119, nativeError0);
      assertEquals(1119, int0);
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      // Undeclared exception!
      try { 
        NativeJavaArray.wrap((Scriptable) nativeIterator_StopIteration0, (Object) nativeObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test137()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertNotNull(nativeJavaTopPackage0);
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) nativeJavaTopPackage0, "");
      assertTrue(boolean0);
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      
      Context context0 = Context.getCurrentContext();
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      assertNotNull(importerTopLevel0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel(context0, true);
      assertNotNull(importerTopLevel1);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertFalse(importerTopLevel1.isSealed());
      assertEquals("object", importerTopLevel1.getTypeOf());
      assertEquals("global", importerTopLevel1.getClassName());
      assertTrue(importerTopLevel1.hasPrototypeMap());
      assertFalse(importerTopLevel1.avoidObjectDetection());
      assertFalse(importerTopLevel1.isEmpty());
      assertTrue(importerTopLevel1.isExtensible());
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(importerTopLevel1.equals((Object)importerTopLevel0));
      
      boolean boolean1 = ScriptableObject.deleteProperty((Scriptable) importerTopLevel1, "language version");
      assertNotSame(importerTopLevel1, importerTopLevel0);
      assertTrue(boolean1);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertFalse(importerTopLevel1.isSealed());
      assertEquals("object", importerTopLevel1.getTypeOf());
      assertEquals("global", importerTopLevel1.getClassName());
      assertTrue(importerTopLevel1.hasPrototypeMap());
      assertFalse(importerTopLevel1.avoidObjectDetection());
      assertFalse(importerTopLevel1.isEmpty());
      assertTrue(importerTopLevel1.isExtensible());
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(importerTopLevel1.equals((Object)importerTopLevel0));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = importerTopLevel0.isGenericDescriptor(nativeJavaTopPackage0);
      assertNotSame(importerTopLevel0, importerTopLevel1);
      assertFalse(boolean2);
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(importerTopLevel0.equals((Object)importerTopLevel1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      assertNotNull(topLevel0);
      assertFalse(topLevel0.isSealed());
      assertTrue(topLevel0.isEmpty());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertTrue(topLevel0.isExtensible());
      assertEquals("global", topLevel0.getClassName());
      assertFalse(topLevel0.avoidObjectDetection());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      boolean boolean0 = topLevel0.sameValue(long0, long0);
      assertTrue(boolean0);
      assertFalse(topLevel0.isSealed());
      assertTrue(topLevel0.isEmpty());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertTrue(topLevel0.isExtensible());
      assertEquals("global", topLevel0.getClassName());
      assertFalse(topLevel0.avoidObjectDetection());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      
      boolean boolean1 = ScriptableObject.isTrue(long0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertEquals("double", class0.toString());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isAnnotation());
      
      // Undeclared exception!
      try { 
        ScriptableObject.getDefaultValue((Scriptable) nativeIterator_StopIteration0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(false);
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertNotNull(nativeJavaTopPackage0);
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      HashMap<NativeContinuation, NativeJavaClass> hashMap0 = new HashMap<NativeContinuation, NativeJavaClass>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      
      LazilyLoadedCtor lazilyLoadedCtor0 = new LazilyLoadedCtor(nativeIterator_StopIteration0, "B|=A", "B|=A", false);
      assertNotNull(lazilyLoadedCtor0);
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isEmpty());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      
      // Undeclared exception!
      try { 
        nativeIterator_StopIteration0.addLazilyInitializedValue("B|=A", 4, lazilyLoadedCtor0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // B|=A
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      
      // Undeclared exception!
      try { 
        ScriptableObject.getDefaultValue((Scriptable) importerTopLevel0, (Class<?>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test142()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertNotNull(nativeJavaTopPackage0);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      Context context0 = Context.getCurrentContext();
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      
      Class<BaseFunction> class0 = BaseFunction.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) nativeJavaTopPackage0, class0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      Context context0 = contextFactory0.enter();
      assertNotNull(context0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertNotNull(importerTopLevel0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      
      Class<BoundFunction> class0 = BoundFunction.class;
      BoundFunction boundFunction0 = ScriptableObject.getTypedProperty((Scriptable) importerTopLevel0, 849, class0);
      assertNull(boundFunction0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isEmpty());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      Object object0 = ScriptableObject.getTopScopeValue(nativeError0, nativeError0);
      assertNull(object0);
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isEmpty());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      assertNotNull(topLevel0);
      assertTrue(topLevel0.isExtensible());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertFalse(topLevel0.isSealed());
      assertTrue(topLevel0.isEmpty());
      assertFalse(topLevel0.avoidObjectDetection());
      assertEquals("global", topLevel0.getClassName());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      Synchronizer synchronizer0 = new Synchronizer(topLevel0);
      assertNotNull(synchronizer0);
      assertTrue(topLevel0.isExtensible());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertFalse(topLevel0.isSealed());
      assertTrue(topLevel0.isEmpty());
      assertFalse(topLevel0.avoidObjectDetection());
      assertEquals("global", topLevel0.getClassName());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      // Undeclared exception!
      try { 
        topLevel0.put(2, (Scriptable) synchronizer0, (Object) synchronizer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2514L);
      assertNotNull(nativeArray0);
      assertEquals("Array", nativeArray0.getClassName());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.isSealed());
      assertEquals(2514L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(2514L, nativeArray0.getLength());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeArray0, 20);
      assertTrue(boolean0);
      assertEquals("Array", nativeArray0.getClassName());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.isSealed());
      assertEquals(2514L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(2514L, nativeArray0.getLength());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      boolean boolean1 = nativeArray0.isEmpty();
      assertTrue(boolean1);
      assertEquals("Array", nativeArray0.getClassName());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.isSealed());
      assertEquals(2514L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(2514L, nativeArray0.getLength());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      importerTopLevel0.isConst((String) null);
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        ScriptableObject.getDefaultValue((Scriptable) nativeError0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      nativeContinuation0.setGetterOrSetter("com/google/javascript/rhino/head/ScriptRuntime", 0, nativeJavaTopPackage0, true);
      int int0 = ScriptableObject.DONTENUM;
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      contextFactory0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      Class<NativeIterator> class0 = NativeIterator.class;
      nativeJavaTopPackage0.defineProperty("C", class0, 13);
      nativeJavaTopPackage0.delete("C");
      Class<Byte> class1 = Byte.class;
      // Undeclared exception!
      try { 
        ScriptableObject.getDefaultValue((Scriptable) nativeIterator_StopIteration0, (Class<?>) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test150()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeArray nativeArray0 = new NativeArray(1);
      ScriptableObject.putProperty((Scriptable) nativeArray0, "toStri", (Object) nativeError0);
      // Undeclared exception!
      try { 
        ScriptableObject.redefineProperty(nativeArray0, "toStri", true);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // TypeError: redeclaration of var toStri.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      nativeContinuation0.setGetterOrSetter("com/google/javascript/rhino/head/ScriptRuntime", 0, nativeJavaTopPackage0, true);
      ScriptableObject.deleteProperty((Scriptable) nativeContinuation0, "com/google/javascript/rhino/head/ScriptRuntime");
      int int0 = ScriptableObject.DONTENUM;
      assertEquals(2, int0);
  }
}

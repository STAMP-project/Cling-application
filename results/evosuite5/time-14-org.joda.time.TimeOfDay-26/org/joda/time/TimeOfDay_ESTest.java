/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 23:35:16 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TimeOfDay;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class TimeOfDay_ESTest extends TimeOfDay_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(1, 3, 1);
      Hours hours0 = Hours.SEVEN;
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.plus(hours0);
      assertEquals(7, timeOfDay1.getHourOfDay());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      Seconds seconds0 = Seconds.THREE;
      TimeOfDay timeOfDay1 = timeOfDay0.withPeriodAdded(seconds0, 0);
      assertSame(timeOfDay1, timeOfDay0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      TimeOfDay timeOfDay1 = timeOfDay0.withFieldAdded(durationFieldType0, 0);
      assertSame(timeOfDay1, timeOfDay0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      TimeOfDay timeOfDay1 = timeOfDay0.withFieldAdded(durationFieldType0, 3);
      assertEquals(24, timeOfDay1.getMinuteOfHour());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withField(dateTimeFieldType0, 0);
      assertSame(timeOfDay1, timeOfDay0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      TimeOfDay timeOfDay1 = timeOfDay0.withField(dateTimeFieldType0, 3);
      assertEquals(3, timeOfDay1.getMillisOfSecond());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withChronologyRetainFields(iSOChronology0);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      // Undeclared exception!
      try { 
        timeOfDay0.getField(4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 4
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeOfDay.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 2, 0);
      TimeOfDay timeOfDay0 = TimeOfDay.fromDateFields(mockDate0);
      assertEquals(0, timeOfDay0.getMillisOfSecond());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeOfDay.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      TimeOfDay timeOfDay0 = TimeOfDay.fromCalendarFields(mockGregorianCalendar0);
      assertEquals(21, timeOfDay0.getMinuteOfHour());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(20, timeOfDay0.getHourOfDay());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(3, 3);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test13()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      String string0 = timeOfDay0.toString();
      assertEquals("T00:00:00.000", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(3, 0, (Chronology) null);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.plusSeconds(3);
      assertEquals(3, timeOfDay1.getSecondOfMinute());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.minusMinutes(1);
      assertEquals(59, timeOfDay1.getMinuteOfHour());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      TimeOfDay timeOfDay1 = timeOfDay0.plusMinutes(0);
      assertSame(timeOfDay1, timeOfDay0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.plusMillis(1);
      assertEquals(1, timeOfDay1.getMillisOfSecond());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.plus((ReadablePeriod) null);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withChronologyRetainFields(gregorianChronology0);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0);
      assertEquals(0, timeOfDay1.getHourOfDay());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.minusHours(0);
      assertEquals(0, timeOfDay1.getHourOfDay());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      TimeOfDay timeOfDay1 = timeOfDay0.minusSeconds(2);
      assertEquals(58, timeOfDay1.getSecondOfMinute());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      DateTime dateTime0 = timeOfDay0.toDateTimeToday();
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withMillisOfSecond(3);
      assertEquals(3, timeOfDay1.getMillisOfSecond());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, julianChronology0);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      timeOfDay0.MIDNIGHT.toLocalTime();
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withHourOfDay(2);
      assertEquals(2, timeOfDay1.getHourOfDay());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      TimeOfDay timeOfDay0 = new TimeOfDay(dateTimeZone0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = timeOfDay0.getFieldTypes();
      assertEquals(4, dateTimeFieldTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      assertEquals(4, timeOfDay0.size());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.minusMillis(1);
      assertEquals(999, timeOfDay1.getMillisOfSecond());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      assertEquals(21, timeOfDay0.getSecondOfMinute());
      
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.plusHours(0);
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(4, timeOfDay0.size());
      assertEquals(0, timeOfDay1.getHourOfDay());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(86400);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay(86400, 2225, 2225, gregorianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 86400 for hourOfDay must not be larger than 23
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withMinuteOfHour(3);
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(21, timeOfDay0.getMinuteOfHour());
      assertEquals(3, timeOfDay1.getMinuteOfHour());
      assertEquals(4, timeOfDay1.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay((long) 0);
      assertEquals(0, timeOfDay0.getSecondOfMinute());
      assertEquals(1, timeOfDay0.getHourOfDay());
      assertEquals(4, timeOfDay0.size());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test35()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      Hours hours0 = Hours.FIVE;
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.minus(hours0);
      assertEquals(4, timeOfDay1.size());
      assertEquals(19, timeOfDay1.getHourOfDay());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withSecondOfMinute(0);
      assertEquals(0, timeOfDay1.getSecondOfMinute());
      assertEquals(4, timeOfDay1.size());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      TimeOfDay timeOfDay0 = new TimeOfDay((Chronology) gJChronology0);
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(21, timeOfDay0.getHourOfDay());
      assertEquals(4, timeOfDay0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((-1904L));
      assertEquals(4, timeOfDay0.size());
      assertEquals(23, timeOfDay0.getHourOfDay());
      assertEquals(96, timeOfDay0.getMillisOfSecond());
  }
}

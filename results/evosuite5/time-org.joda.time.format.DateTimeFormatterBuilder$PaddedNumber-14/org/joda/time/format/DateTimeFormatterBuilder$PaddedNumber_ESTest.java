/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 21 16:51:20 GMT 2019
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.ReadablePartial;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DateTimeFormatterBuilder$PaddedNumber_ESTest extends DateTimeFormatterBuilder$PaddedNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-859), true, (-859));
      PipedWriter pipedWriter0 = new PipedWriter();
      LocalTime localTime0 = LocalTime.now();
      Locale locale0 = Locale.forLanguageTag("org.joda.time.field.MillisDurationField");
      try { 
        dateTimeFormatterBuilder_PaddedNumber0.printTo((Writer) pipedWriter0, (ReadablePartial) localTime0, locale0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 1899, true, 1899);
      PipedWriter pipedWriter0 = new PipedWriter();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1899);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate((Chronology) gregorianChronology0);
      Locale locale0 = new Locale("", " as this period contains years and years vary in length");
      try { 
        dateTimeFormatterBuilder_PaddedNumber0.printTo((Writer) pipedWriter0, (ReadablePartial) localDate0, locale0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 0);
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Locale locale0 = Locale.forLanguageTag("S@_M");
      dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
      assertEquals("\u0000\u0000\u0000\u0000\u000024", stringBuffer0.toString());
      assertEquals(7, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber((DateTimeFieldType) null, (-1), true, 2);
      StringBuffer stringBuffer0 = new StringBuffer("(Oe'@ a{+0Cb");
      Locale locale0 = new Locale("(Oe'@ a{+0Cb", "America/Denver");
      MonthDay monthDay0 = MonthDay.now();
      dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
      assertEquals("(Oe'@ a{+0Cb\uFFFD\uFFFD", stringBuffer0.toString());
      assertEquals(15, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 0, true);
      int int0 = dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2728, true, 2728);
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-12));
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_PaddedNumber0.printTo((Writer) null, (-1544L), (Chronology) iSOChronology0, 2728, dateTimeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber((DateTimeFieldType) null, 10, false, 10);
      StringBuffer stringBuffer0 = new StringBuffer("org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber");
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      Locale locale0 = Locale.ITALIAN;
      dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) 10, (Chronology) islamicChronology0, 0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals(68, stringBuffer0.length());
      assertEquals("org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", stringBuffer0.toString());
  }
}

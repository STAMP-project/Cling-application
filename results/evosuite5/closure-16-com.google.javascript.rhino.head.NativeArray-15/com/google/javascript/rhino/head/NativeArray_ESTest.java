/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 21 17:03:43 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.InterpretedFunction;
import com.google.javascript.rhino.head.MemberBox;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeJavaArray;
import com.google.javascript.rhino.head.NativeJavaClass;
import com.google.javascript.rhino.head.NativeJavaConstructor;
import com.google.javascript.rhino.head.NativeJavaTopPackage;
import com.google.javascript.rhino.head.NativeNumber;
import com.google.javascript.rhino.head.NativeString;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.Synchronizer;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NativeArray_ESTest extends NativeArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2);
      nativeArray0.findPrototypeId("toSource");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.findPrototypeId("nH8NC\"!F.nR");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.findPrototypeId("Object");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(4992L);
      nativeArray0.findPrototypeId("JSON");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1L);
      nativeArray0.findPrototypeId("pow");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(4080L);
      nativeArray0.activatePrototypeMap(180);
      nativeArray0.isGenericDescriptor(nativeArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      nativeArray0.findPrototypeId("!+#_5!.to)f }AUs");
  }

  @Test(timeout = 4000)
  @Ignore
  public void test07()  throws Throwable  {
      Context context0 = new Context();
      NativeArray nativeArray0 = null;
      try {
        nativeArray0 = new NativeArray(context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483647L);
      nativeArray0.findPrototypeId("G-4+r^/PnE&");
  }

  @Test(timeout = 4000)
  @Ignore
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      IdFunctionObject idFunctionObject0 = nativeArray0.exportAsJSClass(13, nativeIterator_StopIteration0, true);
      Context context0 = Context.getContext();
      NativeError.make(context0, nativeIterator_StopIteration0, idFunctionObject0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(8);
      nativeArray0.findPrototypeId("TypeError");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-165L));
      // Undeclared exception!
      try { 
        nativeArray0.containsAll(nativeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(7L);
      // Undeclared exception!
      try { 
        nativeArray0.listIterator((-2618));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2618
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483661L);
      UnaryOperator<NativeNumber> unaryOperator0 = UnaryOperator.identity();
      // Undeclared exception!
      try { 
        nativeArray0.replaceAll(unaryOperator0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) nativeContinuation0;
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.lastIndexOf(objectArray0[2]);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Object[] objectArray0 = new Object[5];
      objectArray0[4] = (Object) nativeContinuation0;
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.lastIndexOf(objectArray0[1]);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-2444L));
      nativeArray0.lastIndexOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1L);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeArray0.lastIndexOf(nativeIterator_StopIteration0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeArray nativeArray0 = new NativeArray(2147483662L);
      // Undeclared exception!
      try { 
        nativeArray0.lastIndexOf(nativeContinuation0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      NativeCall nativeCall0 = new NativeCall();
      nativeArray0.indexOf(nativeCall0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      // Undeclared exception!
      try { 
        nativeArray0.get(987);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-943L));
      // Undeclared exception!
      try { 
        nativeArray0.get((-943L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483661L);
      // Undeclared exception!
      try { 
        nativeArray0.size();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1L);
      nativeArray0.size();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1L);
      assertEquals(1L, nativeArray0.jsGet_length());
      
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = nativeArray0.toArray(objectArray0);
      assertEquals(5, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Context context0 = new Context();
      NativeArray nativeArray0 = new NativeArray(4294967295L);
      // Undeclared exception!
      try { 
        nativeArray0.toArray(context0.emptyArgs);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-951L));
      NativeArray nativeArray1 = new NativeArray(8);
      assertEquals(8L, nativeArray1.getLength());
      
      boolean boolean0 = nativeArray0.containsAll(nativeArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test27()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-943L));
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Synchronizer synchronizer0 = new Synchronizer(nativeIterator_StopIteration0);
      nativeIterator_StopIteration0.put(11, (Scriptable) nativeArray0, (Object) synchronizer0);
      IdFunctionObject idFunctionObject0 = nativeArray0.exportAsJSClass(1167, nativeIterator_StopIteration0, false);
      // Undeclared exception!
      try { 
        NativeError.make(context0, nativeArray0, idFunctionObject0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeError", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NativeString nativeString0 = new NativeString("com.google.javascript.rhino.head.ast.ConditionalExpression");
      Context context0 = Context.enter();
      long long0 = NativeArray.getLengthProperty(context0, nativeString0);
      assertEquals(58L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-291L));
      nativeArray0.setInstanceIdValue(1, (Object) null);
      assertEquals(0L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-943L));
      nativeArray0.setDenseOnly(true);
      assertEquals((-943L), nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1431655764L);
      // Undeclared exception!
      try { 
        nativeArray0.setDenseOnly(true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(4080L);
      nativeArray0.setDenseOnly(false);
      assertEquals(4080L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test33()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray((-6742553186979055798L));
      NativeArray nativeArray1 = new NativeArray(objectArray0);
      IdFunctionObject idFunctionObject0 = nativeArray1.exportAsJSClass(4, nativeArray0, true);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext((Context) null);
      // Undeclared exception!
      try { 
        nativeArray1.execIdCall(idFunctionObject0, context0, nativeArray0, nativeArray0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test34()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-943L));
      Context context0 = Context.getContext();
      NativeJavaConstructor nativeJavaConstructor0 = new NativeJavaConstructor((MemberBox) null);
      // Undeclared exception!
      try { 
        nativeArray0.defineOwnProperty(context0, (Object) nativeJavaConstructor0, (ScriptableObject) nativeJavaConstructor0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483647L);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enter();
      // Undeclared exception!
      try { 
        nativeArray0.defineOwnProperty(context0, (Object) null, (ScriptableObject) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(8);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      Double double0 = new Double(5);
      ScriptableObject scriptableObject0 = nativeArray0.getOwnPropertyDescriptor(context0, double0);
      assertEquals(8L, nativeArray0.getLength());
      assertNull(scriptableObject0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeArray nativeArray0 = new NativeArray(2147483647L);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      // Undeclared exception!
      try { 
        nativeArray0.getOwnPropertyDescriptor(context0, nativeContinuation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      int int0 = nativeArray0.getAttributes(2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test39()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-5818L));
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes(9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property 9 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test40()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      Context context0 = Context.getContext();
      Scriptable scriptable0 = context0.newObject((Scriptable) nativeArray0);
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes((-238), scriptable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property -238 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test41()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes(4330);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property 4330 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = Context.enter();
      NativeCall nativeCall0 = new NativeCall();
      nativeArray0.defineOwnProperty(context0, (Object) contextFactory0, (ScriptableObject) nativeCall0, true);
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes((-1957));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property -1957 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      Integer integer0 = new Integer(0);
      ScriptableObject scriptableObject0 = nativeArray0.getOwnPropertyDescriptor(context0, integer0);
      assertEquals(1, ScriptableObject.READONLY);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test44()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeArray0.exportAsJSClass(13, nativeIterator_StopIteration0, true);
      Context context0 = Context.getContext();
      Float float0 = new Float((double) 2);
      ScriptableObject scriptableObject0 = nativeArray0.getOwnPropertyDescriptor(context0, float0);
      assertEquals("object", scriptableObject0.getTypeOf());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-943L));
      ScriptableObject.defineProperty((Scriptable) nativeArray0, "language version", (Object) "error reporter", 1);
      nativeArray0.getIndexIds();
      assertEquals(0L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483647L);
      nativeArray0.getIndexIds();
      assertEquals(2147483647L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-943L));
      ScriptableObject.defineProperty((Scriptable) nativeArray0, "language version", (Object) "error reporter", 1);
      nativeArray0.delete(5);
      assertEquals(0L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-2111L));
      nativeArray0.delete(18);
      assertEquals((-2111L), nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.delete((-2520));
      assertFalse(nativeArray0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-943L));
      nativeArray0.delete(3);
      assertEquals((-943L), nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test51()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(8L);
      Context context0 = Context.getContext();
      NativeString nativeString0 = new NativeString("error reporter");
      Object object0 = nativeArray0.get(180, (Scriptable) nativeString0);
      nativeArray0.defineOwnProperty(context0, object0, (ScriptableObject) nativeString0, true);
      nativeArray0.delete((-1346));
      assertEquals(8L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeArray nativeArray0 = new NativeArray(13);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeIterator_StopIteration0.put(110, (Scriptable) nativeArray0, (Object) nativeContinuation0);
      assertFalse(nativeArray0.isEmpty());
      assertEquals(111L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-943L));
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeIterator_StopIteration0.put(8, (Scriptable) nativeArray0, (Object) nativeArray0);
      assertEquals(9L, nativeArray0.jsGet_length());
      assertEquals(9L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      LinkedHashSet<NativeJavaClass> linkedHashSet0 = new LinkedHashSet<NativeJavaClass>();
      nativeArray0.put(0, (Scriptable) nativeArray0, (Object) linkedHashSet0);
      boolean boolean0 = nativeArray0.containsAll(nativeArray0);
      assertTrue(boolean0);
      assertEquals(2L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-943L));
      ScriptableObject.defineProperty((Scriptable) nativeArray0, "language version", (Object) "error reporter", 1);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeIterator_StopIteration0.put(1139, (Scriptable) nativeArray0, (Object) nativeArray0);
      assertEquals(1140L, nativeArray0.getLength());
      assertEquals(1140L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-943L));
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeString nativeString0 = new NativeString("^uahu");
      nativeIterator_StopIteration0.put((-1898), (Scriptable) nativeArray0, (Object) nativeString0);
      assertEquals((-943L), nativeArray0.getLength());
      assertEquals((-943L), nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeArray nativeArray0 = new NativeArray(0);
      nativeArray0.put(4, (Scriptable) nativeContinuation0, (Object) nativeContinuation0);
      assertFalse(nativeContinuation0.isEmpty());
      assertEquals(0L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-943L));
      ScriptableObject.defineProperty((Scriptable) nativeArray0, "language version", (Object) "error reporter", 1);
      nativeArray0.exportAsJSClass(104, nativeArray0, false);
      assertEquals(0L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test59()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray((-6742553186979055798L));
      NativeArray nativeArray1 = new NativeArray(objectArray0);
      nativeArray1.exportAsJSClass(4, nativeArray0, true);
      // Undeclared exception!
      try { 
        nativeArray1.delete(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot modify a property of a sealed object: 0.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeArray nativeArray0 = new NativeArray(2);
      nativeArray0.put("&41sfrQ{FD", (Scriptable) nativeContinuation0, (Object) nativeContinuation0);
      assertEquals(2L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-943L));
      Context context0 = new Context();
      ScriptableObject scriptableObject0 = nativeArray0.getOwnPropertyDescriptor(context0, "-1");
      assertNull(scriptableObject0);
      assertEquals((-943L), nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      ScriptableObject scriptableObject0 = nativeArray0.getOwnPropertyDescriptor(context0, context0.FEATURE_E4X);
      assertNull(scriptableObject0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      boolean boolean0 = nativeArray0.has(0, (Scriptable) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeArray nativeArray0 = new NativeArray(2);
      nativeArray0.has(13, (Scriptable) nativeContinuation0);
      assertEquals(2L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeArray nativeArray0 = new NativeArray(13);
      nativeArray0.has((-4103), (Scriptable) nativeContinuation0);
      assertEquals(13L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeArray nativeArray0 = new NativeArray(2147483647L);
      nativeArray0.has(13, (Scriptable) nativeContinuation0);
      assertEquals(2147483647L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-943L));
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      boolean boolean0 = nativeArray0.has(2, (Scriptable) nativeIterator_StopIteration0);
      assertEquals((-943L), nativeArray0.getLength());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      Object object0 = nativeArray0.get((-3801), (Scriptable) nativeArray0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483647L);
      int int0 = nativeArray0.lastIndexOf((Object) null);
      assertEquals(2147483646, int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      NativeString nativeString0 = new NativeString("com.google.javascript.rhino.head.ast.ConditionalExpression");
      Object[] objectArray0 = new Object[7];
      NativeArray nativeArray0 = new NativeArray(13);
      IdFunctionObject idFunctionObject0 = nativeArray0.exportAsJSClass(2147052858, nativeString0, false);
      Context context0 = new Context();
      NativeArray nativeArray1 = (NativeArray)nativeArray0.execIdCall(idFunctionObject0, context0, nativeString0, idFunctionObject0, objectArray0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      nativeArray1.defineOwnProperty(context0, (Object) nativeJavaTopPackage0, (ScriptableObject) nativeString0, false);
      assertEquals(1, idFunctionObject0.getLength());
      assertEquals(7L, nativeArray1.getLength());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeArray nativeArray0 = new NativeArray(2);
      Integer[] integerArray0 = nativeArray0.getIndexIds();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeContinuation0, nativeArray0, 2, 13);
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        nativeArray0.execIdCall(idFunctionObject0, context0, nativeContinuation0, idFunctionObject0, integerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BAD FUNCTION ID=2 MASTER=com.google.javascript.rhino.head.NativeContinuation@1
         //
         verifyException("com.google.javascript.rhino.head.IdFunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeArray nativeArray0 = new NativeArray(8);
      nativeArray0.exportAsJSClass(110, nativeContinuation0, true);
      // Undeclared exception!
      try { 
        nativeArray0.getIndexIds();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 24
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test73()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-951L));
      // Undeclared exception!
      try { 
        nativeArray0.setInstanceIdValue(1, nativeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-291L));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        nativeArray0.setInstanceIdValue(0, classLoader0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0);
      // Undeclared exception!
      try { 
        nativeArray0.getInstanceIdValue(8);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 8
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      // Undeclared exception!
      try { 
        nativeArray0.getInstanceIdName(13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 13
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.setInstanceIdAttributes(1, 20);
      assertTrue(nativeArray0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.setInstanceIdAttributes((-86), 8);
      assertEquals(2L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(4080L);
      Long long0 = new Long((-1487L));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) long0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      // Undeclared exception!
      try { 
        nativeArray0.removeIf(predicate2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      // Undeclared exception!
      try { 
        nativeArray0.add((Object) nativeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      // Undeclared exception!
      try { 
        nativeArray0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1L);
      // Undeclared exception!
      try { 
        nativeArray0.remove(108);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(2147483647L);
      // Undeclared exception!
      try { 
        nativeArray0.addAll(33, (Collection) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      int int0 = NativeArray.getMaximumInitialCapacity();
      assertEquals(10000, int0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      // Undeclared exception!
      try { 
        nativeArray0.subList(8, (-27));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test86()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      // Undeclared exception!
      try { 
        nativeArray0.retainAll(nativeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      long long0 = nativeArray0.jsGet_length();
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test89()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-943L));
      Context context0 = new Context();
      nativeArray0.activatePrototypeMap(11);
      Synchronizer synchronizer0 = new Synchronizer(nativeArray0);
      nativeArray0.getOwnPropertyDescriptor(context0, synchronizer0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      // Undeclared exception!
      try { 
        nativeArray0.set(2, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-801L));
      LinkedList<NativeJavaArray> linkedList0 = new LinkedList<NativeJavaArray>();
      // Undeclared exception!
      try { 
        nativeArray0.addAll((Collection) linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      Comparator<InterpretedFunction> comparator0 = (Comparator<InterpretedFunction>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(com.google.javascript.rhino.head.InterpretedFunction.class) , any(com.google.javascript.rhino.head.InterpretedFunction.class));
      // Undeclared exception!
      try { 
        nativeArray0.sort(comparator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeArray nativeArray0 = new NativeArray(8);
      // Undeclared exception!
      try { 
        nativeArray0.add((-1088620875), (Object) nativeContinuation0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-2446L));
      // Undeclared exception!
      try { 
        nativeArray0.remove((Object) nativeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      // Undeclared exception!
      try { 
        nativeArray0.removeAll(nativeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      NativeArray.setMaximumInitialCapacity(13);
  }
}

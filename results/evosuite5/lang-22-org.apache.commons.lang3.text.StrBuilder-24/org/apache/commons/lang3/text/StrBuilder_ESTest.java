/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 21:16:50 GMT 2019
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayDeque;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.Locale;
import java.util.Stack;
import java.util.TreeSet;
import org.apache.commons.lang3.text.StrBuilder;
import org.apache.commons.lang3.text.StrMatcher;
import org.apache.commons.lang3.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class StrBuilder_ESTest extends StrBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i5");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      long long0 = strBuilder_StrBuilderReader0.skip(1401L);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      long long0 = strBuilder_StrBuilderReader0.skip((-3176L));
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("5p:]6}K/1|vd5");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.size());
      assertEquals(13, strBuilder0.length());
      assertEquals(45, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.size());
      assertEquals(13, strBuilder0.length());
      assertEquals(45, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      
      char[] charArray0 = new char[1];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.size());
      assertEquals(13, strBuilder0.length());
      assertEquals(45, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'5'}, charArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i5");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      
      char[] charArray0 = new char[7];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'i', '5', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(2, int0);
      
      int int1 = strBuilder_StrBuilderReader0.read(charArray0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'i', '5', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vendor.url");
      assertNotNull(strBuilder0);
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      
      char[] charArray0 = new char[0];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("5p:]6}K/1|vd5");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.length());
      assertEquals(13, strBuilder0.size());
      assertEquals(45, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.length());
      assertEquals(13, strBuilder0.size());
      assertEquals(45, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 1, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 0, 1407);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 2169, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i5");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      
      char[] charArray0 = new char[1];
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 0, (-1063));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vendor.url");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, (-1063), (-1063));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(" TW/X\"");
      assertNotNull(strBuilder0);
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.size());
      assertEquals(38, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.size());
      assertEquals(38, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertNotNull(string0);
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.size());
      assertEquals(38, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(" TW/X\"", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      
      char[] charArray0 = new char[0];
      StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.reset(charArray0);
      assertNotNull(strTokenizer0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(strBuilder_StrBuilderTokenizer0, strTokenizer0);
      assertSame(strTokenizer0, strBuilder_StrBuilderTokenizer0);
      
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertNotNull(string0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals("", string0);
      assertSame(strBuilder_StrBuilderTokenizer0, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("x8,BWR>h");
      assertNotNull(strBuilder0);
      assertEquals(40, strBuilder0.capacity());
      assertEquals(8, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder0.substring((-73), (-73));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -73
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(34);
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      strBuilder0.hashCode();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[2+-Vm/Su-lZwQ]6iA");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      boolean boolean0 = strBuilder0.equals((Object) strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      boolean boolean0 = strBuilder0.equals((Object) "");
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[`8,I=>");
      assertNotNull(strBuilder0);
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = new StrBuilder("[`8,I=>");
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(7, strBuilder1.size());
      assertEquals(7, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(39, strBuilder1.capacity());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      boolean boolean0 = strBuilder1.equals(strBuilder0);
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(7, strBuilder1.size());
      assertEquals(7, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(39, strBuilder1.capacity());
      assertTrue(boolean0);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[`8Q,I=");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertEquals(39, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = new StrBuilder("[`8Q,I=");
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(7, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(7, strBuilder1.size());
      assertEquals(39, strBuilder1.capacity());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      char[] charArray0 = new char[4];
      StrBuilder strBuilder2 = strBuilder1.appendln(charArray0);
      assertNotNull(strBuilder2);
      assertEquals(12, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(39, strBuilder1.capacity());
      assertEquals(12, strBuilder1.size());
      assertEquals(39, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(12, strBuilder2.size());
      assertEquals(12, strBuilder2.length());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      
      boolean boolean0 = strBuilder1.equals(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(12, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(39, strBuilder1.capacity());
      assertEquals(12, strBuilder1.size());
      assertFalse(boolean0);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.encoding");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(45, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.size());
      assertEquals(13, strBuilder0.length());
      
      StrBuilder strBuilder1 = new StrBuilder("5p:]6}K/1|vd5");
      assertNotNull(strBuilder1);
      assertEquals(45, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(13, strBuilder1.size());
      assertEquals(13, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      boolean boolean0 = strBuilder1.equals(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(45, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.size());
      assertEquals(13, strBuilder0.length());
      assertEquals(45, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(13, strBuilder1.size());
      assertEquals(13, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(boolean0);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertEquals(47, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = new StrBuilder("Invalid offset: ");
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(16, strBuilder1.length());
      assertEquals(16, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(16, strBuilder1.length());
      assertEquals(16, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertFalse(boolean0);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = new StrBuilder("#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder1);
      assertEquals(15, strBuilder1.size());
      assertEquals(15, strBuilder1.length());
      assertEquals(47, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(15, strBuilder1.size());
      assertEquals(15, strBuilder1.length());
      assertEquals(47, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(boolean0);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrTokenizer");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(74, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(42, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.size());
      
      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder0.lastIndexOf(strMatcher0);
      assertNull(strBuilder0.getNullText());
      assertEquals(74, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(42, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(42, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("");
      assertNotNull(strMatcher0);
      
      int int0 = strBuilder0.lastIndexOf(strMatcher0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      
      int int0 = strBuilder0.lastIndexOf((StrMatcher) null, (-744));
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[2+-Vm/Su-lZwQ]6iA");
      assertNotNull(strBuilder0);
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      int int0 = strBuilder0.lastIndexOf("-v8,PWeY");
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i5");
      assertNotNull(strBuilder0);
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      int int0 = strBuilder0.lastIndexOf("i5");
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i5");
      assertNotNull(strBuilder0);
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      
      int int0 = strBuilder0.lastIndexOf("org.apache.commons.lang3.text.StrMatcher$CharSetMatcher", 32);
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(73);
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(73, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      int int0 = strBuilder0.lastIndexOf(">ih+?dEt", 1520);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(73, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      int int0 = strBuilder0.lastIndexOf((String) null, 0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i5");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      
      int int0 = strBuilder0.lastIndexOf("", 116);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      
      int int0 = strBuilder0.lastIndexOf('W', 4947);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2462);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2462, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2462, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getTrimmerMatcher();
      assertNotNull(strMatcher0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2462, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      
      int int0 = strBuilder0.indexOf(strMatcher0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2462, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("e");
      assertNotNull(strBuilder0);
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
      assertNotNull(strMatcher_NoMatcher0);
      
      int int0 = strBuilder0.indexOf((StrMatcher) strMatcher_NoMatcher0, (-987));
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Z8,BW=>h");
      assertNotNull(strBuilder0);
      assertEquals(40, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.clear();
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder0.size());
      assertEquals(40, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(40, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(0, strBuilder0.size());
      assertEquals(40, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      Writer writer0 = strBuilder_StrBuilderWriter0.append('T');
      assertNotNull(writer0);
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertEquals(40, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder_StrBuilderWriter0, writer0);
      assertSame(writer0, strBuilder_StrBuilderWriter0);
      
      StrBuilder strBuilder2 = strBuilder1.replaceFirst("Sn=+sb[", "Z8,BW=>h");
      assertNotNull(strBuilder2);
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertEquals(40, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder1.size());
      assertEquals(40, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(40, strBuilder2.capacity());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("e");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      
      StrBuilder strBuilder1 = strBuilder0.appendAll((Iterator<?>) strBuilder_StrBuilderTokenizer0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(28, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(28, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(1, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(28, strBuilder1.length());
      assertEquals(28, strBuilder1.size());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      int int0 = strBuilder0.indexOf("", 9);
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(28, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(28, strBuilder0.length());
      assertEquals(9, int0);
      assertSame(strBuilder0, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      int int0 = strBuilder0.indexOf((String) null, 10);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("g");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      
      int int0 = strBuilder0.indexOf("g", (-10));
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(46);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      int int0 = strBuilder0.indexOf('<', (-4520));
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("q=t");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(35, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("q=t");
      assertNotNull(strMatcher0);
      
      boolean boolean0 = strBuilder0.contains(strMatcher0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(35, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      
      StrMatcher strMatcher0 = StrMatcher.noneMatcher();
      assertNotNull(strMatcher0);
      
      boolean boolean0 = strBuilder0.contains(strMatcher0);
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i5");
      assertNotNull(strBuilder0);
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      boolean boolean0 = strBuilder0.contains("i5");
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.library.path");
      assertNotNull(strBuilder0);
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      
      boolean boolean0 = strBuilder0.contains("?l;");
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      StrMatcher strMatcher0 = StrMatcher.commaMatcher();
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((Object) strMatcher0);
      assertNotNull(strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(64, strBuilder0.length());
      assertEquals(64, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(126, strBuilder0.capacity());
      assertEquals(126, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(64, strBuilder1.length());
      assertEquals(64, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      boolean boolean0 = strBuilder1.contains('r');
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(64, strBuilder0.length());
      assertEquals(64, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(126, strBuilder0.capacity());
      assertEquals(126, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(64, strBuilder1.length());
      assertEquals(64, strBuilder1.size());
      assertTrue(boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[2+-Vm/Su-lZwQ]6iA");
      assertNotNull(strBuilder0);
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      
      boolean boolean0 = strBuilder0.contains('\"');
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertEquals(47, strBuilder0.capacity());
      
      String string0 = strBuilder0.midString(13, 13);
      assertNotNull(string0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertEquals(47, strBuilder0.capacity());
      assertEquals("]!", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i5");
      assertNotNull(strBuilder0);
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      
      String string0 = strBuilder0.midString(790, 790);
      assertNotNull(string0);
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("IJvalCd of7set! ");
      assertNotNull(strBuilder0);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      
      String string0 = strBuilder0.midString((-5273), (-5273));
      assertNotNull(string0);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      
      String string0 = strBuilder0.midString(5, 5);
      assertNotNull(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("s=n4H", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      
      String string0 = strBuilder0.rightString(9);
      assertNotNull(string0);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals("=n4H!}y]!", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Argumets cannot both be nll");
      assertNotNull(strBuilder0);
      assertEquals(27, strBuilder0.size());
      assertEquals(27, strBuilder0.length());
      assertEquals(59, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      
      String string0 = strBuilder0.rightString((-1641));
      assertNotNull(string0);
      assertEquals(27, strBuilder0.size());
      assertEquals(27, strBuilder0.length());
      assertEquals(59, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      String string0 = strBuilder0.rightString(9);
      assertNotNull(string0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      String string0 = strBuilder0.leftString(3);
      assertNotNull(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("Inv", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      String string0 = strBuilder0.leftString((-284));
      assertNotNull(string0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      String string0 = strBuilder0.leftString(3);
      assertNotNull(string0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("4.9");
      assertNotNull(strBuilder0);
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(35, strBuilder0.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder0.subSequence(63, (-2034));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2097
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(39);
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      // Undeclared exception!
      try { 
        strBuilder0.subSequence(39, 39);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 39
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[`8,I=>");
      assertNotNull(strBuilder0);
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder0.subSequence((-1819), (-958));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1819
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      
      CharSequence charSequence0 = strBuilder0.subSequence(0, 0);
      assertNotNull(charSequence0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("", charSequence0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vendor.url");
      assertNotNull(strBuilder0);
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      
      boolean boolean0 = strBuilder0.endsWith("java.vendor.url");
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-808));
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      boolean boolean0 = strBuilder0.endsWith("Invalid offset: ");
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[2+-Vm/Su-lZwQ]6iA");
      assertNotNull(strBuilder0);
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      boolean boolean0 = strBuilder0.endsWith(".Kk}\"V19P:c");
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(34);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      boolean boolean0 = strBuilder0.endsWith((String) null);
      assertEquals(0, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.library.path");
      assertNotNull(strBuilder0);
      assertEquals(17, strBuilder0.length());
      assertEquals(17, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      boolean boolean0 = strBuilder0.endsWith("");
      assertEquals(17, strBuilder0.length());
      assertEquals(17, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'4kydGGuK$");
      assertNotNull(strBuilder0);
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      
      boolean boolean0 = strBuilder0.startsWith("'4kydGGuK$");
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(42, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      boolean boolean0 = strBuilder0.startsWith("end < start");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[2+-Vm/Su-lZwQ]6iA");
      assertNotNull(strBuilder0);
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      boolean boolean0 = strBuilder0.startsWith("end < start");
      assertEquals(50, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      boolean boolean0 = strBuilder0.startsWith((String) null);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      boolean boolean0 = strBuilder0.startsWith("");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.appendln((double) 0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.trim();
      assertNotNull(strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.size());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(3, strBuilder2.length());
      assertEquals(3, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      strBuilder0.size = (-412);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-412), strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-412), strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-412), strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-412), strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals((-412), strBuilder1.size());
      assertEquals((-412), strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.appendln(1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.reverse();
      assertNotNull(strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Inva'lid offset: ");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.length());
      assertEquals(17, strBuilder0.size());
      
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("Inva'lid offset: ");
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(strMatcher0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(16, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(16, strBuilder1.length());
      assertEquals(49, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      StrMatcher strMatcher0 = StrMatcher.stringMatcher("java.runtime.version");
      assertNotNull(strMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "java.runtime.version");
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("%#2]+7s=n4H!}y]!", "%#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder1);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(16, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(16, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((String) null, "java.specification.name");
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("4.1", (String) null);
      assertNotNull(strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(15, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(15, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll((String) null, "#2{+7s=n4H!46]!");
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%#2]o8s=n4]!}y]!");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll("%#2]o8s=n4]!}y]!", "%#2]o8s=n4]!}y]!");
      assertNotNull(strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder1.length());
      assertEquals(16, strBuilder1.size());
      assertEquals(48, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[2+-Vm/Su-lZwQ]6iA");
      assertNotNull(strBuilder0);
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('(', '.');
      assertNotNull(strBuilder1);
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder1.size());
      assertEquals(18, strBuilder1.length());
      assertEquals(50, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.append(false);
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.replaceFirst('f', '[');
      assertNotNull(strBuilder2);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(5, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[2+-Vm/Su-lZwQ]6iA");
      assertNotNull(strBuilder0);
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('=', '=');
      assertNotNull(strBuilder1);
      assertEquals(18, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(18, strBuilder1.length());
      assertEquals(50, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrTokenizer");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(74, strBuilder0.capacity());
      assertEquals(42, strBuilder0.length());
      assertEquals(42, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll('a', '/');
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(74, strBuilder0.capacity());
      assertEquals(42, strBuilder0.length());
      assertEquals(42, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(74, strBuilder1.capacity());
      assertEquals(42, strBuilder1.length());
      assertEquals(42, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Z8,BW=>h");
      assertNotNull(strBuilder0);
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(40, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll('Z', 'Z');
      assertNotNull(strBuilder1);
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(40, strBuilder0.capacity());
      assertEquals(40, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(8, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.replace(0, 39, (String) null);
      assertNotNull(strBuilder1);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.replace(2, 2, "CI8");
      assertNotNull(strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(47, strBuilder1.capacity());
      assertEquals(18, strBuilder1.length());
      assertEquals(18, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2{+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(15, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("#2{+7s=n4H!}y]!", (String) null);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(47, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("R2]t7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(15, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("R2]t7s=n4H!}y]!");
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(47, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("IJvalid offset: ");
      assertNotNull(strBuilder0);
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst((String) null);
      assertNotNull(strBuilder1);
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(16, strBuilder1.length());
      assertEquals(16, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      assertNotNull(strBuilder0);
      assertEquals(20, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(52, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("jK)DZ]Wi'.^%Zr");
      assertNotNull(strBuilder1);
      assertEquals(20, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(52, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(52, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(20, strBuilder1.length());
      assertEquals(20, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AIX");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(35, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll("AIX");
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(35, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(35, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('n');
      assertNotNull(strBuilder1);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder1.length());
      assertEquals(15, strBuilder1.size());
      assertEquals(48, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('N');
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(object0, 200, 'q');
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(200, strBuilder0.length());
      assertEquals(400, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(200, strBuilder0.size());
      assertEquals(400, strBuilder1.capacity());
      assertEquals(200, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(200, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll('q');
      assertNotNull(strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertEquals(400, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(400, strBuilder1.capacity());
      assertEquals(27, strBuilder1.size());
      assertEquals(27, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNullText());
      assertEquals(400, strBuilder2.capacity());
      assertEquals(27, strBuilder2.length());
      assertEquals(27, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll('n');
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(15, strBuilder1.length());
      assertEquals(15, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(" TW/X\"");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(38, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(38, strBuilder0.capacity());
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(38, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.delete(0, 0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vendor.url");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, true);
      assertNotNull(strBuilder1);
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(19, strBuilder1.size());
      assertEquals(19, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(47, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vendor.url");
      assertNotNull(strBuilder0);
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, false);
      assertNotNull(strBuilder1);
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(20, strBuilder1.length());
      assertEquals(20, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(47, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vendor.url");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      
      char[] charArray0 = new char[2];
      StrBuilder strBuilder1 = strBuilder0.insert(1, charArray0, 1, 1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(47, strBuilder1.capacity());
      assertEquals(16, strBuilder1.size());
      assertEquals(16, strBuilder1.length());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i5");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      char[] charArray0 = new char[1];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0, 0, 0);
      assertNotNull(strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(34, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vendor.url");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertEquals(47, strBuilder0.capacity());
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 0, (-360));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -360
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apachecommons.lang3.text.StrBuilder");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.size());
      assertEquals(71, strBuilder0.capacity());
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.insert(7, charArray0, 3118, 2716);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 3118
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2{+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder0.insert(1, charArray0, 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 1
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.insert(4, charArray0, (-781), 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: -781
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("e");
      assertNotNull(strBuilder0);
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("e");
      assertNotNull(strBuilder1);
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      char[] charArray0 = new char[7];
      StrBuilder strBuilder2 = strBuilder0.insert(2, charArray0);
      assertNotNull(strBuilder2);
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(33, strBuilder2.capacity());
      assertEquals(9, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(9, strBuilder2.length());
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.insert(5, (char[]) null);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(15, strBuilder1.length());
      assertEquals(15, strBuilder1.size());
      assertEquals(47, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vendor.url");
      assertNotNull(strBuilder0);
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0);
      assertNotNull(strBuilder1);
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(15, strBuilder1.length());
      assertEquals(47, strBuilder1.capacity());
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      assertNotNull(strBuilder0);
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.length());
      assertEquals(20, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.insert(19, (char[]) null, 2009, 2009);
      assertNotNull(strBuilder1);
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.length());
      assertEquals(20, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(20, strBuilder1.size());
      assertEquals(20, strBuilder1.length());
      assertEquals(52, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, (float) 0);
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-27));
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(44, (Object) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 44
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i5");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder0.insert((-3236), (Object) "i5");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3236
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) "%#2]+7s=n4H!}y]!", 3, 'B');
      assertNotNull(strBuilder1);
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(19, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(19, strBuilder1.length());
      assertEquals(48, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "", 1, '[');
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) null, 2, 'R');
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-237));
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-237), (-237), 'b');
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(34);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(117, '\'');
      assertNotNull(strBuilder1);
      assertEquals(234, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder0.length());
      assertEquals(117, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(117, strBuilder1.size());
      assertEquals(117, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(234, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      strBuilder0.hashCode();
      assertEquals(234, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder0.length());
      assertEquals(117, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding((-1228), 'K');
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('{', (int) '{');
      assertNotNull(strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('{', (-1131));
      assertNotNull(strBuilder1);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertEquals(48, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("%#2]+7s=n4H!}y]!", 2394);
      assertNotNull(strBuilder1);
      assertEquals(48, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.length());
      assertEquals(32, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.size());
      assertEquals(32, strBuilder1.length());
      assertEquals(48, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("%#2]+7s=n4H!}y]!", (-2141));
      assertNotNull(strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(48, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(16, strBuilder1.size());
      assertEquals(16, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator((String) null, 9);
      assertNotNull(strBuilder1);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder1.size());
      assertEquals(16, strBuilder1.length());
      assertEquals(48, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.awt.printerjob");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(19, strBuilder0.length());
      assertEquals(19, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('-', '#');
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(51, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertEquals(20, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(51, strBuilder1.capacity());
      assertEquals(20, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('%', 'x');
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("5p:]61K/1|vi5");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(45, strBuilder0.capacity());
      assertEquals(13, strBuilder0.size());
      assertEquals(13, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('C');
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.size());
      assertEquals(45, strBuilder0.capacity());
      assertEquals(14, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(14, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(14, strBuilder1.size());
      assertEquals(45, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('C');
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strBuilder_StrBuilderTokenizer0, "D ! }MPr7=");
      assertNotNull(strBuilder1);
      assertEquals(108, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(81, strBuilder0.size());
      assertEquals(81, strBuilder0.length());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(2, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(81, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(81, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(108, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains("%#2]+7s=n4H!}y]!"));
      
      Iterator<Object> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains("%#2]+7s=n4H!}y]!"));
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(iterator0, (String) null);
      assertNotNull(strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(16, strBuilder1.size());
      assertEquals(16, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(stack0.contains("%#2]+7s=n4H!}y]!"));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1870);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(1870, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) null, "end < start");
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(1870, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1870, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      assertEquals(Locale.FilteringMode.EXTENDED_FILTERING, locale_FilteringMode0);
      
      boolean boolean0 = arrayDeque0.add(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(boolean0);
      
      boolean boolean1 = arrayDeque0.add(locale_FilteringMode0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterable<?>) arrayDeque0, "");
      assertNotNull(strBuilder1);
      assertEquals(102, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(92, strBuilder0.size());
      assertEquals(92, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(92, strBuilder1.size());
      assertEquals(92, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(102, strBuilder1.capacity());
      assertFalse(arrayDeque0.contains(""));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<StrBuilder> treeSet0 = new TreeSet<StrBuilder>(comparator0);
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(strBuilder0));
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterable<?>) treeSet0, (String) null);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(treeSet0.contains(strBuilder0));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterable<?>) null, "org.apache.commons.lang3.ArrayUtils");
      assertNotNull(strBuilder1);
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(15, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(47, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      Object[] objectArray0 = new Object[2];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "%#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(32, strBuilder0.length());
      assertEquals(32, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(32, strBuilder1.length());
      assertEquals(32, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, objectArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("@(m634(");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder0.size());
      
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "@(m634(");
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder0.size());
      assertEquals(39, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(7, strBuilder1.size());
      assertEquals(7, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(0, objectArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(89, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(57, strBuilder0.length());
      assertEquals(57, strBuilder0.size());
      
      Object[] objectArray0 = new Object[3];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, (String) null);
      assertNotNull(strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(89, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(57, strBuilder0.length());
      assertEquals(57, strBuilder0.size());
      assertEquals(89, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(57, strBuilder1.length());
      assertEquals(57, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, objectArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertEquals(15, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Object[]) null, "#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder1);
      assertEquals(15, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder1.size());
      assertEquals(15, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(47, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.appendAll((Iterator<?>) null);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      
      StrBuilder strBuilder1 = strBuilder0.appendAll((Iterable<?>) enumSet0);
      assertNotNull(strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(112, strBuilder0.capacity());
      assertEquals(56, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.length());
      assertEquals(1, enumSet0.size());
      assertEquals(56, strBuilder1.length());
      assertEquals(56, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(112, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.appendAll((Iterable<?>) null);
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder1 = strBuilder0.appendAll(objectArray0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, objectArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.appendAll((Object[]) null);
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.appendln(charArray0, 0, 0);
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("length must be valid");
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      
      StrBuilder strBuilder1 = strBuilder0.appendAll((Iterator<?>) strTokenizer0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(42, strBuilder0.size());
      assertEquals(42, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(47, strBuilder1.capacity());
      assertEquals(42, strBuilder1.length());
      assertEquals(42, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder0.appendln(charArray0, 0, (-1573));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -1573
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vendor.url");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        strBuilder0.appendln(charArray0, 66, 294);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 294
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.appendln((char[]) null, 86, 86);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(16, strBuilder1.length());
      assertEquals(47, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("J");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 0, 505);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2{+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 10, (-2753));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(33);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln(strBuilder0, 33, 33);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, (-81), (-81));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2{+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null, 2485, 2485);
      assertNotNull(strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(47, strBuilder1.capacity());
      assertEquals(15, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(15, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i5");
      assertNotNull(strBuilder0);
      assertEquals(2, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = strBuilder0.appendln(strBuilder1);
      assertNotNull(strBuilder2);
      assertEquals(3, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(34, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(3, strBuilder2.length());
      assertEquals(3, strBuilder2.size());
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1289);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(1289, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(1289, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(1289, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[+-V/Su->ZwQ]56iA");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      
      StringBuffer stringBuffer0 = new StringBuffer(strBuilder0);
      assertNotNull(stringBuffer0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertEquals(17, stringBuffer0.length());
      assertEquals("[+-V/Su->ZwQ]56iA", stringBuffer0.toString());
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, 2, 2);
      assertNotNull(strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(49, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertEquals(17, stringBuffer0.length());
      assertEquals("[+-V/Su->ZwQ]56iA", stringBuffer0.toString());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(49, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(19, strBuilder1.length());
      assertEquals(19, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[+-V/Su->ZwQ]56iA");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(49, strBuilder0.capacity());
      assertEquals(17, strBuilder0.length());
      assertEquals(17, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      
      StringBuffer stringBuffer0 = new StringBuffer(strBuilder0);
      assertNotNull(stringBuffer0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(49, strBuilder0.capacity());
      assertEquals(17, strBuilder0.length());
      assertEquals(17, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("[+-V/Su->ZwQ]56iA", stringBuffer0.toString());
      assertEquals(17, stringBuffer0.length());
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 2, 34);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vendor.url");
      assertNotNull(strBuilder0);
      assertEquals(47, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StringBuffer stringBuffer0 = new StringBuffer(strBuilder0);
      assertNotNull(stringBuffer0);
      assertEquals(47, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, stringBuffer0.length());
      assertEquals("java.vendor.url", stringBuffer0.toString());
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 2, (-1317));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, 0, 0);
      assertNotNull(strBuilder1);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      StringBuffer stringBuffer0 = new StringBuffer(strBuilder0);
      assertNotNull(stringBuffer0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, (-872), (-872));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null, (-872), (-872));
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      
      StringBuffer stringBuffer0 = new StringBuffer(strBuilder0);
      assertNotNull(stringBuffer0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertEquals("#2]+7s=n4H!}y]!", stringBuffer0.toString());
      assertEquals(15, stringBuffer0.length());
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(30, strBuilder0.length());
      assertEquals(30, strBuilder0.size());
      assertEquals("#2]+7s=n4H!}y]!", stringBuffer0.toString());
      assertEquals(15, stringBuffer0.length());
      assertEquals(47, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(30, strBuilder1.size());
      assertEquals(30, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.appendln((StringBuffer) null);
      assertNotNull(strBuilder1);
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(16, strBuilder1.length());
      assertEquals(16, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.appendln("f_yg%k}F1#>XU{I", 0, 0);
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i5");
      assertNotNull(strBuilder0);
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.appendln("i5", 1, 1);
      assertNotNull(strBuilder1);
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(34, strBuilder1.capacity());
      assertEquals(4, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln("f_yg%k}F1#>XU{I", 0, (-124));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("5p/]61K/1|vi5");
      assertNotNull(strBuilder0);
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(13, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(45, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      
      // Undeclared exception!
      try { 
        strBuilder0.append("5p/]61K/1|vi5", 9, 9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertEquals(15, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.appendln((String) null, (-37), (-37));
      assertNotNull(strBuilder1);
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(47, strBuilder1.capacity());
      assertEquals(16, strBuilder1.length());
      assertEquals(16, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertEquals(16, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.append((String) null);
      assertNotNull(strBuilder1);
      assertEquals(16, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(16, strBuilder1.size());
      assertEquals(16, strBuilder1.length());
      assertEquals(48, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) null, 0, 0);
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      // Undeclared exception!
      try { 
        strBuilder0.append((CharSequence) "%#2]+7s=n4H!}y]!", 654, 654);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Z8,BW=>h");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(40, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) null);
      assertNotNull(strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(40, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(40, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(8, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apachecommons.lang3.text.StrBuilder");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(71, strBuilder0.capacity());
      assertEquals(39, strBuilder0.length());
      assertEquals(39, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) "org.apachecommons.lang3.text.StrBuilder");
      assertNotNull(strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(78, strBuilder0.length());
      assertEquals(78, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(156, strBuilder0.capacity());
      assertEquals(78, strBuilder1.length());
      assertEquals(78, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(156, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      Object[] objectArray0 = new Object[2];
      StrBuilder strBuilder1 = strBuilder0.appendAll(objectArray0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(2, objectArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      assertNotNull(strBuilder0);
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StrBuilder strBuilder1 = strBuilder0.setNewLineText("#2]+7s4H!}y]!");
      assertNotNull(strBuilder1);
      assertEquals(48, strBuilder0.capacity());
      assertEquals("#2]+7s4H!}y]!", strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(16, strBuilder1.length());
      assertEquals("#2]+7s4H!}y]!", strBuilder1.getNewLineText());
      assertEquals(16, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.appendln(stringBuffer0);
      assertNotNull(strBuilder2);
      assertEquals(48, strBuilder0.capacity());
      assertEquals("#2]+7s4H!}y]!", strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(29, strBuilder0.length());
      assertEquals(29, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(29, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(29, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals("#2]+7s4H!}y]!", strBuilder2.getNewLineText());
      assertEquals(48, strBuilder2.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vendor.url");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(15, strBuilder0.length());
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(117, 3, charArray0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      
      // Undeclared exception!
      try { 
        strBuilder0.getChars(1977, 1977, (char[]) null, (-748));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1977
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      
      // Undeclared exception!
      try { 
        strBuilder0.getChars(1977, (-3881), (char[]) null, (-748));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3881
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2{+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.getChars((-2061), (-2061), charArray0, (-2061));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2061
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2{+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, 3, 3);
      assertNotNull(strBuilder1);
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(47, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.length());
      assertEquals(18, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vendor.url");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      
      char[] charArray0 = new char[9];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertNotNull(charArray1);
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(9, charArray0.length);
      assertEquals(15, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      char[] charArray0 = new char[1];
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertNotNull(charArray1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("}xY.oQ7?~]lv");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(12, strBuilder0.length());
      assertEquals(12, strBuilder0.size());
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      char[] charArray0 = strBuilder0.getChars((char[]) null);
      assertNotNull(charArray0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(12, strBuilder0.length());
      assertEquals(12, strBuilder0.size());
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(12, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(":C)dxkMTa+T0e@Js");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      
      char[] charArray0 = strBuilder0.toCharArray(6, 6);
      assertNotNull(charArray0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%#2]o8s=n4]!}y]!");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      
      char[] charArray0 = strBuilder0.toCharArray(4, 56);
      assertNotNull(charArray0);
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(12, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(800);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(800, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertNotNull(charArray0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(800, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[2+-Vm/Su-lZwQ]6iA");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(18, strBuilder0.length());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertNotNull(charArray0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(18, strBuilder0.length());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt(1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt((-1338));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1338
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt(57, '0');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 57
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.setCharAt(8, 'Q');
      assertNotNull(strBuilder1);
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(15, strBuilder1.length());
      assertEquals(15, strBuilder1.size());
      assertEquals(47, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      assertNotNull(strBuilder0);
      assertEquals(52, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt((-2694), 'N');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2694
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("=|Xn6~Tu8");
      assertNotNull(strBuilder0);
      assertEquals(41, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      
      // Undeclared exception!
      try { 
        strBuilder0.charAt(1116);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1116
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("5p:`61K/1|vi5");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.length());
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(45, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.length());
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(45, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertFalse(strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.length());
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(45, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(53, int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i5");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      
      // Undeclared exception!
      try { 
        strBuilder0.charAt((-2804));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2804
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(67);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(67, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("'4kydGuK$");
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(67, strBuilder0.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(67, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("file.ancodin=");
      assertNotNull(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.length());
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(45, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertNotNull(strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.length());
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(13, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(13, strBuilder1.length());
      assertEquals(13, strBuilder1.size());
      assertEquals(13, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.minimizeCapacity();
      assertNotNull(strBuilder2);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.length());
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(13, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(13, strBuilder1.length());
      assertEquals(13, strBuilder1.size());
      assertEquals(13, strBuilder1.capacity());
      assertEquals(13, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(13, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(13, strBuilder2.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.setLength(0);
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("$f_jV&^5x{I@^:A>_g");
      assertNotNull(strBuilder0);
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.setLength(10);
      assertNotNull(strBuilder1);
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(10, strBuilder0.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(50, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(10, strBuilder1.length());
      assertEquals(10, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      
      // Undeclared exception!
      try { 
        strBuilder0.setLength((-2073));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2073
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2]+7s=*4H!}y]!");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.setLength(1060);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2120, strBuilder0.capacity());
      assertEquals(1060, strBuilder0.length());
      assertEquals(1060, strBuilder0.size());
      assertEquals(2120, strBuilder1.capacity());
      assertEquals(1060, strBuilder1.length());
      assertEquals(1060, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vendor.url");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.setNullText("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader");
      assertNotNull(strBuilder1);
      assertEquals(15, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.length());
      assertEquals("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", strBuilder0.getNullText());
      assertEquals(15, strBuilder1.size());
      assertEquals("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(15, strBuilder1.length());
      assertEquals(47, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.appendNull();
      assertNotNull(strBuilder2);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(72, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(72, strBuilder0.size());
      assertEquals(144, strBuilder0.capacity());
      assertEquals("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", strBuilder0.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(72, strBuilder2.length());
      assertEquals(72, strBuilder2.size());
      assertEquals(144, strBuilder2.capacity());
      assertEquals("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", strBuilder2.getNullText());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%#2]o8s=n4]!}y]!");
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.setNullText("");
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(48, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(16, strBuilder1.length());
      assertEquals(16, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNotNull(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.setNullText((String) null);
      assertNotNull(strBuilder1);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i5");
      assertNotNull(strBuilder0);
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.appendln(strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(34, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      
      Reader reader0 = strBuilder0.asReader();
      assertNotNull(reader0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertTrue(reader0.markSupported());
      assertFalse(reader0.ready());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%#2]+7s=n4H!}y]!");
      assertNotNull(strBuilder0);
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      int int0 = strBuilder0.indexOf((StrMatcher) null);
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2{+7s=n4H!}y]!");
      StrMatcher strMatcher0 = StrMatcher.spaceMatcher();
      StrBuilder strBuilder1 = strBuilder0.deleteAll(strMatcher0);
      assertEquals(15, strBuilder1.length());
      assertEquals(47, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'4ky*yX$");
      // Undeclared exception!
      try { 
        strBuilder0.insert(49, (long) 49);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 49
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.asWriter();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Ivlid enth: ");
      strBuilder0.appendln("Ivlid enth: ");
      assertEquals(25, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2462);
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        strBuilder0.appendln(charArray0, 2, 2462);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 2462
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[`8,I=>");
      strBuilder0.appendln(0L);
      assertEquals(9, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((-1009), (-1009), ':');
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%#2]+7s=n4H!}y]!");
      // Undeclared exception!
      try { 
        strBuilder0.insert(114, 114);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 114
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(100);
      StringWriter stringWriter0 = new StringWriter(10);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        strBuilder0.appendln(stringBuffer0, 100, 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("I");
      int int0 = strBuilder0.lastIndexOf('o');
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vendor.url");
      strBuilder0.appendln(strBuilder0, 0, 0);
      assertEquals(16, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Inva*id?offset: ");
      strBuilder0.appendln('z');
      assertEquals(18, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("e");
      strBuilder0.asTokenizer();
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.runtime.version");
      StrMatcher strMatcher0 = StrMatcher.stringMatcher("java.runtime.version");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "java.runtime.version");
      assertEquals(20, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(34);
      strBuilder0.getNewLineText();
      assertEquals(34, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[2+-Vm/Su-lZwQ]6iA");
      int int0 = strBuilder0.indexOf("[2+-Vm/Su-lZwQ]6iA");
      assertEquals(0, int0);
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2]+7s=n4H!}y]!");
      strBuilder0.appendln((-1537.15F));
      assertEquals(24, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("il!1dEy/~$\"");
      int int0 = strBuilder0.indexOf('2');
      assertEquals(43, strBuilder0.capacity());
      assertEquals((-1), int0);
      assertEquals(11, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("i5");
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("i5");
      strBuilder0.replaceAll(strMatcher0, "i5");
      assertEquals(4, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2]+7s=n4H!}y]!");
      // Undeclared exception!
      try { 
        strBuilder0.insert((-972), 'U');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -972
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2]+7s=n4H!}y]!");
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("#2]+7s=n4H!}y]!");
      int int0 = strBuilder0.lastIndexOf(strMatcher0);
      assertEquals(47, strBuilder0.capacity());
      assertEquals(15, strBuilder0.length());
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.library.path");
      int int0 = strBuilder0.capacity();
      assertEquals(17, strBuilder0.length());
      assertEquals(49, int0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("e");
      int int0 = strBuilder0.lastIndexOf("e");
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert((-1), (double) (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendln(true);
      assertEquals(5, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%#2]+7s=n4H!}y]!");
      StrBuilder strBuilder1 = strBuilder0.deleteFirst((StrMatcher) null);
      assertEquals(16, strBuilder1.length());
      assertEquals(48, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      strBuilder0.appendln((char[]) null);
      assertEquals(21, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2{+7s=n4H!}y]!");
      strBuilder0.appendFixedWidthPadRight((Object) null, 1085, 'r');
      assertEquals(1100, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2{+7s=n4H!}y]!");
      strBuilder0.deleteCharAt(1);
      assertEquals(14, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2]+7s=n4H!}y]!");
      // Undeclared exception!
      try { 
        strBuilder0.appendln("#2]+7s=n4H!}y]!", (-37), (-37));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3033);
      // Undeclared exception!
      try { 
        strBuilder0.substring(3033);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.mark((-1456));
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.reset();
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.library.path");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.close();
      assertEquals(49, strBuilder0.capacity());
      assertEquals(17, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("#2{+7s=n4H!}6]!");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      char[] charArray0 = new char[0];
      StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.reset(charArray0);
      StrBuilder strBuilder1 = strBuilder0.appendAll((Iterator<?>) strTokenizer0);
      assertEquals(15, strBuilder1.length());
      assertEquals(47, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.library.path");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write("java.library.path");
      assertEquals(34, strBuilder0.size());
      assertEquals(34, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[2+-Vm/Su-lZwQ]6iA");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("", (-3274), 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, (-3286), (int) '(');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 40
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[+-V/Su->ZwQ]56iA");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.close();
      assertEquals(49, strBuilder0.capacity());
      assertEquals(17, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(":}}-{.mXKJ^z@");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.flush();
      assertEquals(45, strBuilder0.capacity());
      assertEquals(13, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-3274));
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write((char[]) null);
      assertEquals(32, strBuilder0.capacity());
  }
}

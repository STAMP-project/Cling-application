/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 22:11:45 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.MemberBox;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeJavaClass;
import com.google.javascript.rhino.head.NativeJavaMethod;
import com.google.javascript.rhino.head.NativeJavaPackage;
import com.google.javascript.rhino.head.Script;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionObject_ESTest extends FunctionObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "doubleValue");
      FunctionObject functionObject0 = new FunctionObject("doubleValue", method0, nativeArray0);
      boolean boolean0 = functionObject0.isVarArgsConstructor();
      assertFalse(boolean0);
      assertEquals(48, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "doubleValue");
      FunctionObject functionObject0 = new FunctionObject("doubleValue", method0, nativeArray0);
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        functionObject0.createObject(context0, nativeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped java.lang.InstantiationException: java.lang.Integer
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "reverse");
      assertNotNull(method0);
      
      Context context0 = Context.enter();
      FunctionObject functionObject0 = new FunctionObject("error reporter", method0, nativeArray0);
      functionObject0.call(context0, nativeArray0, nativeArray0, context0.emptyArgs);
      assertEquals(48, methodArray0.length);
      assertEquals(48L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test03()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "reverse");
      assertNotNull(method0);
      
      Context context0 = Context.getContext();
      FunctionObject functionObject0 = new FunctionObject("language version", method0, nativeArray0);
      Object[] objectArray0 = new Object[1];
      functionObject0.call(context0, nativeArray0, nativeArray0, objectArray0);
      assertEquals(48, methodArray0.length);
      assertEquals("language version", functionObject0.getFunctionName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "doubleValue");
      FunctionObject functionObject0 = new FunctionObject("doubleValue", method0, nativeArray0);
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeArray0, nativeArray0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"doubleValue\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "doubleValue");
      FunctionObject functionObject0 = new FunctionObject("doubleValue", method0, nativeArray0);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, (Scriptable) null, functionObject0, context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"doubleValue\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "doubleValue");
      FunctionObject functionObject0 = new FunctionObject("doubleValue", method0, nativeArray0);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, functionObject0, functionObject0, context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"doubleValue\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test07()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "reverse");
      Context context0 = Context.getContext();
      FunctionObject functionObject0 = new FunctionObject("language version", method0, nativeArray0);
      assertEquals(1, functionObject0.getArity());
      
      functionObject0.call(context0, nativeArray0, nativeArray0, methodArray0);
      assertEquals(48, methodArray0.length);
      assertEquals(48L, nativeArray0.jsGet_length());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<BaseFunction> class1 = BaseFunction.class;
      Context context0 = new Context();
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod((MemberBox) null, "error reporter");
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeJavaMethod0, (Object) class1, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't convert to type \"java.lang.reflect.Method\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test09()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      // Undeclared exception!
      try { 
        FunctionObject.findSingleMethod(methodArray0, "getInteger");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"getInteger\" occurs multiple times in class \"java.lang.Integer\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Method[] methodArray0 = new Method[1];
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "(Ljava/lang/Object;DLjava/lang/Object;Lorg/mozilla/javascript/Context;)Ljava/lang/Object;");
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      BaseFunction baseFunction0 = new BaseFunction(nativeArray0, nativeArray0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "reverse");
      assertNotNull(method0);
      
      FunctionObject functionObject0 = new FunctionObject("reverse", method0, baseFunction0);
      FunctionObject functionObject1 = new FunctionObject((String) null, method0, functionObject0);
      String string0 = functionObject1.getFunctionName();
      assertEquals("", string0);
      assertEquals(48, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "reverse");
      assertNotNull(method0);
      
      FunctionObject functionObject0 = new FunctionObject("error reporter", method0, nativeArray0);
      String string0 = functionObject0.decompile(7, 10);
      assertEquals("function error reporter() {\n\t[native code, arity=1]\n}\n", string0);
      assertEquals(48, methodArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test13()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("language version");
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeJavaPackage0, (Object) context0, 1);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test14()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("language version");
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeJavaPackage0, (Object) context0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test15()  throws Throwable  {
      Context context0 = Context.getContext();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      NativeArray nativeArray1 = (NativeArray)FunctionObject.convertArg(context0, (Scriptable) nativeArray0, (Object) nativeArray0, 6);
      assertEquals(0L, nativeArray1.jsGet_length());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test16()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("error reporter");
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeJavaPackage0, (Object) context0, 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test17()  throws Throwable  {
      Context context0 = new Context();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("error reporter");
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeJavaPackage0, (Object) nativeJavaPackage0, 4);
      Object object1 = FunctionObject.convertArg(context0, (Scriptable) nativeJavaPackage0, object0, 4);
      assertEquals(Double.NaN, object1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test18()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("language version");
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeJavaPackage0, (Object) context0, 3);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test19()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("language version");
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeJavaPackage0, (Object) "error reporter", 1);
      assertEquals("error reporter", object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Double> class0 = Double.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      BaseFunction baseFunction0 = new BaseFunction(nativeArray0, nativeArray0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "reverse");
      assertNotNull(method0);
      
      FunctionObject functionObject0 = new FunctionObject("<-i6", method0, baseFunction0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enter();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) functionObject0, (Object) contextFactory0, (Class<?>) class0);
      assertEquals(0, object0);
      assertEquals(48, methodArray0.length);
      assertEquals(1, functionObject0.getArity());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toBinaryString");
      assertNotNull(method0);
      
      FunctionObject functionObject0 = new FunctionObject("toBinaryString", method0, nativeArray0);
      assertEquals(48, methodArray0.length);
      assertEquals(48L, nativeArray0.getLength());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "doubleValue");
      assertNotNull(method0);
      
      FunctionObject functionObject0 = new FunctionObject("doubleValue", method0, nativeArray0);
      functionObject0.getMethodOrConstructor();
      assertEquals(48, methodArray0.length);
      assertEquals(0, functionObject0.getArity());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaAdapter.runScript((Script) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.JavaAdapter$2", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test27()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      Class<NativeJavaClass> class0 = NativeJavaClass.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) baseFunction0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported parameter type \"java.lang.Class\" in method \"com.google.javascript.rhino.head.NativeJavaClass\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "reverse");
      assertNotNull(method0);
      
      FunctionObject functionObject0 = new FunctionObject("error reporter", method0, nativeArray0);
      functionObject0.addAsConstructor(nativeArray0, nativeArray0);
      assertEquals("error reporter", functionObject0.getFunctionName());
      assertEquals(48, methodArray0.length);
  }
}

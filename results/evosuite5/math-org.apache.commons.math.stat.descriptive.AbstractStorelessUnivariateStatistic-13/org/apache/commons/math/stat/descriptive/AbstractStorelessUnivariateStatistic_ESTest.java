/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 21 15:43:06 GMT 2019
 */

package org.apache.commons.math.stat.descriptive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.stat.descriptive.moment.FourthMoment;
import org.apache.commons.math.stat.descriptive.moment.GeometricMean;
import org.apache.commons.math.stat.descriptive.moment.Kurtosis;
import org.apache.commons.math.stat.descriptive.moment.SecondMoment;
import org.apache.commons.math.stat.descriptive.moment.Skewness;
import org.apache.commons.math.stat.descriptive.moment.Variance;
import org.apache.commons.math.stat.descriptive.summary.Product;
import org.apache.commons.math.stat.descriptive.summary.Sum;
import org.apache.commons.math.stat.descriptive.summary.SumOfLogs;
import org.apache.commons.math.stat.descriptive.summary.SumOfSquares;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AbstractStorelessUnivariateStatistic_ESTest extends AbstractStorelessUnivariateStatistic_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Product product0 = new Product();
      FourthMoment fourthMoment0 = new FourthMoment();
      double[] doubleArray0 = new double[7];
      fourthMoment0.evaluate(doubleArray0);
      boolean boolean0 = product0.equals(fourthMoment0);
      assertEquals(0.0, fourthMoment0.getResult(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Sum sum0 = new Sum();
      boolean boolean0 = sum0.equals("&w#AdI/7bij/S");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Product product0 = new Product();
      Kurtosis kurtosis0 = new Kurtosis();
      boolean boolean0 = product0.equals(kurtosis0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SumOfSquares sumOfSquares0 = new SumOfSquares();
      Product product0 = new Product();
      product0.increment(Double.NaN);
      boolean boolean0 = product0.equals(sumOfSquares0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      // Undeclared exception!
      try { 
        sumOfLogs0.incrementAll((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input values array is null
         //
         verifyException("org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      GeometricMean geometricMean0 = new GeometricMean(sumOfLogs0);
      double[] doubleArray0 = new double[1];
      geometricMean0.incrementAll(doubleArray0);
      assertEquals(1L, geometricMean0.getN());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SecondMoment secondMoment0 = new SecondMoment();
      double[] doubleArray0 = new double[5];
      double double0 = secondMoment0.evaluate(doubleArray0, 0, 0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Product product0 = new Product();
      // Undeclared exception!
      try { 
        product0.evaluate((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input value array is null
         //
         verifyException("org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Skewness skewness0 = new Skewness();
      skewness0.hashCode();
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Variance variance0 = new Variance();
      double[] doubleArray0 = new double[2];
      variance0.incrementAll(doubleArray0, 0, 0);
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 22:03:04 GMT 2019
 */

package org.mockito.cglib.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.PipedInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.mockito.asm.ClassVisitor;
import org.mockito.asm.ClassWriter;
import org.mockito.asm.Type;
import org.mockito.cglib.core.ClassEmitter;
import org.mockito.cglib.core.CodeEmitter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ClassEmitter_ESTest extends ClassEmitter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Type type0 = Type.SHORT_TYPE;
      ClassWriter classWriter0 = new ClassWriter(9);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo((-390), "org.mockito.cglib.core.ClassEmitter$3", type0, (Object) null);
      // Undeclared exception!
      try { 
        classEmitter0.declare_field(5, "<^~_Da4N?/mvxXw8Q", type0, classEmitter_FieldInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.cglib.core.ClassEmitter$FieldInfo@e0674d87
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Type type0 = Type.getType(class0);
      ClassWriter classWriter0 = new ClassWriter(375);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo(1, "D&", type0, "D&");
      // Undeclared exception!
      try { 
        classEmitter0.declare_field((-2904), "D&", type0, classEmitter_FieldInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.cglib.core.ClassEmitter$FieldInfo@cf980ab4
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.BOOLEAN_TYPE;
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo(1176, "JSR/RET are not supported with computeFrames option", type0, classEmitter0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(974);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      ClassEmitter.FieldInfo classEmitter_FieldInfo1 = new ClassEmitter.FieldInfo(1176, "JSR/RET are not supported with computeFrames option", type0, bufferedInputStream0);
      boolean boolean0 = classEmitter_FieldInfo0.equals(classEmitter_FieldInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Type type0 = Type.getObjectType("4NAAy>4IyR\"4)\";/");
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo(10, "4NAAy>4IyR\"4)\";/", type0, (Object) null);
      boolean boolean0 = classEmitter_FieldInfo0.equals(classEmitter_FieldInfo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.getObjectType("serialVersionUID");
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo(8, "serialVersionUID", type0, classEmitter0);
      String string0 = "nqwc1gGE\\u$!h]L(71";
      ClassEmitter.FieldInfo classEmitter_FieldInfo1 = new ClassEmitter.FieldInfo(8, string0, type0, (Object) null);
      boolean boolean0 = classEmitter_FieldInfo0.equals(classEmitter_FieldInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Type type0 = Type.LONG_TYPE;
      ClassWriter classWriter0 = new ClassWriter(4);
      String[] stringArray0 = new String[1];
      ClassEmitter classEmitter0 = new ClassEmitter((ClassVisitor) null);
      classEmitter0.setTarget(classWriter0);
      classEmitter0.visit(8, 4, "org.mockito.cglib.core.ClassEmitter$3", stringArray0[0], "E8", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo(128, "E8", type0, codeEmitter0);
      boolean boolean0 = classEmitter_FieldInfo0.equals("org.mockito.cglib.core.ClassEmitter$3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo((-2847), "H?v+@B#t`kp;h", (Type) null, (Object) null);
      boolean boolean0 = classEmitter_FieldInfo0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassEmitter classEmitter1 = new ClassEmitter(classEmitter0);
      // Undeclared exception!
      try { 
        classEmitter1.getFieldInfo("1^,xyB,Z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Type type0 = Type.SHORT_TYPE;
      ClassWriter classWriter0 = new ClassWriter(627);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.declare_field(3, "org.uockito.cglib.core.Local8ariaQlesSorter", type0, "org.uockito.cglib.core.Local8ariaQlesSorter");
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = classEmitter0.getFieldInfo("org.uockito.cglib.core.Local8ariaQlesSorter");
      assertNotNull(classEmitter_FieldInfo0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Type type0 = Type.LONG_TYPE;
      ClassWriter classWriter0 = new ClassWriter(4);
      ClassEmitter classEmitter0 = new ClassEmitter((ClassVisitor) null);
      classEmitter0.setTarget(classWriter0);
      classEmitter0.declare_field(1, "E8", type0, "E8");
      boolean boolean0 = classEmitter0.isFieldDeclared("E8");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter((ClassVisitor) null);
      boolean boolean0 = classEmitter0.isFieldDeclared("org.mockito.cglib.core.ClassEmitter$3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "nqwc1gGE\\u$!h]L(71";
      Type type0 = Type.SHORT_TYPE;
      ClassWriter classWriter0 = new ClassWriter(342);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.declare_field(3, string0, type0, string0);
      // Undeclared exception!
      try { 
        classEmitter0.declare_field(2, string0, type0, classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field \"nqwc1gGE\\u$!h]L(71\" has been declared differently
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Type type0 = Type.getObjectType("FV|l' ");
      ClassWriter classWriter0 = new ClassWriter(47);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.declare_field((-497), "FV|l' ", type0, type0);
      classEmitter0.declare_field((-497), "FV|l' ", type0, type0);
      assertEquals(1, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-4646), 992, "", "by3Vf7=,1p", "Ljava/lang/Synthetic;", (String[]) null);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      assertEquals(156, CodeEmitter.GE);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      String[] stringArray0 = new String[1];
      ClassEmitter classEmitter0 = new ClassEmitter((ClassVisitor) null);
      classEmitter0.setTarget(classWriter0);
      classEmitter0.visit(8, 4, "org.mockito.cglib.core.ClassEmitter$3", stringArray0[0], "E8", stringArray0);
      classEmitter0.begin_static();
      classEmitter0.end_class();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[1];
      classEmitter0.visit(2791, 33554432, "Field ", "long", "long", stringArray0);
      classEmitter0.getStaticHook();
      classEmitter0.end_class();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.visit((-4646), 992, "", "by3Vf7=,1p", "Ljava/lang/Synthetic;", (String[]) null);
      // Undeclared exception!
      try { 
        classEmitter0.getStaticHook();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // static hook is invalid for this class
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-23));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Class<Object> class0 = Object.class;
      Type type0 = Type.getType(class0);
      classEmitter0.begin_class(4, 6, "", type0, (Type[]) null, "");
      assertEquals(3, Type.BYTE);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      // Undeclared exception!
      try { 
        classEmitter0.begin_class(8192, 8192, "}[<'4S", (Type) null, (Type[]) null, "}[<'4S");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassEmitter classEmitter1 = new ClassEmitter(classEmitter0);
      Type type0 = Type.BOOLEAN_TYPE;
      // Undeclared exception!
      try { 
        classEmitter1.declare_field(2, "D*0xQ+3", type0, "D*0xQ+3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        classEmitter0.visitMethod(177, "AnnotationDefault", "AnnotationDefault", "AnnotationDefault", stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // classInfo is null! org.mockito.cglib.core.ClassEmitter@1
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      // Undeclared exception!
      try { 
        classEmitter0.getSuperType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      // Undeclared exception!
      try { 
        classEmitter0.visitEnd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      String[] stringArray0 = new String[1];
      ClassEmitter classEmitter0 = new ClassEmitter((ClassVisitor) null);
      classEmitter0.setTarget(classWriter0);
      classEmitter0.visit(8, 4, "org.mockito.cglib.core.ClassEmitter$3", stringArray0[0], "E8", stringArray0);
      classEmitter0.begin_static();
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      assertEquals(154, CodeEmitter.NE);
  }
}

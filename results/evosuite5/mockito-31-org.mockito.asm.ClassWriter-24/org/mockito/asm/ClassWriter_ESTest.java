/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 09:27:25 GMT 2019
 */

package org.mockito.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.asm.Attribute;
import org.mockito.asm.ClassReader;
import org.mockito.asm.ClassWriter;
import org.mockito.asm.Item;
import org.mockito.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      classWriter0.index = 4096;
      Item item0 = classWriter0.newMethodItem("tjd~8)$D]", "tjd~8)$D]", "", true);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(579);
      String string0 = classWriter0.getCommonSuperClass("org.mockito.asm.ByteVector", "java/lang/Object");
      assertEquals("java/lang/Object", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4125);
      String string0 = classWriter0.getCommonSuperClass("org.mockito.asm.Frame", "org.mockito.asm.Frame");
      assertEquals("org.mockito.asm.Frame", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(579);
      String string0 = classWriter0.getCommonSuperClass("org.mockito.asm.ByteVector", "org.mockito.asm.Frame");
      assertEquals("java/lang/Object", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4125);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(4125, 4125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Item[] itemArray0 = new Item[6];
      classWriter0.typeTable = itemArray0;
      classWriter0.addUninitializedType(".Rv#]eK.xoxcvk~", 0);
      classWriter0.addUninitializedType("", 4);
      classWriter0.addType("");
      int int0 = classWriter0.addType("d/621jB4O4zn=jo");
      assertEquals(4, int0);
      
      classWriter0.addUninitializedType("org.mockito.asm.MethodWriter", 2953);
      int int1 = classWriter0.addUninitializedType("wh3tM", 24117248);
      assertEquals(6, int1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777206);
      int int0 = classWriter0.addUninitializedType("", 16777218);
      assertEquals(1, int0);
      
      int int1 = classWriter0.addType("");
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777206);
      int int0 = classWriter0.addUninitializedType("", 16777218);
      assertEquals(1, int0);
      
      int int1 = classWriter0.addUninitializedType("", 16777218);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777206);
      int int0 = classWriter0.addType("");
      assertEquals(1, int0);
      
      int int1 = classWriter0.addType("");
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(29);
      classWriter0.newFieldItem("org.mockito.asm.Item", "org.mockito.asm.Frame", "org.mockito.asm.Frame");
      int int0 = classWriter0.newNameType("org.mockito.asm.Frame", "org.mockito.asm.Frame");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newConst("J<#FI5jVDh2");
      int int0 = classWriter0.newConst("J<#FI5jVDh2");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2229);
      Item item0 = classWriter0.newDouble(2229);
      Item item1 = classWriter0.newDouble(2229);
      assertNotNull(item1);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777206);
      Item item0 = classWriter0.newLong(16777206);
      Item item1 = classWriter0.newLong(16777206);
      assertNotNull(item1);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(42);
      Item item0 = classWriter0.newFloat(42);
      Item item1 = classWriter0.newFloat(42);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(20);
      Item item0 = classWriter0.newInteger(20);
      Item item1 = classWriter0.newInteger(20);
      assertSame(item1, item0);
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Item item0 = classWriter0.newFieldItem(".Rv#]eK.xoxcvk~", "K-DeyN]Wg6^WhwLrK", "org.mockito.asm.MethodWriter");
      Item item1 = classWriter0.newFieldItem(".Rv#]eK.xoxcvk~", "K-DeyN]Wg6^WhwLrK", "org.mockito.asm.MethodWriter");
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(20);
      Type type0 = Type.LONG_TYPE;
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777219);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@3967bd94
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65);
      Double double0 = new Double(65);
      Item item0 = classWriter0.newConstItem(double0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1849);
      Long long0 = new Long(1);
      Item item0 = classWriter0.newConstItem(long0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-304));
      Float float0 = new Float((float) 9);
      int int0 = classWriter0.newConst(float0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      Boolean boolean0 = Boolean.valueOf(true);
      Item item0 = classWriter0.newConstItem(boolean0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      Boolean boolean0 = Boolean.valueOf((String) null);
      Item item0 = classWriter0.newConstItem(boolean0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(19);
      Short short0 = new Short((short) (-4985));
      Item item0 = classWriter0.newConstItem(short0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(24);
      Character character0 = new Character('|');
      int int0 = classWriter0.newConst(character0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-345));
      Byte byte0 = new Byte((byte)26);
      Item item0 = classWriter0.newConstItem(byte0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(204);
      Item item0 = classWriter0.newConstItem(classWriter0.COMPUTE_FRAMES);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1353));
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3026);
      Attribute attribute0 = new Attribute("NI,");
      byte[] byteArray0 = new byte[0];
      attribute0.value = byteArray0;
      classWriter0.visitAttribute(attribute0);
      byte[] byteArray1 = classWriter0.toByteArray();
      assertEquals(37, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2229);
      String[] stringArray0 = new String[0];
      classWriter0.visit(2229, (-1), "*Bir!J(6.034+u", "*Bir!J(6.034+u", "*Bir!J(6.034+u", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(83, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(24);
      String[] stringArray0 = new String[0];
      classWriter0.visit(24, (-756), ".class", ".class", ".class", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(93, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(18);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "jQX p";
      classWriter0.visit(698, 698, "jQX p", "jQX p", "jQX p", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(57, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(579);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".%).!";
      classWriter0.visitMethod((-327), ".%).!", ".%).!", ".%).!", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(123, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(579);
      classWriter0.visitInnerClass((String) null, "", (String) null, 40);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(61, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1054);
      classWriter0.visitInnerClass((String) null, (String) null, "SourceFile", 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(67);
      classWriter0.visitInnerClass("byte", "`\"c", "", 67);
      classWriter0.visitInnerClass("", (String) null, "", 67);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(42);
      classWriter0.visitAnnotation("", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(67, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(192);
      classWriter0.visitAnnotation("", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(69, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777219);
      classWriter0.visitOuterClass("org.mockito.asm.ClassWriter", "org.mockito.asm.ClassWriter", "org.mockito.asm.ClassWriter");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      classWriter0.visitOuterClass("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "RuntimeVisibleAnnotations", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(579);
      classWriter0.visitOuterClass("yb7^bmT", (String) null, (String) null);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(65, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(735);
      classWriter0.visitSource("uRPQb,D&.TE9|qWW@", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1849);
      classWriter0.visitSource("java/lang/Throwable", "java/lang/Throwable");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(115, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(735);
      classWriter0.visitSource((String) null, "a(gSuT");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(29);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "org.mockito.asm.Edge";
      classWriter0.visit(1370, 29, "org.mockito.asm.Edge", (String) null, "", stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777219);
      classWriter0.visit(2, 2, "BQe(", "'z", "'z", (String[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(20);
      String[] stringArray0 = new String[0];
      classWriter0.visit(15, 49, "+elkRc}", "+elkRc}", (String) null, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(262144);
      classWriter0.visitField(262144, "Exceptions", "Exceptions", "Exceptions", "Exceptions");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(92, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1847);
      Type type0 = Type.getObjectType("ap0;(");
      int int0 = classWriter0.newConst(type0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(14);
      int int0 = classWriter0.newMethod("org.mockito.asm.ClassAdapter", "org.mockito.asm.ClassAdapter", "org.mockito.asm.ClassAdapter", false);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(591);
      int int0 = classWriter0.newField("short", "short", "short");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4125);
      Item item0 = classWriter0.newMethodItem("", "", "", true);
      Item item1 = classWriter0.newMethodItem("", "", "", true);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.mockito.asm.ClassWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(735);
      classWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 07:04:00 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.Arguments;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.BoundFunction;
import com.google.javascript.rhino.head.Callable;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.Delegator;
import com.google.javascript.rhino.head.FieldAndMethods;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.InterpretedFunction;
import com.google.javascript.rhino.head.InterpreterData;
import com.google.javascript.rhino.head.JavaMembers;
import com.google.javascript.rhino.head.LazilyLoadedCtor;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeGenerator;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeJSON;
import com.google.javascript.rhino.head.NativeJavaArray;
import com.google.javascript.rhino.head.NativeJavaClass;
import com.google.javascript.rhino.head.NativeJavaMethod;
import com.google.javascript.rhino.head.NativeJavaPackage;
import com.google.javascript.rhino.head.NativeJavaTopPackage;
import com.google.javascript.rhino.head.NativeNumber;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.NativeString;
import com.google.javascript.rhino.head.NativeWith;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.Synchronizer;
import com.google.javascript.rhino.head.TopLevel;
import com.google.javascript.rhino.head.UniqueTag;
import java.lang.reflect.Method;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ScriptableObject_ESTest extends ScriptableObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ContextFactory.getGlobal();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      importerTopLevel0.size();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      nativeError0.sealObject();
      ScriptableObject.deleteProperty((Scriptable) nativeError0, 13);
      ScriptableObject.getObjectPrototype(nativeError0);
      nativeError0.getIds();
      ContextFactory contextFactory0 = new ContextFactory();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test02()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      ScriptableObject.defineConstProperty(importerTopLevel0, "language version");
      Class<BaseFunction> class0 = BaseFunction.class;
      ScriptableObject.defineClass((Scriptable) importerTopLevel0, class0);
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      contextFactory0.enter();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      ScriptableObject.getArrayPrototype(nativeIterator_StopIteration0);
      // Undeclared exception!
      try { 
        nativeIterator_StopIteration0.put(110, (Scriptable) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test04()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(baseFunction0.isSealed());
      assertTrue(baseFunction0.isEmpty());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertEquals("function", baseFunction0.getTypeOf());
      assertTrue(baseFunction0.isExtensible());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertEquals("Function", baseFunction0.getClassName());
      assertNotNull(baseFunction0);
      
      NativeWith nativeWith0 = new NativeWith(baseFunction0, baseFunction0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(baseFunction0.isSealed());
      assertTrue(baseFunction0.isEmpty());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertEquals("function", baseFunction0.getTypeOf());
      assertTrue(baseFunction0.isExtensible());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertEquals("Function", baseFunction0.getClassName());
      assertEquals("With", nativeWith0.getClassName());
      assertNotNull(nativeWith0);
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeWith0, 46);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(boolean0);
      assertFalse(baseFunction0.isSealed());
      assertTrue(baseFunction0.isEmpty());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertEquals("function", baseFunction0.getTypeOf());
      assertTrue(baseFunction0.isExtensible());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertEquals("Function", baseFunction0.getClassName());
      assertEquals("With", nativeWith0.getClassName());
      
      Context context0 = Context.getCurrentContext();
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertNotNull(importerTopLevel0);
      
      int int0 = importerTopLevel0.size();
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(57, int0);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      
      boolean boolean1 = nativeWith0.has("language version", (Scriptable) baseFunction0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(boolean1);
      assertFalse(baseFunction0.isSealed());
      assertTrue(baseFunction0.isEmpty());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertEquals("function", baseFunction0.getTypeOf());
      assertTrue(baseFunction0.isExtensible());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertEquals("Function", baseFunction0.getClassName());
      assertEquals("With", nativeWith0.getClassName());
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = importerTopLevel0.isEmpty();
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(boolean2);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Class<NativeGenerator> class0 = NativeGenerator.class;
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass(importerTopLevel0, class0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("JavaClass", nativeJavaClass0.getClassName());
      assertNotNull(nativeJavaClass0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      nativeError0.sealObject();
      ScriptableObject.deleteProperty((Scriptable) nativeError0, 13);
      nativeError0.getIds();
      Long long0 = new Long(4);
      ScriptableObject.buildDataDescriptor(nativeError0, nativeError0, 1964);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      // Undeclared exception!
      try { 
        NativeJavaArray.wrap((Scriptable) nativeError0, (Object) context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test06()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      Context.enter(context0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      ScriptableObject.putConstProperty(importerTopLevel0, "language version", nativeJavaClass0);
      importerTopLevel0.size();
      NativeJSON.init(importerTopLevel0, true);
      importerTopLevel0.isEmpty();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test07()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      NativeWith nativeWith0 = new NativeWith(baseFunction0, baseFunction0);
      NativeNumber nativeNumber0 = new NativeNumber(8);
      String string0 = "\"KKd8qT";
      Class<Arguments> class0 = Arguments.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) nativeWith0, class0, false, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot load class \"com.google.javascript.rhino.head.Arguments\" which has no zero-parameter constructor.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      ContextFactory.getGlobal();
      Class<ImporterTopLevel> class0 = ImporterTopLevel.class;
      ScriptableObject.getTypedProperty((Scriptable) nativeError0, 209, class0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel(context0);
      ContextFactory.getGlobal();
      ScriptableObject.redefineProperty(importerTopLevel1, "error reporter", false);
      Context.enter(context0);
      Class<ImporterTopLevel> class0 = ImporterTopLevel.class;
      ScriptableObject.getTypedProperty((Scriptable) importerTopLevel1, 1678, class0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      Context context1 = contextFactory0.enter();
      BoundFunction boundFunction0 = new BoundFunction(context1, nativeContinuation0, nativeContinuation0, nativeContinuation0, context1.emptyArgs);
      String[] stringArray0 = new String[1];
      Class<FieldAndMethods> class0 = FieldAndMethods.class;
      // Undeclared exception!
      try { 
        boundFunction0.defineFunctionProperties(stringArray0, class0, (-1074));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test11()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(4503599627370495L);
      nativeArray0.parallelStream();
      ScriptableObject.deleteProperty((Scriptable) nativeArray0, 8);
      ContextFactory contextFactory0 = new ContextFactory();
      NativeError nativeError0 = new NativeError();
      Class<NativeJavaPackage> class0 = NativeJavaPackage.class;
      JavaMembers javaMembers0 = new JavaMembers(nativeArray0, class0);
      NativeJavaMethod nativeJavaMethod0 = javaMembers0.ctors;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "getDefaultValue";
      // Undeclared exception!
      try { 
        nativeJavaMethod0.defineFunctionProperties(stringArray0, class0, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported parameter type \"java.lang.Class\" in method \"getDefaultValue\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeError nativeError0 = new NativeError();
      ContextFactory.getGlobal();
      // Undeclared exception!
      try { 
        nativeError0.setAttributes(9, (Scriptable) importerTopLevel0, 160);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 160
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      NativeArray nativeArray0 = new NativeArray((-1L));
      Stream stream0 = nativeArray0.parallelStream();
      ScriptableObject.deleteProperty((Scriptable) nativeArray0, "g0SV~MT:Gd!PvsD]r");
      Long long0 = new Long(480L);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeIterator_StopIteration0.put(1, (Scriptable) nativeArray0, (Object) stream0);
      Context.enter((Context) null);
      NativeCall nativeCall0 = new NativeCall();
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        nativeCall0.getAttributes(6, (Scriptable) nativeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property 6 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test14()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Long long0 = new Long(0L);
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel();
      Short short0 = new Short((short)7);
      NativeError nativeError0 = new NativeError();
      nativeError0.hasInstance(importerTopLevel0);
      nativeError0.sameValue(long0, long0);
      ContextFactory contextFactory0 = new ContextFactory();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      ContextFactory.getGlobal();
      Class<BoundFunction> class0 = BoundFunction.class;
      // Undeclared exception!
      try { 
        ScriptableObject.getDefaultValue((Scriptable) importerTopLevel0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type class com.google.javascript.rhino.head.BoundFunction
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      // Undeclared exception!
      try { 
        ScriptableObject.ensureScriptableObject((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Expected argument of type object, but instead had type object
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      NativeArray nativeArray0 = new NativeArray((-959L));
      Context context0 = null;
      nativeArray0.getOwnPropertyDescriptor((Context) null, contextFactory0);
      NativeGenerator nativeGenerator0 = NativeGenerator.init((ScriptableObject) null, true);
      // Undeclared exception!
      try { 
        nativeGenerator0.hasInstance((Scriptable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test18()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = new Context(contextFactory0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeArray nativeArray0 = new NativeArray(160);
      nativeArray0.getOwnPropertyDescriptor(context0, importerTopLevel0);
      NativeGenerator nativeGenerator0 = NativeGenerator.init((ScriptableObject) null, true);
      InterpreterData interpreterData0 = new InterpreterData(1437, "error reporter", "error reporter", false);
      InterpreterData interpreterData1 = new InterpreterData(interpreterData0);
      // Undeclared exception!
      try { 
        InterpretedFunction.createScript(interpreterData1, nativeGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.InterpretedFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      importerTopLevel0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeError nativeError0 = new NativeError();
      ContextFactory contextFactory1 = ContextFactory.getGlobal();
      UniqueTag uniqueTag0 = (UniqueTag)Scriptable.NOT_FOUND;
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      LazilyLoadedCtor lazilyLoadedCtor0 = new LazilyLoadedCtor(importerTopLevel0, (String) null, "jsGet_getClassName", false);
      nativeError0.defineOwnProperty(context0, lazilyLoadedCtor0, importerTopLevel0);
      NativeObject nativeObject0 = new NativeObject();
      Context context1 = contextFactory1.makeContext();
      boolean boolean0 = ScriptableObject.isTrue(contextFactory1);
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel(context1, boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      ContextFactory.getGlobal();
      ScriptableObject.defineConstProperty(importerTopLevel0, "jsFunction_getFunctionName");
      ScriptableObject.deleteProperty((Scriptable) importerTopLevel0, "jsFunction_getFunctionName");
      NativeError nativeError0 = new NativeError();
      ScriptableObject.ensureScriptableObject(nativeError0);
      importerTopLevel0.isEmpty();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test22()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      ContextFactory contextFactory1 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory1);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      // Undeclared exception!
      try { 
        ScriptableObject.ensureScriptable(context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type com.google.javascript.rhino.head.Context
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      NativeError nativeError0 = new NativeError();
      ScriptableObject.redefineProperty(nativeJavaTopPackage0, "Z-*Q`HY3gg9t,3C_Qg&", false);
      ScriptableObject.deleteProperty((Scriptable) nativeError0, "=");
      nativeError0.setPrototype(nativeJavaTopPackage0);
      ScriptableObject.ensureScriptableObject(nativeError0);
      Class<NativeIterator> class0 = NativeIterator.class;
      NativeJavaClass nativeJavaClass0 = null;
      try {
        nativeJavaClass0 = new NativeJavaClass(nativeJavaTopPackage0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      Context context1 = contextFactory0.enter();
      BoundFunction boundFunction0 = new BoundFunction(context1, nativeContinuation0, nativeContinuation0, nativeContinuation0, context1.emptyArgs);
      String[] stringArray0 = new String[0];
      Class<FieldAndMethods> class0 = FieldAndMethods.class;
      boundFunction0.defineFunctionProperties(stringArray0, class0, (-1074));
  }

  @Test(timeout = 4000)
  @Ignore
  public void test25()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      contextFactory0.exit();
      Context context0 = contextFactory0.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      ContextFactory.getGlobal();
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel(context0, true);
      Class<IdFunctionObject> class0 = IdFunctionObject.class;
      // Undeclared exception!
      try { 
        importerTopLevel1.setAttributes("language version", (Scriptable) importerTopLevel0, 65534);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 65534
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.isSealed());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertTrue(nativeError0.isEmpty());
      assertNotNull(nativeError0);
      
      ScriptableObject.putProperty((Scriptable) nativeError0, 8, (Object) nativeError0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertNotNull(importerTopLevel0);
      
      importerTopLevel0.isEmpty();
      importerTopLevel0.isAccessorDescriptor(nativeError0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test27()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      contextFactory0.exit();
      Context context0 = contextFactory0.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      ContextFactory.getGlobal();
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel(context0, true);
      importerTopLevel1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      Context context1 = contextFactory0.enterContext(context0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context1, false);
      NativeObject nativeObject0 = (NativeObject)ScriptableObject.getObjectPrototype(importerTopLevel0);
      ContextFactory contextFactory1 = new ContextFactory();
      // Undeclared exception!
      try { 
        nativeObject0.addLazilyInitializedValue("value", (-290), (LazilyLoadedCtor) null, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeError nativeError0 = new NativeError();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeError nativeError1 = new NativeError();
      importerTopLevel0.isEmpty();
      importerTopLevel0.isAccessorDescriptor(nativeContinuation0);
      ScriptableObject.getPropertyIds(importerTopLevel0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      NativeError nativeError0 = new NativeError();
      NativeCall nativeCall0 = new NativeCall();
      Double.isFinite(252.9884982263);
      BaseFunction baseFunction0 = new BaseFunction();
      Class<BoundFunction> class0 = BoundFunction.class;
      baseFunction0.defineProperty(")|D", class0, 2);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      ContextFactory.getGlobal();
      Class<ImporterTopLevel> class0 = ImporterTopLevel.class;
      ScriptableObject.getTypedProperty((Scriptable) importerTopLevel0, 1368933789, class0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test32()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = new Context(contextFactory0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Class<NativeCall> class0 = NativeCall.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) importerTopLevel0, class0, false, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot load class \"com.google.javascript.rhino.head.NativeCall\" which has no zero-parameter constructor.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test33()  throws Throwable  {
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod(context0, (Scriptable) importerTopLevel0, "language version", context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000358 is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeContinuation0, false);
      nativeGenerator0.hasInstance(nativeContinuation0);
      NativeArray nativeArray0 = new NativeArray(0);
      // Undeclared exception!
      try { 
        nativeArray0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test35()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeArray nativeArray0 = new NativeArray(4);
      importerTopLevel0.isEmpty();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test36()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertNotNull(importerTopLevel0);
      
      Long long0 = new Long(13);
      assertEquals(13L, (long)long0);
      assertNotNull(long0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertNotNull(nativeJavaTopPackage0);
      
      nativeJavaTopPackage0.defineOwnProperty(context0, (Object) long0, (ScriptableObject) importerTopLevel0, false);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      
      String string0 = "hasInstance";
      Object object0 = nativeJavaTopPackage0.getGetterOrSetter("hasInstance", 0, false);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        Context.onSealedMutation();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test37()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertNotNull(importerTopLevel0);
      
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod(context0, (Scriptable) importerTopLevel0, "language version", context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000004 is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      ContextFactory contextFactory1 = ContextFactory.getGlobal();
      assertNotSame(contextFactory1, contextFactory0);
      assertFalse(contextFactory1.hasExplicitGlobal());
      assertFalse(contextFactory1.isSealed());
      assertFalse(contextFactory1.equals((Object)contextFactory0));
      assertNotNull(contextFactory1);
      
      NativeError nativeError0 = new NativeError();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertNotNull(nativeError0);
      
      NativeError nativeError1 = (NativeError)ScriptableObject.ensureScriptableObject(nativeError0);
      assertSame(nativeError0, nativeError1);
      assertSame(nativeError1, nativeError0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError1.isExtensible());
      assertFalse(nativeError1.avoidObjectDetection());
      assertFalse(nativeError1.isSealed());
      assertEquals("object", nativeError1.getTypeOf());
      assertFalse(nativeError1.hasPrototypeMap());
      assertEquals("Error", nativeError1.getClassName());
      assertTrue(nativeError1.isEmpty());
      assertNotNull(nativeError1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertNotNull(nativeError0);
      
      Short short0 = new Short((short)3588);
      assertEquals((short)3588, (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = nativeError0.sameValue("I", short0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(boolean0);
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertNotNull(importerTopLevel0);
      
      boolean boolean1 = importerTopLevel0.hasInstance(nativeError0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(boolean1);
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(boolean1 == boolean0);
      
      Object object0 = importerTopLevel0.get((Object) contextFactory0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.enter();
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertNotNull(context0);
      
      Scriptable scriptable0 = context0.topCallScope;
      assertNull(scriptable0);
      
      BaseFunction baseFunction0 = null;
      try {
        baseFunction0 = new BaseFunction((Scriptable) null, (Scriptable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      ContextFactory contextFactory1 = ContextFactory.getGlobal();
      assertNotSame(contextFactory1, contextFactory0);
      assertFalse(contextFactory1.isSealed());
      assertFalse(contextFactory1.hasExplicitGlobal());
      assertFalse(contextFactory1.equals((Object)contextFactory0));
      assertNotNull(contextFactory1);
      
      Context context0 = new Context(contextFactory0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertFalse(contextFactory0.equals((Object)contextFactory1));
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertNotNull(importerTopLevel0);
      
      // Undeclared exception!
      try { 
        importerTopLevel0.setAttributes("language version", (-1588406278));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1588406278
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.enter();
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertNotNull(importerTopLevel0);
      
      Long long0 = new Long(2);
      assertEquals(2L, (long)long0);
      assertNotNull(long0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertNotNull(nativeJavaTopPackage0);
      
      // Undeclared exception!
      try { 
        nativeJavaTopPackage0.getGetterOrSetter("language version", 140, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // language version
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test43()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      Context context0 = new Context(contextFactory0);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertNotNull(importerTopLevel0);
      
      NativeError nativeError0 = new NativeError();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.isSealed());
      assertNotNull(nativeError0);
      
      ContextFactory contextFactory1 = ContextFactory.getGlobal();
      assertSame(contextFactory1, contextFactory0);
      assertFalse(contextFactory1.hasExplicitGlobal());
      assertFalse(contextFactory1.isSealed());
      assertNotNull(contextFactory1);
      
      NativeError nativeError1 = new NativeError();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeError1.isExtensible());
      assertFalse(nativeError1.avoidObjectDetection());
      assertTrue(nativeError1.isEmpty());
      assertFalse(nativeError1.isSealed());
      assertEquals("Error", nativeError1.getClassName());
      assertEquals("object", nativeError1.getTypeOf());
      assertFalse(nativeError1.hasPrototypeMap());
      assertFalse(nativeError1.equals((Object)nativeError0));
      assertNotNull(nativeError1);
      
      Object object0 = nativeError1.get(35, (Scriptable) importerTopLevel0);
      assertSame(contextFactory0, contextFactory1);
      assertNotSame(nativeError1, nativeError0);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(nativeError1.isExtensible());
      assertFalse(nativeError1.avoidObjectDetection());
      assertTrue(nativeError1.isEmpty());
      assertFalse(nativeError1.isSealed());
      assertEquals("Error", nativeError1.getClassName());
      assertEquals("object", nativeError1.getTypeOf());
      assertFalse(nativeError1.hasPrototypeMap());
      assertFalse(nativeError1.equals((Object)nativeError0));
      assertNotNull(object0);
      
      nativeError0.defineOwnProperty(context0, "O6XL", nativeError1);
      assertSame(contextFactory0, contextFactory1);
      assertNotSame(nativeError0, nativeError1);
      assertNotSame(nativeError1, nativeError0);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isEmpty());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError1.isExtensible());
      assertFalse(nativeError1.avoidObjectDetection());
      assertTrue(nativeError1.isEmpty());
      assertFalse(nativeError1.isSealed());
      assertEquals("Error", nativeError1.getClassName());
      assertEquals("object", nativeError1.getTypeOf());
      assertFalse(nativeError1.hasPrototypeMap());
      assertFalse(nativeError0.equals((Object)nativeError1));
      assertFalse(nativeError1.equals((Object)nativeError0));
      
      Long long0 = new Long(5);
      assertEquals(5L, (long)long0);
      assertNotNull(long0);
      
      NativeObject nativeObject0 = (NativeObject)ScriptableObject.buildDataDescriptor(importerTopLevel0, nativeError1, 2);
      assertSame(contextFactory0, contextFactory1);
      assertNotSame(nativeError1, nativeError0);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(nativeError1.isExtensible());
      assertFalse(nativeError1.avoidObjectDetection());
      assertTrue(nativeError1.isEmpty());
      assertFalse(nativeError1.isSealed());
      assertEquals("Error", nativeError1.getClassName());
      assertEquals("object", nativeError1.getTypeOf());
      assertFalse(nativeError1.hasPrototypeMap());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.isEmpty());
      assertFalse(nativeError1.equals((Object)nativeError0));
      assertNotNull(nativeObject0);
      
      // Undeclared exception!
      try { 
        NativeJavaArray.wrap((Scriptable) importerTopLevel0, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Array expected
         //
         verifyException("com.google.javascript.rhino.head.NativeJavaArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.enter();
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertNotNull(importerTopLevel0);
      
      Object[] objectArray0 = importerTopLevel0.getAllIds();
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertNotNull(objectArray0);
      assertEquals(59, objectArray0.length);
      
      NativeError nativeError0 = new NativeError();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertNotNull(nativeError0);
      
      Object object0 = nativeError0.get(170, (Scriptable) importerTopLevel0);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertNotNull(object0);
      
      nativeError0.defineOwnProperty(context0, "language version", nativeError0);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test45()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      Context context0 = Context.getCurrentContext();
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertNotNull(importerTopLevel0);
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(importerTopLevel1.isExtensible());
      assertEquals("JavaImporter", importerTopLevel1.getClassName());
      assertFalse(importerTopLevel1.hasPrototypeMap());
      assertEquals("object", importerTopLevel1.getTypeOf());
      assertTrue(importerTopLevel1.isEmpty());
      assertFalse(importerTopLevel1.isSealed());
      assertFalse(importerTopLevel1.avoidObjectDetection());
      assertFalse(importerTopLevel1.equals((Object)importerTopLevel0));
      assertNotNull(importerTopLevel1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertNotNull(nativeJavaTopPackage0);
      
      Object object0 = nativeJavaTopPackage0.getGetterOrSetter((String) null, (-1808118754), false);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        Context.onSealedMutation();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test46()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      Context context0 = new Context(contextFactory0);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertNotNull(importerTopLevel0);
      
      context0.generateObserverCount = context0.generateObserverCount;
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      
      NativeArray nativeArray0 = null;
      try {
        nativeArray0 = new NativeArray(context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test47()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertNotNull(importerTopLevel0);
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      NativeError nativeError0 = new NativeError();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertNotNull(nativeError0);
      
      boolean boolean0 = importerTopLevel0.isGenericDescriptor(nativeError0);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(boolean0);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      
      boolean boolean1 = importerTopLevel0.isEmpty();
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(boolean1);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertNotNull(nativeContinuation0);
      
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeContinuation0, false);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeGenerator0.isSealed());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertTrue(nativeGenerator0.isEmpty());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertTrue(nativeGenerator0.isExtensible());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertNotNull(nativeGenerator0);
      
      boolean boolean0 = nativeGenerator0.isConst("I");
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(boolean0);
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeGenerator0.isSealed());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertTrue(nativeGenerator0.isEmpty());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertTrue(nativeGenerator0.isExtensible());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      
      boolean boolean1 = nativeGenerator0.hasInstance(nativeContinuation0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(boolean1);
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeGenerator0.isSealed());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertTrue(nativeGenerator0.isEmpty());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertTrue(nativeGenerator0.isExtensible());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertTrue(boolean1 == boolean0);
      
      nativeContinuation0.defineConst("I", (Scriptable) null);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      
      nativeGenerator0.setAttributes(1, 0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeGenerator0.isSealed());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertFalse(nativeGenerator0.isEmpty());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertTrue(nativeGenerator0.isExtensible());
      assertFalse(nativeGenerator0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertNotNull(importerTopLevel0);
      
      NativeError nativeError0 = new NativeError();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertNotNull(nativeError0);
      
      Synchronizer synchronizer0 = new Synchronizer(importerTopLevel0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertNotNull(synchronizer0);
      
      importerTopLevel0.put(1420, (Scriptable) nativeError0, (Object) synchronizer0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(nativeError0.isEmpty());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("Error", nativeError0.getClassName());
      
      Object object0 = nativeError0.equivalentValues(importerTopLevel0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(nativeError0.isEmpty());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("Error", nativeError0.getClassName());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Context context0 = Context.enter();
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertNotNull(importerTopLevel0);
      
      boolean boolean0 = importerTopLevel0.isConst("language version");
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(boolean0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      
      Object object0 = importerTopLevel0.get((Object) context0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertNull(object0);
      
      NativeArray nativeArray0 = new NativeArray(1L);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals(1L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(1L, nativeArray0.getLength());
      assertFalse(nativeArray0.isSealed());
      assertNotNull(nativeArray0);
      
      // Undeclared exception!
      try { 
        nativeArray0.add((Object) importerTopLevel0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertNotNull(nativeError0);
      
      NativeError nativeError1 = (NativeError)ScriptableObject.ensureScriptable(nativeError0);
      assertSame(nativeError0, nativeError1);
      assertSame(nativeError1, nativeError0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError1.isExtensible());
      assertEquals("object", nativeError1.getTypeOf());
      assertFalse(nativeError1.hasPrototypeMap());
      assertTrue(nativeError1.isEmpty());
      assertFalse(nativeError1.avoidObjectDetection());
      assertFalse(nativeError1.isSealed());
      assertEquals("Error", nativeError1.getClassName());
      assertNotNull(nativeError1);
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      UniqueTag uniqueTag0 = (UniqueTag)nativeError0.get(2, (Scriptable) nativeError1);
      assertSame(nativeError0, nativeError1);
      assertSame(nativeError1, nativeError0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError1.isExtensible());
      assertEquals("object", nativeError1.getTypeOf());
      assertFalse(nativeError1.hasPrototypeMap());
      assertTrue(nativeError1.isEmpty());
      assertFalse(nativeError1.avoidObjectDetection());
      assertFalse(nativeError1.isSealed());
      assertEquals("Error", nativeError1.getClassName());
      assertNotNull(uniqueTag0);
      
      Context context0 = contextFactory0.enterContext();
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertNotNull(context0);
      
      NativeArray nativeArray0 = new NativeArray(150);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertEquals(150L, nativeArray0.getLength());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals(150L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isExtensible());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertNotNull(nativeArray0);
      
      Object object0 = nativeArray0.get(5);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertEquals(150L, nativeArray0.getLength());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals(150L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isExtensible());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.enter();
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertNotNull(importerTopLevel0);
      
      ContextFactory contextFactory1 = ContextFactory.getGlobal();
      assertNotSame(contextFactory1, contextFactory0);
      assertFalse(contextFactory1.hasExplicitGlobal());
      assertFalse(contextFactory1.isSealed());
      assertFalse(contextFactory1.equals((Object)contextFactory0));
      assertNotNull(contextFactory1);
      
      ScriptableObject.defineConstProperty(importerTopLevel0, "jsFunction_getFunctionName");
      assertNotSame(contextFactory0, contextFactory1);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(contextFactory0.equals((Object)contextFactory1));
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) importerTopLevel0, "jsFunction_getFunctionName");
      assertNotSame(contextFactory0, contextFactory1);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(boolean0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(contextFactory0.equals((Object)contextFactory1));
      
      NativeError nativeError0 = new NativeError();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertNotNull(nativeError0);
      
      boolean boolean1 = importerTopLevel0.isAccessorDescriptor(nativeError0);
      assertNotSame(contextFactory0, contextFactory1);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(boolean1);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(contextFactory0.equals((Object)contextFactory1));
      assertTrue(boolean1 == boolean0);
      
      Object[] objectArray0 = ScriptableObject.getPropertyIds(importerTopLevel0);
      assertNotSame(contextFactory0, contextFactory1);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(contextFactory0.equals((Object)contextFactory1));
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertNotNull(nativeError0);
      
      ScriptableObject.putProperty((Scriptable) nativeError0, 8, (Object) nativeError0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(importerTopLevel0.isEmpty());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertNotNull(importerTopLevel0);
      
      IdFunctionObject idFunctionObject0 = nativeError0.exportAsJSClass(56, importerTopLevel0, false);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertTrue(nativeError0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(idFunctionObject0.isEmpty());
      assertEquals(1, idFunctionObject0.getArity());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals("Error", idFunctionObject0.getFunctionName());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals(1, idFunctionObject0.methodId());
      assertEquals(1, idFunctionObject0.getLength());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertNotNull(idFunctionObject0);
      
      boolean boolean0 = importerTopLevel0.isEmpty();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(boolean0);
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      
      boolean boolean1 = importerTopLevel0.isAccessorDescriptor(nativeError0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(boolean1);
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertTrue(nativeError0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(boolean1 == boolean0);
      
      Object[] objectArray0 = ScriptableObject.getPropertyIds(idFunctionObject0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertTrue(nativeError0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(idFunctionObject0.isEmpty());
      assertEquals(1, idFunctionObject0.getArity());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals("Error", idFunctionObject0.getFunctionName());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals(1, idFunctionObject0.methodId());
      assertEquals(1, idFunctionObject0.getLength());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test54()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertNotNull(context0);
      
      NativeNumber nativeNumber0 = new NativeNumber((-2897.101658));
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("object", nativeNumber0.getTypeOf());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.isSealed());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isEmpty());
      assertTrue(nativeNumber0.isExtensible());
      assertNotNull(nativeNumber0);
      
      Class<BaseFunction> class0 = BaseFunction.class;
      ScriptableObject.defineClass((Scriptable) nativeNumber0, class0);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("object", nativeNumber0.getTypeOf());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.isSealed());
      assertFalse(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isExtensible());
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertNotNull(importerTopLevel0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test55()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      Context context0 = Context.getCurrentContext();
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isEmpty());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertNotNull(importerTopLevel0);
      
      Long long0 = new Long(13);
      assertEquals(13L, (long)long0);
      assertNotNull(long0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertNotNull(nativeJavaTopPackage0);
      
      Object object0 = nativeJavaTopPackage0.getGetterOrSetter("hasInstance", 0, false);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertNull(object0);
      
      boolean boolean0 = nativeJavaTopPackage0.has("hasInstance", (Scriptable) importerTopLevel0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(boolean0);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isEmpty());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      
      boolean boolean1 = importerTopLevel0.isDataDescriptor(nativeJavaTopPackage0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(boolean1);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isEmpty());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        Context.onSealedMutation();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.enter();
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertNotNull(importerTopLevel0);
      
      Delegator delegator0 = new Delegator(importerTopLevel0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertNotNull(delegator0);
      
      // Undeclared exception!
      try { 
        ScriptableObject.defineConstProperty(delegator0, "error reporter");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test57()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.enter();
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertNotNull(importerTopLevel0);
      
      NativeError nativeError0 = new NativeError();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertNotNull(nativeError0);
      
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) nativeError0, 11);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(boolean0);
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.isSealed());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertNotNull(nativeContinuation0);
      
      contextFactory0.exit();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      ContextFactory contextFactory1 = new ContextFactory();
      assertFalse(contextFactory1.hasExplicitGlobal());
      assertFalse(contextFactory1.isSealed());
      assertFalse(contextFactory1.equals((Object)contextFactory0));
      assertNotNull(contextFactory1);
      
      Context context1 = contextFactory0.enterContext();
      assertNotSame(contextFactory0, contextFactory1);
      assertSame(context1, context0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context1.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context1.getLanguageVersion());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertFalse(context1.isGeneratingDebug());
      assertFalse(context1.isSealed());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertEquals(0, context1.getOptimizationLevel());
      assertFalse(context1.isGeneratingDebugChanged());
      assertTrue(context1.isGeneratingSource());
      assertFalse(contextFactory0.equals((Object)contextFactory1));
      assertNotNull(context1);
      
      Class<NativeNumber> class0 = NativeNumber.class;
      // Undeclared exception!
      try { 
        ScriptableObject.getDefaultValue((Scriptable) importerTopLevel0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type class com.google.javascript.rhino.head.NativeNumber
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "Y(J |Yx+_k&gr (PH";
      NativeError nativeError0 = new NativeError();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertNotNull(nativeError0);
      
      // Undeclared exception!
      try { 
        ScriptableObject.defineProperty((Scriptable) null, "msg.ctor.multiple.parms", (Object) "Y(J |Yx+_k&gr (PH", 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test59()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertNotNull(nativeContinuation0);
      
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeContinuation0, false);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertTrue(nativeGenerator0.isExtensible());
      assertTrue(nativeGenerator0.isEmpty());
      assertFalse(nativeGenerator0.isSealed());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertNotNull(nativeGenerator0);
      
      boolean boolean0 = nativeGenerator0.isConst("I");
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(boolean0);
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertTrue(nativeGenerator0.isExtensible());
      assertTrue(nativeGenerator0.isEmpty());
      assertFalse(nativeGenerator0.isSealed());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      
      nativeContinuation0.defineConst("I", nativeGenerator0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertTrue(nativeGenerator0.isExtensible());
      assertFalse(nativeGenerator0.isSealed());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertFalse(nativeGenerator0.isEmpty());
      
      nativeGenerator0.setAttributes(1, 0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertTrue(nativeGenerator0.isExtensible());
      assertFalse(nativeGenerator0.isSealed());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertFalse(nativeGenerator0.isEmpty());
      
      NativeArray nativeArray0 = new NativeArray(13);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals(13L, nativeArray0.getLength());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertFalse(nativeArray0.isSealed());
      assertTrue(nativeArray0.isEmpty());
      assertTrue(nativeArray0.isExtensible());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(13L, nativeArray0.jsGet_length());
      assertNotNull(nativeArray0);
      
      // Undeclared exception!
      try { 
        nativeArray0.getAttributes("OPA.b\"", (Scriptable) nativeGenerator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property OPA.b\" not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertNotNull(nativeError0);
      
      ScriptableObject.putProperty((Scriptable) nativeError0, 8, (Object) nativeError0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("object", nativeError0.getTypeOf());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeError0, false);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("object", nativeError0.getTypeOf());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertTrue(nativeGenerator0.isEmpty());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertFalse(nativeGenerator0.isSealed());
      assertTrue(nativeGenerator0.isExtensible());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertNotNull(nativeGenerator0);
      
      Class<BaseFunction> class0 = BaseFunction.class;
      ScriptableObject.defineClass((Scriptable) nativeError0, class0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("object", nativeError0.getTypeOf());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      Context context0 = Context.enter();
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertNotNull(context0);
      
      String string0 = "iK?!~";
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod((Scriptable) nativeError0, "iK?!~", context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000011 is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertNotNull(nativeError0);
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeError0, (-3158));
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(boolean0);
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      
      String string0 = nativeError0.getClassName();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals("Error", string0);
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertNotNull(nativeJavaTopPackage0);
      
      NativeCall nativeCall0 = new NativeCall();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isEmpty());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertTrue(nativeCall0.isExtensible());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertEquals("object", nativeCall0.getTypeOf());
      assertNotNull(nativeCall0);
      
      boolean boolean0 = Double.isFinite(252.9884982263);
      assertTrue(boolean0);
      
      BaseFunction baseFunction0 = new BaseFunction();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(baseFunction0.isExtensible());
      assertEquals("function", baseFunction0.getTypeOf());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertTrue(baseFunction0.isEmpty());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertEquals("Function", baseFunction0.getClassName());
      assertFalse(baseFunction0.isSealed());
      assertNotNull(baseFunction0);
      
      baseFunction0.defineConst("setImmunePrototyp", nativeJavaTopPackage0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.isEmpty());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertTrue(baseFunction0.isExtensible());
      assertEquals("function", baseFunction0.getTypeOf());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertTrue(baseFunction0.isEmpty());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertEquals("Function", baseFunction0.getClassName());
      assertFalse(baseFunction0.isSealed());
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.enter();
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertNotNull(importerTopLevel0);
      
      Object object0 = importerTopLevel0.get((Object) ")|D");
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("object", nativeError0.getTypeOf());
      assertNotNull(nativeError0);
      
      String string0 = nativeError0.toString();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("object", nativeError0.getTypeOf());
      assertNotNull(string0);
      
      Long long0 = new Long((-1560L));
      assertEquals((-1560L), (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = nativeError0.sameValue((Object) null, "com.google.javascript.rhino.head.NativeError@1");
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(boolean0);
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("object", nativeError0.getTypeOf());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertNotNull(nativeJavaTopPackage0);
      
      Class<Arguments> class0 = Arguments.class;
      NativeJavaClass nativeJavaClass0 = null;
      try {
        nativeJavaClass0 = new NativeJavaClass(nativeJavaTopPackage0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test65()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      contextFactory0.exit();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      Context context0 = contextFactory0.enter();
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertNotNull(importerTopLevel0);
      
      ContextFactory contextFactory1 = ContextFactory.getGlobal();
      assertNotSame(contextFactory1, contextFactory0);
      assertFalse(contextFactory1.isSealed());
      assertFalse(contextFactory1.hasExplicitGlobal());
      assertFalse(contextFactory1.equals((Object)contextFactory0));
      assertNotNull(contextFactory1);
      
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel(context0, true);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals("object", importerTopLevel1.getTypeOf());
      assertFalse(importerTopLevel1.isSealed());
      assertTrue(importerTopLevel1.isExtensible());
      assertEquals("global", importerTopLevel1.getClassName());
      assertFalse(importerTopLevel1.avoidObjectDetection());
      assertFalse(importerTopLevel1.isEmpty());
      assertTrue(importerTopLevel1.hasPrototypeMap());
      assertFalse(contextFactory0.equals((Object)contextFactory1));
      assertFalse(importerTopLevel1.equals((Object)importerTopLevel0));
      assertNotNull(importerTopLevel1);
      
      boolean boolean0 = ScriptableObject.hasProperty((Scriptable) importerTopLevel1, "language version");
      assertNotSame(contextFactory0, contextFactory1);
      assertNotSame(importerTopLevel1, importerTopLevel0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(boolean0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals("object", importerTopLevel1.getTypeOf());
      assertFalse(importerTopLevel1.isSealed());
      assertTrue(importerTopLevel1.isExtensible());
      assertEquals("global", importerTopLevel1.getClassName());
      assertFalse(importerTopLevel1.avoidObjectDetection());
      assertFalse(importerTopLevel1.isEmpty());
      assertTrue(importerTopLevel1.hasPrototypeMap());
      assertFalse(contextFactory0.equals((Object)contextFactory1));
      assertFalse(importerTopLevel1.equals((Object)importerTopLevel0));
      
      // Undeclared exception!
      try { 
        importerTopLevel1.getAttributes("error reporter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property error reporter not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(0.2968240657672889);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.isSealed());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isExtensible());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertTrue(nativeNumber0.isEmpty());
      assertNotNull(nativeNumber0);
      
      nativeNumber0.delete("msg.zero.arg.ctor");
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.isSealed());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isExtensible());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertTrue(nativeNumber0.isEmpty());
      
      NativeError nativeError0 = new NativeError();
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertNotNull(nativeError0);
      
      String string0 = nativeError0.toString();
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertNotNull(string0);
      
      Long long0 = new Long((-1560L));
      assertEquals((-1560L), (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = nativeError0.sameValue((Object) null, "com.google.javascript.rhino.head.NativeError@2");
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(boolean0);
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.enter();
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertNotNull(importerTopLevel0);
      
      ImporterTopLevel importerTopLevel1 = (ImporterTopLevel)context0.initStandardObjects((ScriptableObject) importerTopLevel0);
      assertSame(importerTopLevel0, importerTopLevel1);
      assertSame(importerTopLevel1, importerTopLevel0);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel1.getTypeOf());
      assertFalse(importerTopLevel1.isSealed());
      assertTrue(importerTopLevel1.isExtensible());
      assertFalse(importerTopLevel1.avoidObjectDetection());
      assertTrue(importerTopLevel1.hasPrototypeMap());
      assertFalse(importerTopLevel1.isEmpty());
      assertEquals("global", importerTopLevel1.getClassName());
      assertNotNull(importerTopLevel1);
      
      ImporterTopLevel importerTopLevel2 = new ImporterTopLevel(context0);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(importerTopLevel2.isEmpty());
      assertTrue(importerTopLevel2.hasPrototypeMap());
      assertFalse(importerTopLevel2.avoidObjectDetection());
      assertEquals("global", importerTopLevel2.getClassName());
      assertFalse(importerTopLevel2.isSealed());
      assertEquals("object", importerTopLevel2.getTypeOf());
      assertTrue(importerTopLevel2.isExtensible());
      assertFalse(importerTopLevel2.equals((Object)importerTopLevel1));
      assertFalse(importerTopLevel2.equals((Object)importerTopLevel0));
      assertNotNull(importerTopLevel2);
      
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod(context0, (Scriptable) importerTopLevel0, "jsGet_", context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000981 is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test68()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertNotNull(nativeError0);
      
      nativeError0.sealObject();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeError0, 13);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(boolean0);
      assertTrue(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      
      // Undeclared exception!
      try { 
        nativeError0.getAttributes((-54));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property -54 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.enter();
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertNotNull(importerTopLevel0);
      
      NativeError nativeError0 = new NativeError();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertNotNull(nativeError0);
      
      ContextFactory contextFactory1 = ContextFactory.getGlobal();
      assertNotSame(contextFactory1, contextFactory0);
      assertFalse(contextFactory1.isSealed());
      assertFalse(contextFactory1.hasExplicitGlobal());
      assertFalse(contextFactory1.equals((Object)contextFactory0));
      assertNotNull(contextFactory1);
      
      Context context1 = Context.enter(context0);
      assertNotSame(contextFactory0, contextFactory1);
      assertSame(context0, context1);
      assertSame(context1, context0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertFalse(context1.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context1.getOptimizationLevel());
      assertFalse(context1.isSealed());
      assertEquals(0, context1.getLanguageVersion());
      assertFalse(context1.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertTrue(context1.isGeneratingSource());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertFalse(context1.isGeneratingDebugChanged());
      assertFalse(contextFactory0.equals((Object)contextFactory1));
      assertNotNull(context1);
      
      nativeError0.defineOwnProperties(context1, importerTopLevel0);
      assertNotSame(contextFactory0, contextFactory1);
      assertSame(context0, context1);
      assertSame(context1, context0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertFalse(context1.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertEquals(0, context1.getOptimizationLevel());
      assertFalse(context1.isSealed());
      assertEquals(0, context1.getLanguageVersion());
      assertFalse(context1.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertTrue(context1.isGeneratingSource());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertFalse(context1.isGeneratingDebugChanged());
      assertFalse(contextFactory0.equals((Object)contextFactory1));
      
      ContextFactory contextFactory2 = new ContextFactory();
      assertFalse(contextFactory2.isSealed());
      assertFalse(contextFactory2.hasExplicitGlobal());
      assertFalse(contextFactory2.equals((Object)contextFactory1));
      assertFalse(contextFactory2.equals((Object)contextFactory0));
      assertNotNull(contextFactory2);
      
      Object object0 = nativeError0.get(100, (Scriptable) importerTopLevel0);
      assertNotSame(contextFactory0, contextFactory1);
      assertNotSame(contextFactory0, contextFactory2);
      assertSame(context0, context1);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertFalse(contextFactory0.equals((Object)contextFactory1));
      assertFalse(contextFactory0.equals((Object)contextFactory2));
      assertNotNull(object0);
      
      NativeArray nativeArray0 = new NativeArray(150);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(150L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.isSealed());
      assertTrue(nativeArray0.isEmpty());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(150L, nativeArray0.getLength());
      assertTrue(nativeArray0.isExtensible());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertNotNull(nativeArray0);
      
      nativeArray0.checkPropertyChange("error reporter", importerTopLevel0, importerTopLevel0);
      assertNotSame(contextFactory0, contextFactory1);
      assertNotSame(contextFactory0, contextFactory2);
      assertSame(context0, context1);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals(150L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.isSealed());
      assertTrue(nativeArray0.isEmpty());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(150L, nativeArray0.getLength());
      assertTrue(nativeArray0.isExtensible());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertFalse(contextFactory0.equals((Object)contextFactory1));
      assertFalse(contextFactory0.equals((Object)contextFactory2));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertNotNull(nativeError0);
      
      NativeError nativeError1 = new NativeError();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeError1.isSealed());
      assertEquals("object", nativeError1.getTypeOf());
      assertFalse(nativeError1.hasPrototypeMap());
      assertFalse(nativeError1.avoidObjectDetection());
      assertTrue(nativeError1.isExtensible());
      assertEquals("Error", nativeError1.getClassName());
      assertTrue(nativeError1.isEmpty());
      assertFalse(nativeError1.equals((Object)nativeError0));
      assertNotNull(nativeError1);
      
      Object object0 = nativeError0.get(2, (Scriptable) nativeError1);
      assertNotSame(nativeError0, nativeError1);
      assertNotSame(nativeError1, nativeError0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError1.isSealed());
      assertEquals("object", nativeError1.getTypeOf());
      assertFalse(nativeError1.hasPrototypeMap());
      assertFalse(nativeError1.avoidObjectDetection());
      assertTrue(nativeError1.isExtensible());
      assertEquals("Error", nativeError1.getClassName());
      assertTrue(nativeError1.isEmpty());
      assertFalse(nativeError0.equals((Object)nativeError1));
      assertFalse(nativeError1.equals((Object)nativeError0));
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(baseFunction0.isSealed());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertTrue(baseFunction0.isEmpty());
      assertEquals("function", baseFunction0.getTypeOf());
      assertEquals("Function", baseFunction0.getClassName());
      assertTrue(baseFunction0.isExtensible());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertNotNull(baseFunction0);
      
      NativeWith nativeWith0 = new NativeWith(baseFunction0, baseFunction0);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(baseFunction0.isSealed());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertTrue(baseFunction0.isEmpty());
      assertEquals("function", baseFunction0.getTypeOf());
      assertEquals("Function", baseFunction0.getClassName());
      assertTrue(baseFunction0.isExtensible());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertEquals("With", nativeWith0.getClassName());
      assertNotNull(nativeWith0);
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.enter();
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertNotNull(context0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "language version";
      Class<NativeJavaPackage> class0 = NativeJavaPackage.class;
      // Undeclared exception!
      try { 
        baseFunction0.defineFunctionProperties(stringArray0, class0, 110);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"language version\" not found in \"com.google.javascript.rhino.head.NativeJavaPackage\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(4503599627370495L);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4503599627370495L, nativeArray0.getLength());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isEmpty());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(4503599627370495L, nativeArray0.jsGet_length());
      assertNotNull(nativeArray0);
      
      Stream stream0 = nativeArray0.parallelStream();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4503599627370495L, nativeArray0.getLength());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isEmpty());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(4503599627370495L, nativeArray0.jsGet_length());
      assertNotNull(stream0);
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeArray0, 8);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(boolean0);
      assertEquals(4503599627370495L, nativeArray0.getLength());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isEmpty());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(4503599627370495L, nativeArray0.jsGet_length());
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      NativeError nativeError0 = new NativeError();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertNotNull(nativeError0);
      
      Class<ImporterTopLevel> class0 = ImporterTopLevel.class;
      ImporterTopLevel importerTopLevel0 = ScriptableObject.getTypedProperty((Scriptable) nativeArray0, 2, class0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4503599627370495L, nativeArray0.getLength());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isEmpty());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(4503599627370495L, nativeArray0.jsGet_length());
      assertNull(importerTopLevel0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test73()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      Context context0 = new Context();
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertNotNull(importerTopLevel0);
      
      Class<NativeContinuation> class0 = NativeContinuation.class;
      NativeContinuation nativeContinuation0 = ScriptableObject.getTypedProperty((Scriptable) importerTopLevel0, "language version", class0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertNull(nativeContinuation0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertNotNull(nativeContinuation0);
      
      NativeError nativeError0 = new NativeError();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertNotNull(nativeError0);
      
      Synchronizer synchronizer0 = new Synchronizer(nativeError0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertNotNull(synchronizer0);
      
      Object object0 = nativeError0.get(1, (Scriptable) synchronizer0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isSealed());
      assertNotNull(object0);
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.enterContext();
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(context0);
      
      Long long0 = new Long(301L);
      assertEquals(301L, (long)long0);
      assertNotNull(long0);
      
      // Undeclared exception!
      try { 
        NativeJavaArray.wrap((Scriptable) synchronizer0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test75()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertNotNull(nativeError0);
      
      nativeError0.sealObject();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isSealed());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeError0, 13);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(boolean0);
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isSealed());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      
      Object[] objectArray0 = nativeError0.getIds();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isSealed());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      // Undeclared exception!
      try { 
        NativeJSON.init(nativeError0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot modify a property of a sealed object: JSON.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber((-0.64734149365945));
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals("Number", nativeNumber0.getClassName());
      assertTrue(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertFalse(nativeNumber0.isSealed());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertTrue(nativeNumber0.isExtensible());
      assertNotNull(nativeNumber0);
      
      IdFunctionObject idFunctionObject0 = null;
      // Undeclared exception!
      try { 
        nativeNumber0.setGetterOrSetter("jsFunction_setImmunePrototypeProperty", 1368933789, (Callable) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // jsFunction_setImmunePrototypeProperty
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test77()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      Context context0 = Context.getContext();
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertNotNull(importerTopLevel0);
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) importerTopLevel0, "language version");
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(boolean0);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      
      NativeError nativeError0 = new NativeError();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertNotNull(nativeError0);
      
      ImporterTopLevel importerTopLevel1 = (ImporterTopLevel)ScriptableObject.ensureScriptableObject(importerTopLevel0);
      assertSame(importerTopLevel0, importerTopLevel1);
      assertSame(importerTopLevel1, importerTopLevel0);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(importerTopLevel1.isExtensible());
      assertTrue(importerTopLevel1.hasPrototypeMap());
      assertFalse(importerTopLevel1.isEmpty());
      assertFalse(importerTopLevel1.avoidObjectDetection());
      assertEquals("global", importerTopLevel1.getClassName());
      assertFalse(importerTopLevel1.isSealed());
      assertEquals("object", importerTopLevel1.getTypeOf());
      assertNotNull(importerTopLevel1);
      
      boolean boolean1 = importerTopLevel0.isEmpty();
      assertSame(importerTopLevel0, importerTopLevel1);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(boolean1);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      Context context0 = new Context(contextFactory0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(context0);
      
      NativeNumber nativeNumber0 = new NativeNumber(0.0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isExtensible());
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.isSealed());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertTrue(nativeNumber0.isEmpty());
      assertNotNull(nativeNumber0);
      
      nativeNumber0.delete("WdMf7V3Va[nCjxM");
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertTrue(nativeNumber0.isExtensible());
      assertEquals("Number", nativeNumber0.getClassName());
      assertFalse(nativeNumber0.isSealed());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertTrue(nativeNumber0.isEmpty());
      
      NativeError nativeError0 = new NativeError();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertNotNull(nativeError0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertNotNull(importerTopLevel0);
      
      Short short0 = new Short((short)49);
      assertEquals((short)49, (short)short0);
      assertNotNull(short0);
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = ScriptableObject.isFalse((Object) null);
      assertTrue(boolean0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertNotNull(nativeIterator_StopIteration0);
      
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(importerTopLevel1.hasPrototypeMap());
      assertEquals("object", importerTopLevel1.getTypeOf());
      assertFalse(importerTopLevel1.isSealed());
      assertTrue(importerTopLevel1.isExtensible());
      assertFalse(importerTopLevel1.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel1.getClassName());
      assertTrue(importerTopLevel1.isEmpty());
      assertFalse(importerTopLevel1.equals((Object)importerTopLevel0));
      assertNotNull(importerTopLevel1);
      
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      assertEquals("JavaClass", nativeJavaClass0.getClassName());
      assertNotNull(nativeJavaClass0);
      
      Object object0 = nativeIterator_StopIteration0.remove((Object) nativeJavaClass0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("JavaClass", nativeJavaClass0.getClassName());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test79()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      Context context0 = new Context(contextFactory0);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertNotNull(importerTopLevel0);
      
      int int0 = importerTopLevel0.size();
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(57, int0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      
      NativeJSON.init(importerTopLevel0, true);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test80()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      Context context0 = Context.getCurrentContext();
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertNotNull(importerTopLevel0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertNotNull(nativeJavaTopPackage0);
      
      Object object0 = nativeJavaTopPackage0.getGetterOrSetter("error reporter", 0, false);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertNull(object0);
      
      Class<NativeContinuation> class0 = NativeContinuation.class;
      // Undeclared exception!
      try { 
        ScriptableObject.getTypedProperty((Scriptable) nativeJavaTopPackage0, "JV`", class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test81()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(baseFunction0.isEmpty());
      assertEquals("function", baseFunction0.getTypeOf());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertTrue(baseFunction0.isExtensible());
      assertEquals("Function", baseFunction0.getClassName());
      assertFalse(baseFunction0.isSealed());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertNotNull(baseFunction0);
      
      Class<NativeJavaClass> class0 = NativeJavaClass.class;
      // Undeclared exception!
      try { 
        ScriptableObject.buildClassCtor((Scriptable) baseFunction0, class0, true, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't define constructor or class com.google.javascript.rhino.head.NativeJavaObject since more than one constructor has multiple parameters.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test82()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertNotNull(nativeError0);
      
      ScriptableObject.putProperty((Scriptable) nativeError0, 8, (Object) nativeError0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.isEmpty());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      
      NativeError nativeError1 = new NativeError();
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeError1.avoidObjectDetection());
      assertTrue(nativeError1.isExtensible());
      assertEquals("Error", nativeError1.getClassName());
      assertTrue(nativeError1.isEmpty());
      assertEquals("object", nativeError1.getTypeOf());
      assertFalse(nativeError1.hasPrototypeMap());
      assertFalse(nativeError1.isSealed());
      assertFalse(nativeError1.equals((Object)nativeError0));
      assertNotNull(nativeError1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) nativeError0;
      objectArray0[1] = (Object) nativeError0;
      objectArray0[2] = (Object) nativeError0;
      objectArray0[3] = (Object) nativeError0;
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeArray0.isEmpty());
      assertEquals(4L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.isSealed());
      assertEquals(4L, nativeArray0.getLength());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertTrue(nativeArray0.isExtensible());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals("object", nativeArray0.getTypeOf());
      assertNotNull(nativeArray0);
      assertEquals(4, objectArray0.length);
      
      boolean boolean0 = ScriptableObject.isFalse(objectArray0[3]);
      assertFalse(boolean0);
      assertEquals(4, objectArray0.length);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertNotNull(nativeIterator_StopIteration0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
      assertNotNull(importerTopLevel0);
      
      Object object0 = nativeIterator_StopIteration0.remove((Object) importerTopLevel0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
      assertNull(object0);
      
      Synchronizer synchronizer0 = new Synchronizer(importerTopLevel0, (Object) null);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
      assertNotNull(synchronizer0);
      
      synchronizer0.delete("((");
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
      
      int int0 = nativeArray0.indexOf(nativeIterator_StopIteration0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals((-1), int0);
      assertTrue(nativeArray0.isEmpty());
      assertEquals(4L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.isSealed());
      assertEquals(4L, nativeArray0.getLength());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertTrue(nativeArray0.isExtensible());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.enter();
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertNotNull(importerTopLevel0);
      
      NativeError nativeError0 = new NativeError();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertNotNull(nativeError0);
      
      Object object0 = nativeError0.get(170, (Scriptable) importerTopLevel0);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
      assertNotNull(object0);
      
      nativeError0.defineOwnProperty(context0, "language version", nativeError0);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.isEmpty());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.isSealed());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.enter();
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertNotNull(importerTopLevel0);
      
      ContextFactory contextFactory1 = ContextFactory.getGlobal();
      assertNotSame(contextFactory1, contextFactory0);
      assertFalse(contextFactory1.isSealed());
      assertFalse(contextFactory1.hasExplicitGlobal());
      assertFalse(contextFactory1.equals((Object)contextFactory0));
      assertNotNull(contextFactory1);
      
      Object object0 = importerTopLevel0.get((Object) contextFactory0);
      assertNotSame(contextFactory0, contextFactory1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(contextFactory0.equals((Object)contextFactory1));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test85()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      //  // Unstable assertion: assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      //  // Unstable assertion: assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      //  // Unstable assertion: assertFalse(nativeJavaTopPackage0.isSealed());
      //  // Unstable assertion: assertTrue(nativeJavaTopPackage0.isEmpty());
      //  // Unstable assertion: assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      //  // Unstable assertion: assertTrue(nativeJavaTopPackage0.isExtensible());
      //  // Unstable assertion: assertNotNull(nativeJavaTopPackage0);
      
      NativeError nativeError0 = new NativeError();
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertFalse(nativeError0.avoidObjectDetection());
      //  // Unstable assertion: assertEquals("Error", nativeError0.getClassName());
      //  // Unstable assertion: assertTrue(nativeError0.isEmpty());
      //  // Unstable assertion: assertTrue(nativeError0.isExtensible());
      //  // Unstable assertion: assertEquals("object", nativeError0.getTypeOf());
      //  // Unstable assertion: assertFalse(nativeError0.isSealed());
      //  // Unstable assertion: assertFalse(nativeError0.hasPrototypeMap());
      //  // Unstable assertion: assertNotNull(nativeError0);
      
      String string0 = "Z-*Q`HY3gg9t,3C_Qg&";
      // Undeclared exception!
      try { 
        ScriptableObject.redefineProperty(nativeJavaTopPackage0, "Z-*Q`HY3gg9t,3C_Qg&", true);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // TypeError: redeclaration of var Z-*Q`HY3gg9t,3C_Qg&.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.enter();
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertNotNull(importerTopLevel0);
      
      NativeError nativeError0 = new NativeError();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.avoidObjectDetection());
      assertNotNull(nativeError0);
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertNotNull(nativeContinuation0);
      
      NativeError nativeError1 = new NativeError();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(nativeError1.isExtensible());
      assertFalse(nativeError1.isSealed());
      assertFalse(nativeError1.avoidObjectDetection());
      assertTrue(nativeError1.isEmpty());
      assertEquals("Error", nativeError1.getClassName());
      assertEquals("object", nativeError1.getTypeOf());
      assertFalse(nativeError1.hasPrototypeMap());
      assertFalse(nativeError1.equals((Object)nativeError0));
      assertNotNull(nativeError1);
      
      Object object0 = nativeError0.get(115, (Scriptable) importerTopLevel0);
      assertNotSame(nativeError0, nativeError1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.equals((Object)nativeError1));
      assertNotNull(object0);
      
      BoundFunction boundFunction0 = new BoundFunction(context0, nativeError0, nativeContinuation0, nativeContinuation0, context0.emptyArgs);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertFalse(boundFunction0.isEmpty());
      assertEquals("function", boundFunction0.getTypeOf());
      assertFalse(boundFunction0.avoidObjectDetection());
      assertEquals("Function", boundFunction0.getClassName());
      assertFalse(boundFunction0.isSealed());
      assertEquals(0, boundFunction0.getLength());
      assertFalse(boundFunction0.hasPrototypeMap());
      assertTrue(boundFunction0.isExtensible());
      assertFalse(nativeError0.equals((Object)nativeError1));
      assertNotNull(boundFunction0);
      
      // Undeclared exception!
      try { 
        nativeError0.defineOwnProperty(context0, boundFunction0, nativeError1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.hasPrototypeMap());
      assertNotNull(nativeError0);
      
      NativeError nativeError1 = new NativeError();
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertTrue(nativeError1.isExtensible());
      assertEquals("Error", nativeError1.getClassName());
      assertTrue(nativeError1.isEmpty());
      assertFalse(nativeError1.isSealed());
      assertEquals("object", nativeError1.getTypeOf());
      assertFalse(nativeError1.hasPrototypeMap());
      assertFalse(nativeError1.avoidObjectDetection());
      assertFalse(nativeError1.equals((Object)nativeError0));
      assertNotNull(nativeError1);
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeError1, "'T7%zKZ");
      assertNotSame(nativeError1, nativeError0);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertTrue(boolean0);
      assertTrue(nativeError1.isExtensible());
      assertEquals("Error", nativeError1.getClassName());
      assertTrue(nativeError1.isEmpty());
      assertFalse(nativeError1.isSealed());
      assertEquals("object", nativeError1.getTypeOf());
      assertFalse(nativeError1.hasPrototypeMap());
      assertFalse(nativeError1.avoidObjectDetection());
      assertFalse(nativeError1.equals((Object)nativeError0));
      
      nativeError1.setPrototype(nativeError0);
      assertNotSame(nativeError0, nativeError1);
      assertNotSame(nativeError1, nativeError0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError1.isExtensible());
      assertEquals("Error", nativeError1.getClassName());
      assertTrue(nativeError1.isEmpty());
      assertFalse(nativeError1.isSealed());
      assertEquals("object", nativeError1.getTypeOf());
      assertFalse(nativeError1.hasPrototypeMap());
      assertFalse(nativeError1.avoidObjectDetection());
      assertFalse(nativeError0.equals((Object)nativeError1));
      assertFalse(nativeError1.equals((Object)nativeError0));
      
      Class<NativeArray> class0 = NativeArray.class;
      Class<InterpretedFunction> class1 = InterpretedFunction.class;
      NativeJavaClass nativeJavaClass0 = null;
      try {
        nativeJavaClass0 = new NativeJavaClass(nativeError1, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertNotNull(importerTopLevel0);
      
      NativeError nativeError0 = new NativeError();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.isSealed());
      assertNotNull(nativeError0);
      
      int int0 = 1420;
      Object object0 = nativeError0.defaultGet("t9$.yU;9");
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.isSealed());
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        nativeError0.defineProperty("t9$.yU;9", (Object) "t9$.yU;9", (Method) null, (Method) null, (-1229));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1229
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test89()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertEquals("Error", nativeError0.getClassName());
      //  // Unstable assertion: assertFalse(nativeError0.isSealed());
      //  // Unstable assertion: assertFalse(nativeError0.avoidObjectDetection());
      //  // Unstable assertion: assertTrue(nativeError0.isExtensible());
      //  // Unstable assertion: assertEquals("object", nativeError0.getTypeOf());
      //  // Unstable assertion: assertFalse(nativeError0.hasPrototypeMap());
      //  // Unstable assertion: assertTrue(nativeError0.isEmpty());
      //  // Unstable assertion: assertNotNull(nativeError0);
      
      nativeError0.sealObject();
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertEquals("Error", nativeError0.getClassName());
      //  // Unstable assertion: assertFalse(nativeError0.avoidObjectDetection());
      //  // Unstable assertion: assertTrue(nativeError0.isSealed());
      //  // Unstable assertion: assertTrue(nativeError0.isExtensible());
      //  // Unstable assertion: assertEquals("object", nativeError0.getTypeOf());
      //  // Unstable assertion: assertFalse(nativeError0.hasPrototypeMap());
      //  // Unstable assertion: assertTrue(nativeError0.isEmpty());
      
      boolean boolean0 = ScriptableObject.deleteProperty((Scriptable) nativeError0, 13);
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertEquals("Error", nativeError0.getClassName());
      //  // Unstable assertion: assertFalse(nativeError0.avoidObjectDetection());
      //  // Unstable assertion: assertTrue(nativeError0.isSealed());
      //  // Unstable assertion: assertTrue(nativeError0.isExtensible());
      //  // Unstable assertion: assertEquals("object", nativeError0.getTypeOf());
      //  // Unstable assertion: assertFalse(nativeError0.hasPrototypeMap());
      //  // Unstable assertion: assertTrue(nativeError0.isEmpty());
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertTrue(nativeIterator_StopIteration0.isExtensible());
      //  // Unstable assertion: assertTrue(nativeIterator_StopIteration0.isEmpty());
      //  // Unstable assertion: assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      //  // Unstable assertion: assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      //  // Unstable assertion: assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      //  // Unstable assertion: assertFalse(nativeIterator_StopIteration0.isSealed());
      //  // Unstable assertion: assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      //  // Unstable assertion: assertNotNull(nativeIterator_StopIteration0);
      
      // Undeclared exception!
      try { 
        nativeIterator_StopIteration0.put(13, (Scriptable) nativeError0, (Object) nativeError0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Cannot modify a property of a sealed object: 13.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test90()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertEquals("Error", nativeError0.getClassName());
      assertNotNull(nativeError0);
      
      ScriptableObject.putProperty((Scriptable) nativeError0, 8, (Object) nativeError0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.isEmpty());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
      assertNotNull(importerTopLevel0);
      
      IdFunctionObject idFunctionObject0 = nativeError0.exportAsJSClass(56, importerTopLevel0, false);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isExtensible());
      assertTrue(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isEmpty());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(idFunctionObject0.isEmpty());
      assertFalse(idFunctionObject0.isSealed());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals(1, idFunctionObject0.methodId());
      assertEquals(1, idFunctionObject0.getLength());
      assertEquals(1, idFunctionObject0.getArity());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertEquals("Error", idFunctionObject0.getFunctionName());
      assertNotNull(idFunctionObject0);
      
      NativeError nativeError1 = (NativeError)nativeError0.get(8, (Scriptable) importerTopLevel0);
      assertSame(nativeError0, nativeError1);
      assertSame(nativeError1, nativeError0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.isSealed());
      assertTrue(nativeError0.isExtensible());
      assertTrue(nativeError0.hasPrototypeMap());
      assertFalse(nativeError0.isEmpty());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(nativeError1.isExtensible());
      assertFalse(nativeError1.avoidObjectDetection());
      assertTrue(nativeError1.hasPrototypeMap());
      assertFalse(nativeError1.isEmpty());
      assertFalse(nativeError1.isSealed());
      assertEquals("Error", nativeError1.getClassName());
      assertEquals("object", nativeError1.getTypeOf());
      assertNotNull(nativeError1);
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.enterContext();
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertNotNull(context0);
      
      BoundFunction boundFunction0 = null;
      try {
        boundFunction0 = new BoundFunction(context0, importerTopLevel0, idFunctionObject0, importerTopLevel0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.BoundFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.enter();
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.isSealed());
      assertNotNull(importerTopLevel0);
      
      Class<NativeString> class0 = NativeString.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) importerTopLevel0, class0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot load class \"com.google.javascript.rhino.head.NativeString\" which has no zero-parameter constructor.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.enter();
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertFalse(context0.generateObserverCount);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertFalse(context0.generateObserverCount);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertNotNull(importerTopLevel0);
      
      ContextFactory contextFactory1 = ContextFactory.getGlobal();
      assertNotSame(contextFactory1, contextFactory0);
      assertFalse(contextFactory1.isSealed());
      assertFalse(contextFactory1.hasExplicitGlobal());
      assertFalse(contextFactory1.equals((Object)contextFactory0));
      assertNotNull(contextFactory1);
      
      importerTopLevel0.delete(13);
      assertNotSame(contextFactory0, contextFactory1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertFalse(context0.generateObserverCount);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(contextFactory0.equals((Object)contextFactory1));
      
      Class<ImporterTopLevel> class0 = ImporterTopLevel.class;
      ImporterTopLevel importerTopLevel1 = ScriptableObject.getTypedProperty((Scriptable) importerTopLevel0, 1368933789, class0);
      assertNotSame(contextFactory0, contextFactory1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertFalse(context0.generateObserverCount);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(contextFactory0.equals((Object)contextFactory1));
      assertNull(importerTopLevel1);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertNotNull(nativeIterator_StopIteration0);
      
      NativeNumber nativeNumber0 = new NativeNumber(1322.854610397736);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertTrue(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertFalse(nativeNumber0.isSealed());
      assertTrue(nativeNumber0.isExtensible());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("Number", nativeNumber0.getClassName());
      assertNotNull(nativeNumber0);
      
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(importerTopLevel0, nativeNumber0, 384, 2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertFalse(context0.generateObserverCount);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertFalse(nativeNumber0.isSealed());
      assertTrue(nativeNumber0.isExtensible());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("Number", nativeNumber0.getClassName());
      assertEquals(2, idFunctionObject0.getArity());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals(384, idFunctionObject0.methodId());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals("", idFunctionObject0.getFunctionName());
      assertEquals(2, idFunctionObject0.getLength());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertTrue(idFunctionObject0.isEmpty());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertFalse(contextFactory0.equals((Object)contextFactory1));
      assertNotNull(idFunctionObject0);
      
      nativeIterator_StopIteration0.fillConstructorProperties(idFunctionObject0);
      assertNotSame(contextFactory0, contextFactory1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertFalse(context0.generateObserverCount);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertTrue(nativeNumber0.isEmpty());
      assertFalse(nativeNumber0.avoidObjectDetection());
      assertFalse(nativeNumber0.isSealed());
      assertTrue(nativeNumber0.isExtensible());
      assertEquals("object", nativeNumber0.getTypeOf());
      assertFalse(nativeNumber0.hasPrototypeMap());
      assertEquals("Number", nativeNumber0.getClassName());
      assertEquals(2, idFunctionObject0.getArity());
      assertTrue(idFunctionObject0.isExtensible());
      assertEquals(384, idFunctionObject0.methodId());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals("", idFunctionObject0.getFunctionName());
      assertEquals(2, idFunctionObject0.getLength());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertFalse(idFunctionObject0.isEmpty());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertFalse(contextFactory0.equals((Object)contextFactory1));
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      ContextFactory.getGlobal();
      Long long0 = new Long((-257L));
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel();
      Short short0 = new Short((short)7);
      NativeError nativeError0 = new NativeError();
      nativeError0.hasInstance(importerTopLevel0);
      nativeError0.sameValue(long0, short0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeJavaArray nativeJavaArray0 = null;
      try {
        nativeJavaArray0 = new NativeJavaArray(nativeContinuation0, nativeError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeContinuation0, false);
      nativeGenerator0.isConst("I");
      nativeGenerator0.hasInstance(nativeContinuation0);
      nativeContinuation0.defineConst("I", nativeGenerator0);
      nativeGenerator0.setAttributes(1, 0);
      assertFalse(nativeGenerator0.isSealed());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeContinuation0, false);
      nativeGenerator0.isConst("I");
      nativeGenerator0.hasInstance(nativeContinuation0);
      Double.isFinite(1601.0);
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.String;
      NativeJavaArray nativeJavaArray0 = null;
      try {
        nativeJavaArray0 = new NativeJavaArray(nativeContinuation0, "I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeError nativeError1 = new NativeError();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      nativeError0.get(2, (Scriptable) nativeError1);
      Long long0 = new Long(358L);
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(nativeError0, contextFactory0, 3305);
      // Undeclared exception!
      try { 
        NativeJavaArray.wrap((Scriptable) scriptableObject0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 06:33:11 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.Delegator;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeJSON;
import com.google.javascript.rhino.head.NativeJavaArray;
import com.google.javascript.rhino.head.NativeWith;
import com.google.javascript.rhino.head.Script;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.TopLevel;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionObject_ESTest extends FunctionObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<NativeJSON> class0 = NativeJSON.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      assertNotNull(method0);
      
      NativeError nativeError0 = new NativeError();
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, nativeError0);
      boolean boolean0 = functionObject0.isVarArgsConstructor();
      assertEquals(4, methodArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      NativeError nativeError0 = new NativeError();
      Context context0 = new Context();
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, nativeError0);
      // Undeclared exception!
      try { 
        functionObject0.createObject(context0, nativeError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped java.lang.InstantiationException: com.google.javascript.rhino.head.NativeJavaArray
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<NativeCall> class0 = NativeCall.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      NativeError nativeError0 = new NativeError();
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, nativeError0);
      FunctionObject functionObject1 = new FunctionObject("getClassName", method0, functionObject0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      // Undeclared exception!
      try { 
        functionObject1.call(context0, nativeError0, nativeError0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"getClassName\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<NativeCall> class0 = NativeCall.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      NativeError nativeError0 = new NativeError();
      Context context0 = Context.enter();
      FunctionObject functionObject0 = new FunctionObject("language version", method0, nativeError0);
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeError0, nativeError0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"language version\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      NativeError nativeError0 = new NativeError();
      Context context0 = new Context();
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, nativeError0);
      NativeWith nativeWith0 = new NativeWith(functionObject0, functionObject0);
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeError0, nativeWith0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"getClassName\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test05()  throws Throwable  {
      Class<NativeError> class0 = NativeError.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeError nativeError0 = new NativeError();
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, nativeError0);
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeError0, nativeError0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<NativeError> class0 = NativeError.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      assertNotNull(method0);
      
      NativeError nativeError0 = new NativeError();
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, nativeError0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      functionObject0.call(context0, importerTopLevel0, importerTopLevel0, methodArray0);
      assertEquals(6, methodArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test07()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      Delegator delegator0 = new Delegator();
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) null, (Object) delegator0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't convert to type \"java.lang.reflect.Method\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      // Undeclared exception!
      try { 
        FunctionObject.findSingleMethod(methodArray0, "has");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"has\" occurs multiple times in class \"com.google.javascript.rhino.head.NativeJavaArray\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Method[] methodArray0 = new Method[10];
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "c-R!gx&Xq]:TvI>~");
      assertNull(method0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test10()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      assertNotNull(method0);
      
      NativeError nativeError0 = new NativeError();
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, nativeError0);
      functionObject0.getMethodOrConstructor();
      assertEquals(0, functionObject0.getLength());
      assertEquals(13, methodArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test11()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      assertNotNull(method0);
      
      NativeError nativeError0 = new NativeError();
      FunctionObject functionObject0 = new FunctionObject((String) null, method0, nativeError0);
      String string0 = functionObject0.getFunctionName();
      assertNotNull(string0);
      assertEquals(13, methodArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test12()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      assertNotNull(method0);
      
      NativeError nativeError0 = new NativeError();
      FunctionObject functionObject0 = new FunctionObject("gc", method0, nativeError0);
      functionObject0.getFunctionName();
      assertEquals(13, methodArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test13()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Context context0 = Context.getContext();
      Class<Double> class0 = Double.TYPE;
      Double double0 = new Double(160);
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeCall0, (Object) double0, (Class<?>) class0);
      assertEquals(160.0, object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Class<Boolean> class0 = Boolean.class;
      Context context0 = Context.enter();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeCall0, (Object) null, (Class<?>) class0);
      assertNotNull(object0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test15()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      Delegator delegator0 = new Delegator();
      NativeCall nativeCall0 = new NativeCall();
      Class<Boolean> class0 = Boolean.class;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeCall0, (Object) delegator0, (Class<?>) class0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      Delegator delegator0 = new Delegator();
      Class<String> class0 = String.class;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) delegator0, (Object) "com.google.javascript.rhino.head.Context@0000000002", (Class<?>) class0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeIterator_StopIteration0, (Object) context0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Context context0 = new Context();
      Class<Object> class0 = Object.class;
      Context context1 = (Context)FunctionObject.convertArg(context0, (Scriptable) nativeCall0, (Object) context0, (Class<?>) class0);
      assertFalse(context1.generateObserverCount);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<TopLevel> class0 = TopLevel.class;
      NativeCall nativeCall0 = new NativeCall();
      Context context0 = new Context();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeCall0, (Object) nativeCall0, (Class<?>) class0);
      assertSame(object0, nativeCall0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeCall nativeCall0 = new NativeCall();
      Class<Boolean> class0 = Boolean.class;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeCall0, (Object) false, (Class<?>) class0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      Delegator delegator0 = new Delegator();
      Class<String> class0 = String.class;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) delegator0, (Object) context0, (Class<?>) class0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      NativeCall nativeCall0 = new NativeCall();
      Class<Integer> class0 = Integer.TYPE;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeCall0, (Object) nativeCall0.DONTENUM, (Class<?>) class0);
      assertEquals(2, object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      Class<Integer> class0 = Integer.class;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) null, (Object) context0, (Class<?>) class0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test25()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      Class<NativeContinuation> class0 = NativeContinuation.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "call");
      FunctionObject functionObject0 = null;
      try {
        functionObject0 = new FunctionObject("", method0, baseFunction0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Unsupported parameter type \"com.google.javascript.rhino.head.Context\" in method \"call\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaAdapter.runScript((Script) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.JavaAdapter$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<NativeJSON> class0 = NativeJSON.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      assertNotNull(method0);
      
      NativeError nativeError0 = new NativeError();
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, nativeError0);
      functionObject0.addAsConstructor(nativeError0, nativeError0);
      assertEquals(4, methodArray0.length);
      assertEquals(0, functionObject0.getLength());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<NativeJavaArray> class0 = NativeJavaArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      //  // Unstable assertion: assertNotNull(method0);
      
      NativeError nativeError0 = new NativeError();
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, nativeError0);
      int int0 = functionObject0.getLength();
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertEquals(13, methodArray0.length);
  }
}

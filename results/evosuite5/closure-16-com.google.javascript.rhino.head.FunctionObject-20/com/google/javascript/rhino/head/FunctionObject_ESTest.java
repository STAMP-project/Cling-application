/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 22:31:48 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.ConsString;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.Delegator;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeJavaClass;
import com.google.javascript.rhino.head.NativeString;
import com.google.javascript.rhino.head.Script;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionObject_ESTest extends FunctionObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test00()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertEquals(25, methodArray0.length);
      assertNotNull(methodArray0);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getGenericParameterTypes");
      assertEquals(25, methodArray0.length);
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isVarArgs());
      assertEquals(1, method0.getModifiers());
      assertEquals("getGenericParameterTypes", method0.getName());
      assertFalse(method0.isBridge());
      assertEquals("public java.lang.reflect.Type[] java.lang.reflect.Method.getGenericParameterTypes()", method0.toString());
      assertFalse(method0.isAccessible());
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertNotNull(importerTopLevel0);
      
      Context context0 = Context.enter();
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(context0);
      
      FunctionObject functionObject0 = new FunctionObject("error reporter", method0, importerTopLevel0);
      assertEquals(25, methodArray0.length);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isVarArgs());
      assertEquals(1, method0.getModifiers());
      assertEquals("getGenericParameterTypes", method0.getName());
      assertFalse(method0.isBridge());
      assertEquals("public java.lang.reflect.Type[] java.lang.reflect.Method.getGenericParameterTypes()", method0.toString());
      assertFalse(method0.isAccessible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("error reporter", functionObject0.getFunctionName());
      assertEquals("Function", functionObject0.getClassName());
      assertEquals(0, functionObject0.getLength());
      assertEquals(0, functionObject0.getArity());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals("function", functionObject0.getTypeOf());
      assertTrue(functionObject0.isExtensible());
      assertFalse(functionObject0.isSealed());
      assertTrue(functionObject0.isEmpty());
      assertNotNull(functionObject0);
      
      // Undeclared exception!
      try { 
        functionObject0.createObject(context0, importerTopLevel0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped java.lang.InstantiationException: java.lang.reflect.Method
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertEquals(29, methodArray0.length);
      assertNotNull(methodArray0);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "parseDouble");
      assertEquals(29, methodArray0.length);
      assertEquals("public static double java.lang.Double.parseDouble(java.lang.String) throws java.lang.NumberFormatException", method0.toString());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isBridge());
      assertEquals(9, method0.getModifiers());
      assertEquals("parseDouble", method0.getName());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isSynthetic());
      assertNotNull(method0);
      
      NativeArray nativeArray0 = new NativeArray(0L);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(0L, nativeArray0.getLength());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isEmpty());
      assertNotNull(nativeArray0);
      
      FunctionObject functionObject0 = new FunctionObject("parseDouble", method0, nativeArray0);
      assertEquals(29, methodArray0.length);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals("public static double java.lang.Double.parseDouble(java.lang.String) throws java.lang.NumberFormatException", method0.toString());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isBridge());
      assertEquals(9, method0.getModifiers());
      assertEquals("parseDouble", method0.getName());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isSynthetic());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(0L, nativeArray0.getLength());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(functionObject0.hasPrototypeMap());
      assertFalse(functionObject0.isSealed());
      assertEquals(1, functionObject0.getLength());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("Function", functionObject0.getClassName());
      assertTrue(functionObject0.isEmpty());
      assertEquals(1, functionObject0.getArity());
      assertEquals("parseDouble", functionObject0.getFunctionName());
      assertEquals("function", functionObject0.getTypeOf());
      assertTrue(functionObject0.isExtensible());
      assertNotNull(functionObject0);
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.makeContext();
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(context0);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) functionObject0, (Object) "parseDouble", (Class<?>) class0);
      assertEquals(29, methodArray0.length);
      assertEquals(Double.NaN, object0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals("public static double java.lang.Double.parseDouble(java.lang.String) throws java.lang.NumberFormatException", method0.toString());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isBridge());
      assertEquals(9, method0.getModifiers());
      assertEquals("parseDouble", method0.getName());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isSynthetic());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(0L, nativeArray0.getLength());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(functionObject0.hasPrototypeMap());
      assertFalse(functionObject0.isSealed());
      assertEquals(1, functionObject0.getLength());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("Function", functionObject0.getClassName());
      assertTrue(functionObject0.isEmpty());
      assertEquals(1, functionObject0.getArity());
      assertEquals("parseDouble", functionObject0.getFunctionName());
      assertEquals("function", functionObject0.getTypeOf());
      assertTrue(functionObject0.isExtensible());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = functionObject0.call(context0, nativeArray0, nativeArray0, objectArray0);
      assertEquals(29, methodArray0.length);
      assertEquals(6, objectArray0.length);
      assertEquals(Double.NaN, object1);
      assertTrue(object1.equals((Object)object0));
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals("public static double java.lang.Double.parseDouble(java.lang.String) throws java.lang.NumberFormatException", method0.toString());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isBridge());
      assertEquals(9, method0.getModifiers());
      assertEquals("parseDouble", method0.getName());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isSynthetic());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(0L, nativeArray0.getLength());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(functionObject0.hasPrototypeMap());
      assertFalse(functionObject0.isSealed());
      assertEquals(1, functionObject0.getLength());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("Function", functionObject0.getClassName());
      assertTrue(functionObject0.isEmpty());
      assertEquals(1, functionObject0.getArity());
      assertEquals("parseDouble", functionObject0.getFunctionName());
      assertEquals("function", functionObject0.getTypeOf());
      assertTrue(functionObject0.isExtensible());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test02()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertEquals(25, methodArray0.length);
      assertNotNull(methodArray0);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getGenericParameterTypes");
      assertEquals(25, methodArray0.length);
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isAccessible());
      assertEquals("public java.lang.reflect.Type[] java.lang.reflect.Method.getGenericParameterTypes()", method0.toString());
      assertFalse(method0.isBridge());
      assertEquals("getGenericParameterTypes", method0.getName());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isSynthetic());
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isEmpty());
      assertNotNull(importerTopLevel0);
      
      FunctionObject functionObject0 = new FunctionObject("getGenericParameterTypes", method0, importerTopLevel0);
      assertEquals(25, methodArray0.length);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isAccessible());
      assertEquals("public java.lang.reflect.Type[] java.lang.reflect.Method.getGenericParameterTypes()", method0.toString());
      assertFalse(method0.isBridge());
      assertEquals("getGenericParameterTypes", method0.getName());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isSynthetic());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(functionObject0.isSealed());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals(0, functionObject0.getLength());
      assertTrue(functionObject0.isEmpty());
      assertEquals(0, functionObject0.getArity());
      assertEquals("getGenericParameterTypes", functionObject0.getFunctionName());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals("Function", functionObject0.getClassName());
      assertTrue(functionObject0.isExtensible());
      assertFalse(functionObject0.avoidObjectDetection());
      assertNotNull(functionObject0);
      
      Context context0 = Context.getContext();
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertNotNull(context0);
      
      // Undeclared exception!
      try { 
        functionObject0.call(context0, importerTopLevel0, importerTopLevel0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"getGenericParameterTypes\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test03()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertEquals(25, methodArray0.length);
      assertNotNull(methodArray0);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getGenericParameterTypes");
      assertEquals(25, methodArray0.length);
      assertFalse(method0.isVarArgs());
      assertEquals("getGenericParameterTypes", method0.getName());
      assertEquals("public java.lang.reflect.Type[] java.lang.reflect.Method.getGenericParameterTypes()", method0.toString());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isBridge());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isSynthetic());
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertNotNull(importerTopLevel0);
      
      Context context0 = Context.getContext();
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertNotNull(context0);
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isEmpty());
      assertNotNull(nativeContinuation0);
      
      FunctionObject functionObject0 = new FunctionObject("error reporter", method0, importerTopLevel0);
      assertEquals(25, methodArray0.length);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(method0.isVarArgs());
      assertEquals("getGenericParameterTypes", method0.getName());
      assertEquals("public java.lang.reflect.Type[] java.lang.reflect.Method.getGenericParameterTypes()", method0.toString());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isBridge());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isSynthetic());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertEquals(0, functionObject0.getLength());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("Function", functionObject0.getClassName());
      assertFalse(functionObject0.isSealed());
      assertEquals("error reporter", functionObject0.getFunctionName());
      assertTrue(functionObject0.isEmpty());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals("function", functionObject0.getTypeOf());
      assertTrue(functionObject0.isExtensible());
      assertEquals(0, functionObject0.getArity());
      assertNotNull(functionObject0);
      
      // Undeclared exception!
      try { 
        functionObject0.call(context0, importerTopLevel0, nativeContinuation0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"error reporter\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertEquals(25, methodArray0.length);
      assertNotNull(methodArray0);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getGenericParameterTypes");
      assertEquals(25, methodArray0.length);
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isSynthetic());
      assertEquals(1, method0.getModifiers());
      assertEquals("getGenericParameterTypes", method0.getName());
      assertFalse(method0.isAccessible());
      assertEquals("public java.lang.reflect.Type[] java.lang.reflect.Method.getGenericParameterTypes()", method0.toString());
      assertFalse(method0.isBridge());
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertNotNull(importerTopLevel0);
      
      FunctionObject functionObject0 = new FunctionObject("getGenericParameterTypes", method0, importerTopLevel0);
      assertEquals(25, methodArray0.length);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isSynthetic());
      assertEquals(1, method0.getModifiers());
      assertEquals("getGenericParameterTypes", method0.getName());
      assertFalse(method0.isAccessible());
      assertEquals("public java.lang.reflect.Type[] java.lang.reflect.Method.getGenericParameterTypes()", method0.toString());
      assertFalse(method0.isBridge());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals(0, functionObject0.getArity());
      assertEquals("function", functionObject0.getTypeOf());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("Function", functionObject0.getClassName());
      assertTrue(functionObject0.isExtensible());
      assertFalse(functionObject0.hasPrototypeMap());
      assertFalse(functionObject0.isSealed());
      assertEquals(0, functionObject0.getLength());
      assertEquals("getGenericParameterTypes", functionObject0.getFunctionName());
      assertTrue(functionObject0.isEmpty());
      assertNotNull(functionObject0);
      
      // Undeclared exception!
      try { 
        functionObject0.call((Context) null, functionObject0, functionObject0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"getGenericParameterTypes\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertNotNull(importerTopLevel0);
      
      Context context0 = Context.enter();
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertNotNull(context0);
      
      Class<ConsString> class0 = ConsString.class;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) importerTopLevel0, (Object) context0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't convert to type \"com.google.javascript.rhino.head.ConsString\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test06()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertEquals(29, methodArray0.length);
      assertNotNull(methodArray0);
      
      // Undeclared exception!
      try { 
        FunctionObject.findSingleMethod(methodArray0, "toString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"toString\" occurs multiple times in class \"java.lang.Double\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Method[] methodArray0 = new Method[9];
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "");
      assertEquals(9, methodArray0.length);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertEquals(29, methodArray0.length);
      assertNotNull(methodArray0);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "parseDouble");
      assertEquals(29, methodArray0.length);
      assertFalse(method0.isBridge());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isSynthetic());
      assertEquals(9, method0.getModifiers());
      assertFalse(method0.isVarArgs());
      assertEquals("parseDouble", method0.getName());
      assertEquals("public static double java.lang.Double.parseDouble(java.lang.String) throws java.lang.NumberFormatException", method0.toString());
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertNotNull(importerTopLevel0);
      
      FunctionObject functionObject0 = new FunctionObject((String) null, method0, importerTopLevel0);
      assertEquals(29, methodArray0.length);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(method0.isBridge());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isSynthetic());
      assertEquals(9, method0.getModifiers());
      assertFalse(method0.isVarArgs());
      assertEquals("parseDouble", method0.getName());
      assertEquals("public static double java.lang.Double.parseDouble(java.lang.String) throws java.lang.NumberFormatException", method0.toString());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals(1, functionObject0.getArity());
      assertEquals("Function", functionObject0.getClassName());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals(1, functionObject0.getLength());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("", functionObject0.getFunctionName());
      assertTrue(functionObject0.isEmpty());
      assertFalse(functionObject0.isSealed());
      assertFalse(functionObject0.hasPrototypeMap());
      assertTrue(functionObject0.isExtensible());
      assertNotNull(functionObject0);
      
      Method method1 = (Method)functionObject0.getMethodOrConstructor();
      assertEquals(29, methodArray0.length);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(method0.isBridge());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isSynthetic());
      assertEquals(9, method0.getModifiers());
      assertFalse(method0.isVarArgs());
      assertEquals("parseDouble", method0.getName());
      assertEquals("public static double java.lang.Double.parseDouble(java.lang.String) throws java.lang.NumberFormatException", method0.toString());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals(1, functionObject0.getArity());
      assertEquals("Function", functionObject0.getClassName());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals(1, functionObject0.getLength());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("", functionObject0.getFunctionName());
      assertTrue(functionObject0.isEmpty());
      assertFalse(functionObject0.isSealed());
      assertFalse(functionObject0.hasPrototypeMap());
      assertTrue(functionObject0.isExtensible());
      assertFalse(method1.isVarArgs());
      assertEquals(9, method1.getModifiers());
      assertFalse(method1.isAccessible());
      assertFalse(method1.isSynthetic());
      assertEquals("parseDouble", method1.getName());
      assertEquals("public static double java.lang.Double.parseDouble(java.lang.String) throws java.lang.NumberFormatException", method1.toString());
      assertFalse(method1.isBridge());
      assertSame(method0, method1);
      assertSame(method1, method0);
      assertNotNull(method1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertEquals(29, methodArray0.length);
      assertNotNull(methodArray0);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "parseDouble");
      assertEquals(29, methodArray0.length);
      assertFalse(method0.isBridge());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isSynthetic());
      assertEquals("parseDouble", method0.getName());
      assertEquals("public static double java.lang.Double.parseDouble(java.lang.String) throws java.lang.NumberFormatException", method0.toString());
      assertEquals(9, method0.getModifiers());
      assertFalse(method0.isVarArgs());
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.isSealed());
      assertNotNull(importerTopLevel0);
      
      FunctionObject functionObject0 = new FunctionObject((String) null, method0, importerTopLevel0);
      assertEquals(29, methodArray0.length);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertFalse(method0.isBridge());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isSynthetic());
      assertEquals("parseDouble", method0.getName());
      assertEquals("public static double java.lang.Double.parseDouble(java.lang.String) throws java.lang.NumberFormatException", method0.toString());
      assertEquals(9, method0.getModifiers());
      assertFalse(method0.isVarArgs());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(functionObject0.isExtensible());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals(1, functionObject0.getArity());
      assertEquals(1, functionObject0.getLength());
      assertEquals("", functionObject0.getFunctionName());
      assertEquals("Function", functionObject0.getClassName());
      assertFalse(functionObject0.avoidObjectDetection());
      assertFalse(functionObject0.isSealed());
      assertTrue(functionObject0.isEmpty());
      assertNotNull(functionObject0);
      
      String string0 = functionObject0.getFunctionName();
      assertEquals(29, methodArray0.length);
      assertEquals("", string0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertFalse(method0.isBridge());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isSynthetic());
      assertEquals("parseDouble", method0.getName());
      assertEquals("public static double java.lang.Double.parseDouble(java.lang.String) throws java.lang.NumberFormatException", method0.toString());
      assertEquals(9, method0.getModifiers());
      assertFalse(method0.isVarArgs());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(functionObject0.isExtensible());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals(1, functionObject0.getArity());
      assertEquals(1, functionObject0.getLength());
      assertEquals("", functionObject0.getFunctionName());
      assertEquals("Function", functionObject0.getClassName());
      assertFalse(functionObject0.avoidObjectDetection());
      assertFalse(functionObject0.isSealed());
      assertTrue(functionObject0.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertEquals(25, methodArray0.length);
      assertNotNull(methodArray0);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getGenericParameterTypes");
      assertEquals(25, methodArray0.length);
      assertEquals("getGenericParameterTypes", method0.getName());
      assertEquals("public java.lang.reflect.Type[] java.lang.reflect.Method.getGenericParameterTypes()", method0.toString());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isBridge());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isSynthetic());
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertNotNull(importerTopLevel0);
      
      FunctionObject functionObject0 = new FunctionObject("getGenericParameterTypes", method0, importerTopLevel0);
      assertEquals(25, methodArray0.length);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("getGenericParameterTypes", method0.getName());
      assertEquals("public java.lang.reflect.Type[] java.lang.reflect.Method.getGenericParameterTypes()", method0.toString());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isBridge());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isSynthetic());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertEquals("Function", functionObject0.getClassName());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("getGenericParameterTypes", functionObject0.getFunctionName());
      assertTrue(functionObject0.isEmpty());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals(0, functionObject0.getArity());
      assertEquals(0, functionObject0.getLength());
      assertTrue(functionObject0.isExtensible());
      assertFalse(functionObject0.hasPrototypeMap());
      assertFalse(functionObject0.isSealed());
      assertNotNull(functionObject0);
      
      String string0 = functionObject0.decompile(4, 4);
      assertEquals(25, methodArray0.length);
      assertEquals("function getGenericParameterTypes() {\n\t[native code, arity=0]\n}\n", string0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("getGenericParameterTypes", method0.getName());
      assertEquals("public java.lang.reflect.Type[] java.lang.reflect.Method.getGenericParameterTypes()", method0.toString());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isBridge());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isSynthetic());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertEquals("Function", functionObject0.getClassName());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("getGenericParameterTypes", functionObject0.getFunctionName());
      assertTrue(functionObject0.isEmpty());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals(0, functionObject0.getArity());
      assertEquals(0, functionObject0.getLength());
      assertTrue(functionObject0.isExtensible());
      assertFalse(functionObject0.hasPrototypeMap());
      assertFalse(functionObject0.isSealed());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Double> class0 = Double.class;
      NativeArray nativeArray0 = new NativeArray(0L);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0L, nativeArray0.getLength());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertNotNull(nativeArray0);
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      Context context0 = new Context(contextFactory0);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertNotNull(context0);
      
      Double double0 = new Double(4);
      assertEquals(4.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeArray0, (Object) double0, (Class<?>) class0);
      assertEquals(4.0, object0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0L, nativeArray0.getLength());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isExtensible());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test12()  throws Throwable  {
      Context context0 = Context.getContext();
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertFalse(context0.generateObserverCount);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertNotNull(context0);
      
      NativeString nativeString0 = new NativeString("error reporter");
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeString0.isSealed());
      assertEquals("error reporter", nativeString0.toString());
      assertFalse(nativeString0.avoidObjectDetection());
      assertTrue(nativeString0.isEmpty());
      assertEquals("String", nativeString0.getClassName());
      assertTrue(nativeString0.isExtensible());
      assertEquals("object", nativeString0.getTypeOf());
      assertFalse(nativeString0.hasPrototypeMap());
      assertNotNull(nativeString0);
      
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeString0, (Object) context0, 3);
      assertEquals(true, object0);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertFalse(context0.generateObserverCount);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(nativeString0.isSealed());
      assertEquals("error reporter", nativeString0.toString());
      assertFalse(nativeString0.avoidObjectDetection());
      assertTrue(nativeString0.isEmpty());
      assertEquals("String", nativeString0.getClassName());
      assertTrue(nativeString0.isExtensible());
      assertEquals("object", nativeString0.getTypeOf());
      assertFalse(nativeString0.hasPrototypeMap());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test13()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertNotNull(context0);
      
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) null, (Object) null, 3);
      assertEquals(false, object0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertEquals(29, methodArray0.length);
      assertNotNull(methodArray0);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "parseDouble");
      assertEquals(29, methodArray0.length);
      assertFalse(method0.isAccessible());
      assertEquals(9, method0.getModifiers());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isBridge());
      assertEquals("parseDouble", method0.getName());
      assertEquals("public static double java.lang.Double.parseDouble(java.lang.String) throws java.lang.NumberFormatException", method0.toString());
      assertNotNull(method0);
      
      NativeArray nativeArray0 = new NativeArray((-1115L));
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isEmpty());
      assertEquals((-1115L), nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isExtensible());
      assertEquals((-1115L), nativeArray0.getLength());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertNotNull(nativeArray0);
      
      FunctionObject functionObject0 = new FunctionObject("parseDouble", method0, nativeArray0);
      assertEquals(29, methodArray0.length);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertFalse(method0.isAccessible());
      assertEquals(9, method0.getModifiers());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isBridge());
      assertEquals("parseDouble", method0.getName());
      assertEquals("public static double java.lang.Double.parseDouble(java.lang.String) throws java.lang.NumberFormatException", method0.toString());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isEmpty());
      assertEquals((-1115L), nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isExtensible());
      assertEquals((-1115L), nativeArray0.getLength());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals("Function", functionObject0.getClassName());
      assertEquals(1, functionObject0.getLength());
      assertFalse(functionObject0.avoidObjectDetection());
      assertTrue(functionObject0.isExtensible());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals(1, functionObject0.getArity());
      assertFalse(functionObject0.hasPrototypeMap());
      assertFalse(functionObject0.isSealed());
      assertEquals("parseDouble", functionObject0.getFunctionName());
      assertTrue(functionObject0.isEmpty());
      assertNotNull(functionObject0);
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.enter();
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertNotNull(context0);
      
      ConsString consString0 = new ConsString("error reporter", "parseDouble");
      assertEquals(25, consString0.length());
      assertNotNull(consString0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) consString0;
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeArray0, nativeArray0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped java.lang.NumberFormatException: For input string: \"com.google.javascript.rhino.head.ConsString@0000000004\"
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test15()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertNotNull(context0);
      
      NativeString nativeString0 = new NativeString("error reporter");
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("error reporter", nativeString0.toString());
      assertEquals("String", nativeString0.getClassName());
      assertTrue(nativeString0.isExtensible());
      assertFalse(nativeString0.avoidObjectDetection());
      assertFalse(nativeString0.isSealed());
      assertEquals("object", nativeString0.getTypeOf());
      assertFalse(nativeString0.hasPrototypeMap());
      assertTrue(nativeString0.isEmpty());
      assertNotNull(nativeString0);
      
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeString0, (Object) context0, 150);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test16()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertNotNull(context0);
      
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      assertEquals("JavaClass", nativeJavaClass0.getClassName());
      assertNotNull(nativeJavaClass0);
      
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeJavaClass0, (Object) context0.VERSION_1_4, 6);
      assertEquals(140, object0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals("JavaClass", nativeJavaClass0.getClassName());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertEquals(29, methodArray0.length);
      assertNotNull(methodArray0);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "parseDouble");
      assertEquals(29, methodArray0.length);
      assertEquals("public static double java.lang.Double.parseDouble(java.lang.String) throws java.lang.NumberFormatException", method0.toString());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isBridge());
      assertEquals(9, method0.getModifiers());
      assertEquals("parseDouble", method0.getName());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isSynthetic());
      assertNotNull(method0);
      
      NativeArray nativeArray0 = new NativeArray((-1115L));
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isExtensible());
      assertEquals((-1115L), nativeArray0.getLength());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.isSealed());
      assertEquals((-1115L), nativeArray0.jsGet_length());
      assertNotNull(nativeArray0);
      
      FunctionObject functionObject0 = new FunctionObject("parseDouble", method0, nativeArray0);
      assertEquals(29, methodArray0.length);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals("public static double java.lang.Double.parseDouble(java.lang.String) throws java.lang.NumberFormatException", method0.toString());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isBridge());
      assertEquals(9, method0.getModifiers());
      assertEquals("parseDouble", method0.getName());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isSynthetic());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isExtensible());
      assertEquals((-1115L), nativeArray0.getLength());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.isSealed());
      assertEquals((-1115L), nativeArray0.jsGet_length());
      assertTrue(functionObject0.isEmpty());
      assertEquals(1, functionObject0.getLength());
      assertEquals("parseDouble", functionObject0.getFunctionName());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("Function", functionObject0.getClassName());
      assertFalse(functionObject0.isSealed());
      assertTrue(functionObject0.isExtensible());
      assertEquals(1, functionObject0.getArity());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals("function", functionObject0.getTypeOf());
      assertNotNull(functionObject0);
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.enter();
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertNotNull(context0);
      
      ConsString consString0 = new ConsString("error reporter", "parseDouble");
      assertEquals(25, consString0.length());
      assertNotNull(consString0);
      
      Class<Delegator> class1 = Delegator.class;
      NativeString nativeString0 = (NativeString)FunctionObject.convertArg(context0, (Scriptable) functionObject0, (Object) consString0, (Class<?>) class1);
      assertEquals(29, methodArray0.length);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals("public static double java.lang.Double.parseDouble(java.lang.String) throws java.lang.NumberFormatException", method0.toString());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isBridge());
      assertEquals(9, method0.getModifiers());
      assertEquals("parseDouble", method0.getName());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isSynthetic());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isExtensible());
      assertEquals((-1115L), nativeArray0.getLength());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isEmpty());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertFalse(nativeArray0.isSealed());
      assertEquals((-1115L), nativeArray0.jsGet_length());
      assertTrue(functionObject0.isEmpty());
      assertEquals(1, functionObject0.getLength());
      assertEquals("parseDouble", functionObject0.getFunctionName());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("Function", functionObject0.getClassName());
      assertFalse(functionObject0.isSealed());
      assertTrue(functionObject0.isExtensible());
      assertEquals(1, functionObject0.getArity());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals("function", functionObject0.getTypeOf());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(25, consString0.length());
      assertEquals("error reporterparseDouble", nativeString0.toString());
      assertEquals("String", nativeString0.getClassName());
      assertTrue(nativeString0.isExtensible());
      assertTrue(nativeString0.isEmpty());
      assertFalse(nativeString0.isSealed());
      assertEquals("object", nativeString0.getTypeOf());
      assertFalse(nativeString0.hasPrototypeMap());
      assertFalse(nativeString0.avoidObjectDetection());
      assertNotNull(nativeString0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertNotNull(importerTopLevel0);
      
      Context context0 = Context.enter();
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertNotNull(context0);
      
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) importerTopLevel0, (Object) context0, 2);
      assertEquals(0, object0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test19()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "parseDouble");
      NativeArray nativeArray0 = new NativeArray(0L);
      FunctionObject functionObject0 = new FunctionObject("parseDouble", method0, nativeArray0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeArray0, nativeArray0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "equals");
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("equals", method0, importerTopLevel0);
      functionObject0.isVarArgsConstructor();
      assertEquals(25, methodArray0.length);
      assertEquals(1, functionObject0.getArity());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test24()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "invoke");
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = null;
      try {
        functionObject0 = new FunctionObject("invoke", method0, importerTopLevel0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Unsupported parameter type \"[Ljava.lang.Object;\" in method \"invoke\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaAdapter.runScript((Script) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.JavaAdapter$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getGenericParameterTypes");
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("getGenericParameterTypes", method0, importerTopLevel0);
      int int0 = functionObject0.getLength();
      assertEquals(25, methodArray0.length);
      assertEquals(0, int0);
  }
}

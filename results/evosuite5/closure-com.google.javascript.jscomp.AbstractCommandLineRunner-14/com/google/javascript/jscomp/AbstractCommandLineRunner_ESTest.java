/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 22:39:39 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Function;
import com.google.common.base.Supplier;
import com.google.common.collect.LinkedListMultimap;
import com.google.javascript.jscomp.AbstractCommandLineRunner;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSModuleGraph;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.PhaseOptimizer;
import com.google.javascript.jscomp.RenameLabels;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceMap;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.ResourceBundle;
import java.util.Stack;
import java.util.Vector;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AbstractCommandLineRunner_ESTest extends AbstractCommandLineRunner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      vector0.add("\nThe InputStream implementation is buggy.");
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setOutputManifest(vector0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "7\"zPtq-6{@rG(";
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      JSModule[] jSModuleArray0 = new JSModule[1];
      JSModule jSModule0 = new JSModule("7\"zPtq-6{@rG(");
      jSModuleArray0[0] = jSModule0;
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph(jSModuleArray0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "7\"zPtq-6{@rG(");
      commandLineRunner0.printModuleGraphManifestOrBundleTo(jSModuleGraph0, stringBuffer0, true);
      assertEquals(31, stringBuffer0.length());
      assertEquals("7\"zPtq-6{@rG({7\"zPtq-6{@rG(}\n", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "7\"zPtq-6{@rG(";
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      JSModule[] jSModuleArray0 = new JSModule[1];
      JSModule jSModule0 = new JSModule("`:?h[Miv5c~+mnB");
      jSModuleArray0[0] = jSModule0;
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph(jSModuleArray0);
      StringBuffer stringBuffer0 = new StringBuffer("7\"zPtq-6{@rG(");
      commandLineRunner0.printModuleGraphManifestOrBundleTo(jSModuleGraph0, stringBuffer0, false);
      assertEquals("7\"zPtq-6{@rG(", stringBuffer0.toString());
      assertEquals(14, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      RenameLabels renameLabels0 = new RenameLabels(compiler0);
      RenameLabels.ProcessLabels renameLabels_ProcessLabels0 = renameLabels0.new ProcessLabels();
      ArrayList<String> arrayList0 = renameLabels_ProcessLabels0.names;
      arrayList0.add("\nThe InputStream implementation is buggy.");
      // Undeclared exception!
      try { 
        AbstractCommandLineRunner.createDefineOrTweakReplacements(arrayList0, (CompilerOptions) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("true");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("true");
      AbstractCommandLineRunner.createDefineOrTweakReplacements(arrayList0, compilerOptions0, false);
      assertFalse(compilerOptions0.aliasKeywords);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      OutputStream outputStream0 = commandLineRunner0.filenameToOutputStream((String) null);
      assertNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "7\"zkP[q-6{@rG(";
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      OutputStream outputStream0 = commandLineRunner0.filenameToOutputStream("S;S");
      assertNotNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Node must be a block.";
      stringArray0[1] = "MfOq;\"0EkD";
      stringArray0[2] = "/dev/null";
      stringArray0[3] = "QD)/eaUE9^Dz*;";
      stringArray0[4] = "--tweak flag syntax invalid: ";
      stringArray0[5] = "U+";
      stringArray0[6] = "+]UN\"ls#rU`\"mB,";
      stringArray0[7] = "du";
      stringArray0[8] = ".";
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      Result result0 = compiler0.getResult();
      // Undeclared exception!
      try { 
        commandLineRunner0.processResults(result0, (List<JSModule>) null, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--tweak flag syntax invalid: ";
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      Result result0 = compiler0.getResult();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      // Undeclared exception!
      try { 
        commandLineRunner0.processResults(result0, arrayList0, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Compiler compiler0 = new Compiler();
      AbstractCommandLineRunner.writeOutput(stringBuilder0, compiler0, "\nThe InputStream implementation is buggy.", "\nThe InputStream implementation is buggy.", "\nThe InputStream implementation is buggy.");
      assertEquals("\nThe InputStream implementation is buggy.\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      AbstractCommandLineRunner.writeOutput(stringBuilder0, (Compiler) null, "\nThe InputStream iplementation is `uggy.", "\nThe InputStream iplementation is `uggy.", "\nThe InputStream iplementation is `uggy.");
      assertEquals("\nThe InputStream iplementation is `uggy.\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Compiler compiler0 = new Compiler();
      AbstractCommandLineRunner.writeOutput(stringBuilder0, compiler0, "TpeError", "TpeError", "APg8[N w3W(!L");
      assertEquals("TpeError\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        commandLineRunner0.writeModuleOutput(charBuffer0, (JSModule) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      try { 
        AbstractCommandLineRunner.parseModuleWrappers(list0, arrayList0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected module wrapper to have <name>:<wrapper> format: java.properties
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add("l|<XIQ0:");
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      try { 
        AbstractCommandLineRunner.parseModuleWrappers(stack0, arrayList0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown module: 'l|<XIQ0'
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initOptions(compilerOptions0);
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      Result result0 = compiler0.getResult();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      arrayList0.add((JSModule) null);
      // Undeclared exception!
      try { 
        commandLineRunner0.processResults(result0, arrayList0, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
      // Undeclared exception!
      try { 
        AbstractCommandLineRunner.parseModuleWrappers((List<String>) null, linkedList0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
      try { 
        commandLineRunner0.createJsModules(list0, list0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected 2-4 colon-delimited parts in module spec: java.class
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add("Log:\n");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Log:\n";
      stringArray0[1] = "l|<XIQ0:";
      stringArray0[2] = "l|<XIQ0:";
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      try { 
        commandLineRunner0.createJsModules(stack0, stack0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid JS file count '
         // ' for module: Log
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "7\"zPtq-6{@rG(";
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      // Undeclared exception!
      try { 
        commandLineRunner0.createJsModules((List<String>) null, (List<String>) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      Stack<String> stack0 = new Stack<String>();
      // Undeclared exception!
      try { 
        commandLineRunner0.createJsModules(stack0, stack0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "7\"zkP[q-6{@rG(";
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      Vector<String> vector0 = new Vector<String>();
      vector0.add("+]UN\"ls#rU`\"mB,");
      List<SourceFile> list0 = commandLineRunner0.createInputs(vector0, true);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--tweak flag syntax invalid: ";
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      commandLineRunner0.setRunOptions(compilerOptions0);
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "7\"zkP[q-6{@rG(";
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
      commandLineRunner0.setRunOptions(compilerOptions0);
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      Supplier<List<JSModule>> supplier0 = (Supplier<List<JSModule>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Function<Integer, Boolean> function0 = (Function<Integer, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      commandLineRunner0.enableTestMode((Supplier<List<SourceFile>>) null, (Supplier<List<SourceFile>>) null, supplier0, function0);
      assertTrue(commandLineRunner0.shouldRunCompiler());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "7\"zkP[q-6{@rG(";
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      Supplier<List<SourceFile>> supplier0 = (Supplier<List<SourceFile>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Function<Integer, Boolean> function0 = (Function<Integer, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      commandLineRunner0.enableTestMode(supplier0, supplier0, (Supplier<List<JSModule>>) null, function0);
      assertTrue(commandLineRunner0.shouldRunCompiler());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AbstractCommandLineRunner.WarningGuardSpec abstractCommandLineRunner_WarningGuardSpec0 = new AbstractCommandLineRunner.WarningGuardSpec();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      abstractCommandLineRunner_WarningGuardSpec0.add(checkLevel0, "v6.sa");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      // Undeclared exception!
      try { 
        commandLineRunner0.run();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      compiler0.initOptions(compilerOptions0);
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      Result result0 = compiler0.getResult();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      int int0 = commandLineRunner0.processResults(result0, arrayList0, compilerOptions0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      Compiler compiler0 = commandLineRunner0.getCompiler();
      assertNull(compiler0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "/dev/null";
      stringArray0[1] = "QRD7$yBKokFV";
      stringArray0[2] = ".js";
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      commandLineRunner0.initOptionsFromFlags((CompilerOptions) null);
      assertTrue(commandLineRunner0.shouldRunCompiler());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "7\"zkP[q-6{@rG(";
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      Compiler compiler0 = commandLineRunner0.createCompiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setSourceMapDetailLevel(sourceMap_DetailLevel0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setComputePhaseOrdering(false);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      List<String> list0 = PhaseOptimizer.OPTIMAL_ORDER;
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setTweak(list0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      CompilerOptions.TweakProcessing compilerOptions_TweakProcessing0 = CompilerOptions.TweakProcessing.OFF;
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setTweakProcessing(compilerOptions_TweakProcessing0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      Vector<String> vector0 = new Vector<String>();
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setManifestMaps(vector0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      LinkedListMultimap<FilterOutputStream, String> linkedListMultimap0 = LinkedListMultimap.create(0);
      List<String> list0 = linkedListMultimap0.values();
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setOutputBundle(list0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setSkipNormalOutputs(true);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      try { 
        commandLineRunner0.checkModuleName("#Z4t7c,?,");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid module name: '#Z4t7c,?,'
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }
}

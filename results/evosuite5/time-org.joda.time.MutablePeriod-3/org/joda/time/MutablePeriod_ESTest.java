/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 21:39:03 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.Minutes;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MutablePeriod_ESTest extends MutablePeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 1284);
      Duration duration0 = Duration.millis(0L);
      mutablePeriod0.add((ReadableDuration) duration0);
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2090, (-3805), (-3335), 2090);
      mutablePeriod0.add((ReadableDuration) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1046L, 0L);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 2090, 0, 0, (-3172));
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      Days days0 = weeks0.toStandardDays();
      Duration duration0 = days0.toStandardDuration();
      Instant instant0 = new Instant((-1L));
      Interval interval0 = duration0.toIntervalTo(instant0);
      mutablePeriod0.add((ReadableInterval) interval0);
      assertEquals((-1L), interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1046L, 0L);
      mutablePeriod0.add((ReadableInterval) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2090, (-3805), (-3335), 2090);
      mutablePeriod0.setPeriod((ReadableInstant) null, (ReadableInstant) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(118L);
      DateTime dateTime0 = new DateTime();
      DateTime dateTime1 = dateTime0.withWeekyear(1);
      mutablePeriod0.setPeriod((ReadableInstant) dateTime0, (ReadableInstant) dateTime1);
      assertNotSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 1284);
      mutablePeriod0.addHours(0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      Period period0 = new Period();
      Minutes minutes0 = period0.toStandardMinutes();
      PeriodType periodType0 = minutes0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, (-1709L), periodType0, copticChronology0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      PeriodType periodType0 = PeriodType.seconds();
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, duration0, periodType0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null, periodType0, islamicChronology0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-422L));
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, duration0);
      mutablePeriod0.setDays(1963);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(3737, 0, 0, 248, 248, (-962), (-962), (-962), periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1058));
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      PeriodType periodType0 = PeriodType.weeks();
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, dateTime0, periodType0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      mutablePeriod0.add((-1L), (Chronology) ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      mutablePeriod0.setHours(1349);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-314L));
      mutablePeriod0.setMonths(1119);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-422L));
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, duration0);
      mutablePeriod0.add((-422L));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 1284);
      mutablePeriod0.addSeconds(1284);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(118L);
      mutablePeriod0.setValue(0, 0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2090, (-3805), (-3335), 2090);
      mutablePeriod0.addMillis((-84));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1046L, 0L);
      mutablePeriod0.setYears((-3095));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(31536000000L, (Chronology) gregorianChronology0);
      mutablePeriod0.setSeconds(65);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1046L, 0L);
      mutablePeriod0.setWeeks(0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(4022, 528, 4022, (-1032), 0, 0, 0, 1789);
      mutablePeriod0.addYears(5110);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      MutableInterval mutableInterval0 = new MutableInterval();
      mutablePeriod0.setPeriod((ReadableInterval) mutableInterval0);
      assertEquals(0L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Days days0 = Days.ONE;
      PeriodType periodType0 = days0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Period period0 = new Period();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 10000000000L);
      mutablePeriod0.mergePeriod(period0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1058));
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      PeriodType periodType0 = PeriodType.weeks();
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, dateTime0, periodType0);
      mutablePeriod0.addWeeks(1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Years years0 = Years.THREE;
      PeriodType periodType0 = years0.getPeriodType();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, periodType0, (Chronology) iSOChronology0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTime dateTime0 = new DateTime(439L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) dateTime0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(1L, 0L, gJChronology0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutablePeriod.parse(">=L,Es4,.$FY|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \">=L,Es4,.$FY|\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      DateMidnight dateMidnight0 = DateMidnight.now();
      PeriodType periodType0 = PeriodType.months();
      MutablePeriod mutablePeriod0 = new MutablePeriod(duration0, dateMidnight0, periodType0);
      mutablePeriod0.setPeriod(30585600000L, 0L);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Duration duration0 = new Duration(1219L);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime((-1107L), dateTimeZone0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(duration0, dateTime0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 0);
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      mutablePeriod0.set(durationFieldType0, 0);
      assertEquals("minutes", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1046L, 0L);
      mutablePeriod0.add(2124, 313, (-3578), (-3578), 313, 835, 2090, 313);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Object object0 = new Object();
      PeriodType periodType0 = PeriodType.years();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(object0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(31536000000L, (Chronology) gregorianChronology0);
      mutablePeriod0.setPeriod((ReadableInterval) null);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-766L), (-766L), periodType0);
      MutablePeriod mutablePeriod1 = mutablePeriod0.copy();
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1058));
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      PeriodType periodType0 = PeriodType.weeks();
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, dateTime0, periodType0);
      mutablePeriod0.addMinutes(0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(303L, 303L);
      mutablePeriod0.addDays(0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(303L, 303L);
      mutablePeriod0.addMonths(413);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(31536000000L, (Chronology) gregorianChronology0);
      mutablePeriod0.setMinutes(0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1058));
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      PeriodType periodType0 = PeriodType.weeks();
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, dateTime0, periodType0);
      MutablePeriod mutablePeriod1 = mutablePeriod0.toMutablePeriod();
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-2420L));
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-314L));
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      mutablePeriod0.add(durationFieldType0, (-1));
      assertEquals("weeks", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod("", (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      mutablePeriod0.setMillis((-1));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Duration duration0 = Duration.standardMinutes(2735L);
      mutablePeriod0.setPeriod((ReadableDuration) duration0);
      assertEquals(164100000L, duration0.getMillis());
  }
}

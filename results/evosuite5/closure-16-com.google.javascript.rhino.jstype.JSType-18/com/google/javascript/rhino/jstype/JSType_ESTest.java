/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 22:00:17 GMT 2019
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.UnresolvedTypeExpression;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.ArrayDeque;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class JSType_ESTest extends JSType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isStringValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(arrowType0);
      
      JSType jSType0 = arrowType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(arrowType0, jSType0);
      assertSame(jSType0, arrowType0);
      assertNotNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      
      ObjectType objectType0 = jSTypeRegistry0.findCommonSuperObject(errorFunctionType0, noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isNumberValueType());
      assertTrue(objectType0.matchesObjectContext());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isConstructor());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isEnumType());
      assertTrue(objectType0.hasReferenceName());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isNoObjectType());
      assertTrue(objectType0.isInstanceType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isFunctionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(objectType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isNumberValueType());
      assertTrue(objectType0.matchesObjectContext());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isConstructor());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isEnumType());
      assertTrue(objectType0.hasReferenceName());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isNoObjectType());
      assertTrue(objectType0.isInstanceType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertTrue(parameterizedType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(parameterizedType0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isBooleanValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNoResolvedType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isUnionType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(numberType0);
      
      numberType0.testForEquality(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isNumberValueType());
      assertTrue(objectType0.matchesObjectContext());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isConstructor());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isEnumType());
      assertTrue(objectType0.hasReferenceName());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isNoObjectType());
      assertTrue(objectType0.isInstanceType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertTrue(parameterizedType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isBooleanValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNoResolvedType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isUnionType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isInterface());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isConstructor());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNoResolvedType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(voidType0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(allType0);
      
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderShallowEquality(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isInterface());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isConstructor());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNoResolvedType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      Node node0 = Node.newString("", 3104, 3104);
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(3104, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNumber());
      assertEquals(12717088, node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCall());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isIf());
      assertEquals(3104, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isComma());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertNotNull(node0);
      
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, "");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(3104, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNumber());
      assertEquals(12717088, node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCall());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isIf());
      assertEquals(3104, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isComma());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertTrue(unresolvedTypeExpression0.matchesObjectContext());
      assertFalse(unresolvedTypeExpression0.isConstructor());
      assertFalse(unresolvedTypeExpression0.isParameterizedType());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      assertTrue(unresolvedTypeExpression0.isUnknownType());
      assertFalse(unresolvedTypeExpression0.isFunctionPrototypeType());
      assertFalse(unresolvedTypeExpression0.isUnionType());
      assertFalse(unresolvedTypeExpression0.isNumberValueType());
      assertFalse(unresolvedTypeExpression0.isRecordType());
      assertFalse(unresolvedTypeExpression0.hasCachedValues());
      assertFalse(unresolvedTypeExpression0.isNominalType());
      assertFalse(unresolvedTypeExpression0.isFunctionType());
      assertFalse(unresolvedTypeExpression0.isNominalConstructor());
      assertTrue(unresolvedTypeExpression0.isObject());
      assertEquals(Integer.MAX_VALUE, unresolvedTypeExpression0.getPropertiesCount());
      assertFalse(unresolvedTypeExpression0.isNativeObjectType());
      assertFalse(unresolvedTypeExpression0.isNoType());
      assertFalse(unresolvedTypeExpression0.isNullType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertTrue(unresolvedTypeExpression0.canBeCalled());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertFalse(unresolvedTypeExpression0.isEnumElementType());
      assertFalse(unresolvedTypeExpression0.isTemplateType());
      assertFalse(unresolvedTypeExpression0.isEnumType());
      assertTrue(unresolvedTypeExpression0.matchesNumberContext());
      assertFalse(unresolvedTypeExpression0.isBooleanValueType());
      assertFalse(unresolvedTypeExpression0.hasReferenceName());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertTrue(unresolvedTypeExpression0.hasDisplayName());
      assertFalse(unresolvedTypeExpression0.isVoidType());
      assertFalse(unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertTrue(unresolvedTypeExpression0.matchesStringContext());
      assertTrue(unresolvedTypeExpression0.isNullable());
      assertFalse(unresolvedTypeExpression0.isCheckedUnknownType());
      assertFalse(unresolvedTypeExpression0.isStringValueType());
      assertFalse(unresolvedTypeExpression0.isInterface());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(unresolvedTypeExpression0);
      
      UnionType unionType0 = (UnionType)unresolvedTypeExpression0.resolveInternal(simpleErrorReporter0, (StaticScope<JSType>) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(3104, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNumber());
      assertEquals(12717088, node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCall());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isIf());
      assertEquals(3104, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isComma());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertTrue(unresolvedTypeExpression0.matchesObjectContext());
      assertFalse(unresolvedTypeExpression0.isConstructor());
      assertFalse(unresolvedTypeExpression0.isParameterizedType());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      assertTrue(unresolvedTypeExpression0.isUnknownType());
      assertFalse(unresolvedTypeExpression0.isFunctionPrototypeType());
      assertFalse(unresolvedTypeExpression0.isUnionType());
      assertFalse(unresolvedTypeExpression0.isNumberValueType());
      assertFalse(unresolvedTypeExpression0.isRecordType());
      assertFalse(unresolvedTypeExpression0.hasCachedValues());
      assertFalse(unresolvedTypeExpression0.isNominalType());
      assertFalse(unresolvedTypeExpression0.isFunctionType());
      assertFalse(unresolvedTypeExpression0.isNominalConstructor());
      assertTrue(unresolvedTypeExpression0.isObject());
      assertEquals(Integer.MAX_VALUE, unresolvedTypeExpression0.getPropertiesCount());
      assertFalse(unresolvedTypeExpression0.isNativeObjectType());
      assertFalse(unresolvedTypeExpression0.isNoType());
      assertFalse(unresolvedTypeExpression0.isNullType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertTrue(unresolvedTypeExpression0.canBeCalled());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertFalse(unresolvedTypeExpression0.isEnumElementType());
      assertFalse(unresolvedTypeExpression0.isTemplateType());
      assertFalse(unresolvedTypeExpression0.isEnumType());
      assertTrue(unresolvedTypeExpression0.matchesNumberContext());
      assertFalse(unresolvedTypeExpression0.isBooleanValueType());
      assertFalse(unresolvedTypeExpression0.hasReferenceName());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertTrue(unresolvedTypeExpression0.hasDisplayName());
      assertFalse(unresolvedTypeExpression0.isVoidType());
      assertFalse(unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertTrue(unresolvedTypeExpression0.matchesStringContext());
      assertTrue(unresolvedTypeExpression0.isNullable());
      assertFalse(unresolvedTypeExpression0.isCheckedUnknownType());
      assertFalse(unresolvedTypeExpression0.isStringValueType());
      assertFalse(unresolvedTypeExpression0.isInterface());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isBooleanValueType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isNoType());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(unionType0);
      
      UnknownType unknownType0 = (UnknownType)unionType0.meet(unresolvedTypeExpression0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(3104, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNumber());
      assertEquals(12717088, node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCall());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isIf());
      assertEquals(3104, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isComma());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertTrue(unresolvedTypeExpression0.matchesObjectContext());
      assertFalse(unresolvedTypeExpression0.isConstructor());
      assertFalse(unresolvedTypeExpression0.isParameterizedType());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      assertTrue(unresolvedTypeExpression0.isUnknownType());
      assertFalse(unresolvedTypeExpression0.isFunctionPrototypeType());
      assertFalse(unresolvedTypeExpression0.isUnionType());
      assertFalse(unresolvedTypeExpression0.isNumberValueType());
      assertFalse(unresolvedTypeExpression0.isRecordType());
      assertFalse(unresolvedTypeExpression0.hasCachedValues());
      assertFalse(unresolvedTypeExpression0.isNominalType());
      assertFalse(unresolvedTypeExpression0.isFunctionType());
      assertFalse(unresolvedTypeExpression0.isNominalConstructor());
      assertTrue(unresolvedTypeExpression0.isObject());
      assertEquals(Integer.MAX_VALUE, unresolvedTypeExpression0.getPropertiesCount());
      assertFalse(unresolvedTypeExpression0.isNativeObjectType());
      assertFalse(unresolvedTypeExpression0.isNoType());
      assertFalse(unresolvedTypeExpression0.isNullType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertTrue(unresolvedTypeExpression0.canBeCalled());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertFalse(unresolvedTypeExpression0.isEnumElementType());
      assertFalse(unresolvedTypeExpression0.isTemplateType());
      assertFalse(unresolvedTypeExpression0.isEnumType());
      assertTrue(unresolvedTypeExpression0.matchesNumberContext());
      assertFalse(unresolvedTypeExpression0.isBooleanValueType());
      assertFalse(unresolvedTypeExpression0.hasReferenceName());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertTrue(unresolvedTypeExpression0.hasDisplayName());
      assertFalse(unresolvedTypeExpression0.isVoidType());
      assertFalse(unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertTrue(unresolvedTypeExpression0.matchesStringContext());
      assertTrue(unresolvedTypeExpression0.isNullable());
      assertFalse(unresolvedTypeExpression0.isCheckedUnknownType());
      assertFalse(unresolvedTypeExpression0.isStringValueType());
      assertFalse(unresolvedTypeExpression0.isInterface());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isBooleanValueType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isNoType());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isConstructor());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isNominalType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNativeObjectType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isNoObjectType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isNoType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNoResolvedType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isParameterizedType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(unknownType0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(voidType0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.VOID_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNative0;
      jSTypeNativeArray0[2] = jSTypeNativeArray0[1];
      jSTypeNativeArray0[3] = jSTypeNative0;
      jSTypeNativeArray0[4] = jSTypeNative0;
      jSTypeNativeArray0[5] = jSTypeNativeArray0[4];
      JSTypeNative jSTypeNative1 = JSTypeNative.CHECKED_UNKNOWN_TYPE;
      jSTypeNativeArray0[6] = jSTypeNative1;
      jSTypeNativeArray0[7] = jSTypeNativeArray0[6];
      UnknownType unknownType0 = (UnknownType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isRecordType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isParameterizedType());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNoResolvedType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isNumberValueType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isNullType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(unknownType0);
      assertEquals(8, jSTypeNativeArray0.length);
      
      boolean boolean0 = voidType0.differsFrom(unknownType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isRecordType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isParameterizedType());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNoResolvedType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isNumberValueType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isNullType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNominalConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(boolean0);
      assertEquals(8, jSTypeNativeArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isNominalConstructor());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNullType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(numberType0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertTrue(voidType0.matchesStringContext());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesNumberContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(voidType0);
      
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderShallowInequality(numberType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isNominalConstructor());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNullType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isEnumType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertTrue(voidType0.matchesStringContext());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesNumberContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType_TypePair0);
      
      boolean boolean0 = jSType_TypePair0.typeA.differsFrom(numberType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isNominalConstructor());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNullType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isEnumType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertTrue(voidType0.matchesStringContext());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesNumberContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      Node node0 = Node.newString("length", 3104, 3104);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertEquals(3104, node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetProp());
      assertEquals(3104, node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(12717088, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotNull(node0);
      
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, "length");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertEquals(3104, node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetProp());
      assertEquals(3104, node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(12717088, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(unresolvedTypeExpression0.isCheckedUnknownType());
      assertFalse(unresolvedTypeExpression0.isStringValueType());
      assertTrue(unresolvedTypeExpression0.hasDisplayName());
      assertTrue(unresolvedTypeExpression0.matchesStringContext());
      assertFalse(unresolvedTypeExpression0.isNumberValueType());
      assertFalse(unresolvedTypeExpression0.isUnionType());
      assertTrue(unresolvedTypeExpression0.isObject());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(Integer.MAX_VALUE, unresolvedTypeExpression0.getPropertiesCount());
      assertFalse(unresolvedTypeExpression0.isNoType());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertFalse(unresolvedTypeExpression0.isVoidType());
      assertFalse(unresolvedTypeExpression0.isNominalConstructor());
      assertTrue(unresolvedTypeExpression0.isNullable());
      assertFalse(unresolvedTypeExpression0.isNominalType());
      assertTrue(unresolvedTypeExpression0.matchesObjectContext());
      assertTrue(unresolvedTypeExpression0.isUnknownType());
      assertFalse(unresolvedTypeExpression0.isEnumElementType());
      assertTrue(unresolvedTypeExpression0.canBeCalled());
      assertFalse(unresolvedTypeExpression0.isParameterizedType());
      assertFalse(unresolvedTypeExpression0.hasReferenceName());
      assertFalse(unresolvedTypeExpression0.isFunctionType());
      assertFalse(unresolvedTypeExpression0.isOrdinaryFunction());
      assertFalse(unresolvedTypeExpression0.isNativeObjectType());
      assertFalse(unresolvedTypeExpression0.isTemplateType());
      assertTrue(unresolvedTypeExpression0.matchesNumberContext());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertFalse(unresolvedTypeExpression0.isNullType());
      assertFalse(unresolvedTypeExpression0.isInterface());
      assertFalse(unresolvedTypeExpression0.isFunctionPrototypeType());
      assertFalse(unresolvedTypeExpression0.isEnumType());
      assertFalse(unresolvedTypeExpression0.isBooleanValueType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertFalse(unresolvedTypeExpression0.isRecordType());
      assertFalse(unresolvedTypeExpression0.isConstructor());
      assertFalse(unresolvedTypeExpression0.hasCachedValues());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(unresolvedTypeExpression0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "}");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isInterface());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(arrowType0);
      
      boolean boolean0 = unresolvedTypeExpression0.differsFrom(arrowType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertEquals(3104, node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetProp());
      assertEquals(3104, node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(12717088, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(unresolvedTypeExpression0.isCheckedUnknownType());
      assertFalse(unresolvedTypeExpression0.isStringValueType());
      assertTrue(unresolvedTypeExpression0.hasDisplayName());
      assertTrue(unresolvedTypeExpression0.matchesStringContext());
      assertFalse(unresolvedTypeExpression0.isNumberValueType());
      assertFalse(unresolvedTypeExpression0.isUnionType());
      assertTrue(unresolvedTypeExpression0.isObject());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(Integer.MAX_VALUE, unresolvedTypeExpression0.getPropertiesCount());
      assertFalse(unresolvedTypeExpression0.isNoType());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertFalse(unresolvedTypeExpression0.isVoidType());
      assertFalse(unresolvedTypeExpression0.isNominalConstructor());
      assertTrue(unresolvedTypeExpression0.isNullable());
      assertFalse(unresolvedTypeExpression0.isNominalType());
      assertTrue(unresolvedTypeExpression0.matchesObjectContext());
      assertTrue(unresolvedTypeExpression0.isUnknownType());
      assertFalse(unresolvedTypeExpression0.isEnumElementType());
      assertTrue(unresolvedTypeExpression0.canBeCalled());
      assertFalse(unresolvedTypeExpression0.isParameterizedType());
      assertFalse(unresolvedTypeExpression0.hasReferenceName());
      assertFalse(unresolvedTypeExpression0.isFunctionType());
      assertFalse(unresolvedTypeExpression0.isOrdinaryFunction());
      assertFalse(unresolvedTypeExpression0.isNativeObjectType());
      assertFalse(unresolvedTypeExpression0.isTemplateType());
      assertTrue(unresolvedTypeExpression0.matchesNumberContext());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertFalse(unresolvedTypeExpression0.isNullType());
      assertFalse(unresolvedTypeExpression0.isInterface());
      assertFalse(unresolvedTypeExpression0.isFunctionPrototypeType());
      assertFalse(unresolvedTypeExpression0.isEnumType());
      assertFalse(unresolvedTypeExpression0.isBooleanValueType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertFalse(unresolvedTypeExpression0.isRecordType());
      assertFalse(unresolvedTypeExpression0.isConstructor());
      assertFalse(unresolvedTypeExpression0.hasCachedValues());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isInterface());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(voidType0);
      
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderShallowInequality(voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNominalConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isEnumType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(voidType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(jSType0);
      
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderShallowInequality(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNominalConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isEnumType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isConstructor());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(jSType_TypePair0);
      
      JSType.TypePair jSType_TypePair1 = jSType_TypePair0.typeB.getTypesUnderShallowInequality(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNominalConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isEnumType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isConstructor());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(jSType_TypePair0, jSType_TypePair1);
      assertNotSame(jSType_TypePair1, jSType_TypePair0);
      assertNotNull(jSType_TypePair1);
      assertFalse(jSType_TypePair1.equals((Object)jSType_TypePair0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertTrue(booleanType0.matchesNumberContext());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isEnumElementType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(booleanType0);
      
      JSType jSType0 = jSTypeRegistry0.createNullableType(booleanType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertTrue(booleanType0.matchesNumberContext());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(jSType0);
      
      JSType.TypePair jSType_TypePair0 = booleanType0.getTypesUnderInequality(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertTrue(booleanType0.matchesNumberContext());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isConstructor());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isStringValueType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNullable());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isVoidType());
      assertTrue(booleanType0.isBooleanValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(booleanType0);
      
      JSType jSType0 = booleanType0.getRestrictedTypeGivenToBooleanOutcome(true);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isConstructor());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isStringValueType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNullable());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isVoidType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isRecordType());
      assertEquals("boolean", jSType0.getDisplayName());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isInterface());
      assertTrue(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNullable());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isParameterizedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(booleanType0, jSType0);
      assertSame(jSType0, booleanType0);
      assertNotNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isFunctionType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(nullType0);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, nullType0, "Not declared as a constructor");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isFunctionType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNullType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isUnionType());
      assertEquals("Not declared as a constructor", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isResolved());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(enumElementType0);
      
      NoType noType0 = (NoType)enumElementType0.getRestrictedTypeGivenToBooleanOutcome(false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isFunctionType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNullType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isUnionType());
      assertEquals("Not declared as a constructor", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isResolved());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.canBeCalled());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isStringValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noType0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isOrdinaryFunction());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isConstructor());
      assertEquals("number", numberType0.getDisplayName());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isParameterizedType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isAllType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(numberType0);
      
      JSType jSType0 = numberType0.getLeastSupertype(noResolvedType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isConstructor());
      assertEquals("number", numberType0.getDisplayName());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isParameterizedType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isAllType());
      assertFalse(jSType0.isNullType());
      assertEquals("number", jSType0.getDisplayName());
      assertFalse(jSType0.isNullable());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.isNumberValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isParameterizedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(numberType0, jSType0);
      assertSame(jSType0, numberType0);
      assertNotNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesObjectContext());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isFunctionType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(voidType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderShallowEquality(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesObjectContext());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isFunctionType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isVoidType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNullType());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isUnionType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isCheckedUnknownType());
      assertTrue(numberType0.isNumberValueType());
      assertTrue(numberType0.matchesStringContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(numberType0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(voidType0);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "Unknown class name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isParameterizedType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isNullType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(enumElementType0);
      
      boolean boolean0 = enumElementType0.canTestForShallowEqualityWith(numberType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isVoidType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNullType());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isUnionType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isCheckedUnknownType());
      assertTrue(numberType0.isNumberValueType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertEquals("Unknown class name", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isParameterizedType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isNullType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.isNominalType());
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNoResolvedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(voidType0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>(0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(recordType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNoResolvedType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.hasCachedValues());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(recordType0);
      
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderShallowEquality(recordType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNoResolvedType());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(recordType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNoResolvedType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isEnumType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNullType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isCheckedUnknownType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(voidType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(jSType0.isUnionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType0);
      
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderShallowEquality(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNullType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isCheckedUnknownType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(jSType0.isUnionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      
      ObjectType objectType0 = jSTypeRegistry0.findCommonSuperObject(errorFunctionType0, noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(objectType0.isNoType());
      assertTrue(objectType0.matchesObjectContext());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isNoResolvedType());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isAllType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isTemplateType());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isVoidType());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isParameterizedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(objectType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(objectType0.isNoType());
      assertTrue(objectType0.matchesObjectContext());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isNoResolvedType());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isAllType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isTemplateType());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isVoidType());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isNullType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(parameterizedType0);
      
      boolean boolean0 = parameterizedType0.canTestForShallowEqualityWith(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(objectType0.isNoType());
      assertTrue(objectType0.matchesObjectContext());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isNoResolvedType());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isAllType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isTemplateType());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isVoidType());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isNullType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isEnumType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      Node node0 = Node.newNumber(0.0);
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertEquals(39, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node0);
      
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, "Not declared as a type name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertEquals(39, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(unresolvedTypeExpression0.isNominalConstructor());
      assertFalse(unresolvedTypeExpression0.isEnumType());
      assertFalse(unresolvedTypeExpression0.isVoidType());
      assertFalse(unresolvedTypeExpression0.isEnumElementType());
      assertFalse(unresolvedTypeExpression0.isCheckedUnknownType());
      assertFalse(unresolvedTypeExpression0.isStringValueType());
      assertFalse(unresolvedTypeExpression0.isNullType());
      assertFalse(unresolvedTypeExpression0.isNominalType());
      assertFalse(unresolvedTypeExpression0.isParameterizedType());
      assertFalse(unresolvedTypeExpression0.isTemplateType());
      assertTrue(unresolvedTypeExpression0.matchesNumberContext());
      assertTrue(unresolvedTypeExpression0.matchesStringContext());
      assertFalse(unresolvedTypeExpression0.isFunctionType());
      assertTrue(unresolvedTypeExpression0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertFalse(unresolvedTypeExpression0.isOrdinaryFunction());
      assertTrue(unresolvedTypeExpression0.isUnknownType());
      assertFalse(unresolvedTypeExpression0.hasReferenceName());
      assertFalse(unresolvedTypeExpression0.isConstructor());
      assertTrue(unresolvedTypeExpression0.matchesObjectContext());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertFalse(unresolvedTypeExpression0.isNativeObjectType());
      assertFalse(unresolvedTypeExpression0.isNoType());
      assertTrue(unresolvedTypeExpression0.isNullable());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertFalse(unresolvedTypeExpression0.isInterface());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertTrue(unresolvedTypeExpression0.isObject());
      assertEquals(Integer.MAX_VALUE, unresolvedTypeExpression0.getPropertiesCount());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      assertTrue(unresolvedTypeExpression0.hasDisplayName());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertFalse(unresolvedTypeExpression0.hasCachedValues());
      assertFalse(unresolvedTypeExpression0.isUnionType());
      assertFalse(unresolvedTypeExpression0.isRecordType());
      assertFalse(unresolvedTypeExpression0.isBooleanValueType());
      assertFalse(unresolvedTypeExpression0.isFunctionPrototypeType());
      assertFalse(unresolvedTypeExpression0.isNumberValueType());
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(unresolvedTypeExpression0);
      
      UnknownType unknownType0 = (UnknownType)unresolvedTypeExpression0.getGreatestSubtype((JSType) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertEquals(39, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(unresolvedTypeExpression0.isNominalConstructor());
      assertFalse(unresolvedTypeExpression0.isEnumType());
      assertFalse(unresolvedTypeExpression0.isVoidType());
      assertFalse(unresolvedTypeExpression0.isEnumElementType());
      assertFalse(unresolvedTypeExpression0.isCheckedUnknownType());
      assertFalse(unresolvedTypeExpression0.isStringValueType());
      assertFalse(unresolvedTypeExpression0.isNullType());
      assertFalse(unresolvedTypeExpression0.isNominalType());
      assertFalse(unresolvedTypeExpression0.isParameterizedType());
      assertFalse(unresolvedTypeExpression0.isTemplateType());
      assertTrue(unresolvedTypeExpression0.matchesNumberContext());
      assertTrue(unresolvedTypeExpression0.matchesStringContext());
      assertFalse(unresolvedTypeExpression0.isFunctionType());
      assertTrue(unresolvedTypeExpression0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertFalse(unresolvedTypeExpression0.isOrdinaryFunction());
      assertTrue(unresolvedTypeExpression0.isUnknownType());
      assertFalse(unresolvedTypeExpression0.hasReferenceName());
      assertFalse(unresolvedTypeExpression0.isConstructor());
      assertTrue(unresolvedTypeExpression0.matchesObjectContext());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertFalse(unresolvedTypeExpression0.isNativeObjectType());
      assertFalse(unresolvedTypeExpression0.isNoType());
      assertTrue(unresolvedTypeExpression0.isNullable());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertFalse(unresolvedTypeExpression0.isInterface());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertTrue(unresolvedTypeExpression0.isObject());
      assertEquals(Integer.MAX_VALUE, unresolvedTypeExpression0.getPropertiesCount());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      assertTrue(unresolvedTypeExpression0.hasDisplayName());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertFalse(unresolvedTypeExpression0.hasCachedValues());
      assertFalse(unresolvedTypeExpression0.isUnionType());
      assertFalse(unresolvedTypeExpression0.isRecordType());
      assertFalse(unresolvedTypeExpression0.isBooleanValueType());
      assertFalse(unresolvedTypeExpression0.isFunctionPrototypeType());
      assertFalse(unresolvedTypeExpression0.isNumberValueType());
      assertFalse(unknownType0.hasCachedValues());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isConstructor());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isNominalType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNumberValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isNominalConstructor());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isParameterizedType());
      assertFalse(unknownType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(unknownType0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isResolved());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(voidType0);
      
      boolean boolean0 = voidType0.canTestForShallowEqualityWith(voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isResolved());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isUnionType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isNoType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isRecordType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isOrdinaryFunction());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isBooleanValueType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(numberType0);
      
      JSType jSType0 = JSType.getLeastSupertype((JSType) numberType0, (JSType) numberType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isUnionType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isNoType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isRecordType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isOrdinaryFunction());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isBooleanValueType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isVoidType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertEquals("number", jSType0.getDisplayName());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isParameterizedType());
      assertTrue(jSType0.isNumberValueType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNullable());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNoType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(numberType0, jSType0);
      assertSame(jSType0, numberType0);
      assertNotNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      Node node0 = Node.newString("}y", 3104, 3104);
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isStringKey());
      assertEquals(3104, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(3104, node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(12717088, node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotNull(node0);
      
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, "}y");
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isStringKey());
      assertEquals(3104, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(3104, node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(12717088, node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(unresolvedTypeExpression0.isTemplateType());
      assertTrue(unresolvedTypeExpression0.matchesNumberContext());
      assertFalse(unresolvedTypeExpression0.isBooleanValueType());
      assertFalse(unresolvedTypeExpression0.isNullType());
      assertFalse(unresolvedTypeExpression0.isNativeObjectType());
      assertFalse(unresolvedTypeExpression0.hasCachedValues());
      assertTrue(unresolvedTypeExpression0.canBeCalled());
      assertFalse(unresolvedTypeExpression0.isOrdinaryFunction());
      assertFalse(unresolvedTypeExpression0.isEnumElementType());
      assertFalse(unresolvedTypeExpression0.isNominalConstructor());
      assertFalse(unresolvedTypeExpression0.hasReferenceName());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertTrue(unresolvedTypeExpression0.isUnknownType());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertFalse(unresolvedTypeExpression0.isNominalType());
      assertFalse(unresolvedTypeExpression0.isNoType());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertFalse(unresolvedTypeExpression0.isFunctionType());
      assertTrue(unresolvedTypeExpression0.isObject());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(Integer.MAX_VALUE, unresolvedTypeExpression0.getPropertiesCount());
      assertTrue(unresolvedTypeExpression0.isNullable());
      assertFalse(unresolvedTypeExpression0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertFalse(unresolvedTypeExpression0.isCheckedUnknownType());
      assertFalse(unresolvedTypeExpression0.isStringValueType());
      assertTrue(unresolvedTypeExpression0.hasDisplayName());
      assertTrue(unresolvedTypeExpression0.matchesStringContext());
      assertFalse(unresolvedTypeExpression0.isUnionType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertFalse(unresolvedTypeExpression0.isParameterizedType());
      assertFalse(unresolvedTypeExpression0.isInterface());
      assertFalse(unresolvedTypeExpression0.isConstructor());
      assertTrue(unresolvedTypeExpression0.matchesObjectContext());
      assertFalse(unresolvedTypeExpression0.isFunctionPrototypeType());
      assertFalse(unresolvedTypeExpression0.isRecordType());
      assertFalse(unresolvedTypeExpression0.isEnumType());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertFalse(unresolvedTypeExpression0.isVoidType());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(unresolvedTypeExpression0);
      
      JSType jSType0 = unresolvedTypeExpression0.resolveInternal(simpleErrorReporter0, (StaticScope<JSType>) null);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isStringKey());
      assertEquals(3104, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(3104, node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(12717088, node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(unresolvedTypeExpression0.isTemplateType());
      assertTrue(unresolvedTypeExpression0.matchesNumberContext());
      assertFalse(unresolvedTypeExpression0.isBooleanValueType());
      assertFalse(unresolvedTypeExpression0.isNullType());
      assertFalse(unresolvedTypeExpression0.isNativeObjectType());
      assertFalse(unresolvedTypeExpression0.hasCachedValues());
      assertTrue(unresolvedTypeExpression0.canBeCalled());
      assertFalse(unresolvedTypeExpression0.isOrdinaryFunction());
      assertFalse(unresolvedTypeExpression0.isEnumElementType());
      assertFalse(unresolvedTypeExpression0.isNominalConstructor());
      assertFalse(unresolvedTypeExpression0.hasReferenceName());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertTrue(unresolvedTypeExpression0.isUnknownType());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertFalse(unresolvedTypeExpression0.isNominalType());
      assertFalse(unresolvedTypeExpression0.isNoType());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertFalse(unresolvedTypeExpression0.isFunctionType());
      assertTrue(unresolvedTypeExpression0.isObject());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(Integer.MAX_VALUE, unresolvedTypeExpression0.getPropertiesCount());
      assertTrue(unresolvedTypeExpression0.isNullable());
      assertFalse(unresolvedTypeExpression0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertFalse(unresolvedTypeExpression0.isCheckedUnknownType());
      assertFalse(unresolvedTypeExpression0.isStringValueType());
      assertTrue(unresolvedTypeExpression0.hasDisplayName());
      assertTrue(unresolvedTypeExpression0.matchesStringContext());
      assertFalse(unresolvedTypeExpression0.isUnionType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertFalse(unresolvedTypeExpression0.isParameterizedType());
      assertFalse(unresolvedTypeExpression0.isInterface());
      assertFalse(unresolvedTypeExpression0.isConstructor());
      assertTrue(unresolvedTypeExpression0.matchesObjectContext());
      assertFalse(unresolvedTypeExpression0.isFunctionPrototypeType());
      assertFalse(unresolvedTypeExpression0.isRecordType());
      assertFalse(unresolvedTypeExpression0.isEnumType());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertFalse(unresolvedTypeExpression0.isVoidType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isFunctionType());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(jSType0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isTemplateType());
      assertTrue(numberType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isEnumType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isUnionType());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isBooleanValueType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isCheckedUnknownType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoObjectType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(numberType0);
      
      JSType jSType1 = numberType0.getLeastSupertype(jSType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isStringKey());
      assertEquals(3104, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(3104, node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(12717088, node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(unresolvedTypeExpression0.isTemplateType());
      assertTrue(unresolvedTypeExpression0.matchesNumberContext());
      assertFalse(unresolvedTypeExpression0.isBooleanValueType());
      assertFalse(unresolvedTypeExpression0.isNullType());
      assertFalse(unresolvedTypeExpression0.isNativeObjectType());
      assertFalse(unresolvedTypeExpression0.hasCachedValues());
      assertTrue(unresolvedTypeExpression0.canBeCalled());
      assertFalse(unresolvedTypeExpression0.isOrdinaryFunction());
      assertFalse(unresolvedTypeExpression0.isEnumElementType());
      assertFalse(unresolvedTypeExpression0.isNominalConstructor());
      assertFalse(unresolvedTypeExpression0.hasReferenceName());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertTrue(unresolvedTypeExpression0.isUnknownType());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertFalse(unresolvedTypeExpression0.isNominalType());
      assertFalse(unresolvedTypeExpression0.isNoType());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertFalse(unresolvedTypeExpression0.isFunctionType());
      assertTrue(unresolvedTypeExpression0.isObject());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(Integer.MAX_VALUE, unresolvedTypeExpression0.getPropertiesCount());
      assertTrue(unresolvedTypeExpression0.isNullable());
      assertFalse(unresolvedTypeExpression0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertFalse(unresolvedTypeExpression0.isCheckedUnknownType());
      assertFalse(unresolvedTypeExpression0.isStringValueType());
      assertTrue(unresolvedTypeExpression0.hasDisplayName());
      assertTrue(unresolvedTypeExpression0.matchesStringContext());
      assertFalse(unresolvedTypeExpression0.isUnionType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertFalse(unresolvedTypeExpression0.isParameterizedType());
      assertFalse(unresolvedTypeExpression0.isInterface());
      assertFalse(unresolvedTypeExpression0.isConstructor());
      assertTrue(unresolvedTypeExpression0.matchesObjectContext());
      assertFalse(unresolvedTypeExpression0.isFunctionPrototypeType());
      assertFalse(unresolvedTypeExpression0.isRecordType());
      assertFalse(unresolvedTypeExpression0.isEnumType());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertFalse(unresolvedTypeExpression0.isVoidType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isTemplateType());
      assertTrue(numberType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isEnumType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isUnionType());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isBooleanValueType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isCheckedUnknownType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(jSType1.isNullType());
      assertFalse(jSType1.isEnumType());
      assertFalse(jSType1.isRecordType());
      assertFalse(jSType1.isTemplateType());
      assertFalse(jSType1.isBooleanValueType());
      assertFalse(jSType1.isConstructor());
      assertFalse(jSType1.isParameterizedType());
      assertFalse(jSType1.isOrdinaryFunction());
      assertFalse(jSType1.isCheckedUnknownType());
      assertFalse(jSType1.isFunctionType());
      assertFalse(jSType1.isStringValueType());
      assertFalse(jSType1.isNumberValueType());
      assertFalse(jSType1.isResolved());
      assertFalse(jSType1.isNoResolvedType());
      assertFalse(jSType1.isFunctionPrototypeType());
      assertFalse(jSType1.isVoidType());
      assertFalse(jSType1.isNoType());
      assertTrue(jSType1.isUnionType());
      assertFalse(jSType1.isEnumElementType());
      assertFalse(jSType1.isAllType());
      assertFalse(jSType1.isNoObjectType());
      assertFalse(jSType1.isInterface());
      assertFalse(jSType1.isNominalType());
      assertFalse(jSType1.isNominalConstructor());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(jSType0, jSType1);
      assertNotSame(jSType1, jSType0);
      assertNotNull(jSType1);
      assertFalse(jSType1.equals((Object)jSType0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(voidType0);
      
      NoType noType0 = (NoType)voidType0.restrictByNotNullOrUndefined();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isObject());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isNoType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noType0);
      
      boolean boolean0 = voidType0.canTestForShallowEqualityWith(noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isObject());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.hasCachedValues());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isConstructor());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(voidType0);
      
      NoType noType0 = (NoType)voidType0.restrictByNotNullOrUndefined();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isConstructor());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isStringValueType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noType0);
      
      boolean boolean0 = noType0.canTestForShallowEqualityWith(voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isConstructor());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isStringValueType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isOrdinaryFunction());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(unionType0);
      
      NoType noType0 = (NoType)unionType0.getRestrictedTypeGivenToBooleanOutcome(false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isOrdinaryFunction());
      assertTrue(noType0.canBeCalled());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noType0);
      
      noType0.testForEqualityHelper(unionType0, unionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isOrdinaryFunction());
      assertTrue(noType0.canBeCalled());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "w~K+pY*_");
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isBooleanValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(voidType0);
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, voidType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(proxyObjectType0.isCheckedUnknownType());
      assertFalse(proxyObjectType0.hasCachedValues());
      assertFalse(proxyObjectType0.isNominalType());
      assertFalse(proxyObjectType0.isFunctionPrototypeType());
      assertFalse(proxyObjectType0.isFunctionType());
      assertFalse(proxyObjectType0.isRecordType());
      assertFalse(proxyObjectType0.isTemplateType());
      assertFalse(proxyObjectType0.isNoObjectType());
      assertFalse(proxyObjectType0.isInterface());
      assertFalse(proxyObjectType0.isAllType());
      assertFalse(proxyObjectType0.isParameterizedType());
      assertFalse(proxyObjectType0.isNoType());
      assertFalse(proxyObjectType0.isStringValueType());
      assertFalse(proxyObjectType0.isResolved());
      assertFalse(proxyObjectType0.isConstructor());
      assertFalse(proxyObjectType0.isOrdinaryFunction());
      assertFalse(proxyObjectType0.isNominalConstructor());
      assertFalse(proxyObjectType0.isVoidType());
      assertFalse(proxyObjectType0.isNumberValueType());
      assertFalse(proxyObjectType0.isUnionType());
      assertFalse(proxyObjectType0.isEnumElementType());
      assertFalse(proxyObjectType0.isNoResolvedType());
      assertFalse(proxyObjectType0.isEnumType());
      assertFalse(proxyObjectType0.isNullType());
      assertFalse(proxyObjectType0.isBooleanValueType());
      assertFalse(proxyObjectType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(proxyObjectType0.isObject());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(proxyObjectType0);
      
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality(proxyObjectType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(proxyObjectType0.isCheckedUnknownType());
      assertFalse(proxyObjectType0.hasCachedValues());
      assertFalse(proxyObjectType0.isNominalType());
      assertFalse(proxyObjectType0.isFunctionPrototypeType());
      assertFalse(proxyObjectType0.isFunctionType());
      assertFalse(proxyObjectType0.isRecordType());
      assertFalse(proxyObjectType0.isTemplateType());
      assertFalse(proxyObjectType0.isNoObjectType());
      assertFalse(proxyObjectType0.isInterface());
      assertFalse(proxyObjectType0.isAllType());
      assertFalse(proxyObjectType0.isParameterizedType());
      assertFalse(proxyObjectType0.isNoType());
      assertFalse(proxyObjectType0.isStringValueType());
      assertFalse(proxyObjectType0.isResolved());
      assertFalse(proxyObjectType0.isConstructor());
      assertFalse(proxyObjectType0.isOrdinaryFunction());
      assertFalse(proxyObjectType0.isNominalConstructor());
      assertFalse(proxyObjectType0.isVoidType());
      assertFalse(proxyObjectType0.isNumberValueType());
      assertFalse(proxyObjectType0.isUnionType());
      assertFalse(proxyObjectType0.isEnumElementType());
      assertFalse(proxyObjectType0.isNoResolvedType());
      assertFalse(proxyObjectType0.isEnumType());
      assertFalse(proxyObjectType0.isNullType());
      assertFalse(proxyObjectType0.isBooleanValueType());
      assertFalse(proxyObjectType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(proxyObjectType0.isObject());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type ith empty name compoUent");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isTemplateType());
      assertTrue(numberType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isCheckedUnknownType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isEnumType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isUnionType());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isInterface());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(numberType0);
      
      numberType0.testForEquality(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isTemplateType());
      assertTrue(numberType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isCheckedUnknownType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isEnumType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isUnionType());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isInterface());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.matchesNumberContext());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNominalType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isResolved());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(voidType0);
      
      NoType noType0 = (NoType)voidType0.restrictByNotNullOrUndefined();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.matchesNumberContext());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNominalType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isResolved());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isResolved());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNominalConstructor());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.isNoType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noType0);
      
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderShallowInequality(noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.matchesNumberContext());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNominalType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isResolved());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isResolved());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNominalConstructor());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.isNoType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType_TypePair0);
      
      JSType.TypePair jSType_TypePair1 = noType0.getTypesUnderEquality(jSType_TypePair0.typeB);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.matchesNumberContext());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNominalType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isResolved());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.hasCachedValues());
      assertFalse(noType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isResolved());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNominalConstructor());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.isNoType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(jSType_TypePair0, jSType_TypePair1);
      assertNotSame(jSType_TypePair1, jSType_TypePair0);
      assertNotNull(jSType_TypePair1);
      assertFalse(jSType_TypePair1.equals((Object)jSType_TypePair0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(voidType0);
      
      NoType noType0 = (NoType)voidType0.restrictByNotNullOrUndefined();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isParameterizedType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isStringValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noType0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isNullable());
      assertTrue(booleanType0.isBooleanValueType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isParameterizedType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isResolved());
      assertTrue(booleanType0.matchesNumberContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(booleanType0);
      
      JSType.TypePair jSType_TypePair0 = booleanType0.getTypesUnderInequality(noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.hasCachedValues());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isParameterizedType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isNullable());
      assertTrue(booleanType0.isBooleanValueType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isParameterizedType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isResolved());
      assertTrue(booleanType0.matchesNumberContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isStringValueType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(voidType0);
      
      NoType noType0 = (NoType)voidType0.restrictByNotNullOrUndefined();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isStringValueType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isEnumType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isOrdinaryFunction());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noType0);
      
      JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderInequality(voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isStringValueType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isEnumType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.hasCachedValues());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isOrdinaryFunction());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(voidType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      
      JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderEquality(voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isAllType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "~7](]A%w8inYU+ZPAK", "~7](]A%w8inYU+ZPAK", (-261), (-261));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isInterface());
      assertEquals("~7](]A%w8inYU+ZPAK", namedType0.getReferenceName());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isEnumElementType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isConstructor());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNativeObjectType());
      assertTrue(namedType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(namedType0);
      
      UnknownType unknownType0 = (UnknownType)namedType0.getReferencedType();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isInterface());
      assertEquals("~7](]A%w8inYU+ZPAK", namedType0.getReferenceName());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isEnumElementType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isConstructor());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNativeObjectType());
      assertTrue(namedType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.isNullable());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isParameterizedType());
      assertFalse(unknownType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNoResolvedType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.isObject());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(unknownType0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "~7](]A%w8inYU+ZPAK");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isBooleanValueType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isNullType());
      assertEquals("number", numberType0.getDisplayName());
      assertTrue(numberType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isResolved());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isConstructor());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(numberType0);
      
      errorFunctionType0.testForEqualityHelper(unknownType0, numberType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isInterface());
      assertEquals("~7](]A%w8inYU+ZPAK", namedType0.getReferenceName());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isEnumElementType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isConstructor());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNativeObjectType());
      assertTrue(namedType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.isNullable());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isParameterizedType());
      assertFalse(unknownType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNoResolvedType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.isObject());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isBooleanValueType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isNullType());
      assertEquals("number", numberType0.getDisplayName());
      assertTrue(numberType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isResolved());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isConstructor());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType0);
      
      JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderEquality(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "~7](]A%w8inYU+ZPAK", "~7](]A%w8inYU+ZPAK", (-261), (-261));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.hasCachedValues());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isNullType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isOrdinaryFunction());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isBooleanValueType());
      assertEquals("~7](]A%w8inYU+ZPAK", namedType0.getReferenceName());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isAllType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(namedType0);
      
      UnknownType unknownType0 = (UnknownType)namedType0.getReferencedType();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.hasCachedValues());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isNullType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isOrdinaryFunction());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isBooleanValueType());
      assertEquals("~7](]A%w8inYU+ZPAK", namedType0.getReferenceName());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isAllType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isRecordType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasCachedValues());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.hasDisplayName());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.isNullable());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isParameterizedType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(unknownType0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNominalType());
      assertTrue(booleanType0.isBooleanValueType());
      assertTrue(booleanType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isParameterizedType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isNullType());
      assertTrue(booleanType0.matchesNumberContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(booleanType0);
      
      JSType.TypePair jSType_TypePair0 = booleanType0.getTypesUnderInequality(unknownType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.hasCachedValues());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isNullType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isOrdinaryFunction());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isBooleanValueType());
      assertEquals("~7](]A%w8inYU+ZPAK", namedType0.getReferenceName());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isAllType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isRecordType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasCachedValues());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.hasDisplayName());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.isNullable());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isParameterizedType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNominalType());
      assertTrue(booleanType0.isBooleanValueType());
      assertTrue(booleanType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isParameterizedType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isNullType());
      assertTrue(booleanType0.matchesNumberContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isStringValueType());
      assertTrue(booleanType0.matchesNumberContext());
      assertTrue(booleanType0.matchesObjectContext());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isNominalConstructor());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isFunctionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(booleanType0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isNumberValueType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isUnionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isBooleanValueType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(allType0);
      
      JSType.TypePair jSType_TypePair0 = booleanType0.getTypesUnderInequality(allType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isStringValueType());
      assertTrue(booleanType0.matchesNumberContext());
      assertTrue(booleanType0.matchesObjectContext());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isNominalConstructor());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isNumberValueType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isUnionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isBooleanValueType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNominalConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isFunctionType());
      assertTrue(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.isEnumType());
      assertTrue(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isAllType());
      assertTrue(indexedType0.isConstructor());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.hasCachedValues());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(indexedType0);
      
      IndexedType indexedType1 = (IndexedType)indexedType0.autobox();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isFunctionType());
      assertTrue(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.isEnumType());
      assertTrue(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isAllType());
      assertTrue(indexedType0.isConstructor());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType1.isFunctionPrototypeType());
      assertFalse(indexedType1.isParameterizedType());
      assertTrue(indexedType1.isObject());
      assertEquals(BooleanLiteralSet.TRUE, indexedType1.getPossibleToBooleanOutcomes());
      assertFalse(indexedType1.isCheckedUnknownType());
      assertFalse(indexedType1.isTemplateType());
      assertFalse(indexedType1.hasReferenceName());
      assertTrue(indexedType1.isNoResolvedType());
      assertFalse(indexedType1.isNominalConstructor());
      assertFalse(indexedType1.isNominalType());
      assertFalse(indexedType1.isEnumElementType());
      assertFalse(indexedType1.isFunctionType());
      assertFalse(indexedType1.isInterface());
      assertFalse(indexedType1.isAllType());
      assertFalse(indexedType1.isNullType());
      assertFalse(indexedType1.isBooleanValueType());
      assertTrue(indexedType1.isNativeObjectType());
      assertFalse(indexedType1.isOrdinaryFunction());
      assertTrue(indexedType1.isConstructor());
      assertFalse(indexedType1.hasCachedValues());
      assertFalse(indexedType1.isNumberValueType());
      assertFalse(indexedType1.isResolved());
      assertFalse(indexedType1.isUnionType());
      assertFalse(indexedType1.isStringValueType());
      assertFalse(indexedType1.isRecordType());
      assertFalse(indexedType1.isNoObjectType());
      assertFalse(indexedType1.isNoType());
      assertFalse(indexedType1.isEnumType());
      assertFalse(indexedType1.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(indexedType0, indexedType1);
      assertSame(indexedType1, indexedType0);
      assertNotNull(indexedType1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.getDisplayName());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isRecordType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(nullType0);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, nullType0, "Named type with empty name component");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.getDisplayName());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isRecordType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isParameterizedType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isFunctionType());
      assertEquals("Named type with empty name component", enumElementType0.getReferenceName());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(enumElementType0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isFunctionType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(voidType0);
      
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderShallowEquality(enumElementType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.getDisplayName());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isRecordType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isParameterizedType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isFunctionType());
      assertEquals("Named type with empty name component", enumElementType0.getReferenceName());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isFunctionType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(jSType_TypePair0);
      
      boolean boolean0 = jSType_TypePair0.typeB.canAssignTo(jSType_TypePair0.typeA);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.getDisplayName());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isRecordType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isParameterizedType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isFunctionType());
      assertEquals("Named type with empty name component", enumElementType0.getReferenceName());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isFunctionType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isNoResolvedType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isInterface());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isEnumElementType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNoType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(numberType0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isNoObjectType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isStringValueType());
      assertTrue(booleanType0.matchesNumberContext());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isNominalConstructor());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(booleanType0);
      
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isNoResolvedType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isInterface());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isEnumElementType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNoType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isNumberValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType0);
      
      boolean boolean0 = jSType0.canAssignTo(booleanType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isNoResolvedType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isInterface());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isEnumElementType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNoType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isNoObjectType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isStringValueType());
      assertTrue(booleanType0.matchesNumberContext());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isParameterizedType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isNominalConstructor());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNoResolvedType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isNumberValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.matchesStringContext());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isTemplateType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isFunctionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(numberType0);
      
      JSType jSType0 = numberType0.findPropertyType("Not declared as a constructor");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.matchesStringContext());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isTemplateType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isFunctionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isInterface());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesObjectContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(stringType0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "6C");
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      Node node0 = errorFunctionType0.getParametersNode();
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertEquals(3, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertEquals(83, node0.getType());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertNotNull(node0);
      
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertEquals(3, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertEquals(83, node0.getType());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isInterface());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(arrowType0);
      
      boolean boolean0 = stringType0.equals(arrowType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isBooleanValueType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isInterface());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertEquals(3, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertEquals(83, node0.getType());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isInterface());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.matchesNumberContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(voidType0);
      
      NoType noType0 = (NoType)voidType0.restrictByNotNullOrUndefined();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.matchesNumberContext());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNominalConstructor());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isBooleanValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noType0);
      
      boolean boolean0 = noType0.equals(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.matchesNumberContext());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNominalConstructor());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isBooleanValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isResolved());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(voidType0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isEnumType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(nullType0);
      
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderShallowInequality(nullType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isResolved());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isEnumType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType_TypePair0);
      
      boolean boolean0 = JSType.isEquivalent(jSType_TypePair0.typeA, voidType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isResolved());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isEnumType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      
      ObjectType objectType0 = jSTypeRegistry0.findCommonSuperObject((ObjectType) null, (ObjectType) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isRecordType());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isFunctionType());
      assertTrue(objectType0.isNativeObjectType());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isNominalConstructor());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isAllType());
      assertTrue(objectType0.isNominalType());
      assertTrue(objectType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isCheckedUnknownType());
      assertTrue(objectType0.isObject());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(objectType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isRecordType());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isFunctionType());
      assertTrue(objectType0.isNativeObjectType());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isNominalConstructor());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isAllType());
      assertTrue(objectType0.isNominalType());
      assertTrue(objectType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isCheckedUnknownType());
      assertTrue(objectType0.isObject());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(parameterizedType0);
      
      boolean boolean0 = parameterizedType0.canTestForShallowEqualityWith(objectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isRecordType());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isFunctionType());
      assertTrue(objectType0.isNativeObjectType());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isNominalConstructor());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isAllType());
      assertTrue(objectType0.isNominalType());
      assertTrue(objectType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isCheckedUnknownType());
      assertTrue(objectType0.isObject());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(voidType0);
      
      NamedType namedType0 = (NamedType)jSTypeRegistry0.createNamedType("Unknown class name", "Named type with empty name component", 0, 1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertTrue(namedType0.hasReferenceName());
      assertTrue(namedType0.isNominalType());
      assertEquals("Unknown class name", namedType0.getReferenceName());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(namedType0);
      
      boolean boolean0 = voidType0.canTestForShallowEqualityWith(namedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertTrue(namedType0.hasReferenceName());
      assertTrue(namedType0.isNominalType());
      assertEquals("Unknown class name", namedType0.getReferenceName());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.VOID_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNativeArray0[0];
      jSTypeNativeArray0[2] = jSTypeNative0;
      jSTypeNativeArray0[3] = jSTypeNativeArray0[1];
      JSTypeNative jSTypeNative1 = JSTypeNative.NO_OBJECT_TYPE;
      jSTypeNativeArray0[4] = jSTypeNative1;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSType[] jSTypeArray0 = new JSType[9];
      TemplateType templateType0 = JSType.toMaybeTemplateType(jSTypeArray0[4]);
      assertNull(templateType0);
      assertEquals(9, jSTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type ith empty name compoUent");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(arrowType0);
      
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) arrowType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNull(templateType0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSType[] jSTypeArray0 = new JSType[9];
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "]2c/k-~jBK");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isObject());
      assertEquals("]2c/k-~jBK", templateType0.getReferenceName());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNominalConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(templateType0);
      
      jSTypeArray0[2] = (JSType) templateType0;
      TemplateType templateType1 = (TemplateType)jSTypeRegistry0.createDefaultObjectUnion(jSTypeArray0[2]);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isResolved());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isNominalConstructor());
      assertFalse(templateType1.isEnumElementType());
      assertTrue(templateType1.isObject());
      assertEquals("]2c/k-~jBK", templateType1.getReferenceName());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isStringValueType());
      assertTrue(templateType1.hasAnyTemplateInternal());
      assertFalse(templateType1.isNullType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isParameterizedType());
      assertFalse(templateType1.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isNumberValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(templateType1, templateType0);
      assertNotNull(templateType1);
      assertEquals(9, jSTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) null);
      assertNull(parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      ObjectType objectType0 = jSTypeRegistry0.findCommonSuperObject(errorFunctionType0, noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertTrue(objectType0.isObject());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isEnumType());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isVoidType());
      assertTrue(objectType0.hasReferenceName());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isResolved());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(objectType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertTrue(objectType0.isObject());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isEnumType());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isVoidType());
      assertTrue(objectType0.hasReferenceName());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isResolved());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isResolved());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(parameterizedType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, parameterizedType0, errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertTrue(objectType0.isObject());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isEnumType());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isVoidType());
      assertTrue(objectType0.hasReferenceName());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isResolved());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isResolved());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isNoResolvedType());
      assertTrue(indexedType0.hasReferenceName());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isNoType());
      assertTrue(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isFunctionType());
      assertTrue(indexedType0.isNominalType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isEnumElementType());
      assertTrue(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(indexedType0);
      
      boolean boolean0 = indexedType0.isParameterizedType();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertTrue(objectType0.isObject());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isEnumType());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isVoidType());
      assertTrue(objectType0.hasReferenceName());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isResolved());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isResolved());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isNoResolvedType());
      assertTrue(indexedType0.hasReferenceName());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isNoType());
      assertTrue(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isFunctionType());
      assertTrue(indexedType0.isNominalType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isEnumElementType());
      assertTrue(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ObjectType objectType0 = jSTypeRegistry0.findCommonSuperObject((ObjectType) null, (ObjectType) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isNominalConstructor());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isParameterizedType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isNumberValueType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isStringValueType());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isRecordType());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isTemplateType());
      assertTrue(objectType0.isObject());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isFunctionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(objectType0);
      
      boolean boolean0 = objectType0.isParameterizedType();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isNominalConstructor());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isParameterizedType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isNumberValueType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isStringValueType());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isRecordType());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isTemplateType());
      assertTrue(objectType0.isObject());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isFunctionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
      assertNull(functionType0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = errorFunctionType0.isGlobalThisType();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      
      FunctionType functionType0 = errorFunctionType0.getBindReturnType(0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      
      boolean boolean0 = functionType0.canTestForShallowEqualityWith(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.matchesNumberContext());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isEnumType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNoResolvedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(voidType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType0);
      
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderShallowInequality(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.matchesNumberContext());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isEnumType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType_TypePair0);
      
      boolean boolean0 = jSType_TypePair0.typeB.canTestForShallowEqualityWith(voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.matchesNumberContext());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isEnumType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isFunctionType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isConstructor());
      assertTrue(voidType0.isVoidType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(voidType0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isNominalConstructor());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.hasReferenceName());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(recordType0);
      
      boolean boolean0 = recordType0.canTestForShallowEqualityWith(voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isFunctionType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isConstructor());
      assertTrue(voidType0.isVoidType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isEnumType());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isNominalConstructor());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNoType());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.hasReferenceName());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isConstructor());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(voidType0);
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, voidType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isConstructor());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNullType());
      assertFalse(proxyObjectType0.isFunctionType());
      assertFalse(proxyObjectType0.isResolved());
      assertFalse(proxyObjectType0.isCheckedUnknownType());
      assertFalse(proxyObjectType0.isNominalType());
      assertFalse(proxyObjectType0.isNullType());
      assertFalse(proxyObjectType0.isAllType());
      assertFalse(proxyObjectType0.isEnumElementType());
      assertFalse(proxyObjectType0.isTemplateType());
      assertFalse(proxyObjectType0.isParameterizedType());
      assertFalse(proxyObjectType0.isStringValueType());
      assertFalse(proxyObjectType0.isNumberValueType());
      assertFalse(proxyObjectType0.isNoResolvedType());
      assertFalse(proxyObjectType0.isUnionType());
      assertTrue(proxyObjectType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(proxyObjectType0.isOrdinaryFunction());
      assertFalse(proxyObjectType0.isVoidType());
      assertFalse(proxyObjectType0.isNominalConstructor());
      assertFalse(proxyObjectType0.isNoType());
      assertFalse(proxyObjectType0.isNoObjectType());
      assertFalse(proxyObjectType0.isInterface());
      assertFalse(proxyObjectType0.isEnumType());
      assertFalse(proxyObjectType0.isConstructor());
      assertFalse(proxyObjectType0.isBooleanValueType());
      assertFalse(proxyObjectType0.isRecordType());
      assertFalse(proxyObjectType0.isNativeObjectType());
      assertFalse(proxyObjectType0.hasCachedValues());
      assertFalse(proxyObjectType0.isFunctionPrototypeType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(proxyObjectType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, proxyObjectType0, voidType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isConstructor());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNullType());
      assertFalse(proxyObjectType0.isFunctionType());
      assertFalse(proxyObjectType0.isResolved());
      assertFalse(proxyObjectType0.isCheckedUnknownType());
      assertFalse(proxyObjectType0.isNominalType());
      assertFalse(proxyObjectType0.isNullType());
      assertFalse(proxyObjectType0.isAllType());
      assertFalse(proxyObjectType0.isEnumElementType());
      assertFalse(proxyObjectType0.isTemplateType());
      assertFalse(proxyObjectType0.isParameterizedType());
      assertFalse(proxyObjectType0.isStringValueType());
      assertFalse(proxyObjectType0.isNumberValueType());
      assertFalse(proxyObjectType0.isNoResolvedType());
      assertFalse(proxyObjectType0.isUnionType());
      assertTrue(proxyObjectType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(proxyObjectType0.isOrdinaryFunction());
      assertFalse(proxyObjectType0.isVoidType());
      assertFalse(proxyObjectType0.isNominalConstructor());
      assertFalse(proxyObjectType0.isNoType());
      assertFalse(proxyObjectType0.isNoObjectType());
      assertFalse(proxyObjectType0.isInterface());
      assertFalse(proxyObjectType0.isEnumType());
      assertFalse(proxyObjectType0.isConstructor());
      assertFalse(proxyObjectType0.isBooleanValueType());
      assertFalse(proxyObjectType0.isRecordType());
      assertFalse(proxyObjectType0.isNativeObjectType());
      assertFalse(proxyObjectType0.hasCachedValues());
      assertFalse(proxyObjectType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isNullType());
      assertTrue(indexedType0.isObject());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(indexedType0);
      
      boolean boolean0 = indexedType0.hasDisplayName();
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isConstructor());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNullType());
      assertFalse(proxyObjectType0.isFunctionType());
      assertFalse(proxyObjectType0.isResolved());
      assertFalse(proxyObjectType0.isCheckedUnknownType());
      assertFalse(proxyObjectType0.isNominalType());
      assertFalse(proxyObjectType0.isNullType());
      assertFalse(proxyObjectType0.isAllType());
      assertFalse(proxyObjectType0.isEnumElementType());
      assertFalse(proxyObjectType0.isTemplateType());
      assertFalse(proxyObjectType0.isParameterizedType());
      assertFalse(proxyObjectType0.isStringValueType());
      assertFalse(proxyObjectType0.isNumberValueType());
      assertFalse(proxyObjectType0.isNoResolvedType());
      assertFalse(proxyObjectType0.isUnionType());
      assertTrue(proxyObjectType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(proxyObjectType0.isOrdinaryFunction());
      assertFalse(proxyObjectType0.isVoidType());
      assertFalse(proxyObjectType0.isNominalConstructor());
      assertFalse(proxyObjectType0.isNoType());
      assertFalse(proxyObjectType0.isNoObjectType());
      assertFalse(proxyObjectType0.isInterface());
      assertFalse(proxyObjectType0.isEnumType());
      assertFalse(proxyObjectType0.isConstructor());
      assertFalse(proxyObjectType0.isBooleanValueType());
      assertFalse(proxyObjectType0.isRecordType());
      assertFalse(proxyObjectType0.isNativeObjectType());
      assertFalse(proxyObjectType0.hasCachedValues());
      assertFalse(proxyObjectType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isNullType());
      assertTrue(indexedType0.isObject());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NamedType namedType0 = (NamedType)jSTypeRegistry0.createNamedType("%s (%s) must not be negative", "", (-775), 119);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNumberValueType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isNullType());
      assertEquals("%s (%s) must not be negative", namedType0.getReferenceName());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isParameterizedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(namedType0);
      
      boolean boolean0 = namedType0.hasDisplayName();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNumberValueType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isNullType());
      assertEquals("%s (%s) must not be negative", namedType0.getReferenceName());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isParameterizedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.hasCachedValues());
      assertTrue(indexedType0.isConstructor());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isBooleanValueType());
      assertTrue(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isResolved());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isTemplateType());
      assertTrue(indexedType0.isNoResolvedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(indexedType0);
      
      boolean boolean0 = indexedType0.hasDisplayName();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.hasCachedValues());
      assertTrue(indexedType0.isConstructor());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isBooleanValueType());
      assertTrue(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isResolved());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isTemplateType());
      assertTrue(indexedType0.isNoResolvedType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[4];
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.NUMBER_TYPE;
      jSTypeNativeArray0[1] = jSTypeNative1;
      jSTypeNativeArray0[2] = jSTypeNative0;
      jSTypeNativeArray0[3] = jSTypeNative1;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isNullType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNominalType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType0);
      assertEquals(4, jSTypeNativeArray0.length);
      
      String string0 = jSType0.toAnnotationString();
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isNullType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNominalType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals("(String|number)", string0);
      assertNotNull(string0);
      assertEquals(4, jSTypeNativeArray0.length);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNoResolvedType());
      assertTrue(voidType0.isVoidType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(voidType0);
      
      voidType0.clearResolved();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNoResolvedType());
      assertTrue(voidType0.isVoidType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertFalse(booleanType0.isResolved());
      
      booleanType0.forceResolve(simpleErrorReporter0, (StaticScope<JSType>) null);
      assertTrue(booleanType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newNumber(0.0);
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, "Not declared as a type name");
      boolean boolean0 = unresolvedTypeExpression0.isNumberValueType();
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertFalse(unresolvedTypeExpression0.isNoType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.isEnumType();
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isAllType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      nullType0.matchConstraint(errorFunctionType0);
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(nullType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      numberType0.matchesUint32Context();
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.isCheckedUnknownType();
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoType());
      assertFalse(boolean0);
      assertFalse(voidType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      boolean boolean0 = numberType0.isInstanceType();
      assertFalse(boolean0);
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      nullType0.hashCode();
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = booleanType0.getTypesUnderInequality(numberType0);
      boolean boolean0 = jSType_TypePair0.typeB.isInterface();
      assertFalse(boolean0);
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      boolean boolean0 = arrowType0.matchesInt32Context();
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isAllType());
      assertFalse(boolean0);
      assertFalse(arrowType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "w~K+pY*_");
      boolean boolean0 = errorFunctionType0.isNamedType();
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(boolean0);
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      ObjectType objectType0 = booleanType0.dereference();
      assertNotNull(objectType0);
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("Unknown class name", "Named type with empty name component", 0, 1);
      boolean boolean0 = jSType0.isOrdinaryFunction();
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.isNumber();
      assertFalse(boolean0);
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, numberType0, "Named type with empty name component");
      boolean boolean0 = enumElementType0.canBeCalled();
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(enumElementType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      boolean boolean0 = numberType0.isBooleanValueType();
      assertFalse(boolean0);
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
      nullType0.setValidator(predicate0);
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "Unknown class name");
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, enumElementType0, enumElementType0);
      boolean boolean0 = indexedType0.isConstructor();
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "_Co--\"y");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      // Undeclared exception!
      try { 
        arrowType0.canTestForEqualityWith(errorFunctionType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ArrowType", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "=M6");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      arrowType0.unboxesTo();
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.isNullable();
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      JSType.toMaybeParameterizedType((JSType) nullType0);
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "/Oa1bp3:7");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      boolean boolean0 = arrowType0.matchesObjectContext();
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderShallowInequality(numberType0);
      assertFalse(numberType0.isVoidType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNullType());
      
      jSType_TypePair0.typeA.getTypesUnderInequality(voidType0);
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isResolved());
      assertFalse(numberType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      boolean boolean0 = errorFunctionType0.matchesStringContext();
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.isString();
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType jSType0 = booleanType0.collapseUnion();
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, numberType0, "Not declared as a constructor");
      String string0 = enumElementType0.toDebugHashCodeString();
      assertFalse(enumElementType0.isResolved());
      assertEquals("{-1389929658}", string0);
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      numberType0.getJSDocInfo();
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      voidType0.findPropertyType((String) null);
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      boolean boolean0 = nullType0.isStringValueType();
      assertFalse(boolean0);
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "#^CU3|", "Not declared as a type name", 54, 3526);
      assertFalse(namedType0.isResolved());
      
      JSType.safeResolve(namedType0, simpleErrorReporter0, namedType0);
      assertTrue(namedType0.isResolved());
      assertFalse(namedType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "Unknown class name");
      voidType0.getTypesUnderEquality(enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
  }
}

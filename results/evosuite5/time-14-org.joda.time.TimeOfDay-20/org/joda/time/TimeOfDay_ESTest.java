/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 18:54:05 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.LocalDate;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.ReadablePeriod;
import org.joda.time.TimeOfDay;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.IslamicChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class TimeOfDay_ESTest extends TimeOfDay_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test00()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);
      Date date0 = localDate0.toDate();
      TimeOfDay timeOfDay0 = TimeOfDay.fromDateFields(date0);
      Days days0 = Days.THREE;
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withPeriodAdded(days0, 0);
      assertEquals(0, timeOfDay0.getMillisOfSecond());
      assertTrue(timeOfDay1.equals((Object)timeOfDay0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      TimeOfDay timeOfDay0 = new TimeOfDay((long) (-1615), (Chronology) buddhistChronology0);
      TimeOfDay timeOfDay1 = timeOfDay0.minus((ReadablePeriod) null);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      TimeOfDay timeOfDay1 = timeOfDay0.withField(dateTimeFieldType0, 0);
      assertSame(timeOfDay1, timeOfDay0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      TimeOfDay timeOfDay1 = timeOfDay0.withField(dateTimeFieldType0, 1);
      assertEquals(1, timeOfDay1.getMinuteOfHour());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      TimeOfDay timeOfDay0 = new TimeOfDay(1, 1, ethiopicChronology0);
      TimeOfDay timeOfDay1 = timeOfDay0.withChronologyRetainFields(ethiopicChronology0);
      assertSame(timeOfDay1, timeOfDay0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((long) (-1615));
      // Undeclared exception!
      try { 
        timeOfDay0.MIDNIGHT.getField((-156));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -156
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeOfDay.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeOfDay.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(1, 1);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay((-2681L));
      String string0 = timeOfDay0.MIDNIGHT.toString();
      assertEquals("T00:00:00.000", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      TimeOfDay timeOfDay0 = TimeOfDay.fromCalendarFields(mockGregorianCalendar0);
      assertEquals(21, timeOfDay0.getMinuteOfHour());
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(20, timeOfDay0.getHourOfDay());
      assertEquals(21, timeOfDay0.getSecondOfMinute());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      TimeOfDay timeOfDay0 = new TimeOfDay(dateTimeZone0);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      TimeOfDay timeOfDay1 = timeOfDay0.plusSeconds(1);
      assertEquals(1, timeOfDay1.getSecondOfMinute());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      TimeOfDay timeOfDay0 = new TimeOfDay(1, 1, ethiopicChronology0);
      TimeOfDay timeOfDay1 = timeOfDay0.minusMinutes(1);
      assertEquals(0, timeOfDay1.getMinuteOfHour());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      TimeOfDay timeOfDay1 = timeOfDay0.plusMillis(1);
      assertEquals(1, timeOfDay1.getMillisOfSecond());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      Minutes minutes0 = Minutes.TWO;
      TimeOfDay timeOfDay1 = timeOfDay0.plus(minutes0);
      assertEquals(2, timeOfDay1.getMinuteOfHour());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(1209600000L);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withChronologyRetainFields(islamicChronology0);
      assertFalse(timeOfDay1.equals((Object)timeOfDay0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay((Object) null);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(0L);
      TimeOfDay timeOfDay1 = timeOfDay0.minusSeconds(2400);
      assertEquals(0, timeOfDay1.getSecondOfMinute());
      assertEquals(20, timeOfDay1.getMinuteOfHour());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(0L);
      // Undeclared exception!
      try { 
        timeOfDay0.withMillisOfSecond((-156));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -156 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      TimeOfDay timeOfDay0 = new TimeOfDay((Object) null, ethiopicChronology0);
      assertEquals(4, timeOfDay0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((-17L));
      timeOfDay0.MIDNIGHT.toLocalTime();
      assertEquals(59, timeOfDay0.getSecondOfMinute());
      assertEquals(983, timeOfDay0.getMillisOfSecond());
      assertEquals(23, timeOfDay0.getHourOfDay());
      assertEquals(59, timeOfDay0.getMinuteOfHour());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((long) (-1615));
      // Undeclared exception!
      try { 
        timeOfDay0.withHourOfDay((-1615));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1615 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay((-2257L));
      assertEquals(4, timeOfDay0.size());
      
      TimeOfDay timeOfDay1 = timeOfDay0.minusMillis(12);
      assertEquals(731, timeOfDay1.getMillisOfSecond());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay((long) (-1615));
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.plusHours(2);
      assertEquals(2, timeOfDay1.getHourOfDay());
      assertEquals(4, timeOfDay1.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      TimeOfDay timeOfDay0 = new TimeOfDay(1, 1, 1, ethiopicChronology0);
      TimeOfDay timeOfDay1 = timeOfDay0.plusMinutes(0);
      assertSame(timeOfDay1, timeOfDay0);
      assertEquals(4, timeOfDay0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      timeOfDay0.getFieldTypes();
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(4, timeOfDay0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((-2681L));
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withMinuteOfHour(0);
      assertEquals(0, timeOfDay1.getMinuteOfHour());
      assertEquals(59, timeOfDay0.getMinuteOfHour());
      assertEquals(4, timeOfDay1.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay((-2681L));
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.minusHours(3);
      assertEquals(4, timeOfDay0.size());
      assertEquals(59, timeOfDay0.getMinuteOfHour());
      assertEquals(319, timeOfDay0.getMillisOfSecond());
      assertEquals(21, timeOfDay1.getHourOfDay());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((long) (-1615));
      Months months0 = Months.TEN;
      TimeOfDay timeOfDay1 = timeOfDay0.minus(months0);
      assertEquals(385, timeOfDay1.getMillisOfSecond());
      assertEquals(23, timeOfDay1.getHourOfDay());
      assertNotSame(timeOfDay1, timeOfDay0);
      assertEquals(4, timeOfDay1.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay((Chronology) null);
      DateTime dateTime0 = timeOfDay0.toDateTimeToday();
      assertEquals(320, timeOfDay0.getMillisOfSecond());
      assertEquals(4, timeOfDay0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(21, timeOfDay0.getHourOfDay());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((-2681L));
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withSecondOfMinute(3);
      assertEquals(23, timeOfDay0.getHourOfDay());
      assertEquals(319, timeOfDay0.getMillisOfSecond());
      assertEquals(3, timeOfDay1.getSecondOfMinute());
      assertEquals(4, timeOfDay1.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(1, 1, 1);
      assertEquals(4, timeOfDay0.size());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 22:04:43 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationFieldType;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class LocalDate_ESTest extends LocalDate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = localDate0.toString((String) null, locale0);
      assertEquals(3, localDate0.size());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(string0);
      assertEquals("2014-02-14", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Locale locale0 = new Locale("7p$S%7S5>Ywg9X~]r,");
      assertEquals("7p$s%7s5>ywg9x~]r,", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("7p$s%7s5>ywg9x~]r,", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      try { 
        localDate0.toString("7p$S%7S5>Ywg9X~]r,", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      // Undeclared exception!
      try { 
        localDate0.toString("The date must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      LocalDate.Property localDate_Property0 = localDate0.property(dateTimeFieldType0);
      assertEquals(3, localDate0.size());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      // Undeclared exception!
      try { 
        localDate0.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try { 
        localDate0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'millisOfDay' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) gregorianChronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = localDate0.minusDays(0);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = localDate0.minusWeeks(0);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = localDate0.minusWeeks((-273));
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = localDate0.minusMonths(0);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = localDate0.minusMonths(1900);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = localDate0.minusYears(0);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = localDate0.minusYears((-32));
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) gregorianChronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = localDate0.plusDays(0);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = localDate0.plusWeeks(0);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = localDate0.plusWeeks((-1201));
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = localDate0.plusMonths(0);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = localDate0.plusMonths((-292275054));
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9, 0, 0);
      assertNotNull(mockGregorianCalendar0);
      
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61883395200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=8,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=366,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = localDate0.plusYears(0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61883395200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=8,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=366,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = localDate0.plusYears(1879);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Period period0 = Period.seconds(0);
      assertNotNull(period0);
      
      LocalDate localDate1 = localDate0.withPeriodAdded(period0, 0);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = localDate0.minus((ReadablePeriod) null);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) gregorianChronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertNotNull(periodType0);
      
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, 0);
      assertEquals(3, localDate0.size());
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, 2829);
      assertEquals(3, localDate0.size());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(426);
      assertEquals("+00:00:00.426", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.426", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      assertEquals("+00:00:00.426", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.426", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      // Undeclared exception!
      try { 
        localDate0.withFieldAdded((DurationFieldType) null, 426);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      // Undeclared exception!
      try { 
        localDate0.withFieldAdded(durationFieldType0, (-1705));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'seconds' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try { 
        localDate0.withField(dateTimeFieldType0, (-303));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -303 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      // Undeclared exception!
      try { 
        localDate0.withField((DateTimeFieldType) null, 1954);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try { 
        localDate0.withField(dateTimeFieldType0, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'halfdayOfDay' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = localDate0.withFields((ReadablePartial) null);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDate localDate1 = localDate0.withFields(localDateTime0);
      assertEquals(3, localDate0.size());
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay(3064L, (Chronology) ethiopicChronology0);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      assertEquals(1, EthiopicChronology.EE);
      
      // Undeclared exception!
      try { 
        localDate0.toDateTime(localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chronology of the time does not match
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalTime localTime0 = new LocalTime(84L);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DateTime dateTime0 = localDate0.toDateTime(localTime0);
      assertEquals(3, localDate0.size());
      assertEquals(4, localTime0.size());
      assertEquals(1392336000084L, dateTime0.getMillis());
      assertNotNull(dateTime0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1839), (-1839), (-1839));
      assertNotNull(mockGregorianCalendar0);
      
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-125197056000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1999,MONTH=8,WEEK_OF_YEAR=38,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=260,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay((long) (-1839));
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalDateTime localDateTime0 = localDate0.toLocalDateTime(localTime0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-125197056000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1999,MONTH=8,WEEK_OF_YEAR=38,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=260,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(3, localDate0.size());
      assertEquals(4, localTime0.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      // Undeclared exception!
      try { 
        localDate0.toLocalDateTime((LocalTime) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The time must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      LocalTime localTime0 = new LocalTime((Chronology) buddhistChronology0);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      assertEquals(1, BuddhistChronology.BE);
      
      // Undeclared exception!
      try { 
        localDate0.toLocalDateTime(localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chronology of the time does not match
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = localDate0.minusDays((-629));
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      
      int int0 = localDate0.compareTo((ReadablePartial) localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals((-1), int0);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localDate0.isBefore(localTime0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      localDate0.hashCode();
      assertEquals(3, localDate0.size());
      
      localDate0.hashCode();
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      boolean boolean0 = localDate0.equals(copticChronology0);
      assertEquals(3, localDate0.size());
      assertFalse(boolean0);
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) gregorianChronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Date date0 = localDate0.toDate();
      assertEquals(3, localDate0.size());
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      boolean boolean0 = localDate0.isSupported((DurationFieldType) null);
      assertEquals(3, localDate0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      boolean boolean0 = localDate0.isSupported((DateTimeFieldType) null);
      assertEquals(3, localDate0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try { 
        localDate0.get(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'secondOfDay' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      // Undeclared exception!
      try { 
        localDate0.get((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      // Undeclared exception!
      try { 
        localDate0.getValue(999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 999
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      // Undeclared exception!
      try { 
        localDate0.getFieldType(1810);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 1810
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(1339L);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.dayOfMonth();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate_Property0);
      
      LocalDate localDate1 = localDate_Property0.addToCopy(2147483643);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.weekyear();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate_Property0);
      
      LocalDate localDate1 = localDate_Property0.withMinimumValue();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) gregorianChronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.weekyear();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate_Property0);
      
      LocalDate localDate1 = localDate_Property0.roundCeilingCopy();
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(121);
      assertEquals("+00:00:00.121", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.121", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      assertEquals("+00:00:00.121", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.121", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
      assertEquals("+00:00:00.121", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.121", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate_Property0);
      
      LocalDate localDate1 = localDate_Property0.roundHalfEvenCopy();
      assertEquals("+00:00:00.121", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.121", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) gregorianChronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.weekyear();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate_Property0);
      
      LocalDate localDate1 = localDate_Property0.roundFloorCopy();
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) gregorianChronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.weekyear();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate_Property0);
      
      LocalDate localDate1 = localDate_Property0.getLocalDate();
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.weekyear();
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate_Property0);
      
      LocalDate localDate1 = localDate_Property0.roundHalfFloorCopy();
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(121);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.121", dateTimeZone0.toString());
      assertEquals("+00:00:00.121", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.121", dateTimeZone0.toString());
      assertEquals("+00:00:00.121", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.121", dateTimeZone0.toString());
      assertEquals("+00:00:00.121", dateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate_Property0);
      
      // Undeclared exception!
      try { 
        localDate_Property0.setCopy("org.jda.time.field.ScaleduratonField");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"org.jda.time.field.ScaleduratonField\" for dayOfYear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      GregorianCalendar gregorianCalendar0 = dateMidnight0.toGregorianCalendar();
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Amsterdam\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=180,lastRule=java.util.SimpleTimeZone[id=Europe/Amsterdam,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(gregorianCalendar0);
      
      LocalDate localDate0 = LocalDate.fromCalendarFields(gregorianCalendar0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Amsterdam\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=180,lastRule=java.util.SimpleTimeZone[id=Europe/Amsterdam,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Amsterdam\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=180,lastRule=java.util.SimpleTimeZone[id=Europe/Amsterdam,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate_Property0);
      
      LocalDate localDate1 = localDate_Property0.addWrapFieldToCopy(0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-3600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/Amsterdam\",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=180,lastRule=java.util.SimpleTimeZone[id=Europe/Amsterdam,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=0]", gregorianCalendar0.toString());
      assertTrue(gregorianCalendar0.isLenient());
      assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) gJChronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.year();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate_Property0);
      
      LocalDate localDate1 = localDate_Property0.roundHalfCeilingCopy();
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.centuryOfEra();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDate localDate0 = new LocalDate((Object) null, fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = localDate0.withWeekyear(1062);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Months months0 = Months.SEVEN;
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      LocalDate localDate1 = localDate0.plus(months0);
      assertEquals(3, localDate0.size());
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) gregorianChronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.year();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate_Property0);
      
      LocalDate localDate1 = localDate_Property0.withMaximumValue();
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = localDate0.getEra();
      assertEquals(3, localDate0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      assertEquals(3, localDate0.size());
      assertEquals(1392332400000L, dateTime0.getMillis());
      assertNotNull(dateTime0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = localDate0.getWeekOfWeekyear();
      assertEquals(3, localDate0.size());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      // Undeclared exception!
      try { 
        localDate0.withDayOfWeek((-32));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -32 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DateTime dateTime0 = localDate0.toDateTime((LocalTime) null);
      assertEquals(3, localDate0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = localDate0.getYearOfEra();
      assertEquals(3, localDate0.size());
      assertEquals(2014, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.era();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = localDate0.getWeekyear();
      assertEquals(3, localDate0.size());
      assertEquals(2014, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = new LocalDate(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertTrue(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Europe/Amsterdam", dateTimeZone0.getID());
      assertEquals("Europe/Amsterdam", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      LocalDate localDate0 = new LocalDate(0L, dateTimeZone0);
      assertEquals("Europe/Amsterdam", dateTimeZone0.getID());
      assertEquals("Europe/Amsterdam", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.monthOfYear();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = localDate0.withYearOfCentury(0);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = localDate0.getDayOfYear();
      assertEquals(3, localDate0.size());
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.dayOfMonth();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate_Property0);
      
      Chronology chronology0 = localDate_Property0.getChronology();
      assertEquals(3, localDate0.size());
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = localDate0.getYearOfCentury();
      assertEquals(3, localDate0.size());
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = localDate0.withYear((-247));
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-66513139200000L));
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Date date0 = localDate0.toDate();
      assertEquals(3, localDate0.size());
      assertEquals("Fri Apr 14 00:00:00 GMT 139", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = localDate0.withDayOfMonth(2);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = localDate0.getCenturyOfEra();
      assertEquals(3, localDate0.size());
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.weekOfWeekyear();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = localDate0.getDayOfWeek();
      assertEquals(3, localDate0.size());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      // Undeclared exception!
      try { 
        localDate0.withWeekOfWeekyear(2845);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2845 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DateTime dateTime0 = localDate0.toDateTimeAtMidnight();
      assertEquals(3, localDate0.size());
      assertEquals(1392332400000L, dateTime0.getMillis());
      assertNotNull(dateTime0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      // Undeclared exception!
      try { 
        localDate0.withCenturyOfEra((-2147483642));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147483642 for centuryOfEra must be in the range [0,2922789]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = localDate0.withYearOfEra(2);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DateMidnight dateMidnight0 = localDate0.toDateMidnight();
      assertEquals(3, localDate0.size());
      assertEquals(1392332400000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Minutes minutes0 = Minutes.ZERO;
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertNotNull(minutes0);
      
      LocalDate localDate1 = localDate0.minus(minutes0);
      assertEquals(3, localDate0.size());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Date date0 = localDate0.toDate();
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      // Undeclared exception!
      try { 
        localDate0.withMonthOfYear((-2172));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2172 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      // Undeclared exception!
      try { 
        localDate0.withDayOfYear((-248));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -248 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      assertEquals(3, localDate0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Interval interval0 = localDate0.toInterval();
      assertEquals(1392332400000L, interval0.getStartMillis());
      assertEquals(1392418800000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate.Property localDate_Property0 = localDate0.yearOfCentury();
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      String string0 = localDate0.toString((String) null);
      assertEquals("2014-02-14", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      // Undeclared exception!
      try { 
        localDate0.withEra((-248));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -248 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 16:38:00 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Map;
import org.apache.commons.lang3.ArrayUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = 2631.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-455.151F);
      floatArray0[5] = 1.0F;
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      int int0 = Boolean.compare((boolean) boolean0, true);
      assertEquals((-1), int0);
      
      boolean boolean1 = Boolean.logicalAnd((boolean) boolean0, true);
      assertFalse(boolean1);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      Short short0 = new Short((short)1127);
      assertEquals((short)1127, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)1127);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)1127, (short)short1);
      assertNotNull(short1);
      
      Integer integer0 = new Integer((short)1127);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1127, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("LN(O_WyOup)QQ8");
      assertNull(integer1);
      
      Integer integer2 = Integer.getInteger("LN(O_WyOup)QQ8", (Integer) null);
      assertNull(integer2);
      
      int int1 = Integer.max((-1397), 881);
      assertFalse(int1 == int0);
      assertEquals(881, int1);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (short)1127;
      longArray0[2] = (long) (-1397);
      longArray0[3] = (long) (-1);
      int int2 = ArrayUtils.lastIndexOf(longArray0, (-656L), (-1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      assertArrayEquals(new long[] {(-1L), 1127L, (-1397L), (-1L)}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = 'u';
      boolean boolean2 = ArrayUtils.contains(charArray0, '/');
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new char[] {'/', 'u'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Character character0 = new Character('u');
      assertEquals('u', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[2];
      Character character1 = Character.valueOf('*');
      assertFalse(character1.equals((Object)character0));
      assertEquals('*', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'u');
      assertArrayEquals(new char[] {'u', 'u'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      Double[] doubleArray0 = new Double[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) doubleArray0, (Object[]) characterArray0);
      assertFalse(boolean0);
      assertEquals(2, characterArray0.length);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1110);
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)72;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1110)}, shortArray0);
      assertArrayEquals(new short[] {(short)72}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)72;
      longArray0[1] = (long) (short)72;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {72L, 72L}, longArray0);
      assertEquals(2, longArray0.length);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (int) (short) (-1110));
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((short) (-1110));
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-1110), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-432));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-432), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-432));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals((-432), (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (int) integerArray0[1], 1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(1, integerArray1.length);
      assertEquals(4, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Integer[] integerArray2 = ArrayUtils.addAll(integerArray1, integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertEquals(4, integerArray2.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = Byte.toUnsignedInt((byte)0);
      assertEquals(0, int0);
      
      long long0 = Byte.toUnsignedLong((byte)102);
      assertEquals(102L, long0);
      
      Byte[] byteArray0 = new Byte[1];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) 0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) byteArray0, (Object[]) byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1473;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-18), 2);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1473, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1473, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Short[] shortArray2 = ArrayUtils.toObject(shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1473, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1473, (short)0}, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (double) (short)1473;
      doubleArray0[1] = (double) (short)1473;
      doubleArray0[2] = (double) (-18);
      doubleArray0[3] = (double) (short)1473;
      doubleArray0[4] = (double) (-18);
      doubleArray0[5] = (double) (-18);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(14, doubleArray0.length);
      assertEquals(28, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(14, doubleArray2.length);
      assertEquals(14, doubleArray0.length);
      assertSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)1473, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertNotSame(shortArray0, shortArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = ArrayUtils.isSameType(object1, object0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      
      short[] shortArray3 = new short[3];
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      
      shortArray3[0] = (short) (-923);
      shortArray3[1] = (short)1473;
      shortArray3[2] = (short)1473;
      double[] doubleArray3 = ArrayUtils.addAll(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertEquals(14, doubleArray2.length);
      assertEquals(14, doubleArray0.length);
      assertEquals(28, doubleArray3.length);
      assertSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      int[] intArray0 = new int[1];
      intArray0[0] = 962;
      boolean boolean0 = ArrayUtils.contains(intArray0, 1737);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {962}, intArray0);
      assertEquals(1, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 0.0);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new int[] {962}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 4032, Integer.MAX_VALUE);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1737;
      intArray1[1] = 4032;
      intArray1[2] = (-1);
      intArray1[3] = Integer.MAX_VALUE;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1737, 4032, (-1), Integer.MAX_VALUE}, intArray1);
      assertNotNull(integerArray0);
      assertEquals(4, intArray1.length);
      assertEquals(4, integerArray0.length);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertArrayEquals(new int[] {1737, 4032, (-1), Integer.MAX_VALUE}, intArray1);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean3 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) Integer.MAX_VALUE;
      longArray1[1] = (long) 1737;
      longArray1[2] = (long) Integer.MAX_VALUE;
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {2147483647L, 1737L, 2147483647L}, longArray1);
      assertArrayEquals(new long[] {2147483647L, 1737L, 2147483647L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      long[] longArray3 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray3);
      
      boolean boolean4 = ArrayUtils.isNotEmpty((Object[]) null);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Integer integer0 = new Integer(1773);
      assertEquals(1773, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) integer0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, 1773);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Short short0 = new Short((short)78);
      assertEquals((short)78, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      charArray0[1] = '%';
      charArray0[2] = 'i';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'^', '%', 'i'}, charArray0);
      assertArrayEquals(new char[] {'^', '%', 'i'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'^', '%', 'i'}, charArray0);
      assertEquals(3, charArray0.length);
      assertSame(charArray0, charArray1);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      assertNotNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 1159L;
      longArray0[1] = (-1L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {1159L, (-1L), 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.contains(intArray0, 13);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) 13;
      floatArray0[2] = (float) 1159L;
      floatArray0[3] = (float) 13;
      floatArray0[4] = (float) 1159L;
      floatArray0[5] = (float) (-1L);
      floatArray0[6] = (float) (-1L);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), 13.0F, 1159.0F, 13.0F, 1159.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(14, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-128));
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = (-1);
      intArray0[2] = (-141);
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {0, (-1), (-141), 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, (-1), (-141), 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = new double[2];
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.contains(doubleArray1, (double) Integer.MAX_VALUE);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '\u0000';
      char[] charArray1 = ArrayUtils.add(charArray0, '\u0000');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = new char[1];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = '\u0000';
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray2);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray2);
      assertEquals(1, charArray2.length);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      Float float0 = Float.valueOf(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty((int[]) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '\u0000';
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-126);
      int[] intArray0 = new int[3];
      intArray0[0] = (-695);
      intArray0[1] = (int) (byte) (-126);
      intArray0[2] = 123;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-695), (-126), 123}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (short) (-1);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, (-162.167));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'r';
      charArray0[1] = 'v';
      charArray0[2] = 'i';
      charArray0[3] = '}';
      charArray0[4] = '}';
      charArray0[5] = '5';
      Character[] characterArray2 = ArrayUtils.toObject(charArray0);
      assertFalse(characterArray2.equals((Object)characterArray0));
      assertFalse(characterArray2.equals((Object)characterArray1));
      assertArrayEquals(new char[] {'r', 'v', 'i', '}', '}', '5'}, charArray0);
      assertNotNull(characterArray2);
      assertEquals(6, characterArray2.length);
      assertEquals(6, charArray0.length);
      assertNotSame(characterArray2, characterArray0);
      assertNotSame(characterArray2, characterArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (short) (-1), (int) (byte) (-1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-3431), (int) (byte) (-1));
      assertNull(intArray0);
      
      int[] intArray1 = new int[0];
      int int1 = ArrayUtils.lastIndexOf(intArray1, 1);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Float float0 = Float.valueOf(1511.9972F);
      assertEquals(1511.9972F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min(1511.9972F, (-1.0F));
      assertEquals((-1.0F), float1, 0.01F);
      
      Object[] objectArray0 = ArrayUtils.add((Object[]) null, (Object) float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1511.9972F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-934.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-2613.2053F), (-2397));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {1511.9972F, (-1.0F), (-1.0F), (-934.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '1511.9972', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 580.6570826494413;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0L);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {0.0, 580.6570826494413, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'D');
      assertNull(charArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      char[] charArray1 = ArrayUtils.add((char[]) null, 'D');
      assertArrayEquals(new char[] {'D'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-735.2);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[2] = 3.0;
      doubleArray0[5] = (-735.2);
      doubleArray0[0] = (-2365.9206863);
      doubleArray0[7] = (double) (-1L);
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2365.9206863), 0.0, 3.0, 0.0, 0.0, (-735.2), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray2, 544.5475159323, 0.0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-2365.9206863), 0.0, 3.0, 0.0, 0.0, (-735.2), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.reverse(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 112;
      intArray0[2] = 112;
      intArray0[3] = 112;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {(-1), 112, 112, 112}, intArray1);
      assertArrayEquals(new int[] {(-1), 112, 112, 112}, intArray0);
      assertNotNull(intArray1);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1043.8143732;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 580.6570826494413);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1043.8143732, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1043.8143732, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-605.928F);
      floatArray0[1] = 1052.297F;
      floatArray0[2] = (-951.91F);
      floatArray0[3] = (-3282.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1608.3516F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = 927.997F;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-2731), (-1333.0F));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2731, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-602);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 4, (int) (short) (-602));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-602)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Short[] shortArray2 = ArrayUtils.toObject(shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-602)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-602);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-602.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-602.0), (-602.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-602.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-602.0), (-602.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-602.0), (-602.0)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-602)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new short[] {(short) (-602)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotSame(shortArray0, shortArray1);
      
      double[] doubleArray3 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-602.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-602.0), (-602.0)}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-391);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (-391);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3423.5961, (-391), 765.48938297114);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-391.0), (-1.0), (-391.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-391.0), (-1.0), (-391.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-84);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (byte[]) null);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-35), (byte)51, (byte) (-84)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-35), (byte)51, (byte) (-84)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-84);
      intArray0[1] = (-1);
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new int[] {(-84), (-1)}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray1, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new byte[] {(byte) (-35), (byte)51, (byte) (-84)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-35), (byte)51, (byte) (-84)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-3);
      shortArray0[1] = (short)57;
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0L);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.min((short) (-3), 1302.232571371);
      assertEquals((-3.0), double1, 0.01);
      
      doubleArray0[0] = double0;
      Integer integer0 = new Integer((short) (-3));
      assertEquals((-3), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean2 = ArrayUtils.isEquals(integer0, doubleArray0[0]);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(1, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)79, (int) (short)1442);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-3), (short)57}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-387L);
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {''}, charArray0);
      assertEquals(1, charArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)8;
      byteArray0[4] = (byte) (-124);
      byteArray0[6] = (byte) (-124);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)100);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte) (-124), (byte) (-124), (byte) (-124), (byte)0, (byte) (-124)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {''}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Float float0 = Float.valueOf((-2585.097F));
      assertEquals((-2585.097F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-2585.097F));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2585.097F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((-2585.097F));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-2585.097F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)48;
      shortArray0[1] = (short)48;
      shortArray0[2] = (short)48;
      shortArray0[3] = (short)48;
      shortArray0[4] = (short)48;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)48);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)48, (short)48, (short)48, (short)48, (short)48}, shortArray0);
      assertArrayEquals(new short[] {(short)48, (short)48, (short)48, (short)48}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int[] intArray0 = new int[15];
      intArray0[0] = 13;
      intArray0[1] = (-100);
      intArray0[2] = 13;
      boolean boolean0 = ArrayUtils.contains(intArray0, 13);
      assertTrue(boolean0);
      assertEquals(15, intArray0.length);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(15, intArray0.length);
      assertEquals(30, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Integer integer0 = new Integer((-919));
      assertEquals((-919), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) integerArray0, (Object) integer0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, integerArray0.length);
      
      int int0 = ArrayUtils.indexOf((int[]) null, 13);
      assertEquals((-1), int0);
      
      boolean boolean2 = ArrayUtils.isEmpty((Object[]) integerArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(1, integerArray0.length);
      
      boolean boolean3 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals(15, intArray0.length);
      assertNotSame(intArray0, intArray1);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertNotNull(object4);
      
      boolean boolean4 = ArrayUtils.isSameType(object4, object1);
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(object1.equals((Object)object3));
      assertFalse(object1.equals((Object)object4));
      assertFalse(object1.equals((Object)object2));
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean4);
      assertNotSame(object4, object1);
      assertNotSame(object4, object3);
      assertNotSame(object4, object0);
      assertNotSame(object4, object2);
      assertNotSame(object1, object3);
      assertNotSame(object1, object4);
      assertNotSame(object1, object2);
      assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      float[] floatArray0 = new float[5];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean2 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Character character0 = new Character('u');
      assertEquals('u', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[2];
      Character character1 = Character.valueOf('*');
      assertFalse(character1.equals((Object)character0));
      assertEquals('*', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'u');
      assertNull(charArray0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) "Array eleent ");
      assertEquals((-1), int0);
      assertEquals(2, characterArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2102L;
      longArray0[1] = 0L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 3342L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {2102L, 0L}, longArray0);
      assertArrayEquals(new long[] {2102L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.add(byteArray0, (int) (short)0, (byte)67);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)67}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1811;
      shortArray0[1] = (short) (-78);
      shortArray0[2] = (short) (-1326);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)42;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)1811, (short) (-78), (short) (-1326), (short)0, (short)42}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      charArray0[1] = 'B';
      charArray0[2] = 'u';
      charArray0[3] = '\\';
      charArray0[4] = 'G';
      charArray0[5] = 'J';
      charArray0[6] = '=';
      charArray0[7] = ']';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {']', '=', 'J', 'G', '\\', 'u', 'B', 'W'}, charArray0);
      assertEquals(8, charArray0.length);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((short)42);
      assertEquals(42L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-3258L));
      assertFalse(long1.equals((Object)long0));
      assertEquals((-3258L), (long)long1);
      assertNotNull(long1);
      
      longArray0[1] = long1;
      try { 
        Long.decode("5L;");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"5L;\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      Short short0 = new Short((short) (-303));
      assertEquals((short) (-303), (short)short0);
      assertNotNull(short0);
      
      int int0 = new Integer((short)0);
      assertEquals(0, int0);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, (double) (short)0, 0.0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 122.0F;
      floatArray0[1] = (float) 1933;
      floatArray0[2] = (float) (-1466);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) '.';
      floatArray0[5] = (float) (short) (-303);
      floatArray0[6] = (float) (short) (-303);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {122.0F, 1933.0F, (-1466.0F), 0.0F, 46.0F, (-303.0F), (-303.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(14, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int int2 = ArrayUtils.indexOf(booleanArray1, true, 55);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
      
      Short[] shortArray0 = new Short[6];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray1, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (-756.209939);
      doubleArray0[2] = 81.0;
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, (int) 'z');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 122, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray1, charArray0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      long[] longArray0 = new long[20];
      longArray0[1] = (-1087L);
      longArray0[2] = (-1L);
      longArray0[3] = (-1L);
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      String[] stringArray0 = ArrayUtils.addAll((String[]) null, (String[]) null);
      assertNull(stringArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Character character0 = new Character('*');
      assertEquals('*', (char)character0);
      assertNotNull(character0);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '*';
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-117);
      boolean boolean2 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57, (byte) (-117)}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Integer integer0 = new Integer(1130);
      assertEquals(1130, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-90);
      byteArray0[3] = (byte) (-79);
      byteArray0[3] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 58, (-1625));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)7, (byte) (-90), (byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[2] = 68.28191F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-455.151F);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 68.28191F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 68.28191F, 0.0F, (-455.151F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-455.151F), 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(booleanArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Double double0 = new Double(0L);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.min(1415L, 0L);
      assertEquals(0.0, double1, 0.01);
      
      boolean boolean0 = Double.isFinite(2861.0294);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (double) 0L);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isEquals(doubleArray0[1], doubleArray0[0]);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, doubleArray0.length);
      assertSame(doubleArray0, doubleArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1625.124328288), 1700, 71.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)33);
      assertEquals((byte)33, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      Byte byte1 = new Byte((byte) (-1));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[3] = byte1;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, 1455);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean("!\"oh?c:");
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[5];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean1;
      boolean boolean3 = Boolean.logicalAnd(false, false);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      booleanArray0[2] = boolean2;
      int int0 = Boolean.compare(boolean0, true);
      assertTrue(boolean0 == boolean3);
      assertEquals((-1), int0);
      
      boolean boolean4 = Boolean.logicalOr((boolean) boolean2, false);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean3));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      boolean boolean5 = ArrayUtils.contains(booleanArray1, false);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-1.0);
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      short[] shortArray0 = new short[2];
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 751.857F;
      floatArray0[1] = (-1254.9F);
      floatArray0[2] = (-3698.4963F);
      floatArray0[3] = 0.0F;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {751.857F, (-1254.9F), (-3698.4963F), 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, 39.73520815359816);
      assertArrayEquals(new double[] {39.73520815359816}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      boolean boolean1 = ArrayUtils.isEmpty((double[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      String[] stringArray0 = new String[6];
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(6, stringArray0.length);
      assertEquals(12, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean3 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      String[] stringArray2 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertEquals(6, stringArray0.length);
      assertEquals(12, stringArray2.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) stringArray2, (Object[]) stringArray2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(objectArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(12, stringArray2.length);
      assertEquals(24, objectArray0.length);
      assertNotSame(stringArray0, objectArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, objectArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '\u0000';
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '\u0000';
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) '\u0000';
      Integer integer0 = new Integer(1455);
      assertEquals(1455, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer0, 1455);
      assertEquals((-1), int0);
      assertEquals(1, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(charArray1, (char[]) null);
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3301), 12);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(12, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertEquals(12, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Float[] floatArray0 = null;
      Float float0 = Float.valueOf(1511.9972F);
      assertEquals(1511.9972F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min(1511.9972F, (-1.0F));
      assertEquals((-1.0F), float1, 0.01F);
      
      String string0 = "java.lang.Integer";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.lang.Integer";
      stringArray0[1] = "java.lang.Integer";
      stringArray0[2] = "java.lang.Integer";
      stringArray0[3] = "java.lang.Integer";
      // Undeclared exception!
      try { 
        ArrayUtils.add(stringArray0, (-915), "java.lang.Integer");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -915, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      String[] stringArray0 = ArrayUtils.addAll((String[]) null, (String[]) null);
      assertNull(stringArray0);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-2081L), 2370);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) (-2081L);
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, (-2081.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 2, (int) (byte) (-59));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-2081.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-2081.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-756.209939);
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Byte[] byteArray2 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray2);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.add((short[]) null, (short) (-304));
      assertArrayEquals(new short[] {(short) (-304)}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (-756.209939);
      doubleArray0[2] = 81.0;
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      charArray0[1] = 'u';
      charArray0[2] = 'C';
      charArray0[3] = 'T';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'z', 'u', 'C', 'T'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 81.0);
      assertEquals(2, int0);
      assertArrayEquals(new double[] {0.0, (-756.209939), 81.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int int1 = ArrayUtils.indexOf((char[]) null, 'C');
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1, 2146728073);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'z', 'u', 'C', 'T'}, charArray0);
      assertArrayEquals(new char[] {'u', 'C', 'T'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "![1pNfB5nM@=,s.ysX";
      String[] stringArray1 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {}, charArray2);
      assertNotNull(charArray2);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray2.length);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      Double[] doubleArray1 = new Double[0];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 2631.0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 218;
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)3);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 516.93F;
      floatArray0[1] = (float) 218;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 218.0F, 516.93F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(stringArray0, 509);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 509, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      Short short0 = new Short((short) (-2470));
      assertEquals((short) (-2470), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)330);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)330, (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((short)729);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short)729, (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short) (-2470));
      assertTrue(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short) (-2470), (short)short3);
      assertNotNull(short3);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (-1539));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, (-1018));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Float float0 = Float.valueOf(1511.9972F);
      assertEquals(1511.9972F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min(1511.9972F, (-1.0F));
      assertEquals((-1.0F), float1, 0.01F);
      
      Object[] objectArray0 = ArrayUtils.add((Object[]) null, (Object) float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-1L);
      longArray0[1] = (-3099L);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-3099L), (-1L)}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[3];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '\u0000';
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[5] = (short) (-446);
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)98;
      shortArray0[3] = (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)1, (short)98, (short)0, (short)0, (short) (-446)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 699, (-1339));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1625.124328288), 1700, 71.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)123);
      assertEquals((byte)123, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)28;
      Byte byte2 = new Byte((byte)28);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)28, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte) (-1), (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      int int1 = Byte.compare((byte)36, byte1);
      assertFalse(int1 == int0);
      assertEquals(8, int1);
      
      Byte byte4 = new Byte((byte) (-1));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertEquals((byte) (-1), (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte)28, (byte) (-1), (byte) (-1)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long[] longArray0 = new long[3];
      long long0 = 0L;
      longArray0[1] = 0L;
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.contains(intArray0, 13);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((int[]) null, 13, 13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 13, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Character character0 = new Character('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('4');
      assertFalse(character1.equals((Object)character0));
      assertEquals('4', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[2];
      Character character2 = new Character('u');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('u', (char)character2);
      assertNotNull(character2);
      
      characterArray0[0] = character2;
      characterArray0[1] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'P');
      assertArrayEquals(new char[] {'u', '^'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) null);
      assertEquals((-1), int0);
      assertEquals(2, characterArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 1853L;
      longArray0[2] = (-1089L);
      longArray0[3] = 1506L;
      longArray0[4] = 5272L;
      long[] longArray1 = ArrayUtils.add(longArray0, (-1089L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 1853L, (-1089L), 1506L, 5272L}, longArray0);
      assertArrayEquals(new long[] {0L, 1853L, (-1089L), 1506L, 5272L, (-1089L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Long[] longArray2 = new Long[2];
      longArray2[1] = (Long) 5272L;
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2, (long) longArray2[1]);
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertArrayEquals(new long[] {5272L, 5272L}, longArray3);
      assertNotNull(longArray3);
      assertEquals(2, longArray2.length);
      assertEquals(2, longArray3.length);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte) (-96);
      byteArray0[8] = (byte)123;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-96), (byte)108, (byte) (-58), (byte)12, (byte)62, (byte)62, (byte) (-126), (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[4] = (short) (-590);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)15;
      Double double0 = new Double(2576.60372164);
      assertEquals(2576.60372164, (double)double0, 0.01);
      assertNotNull(double0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'c');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, characterArray0.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short) (-590);
      floatArray0[2] = (float) ':';
      floatArray0[3] = (float) (short)15;
      floatArray0[4] = (float) (short)15;
      floatArray0[5] = (float) (short)15;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (short) (-590), (int) (short) (-1));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-590.0F), 0.0F, 58.0F, 15.0F, 15.0F, 15.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) characterArray0, (Object[]) characterArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, characterArray0.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[h+GZ6(>rNme^@P3p/|";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 3718, 2727.64);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Float float0 = new Float(1473.0F);
      assertEquals(1473.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-1));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals((-1), (int)integer2);
      assertNotNull(integer2);
      
      int int0 = Integer.sum(2, 1649);
      assertEquals(1651, int0);
      
      Integer integer3 = Integer.getInteger("", 48);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(48, (int)integer3);
      assertNotNull(integer3);
      
      Integer integer4 = new Integer(2879);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals(2879, (int)integer4);
      assertNotNull(integer4);
      
      Integer integer5 = new Integer(2);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertEquals(2, (int)integer5);
      assertNotNull(integer5);
      
      Integer integer6 = new Integer(2);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertEquals(2, (int)integer6);
      assertNotNull(integer6);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer2;
      integerArray0[1] = integer4;
      Integer integer7 = new Integer(2879);
      assertTrue(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer2));
      assertEquals(2879, (int)integer7);
      assertNotNull(integer7);
      
      integerArray0[2] = integer7;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(6, integerArray1.length);
      assertEquals(3, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.add((float[]) null, 0.0F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 1043.8143732;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      Byte byte0 = new Byte((byte) (-108));
      assertEquals((byte) (-108), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)28);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)28, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)50);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)50, (byte)byte2);
      assertNotNull(byte2);
      
      int int0 = Byte.compare((byte)28, (byte)36);
      assertEquals((-8), int0);
      
      Byte byte3 = new Byte((byte)46);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte)46, (byte)byte3);
      assertNotNull(byte3);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Float float0 = new Float(1473.0F);
      assertEquals(1473.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, 1224);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object1;
      Integer integer0 = new Integer(93);
      assertEquals(93, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = ArrayUtils.contains(objectArray0, (Object) integer0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf((int[]) null, 93);
      assertEquals((-1), int0);
      
      Boolean boolean2 = new Boolean(false);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      boolean boolean3 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotSame(intArray0, intArray1);
      
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 93;
      intArray2[1] = (-1);
      boolean boolean4 = ArrayUtils.isNotEmpty(intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4);
      assertArrayEquals(new int[] {93, (-1)}, intArray2);
      assertEquals(2, intArray2.length);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[3];
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = '6';
      charArray0[4] = '6';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'6', '6', '6', '6', '6'}, charArray0);
      assertArrayEquals(new char[] {'6', '6', '6', '6', '6', '6', '6', '6', '6', '6'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'6', '6', '6', '6', '6'}, charArray0);
      assertArrayEquals(new char[] {'6', '6', '6', '6', '6', '6', '6', '6', '6', '6'}, charArray1);
      assertNotNull(characterArray0);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertEquals(10, characterArray0.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1), 2144566611);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (int) (byte)0, (int) (byte)0);
      assertNull(intArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'6', '6', '6', '6', '6'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      longArray0[8] = (long) 0;
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 0;
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray2);
      assertEquals(9, longArray0.length);
      assertEquals(4, longArray1.length);
      assertEquals(13, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray2, longArray1);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(4, longArray1.length);
      assertEquals(13, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.addAll((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (-756.209939);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 3216, (int) (byte)0, (-1.1173356075429826));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, (-756.209939), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'D');
      assertNull(charArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, (-756.209939), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-100));
      assertEquals((-100), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.compare((-100), (-100));
      assertEquals(0, int0);
      
      Integer integer1 = Integer.getInteger("#p@*diS\u0003(d%ZW", integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals((-100), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[0] = integer0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Float[] floatArray0 = new Float[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (-755.4933244299356);
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-5413.9));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-755.4933244299356), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Boolean boolean1 = new Boolean((String) null);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean(false);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      char[] charArray0 = new char[16];
      charArray0[0] = 'C';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'C');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(16, charArray0.length);
      assertEquals(15, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[1] = (-210);
      doubleArray0[1] = (double) 383;
      intArray0[4] = (int) 'C';
      int int0 = ArrayUtils.lastIndexOf(intArray0, 383, (int) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, (-210), 0, 0, 67}, intArray0);
      assertEquals(5, intArray0.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1110), (-1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, (-210), 0, 0, 67}, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(5, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      doubleArray0[0] = (double) (byte)0;
      byteArray0[7] = (byte) (-122);
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)69);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0, (byte) (-122), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0, (byte) (-122), (byte)0, (byte)69}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 728.37129828);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      boolean boolean3 = Boolean.logicalAnd(true, true);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      Boolean boolean4 = Boolean.valueOf(false);
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4);
      assertNotNull(boolean4);
      
      Boolean boolean5 = new Boolean("");
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5);
      assertNotNull(boolean5);
      
      boolean boolean6 = Boolean.logicalXor(false, false);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray1);
      
      float[] floatArray0 = new float[1];
      boolean boolean7 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean1);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Integer integer0 = new Integer(1130);
      assertEquals(1130, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) integer0;
      Object[] objectArray1 = new Object[0];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(boolean0);
      assertEquals(1, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-1));
      assertNull(shortArray0);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (int) (byte) (-93));
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      Short[] shortArray1 = ArrayUtils.nullToEmpty((Short[]) null);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (byte) (-93));
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (int) (byte) (-93);
      intArray0[5] = 0;
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-1), 2038);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {(-1), 0, 0, 0, (-93), 0}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = ArrayUtils.removeElement((double[]) null, 1043.8143732);
      assertNull(doubleArray1);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      char char0 = 'W';
      Character character0 = Character.valueOf('W');
      assertEquals('W', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[2] = character0;
      characterArray0[7] = (Character) char0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = 'T';
      charArray0[2] = '1';
      charArray0[3] = '\"';
      charArray0[4] = 'O';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'$', 'T', '1', '\"', 'O'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, characterArray0.length);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short) (-210));
      assertEquals((short) (-210), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)0);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-210), 1933);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, (-2167.88873377), (-2167.88873377));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'O';
      intArray0[1] = (-1);
      intArray0[2] = (int) '1';
      intArray0[3] = (int) '1';
      intArray0[4] = (-1);
      intArray0[5] = 1933;
      intArray0[6] = (-1);
      intArray0[7] = (int) '\"';
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {79, (-1), 49, 49, (-1), 1933, (-1), 34}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {79, (-1), 49, 49, (-1), 1933, (-1), 34}, intArray0);
      assertEquals(8, intArray0.length);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), 3216, (-1.0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) (-1));
      assertNull(floatArray0);
      
      int int1 = ArrayUtils.lastIndexOf((float[]) null, (float) 3216, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-602);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 4, 273);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-602)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Short[] shortArray2 = ArrayUtils.toObject(shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-602)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 273;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {273.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {273.0, 273.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {273.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {273.0, 273.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {273.0, 273.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-602)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new short[] {(short) (-602)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotSame(shortArray0, shortArray1);
      
      double[] doubleArray3 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {273.0, 273.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {273.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray3.length);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      long[] longArray0 = new long[4];
      longArray0[0] = 2106L;
      longArray0[1] = 2106L;
      longArray0[3] = 2106L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 2106L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {2106L, 2106L, 0L, 2106L}, longArray0);
      assertArrayEquals(new long[] {2106L, 0L, 2106L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(16, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((double) 2106L);
      assertEquals(2106.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) 2106L);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2106.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = (-100);
      Integer integer0 = new Integer((-100));
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-100), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("#p@*diS\u0003(d%ZW", integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals((-100), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[0] = integer0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) integerArray0, (Object) "java.specification.version");
      assertFalse(boolean0);
      assertEquals(1, integerArray0.length);
      
      int int1 = ArrayUtils.indexOf((int[]) null, int0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)105;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)24, (byte) (-47), (byte)105}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (-391), 911.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Integer integer0 = new Integer(1130);
      assertEquals(1130, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1130;
      intArray0[1] = 1130;
      intArray0[2] = 1130;
      intArray0[3] = 1130;
      intArray0[4] = 1130;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1130;
      objectArray0[1] = (Object) integer0;
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) null);
      assertFalse(boolean0);
      assertEquals(2, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf(intArray0, 1130);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1130, 1130, 1130, 1130, 1130}, intArray0);
      assertEquals(5, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(objectArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, objectArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new int[] {1130, 1130, 1130, 1130, 1130}, intArray0);
      assertEquals(5, intArray0.length);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Boolean boolean3 = Boolean.FALSE;
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean3;
      booleanArray0[1] = boolean3;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '1130', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      String[] stringArray0 = ArrayUtils.addAll((String[]) null, (String[]) null);
      assertNull(stringArray0);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(3047L);
      assertEquals(3047L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = Long.getLong("java.lang.Short");
      assertNull(long1);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {3047L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)100;
      byte[] byteArray1 = ArrayUtils.addAll((byte[]) null, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)100, (byte)1, (byte)100}, byteArray0);
      assertArrayEquals(new byte[] {(byte)100, (byte)1, (byte)100}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)100, (byte)1, (byte)100}, byteArray0);
      assertArrayEquals(new byte[] {(byte)100, (byte)1, (byte)100}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)100;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {100.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1135;
      shortArray0[3] = (short) (-3154);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 2353, (-1262));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = new byte[6];
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, byteArray1);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(6, byteArray1.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray1, (byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(6, byteArray1.length);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'java.lang.Object@3b9ad8d3', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      String[] stringArray0 = ArrayUtils.addAll((String[]) null, (String[]) null);
      assertNull(stringArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) (-2081L);
      boolean boolean0 = ArrayUtils.contains((float[]) null, (-2081.0F));
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 1043.8143732;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 579.480152449299);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1043.8143732, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1043.8143732, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      Character[] characterArray0 = new Character[2];
      char char0 = '.';
      Character character0 = Character.valueOf('.');
      assertEquals('.', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('.');
      assertEquals('.', (char)character1);
      assertNotNull(character1);
      
      boolean boolean0 = Character.isIdeographic(char0);
      assertFalse(boolean0);
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'.', '.'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 2147483626, (-1608));
      assertNull(doubleArray0);
      
      double[] doubleArray1 = new double[2];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, (double[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.contains((double[]) null, (double) 2147483626, (double) 2147483626);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-126);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-126), (byte)0, (byte)3, (byte)0, (byte)3, (byte)1, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (-391), 911.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Integer integer0 = new Integer((-391));
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-391), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)3);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1626.322979378);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int int2 = ArrayUtils.indexOf((char[]) null, '+');
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (-11), (-1));
      assertNull(charArray0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "![1pNfB5nM@=,s.ysX";
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) (-11), (double) (-1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 1159L;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1159L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 1159L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[4] = (double) 1159L;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-735.18681));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1159.0, 0.0, 1159.0, 0.0, 1159.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1159.0, 0.0, 1159.0, 0.0, 1159.0, (-735.18681)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1159.0, 0.0, 1159.0, 0.0, 1159.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1159.0, 0.0, 1159.0, 0.0, 1159.0, 1159.0, 0.0, 1159.0, 0.0, 1159.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-735.18681), (double) 1159L);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(1, int0);
      assertArrayEquals(new double[] {1159.0, 0.0, 1159.0, 0.0, 1159.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {1159L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {1159L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      ArrayUtils.reverse(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 1159L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 1159L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      int[] intArray0 = new int[13];
      intArray0[0] = 1;
      intArray0[1] = 112;
      intArray0[2] = 112;
      intArray0[3] = 112;
      intArray0[4] = 112;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(13, intArray1.length);
      assertEquals(13, intArray0.length);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, objectArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-93);
      long long0 = Byte.toUnsignedLong((byte)127);
      assertEquals(127L, long0);
      
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      Byte[] byteArray3 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray3);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-2494));
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-93);
      shortArray0[1] = (short) (byte) (-93);
      shortArray0[2] = (short) (byte) (-93);
      shortArray0[3] = (short) (byte) (-93);
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1), 2);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short) (-93), (short) (-93), (short) (-93), (short) (-93)}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 302;
      doubleArray0[1] = (double) 302;
      doubleArray0[2] = (double) 302;
      doubleArray0[3] = (double) 302;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 302, (-1109));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {302.0, 302.0, 302.0, 302.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, (double[]) null);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {302.0, 302.0, 302.0, 302.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      char[] charArray1 = new char[1];
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-756.209939);
      doubleArray0[2] = 81.0;
      int int0 = Byte.toUnsignedInt((byte) (-88));
      assertEquals(168, int0);
      
      long long0 = Byte.toUnsignedLong((byte)102);
      assertEquals(102L, long0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Byte[] byteArray2 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray2);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1896.859729));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-756.209939), 81.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-756.209939), 81.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 102L;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) 168;
      floatArray0[3] = (float) (byte) (-88);
      floatArray0[5] = (float) 168;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {102.0F, (-1.0F), 168.0F, (-88.0F), 0.0F, 168.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      AbstractMap.SimpleEntry<Object, String>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Object, String>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 9);
      Object object0 = new Object();
      assertNotNull(object0);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(object0, "Hn.Ozu7");
      assertNotNull(abstractMap_SimpleEntry0);
      
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry0);
      assertTrue(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry1);
      
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry1;
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry0);
      assertTrue(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry2);
      
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry2;
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry2, "t^9f");
      assertTrue(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry2));
      assertTrue(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry2));
      assertNotNull(abstractMap_SimpleEntry3);
      
      abstractMap_SimpleEntryArray0[3] = abstractMap_SimpleEntry3;
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry4 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry2, "t^9f");
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry3));
      assertTrue(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry2));
      assertTrue(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry3));
      assertTrue(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry2));
      assertTrue(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry1));
      assertNotNull(abstractMap_SimpleEntry4);
      
      abstractMap_SimpleEntryArray0[4] = abstractMap_SimpleEntry4;
      Integer integer0 = new Integer((byte)102);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(102, (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry5 = new AbstractMap.SimpleEntry<Object, String>(integer0, "Hn.Ozu7");
      assertFalse(integer0.equals((Object)int0));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry4));
      assertNotNull(abstractMap_SimpleEntry5);
      
      abstractMap_SimpleEntryArray0[5] = abstractMap_SimpleEntry5;
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry6 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry5);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry3));
      assertTrue(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry5));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry4));
      assertNotNull(abstractMap_SimpleEntry6);
      
      abstractMap_SimpleEntryArray0[6] = abstractMap_SimpleEntry6;
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry7 = new AbstractMap.SimpleEntry<Object, String>(object0, "Cannot store ");
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry5));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry6));
      assertNotNull(abstractMap_SimpleEntry7);
      
      abstractMap_SimpleEntryArray0[7] = abstractMap_SimpleEntry7;
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry8 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry5);
      assertFalse(abstractMap_SimpleEntry8.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry8.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry8.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry8.equals((Object)abstractMap_SimpleEntry7));
      assertFalse(abstractMap_SimpleEntry8.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry8.equals((Object)abstractMap_SimpleEntry6));
      assertTrue(abstractMap_SimpleEntry8.equals((Object)abstractMap_SimpleEntry5));
      assertFalse(abstractMap_SimpleEntry8.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry7));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry4));
      assertTrue(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry6));
      assertNotNull(abstractMap_SimpleEntry8);
      
      AbstractMap.SimpleEntry<Object, String>[] abstractMap_SimpleEntryArray1 = ArrayUtils.subarray(abstractMap_SimpleEntryArray0, 0, 168);
      assertFalse(abstractMap_SimpleEntryArray1.equals((Object)abstractMap_SimpleEntryArray0));
      assertNotNull(abstractMap_SimpleEntryArray1);
      assertEquals(9, abstractMap_SimpleEntryArray0.length);
      assertEquals(9, abstractMap_SimpleEntryArray1.length);
      assertNotSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
      assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (-756.209939);
      doubleArray0[1] = 81.0;
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = Byte.toUnsignedInt((byte) (-88));
      assertEquals(168, int0);
      
      long long0 = Byte.toUnsignedLong((byte)102);
      assertEquals(102L, long0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)102;
      byteArray2[1] = (byte)102;
      byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2);
      assertArrayEquals(new byte[] {(byte)102, (byte)102}, byteArray2);
      assertArrayEquals(new byte[] {(byte)102, (byte)102}, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(2, byteArray2.length);
      assertEquals(2, byteArray3.length);
      assertSame(byteArray2, byteArray3);
      assertSame(byteArray3, byteArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(shortArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, (short[]) null);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-371L);
      longArray0[1] = 218L;
      longArray0[2] = 1L;
      longArray0[3] = 791L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-371L), 218L, 1L, 791L}, longArray0);
      assertArrayEquals(new long[] {(-371L), 218L, 1L, 791L, (-371L), 218L, 1L, 791L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-479));
      assertEquals((-479), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-479));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-479), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1748));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-1748), (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-479));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertEquals((-479), (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(15);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals(15, (int)integer4);
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[1]);
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertEquals((-479), (int)integer5);
      assertNotNull(integer5);
      assertEquals(8, integerArray0.length);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(44);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertEquals(44, (int)integer6);
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = Integer.getInteger("<shH8g-@l%I{,SG");
      assertNull(integer7);
      
      integerArray0[7] = null;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, (Integer) null);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(8, integerArray0.length);
      assertEquals(9, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = 1698;
      intArray0[1] = 2750;
      intArray0[2] = 2;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {2, 2750, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      Byte[] byteArray0 = new Byte[0];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) byteArray0, (Object[]) byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (-2053.2987697);
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-1.0), 1.5, (-2053.2987697)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = false;
      booleanArray1[6] = false;
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, (boolean[]) null);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray2.length);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'K');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Float float0 = new Float(1473.0F);
      assertEquals(1473.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("!1d.`,JvN_");
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(">`");
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4);
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = new Boolean((String) null);
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5);
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 728.37129828);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Boolean boolean2 = new Boolean((String) null);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = Boolean.FALSE;
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      boolean boolean4 = Boolean.logicalAnd(true, true);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
      
      Boolean boolean5 = Boolean.valueOf(false);
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5);
      assertNotNull(boolean5);
      
      Boolean boolean6 = new Boolean("");
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6);
      assertNotNull(boolean6);
      
      boolean boolean7 = Boolean.logicalXor(false, false);
      assertFalse(boolean7 == boolean0);
      assertFalse(boolean7 == boolean4);
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray1);
      
      float[] floatArray0 = new float[1];
      boolean boolean8 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean8 == boolean7);
      assertTrue(boolean8 == boolean0);
      assertTrue(boolean8 == boolean4);
      assertFalse(boolean8 == boolean1);
      assertTrue(boolean8);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean9 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean9 == boolean1);
      assertTrue(boolean9 == boolean8);
      assertFalse(boolean9 == boolean7);
      assertTrue(boolean9 == boolean0);
      assertTrue(boolean9 == boolean4);
      assertTrue(boolean9);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1043.8143732;
      doubleArray0[2] = 2406.961;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1043.8143732, 2406.961}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1043.8143732, 2406.961}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 122L;
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = (-1L);
      longArray0[4] = (-1L);
      longArray0[5] = (-1L);
      longArray0[6] = (-1L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {122L, (-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertEquals(7, longArray0.length);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {122L, (-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(14, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {122L, (-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertEquals(7, longArray0.length);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 218;
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)3);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1626.322979378;
      doubleArray0[1] = 764.7359447419243;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1626.322979378);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new double[] {1626.322979378, 764.7359447419243}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf((char[]) null, 'U', 62);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {1626.322979378, 764.7359447419243}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean2 = ArrayUtils.contains(doubleArray0, 1917.0, 764.7359447419243);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertArrayEquals(new double[] {1626.322979378, 764.7359447419243}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {218, 0, 0, 0, 0}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1718;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[22];
      charArray0[0] = 'z';
      charArray0[1] = '7';
      charArray0[2] = '~';
      charArray0[3] = '~';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(22, charArray0.length);
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray0, (int) (short)1718, (-1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      
      int int0 = new Short((short)1718);
      assertEquals((short)1718, int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)8;
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = 'm';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = '5';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'Y', 'm', 'Y', 'Y', '5'}, charArray0);
      assertEquals(5, charArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'm';
      floatArray0[1] = (float) (byte)8;
      floatArray0[2] = (float) 'Y';
      floatArray0[3] = (float) 'm';
      floatArray0[4] = (float) (byte)8;
      floatArray0[5] = (float) 'Y';
      floatArray0[6] = (float) 'm';
      floatArray0[7] = (float) (byte)8;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (byte) (-124), (-1));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {109.0F, 8.0F, 89.0F, 109.0F, 8.0F, 89.0F, 109.0F, 8.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1625.124328288), 1700, 71.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)123;
      Byte byte1 = new Byte((byte)123);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)123, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)28);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)28, (byte)byte2);
      assertNotNull(byte2);
      
      Long long0 = Long.getLong((String) null);
      assertNull(long0);
      
      long long1 = Long.sum((byte)28, 2142L);
      assertEquals(2170L, long1);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElement((long[]) null, (-1L));
      assertNull(longArray1);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)107;
      byteArray1[1] = (byte)28;
      byteArray1[2] = (byte) (-55);
      byteArray1[3] = byte0;
      byteArray1[4] = (byte)28;
      byteArray1[5] = byte0;
      byteArray1[6] = (byte)28;
      byteArray1[7] = (byte)28;
      byteArray1[8] = (byte)123;
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)107, (byte)28, (byte) (-55), (byte)123, (byte)28, (byte)123, (byte)28, (byte)28, (byte)123}, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(18, byteArray2.length);
      assertEquals(9, byteArray1.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      
      byte[] byteArray3 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray3);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 2106L;
      longArray0[1] = 2106L;
      longArray0[3] = 2106L;
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-1580));
      assertNull(intArray0);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) floatArray1, object0, 1431655765);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) (-1580);
      doubleArray0[2] = (double) 1431655765;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 2106L;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 2106L;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.147483647E9, (-1580.0), 1.431655765E9, (-1.0), 2106.0, (-1.0), 2106.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(14, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray0);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray0.length);
      assertNotSame(floatArray2, floatArray0);
      assertSame(floatArray2, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '';
      floatArray0[1] = (float) '.';
      floatArray0[2] = (float) '\"';
      floatArray0[4] = (float) '';
      floatArray0[5] = (float) '\"';
      floatArray0[6] = (float) '.';
      floatArray0[7] = (-1713.3406F);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {127.0F, 46.0F, 34.0F, 0.0F, 127.0F, 34.0F, 46.0F, (-1713.3406F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte) (-38);
      byteArray0[7] = (byte) (-38);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-38), (int) (byte) (-38));
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte) (-38), (byte) (-38), (byte)0, (byte) (-38), (byte) (-38), (byte) (-38), (byte) (-38), (byte) (-38)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)0, 1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {127.0F, 46.0F, 34.0F, 0.0F, 127.0F, 34.0F, 46.0F, (-1713.3406F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-38);
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-38.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (-756.209939);
      doubleArray0[2] = 81.0;
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-1), 77);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-3987);
      intArray1[1] = (-3987);
      intArray1[2] = (-3987);
      intArray1[3] = (-3987);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {(-3987), (-3987), (-3987), (-3987), 0, 0, 0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray1 = new byte[0];
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, byteArray1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      boolean boolean0 = ArrayUtils.isNotEmpty(objectArray0);
      assertTrue(boolean0);
      assertEquals(3, objectArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)15;
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) (byte)38, (int) (byte)15);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)2;
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)2}, byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-75), (byte)38, (byte)38, (byte)15, (byte)0, (byte)2}, byteArray2);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-75), (byte)38, (byte)38, (byte)15, (byte)0}, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(7, byteArray2.length);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      long[] longArray0 = new long[4];
      longArray0[0] = 2106L;
      longArray0[1] = 2106L;
      longArray0[3] = 2106L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 2106L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {2106L, 2106L, 0L, 2106L}, longArray0);
      assertArrayEquals(new long[] {2106L, 0L, 2106L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      Byte[] byteArray2 = new Byte[0];
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2, (byte)64);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertNotSame(byteArray3, byteArray0);
      assertSame(byteArray3, byteArray1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-216);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-216L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-216L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short)0, 218);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, 970.009, (double) 3342L);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (-1.0);
      byte byte0 = (byte)42;
      Byte byte1 = new Byte((byte)42);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)42, (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[7];
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      byteArray0[6] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)42);
      assertArrayEquals(new byte[] {(byte)42, (byte)42, (byte)42, (byte)42, (byte)42, (byte)42, (byte)42}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      
      Character character0 = Character.valueOf('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('j');
      assertFalse(character1.equals((Object)character0));
      assertEquals('j', (char)character1);
      assertNotNull(character1);
      
      int int0 = ArrayUtils.indexOf(byteArray1, byte0, 2);
      assertEquals(2, int0);
      assertArrayEquals(new byte[] {(byte)42, (byte)42, (byte)42, (byte)42, (byte)42, (byte)42, (byte)42}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[2];
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-3);
      shortArray0[1] = (short)57;
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Double double0 = new Double(0L);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      float float0 = Float.max(0L, (short) (-3));
      assertEquals(0.0F, float0, 0.01F);
      
      Float float1 = new Float((double) 0L);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-3);
      intArray0[1] = 2461;
      intArray0[2] = (int) (short) (-3);
      intArray0[3] = 2186;
      int[] intArray1 = ArrayUtils.addAll((int[]) null, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-3), 2461, (-3), 2186}, intArray1);
      assertArrayEquals(new int[] {(-3), 2461, (-3), 2186}, intArray0);
      assertNotNull(intArray1);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = (-2091L);
      longArray0[2] = 1369L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-2091L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, (-2091L), 1369L}, longArray0);
      assertArrayEquals(new long[] {0L, 1369L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[2] = (double) 1369L;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 734.094319;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 1369.0, 0.0, 734.094319}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (-1));
      assertNull(shortArray0);
      
      long[] longArray2 = ArrayUtils.subarray(longArray1, 0, (int) (short) (-1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, (-2091L), 1369L}, longArray0);
      assertArrayEquals(new long[] {0L, 1369L}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertEquals(3, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)123);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = new boolean[9];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      booleanArray1[6] = true;
      booleanArray1[7] = false;
      booleanArray1[8] = true;
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, false, true, false, true}, booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(12, booleanArray2.length);
      assertEquals(3, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1420, 3539);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType("G:cE)HG|mCK'", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      long long0 = Long.sum((-1L), (-1L));
      assertEquals((-2L), long0);
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      long[] longArray2 = ArrayUtils.removeElement((long[]) null, 139L);
      assertNull(longArray2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-13);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)48, (byte) (-13)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte) (-13), (byte)48, (byte) (-13)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)48, (byte) (-13)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte) (-13), (byte)48, (byte) (-13)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)48, (byte) (-13), (byte)48, (byte) (-13), (byte)48, (byte) (-13)}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      long[] longArray3 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray3);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Integer[] integerArray0 = new Integer[18];
      int int0 = (-100);
      Integer integer0 = new Integer((-100));
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-100), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-100);
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) (-100);
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1));
      assertNotNull(intArray0);
      assertEquals(18, integerArray0.length);
      assertEquals(18, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1809;
      shortArray0[1] = (short)10;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)1809;
      shortArray0[4] = (short) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)1809, (short)10, (short) (-1), (short)1809, (short) (-1)}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      Float float0 = new Float(990.99F);
      assertEquals(990.99F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (short) (-1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Integer integer0 = Integer.valueOf((-2083));
      assertEquals((-2083), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean3 = ArrayUtils.isSameType("java.lang.Short", object1);
      assertFalse(object1.equals((Object)object0));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (-756.209939);
      doubleArray0[2] = 0.0;
      doubleArray0[4] = (-2691.2578341);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-5413.9));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-756.209939), 0.0, 0.0, (-2691.2578341)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)123, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)123}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) integerArray0, (Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotSame(integerArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      long[] longArray0 = new long[2];
      longArray0[0] = (-3258L);
      longArray0[1] = (-417L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {(-3258L), (-417L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(3, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      charArray0[1] = '=';
      charArray0[2] = 'D';
      charArray0[3] = '=';
      charArray0[4] = 'K';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'D', '=', 'D', '=', 'K'}, charArray0);
      assertEquals(5, charArray0.length);
      
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-3258L), (-417L), (-3258L), (-417L)}, longArray2);
      assertArrayEquals(new long[] {(-3258L), (-417L)}, longArray0);
      assertNotNull(longArray2);
      assertEquals(4, longArray2.length);
      assertEquals(2, longArray0.length);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 964);
      assertNull(intArray0);
      
      int int1 = ArrayUtils.lastIndexOf(longArray2, (-252L));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(int1 == int0);
      assertFalse(longArray0.equals((Object)longArray2));
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {(-3258L), (-417L), (-3258L), (-417L)}, longArray2);
      assertArrayEquals(new long[] {(-3258L), (-417L)}, longArray0);
      assertEquals(4, longArray2.length);
      assertEquals(2, longArray0.length);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-387L);
      longArray0[1] = (-1L);
      longArray0[2] = 1415L;
      longArray0[3] = 0L;
      longArray0[4] = 1413L;
      longArray0[5] = 0L;
      longArray0[6] = 2304L;
      longArray0[7] = (-4101L);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, (-1723));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-387L), (-1L), 1415L, 0L, 1413L, 0L, 2304L, (-4101L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.add((float[]) null, 0.0F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)67;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)67, (byte)67, (byte)67, (byte)67}, byteArray0);
      assertArrayEquals(new byte[] {(byte)67, (byte)67, (byte)67, (byte)67}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray1, (-2627), (byte)67);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2627, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 1159L;
      longArray0[1] = (-1L);
      int[] intArray0 = new int[16];
      boolean boolean0 = ArrayUtils.contains(intArray0, 13);
      assertFalse(boolean0);
      assertEquals(16, intArray0.length);
      
      int[] intArray1 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray1);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new long[] {1159L, (-1L), 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1035.4998);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-5413.9);
      doubleArray0[3] = 3530.269121357;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 4141.0;
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = 'n';
      charArray0[2] = '$';
      int int0 = ArrayUtils.indexOf(charArray0, '\\');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'\\', 'n', '$'}, charArray0);
      assertEquals(3, charArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'n';
      int[] intArray1 = ArrayUtils.add(intArray0, 1571);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {110}, intArray0);
      assertArrayEquals(new int[] {110, 1571}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_FLOAT_ARRAY, 1274.83F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[4] = 68.28191F;
      floatArray0[0] = 2631.0F;
      floatArray0[2] = 68.28191F;
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[3];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {1L, 1L, 1L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      byte byte0 = (byte)42;
      Byte byte1 = new Byte((byte)42);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)42, (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertArrayEquals(new byte[] {(byte)42, (byte)42}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      Character character0 = Character.valueOf(')');
      assertEquals(')', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf(')');
      assertEquals(')', (char)character1);
      assertNotNull(character1);
      
      int int0 = ArrayUtils.indexOf(byteArray1, byte0, (int) byte0);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)42, (byte)42}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2102L;
      longArray0[1] = 0L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 3342L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {2102L, 0L}, longArray0);
      assertArrayEquals(new long[] {2102L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = 1698;
      intArray0[1] = 2750;
      intArray0[2] = 2;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {2, 2750, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1424;
      shortArray0[1] = (short) (-4389);
      shortArray0[2] = (short)2190;
      short[] shortArray1 = ArrayUtils.remove(shortArray0, 2);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1424, (short) (-4389), (short)2190}, shortArray0);
      assertArrayEquals(new short[] {(short)1424, (short) (-4389)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-4));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Long long0 = Long.getLong("");
      assertNull(long0);
      
      int int0 = ArrayUtils.indexOf(byteArray1, (byte) (-93), (-2146451700));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-2081L), (-384));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) (-2081L);
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      char[] charArray0 = new char[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(18, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-1959);
      intArray0[1] = (-1825);
      intArray0[2] = (-1341);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1341));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1959), (-1825), (-1341)}, intArray0);
      assertArrayEquals(new int[] {(-1959), (-1825)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-1959);
      longArray0[1] = 1L;
      longArray0[2] = (long) (short)0;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {(-1959L), 1L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[4] = 68.28191F;
      floatArray0[0] = 2631.0F;
      floatArray0[2] = 68.28191F;
      Short short0 = new Short((short)10);
      assertEquals((short)10, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)10);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)10, (short)short1);
      assertNotNull(short1);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(102);
      assertEquals(102, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(shortArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[4] = 68.28191F;
      floatArray0[2] = 68.28191F;
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      boolean boolean1 = ArrayUtils.contains(booleanArray1, (boolean) boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      ArrayUtils.reverse((double[]) null);
      boolean boolean2 = ArrayUtils.contains((double[]) null, (-1741.89971226));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Short short0 = new Short((short)47);
      assertEquals((short)47, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)0);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      double[] doubleArray0 = new double[0];
      boolean boolean1 = new Boolean(true);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      boolean boolean4 = Boolean.logicalAnd(true, true);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)57;
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new short[] {(short)0, (short)57, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      Double[] doubleArray0 = new Double[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 3069.0);
      assertArrayEquals(new double[] {3069.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = ArrayUtils.isSameLength((Object[]) doubleArray0, (Object[]) doubleArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(1, doubleArray0.length);
      
      Short[] shortArray1 = new Short[0];
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      charArray0[1] = 'm';
      charArray0[2] = '7';
      charArray0[3] = '%';
      charArray0[4] = 'n';
      charArray0[5] = ':';
      charArray0[6] = '$';
      charArray0[7] = '3';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'q', 'm', '7', '%', 'n', ':', '$', '3'}, charArray1);
      assertArrayEquals(new char[] {'q', 'm', '7', '%', 'n', ':', '$', '3'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(8, charArray1.length);
      assertEquals(8, charArray0.length);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)48;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)48);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)48}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Float float0 = new Float(2609.959801);
      assertEquals(2609.9597F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-37);
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new byte[] {(byte) (-37)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '1';
      doubleArray0[1] = (double) '\"';
      doubleArray0[2] = (double) '\"';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {49.0, 34.0, 34.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      float float0 = Float.min((byte)0, (-4106.659F));
      assertEquals((-4106.659F), float0, 0.01F);
      
      Object[] objectArray0 = new Object[3];
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[0] = object1;
      objectArray0[1] = (Object) 34.0;
      objectArray0[2] = (Object) 34.0;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Object[] objectArray1 = ArrayUtils.add(objectArray0, object2);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(objectArray1);
      assertEquals(4, objectArray1.length);
      assertEquals(3, objectArray0.length);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-914));
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-914), (int)integer0);
      assertNotNull(integer0);
      
      int int1 = Integer.remainderUnsigned((-914), 99);
      assertFalse(int1 == int0);
      assertEquals(80, int1);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {(-914)}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-1));
      assertNull(shortArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-93);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-93), 729);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)127, (byte) (-93), (byte) (-93), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[4] = 68.28191F;
      floatArray0[1] = 2631.0F;
      floatArray0[2] = 68.28191F;
      floatArray0[3] = 2631.0F;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertFalse(boolean0);
      assertEquals(0, objectArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1975);
      intArray0[1] = 38;
      intArray0[2] = (-90);
      int int0 = ArrayUtils.indexOf(intArray0, (-1975));
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1975), 38, (-90)}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, objectArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new int[] {(-1975), 38, (-90)}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean3 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      boolean boolean4 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      char char0 = 'u';
      Character character0 = new Character('^');
      assertFalse(character0.equals((Object)char0));
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('u');
      assertFalse(character1.equals((Object)character0));
      assertEquals('u', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[2];
      Character character2 = new Character('u');
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('u', (char)character2);
      assertNotNull(character2);
      
      characterArray0[0] = character2;
      characterArray0[1] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'P');
      assertArrayEquals(new char[] {'u', '^'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) char0);
      assertEquals(0, int0);
      assertEquals(2, characterArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(12, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1149;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = (-1);
      intArray0[3] = 3539;
      intArray0[4] = 1420;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2212), (-1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {1149, Integer.MAX_VALUE, (-1), 3539, 1420}, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(5, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1.0F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(568.6091F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(568.6091F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) (float)floatArray0[1];
      doubleArray0[2] = (double) 568.6091F;
      doubleArray0[3] = 1562.6168100655843;
      doubleArray0[4] = 0.0;
      float float3 = Float.min(1.0F, 2671.357F);
      assertEquals(1.0F, float3, 0.01F);
      
      doubleArray0[5] = (double) 568.6091F;
      float float4 = Float.min(1.0F, 1.0F);
      assertEquals(float4, float3, 0.01F);
      assertEquals(1.0F, float4, 0.01F);
      
      doubleArray0[6] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 1.0F, (-1272), (-2221.25));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1.0, 1.0, 568.6090698242188, 1562.6168100655843, 0.0, 568.6090698242188, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '1.0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = '\"';
      charArray0[2] = '`';
      charArray0[3] = 'X';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '`');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'.', '\"', '`', 'X'}, charArray0);
      assertArrayEquals(new char[] {'.', '\"', 'X'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertTrue(boolean0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 751.857F;
      floatArray0[1] = (-1254.9F);
      floatArray0[2] = (-3698.4963F);
      floatArray0[3] = 0.0F;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {751.857F, (-1254.9F), (-3698.4963F), 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, 41.0);
      assertArrayEquals(new double[] {41.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      boolean boolean2 = ArrayUtils.contains((short[]) null, (short)2177);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)0;
      boolean boolean3 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)95, (byte)0, (byte)32, (byte)95, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Integer integer0 = new Integer((-608));
      assertEquals((-608), (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-608);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-608.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-608.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-69), (byte) (-23), (byte)70, (byte)75, (byte) (-1), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-3);
      shortArray0[1] = (short)57;
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Double double0 = new Double(0L);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new short[] {(short) (-3), (short)57}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)57);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-3), (short)57}, shortArray0);
      assertArrayEquals(new short[] {(short) (-3)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Integer integer0 = Integer.valueOf((int) (short)57);
      assertEquals(57, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.compareUnsigned((short)57, (short) (-3));
      assertEquals((-1), int0);
      
      int int1 = Integer.compareUnsigned((-1), (-195));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      boolean boolean3 = ArrayUtils.contains(shortArray1, (short)2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      assertArrayEquals(new short[] {(short) (-3), (short)57}, shortArray0);
      assertArrayEquals(new short[] {(short) (-3)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer1 = Integer.getInteger("java.lang.String", integer0);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(57, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 2647);
      assertArrayEquals(new int[] {57, 57, 57, 57}, intArray0);
      assertNotNull(intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double double0 = Double.min((short)57, 0L);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean2 = Double.isFinite(0L);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null, 1.5);
      assertNull(doubleArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      charArray0[2] = '!';
      charArray0[3] = '!';
      charArray0[4] = 'X';
      charArray0[5] = 'L';
      charArray0[6] = '!';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '!');
      assertEquals(6, int0);
      assertArrayEquals(new char[] {'X', 'X', '!', '!', 'X', 'L', '!'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Character character0 = new Character('l');
      assertEquals('l', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('|');
      assertFalse(character1.equals((Object)character0));
      assertEquals('|', (char)character1);
      assertNotNull(character1);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'Z');
      assertNull(charArray0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray1 = ArrayUtils.clone((char[]) null);
      assertNull(charArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 218L;
      longArray0[1] = (-216L);
      longArray0[2] = (long) 'Z';
      longArray0[3] = (long) 'Z';
      longArray0[4] = (long) 'Z';
      longArray0[5] = (long) 'Z';
      longArray0[6] = (long) 'l';
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {218L, (-216L), 90L, 90L, 90L, 90L, 108L}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-1712L);
      longArray0[1] = (-1L);
      longArray0[2] = 1L;
      longArray0[3] = 0L;
      longArray0[4] = 1L;
      longArray0[5] = 0L;
      longArray0[6] = (-1L);
      longArray0[7] = 2831L;
      longArray0[8] = 0L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 2523L, 0);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-1712L), (-1L), 1L, 0L, 1L, 0L, (-1L), 2831L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = (-2081L);
      longArray0[2] = 1369L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-2081L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, (-2081L), 1369L}, longArray0);
      assertArrayEquals(new long[] {0L, 1369L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[2] = (double) 1369L;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 734.094319;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 1369.0, 0.0, 734.094319}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (-1));
      assertNull(shortArray0);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray0, 112L);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L, (-2081L), 1369L}, longArray0);
      assertArrayEquals(new long[] {0L, (-2081L), 1369L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0;
      Object[] objectArray1 = ArrayUtils.subarray(objectArray0, 805, (int)  (-1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertEquals(1, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (int) (short) (-1), 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      long[] longArray0 = new long[3];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Character character0 = new Character('*');
      assertEquals('*', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('u');
      assertFalse(character1.equals((Object)character0));
      assertEquals('u', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[2];
      Character character2 = Character.valueOf('*');
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertEquals('*', (char)character2);
      assertNotNull(character2);
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'u');
      assertArrayEquals(new char[] {'u', 'u'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) "Array element ");
      assertEquals((-1), int0);
      assertEquals(2, characterArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      boolean boolean0 = ArrayUtils.isNotEmpty(objectArray0);
      assertTrue(boolean0);
      assertEquals(3, objectArray0.length);
      
      Integer integer0 = new Integer((-553));
      assertEquals((-553), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger(", Length: ", integer0);
      assertEquals((-553), (int)integer1);
      assertNotNull(integer1);
      
      Integer[] integerArray0 = ArrayUtils.addAll((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '\u0000';
      char[] charArray1 = ArrayUtils.nullToEmpty((char[]) null);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray1, charArray0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      assertNotNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'r';
      charArray0[1] = 'e';
      charArray0[2] = 'i';
      charArray0[3] = 'a';
      charArray0[4] = 'm';
      charArray0[5] = '6';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'r', 'e', 'i', 'a', 'm', '6'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(12, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-9734);
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'r';
      longArray0[1] = (long) 'e';
      longArray0[2] = (long) '6';
      longArray0[3] = 476L;
      longArray0[4] = (long) '6';
      longArray0[5] = (long) 'e';
      longArray0[6] = (long) 'i';
      longArray0[7] = (long) 'a';
      longArray0[8] = (-804L);
      int int0 = ArrayUtils.indexOf(longArray0, (long) (short) (-9734), (int) (short) (-9734));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {114L, 101L, 54L, 476L, 54L, 101L, 105L, 97L, (-804L)}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 302, 302);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)57;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)57, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      Double[] doubleArray0 = new Double[1];
      double double0 = Double.min((short)0, 0L);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 3069.0);
      assertArrayEquals(new double[] {3069.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) doubleArray0, (Object[]) doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-756.209939);
      doubleArray0[2] = (double) (byte) (-14);
      Byte byte0 = new Byte((byte) (-14));
      assertEquals((byte) (-14), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = Byte.toUnsignedInt((byte) (-14));
      assertEquals(242, int0);
      
      long long0 = Byte.toUnsignedLong((byte)102);
      assertEquals(102L, long0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.reverse((short[]) null);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)102;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)102}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1473;
      shortArray0[1] = (short) (-923);
      shortArray0[2] = (short)36;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)36, (short) (-923), (short)1473}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (short)1473;
      objectArray0[1] = (Object) (short)36;
      boolean boolean0 = ArrayUtils.isNotEmpty(objectArray0);
      assertTrue(boolean0);
      assertEquals(2, objectArray0.length);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)36, (short) (-923), (short)1473}, shortArray0);
      assertArrayEquals(new short[] {(short)36, (short) (-923), (short)1473}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'G';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '*', 1950);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'G'}, charArray0);
      assertEquals(1, charArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-923);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-923L)}, longArray0);
      assertArrayEquals(new long[] {(-923L), (-923L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'G'}, charArray0);
      assertEquals(1, charArray0.length);
      
      ArrayUtils.reverse(longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {(-923L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotSame(longArray0, longArray1);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'G'}, charArray1);
      assertArrayEquals(new char[] {'G'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(1, charArray1.length);
      assertEquals(1, charArray0.length);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1538.32F;
      floatArray0[2] = 2220.4F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.0F, 1538.32F, 2220.4F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-281);
      shortArray0[1] = (short)77;
      shortArray0[2] = (short)2309;
      shortArray0[3] = (short)36;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short) (-1334);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-1334), (short)2, (short)36, (short)2309, (short)77, (short) (-281)}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 1159L;
      longArray0[1] = (-1L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1159L;
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) 1159L;
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) 1159L;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-735.18681));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1159.0, (-1.0), 1159.0, (-1.0), 1159.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1159.0, (-1.0), 1159.0, (-1.0), 1159.0, (-735.18681)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1159.0, (-1.0), 1159.0, (-1.0), 1159.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1159.0, (-1.0), 1159.0, (-1.0), 1159.0, 1159.0, (-1.0), 1159.0, (-1.0), 1159.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-735.18681), (double) 1159L);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(1, int0);
      assertArrayEquals(new double[] {1159.0, (-1.0), 1159.0, (-1.0), 1159.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {1159L, (-1L), 0L}, longArray0);
      assertArrayEquals(new long[] {1159L, (-1L), 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      ArrayUtils.reverse(longArray1);
      assertArrayEquals(new long[] {0L, (-1L), 1159L}, longArray0);
      assertArrayEquals(new long[] {0L, (-1L), 1159L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray1, 1.0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1159.0, (-1.0), 1159.0, (-1.0), 1159.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1159.0, (-1.0), 1159.0, (-1.0), 1159.0, (-735.18681)}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      
      Short short0 = new Short((short) (-50));
      assertEquals((short) (-50), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)516);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)516, (short)short1);
      assertNotNull(short1);
      
      Short[] shortArray0 = new Short[4];
      shortArray0[0] = short0;
      Short short2 = new Short((short) (-597));
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short) (-597), (short)short2);
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short) (-50), (short) (-597), (short) (-50), (short) (-50)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[1];
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 122.0F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1335.45F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-417.8393F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1335.45F), 0.0F, (-417.8393F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      Integer integer0 = new Integer((-1124));
      assertEquals((-1124), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.compareUnsigned((-1124), (-1124));
      assertEquals(0, int0);
      
      boolean boolean1 = ArrayUtils.isEquals(integer0, integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      charArray0[1] = 'c';
      charArray0[2] = '\'';
      charArray0[3] = '=';
      charArray0[4] = 'Q';
      charArray0[5] = 'w';
      char[] charArray1 = ArrayUtils.add(charArray0, 0, '(');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'(', ':', 'c', '\'', '=', 'Q', 'w'}, charArray1);
      assertArrayEquals(new char[] {':', 'c', '\'', '=', 'Q', 'w'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(6, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray1, (byte[]) null);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-756.209939);
      doubleArray0[2] = 81.0;
      char[] charArray0 = new char[4];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 620, 2144566611);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotSame(charArray0, charArray1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "C9i]is<UD7gb|ftd0X";
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.indexOf(intArray1, (-1018));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) boolean0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'true', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, object1);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)object2));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertEquals(3, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(object1, object0);
      assertNotSame(object1, object2);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      Short short0 = new Short((short)10);
      assertEquals((short)10, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-1367));
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-1367), (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-1367));
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short) (-1367), (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short)1828);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short)1828, (short)short3);
      assertNotNull(short3);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)4390);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)1;
      floatArray0[1] = (float) (short) (-1);
      floatArray0[2] = (float) (short)4390;
      floatArray0[3] = (float) (short) (-1);
      floatArray0[4] = (float) (short) (-1367);
      floatArray0[5] = (float) (short)10;
      floatArray0[6] = (float) (short) (-1);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {1.0F, (-1.0F), 4390.0F, (-1.0F), (-1367.0F), 10.0F, (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, (-1.0F), 4390.0F, (-1.0F), (-1367.0F), 10.0F, (-1.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-3010.0);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-2947.1204);
      doubleArray0[6] = 1204.5;
      doubleArray0[7] = 0.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.5, 0.0, 0.0, (-3010.0), 1.0, (-2947.1204), 1204.5, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = new byte[2];
      byteArray0[0] = (Byte) (byte)103;
      byteArray2[1] = (byte)123;
      Byte[] byteArray3 = ArrayUtils.toObject(byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)123}, byteArray2);
      assertNotNull(byteArray3);
      assertEquals(2, byteArray2.length);
      assertEquals(2, byteArray3.length);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray3, object1, 0);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(object1.equals((Object)object0));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)123}, byteArray2);
      assertEquals(2, byteArray2.length);
      assertEquals(2, byteArray3.length);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(object1, object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) byteArray1, object1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Object
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[3] = '$';
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)330);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)330, (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-945));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short) (-945), (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short) (-945));
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short) (-945), (short)short3);
      assertNotNull(short3);
      
      Short[] shortArray0 = new Short[6];
      shortArray0[0] = short2;
      shortArray0[1] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short1;
      shortArray0[5] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-939));
      assertArrayEquals(new short[] {(short) (-945), (short) (-1), (short) (-939), (short) (-1), (short)330, (short)330}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '\"';
      intArray0[1] = (int) '\"';
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {34, 34}, intArray0);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 34, (int) (byte)0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {34, 34}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new int[] {34, 34}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertEquals(13, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      int int0 = ArrayUtils.indexOf(intArray0, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      Object[] objectArray1 = new Object[6];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 0;
      objectArray1[1] = (Object) 0;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray1[2] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertNotNull(object4);
      
      objectArray1[3] = object4;
      objectArray1[4] = (Object) 0;
      objectArray1[5] = object1;
      boolean boolean1 = ArrayUtils.isEmpty(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, objectArray1.length);
      assertNotSame(objectArray1, objectArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object2));
      assertNotNull(object5);
      
      long[] longArray0 = new long[0];
      boolean boolean3 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 48;
      intArray0[2] = 1126;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {0, 48, 1126, 0}, intArray0);
      assertArrayEquals(new int[] {0, 48, 1126, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 462;
      doubleArray0[1] = (double) 2469;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 462;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-4300);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1126;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-736.1882637610285), 819);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {462.0, 2469.0, 0.0, 462.0, 0.0, (-4300.0), 0.0, 1126.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int int1 = ArrayUtils.indexOf(intArray1, 0, 2859);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {0, 48, 1126, 0}, intArray0);
      assertArrayEquals(new int[] {0, 48, 1126, 0}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2519.09);
      doubleArray1[1] = (double) 48;
      doubleArray1[2] = (double) 48;
      doubleArray1[3] = (double) 462;
      doubleArray1[4] = 784.636952749;
      doubleArray1[5] = (double) 462;
      doubleArray1[6] = (-736.1882637610285);
      int int2 = ArrayUtils.lastIndexOf(doubleArray1, 4594.18529396, (-1360));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertArrayEquals(new double[] {(-2519.09), 48.0, 48.0, 462.0, 784.636952749, 462.0, (-736.1882637610285)}, doubleArray1, 0.01);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, "Q'r;UGLA{sWh>;I");
      assertFalse(boolean0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2272;
      short[] shortArray1 = new short[5];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)2272;
      shortArray1[1] = (short)2272;
      shortArray1[2] = (short)2272;
      shortArray1[3] = (short)2272;
      shortArray1[4] = (short)2272;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)2272}, shortArray0);
      assertArrayEquals(new short[] {(short)2272, (short)2272, (short)2272, (short)2272, (short)2272}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object1;
      objectArray0[1] = object1;
      objectArray0[2] = object1;
      Object[] objectArray1 = ArrayUtils.addAll((Object[]) null, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertEquals(3, objectArray0.length);
      assertEquals(3, objectArray1.length);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      
      Object[] objectArray2 = ArrayUtils.nullToEmpty((Object[]) integerArray0);
      assertFalse(objectArray2.equals((Object)objectArray0));
      assertFalse(objectArray2.equals((Object)objectArray1));
      assertNotNull(objectArray2);
      assertEquals(1, integerArray0.length);
      assertEquals(1, objectArray2.length);
      assertSame(integerArray0, objectArray2);
      
      Object[] objectArray3 = ArrayUtils.addAll(objectArray0, (Object[]) integerArray0);
      assertFalse(objectArray0.equals((Object)objectArray2));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray3.equals((Object)objectArray2));
      assertFalse(objectArray3.equals((Object)objectArray1));
      assertFalse(objectArray3.equals((Object)objectArray0));
      assertNotNull(objectArray3);
      assertEquals(1, integerArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(4, objectArray3.length);
      assertSame(integerArray0, objectArray2);
      assertNotSame(objectArray0, objectArray3);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray3, objectArray1);
      assertNotSame(objectArray3, objectArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'java.lang.Object@590e8b40', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = (-2081L);
      longArray0[2] = 1369L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-2081L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, (-2081L), 1369L}, longArray0);
      assertArrayEquals(new long[] {0L, 1369L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-2081L);
      doubleArray0[2] = (double) 1369L;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 734.094319;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {0.0, (-2081.0), 1369.0, 0.0, 734.094319}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (-1));
      assertNull(shortArray0);
      
      long[] longArray2 = ArrayUtils.subarray(longArray1, 0, 154);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L, (-2081L), 1369L}, longArray0);
      assertArrayEquals(new long[] {0L, 1369L}, longArray1);
      assertArrayEquals(new long[] {0L, 1369L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(3, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)123);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = '';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'L');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'', ''}, charArray0);
      assertEquals(2, charArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) '';
      doubleArray0[1] = (double) '';
      doubleArray0[2] = (double) '';
      doubleArray0[3] = (double) '';
      doubleArray0[4] = (double) '';
      doubleArray0[5] = (double) '';
      doubleArray0[6] = (double) '';
      doubleArray0[7] = (double) '';
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 512, 2146820844);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      assertNotNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-1));
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (short) (-1);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, (-162.167));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'r';
      charArray0[1] = 'v';
      charArray0[2] = 'i';
      charArray0[3] = '}';
      charArray0[4] = '}';
      charArray0[5] = '5';
      Character[] characterArray2 = ArrayUtils.toObject(charArray0);
      assertFalse(characterArray2.equals((Object)characterArray0));
      assertFalse(characterArray2.equals((Object)characterArray1));
      assertArrayEquals(new char[] {'r', 'v', 'i', '}', '}', '5'}, charArray0);
      assertNotNull(characterArray2);
      assertEquals(6, characterArray2.length);
      assertEquals(6, charArray0.length);
      assertNotSame(characterArray2, characterArray0);
      assertNotSame(characterArray2, characterArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'r', 'v', 'i', '}', '}', '5'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-756.209939);
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = Float.isFinite(0.0F);
      assertTrue(boolean0);
      
      Float float1 = new Float(568.6091F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(568.6091F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float[] floatArray0 = new Float[8];
      Float float2 = new Float((double) 0.0F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[0] = float2;
      Float float3 = new Float((double) 568.6091F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(568.6091F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[1] = float3;
      floatArray0[2] = float1;
      floatArray0[3] = float0;
      floatArray0[4] = float1;
      floatArray0[5] = float0;
      floatArray0[6] = float0;
      floatArray0[7] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      
      float float4 = Float.min((-1.0F), (float) floatArray0[7]);
      assertEquals((-1.0F), float4, 0.01F);
      assertEquals(8, floatArray0.length);
      assertSame(floatArray0, floatArray1);
      
      float float5 = Float.min((-1.0F), 1.0F);
      assertEquals(float5, float4, 0.01F);
      assertEquals((-1.0F), float5, 0.01F);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-9);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)71);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)10, (byte)10, (byte) (-9)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)10, 0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {(byte)10, (byte)10, (byte) (-9)}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, 1.0, (-3511));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'X');
      assertNull(charArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray1 = ArrayUtils.add((char[]) null, 'y');
      assertArrayEquals(new char[] {'y'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray1.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray((boolean[]) null, (-1), (-4724));
      assertNull(booleanArray1);
      
      Character character0 = new Character('[');
      assertEquals('[', (char)character0);
      assertNotNull(character0);
      
      char[] charArray2 = ArrayUtils.toPrimitive((Character[]) null, '<');
      assertNull(charArray2);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Integer integer0 = new Integer(1130);
      assertEquals(1130, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '.';
      charArray0[1] = '';
      charArray0[2] = 'S';
      charArray0[3] = 'X';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'S');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'.', '', 'S', 'X', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'.', '', 'X', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(7, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      objectArray0[5] = object0;
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertFalse(object0.equals((Object)object1));
      assertTrue(boolean0);
      assertEquals(6, objectArray0.length);
      assertNotSame(object0, object1);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      objectArray0[5] = object0;
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertFalse(object0.equals((Object)object1));
      assertTrue(boolean0);
      assertEquals(6, objectArray0.length);
      assertNotSame(object0, object1);
      
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(intArray1, (int[]) null);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Integer[] integerArray0 = new Integer[20];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[20];
      objectArray0[18] = object0;
      // Undeclared exception!
      try { 
        ArrayUtils.addAll((Object[]) integerArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot store java.lang.Object in an array of java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '\"';
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '\"';
      charArray1[1] = '\"';
      charArray1[2] = '\"';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\"'}, charArray0);
      assertArrayEquals(new char[] {'\"', '\"', '\"'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-90));
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'\"'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 3679.10778);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 2586, (-1608));
      assertNull(doubleArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1608);
      boolean boolean3 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      assertArrayEquals(new long[] {(-1608L)}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-524.3903498289665);
      boolean boolean0 = ArrayUtils.isEquals(object1, (-1.0));
      assertFalse(object1.equals((Object)object0));
      assertFalse(boolean0);
      assertNotSame(object1, object0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1542.7917475));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float float0 = Float.min(1.0F, 3764.0F);
      assertEquals(1.0F, float0, 0.01F);
      
      boolean boolean2 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((int[]) null, 13);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray1, true);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, int0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1);
      shortArray0[0] = (short) (-1959);
      shortArray0[4] = (short) (-1959);
      shortArray0[5] = (short)1;
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-59);
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-59)}, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray2, object0, 0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-59)}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-5833);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-5833), (int) (short) (-5833));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-5833)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-624), (byte) (-77));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -624, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) null, (int) 57, (-2121294823));
      assertNull(objectArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-1), (double) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = '';
      String[] stringArray0 = ArrayUtils.addAll((String[]) null, (String[]) null);
      assertNull(stringArray0);
      
      long[] longArray0 = new long[0];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2081L);
      doubleArray0[1] = (double) (-2081L);
      doubleArray0[2] = (double) '.';
      doubleArray0[3] = (double) '';
      doubleArray0[4] = (double) '';
      doubleArray0[5] = (double) '.';
      doubleArray0[6] = (double) '.';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 166, (-585.0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-2081.0), (-2081.0), 46.0, 127.0, 127.0, 46.0, 46.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)79;
      shortArray0[1] = (short)79;
      shortArray0[2] = (short)2;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)79, (short)79, (short)2}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Integer integer0 = new Integer(608);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(608, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(331);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertEquals(331, (int)integer1);
      assertNotNull(integer1);
      
      boolean boolean2 = ArrayUtils.isSameType(integer0, integer1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (-756.209939);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 3216, (int) (byte)0, 2962.59104);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, (-756.209939), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short)48;
      Short[] shortArray1 = new Short[2];
      shortArray1[0] = (Short) (short)0;
      shortArray1[1] = (Short) (short)48;
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray2);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-1926L));
      assertNull(longArray0);
      
      int int1 = ArrayUtils.lastIndexOf((int[]) null, 100, (int) shortArray1[0]);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(2, shortArray1.length);
      assertSame(shortArray1, shortArray2);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer((short)1127);
      assertEquals(1127, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 342);
      assertArrayEquals(new int[] {1127}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 218;
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 218;
      doubleArray0[1] = 764.7359447419243;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 218);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {218.0, 764.7359447419243}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((char[]) null, 'U', 62);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {218.0, 764.7359447419243}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean2 = ArrayUtils.contains(doubleArray0, 1917.0, 764.7359447419243);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {218.0, 764.7359447419243}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {218, 0, 0, 0, 0}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(integerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '218', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = 'T';
      charArray0[2] = '1';
      charArray0[3] = '\"';
      charArray0[4] = 'O';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'$', 'T', '1', '\"', 'O'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, characterArray0.length);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short) (-210));
      assertEquals((short) (-210), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)0);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-210), 1933);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '\"';
      longArray0[1] = (long) '1';
      longArray0[2] = (long) (short)shortArray0[0];
      longArray0[3] = (long) 1933;
      longArray0[4] = (long) '\"';
      longArray0[5] = (long) '1';
      longArray0[6] = (long) '1';
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {34L, 49L, (-210L), 1933L, 34L, 49L, 49L}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (-756.209939);
      doubleArray0[2] = 81.0;
      doubleArray0[4] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-5413.9));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-756.209939), 81.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)123, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)123}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((byte)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.remainderUnsigned((byte)123, (-2064888122));
      assertEquals(123, int0);
      
      integerArray0[1] = integerArray0[0];
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 3216, (int) (byte)0, 2962.59104);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short)48;
      shortArray0[2] = (short) (byte)0;
      Float float0 = Float.valueOf((float) (short)48);
      assertEquals(48.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) (byte)0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((float) (short)0);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) 3216);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)48, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)48);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)48, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Integer integer0 = Integer.valueOf((int) (short)48);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(48, (int)integer0);
      assertNotNull(integer0);
      
      int int1 = Integer.compareUnsigned((short)48, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = Integer.compareUnsigned((byte)0, (-1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean1 = ArrayUtils.isSameType(integer0, "Xt");
      assertTrue(boolean1 == boolean0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(boolean1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 3455;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1172), 1422);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {3455, 0, 0, 0, 0, (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {3455, 0, 0, 0, 0, (-1), (-1)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Float float0 = Float.valueOf((float) (-100));
      assertEquals((-100.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min((-100), (-100));
      assertEquals((-100.0F), float1, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) integerArray0, (Object) float0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Float
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1430), 2144021137);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1430);
      doubleArray0[1] = 1159.0;
      doubleArray0[2] = (-2496.0891849);
      doubleArray0[3] = (double) 2144021137;
      doubleArray0[4] = (double) (-1430);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {(-1430.0), 1159.0, (-2496.0891849), 2.144021137E9, (-1430.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2144021137;
      intArray0[1] = 2144021137;
      intArray0[2] = (-1);
      intArray0[3] = (-18);
      intArray0[4] = 2144021137;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2144021137, 2144021137, (-1), (-18), 2144021137}, intArray0);
      assertArrayEquals(new int[] {2144021137, 2144021137, (-1), (-18), 2144021137, 2144021137, 2144021137, (-1), (-18), 2144021137}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('~');
      assertEquals('~', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('~');
      assertTrue(character1.equals((Object)character0));
      assertEquals('~', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = '|';
      charArray0[2] = '!';
      charArray0[3] = 'O';
      charArray0[4] = '`';
      boolean boolean0 = ArrayUtils.contains(charArray0, '.');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {',', '|', '!', 'O', '`'}, charArray0);
      assertEquals(5, charArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '.';
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 'O';
      doubleArray0[3] = (double) 'O';
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (double) '`';
      doubleArray0[6] = (double) '`';
      doubleArray0[7] = (double) '|';
      doubleArray0[8] = (double) '!';
      int int0 = 0;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, 1.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 46.0, 0.0, 79.0, 79.0, (-1.0), 96.0, 96.0, 124.0, 33.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {46.0, 0.0, 79.0, 79.0, (-1.0), 96.0, 96.0, 124.0, 33.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(10, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger((String) null, (Integer) int0);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(Integer.MAX_VALUE, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(3);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertEquals(3, (int)integer4);
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      Character character0 = Character.valueOf('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('<');
      assertEquals('<', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '<');
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) "Array element ");
      assertEquals((-1), int0);
      assertEquals(0, characterArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = ArrayUtils.addAll((String[]) null, (String[]) null);
      assertNull(stringArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2370;
      longArray0[1] = (long) 2370;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 46L, 2370);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {2370L, 2370L}, longArray0);
      assertEquals(2, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.contains((float[]) null, (float) 2370L);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      String[] stringArray1 = ArrayUtils.addAll((String[]) null, (String[]) null);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      Short[] shortArray1 = new Short[2];
      shortArray1[0] = (Short) (short)0;
      shortArray1[1] = (Short) (short)0;
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray2);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-1926L));
      assertNull(longArray0);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 100, (int) shortArray1[0]);
      assertEquals((-1), int0);
      assertEquals(2, shortArray1.length);
      assertSame(shortArray1, shortArray2);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "m";
      stringArray0[1] = " in an array of ";
      String[] stringArray1 = ArrayUtils.removeElement(stringArray0, (Object) shortArray1[1]);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
      assertEquals(2, shortArray1.length);
      assertEquals(2, stringArray0.length);
      assertNotSame(stringArray1, stringArray0);
      assertSame(shortArray1, shortArray2);
      assertNotSame(stringArray0, stringArray1);
      
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      double double0 = (-860.61705797942);
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-860.61705797942));
      assertEquals((-1), int0);
      
      int int1 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        ArrayUtils.add((double[]) null, Integer.MAX_VALUE, (double) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Float float0 = new Float(1473.0F);
      assertEquals(1473.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)67;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)67, (byte)67, (byte)67}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)67, (byte)67, (byte)67}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray1, (int) (byte)67, (byte)67);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 67, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)3);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse((float[]) null);
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean("!\"oh?c:");
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[5];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean1;
      booleanArray0[2] = boolean2;
      int int1 = Boolean.compare(boolean0, true);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean3 = Boolean.logicalOr((boolean) boolean2, true);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      boolean boolean4 = ArrayUtils.contains(booleanArray1, false);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)3;
      doubleArray0[1] = (-1.0);
      doubleArray0[1] = (double) (byte)3;
      doubleArray0[1] = (double) (-1);
      doubleArray0[4] = (double) (byte)3;
      doubleArray0[5] = (double) (byte)3;
      doubleArray0[6] = (double) (byte)3;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {3.0, 3.0, 3.0, 0.0, 0.0, (-1.0), 3.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      boolean boolean5 = ArrayUtils.contains(doubleArray0, (double) (-1));
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5);
      assertArrayEquals(new double[] {3.0, 3.0, 3.0, 0.0, 0.0, (-1.0), 3.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)3;
      shortArray0[1] = (short) (byte)3;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (int) (byte)3, (short) (byte)3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Character character0 = new Character('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('4');
      assertFalse(character1.equals((Object)character0));
      assertEquals('4', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[2];
      Character character2 = new Character('u');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('u', (char)character2);
      assertNotNull(character2);
      
      characterArray0[0] = character2;
      characterArray0[1] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'P');
      assertArrayEquals(new char[] {'u', '^'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray1, integerArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((AbstractMap.SimpleEntry<Integer, Object>[]) null, (AbstractMap.SimpleEntry<Integer, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      AbstractMap.SimpleEntry<String, Integer>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<String, Integer>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 4);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("java.lang.Double", (Integer) null);
      assertNotNull(abstractMap_SimpleEntry0);
      
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleEntry0);
      assertTrue(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry1);
      
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry1;
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<String, Integer>("java.lang.Double", (Integer) null);
      assertTrue(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry2);
      
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry2;
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleEntry2);
      assertTrue(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertTrue(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry0));
      assertTrue(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry2));
      assertNotNull(abstractMap_SimpleEntry3);
      
      Comparator<Map.Entry<Integer, String>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      abstractMap_SimpleEntryArray0[3] = abstractMap_SimpleEntry3;
      AbstractMap.SimpleEntry<String, Integer>[] abstractMap_SimpleEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray0);
      assertFalse(abstractMap_SimpleEntryArray1.equals((Object)abstractMap_SimpleEntryArray0));
      assertNotNull(abstractMap_SimpleEntryArray1);
      assertEquals(4, abstractMap_SimpleEntryArray0.length);
      assertEquals(8, abstractMap_SimpleEntryArray1.length);
      assertNotSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
      assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
      
      String[] stringArray0 = ArrayUtils.addAll((String[]) null, (String[]) null);
      assertNull(stringArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(abstractMap_SimpleEntryArray1);
      assertFalse(abstractMap_SimpleEntryArray0.equals((Object)abstractMap_SimpleEntryArray1));
      assertFalse(abstractMap_SimpleEntryArray1.equals((Object)abstractMap_SimpleEntryArray0));
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      assertEquals(4, abstractMap_SimpleEntryArray0.length);
      assertEquals(8, abstractMap_SimpleEntryArray1.length);
      assertNotSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
      assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      short[] shortArray0 = new short[5];
      Float float0 = Float.valueOf((float) (short)0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) (short)0);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)48);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, 2137677786);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 1.0, (-3511));
      assertEquals((-1), int0);
      
      String string0 = ArrayUtils.toString((Object) "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Character character0 = Character.valueOf('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-831), Integer.MAX_VALUE);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Float float0 = Float.valueOf(1511.9972F);
      assertEquals(1511.9972F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'V';
      charArray0[1] = '<';
      charArray0[2] = 'U';
      charArray0[3] = '5';
      charArray0[4] = '/';
      charArray0[5] = 'w';
      charArray0[6] = '|';
      int int0 = ArrayUtils.indexOf(charArray0, 'U');
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'V', '<', 'U', '5', '/', 'w', '|'}, charArray0);
      assertEquals(7, charArray0.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-966), 3);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'V', '<', 'U', '5', '/', 'w', '|'}, charArray0);
      assertArrayEquals(new char[] {'V', '<', 'U'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray0, (Object[]) integerArray0);
      assertTrue(boolean0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(1460);
      assertEquals(1460, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Integer integer0 = new Integer((-100));
      assertEquals((-100), (int)integer0);
      assertNotNull(integer0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)38, 1618);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)38;
      shortArray0[1] = (short) (byte)38;
      shortArray0[2] = (short) (byte)38;
      shortArray0[3] = (short) (byte)38;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)38, (short)38, (short)38, (short)38}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)1;
      intArray0[2] = (int) (byte)1;
      intArray0[4] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {0, 1, 1, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 1, 1, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, 1562.6168100655843, (-448));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, 1, (-1));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertArrayEquals(new int[] {0, 1, 1, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertSame(intArray0, intArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, 3297.8474, (int) (byte)3);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      objectArray0[5] = object0;
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertFalse(object0.equals((Object)object1));
      assertTrue(boolean0);
      assertEquals(6, objectArray0.length);
      assertNotSame(object0, object1);
      
      int int0 = ArrayUtils.indexOf(intArray1, (-1018));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(intArray1, (int[]) null);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      boolean boolean3 = ArrayUtils.isSameLength(intArray2, (int[]) null);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray2.length);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean4 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-3);
      shortArray0[1] = (short)57;
      Double[] doubleArray0 = new Double[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'z', 'z'}, charArray0);
      assertArrayEquals(new char[] {'z', 'z'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 4044;
      intArray0[1] = (int) 'z';
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {4044, 122}, intArray0);
      assertArrayEquals(new int[] {4044, 122, 4044, 122}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)17;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)114);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte)17}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(integerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-100);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-100.0), (-391), 0.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, (-100.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Float[] floatArray0 = null;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, (-100.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray1);
      
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((String[]) null, 3176, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean("m");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      boolean boolean2 = Boolean.logicalXor(true, false);
      assertTrue(boolean2);
      
      Boolean[] booleanArray1 = new Boolean[9];
      booleanArray1[0] = boolean1;
      booleanArray1[1] = boolean1;
      booleanArray1[2] = boolean1;
      booleanArray1[3] = boolean1;
      booleanArray1[4] = boolean0;
      booleanArray1[5] = boolean0;
      booleanArray1[6] = boolean1;
      booleanArray1[7] = boolean1;
      booleanArray1[8] = boolean1;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, false, false, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(9, booleanArray2.length);
      assertEquals(9, booleanArray1.length);
      assertNotSame(booleanArray2, booleanArray0);
      
      boolean boolean3 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 0L);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Boolean boolean1 = new Boolean((String) null);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean("");
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      boolean boolean4 = Boolean.logicalXor(true, false);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.contains(intArray0, 13);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-387L);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)100;
      shortArray0[1] = (short)53;
      shortArray0[2] = (short) (-9734);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)100, (short)53, (short) (-9734)}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)100;
      floatArray0[1] = (float) (short)100;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-387L);
      doubleArray0[1] = (double) 100.0F;
      doubleArray0[2] = (double) (-1L);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-2081.0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-387.0), 100.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-387.0), 100.0, (-1.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {100.0F, 100.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      
      Long[] longArray1 = new Long[0];
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray2, longArray0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-100));
      assertEquals((-100), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("#p@*diS\u0003(d%ZW", integer0);
      assertEquals((-100), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[0] = integer0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      long[] longArray0 = new long[4];
      longArray0[0] = 2106L;
      longArray0[3] = 2106L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 2106L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {2106L, 0L, 0L, 2106L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 2106L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(16, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(8, byteArray0.length);
      assertEquals(16, byteArray1.length);
      assertEquals(24, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((String[]) null, 2, "java.lang.Double");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-100));
      assertEquals((-100), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("#p@*diS\u0003(d%ZW", integer0);
      assertEquals((-100), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray1, (Object) (-100), (-100));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals((-1), int0);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-756.209939);
      long long0 = Byte.toUnsignedLong((byte)102);
      assertEquals(102L, long0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Byte[] byteArray2 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray2);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) (byte)102);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[1] = (-756.209939);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 3216, (int) (byte)0, 0.06129155055009359);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, (-756.209939), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short)79;
      doubleArray0[2] = (double) (byte)0;
      shortArray0[3] = (short) (byte)0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)100;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)100, (byte)100}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      short[] shortArray0 = new short[0];
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)1;
      floatArray0[2] = (-463.0F);
      floatArray0[3] = (float) (byte)1;
      floatArray0[5] = (float) (byte)1;
      floatArray0[0] = (float) (byte)1;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (byte)0, 2);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1.0F, 1.0F, (-463.0F), 1.0F, 0.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      charArray0[1] = 't';
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-722.91));
      assertEquals((-722.91), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-722.91));
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-722.91), (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-722.91));
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((-722.91), (double)double3, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 1159L;
      longArray0[1] = (-1L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {1159L, (-1L), 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      int[] intArray0 = new int[2];
      boolean boolean0 = ArrayUtils.contains(intArray0, 13);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) longArray1, object0, (-6558));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {1159L, (-1L), 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      
      int int2 = ArrayUtils.lastIndexOf(booleanArray1, true, (-6558));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2783;
      Float float0 = new Float((float) (short)2783);
      assertEquals(2783.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = new Short((short)2783);
      assertEquals((short)2783, float1, 0.01F);
      
      Float float2 = new Float(1.0);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[13];
      floatArray0[0] = (float) (short)2783;
      floatArray0[1] = (-210.0F);
      floatArray0[3] = (float) (short)2783;
      floatArray0[4] = (float) (short)2783;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(13, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      short[] shortArray0 = new short[0];
      float[] floatArray0 = new float[2];
      floatArray0[1] = 2826.0F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2951), 2144021137);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 2826.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 2826.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object1);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean0);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(254.4089600000002);
      assertEquals(254.4089600000002, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(2826.0F);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(2826.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)106;
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-18), (byte)58, (byte)104, (byte)1, (byte)106}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      boolean boolean3 = ArrayUtils.isSameLength((Object[]) doubleArray0, (Object[]) doubleArray0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      Character[] characterArray0 = new Character[7];
      Character character0 = Character.valueOf('u');
      assertEquals('u', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char char0 = 'z';
      Character character1 = new Character('z');
      assertFalse(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertEquals('z', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('B');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertEquals('B', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character(char0);
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertEquals('z', (char)character3);
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('u');
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character0));
      assertEquals('u', (char)character4);
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('?');
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character2));
      assertEquals('?', (char)character5);
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character('<');
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character5));
      assertEquals('<', (char)character6);
      assertNotNull(character6);
      
      characterArray0[6] = character6;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '<');
      assertArrayEquals(new char[] {'u', 'z', 'B', 'z', 'u', '?', '<'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, (long[]) null);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1L}, longArray0);
      assertArrayEquals(new long[] {1L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 3216, (int) (byte)0, 0.06129155055009359);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short)79;
      doubleArray0[2] = (double) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)79, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[4] = 68.28191F;
      floatArray0[1] = 2631.0F;
      floatArray0[2] = 68.28191F;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1088);
      shortArray0[1] = (short)2694;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1159);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-1088), (short)2694}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      long[] longArray0 = new long[4];
      longArray0[0] = 2106L;
      longArray0[1] = 2106L;
      longArray0[2] = 0L;
      longArray0[3] = 2106L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {2106L, 2106L, 0L, 2106L}, longArray0);
      assertArrayEquals(new long[] {2106L, 2106L, 2106L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(16, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      char[] charArray0 = new char[15];
      charArray0[0] = '$';
      charArray0[1] = 'T';
      charArray0[2] = '1';
      charArray0[3] = '\"';
      charArray0[4] = '1';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(15, charArray0.length);
      assertEquals(15, characterArray0.length);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short) (-210));
      assertEquals((short) (-210), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)0);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      
      Character character0 = new Character('T');
      assertEquals('T', (char)character0);
      assertNotNull(character0);
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, 'u');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(15, charArray0.length);
      assertEquals(15, characterArray0.length);
      assertEquals(15, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '$';
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {36.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      Short short0 = new Short((short)10);
      assertEquals((short)10, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-1367));
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-1367), (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-1367));
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short) (-1367), (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short)1828);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short)1828, (short)short3);
      assertNotNull(short3);
      
      Short[] shortArray0 = new Short[1];
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2, 10);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)1828;
      doubleArray0[1] = (double) 369;
      doubleArray0[2] = (double) (short)4390;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) (short)1828;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {1828.0, 369.0, 4390.0, 2.0, 1828.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.add((float[]) null, 0.0F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short) (-27870));
      assertEquals((short) (-27870), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-27870));
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-27870), (short)short1);
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[1]);
      assertArrayEquals(new short[] {(short) (-27870), (short) (-27870)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'p';
      charArray0[1] = 'V';
      charArray0[2] = 'K';
      charArray0[3] = '~';
      charArray0[4] = '9';
      charArray0[5] = 'H';
      charArray0[6] = '_';
      charArray0[7] = '(';
      int int0 = ArrayUtils.indexOf(charArray0, '%', (int) shortArray0[1]);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'p', 'V', 'K', '~', '9', 'H', '_', '('}, charArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (-1), (-1));
      assertNull(doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int int0 = ArrayUtils.indexOf(doubleArray0, 2291.16, 0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Integer integer0 = Integer.getInteger("", (Integer) null);
      assertNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      Character character0 = Character.valueOf('9');
      assertEquals('9', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte) (-59);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-59), 1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-59), (byte) (-59), (byte) (-59), (byte) (-59), (byte) (-59), (byte) (-26), (byte) (-59)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-59)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 3216, (int) (byte)0, 2962.59104);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Float float0 = Float.valueOf(1511.9972F);
      assertEquals(1511.9972F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min(1511.9972F, 1511.9972F);
      assertEquals(1511.9972F, float1, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)57;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)57;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)57;
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)57, (short)0, (short)57, (short)0, (short)57}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      double double0 = Double.min((short)57, (short)57);
      assertEquals(57.0, double0, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray0, (-1152.275299434661));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = ArrayUtils.isSameLength((Object[]) doubleArray1, (Object[]) doubleArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (-756.209939);
      doubleArray0[2] = 81.0;
      doubleArray0[3] = (double) 1159L;
      doubleArray0[4] = (-2691.2578341);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-5413.9));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-756.209939), 81.0, 1159.0, (-2691.2578341)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Boolean boolean1 = new Boolean((String) null);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean(false);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      char[] charArray0 = new char[1];
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '\u0000';
      intArray0[1] = (-210);
      intArray0[3] = 383;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 383, (int) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, (-210), 0, 383, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      Short short0 = new Short((byte)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      int[] intArray0 = new int[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = null;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertTrue(boolean0);
      assertEquals(4, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, objectArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Float float0 = new Float(4008.3943F);
      assertEquals(4008.3943F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, objectArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)1844);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)1844}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[1]);
      assertTrue(boolean0);
      assertEquals(5, objectArray0.length);
      
      ArrayUtils.reverse((int[]) null);
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, (int) (short)1844);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1844, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Character[] characterArray0 = new Character[1];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'Q');
      assertArrayEquals(new char[] {'Q'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) null);
      assertEquals(0, int0);
      assertEquals(1, characterArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Long[] longArray0 = new Long[8];
      long long0 = (-1L);
      Long long1 = new Long((-1L));
      assertTrue(long1.equals((Object)long0));
      assertEquals((-1L), (long)long1);
      assertNotNull(long1);
      
      longArray0[0] = long1;
      Long long2 = new Long(0L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(0L, (long)long2);
      assertNotNull(long2);
      
      longArray0[1] = long2;
      Long long3 = new Long(long0);
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertEquals((-1L), (long)long3);
      assertNotNull(long3);
      
      longArray0[2] = long3;
      Long long4 = new Long(3342L);
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertEquals(3342L, (long)long4);
      assertNotNull(long4);
      
      longArray0[3] = long4;
      Long long5 = new Long(2030L);
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long4));
      assertEquals(2030L, (long)long5);
      assertNotNull(long5);
      
      longArray0[4] = long5;
      Long long6 = new Long((-25L));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long3));
      assertEquals((-25L), (long)long6);
      assertNotNull(long6);
      
      longArray0[5] = long6;
      Long long7 = new Long(1L);
      assertFalse(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long4));
      assertEquals(1L, (long)long7);
      assertNotNull(long7);
      
      longArray0[6] = long7;
      Long long8 = new Long(1L);
      assertFalse(long8.equals((Object)long1));
      assertTrue(long8.equals((Object)long7));
      assertFalse(long8.equals((Object)long0));
      assertFalse(long8.equals((Object)long3));
      assertFalse(long8.equals((Object)long6));
      assertFalse(long8.equals((Object)long2));
      assertFalse(long8.equals((Object)long5));
      assertFalse(long8.equals((Object)long4));
      assertEquals(1L, (long)long8);
      assertNotNull(long8);
      
      longArray0[7] = long8;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 734.094319);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (-1));
      assertNull(shortArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '.';
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-4022L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {46L}, longArray0);
      assertArrayEquals(new long[] {46L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) '.';
      Object[] objectArray1 = ArrayUtils.subarray(objectArray0, (-5111), (-4290));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertEquals(1, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-1), (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      Integer integer0 = Integer.valueOf((int) (byte)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((float) (byte)0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '?';
      charArray0[1] = '?';
      doubleArray0[2] = (double) '?';
      charArray0[3] = '?';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'?', '?', '\u0000', '?'}, charArray0);
      assertEquals(4, charArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object1);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean0);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-100));
      assertEquals((-100), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("#p@*diS\u0003(d%ZW", integer0);
      assertEquals((-100), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 728.37129828);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Boolean boolean1 = new Boolean((String) null);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean("");
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      boolean boolean4 = Boolean.logicalXor(true, false);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0L;
      boolean boolean5 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = '';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '5', (int) (short)0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'Y', ''}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1773;
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 1773;
      longArray1[1] = (long) 1773;
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {1773L}, longArray0);
      assertArrayEquals(new long[] {1773L, 1773L}, longArray1);
      assertArrayEquals(new long[] {1773L, 1773L, 1773L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(3, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray0, (Object[]) null);
      assertTrue(boolean0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '\u0000';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1352.2695856581963;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-859.61705797942), 1, (double) 1);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1352.2695856581963}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1352.2695856581963;
      doubleArray1[1] = 1352.2695856581963;
      doubleArray1[2] = (double) '\u0000';
      doubleArray1[3] = (double) '\u0000';
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1352.2695856581963, 1352.2695856581963, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1352.2695856581963, 1352.2695856581963, 0.0, 0.0, 1352.2695856581963, 1352.2695856581963, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-1));
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (short) (-1);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-923.0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-923.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, (-1.0), (-1.0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-923.0)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short) (-1);
      longArray0[1] = (long) (short) (-1);
      longArray0[2] = (long) (short) (-1);
      longArray0[3] = (long) (-1);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      ArrayUtils.reverse(longArray1);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L)}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = (int) (short) (-1);
      intArray0[3] = (-1);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1)}, intArray1);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1)}, intArray0);
      assertNotNull(intArray1);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      
      short[] shortArray1 = ArrayUtils.subarray((short[]) null, (-1), 0);
      assertNull(shortArray1);
      
      ArrayUtils.reverse(longArray1);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L)}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-1));
      assertNull(shortArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)127;
      byteArray0[5] = (byte) (-93);
      byteArray0[0] = (byte) (-93);
      byteArray0[6] = (byte)17;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)114, 744);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-93), (byte) (-93), (byte)17, (byte)127, (byte)0, (byte) (-93), (byte)17, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf((short[]) null, (short) (byte)63, (-48));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = 'T';
      charArray0[2] = '1';
      charArray0[3] = '\"';
      charArray0[4] = 'O';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'$', 'T', '1', '\"', 'O'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, characterArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'f');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'$', 'T', '1', '\"', 'O'}, charArray0);
      assertArrayEquals(new char[] {'$', 'T', '1', '\"', 'O'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      Short short0 = new Short((short) (-2470));
      assertEquals((short) (-2470), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)330);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)330, (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((short)729);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short)729, (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short) (-2470));
      assertFalse(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short) (-2470), (short)short3);
      assertNotNull(short3);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Byte byte0 = new Byte((byte)19);
      assertEquals((byte)19, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'C';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 214.7242274604466);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {67.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int int1 = ArrayUtils.indexOf((char[]) null, 'u');
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'C';
      charArray0[1] = 'i';
      charArray0[2] = '_';
      charArray0[3] = 'z';
      charArray0[4] = 'H';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1, (-83));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'C', 'i', '_', 'z', 'H'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((Object[]) stringArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, stringArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new double[] {67.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 1159L;
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-3258L);
      longArray1[1] = 1159L;
      longArray1[2] = (-417L);
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-3258L), 1159L, (-417L)}, longArray1);
      assertNotNull(longArray2);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray2.length);
      assertNotSame(longArray1, longArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)110);
      assertNull(byteArray0);
      
      Long long0 = Long.getLong("");
      assertNull(long0);
      
      long long1 = Long.sum((-1323L), (-417L));
      assertEquals((-1740L), long1);
      
      Long[] longArray3 = ArrayUtils.nullToEmpty(longArray2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-3258L), 1159L, (-417L)}, longArray1);
      assertNotNull(longArray3);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray2.length);
      assertEquals(3, longArray3.length);
      assertNotSame(longArray1, longArray0);
      assertSame(longArray2, longArray3);
      assertSame(longArray3, longArray2);
      
      long[] longArray4 = ArrayUtils.removeElement((long[]) null, 1159L);
      assertNull(longArray4);
      
      byte[] byteArray1 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray2);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short) (byte)0;
      shortArray0[8] = (short) (byte)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0, (-87));
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, 1362.0, 366.0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(1460);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(1460, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(7);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int1));
      assertEquals(7, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((short)0);
      assertFalse(integer3.equals((Object)int1));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      // Undeclared exception!
      try { 
        Integer.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[15];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(15, booleanArray0.length);
      
      String[] stringArray0 = ArrayUtils.addAll((String[]) null, (String[]) null);
      assertNull(stringArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(15, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(15, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(longArray1, (long[]) null);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 218;
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)3);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 764.7359447419243);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (-1), (-2890));
      assertNull(charArray0);
      
      int int2 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-62));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((boolean[]) null, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (-756.209939);
      doubleArray0[2] = 81.0;
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 1159L;
      longArray0[1] = (-1L);
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.contains(intArray0, 13);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (-1L));
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, Integer.MAX_VALUE, (-1608));
      assertNull(doubleArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 13;
      double[] doubleArray2 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
      
      String[] stringArray0 = ArrayUtils.addAll((String[]) null, (String[]) null);
      assertNull(stringArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, 2137677786);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2137677786;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {2.13767782E9F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(floatArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '2.13767782E9', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 2106L;
      longArray0[1] = 2106L;
      char char0 = '|';
      Character character0 = new Character('|');
      assertTrue(character0.equals((Object)char0));
      assertEquals('|', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('|');
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertEquals('|', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = character0;
      characterArray0[1] = character1;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertArrayEquals(new char[] {'|', '|', '|', '|', '|'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) "Array element ");
      assertEquals((-1), int0);
      assertEquals(5, characterArray0.length);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'|', '|', '|', '|', '|'}, charArray1);
      assertArrayEquals(new char[] {'|', '|', '|', '|', '|'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray1.length);
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)10);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-126), (byte)0, (byte)3, (byte)0, (byte)1, (byte)1, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (-756.209939);
      doubleArray0[2] = 81.0;
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = Byte.toUnsignedInt((byte) (-88));
      assertEquals(168, int0);
      
      long long0 = Byte.toUnsignedLong((byte)102);
      assertEquals(102L, long0);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (int) (byte)102);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Float float0 = new Float((float) 168);
      assertEquals(168.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min(102L, (byte)102);
      assertEquals(102.0F, float1, 0.01F);
      
      char[] charArray0 = new char[2];
      doubleArray0[2] = (double) '%';
      charArray0[1] = '1';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2146728073, 5);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '1'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[8] = object0;
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1030.7056F);
      floatArray0[1] = 1159.0F;
      floatArray0[2] = (-1444.7F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1673.7682F);
      floatArray0[5] = (-1763.7457F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, 9);
      assertEquals(3, int0);
      assertArrayEquals(new float[] {(-1030.7056F), 1159.0F, (-1444.7F), 0.0F, (-1673.7682F), (-1763.7457F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1698;
      intArray0[1] = 2750;
      intArray0[2] = 2;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {2, 2750, 1698}, intArray0);
      assertEquals(3, intArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (-4389);
      shortArray0[2] = (short)2190;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, 2750, 1698}, intArray0);
      assertArrayEquals(new int[] {2750, 1698}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray1 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (-391), (double) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      Float float0 = new Float((-126.0144641178));
      assertEquals((-126.014465F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) (-1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float[] floatArray1 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.addAll((Integer[]) null, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      short[] shortArray0 = new short[0];
      ArrayUtils.isSameLength((short[]) null, shortArray0);
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      charArray0[1] = 'H';
      charArray0[2] = '*';
      charArray0[3] = 'n';
      charArray0[4] = '';
      charArray0[5] = '$';
      ArrayUtils.isSameLength(charArray0, charArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) '';
      doubleArray0[1] = (double) 'H';
      doubleArray0[2] = (double) 'H';
      doubleArray0[3] = (double) 'H';
      doubleArray0[4] = (double) '\"';
      doubleArray0[5] = (double) 'H';
      doubleArray0[6] = (double) 'H';
      doubleArray0[7] = (double) '';
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      ArrayUtils.isSameLength(shortArray0, (short[]) null);
      short[] shortArray1 = new short[2];
      shortArray1[0] = (short)177;
      shortArray1[1] = (short)177;
      ArrayUtils.isSameLength((short[]) null, shortArray1);
      ArrayUtils.isSameLength((short[]) null, (short[]) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 72.0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '72.0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      int[] intArray0 = new int[5];
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = 'p';
      charArray0[2] = 'K';
      charArray0[4] = 'K';
      charArray0[4] = 'p';
      charArray0[5] = 'p';
      Character character0 = new Character('x');
      assertEquals('x', (char)character0);
      assertNotNull(character0);
      
      int[] intArray1 = ArrayUtils.add(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-52);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-52)}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1035.4998);
      doubleArray0[1] = (-1035.4998);
      doubleArray0[3] = 3530.269121357;
      doubleArray0[4] = 0.0;
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[4];
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(4, objectArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1303;
      shortArray0[5] = (short)1303;
      shortArray0[2] = (short) (-11818);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short) (-2774);
      shortArray0[5] = (short) (-2774);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-2774), (short) (-2774), (short)2, (short) (-11818), (short)0, (short)1303}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short) (-11818);
      intArray0[3] = (int) (short)1303;
      String[] stringArray0 = ArrayUtils.add((String[]) null, 0, "java.lang.Integer");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(objectArray0, (Object[]) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(4, objectArray0.length);
      
      boolean boolean3 = ArrayUtils.isSameType("java.lang.Integer", "java.lang.Integer");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)123, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)123}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((byte)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      int int0 = Integer.max((byte)123, 3887);
      assertEquals(3887, int0);
      
      Integer integer1 = Integer.getInteger("r9efq");
      assertNull(integer1);
      
      integerArray0[2] = integerArray0[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      Float[] floatArray2 = new Float[1];
      floatArray2[0] = (Float) 0.0F;
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2, (float) (byte)0);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray3, 0.01F);
      assertNotNull(floatArray3);
      assertEquals(1, floatArray2.length);
      assertEquals(1, floatArray3.length);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) (byte)123;
      objectArray0[4] = (Object) integerArray0[0];
      objectArray0[5] = (Object) integerArray0[1];
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      Short short0 = new Short((short)10);
      assertEquals((short)10, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-1367));
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-1367), (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-1367));
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short) (-1367), (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short)1828);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertEquals((short)1828, (short)short3);
      assertNotNull(short3);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)4390);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)1;
      floatArray0[1] = (float) (short) (-1);
      floatArray0[2] = (float) (short)4390;
      floatArray0[3] = (float) (short) (-1);
      floatArray0[4] = (float) (short) (-1367);
      floatArray0[5] = (float) (short)10;
      floatArray0[6] = (float) (short) (-1);
      float[] floatArray1 = ArrayUtils.nullToEmpty((float[]) null);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertSame(shortArray2, shortArray1);
      assertSame(shortArray1, shortArray2);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-2584), (-2584));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(12, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(12, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-616), (-616));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1335.45F);
      floatArray0[3] = 0.0F;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) true;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'n', 'n', 'n'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', 'n', 'n', 'n'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray0.length);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray0, (-3989), (-717));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray2.length);
      assertEquals(1, booleanArray0.length);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      charArray0[2] = 'z';
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray1, charArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object0);
      assertTrue(boolean0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(2934.6425661089675);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(2934.6425661089675, (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-980.653611930518));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-980.653611930518), (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(2934.6425661089675);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals(2934.6425661089675, (double)double3, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      doubleArray0[4] = double3;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1455;
      longArray0[1] = (-3328L);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1455L, (-3328L)}, longArray0);
      assertArrayEquals(new long[] {1455L, (-3328L), 1455L, (-3328L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 1455L;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, (Object[]) null);
      assertFalse(boolean0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1035.4998);
      doubleArray0[1] = (-1035.4998);
      doubleArray0[2] = (-5413.9);
      doubleArray0[3] = 3530.269121357;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 4141.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-756.209939));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1035.4998), (-1035.4998), (-5413.9), 3530.269121357, 0.0, 4141.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 4267L;
      longArray0[1] = (-810L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {4267L, (-810L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '=';
      charArray0[2] = 'K';
      charArray0[3] = 'p';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'\u0000', '=', 'K', 'p'}, charArray0);
      assertEquals(4, charArray0.length);
      
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {4267L, (-810L), 4267L, (-810L)}, longArray2);
      assertArrayEquals(new long[] {4267L, (-810L)}, longArray0);
      assertNotNull(longArray2);
      assertEquals(4, longArray2.length);
      assertEquals(2, longArray0.length);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 0);
      assertNull(intArray0);
      
      int int1 = ArrayUtils.lastIndexOf(longArray2, (-810L));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(int1 == int0);
      assertFalse(longArray0.equals((Object)longArray2));
      assertEquals(3, int1);
      assertArrayEquals(new long[] {4267L, (-810L), 4267L, (-810L)}, longArray2);
      assertArrayEquals(new long[] {4267L, (-810L)}, longArray0);
      assertEquals(4, longArray2.length);
      assertEquals(2, longArray0.length);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '4267', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(integerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = 1698;
      intArray0[1] = 2750;
      intArray0[2] = 2;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {2, 2750, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-4));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Long[] longArray0 = new Long[1];
      Long long0 = Long.getLong("");
      assertNull(long0);
      
      long long1 = Long.sum(2523L, (-1L));
      assertEquals(2522L, long1);
      
      Long long2 = Long.getLong("");
      assertNull(long2);
      
      longArray0[0] = null;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      long[] longArray2 = ArrayUtils.removeElement((long[]) null, (-4178L));
      assertNull(longArray2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray1, (int) (byte) (-4));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2190.0;
      doubleArray0[1] = (-1.0);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2190.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.indexOf((Object[]) integerArray1, object0, (-864));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals((-1), int0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) integerArray0, (Object[]) integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean2 = ArrayUtils.isSameType(object1, object1);
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertNotSame(object1, object0);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2190.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2190.0, (-1.0), 2190.0, (-1.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-277);
      shortArray0[1] = (short)100;
      shortArray0[2] = (short) (-1357);
      shortArray0[3] = (short) (-2473);
      shortArray0[4] = (short) (-3668);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-277), (short)100, (short) (-1357), (short) (-2473), (short) (-3668), (short) (-277), (short)100, (short) (-1357), (short) (-2473), (short) (-3668)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-277), (short)100, (short) (-1357), (short) (-2473), (short) (-3668)}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(10, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Integer integer0 = new Integer(1130);
      assertEquals(1130, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {1130}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 1159L;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1159L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 1159L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 1159L;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-735.18681), (double) 1159L);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {1159.0, 0.0, 1159.0, 0.0, 1159.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {1159L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {1159L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      ArrayUtils.reverse(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 1159L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 1159L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = 'Y';
      charArray0[2] = 'x';
      charArray0[3] = 'Y';
      charArray0[4] = '5';
      charArray0[5] = '5';
      int int1 = ArrayUtils.lastIndexOf(charArray0, ':', (-656));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'Q', 'Y', 'x', 'Y', '5', '5'}, charArray0);
      assertEquals(6, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1159.0, 0.0, 1159.0, 0.0, 1159.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[4] = 68.28191F;
      floatArray0[1] = 2631.0F;
      floatArray0[2] = 68.28191F;
      Short short0 = new Short((short)10);
      assertEquals((short)10, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)10);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)10, (short)short1);
      assertNotNull(short1);
      
      Integer integer0 = new Integer(888);
      assertEquals(888, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("LN(O_WyOup)QQ8");
      assertNull(integer1);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer2 = new Integer(102);
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(102, (int)integer2);
      assertNotNull(integer2);
      
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-455.151F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) (-455.151F);
      doubleArray0[2] = (double) 2631.0F;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) 2631.0F;
      doubleArray0[5] = (double) 1.0F;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {1.0, (-455.1510009765625), 2631.0, 1.0, 2631.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-455.1510009765625), 2631.0, 1.0, 2631.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 1853L;
      longArray0[2] = (-1089L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1241.0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Boolean boolean1 = new Boolean((String) null);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean(false);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      charArray0[3] = '#';
      charArray0[4] = 'S';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'S');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'S', 'S', 'S', '#', 'S'}, charArray0);
      assertArrayEquals(new char[] {'S', 'S', '#', 'S'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '#';
      intArray0[2] = (-210);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 3, (-210));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {35, 0, (-210)}, intArray0);
      assertEquals(3, intArray0.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-839), (-1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {35, 0, (-210)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Integer integer0 = new Integer(1130);
      assertEquals(1130, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1130;
      intArray0[1] = 1130;
      intArray0[2] = 1130;
      intArray0[3] = 1130;
      intArray0[4] = 1130;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1130;
      objectArray0[1] = (Object) integer0;
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, 57);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) null, (Object[]) null);
      assertNull(objectArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      Map<Object, Object> map1 = ArrayUtils.toMap((Object[]) null);
      assertNull(map1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Object[] objectArray1 = ArrayUtils.addAll((Object[]) null, (Object[]) null);
      assertNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      double[] doubleArray0 = new double[1];
      boolean boolean1 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 47.0F;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {47.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-446);
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)97;
      shortArray0[3] = (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-446), (short)1, (short)97, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (short)0, (-1339));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)4;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)4}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      ArrayUtils.reverse((Object[]) shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[2] = (-8147L);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      Float float0 = Float.valueOf((float) (short)0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) (byte)0);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "java.lang.Integer";
      stringArray0[1] = "java.lang.Integer";
      stringArray0[2] = "java.lang.Integer";
      stringArray0[3] = "java.lang.Integer";
      stringArray0[4] = "java.lang.Integer";
      String[] stringArray1 = ArrayUtils.add(stringArray0, 0, "java.lang.Integer");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(5, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) stringArray0, (Object[]) stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean0);
      assertEquals(5, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = '';
      String[] stringArray0 = ArrayUtils.addAll((String[]) null, (String[]) null);
      assertNull(stringArray0);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1643L, 2370);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'.', '', '\u0000', '\u0000'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      
      Short short0 = new Short((short) (-210));
      assertEquals((short) (-210), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-210));
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-210), (short)short1);
      assertNotNull(short1);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '\u0000';
      char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '\u0000';
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[4] = 68.28191F;
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 1413L;
      longArray0[2] = 1413L;
      longArray0[3] = 1413L;
      longArray0[4] = 0L;
      longArray0[5] = (long) (-1723);
      longArray0[6] = (long) 0;
      longArray0[7] = 1415L;
      longArray0[8] = (long) (-1723);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1723), 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 1413L, 1413L, 1413L, 0L, (-1723L), 0L, 1415L, (-1723L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-1)}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (short) (-1959);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) (short) (-1959));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, (-1959.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, (-1959.0), (-1959.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-1)}, shortArray0);
      assertNotNull(objectArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertEquals(4, objectArray0.length);
      assertSame(shortArray1, objectArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray1 = new Object[6];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray1[0] = object2;
      objectArray1[1] = object0;
      objectArray1[2] = (Object) (-1959.0);
      objectArray1[3] = (Object) (short)0;
      objectArray1[4] = (Object) (-1.0);
      objectArray1[5] = (Object) (short) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(objectArray1, (Object[]) shortArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-1)}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(6, objectArray1.length);
      assertEquals(4, shortArray1.length);
      assertSame(shortArray1, objectArray0);
      
      boolean boolean1 = ArrayUtils.isSameType(objectArray1[3], objectArray1[2]);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, objectArray1.length);
      
      Double[] doubleArray2 = new Double[2];
      doubleArray2[0] = (Double) (-1.0);
      doubleArray2[1] = (Double) 0.0;
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) (short)0;
      boolean boolean2 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new float[] {(-1.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-76), (-1));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-107), (byte)87, (byte)127, (byte) (-65), (byte) (-1), (byte)0, (byte)2, (byte) (-1)}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[4] = 68.28191F;
      floatArray0[0] = 2631.0F;
      floatArray0[2] = 68.28191F;
      Short short0 = new Short((short)10);
      assertEquals((short)10, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)10);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)10, (short)short1);
      assertNotNull(short1);
      
      Float float0 = new Float((float) (short)10);
      assertEquals(10.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-731.0721768381951));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-731.0722F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float[] floatArray1 = new Float[6];
      floatArray1[0] = (Float) 68.28191F;
      floatArray1[1] = (Float) 68.28191F;
      floatArray1[2] = (Float) 2631.0F;
      Float float2 = new Float((-463.0F));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-463.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray1[3] = float2;
      floatArray1[4] = (Float) 68.28191F;
      floatArray1[5] = float1;
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(6, floatArray2.length);
      assertEquals(6, floatArray1.length);
      assertSame(floatArray2, floatArray1);
      assertSame(floatArray1, floatArray2);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 2631.0F);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {2631.0F, 0.0F, 68.28191F, 0.0F, 68.28191F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-3238);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1135;
      shortArray0[3] = (short) (-3154);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)168;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-3154));
      assertEquals(3, int0);
      assertArrayEquals(new short[] {(short) (-3238), (short)0, (short)1135, (short) (-3154), (short)0, (short)0, (short)168}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (-756.209939);
      doubleArray0[2] = 81.0;
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = Byte.toUnsignedInt((byte) (-88));
      assertEquals(168, int0);
      
      long long0 = Byte.toUnsignedLong((byte)102);
      assertEquals(102L, long0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Byte[] byteArray2 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray2);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (int) (byte)102);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Float[] floatArray2 = new Float[2];
      Float float0 = new Float((float) 168);
      assertEquals(168.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray2[0] = float0;
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 1159L;
      longArray0[1] = (-1L);
      longArray0[2] = (-1087L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {1159L, (-1L), (-1087L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      String[] stringArray0 = ArrayUtils.addAll((String[]) null, (String[]) null);
      assertNull(stringArray0);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-2081L), 2370);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 2370);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-1959);
      intArray0[1] = (-1825);
      intArray0[2] = (-1341);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1026));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1959), (-1825), (-1341)}, intArray0);
      assertArrayEquals(new int[] {(-1959), (-1825), (-1341)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-1959);
      longArray0[1] = 1L;
      longArray0[2] = (long) (short)0;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {(-1959L), 1L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1);
      shortArray0[0] = (short) (-1959);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.toArray(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray1 = new short[5];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-1959);
      shortArray1[1] = (short) (-1);
      shortArray1[2] = (short)1999;
      shortArray1[3] = (short)0;
      shortArray1[4] = (short) (-1);
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-1959), (short) (-1), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1959), (short) (-1), (short)1999, (short)0, (short) (-1)}, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(8, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertEquals(13, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[1];
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.contains(intArray0, 13);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean2 = ArrayUtils.contains(objectArray0, object0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(0, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf(intArray0, 0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean boolean3 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals(0, objectArray0.length);
      
      boolean boolean4 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)1;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)3;
      intArray0[1] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {3, 0}, intArray0);
      assertArrayEquals(new int[] {3, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 1773.36, (-1248));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, 0, (int) (byte)3);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {3, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(intArray0, intArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (double) 3, (int) (byte)0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      boolean boolean0 = ArrayUtils.contains(longArray0, (-6158L));
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (short)0;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) (short)0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      boolean boolean3 = Boolean.logicalAnd(false, false);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      Boolean boolean4 = Boolean.valueOf(false);
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4);
      assertNotNull(boolean4);
      
      Boolean boolean5 = new Boolean("");
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5);
      assertNotNull(boolean5);
      
      boolean boolean6 = Boolean.logicalXor(false, false);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6);
      
      Boolean[] booleanArray0 = new Boolean[4];
      booleanArray0[0] = boolean4;
      Boolean boolean7 = Boolean.TRUE;
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean0));
      assertTrue(boolean7);
      assertNotNull(boolean7);
      
      booleanArray0[1] = boolean7;
      booleanArray0[2] = boolean5;
      booleanArray0[3] = boolean5;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0L;
      boolean boolean8 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean8 == boolean3);
      assertFalse(boolean8 == boolean0);
      assertTrue(boolean8 == boolean1);
      assertFalse(boolean8 == boolean6);
      assertTrue(boolean8);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (-1L);
      int[] intArray0 = new int[5];
      boolean boolean0 = ArrayUtils.contains(intArray0, 13);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(16, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Float float0 = Float.valueOf(1511.9972F);
      assertEquals(1511.9972F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) float0, (-2137));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1511.9972F);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1667), (int) (short) (-1667));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      short[] shortArray1 = new short[4];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-1667);
      shortArray1[1] = (short) (-1667);
      shortArray1[2] = (short) (-1667);
      shortArray1[3] = (short) (-1667);
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1667), (short) (-1667), (short) (-1667), (short) (-1667)}, shortArray2);
      assertArrayEquals(new short[] {(short) (-1667), (short) (-1667), (short) (-1667), (short) (-1667)}, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(4, shortArray2.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 218;
      intArray0[1] = (-1);
      intArray0[2] = (-141);
      intArray0[3] = (-695);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {218, (-1), (-141), (-695), 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0, "yP_} ,w!PyL");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[4] = 68.28191F;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, true, false, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) booleanArray1, (Object[]) booleanArray1);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, true, false, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 3216, (int) (byte)0, 2962.59104);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      char[] charArray0 = ArrayUtils.add((char[]) null, '*');
      assertArrayEquals(new char[] {'*'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'*'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Float float0 = Float.valueOf((-1746.0F));
      assertEquals((-1746.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.0F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      boolean boolean1 = ArrayUtils.contains(charArray0, 'x');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'*'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[1]);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Object[] objectArray1 = ArrayUtils.add(objectArray0, (Object) "Zwd");
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertEquals(2, objectArray0.length);
      assertEquals(3, objectArray1.length);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.max(502.13397F, (-1141.0F));
      assertEquals(502.13397F, float1, 0.01F);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[1]);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Object[] objectArray1 = ArrayUtils.add(objectArray0, (Object) "java.lang.Object");
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertEquals(2, objectArray0.length);
      assertEquals(3, objectArray1.length);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)57;
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean1 == boolean0);
      
      Double.min((short)0, 2511.41);
      Double.isFinite((short)0);
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (short)0);
      assertNotNull(doubleArray1);
      
      Object object0 = new Object();
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      charArray0[0] = '!';
      charArray0[2] = 'L';
      charArray0[3] = 'L';
      charArray0[4] = 'X';
      charArray0[5] = '!';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'X');
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      ArrayUtils.toPrimitive((Short[]) null, (short) (-1));
      ArrayUtils.toObject((short[]) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (short) (-1);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1.0);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, 1.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 0.0;
      objectArray0[2] = (Object) (-1.0);
      objectArray0[3] = (Object) 0.0;
      objectArray0[4] = (Object) 0.0;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(5, objectArray1.length);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      ArrayUtils.toObject((boolean[]) null);
      int int0 = ArrayUtils.indexOf((double[]) null, 1.0, (-3511));
      assertEquals((-1), int0);
      
      String string0 = ArrayUtils.toString((Object) "");
      assertEquals("", string0);
      
      Character.valueOf('(');
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '(';
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '(';
      charArray0[1] = '/';
      charArray0[2] = 'y';
      char[] charArray1 = ArrayUtils.add(charArray0, '4');
      assertArrayEquals(new char[] {'(', '/', 'y', '4'}, charArray1);
      
      ArrayUtils.nullToEmpty((boolean[]) null);
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[4] = 68.28191F;
      floatArray0[1] = 2631.0F;
      floatArray0[2] = 68.28191F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-455.151F);
      floatArray0[5] = 1.0F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 68.28191F);
      assertArrayEquals(new float[] {0.0F, 2631.0F, 1.0F, (-455.151F), 1.0F}, floatArray1, 0.01F);
      
      Object object0 = new Object();
      Boolean[] booleanArray0 = new Boolean[1];
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.FALSE;
      booleanArray0[0] = boolean1;
      Boolean.compare(boolean0, true);
      ArrayUtils.toPrimitive((Boolean[]) null, false);
      boolean boolean2 = ArrayUtils.contains((boolean[]) null, false);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) (-1);
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 1.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 1.0F;
      doubleArray1[1] = (double) 2631.0F;
      doubleArray1[2] = (double) 1.0F;
      doubleArray1[3] = (double) 1.0F;
      doubleArray1[4] = (double) 1.0F;
      boolean boolean3 = ArrayUtils.contains(doubleArray1, (double) (-455.151F));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1718;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)10;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = 41.0;
      doubleArray0[2] = (double) (short)330;
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (double) (short)1718;
      doubleArray0[5] = (double) (short) (-1);
      ArrayUtils.subarray(doubleArray0, (-2147156979), (-2147156979));
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-2147156979), 0);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1130;
      ArrayUtils.contains(objectArray0, (Object) null);
      int[] intArray0 = null;
      Object object1 = new Object();
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalXor(true, true);
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      ArrayUtils.nullToEmpty(booleanArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '1130', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1718;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)10;
      shortArray0[4] = (short)330;
      Short short0 = new Short((short)330);
      Short short1 = new Short((short)330);
      Short short2 = new Short((short) (-939));
      Short short3 = new Short((short)330);
      Short[] shortArray1 = new Short[1];
      shortArray1[0] = short2;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)19);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-939)}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      ArrayUtils.toObject((boolean[]) null);
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      short[] shortArray0 = new short[2];
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean1 == boolean0);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0L);
      doubleArray0[0] = double0;
      Integer integer0 = new Integer((short)0);
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, ':', 2145632368);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = new double[0];
      boolean boolean2 = ArrayUtils.isNotEmpty(doubleArray1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 2942L;
      longArray0[1] = (-1899L);
      longArray0[2] = 1502L;
      longArray0[3] = (-1L);
      longArray0[4] = (-533L);
      longArray0[5] = 0L;
      longArray0[6] = 1L;
      longArray0[7] = 0L;
      ArrayUtils.lastIndexOf(longArray0, 0L, (-2100));
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (-2100), 0L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2100, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      ArrayUtils.subarray((double[]) null, Integer.MAX_VALUE, (-1608));
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      char[] charArray0 = new char[15];
      charArray0[0] = '\"';
      charArray0[1] = 'T';
      charArray0[2] = '1';
      charArray0[3] = '\"';
      charArray0[4] = 'O';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      Short short0 = new Short((short) (-210));
      Short short1 = new Short((short) (-2904));
      Character character0 = new Character('1');
      ArrayUtils.toPrimitive(characterArray0, 'T');
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-757.0452297316481);
      doubleArray0[2] = (double) (byte)0;
      Byte byte0 = new Byte((byte)0);
      Byte.toUnsignedInt((byte)0);
      Byte.toUnsignedLong((byte)102);
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.toObject((byte[]) null);
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-428L);
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)8;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0);
      assertEquals(1, int0);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      ArrayUtils.contains(longArray0, 0L);
      Character character0 = new Character('A');
      Character character1 = Character.valueOf('4');
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'H');
      Object object0 = new Object();
      ArrayUtils.lastIndexOf((Object[]) characterArray0, object0);
      ArrayUtils.clone(charArray0);
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = 1698;
      intArray0[1] = 2750;
      intArray0[2] = 2;
      ArrayUtils.reverse(intArray0);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1424;
      shortArray0[1] = (short)1424;
      shortArray0[2] = (short)2190;
      ArrayUtils.remove(shortArray0, 2);
      Byte[] byteArray0 = new Byte[0];
      Byte byte0 = new Byte((byte) (-42));
      Byte.compare((byte) (-41), (byte) (-42));
      Byte byte1 = new Byte((byte)36);
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.reverse(booleanArray0);
      int int0 = ArrayUtils.indexOf((int[]) null, 2);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      boolean boolean1 = ArrayUtils.isSameType("", "");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      char[] charArray0 = new char[3];
      Object object0 = new Object();
      boolean boolean0 = ArrayUtils.isEquals(object0, "Q'r;UGLA{sWh>;I");
      ArrayUtils.toPrimitive((Float[]) null);
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      short short0 = (short)10;
      Short short1 = new Short((short)10);
      Short short2 = new Short((short)4390);
      Short short3 = new Short((short) (-1));
      Short short4 = new Short((short)10);
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1);
      assertArrayEquals(new short[] {(short)10}, shortArray1);
      assertNotNull(shortArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'c';
      floatArray0[1] = (float) short0;
      floatArray0[2] = (float) (short)1;
      floatArray0[3] = (float) 'c';
      floatArray0[4] = (float) 'c';
      floatArray0[5] = (float) (short)4390;
      floatArray0[6] = (float) 'c';
      floatArray0[7] = (float) 'c';
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(8, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[14];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.reverse(booleanArray0);
      ArrayUtils.addAll((String[]) null, (String[]) null);
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0);
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 6;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-82);
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (-756.209939);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-417.8393F);
      floatArray0[1] = (-417.8393F);
      floatArray0[2] = (-417.8393F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-1810.9302F));
      Integer integer0 = new Integer(123);
      Integer.compareUnsigned((byte)0, (-1124));
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      charArray0[1] = 'o';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-1872));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Object object0 = new Object();
      float[] floatArray0 = new float[8];
      floatArray0[4] = (float) '\u001B';
      floatArray0[1] = (float) '\u001B';
      floatArray0[3] = (float) '\"';
      floatArray0[4] = (float) '\"';
      floatArray0[5] = (float) '\u001B';
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte) (-38), (int) (byte) (-38));
      assertEquals((-1), int0);
  }
}

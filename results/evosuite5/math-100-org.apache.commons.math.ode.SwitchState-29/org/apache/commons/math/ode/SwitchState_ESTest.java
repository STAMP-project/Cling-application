/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 12:08:16 GMT 2019
 */

package org.apache.commons.math.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.DummyStepInterpolator;
import org.apache.commons.math.ode.SwitchState;
import org.apache.commons.math.ode.SwitchingFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class SwitchState_ESTest extends SwitchState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(switchingFunction0).eventOccurred(anyDouble() , any(double[].class));
      doReturn(Double.NaN, Double.NaN, 527.8081592054236, 2.2404374302607883, (-398.5717363177596)).when(switchingFunction0).g(anyDouble() , any(double[].class));
      double[] doubleArray0 = new double[0];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      SwitchState switchState0 = new SwitchState(switchingFunction0, 2.2404374302607883, (-398.5717363177596), 2147158940);
      switchState0.stepAccepted((-1205.69002275759), doubleArray0);
      switchState0.reinitializeBegin((-1205.69002275759), doubleArray0);
      switchState0.evaluateStep(dummyStepInterpolator0);
      switchState0.stepAccepted((-1540.03), doubleArray0);
      assertEquals((-1205.69002275759), switchState0.getEventTime(), 0.01);
      
      boolean boolean0 = switchState0.reset(2501.2, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      SwitchState switchState0 = new SwitchState(switchingFunction0, (-1205.69002275759), (-1729.271710509332), 2147021347);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = switchState0.reset((-1729.271710509332), doubleArray0);
      assertFalse(boolean0);
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
      assertFalse(switchState0.stop());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NaN, Double.NaN, 527.8081592054236, 2.2404374302607883, (-398.5717363177596)).when(switchingFunction0).g(anyDouble() , any(double[].class));
      double[] doubleArray0 = new double[0];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      SwitchState switchState0 = new SwitchState(switchingFunction0, (-398.5717363177596), (-398.5717363177596), 2147158940);
      switchState0.stepAccepted((-1729.271710509332), doubleArray0);
      switchState0.reinitializeBegin(1664.0, doubleArray0);
      switchState0.evaluateStep(dummyStepInterpolator0);
      assertEquals(1664.0, switchState0.getEventTime(), 0.01);
      
      boolean boolean0 = switchState0.reset(145.6431874830178, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SwitchState switchState0 = new SwitchState((SwitchingFunction) null, (-1628), (-1628), (-1628));
      boolean boolean0 = switchState0.stop();
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 2120, 2120, 2120);
      switchState0.stepAccepted((-1729.271710509332), (double[]) null);
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
      assertFalse(switchState0.stop());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(switchingFunction0).eventOccurred(anyDouble() , any(double[].class));
      doReturn(Double.NaN, Double.NaN, 527.8081592054236, 2.2404374302607883, (-398.5717363177596)).when(switchingFunction0).g(anyDouble() , any(double[].class));
      double[] doubleArray0 = new double[0];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      SwitchState switchState0 = new SwitchState(switchingFunction0, (-398.5717363177596), (-398.5717363177596), 2147158940);
      switchState0.stepAccepted((-1729.271710509332), doubleArray0);
      switchState0.reinitializeBegin(1664.0, doubleArray0);
      switchState0.evaluateStep(dummyStepInterpolator0);
      switchState0.stepAccepted(2064.38, doubleArray0);
      boolean boolean0 = switchState0.stop();
      assertEquals(1664.0, switchState0.getEventTime(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      SwitchingFunction switchingFunction1 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NaN, 0.0, 0.0, 0.0).when(switchingFunction1).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction1, (-1205.69002275759), (-1729.271710509332), 2147021347);
      double[] doubleArray0 = new double[0];
      switchState0.stepAccepted(527.8081592054236, doubleArray0);
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      // Undeclared exception!
      try { 
        switchState0.evaluateStep(dummyStepInterpolator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Function values at endpoints do not have different signs.  Endpoints: [527.8081592054236,NaN]  Values: [0.0,0.0]
         //
         verifyException("org.apache.commons.math.analysis.BrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-311.3118565828), (-311.3118565828), 528.1343622015808, 16.073163556460425, (-311.3118565828)).when(switchingFunction0).g(anyDouble() , any(double[].class));
      double[] doubleArray0 = new double[7];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      SwitchState switchState0 = new SwitchState(switchingFunction0, 16.073163556460425, 16.073163556460425, 2147021334);
      dummyStepInterpolator0.storeTime(528.1343622015808);
      switchState0.reinitializeBegin(16.073163556460425, doubleArray0);
      boolean boolean0 = switchState0.evaluateStep(dummyStepInterpolator0);
      assertEquals(48.14823957058086, switchState0.getEventTime(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, (-1593), (-1593), (-1593));
      switchState0.reinitializeBegin((-1593), (double[]) null);
      assertFalse(switchState0.stop());
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      SwitchState switchState0 = new SwitchState(switchingFunction0, 4644.20833085, 4644.20833085, 5);
      double double0 = switchState0.getEventTime();
      assertFalse(switchState0.stop());
      assertEquals(Double.NaN, double0, 0.01);
  }
}

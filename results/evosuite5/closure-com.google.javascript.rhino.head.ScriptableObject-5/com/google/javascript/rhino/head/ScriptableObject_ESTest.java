/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 08:02:53 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.Arguments;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.BoundFunction;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.Delegator;
import com.google.javascript.rhino.head.FieldAndMethods;
import com.google.javascript.rhino.head.Function;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.InterpretedFunction;
import com.google.javascript.rhino.head.Interpreter;
import com.google.javascript.rhino.head.InterpreterData;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.LazilyLoadedCtor;
import com.google.javascript.rhino.head.MemberBox;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeBoolean;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeGenerator;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeJavaArray;
import com.google.javascript.rhino.head.NativeJavaConstructor;
import com.google.javascript.rhino.head.NativeJavaMethod;
import com.google.javascript.rhino.head.NativeJavaPackage;
import com.google.javascript.rhino.head.NativeJavaTopPackage;
import com.google.javascript.rhino.head.NativeMath;
import com.google.javascript.rhino.head.NativeNumber;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.NativeString;
import com.google.javascript.rhino.head.ScriptRuntime;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.Synchronizer;
import com.google.javascript.rhino.head.TopLevel;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ScriptableObject_ESTest extends ScriptableObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test000()  throws Throwable  {
      Interpreter interpreter0 = new Interpreter();
      InterpreterData interpreterData0 = interpreter0.itsData;
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createScript((InterpreterData) null, (Object) null);
      NativeGenerator.init(interpretedFunction0, false);
      ContextFactory contextFactory0 = new ContextFactory();
      contextFactory0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      nativeJavaTopPackage0.getGetterOrSetter("getCla", 0, true);
      ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage1 = new NativeJavaTopPackage((ClassLoader) null);
      NativeArray nativeArray0 = new NativeArray((-5702008784649933400L));
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test001()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      ContextFactory.getGlobal();
      NativeGenerator.init(importerTopLevel0, false);
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      Context context1 = Context.getContext();
      nativeArray0.getOwnPropertyDescriptor(context1, importerTopLevel0);
      Synchronizer synchronizer0 = new Synchronizer((Scriptable) null);
      // Undeclared exception!
      try { 
        synchronizer0.newInstance();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped java.lang.InstantiationException: com.google.javascript.rhino.head.Synchronizer
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test002()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      importerTopLevel0.getClassName();
      NativeNumber nativeNumber0 = new NativeNumber(11);
      context0.instructionCount = 4;
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(importerTopLevel0, importerTopLevel0, 0, 10);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Context.toNumber(idFunctionObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test003()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      ScriptableObject.isFalse(nativeBoolean0);
      Class<NativeNumber> class0 = NativeNumber.class;
      Context.toObject((Object) nativeBoolean0, (Scriptable) nativeBoolean0, (Class<?>) class0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test004()  throws Throwable  {
      Context context0 = Context.enter();
      context0.getApplicationClassLoader();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      importerTopLevel0.getAllIds();
      ScriptableObject.getPropertyIds(importerTopLevel0);
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      Context.enter();
      context0.getApplicationClassLoader();
      Class<FieldAndMethods> class0 = FieldAndMethods.class;
      // Undeclared exception!
      try { 
        nativeArray0.getDefaultValue(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type class com.google.javascript.rhino.head.FieldAndMethods
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeIterator_StopIteration0.put(11, (Scriptable) importerTopLevel0, (Object) context0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test006()  throws Throwable  {
      Integer integer0 = new Integer(116);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      String string0 = "dy.Q{;Em*<C%s";
      Delegator delegator0 = new Delegator(nativeIterator_StopIteration0);
      // Undeclared exception!
      try { 
        nativeIterator_StopIteration0.getAttributes("dy.Q{;Em*<C%s", (Scriptable) delegator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property dy.Q{;Em*<C%s not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test007()  throws Throwable  {
      Interpreter interpreter0 = new Interpreter();
      InterpreterData interpreterData0 = interpreter0.itsData;
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createScript((InterpreterData) null, (Object) null);
      NativeGenerator nativeGenerator0 = NativeGenerator.init(interpretedFunction0, false);
      ContextFactory contextFactory0 = new ContextFactory();
      LazilyLoadedCtor lazilyLoadedCtor0 = new LazilyLoadedCtor(nativeGenerator0, (String) null, "M!`g=I<", false);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeIterator_StopIteration0.isEmpty();
      ContextFactory.getGlobal();
      ScriptableObject.redefineProperty(nativeIterator_StopIteration0, "jsGet_get", true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      nativeError0.findPrototypeId("\"FN");
      Object object0 = nativeError0.equivalentValues("\"FN");
      ScriptableObject.putProperty((Scriptable) nativeError0, 8, (Object) "\"FN");
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeArray nativeArray0 = new NativeArray(1);
      nativeIterator_StopIteration0.containsValue(object0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(3089L);
      NativeArray nativeArray1 = new NativeArray((-1077L));
      nativeArray0.lastIndexOf(nativeArray1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test010()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      String string0 = null;
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = new Context(contextFactory0);
      boolean boolean0 = false;
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, boolean0);
      // Undeclared exception!
      try { 
        baseFunction0.getAttributes(string0, (Scriptable) importerTopLevel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.BaseFunction", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test011()  throws Throwable  {
      boolean boolean0 = false;
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      ScriptableObject.isFalse(nativeBoolean0);
      Context context0 = Context.getContext();
      Synchronizer synchronizer0 = new Synchronizer(nativeBoolean0);
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(synchronizer0, context0, (-1939501217));
      // Undeclared exception!
      try { 
        nativeBoolean0.defineOwnProperties(context0, scriptableObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type com.google.javascript.rhino.head.Context
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Context context1 = Context.getCurrentContext();
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.Boolean;
      BaseFunction baseFunction0 = importerTopLevel0.getBuiltinCtor(topLevel_Builtins0);
      BoundFunction boundFunction0 = new BoundFunction(context1, baseFunction0, baseFunction0, baseFunction0, context0.emptyArgs);
      Integer integer0 = new Integer(1172);
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      nativeBoolean0.defineConst("j5Get_lengh", importerTopLevel0);
      NativeIterator.StopIteration nativeIterator_StopIteration1 = new NativeIterator.StopIteration();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test013()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      NativeError nativeError0 = new NativeError();
      nativeArray0.get(204, (Scriptable) nativeError0);
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("");
      nativeJavaPackage0.applyDescriptorToAttributeBitset(301, nativeError0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      nativeError0.findPrototypeId("\"FN");
      nativeError0.equivalentValues("\"FN");
      ScriptableObject.putProperty((Scriptable) nativeError0, 8, (Object) "\"FN");
      Interpreter interpreter0 = new Interpreter();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      BaseFunction baseFunction0 = new BaseFunction(nativeIterator_StopIteration0, nativeIterator_StopIteration0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Context context0 = Context.enter();
      baseFunction0.getOwnPropertyDescriptor(context0, context0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      nativeError0.getStack();
      NativeGenerator nativeGenerator0 = NativeGenerator.init(nativeError0, false);
      ScriptableObject.deleteProperty((Scriptable) nativeGenerator0, 4);
      nativeError0.checkPropertyDefinition(nativeGenerator0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test016()  throws Throwable  {
      Context.getContext();
      NativeError nativeError0 = new NativeError();
      nativeError0.getStack();
      NativeGenerator.init(nativeError0, false);
      ScriptableObject.deleteProperty((Scriptable) nativeError0, 4);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test017()  throws Throwable  {
      Interpreter interpreter0 = new Interpreter();
      InterpreterData interpreterData0 = interpreter0.itsData;
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createScript((InterpreterData) null, (Object) null);
      NativeGenerator.init(interpretedFunction0, false);
      // Undeclared exception!
      try { 
        NativeJavaArray.wrap((Scriptable) interpretedFunction0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Context.enter();
      NativeError nativeError0 = new NativeError();
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      nativeBoolean0.defineConst("W<De1xS]r(yCl=", nativeError0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      ScriptableObject.redefineProperty(importerTopLevel0, "W<De1xS]r(yCl=", true);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ContextFactory.getGlobal();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.RegExp;
      importerTopLevel0.getBuiltinPrototype(topLevel_Builtins0);
      BaseFunction baseFunction0 = null;
      try {
        baseFunction0 = new BaseFunction((Scriptable) null, (Scriptable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test020()  throws Throwable  {
      Interpreter interpreter0 = new Interpreter();
      InterpreterData interpreterData0 = interpreter0.itsData;
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createScript((InterpreterData) null, (Object) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "jsGet_length";
      stringArray0[1] = "jsGet_length";
      Class<BaseFunction> class0 = BaseFunction.class;
      // Undeclared exception!
      try { 
        interpretedFunction0.defineFunctionProperties(stringArray0, class0, 66);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"jsGet_length\" not found in \"com.google.javascript.rhino.head.BaseFunction\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Context context0 = Context.enter();
      context0.getApplicationClassLoader();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      importerTopLevel0.getAllIds();
      NativeCall nativeCall0 = new NativeCall();
      ScriptableObject.hasProperty((Scriptable) importerTopLevel0, (-1799));
      ScriptableObject.getArrayPrototype(nativeCall0);
      Object[] objectArray0 = new Object[0];
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeIterator.StopIteration nativeIterator_StopIteration1 = new NativeIterator.StopIteration();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Context.enter();
      Context context0 = Context.getCurrentContext();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      // Undeclared exception!
      try { 
        nativeJavaTopPackage0.getGetterOrSetter("error reporter", 5, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // error reporter
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test023()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      ScriptableObject.isFalse(nativeError0);
      ScriptableObject.ensureScriptable(nativeError0);
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("#QB@]HM_\"kZ'<}n,-");
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Byte byte0 = new Byte((byte) (-3));
      nativeContinuation0.get((Object) byte0);
      NativeArray nativeArray0 = new NativeArray(4);
      nativeContinuation0.delete("UCP,Q$DzK,zhCjaV");
  }

  @Test(timeout = 4000)
  @Ignore
  public void test024()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      LazilyLoadedCtor lazilyLoadedCtor0 = new LazilyLoadedCtor(importerTopLevel0, "toArray", "toCharSequence", false, false);
      lazilyLoadedCtor0.init();
      // Undeclared exception!
      try { 
        importerTopLevel0.addLazilyInitializedValue("E", 53, lazilyLoadedCtor0, 2301);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // E
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test025()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      String string0 = "add";
      // Undeclared exception!
      try { 
        nativeError0.getAttributes(1073741824);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property 1073741824 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test026()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(3089L);
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("cos");
      nativeArray0.isEmpty();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test027()  throws Throwable  {
      Interpreter interpreter0 = new Interpreter();
      InterpreterData interpreterData0 = interpreter0.itsData;
      ContextFactory contextFactory0 = new ContextFactory();
      contextFactory0.makeContext();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("error reporter");
      ScriptableObject.deleteProperty((Scriptable) nativeJavaPackage0, "error reporter");
  }

  @Test(timeout = 4000)
  @Ignore
  public void test028()  throws Throwable  {
      Context context0 = Context.getContext();
      context0.getApplicationClassLoader();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      NativeError nativeError0 = new NativeError();
      scriptableObject0.putConst("goev)46qpmAY[", nativeError0, importerTopLevel0);
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      // Undeclared exception!
      try { 
        nativeArray0.subList(13, 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Context context0 = Context.enter();
      context0.getApplicationClassLoader();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context1 = contextFactory0.enter();
      Float float0 = new Float((float) 4);
      importerTopLevel0.getOwnPropertyDescriptor(context1, float0);
      importerTopLevel0.getAllIds();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) importerTopLevel0;
      objectArray0[1] = (Object) importerTopLevel0;
      NativeJavaMethod.scriptSignature(objectArray0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test030()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(3089L);
      NativeGenerator nativeGenerator0 = NativeGenerator.init((ScriptableObject) null, true);
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) nativeBoolean0;
      NativeArray nativeArray1 = new NativeArray(objectArray0);
      NativeBoolean nativeBoolean1 = new NativeBoolean(true);
      // Undeclared exception!
      try { 
        nativeBoolean1.put("has", (Scriptable) nativeGenerator0, (Object) nativeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot modify a property of a sealed object: has.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Context context0 = Context.enter();
      context0.getApplicationClassLoader();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeArray nativeArray0 = new NativeArray(1L);
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Byte byte0 = new Byte((byte) (-99));
      nativeBoolean0.sameValue(nativeContinuation0, byte0);
      ScriptableObject.getArrayPrototype(nativeArray0);
      NativeArray nativeArray1 = new NativeArray(context0.emptyArgs);
      ScriptableObject.deleteProperty((Scriptable) nativeArray0, 9);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Context context0 = Context.enter();
      Scriptable scriptable0 = context0.newArray((Scriptable) nativeError0, 2692);
      // Undeclared exception!
      try { 
        nativeError0.getAttributes(2692, scriptable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property 2692 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test033()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("add");
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      nativeJavaPackage0.defineOwnProperties(context0, nativeError0);
      nativeError0.size();
      NativeCall nativeCall0 = new NativeCall();
      nativeJavaPackage0.defineOwnProperty(context0, contextFactory0, nativeCall0);
      nativeError0.findPrototypeId("error reporter");
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      NativeArray nativeArray1 = new NativeArray(context0.emptyArgs);
      NativeArray nativeArray2 = new NativeArray((-1));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(3089L);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod(context0, (Scriptable) nativeArray0, "language version", context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000003 is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test035()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      ScriptableObject.isFalse(nativeBoolean0);
      Class<NativeNumber> class0 = NativeNumber.class;
      Scriptable scriptable0 = Context.toObject((Object) nativeBoolean0, (Scriptable) nativeBoolean0, (Class<?>) class0);
      ScriptableObject.defineProperty((Scriptable) nativeBoolean0, "toString", (Object) scriptable0, 2);
      nativeBoolean0.defineConst("j5Get_lengh", scriptable0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      // Undeclared exception!
      try { 
        ScriptableObject.redefineProperty(nativeBoolean0, "j5Get_lengh", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: redeclaration of const j5Get_lengh.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test036()  throws Throwable  {
      Interpreter interpreter0 = new Interpreter();
      InterpreterData interpreterData0 = interpreter0.itsData;
      InterpreterData interpreterData1 = interpreter0.itsData;
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      importerTopLevel0.delete(130);
      importerTopLevel0.getAllIds();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      ScriptableObject.deleteProperty((Scriptable) importerTopLevel0, 12);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Context.enter();
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      ScriptableObject.redefineProperty(importerTopLevel0, "getTypeOf", false);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Context context0 = Context.enter();
      context0.getApplicationClassLoader();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Context.getCurrentContext();
      InterpreterData interpreterData0 = new InterpreterData(120, "resumeGenerator", "", false);
      Context.enter();
      context0.getApplicationClassLoader();
      importerTopLevel0.get((Object) "resumeGenerator");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Context context0 = Context.enter();
      context0.getApplicationClassLoader();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      ScriptableObject.getArrayPrototype(nativeIterator_StopIteration0);
      importerTopLevel0.setPrototype(nativeIterator_StopIteration0);
      importerTopLevel0.getAllIds();
      String string0 = "rHMYR";
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      // Undeclared exception!
      try { 
        ScriptableObject.defineProperty((Scriptable) null, "rHMYR", (Object) nativeContinuation0, 23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Context context0 = Context.enter();
      context0.getApplicationClassLoader();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeArray nativeArray0 = new NativeArray(1L);
      NativeCall nativeCall0 = context0.currentActivationCall;
      Object[] objectArray0 = ScriptableObject.getPropertyIds(nativeCall0);
      NativeArray nativeArray1 = new NativeArray(objectArray0);
      NativeArray nativeArray2 = new NativeArray(context0.emptyArgs);
      NativeArray nativeArray3 = new NativeArray(0L);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test042()  throws Throwable  {
      Interpreter interpreter0 = new Interpreter();
      InterpreterData interpreterData0 = interpreter0.itsData;
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createScript((InterpreterData) null, (Object) null);
      NativeGenerator nativeGenerator0 = NativeGenerator.init(interpretedFunction0, false);
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("B qJJY");
      NativeJavaPackage nativeJavaPackage1 = nativeJavaPackage0.forcePackage("Calling Context.exit without previous Context.enter", interpretedFunction0);
      interpretedFunction0.findPrototypeId("B qJJY");
      nativeJavaPackage0.applyDescriptorToAttributeBitset(13, nativeJavaPackage1);
      nativeJavaPackage0.isGenericDescriptor(nativeGenerator0);
      ScriptableObject.putConstProperty(nativeGenerator0, "B qJJY", nativeJavaPackage1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = Context.enter((Context) null, contextFactory0);
      Context context1 = Context.enter(context0);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Class<FunctionObject> class0 = FunctionObject.class;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context1, (Scriptable) nativeIterator_StopIteration0, (Object) contextFactory0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Context context0 = Context.enter();
      context0.getApplicationClassLoader();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Context context1 = Context.getCurrentContext();
      NativeArray nativeArray0 = new NativeArray(1L);
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      nativeArray0.hasInstance(nativeContinuation0);
      Byte byte0 = new Byte((byte) (-99));
      nativeBoolean0.sameValue(nativeContinuation0, byte0);
      ScriptableObject.getArrayPrototype(nativeArray0);
      Context.enter();
      context1.getApplicationClassLoader();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeIterator_StopIteration0.put("error reporter", (Scriptable) importerTopLevel0, (Object) context0);
      nativeIterator_StopIteration0.put(11, (Scriptable) importerTopLevel0, (Object) context0);
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      Object[] objectArray0 = ScriptableObject.getPropertyIds(importerTopLevel0);
      NativeArray nativeArray0 = new NativeArray(objectArray0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test046()  throws Throwable  {
      Interpreter interpreter0 = new Interpreter();
      InterpreterData interpreterData0 = interpreter0.itsData;
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createScript((InterpreterData) null, (Object) null);
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("B qJJY");
      NativeJavaPackage nativeJavaPackage1 = nativeJavaPackage0.forcePackage("Calling Context.exit without previous Context.enter", interpretedFunction0);
      interpretedFunction0.findPrototypeId("B qJJY");
      nativeJavaPackage0.applyDescriptorToAttributeBitset(13, nativeJavaPackage1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Context context0 = Context.enter();
      context0.getApplicationClassLoader();
      NativeGenerator nativeGenerator0 = NativeGenerator.init((ScriptableObject) null, false);
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      NativeBoolean.init(nativeGenerator0, false);
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      // Undeclared exception!
      try { 
        nativeBoolean0.put("error reporter", (Scriptable) null, (Object) nativeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      NativeJavaConstructor nativeJavaConstructor0 = new NativeJavaConstructor((MemberBox) null);
      ScriptRuntime.NoSuchMethodShim scriptRuntime_NoSuchMethodShim0 = new ScriptRuntime.NoSuchMethodShim(nativeJavaConstructor0, "A8/BR-vqC");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        nativeJavaConstructor0.setGetterOrSetter("zJtP~y!]\"w6<}n", 13, scriptRuntime_NoSuchMethodShim0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zJtP~y!]\"w6<}n
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test049()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      importerTopLevel0.getClassName();
      NativeNumber nativeNumber0 = new NativeNumber(11);
      context0.instructionCount = 4;
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(importerTopLevel0, importerTopLevel0, 0, 10);
      idFunctionObject0.isGetterOrSetter("error reporter", 120, false);
      context0.getApplicationClassLoader();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(3089L);
      NativeArray nativeArray1 = new NativeArray(0L);
      ScriptableObject.ensureScriptableObject(nativeArray1);
      nativeArray0.lastIndexOf(nativeArray1);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test051()  throws Throwable  {
      Interpreter interpreter0 = new Interpreter();
      InterpreterData interpreterData0 = interpreter0.itsData;
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createScript((InterpreterData) null, (Object) null);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("error reporter");
      NativeJavaPackage nativeJavaPackage1 = nativeJavaPackage0.forcePackage("language version", interpretedFunction0);
      // Undeclared exception!
      try { 
        nativeJavaPackage1.defineOwnProperties(context0, nativeJavaPackage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: com.google.javascript.rhino.head.NativeJavaPackage@0000000008 is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "B zJJY";
      Short short0 = new Short((short) (-3051));
      // Undeclared exception!
      try { 
        ScriptableObject.ensureScriptable((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Expected argument of type object, but instead had type object
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test053()  throws Throwable  {
      Interpreter interpreter0 = new Interpreter();
      InterpreterData interpreterData0 = interpreter0.itsData;
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createScript((InterpreterData) null, (Object) null);
      String string0 = "jsGet_length";
      String[] stringArray0 = new String[2];
      int int0 = 98689;
      // Undeclared exception!
      try { 
        JavaAdapter.runScript(interpretedFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.InterpretedFunction", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test054()  throws Throwable  {
      Context.getContext();
      NativeArray nativeArray0 = new NativeArray(160);
      NativeError nativeError0 = new NativeError();
      NativeArray nativeArray1 = new NativeArray(108957);
      nativeArray1.listIterator(4);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      nativeContinuation0.delete((String) null);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test055()  throws Throwable  {
      Context context0 = Context.getContext();
      context0.getApplicationClassLoader();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeArray nativeArray0 = new NativeArray((-203L));
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Byte byte0 = new Byte((byte) (-123));
      nativeBoolean0.sameValue(byte0, byte0);
      ScriptableObject.getArrayPrototype(nativeContinuation0);
      NativeArray nativeArray1 = new NativeArray(context0.emptyArgs);
      ScriptableObject.deleteProperty((Scriptable) importerTopLevel0, 6);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test056()  throws Throwable  {
      Interpreter interpreter0 = new Interpreter();
      InterpreterData interpreterData0 = interpreter0.itsData;
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createScript((InterpreterData) null, (Object) null);
      NativeGenerator nativeGenerator0 = NativeGenerator.init(interpretedFunction0, false);
      nativeGenerator0.setAttributes("B qJJY", (Scriptable) interpretedFunction0, 0);
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("B qJJY");
      NativeJavaPackage nativeJavaPackage1 = nativeJavaPackage0.forcePackage("Calling Context.exit without previous Context.enter", interpretedFunction0);
      interpretedFunction0.findPrototypeId("B qJJY");
      nativeJavaPackage0.applyDescriptorToAttributeBitset(0, nativeJavaPackage1);
      nativeJavaPackage0.isGenericDescriptor(nativeGenerator0);
      // Undeclared exception!
      try { 
        nativeJavaPackage1.setAttributes((-500), (Scriptable) nativeGenerator0, (-3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      ContextFactory contextFactory1 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory1);
      Context context1 = Context.enter(context0, contextFactory1);
      Context context2 = contextFactory0.enterContext(context1);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context2, false);
      Class<NativeContinuation> class0 = NativeContinuation.class;
      FunctionObject.convertArg(context0, (Scriptable) importerTopLevel0, (Object) contextFactory1, (Class<?>) class0);
      importerTopLevel0.findPrototypeId("set");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Context context0 = Context.enter();
      NativeError nativeError0 = new NativeError();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      nativeArray0.get(5, (Scriptable) nativeError0);
      nativeArray0.checkPropertyChange("", nativeError0, nativeError0);
      // Undeclared exception!
      try { 
        nativeArray0.subList(8, Integer.MIN_VALUE);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test059()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      nativeBoolean0.defineConst("j5Get_lengh", nativeBoolean0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      // Undeclared exception!
      try { 
        ScriptableObject.redefineProperty(nativeBoolean0, "j5Get_lengh", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: redeclaration of const j5Get_lengh.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test060()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(3089L);
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("cos");
      ScriptableObject.deleteProperty((Scriptable) nativeArray0, "cos");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context1 = contextFactory0.enterContext(context0);
      NativeCall nativeCall0 = context1.currentActivationCall;
      context0.currentActivationCall = nativeCall0;
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      nativeBoolean0.defineConst("language version", context0.currentActivationCall);
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel();
      ScriptableObject.redefineProperty(nativeBoolean0, "error reporter", true);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(3089L);
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      nativeArray0.getAllIds();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeArray nativeArray1 = new NativeArray(context0.emptyArgs);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      ScriptableObject.putProperty((Scriptable) importerTopLevel0, 1729365000, (Object) context0);
      Context.getCurrentContext();
      InterpreterData interpreterData0 = new InterpreterData((-3678), "language version", "89FsqckpEdVFn+=I:", false);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test064()  throws Throwable  {
      Interpreter interpreter0 = new Interpreter();
      InterpreterData interpreterData0 = interpreter0.itsData;
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createScript((InterpreterData) null, (Object) null);
      NativeGenerator nativeGenerator0 = NativeGenerator.init(interpretedFunction0, true);
      nativeGenerator0.checkPropertyChange("getIndexIds", interpretedFunction0, interpretedFunction0);
      ScriptableObject.isFalse((Object) null);
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      nativeBoolean0.put("jsGet_length", (Scriptable) interpretedFunction0, (Object) nativeGenerator0);
      // Undeclared exception!
      try { 
        nativeBoolean0.defineConst("jsGet_length", nativeGenerator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot modify a property of a sealed object: jsGet_length.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Context context0 = Context.enter();
      context0.getApplicationClassLoader();
      NativeGenerator nativeGenerator0 = NativeGenerator.init((ScriptableObject) null, false);
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      ScriptableObject.hasProperty((Scriptable) nativeGenerator0, (-1902));
      NativeError nativeError0 = new NativeError();
      nativeError0.findPrototypeId("com.google.javascript.rhino.head.json.JsonParser$ParseException");
      String string0 = "aWHO# 98QY`V7Y";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        ScriptableObject.getDefaultValue((Scriptable) nativeArray0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeJavaConstructor nativeJavaConstructor0 = new NativeJavaConstructor((MemberBox) null);
      Context context0 = new Context();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("setDelegee", classLoader1);
      ScriptableObject.buildDataDescriptor(nativeJavaConstructor0, nativeJavaPackage0, 13);
      // Undeclared exception!
      try { 
        nativeJavaConstructor0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeJavaConstructor", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Context context0 = Context.enter();
      context0.getApplicationClassLoader();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      importerTopLevel0.getAllIds();
      Object[] objectArray0 = ScriptableObject.getPropertyIds(importerTopLevel0);
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      NativeArray nativeArray1 = new NativeArray(objectArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Integer integer0 = new Integer(116);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      LazilyLoadedCtor lazilyLoadedCtor0 = new LazilyLoadedCtor(nativeIterator_StopIteration0, "toString", "dy.Q{;Em*<C%s", true);
      nativeIterator_StopIteration0.isEmpty();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        nativeIterator_StopIteration0.defineProperty("toString", class0, 1219);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1219
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test069()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("add");
      nativeError0.size();
      int int0 = ScriptableObject.UNINITIALIZED_CONST;
      ScriptableObject.defineConstProperty(nativeError0, "contains");
      nativeError0.equivalentValues("add");
      Interpreter interpreter0 = new Interpreter();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeArray nativeArray0 = new NativeArray(0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test070()  throws Throwable  {
      Interpreter interpreter0 = new Interpreter();
      InterpreterData interpreterData0 = interpreter0.itsData;
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createScript((InterpreterData) null, (Object) null);
      NativeGenerator.init(interpretedFunction0, false);
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("B qJJY");
      NativeJavaPackage nativeJavaPackage1 = nativeJavaPackage0.forcePackage("B qJJY", interpretedFunction0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod((Scriptable) nativeJavaPackage1, "language version", context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000012 is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test071()  throws Throwable  {
      Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      importerTopLevel0.getClassName();
      Class<FunctionObject> class0 = FunctionObject.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) importerTopLevel0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot load class \"com.google.javascript.rhino.head.FunctionObject\" which has no zero-parameter constructor.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test072()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      ScriptableObject.isFalse(nativeBoolean0);
      Class<NativeNumber> class0 = NativeNumber.class;
      NativeBoolean nativeBoolean1 = (NativeBoolean)Context.toObject((Object) nativeBoolean0, (Scriptable) nativeBoolean0, (Class<?>) class0);
      nativeBoolean1.isConst("com.google.javascript.rhino.head.ScriptableObject$Slot");
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      NativeArray nativeArray0 = null;
      try {
        nativeArray0 = new NativeArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Integer integer0 = new Integer(116);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      LazilyLoadedCtor lazilyLoadedCtor0 = new LazilyLoadedCtor(nativeIterator_StopIteration0, "toString", "dy.Q{;Em*<C%s", true);
      nativeIterator_StopIteration0.isEmpty();
      ContextFactory.getGlobal();
      Context.getCurrentContext();
      NativeArray nativeArray0 = new NativeArray(130);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test074()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      ScriptableObject.isFalse(nativeBoolean0);
      Class<NativeNumber> class0 = NativeNumber.class;
      NativeBoolean nativeBoolean1 = (NativeBoolean)Context.toObject((Object) nativeBoolean0, (Scriptable) nativeBoolean0, (Class<?>) class0);
      nativeBoolean1.isGenericDescriptor(nativeBoolean0);
      nativeBoolean0.defineConst("j5Get_lengh", nativeBoolean1);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      // Undeclared exception!
      try { 
        ScriptableObject.redefineProperty(nativeBoolean0, "j5Get_lengh", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: redeclaration of const j5Get_lengh.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test075()  throws Throwable  {
      Interpreter interpreter0 = new Interpreter();
      InterpreterData interpreterData0 = interpreter0.itsData;
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createScript((InterpreterData) null, (Object) null);
      ScriptableObject.putProperty((Scriptable) interpretedFunction0, 1507, (Object) "jsGet_length");
  }

  @Test(timeout = 4000)
  @Ignore
  public void test076()  throws Throwable  {
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      JavaAdapter.getFunction(importerTopLevel0, "getTypeOf");
      importerTopLevel0.importPackage(context0, (Scriptable) null, context0.emptyArgs, (Function) null);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Context context0 = Context.enter();
      context0.getApplicationClassLoader();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      ScriptableObject.deleteProperty((Scriptable) importerTopLevel0, "error reporter");
      importerTopLevel0.getAllIds();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      NativeString nativeString0 = new NativeString("error reporter");
      nativeString0.getMaxInstanceId();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test078()  throws Throwable  {
      Context context0 = Context.getContext();
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      Scriptable scriptable0 = ScriptableObject.getArrayPrototype(scriptableObject0);
      scriptableObject0.setPrototype(scriptable0);
      scriptableObject0.getAllIds();
      Interpreter interpreter0 = new Interpreter();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeArray nativeArray0 = new NativeArray(0L);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Interpreter interpreter0 = new Interpreter();
      InterpreterData interpreterData0 = interpreter0.itsData;
      InterpreterData interpreterData1 = interpreter0.itsData;
      ContextFactory contextFactory0 = new ContextFactory();
      contextFactory0.makeContext();
      contextFactory0.enterContext();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("language version");
      Byte byte0 = new Byte((byte) (-3));
      Byte.toUnsignedLong((byte) (-77));
      ScriptableObject.putConstProperty(nativeJavaPackage0, "msg.XML.not.available", byte0);
      ScriptableObject.deleteProperty((Scriptable) nativeJavaPackage0, "language version");
  }

  @Test(timeout = 4000)
  @Ignore
  public void test080()  throws Throwable  {
      Interpreter interpreter0 = new Interpreter();
      InterpreterData interpreterData0 = interpreter0.itsData;
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createScript((InterpreterData) null, (Object) null);
      NativeGenerator nativeGenerator0 = NativeGenerator.init(interpretedFunction0, false);
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      nativeBoolean0.defineConst("newChild had siblings in addChildBefore", interpretedFunction0);
      ContextFactory contextFactory0 = new ContextFactory();
      ContextFactory contextFactory1 = ContextFactory.getGlobal();
      ContextFactory.getGlobal();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) nativeGenerator0;
      objectArray0[2] = (Object) contextFactory0;
      objectArray0[3] = (Object) interpretedFunction0;
      objectArray0[4] = (Object) "newChild had siblings in addChildBefore";
      objectArray0[5] = (Object) contextFactory0;
      objectArray0[6] = (Object) contextFactory1;
      objectArray0[7] = (Object) nativeGenerator0;
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      nativeArray0.lastIndexOf("newChild had siblings in addChildBefore");
  }

  @Test(timeout = 4000)
  @Ignore
  public void test081()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("add");
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      nativeJavaPackage0.defineOwnProperties(context0, nativeError0);
      nativeError0.getAllIds();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Context context0 = Context.enter();
      context0.getApplicationClassLoader();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeObject nativeObject0 = (NativeObject)context0.initStandardObjects();
      NativeArray nativeArray0 = (NativeArray)ScriptableObject.getArrayPrototype(nativeObject0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(importerTopLevel0, importerTopLevel0, 36729865, "language version", 4, nativeArray0);
      ScriptableObject.buildDataDescriptor(nativeArray0, context0, 1);
      // Undeclared exception!
      try { 
        nativeObject0.initPrototypeConstructor(idFunctionObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test083()  throws Throwable  {
      Interpreter interpreter0 = new Interpreter();
      InterpreterData interpreterData0 = interpreter0.itsData;
      InterpretedFunction.createScript((InterpreterData) null, (Object) null);
      NativeError nativeError0 = new NativeError();
      nativeError0.size();
      NativeCall nativeCall0 = new NativeCall();
      // Undeclared exception!
      try { 
        nativeError0.setAttributes(0, (Scriptable) nativeCall0, 397);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 397
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(963L);
      nativeArray0.getLength();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeError nativeError0 = new NativeError();
      nativeIterator_StopIteration0.remove((Object) nativeError0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Context context0 = Context.enter();
      context0.getApplicationClassLoader();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeGenerator nativeGenerator0 = NativeGenerator.init(importerTopLevel0, false);
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("language version");
      NativeJavaPackage nativeJavaPackage1 = nativeJavaPackage0.forcePackage("Calling Context.exit without previous Context.enter", nativeGenerator0);
      nativeJavaPackage1.getPkgProperty("language version", nativeJavaPackage0, false);
      Class<IdFunctionObject> class0 = IdFunctionObject.class;
      // Undeclared exception!
      try { 
        nativeJavaPackage0.defineProperty("Calling Context.exit without previous Context.enter", class0, 2369);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2369
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test086()  throws Throwable  {
      Context context0 = Context.getContext();
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      ScriptableObject.getArrayPrototype(scriptableObject0);
      ScriptableObject scriptableObject1 = context0.initStandardObjects(scriptableObject0, false);
      scriptableObject0.put(6, (Scriptable) scriptableObject1, (Object) null);
      boolean boolean0 = false;
      Class<Arguments> class0 = Arguments.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) scriptableObject1, class0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot load class \"com.google.javascript.rhino.head.Arguments\" which has no zero-parameter constructor.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Class<Byte> class0 = Byte.class;
      ScriptableObject.getTypedProperty((Scriptable) importerTopLevel0, "language version", class0);
      InterpreterData interpreterData0 = new InterpreterData(2551, "resumeGenerator", "n^$", false);
      Context context1 = Context.enter();
      context1.generateObserverCount = false;
      context0.getApplicationClassLoader();
      NativeMath.init(importerTopLevel0, false);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Context.enter();
      Class<NativeString> class0 = NativeString.class;
      NativeError nativeError0 = new NativeError();
      // Undeclared exception!
      try { 
        nativeError0.defineProperty("_", class0, 180);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 181
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test089()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(3089L);
      LazilyLoadedCtor lazilyLoadedCtor0 = new LazilyLoadedCtor(nativeArray0, "jsStaticFunction_", "4]zstKk,;=Q", true);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeIterator_StopIteration0.isEmpty();
      ContextFactory.getGlobal();
      // Undeclared exception!
      try { 
        ScriptableObject.redefineProperty(nativeArray0, "jsStaticFunction_", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: redeclaration of var jsStaticFunction_.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Class<Byte> class0 = Byte.class;
      ScriptableObject.getTypedProperty((Scriptable) importerTopLevel0, "language version", class0);
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      NativeArray nativeArray0 = null;
      try {
        nativeArray0 = new NativeArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test091()  throws Throwable  {
      Interpreter interpreter0 = new Interpreter();
      InterpreterData interpreterData0 = interpreter0.itsData;
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createScript((InterpreterData) null, (Object) null);
      ContextFactory.getGlobal();
      NativeGenerator.init(interpretedFunction0, true);
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("B qJJY");
      NativeString nativeString0 = new NativeString("Calling Context.exit without previous Context.enter");
      NativeJavaPackage nativeJavaPackage1 = nativeJavaPackage0.forcePackage("put", nativeString0);
      interpretedFunction0.findPrototypeId("Calling Context.exit without previous Context.enter");
      nativeJavaPackage0.applyDescriptorToAttributeBitset((-59), nativeJavaPackage1);
      nativeJavaPackage0.isGenericDescriptor(interpretedFunction0);
      // Undeclared exception!
      try { 
        ScriptableObject.putConstProperty(nativeJavaPackage0, "put", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: redeclaration of var put.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test092()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-1077L));
      Class<BoundFunction> class0 = BoundFunction.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) nativeArray0, class0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot load class \"com.google.javascript.rhino.head.BoundFunction\" which has no zero-parameter constructor.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test093()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      importerTopLevel0.getClassName();
      NativeNumber nativeNumber0 = new NativeNumber(11);
      context0.instructionCount = 4;
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(importerTopLevel0, importerTopLevel0, 0, 10);
      idFunctionObject0.isGetterOrSetter("error reporter", 120, true);
      BaseFunction baseFunction0 = new BaseFunction(importerTopLevel0, nativeNumber0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      // Undeclared exception!
      try { 
        baseFunction0.getOwnPropertyDescriptor(context0, nativeContinuation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-7054365918152680533L));
      LinkedHashSet<FieldAndMethods> linkedHashSet0 = new LinkedHashSet<FieldAndMethods>();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test095()  throws Throwable  {
      Interpreter interpreter0 = new Interpreter();
      InterpreterData interpreterData0 = interpreter0.itsData;
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createScript((InterpreterData) null, (Object) null);
      NativeGenerator nativeGenerator0 = NativeGenerator.init(interpretedFunction0, true);
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      NativeObject nativeObject0 = new NativeObject();
      // Undeclared exception!
      try { 
        nativeObject0.putConst((String) null, nativeGenerator0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot modify a property of a sealed object: 0.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test096()  throws Throwable  {
      Context context0 = Context.getContext();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("add");
      NativeError nativeError0 = new NativeError();
      int int0 = ScriptableObject.UNINITIALIZED_CONST;
      String string0 = "contains";
      ContextFactory contextFactory0 = new ContextFactory();
      contextFactory0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      nativeJavaTopPackage0.construct(context0, nativeError0, context0.emptyArgs);
      // Undeclared exception!
      try { 
        ScriptableObject.defineConstProperty((Scriptable) null, "WbfV");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeIterator_StopIteration0.put("error reporter", (Scriptable) importerTopLevel0, (Object) context0);
      nativeIterator_StopIteration0.put(11, (Scriptable) importerTopLevel0, (Object) context0);
      // Undeclared exception!
      try { 
        NativeError.make(context0, nativeIterator_StopIteration0, (IdFunctionObject) null, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeError", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test098()  throws Throwable  {
      Interpreter interpreter0 = new Interpreter();
      InterpreterData interpreterData0 = interpreter0.itsData;
      InterpretedFunction.createScript((InterpreterData) null, (Object) null);
      Context context0 = Context.getCurrentContext();
      NativeArray nativeArray0 = new NativeArray(130);
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      importerTopLevel0.delete((-1));
      Object[] objectArray0 = nativeArray0.getAllIds();
      NativeArray nativeArray1 = new NativeArray(objectArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Class<Byte> class0 = Byte.class;
      ScriptableObject.getTypedProperty((Scriptable) importerTopLevel0, "language version", class0);
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      nativeBoolean0.sameValue(context0, (Object) null);
      ScriptableObject.getArrayPrototype(importerTopLevel0);
      NativeArray nativeArray0 = null;
      try {
        nativeArray0 = new NativeArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      assertNotNull(classLoader0);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      assertNotNull(importerTopLevel0);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      
      Object[] objectArray0 = importerTopLevel0.getAllIds();
      assertNotNull(objectArray0);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(59, objectArray0.length);
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertNotNull(nativeContinuation0);
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.isSealed());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      
      NativeArray nativeArray0 = new NativeArray(context0.emptyArgs);
      assertNotNull(nativeArray0);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals(0L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(0L, nativeArray0.getLength());
      assertFalse(nativeArray0.isSealed());
      assertTrue(nativeArray0.isExtensible());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test101()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.isSealed());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("add");
      assertNotNull(nativeJavaPackage0);
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.isSealed());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      int int0 = nativeError0.size();
      assertEquals(0, int0);
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.isSealed());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      NativeCall nativeCall0 = new NativeCall();
      assertNotNull(nativeCall0);
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isEmpty());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertEquals("object", nativeCall0.getTypeOf());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(3089L);
      assertNotNull(nativeArray0);
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(3089L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.isSealed());
      assertEquals("Array", nativeArray0.getClassName());
      assertEquals(3089L, nativeArray0.getLength());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      
      Class<Delegator> class0 = Delegator.class;
      Class<Delegator> class1 = Delegator.class;
      // Undeclared exception!
      try { 
        ScriptableObject.buildClassCtor((Scriptable) nativeArray0, class1, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Delegator", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test103()  throws Throwable  {
      Interpreter interpreter0 = new Interpreter();
      assertNotNull(interpreter0);
      
      InterpreterData interpreterData0 = interpreter0.itsData;
      assertNull(interpreterData0);
      
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createScript((InterpreterData) null, (Object) null);
      assertNotNull(interpretedFunction0);
      assertTrue(interpretedFunction0.isEmpty());
      assertTrue(interpretedFunction0.isExtensible());
      assertEquals("function", interpretedFunction0.getTypeOf());
      assertFalse(interpretedFunction0.hasPrototypeMap());
      assertFalse(interpretedFunction0.isSealed());
      assertEquals("Function", interpretedFunction0.getClassName());
      assertFalse(interpretedFunction0.avoidObjectDetection());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      NativeGenerator nativeGenerator0 = NativeGenerator.init(interpretedFunction0, false);
      assertNotNull(nativeGenerator0);
      assertTrue(interpretedFunction0.isEmpty());
      assertTrue(interpretedFunction0.isExtensible());
      assertEquals("function", interpretedFunction0.getTypeOf());
      assertFalse(interpretedFunction0.hasPrototypeMap());
      assertFalse(interpretedFunction0.isSealed());
      assertEquals("Function", interpretedFunction0.getClassName());
      assertFalse(interpretedFunction0.avoidObjectDetection());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertTrue(nativeGenerator0.isExtensible());
      assertTrue(nativeGenerator0.isEmpty());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertFalse(nativeGenerator0.isSealed());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("jsGet_length");
      assertNotNull(nativeJavaPackage0);
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertFalse(nativeJavaPackage0.isSealed());
      assertTrue(nativeJavaPackage0.isEmpty());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      NativeJavaPackage nativeJavaPackage1 = nativeJavaPackage0.forcePackage("msg.change.writable.false.to.true.with.configurable.false", interpretedFunction0);
      assertNotNull(nativeJavaPackage1);
      assertFalse(nativeJavaPackage1.equals((Object)nativeJavaPackage0));
      assertTrue(interpretedFunction0.isEmpty());
      assertTrue(interpretedFunction0.isExtensible());
      assertEquals("function", interpretedFunction0.getTypeOf());
      assertFalse(interpretedFunction0.hasPrototypeMap());
      assertFalse(interpretedFunction0.isSealed());
      assertEquals("Function", interpretedFunction0.getClassName());
      assertFalse(interpretedFunction0.avoidObjectDetection());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertFalse(nativeJavaPackage0.isSealed());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.isEmpty());
      assertFalse(nativeJavaPackage1.avoidObjectDetection());
      assertTrue(nativeJavaPackage1.isEmpty());
      assertEquals("object", nativeJavaPackage1.getTypeOf());
      assertTrue(nativeJavaPackage1.isExtensible());
      assertFalse(nativeJavaPackage1.isSealed());
      assertEquals("JavaPackage", nativeJavaPackage1.getClassName());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotSame(nativeJavaPackage0, nativeJavaPackage1);
      assertNotSame(nativeJavaPackage1, nativeJavaPackage0);
      
      Object object0 = nativeJavaPackage1.getPkgProperty("Calling Context.exit without previous Context.enter", nativeGenerator0, false);
      assertNull(object0);
      assertFalse(nativeJavaPackage0.equals((Object)nativeJavaPackage1));
      assertFalse(nativeJavaPackage1.equals((Object)nativeJavaPackage0));
      assertTrue(interpretedFunction0.isEmpty());
      assertTrue(interpretedFunction0.isExtensible());
      assertEquals("function", interpretedFunction0.getTypeOf());
      assertFalse(interpretedFunction0.hasPrototypeMap());
      assertFalse(interpretedFunction0.isSealed());
      assertEquals("Function", interpretedFunction0.getClassName());
      assertFalse(interpretedFunction0.avoidObjectDetection());
      assertTrue(nativeGenerator0.hasPrototypeMap());
      assertTrue(nativeGenerator0.isExtensible());
      assertTrue(nativeGenerator0.isEmpty());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertFalse(nativeGenerator0.isSealed());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertFalse(nativeJavaPackage0.isSealed());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.isEmpty());
      assertFalse(nativeJavaPackage1.avoidObjectDetection());
      assertTrue(nativeJavaPackage1.isEmpty());
      assertEquals("object", nativeJavaPackage1.getTypeOf());
      assertTrue(nativeJavaPackage1.isExtensible());
      assertFalse(nativeJavaPackage1.isSealed());
      assertEquals("JavaPackage", nativeJavaPackage1.getClassName());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotSame(nativeJavaPackage0, nativeJavaPackage1);
      assertNotSame(nativeJavaPackage1, nativeJavaPackage0);
      
      int int0 = interpretedFunction0.findPrototypeId("removeAll");
      assertEquals(0, int0);
      assertTrue(interpretedFunction0.isEmpty());
      assertTrue(interpretedFunction0.isExtensible());
      assertEquals("function", interpretedFunction0.getTypeOf());
      assertFalse(interpretedFunction0.hasPrototypeMap());
      assertFalse(interpretedFunction0.isSealed());
      assertEquals("Function", interpretedFunction0.getClassName());
      assertFalse(interpretedFunction0.avoidObjectDetection());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      int int1 = nativeJavaPackage0.applyDescriptorToAttributeBitset(583, nativeJavaPackage1);
      assertFalse(nativeJavaPackage0.equals((Object)nativeJavaPackage1));
      assertFalse(nativeJavaPackage1.equals((Object)nativeJavaPackage0));
      assertFalse(int1 == int0);
      assertEquals(576, int1);
      assertTrue(interpretedFunction0.isEmpty());
      assertTrue(interpretedFunction0.isExtensible());
      assertEquals("function", interpretedFunction0.getTypeOf());
      assertFalse(interpretedFunction0.hasPrototypeMap());
      assertFalse(interpretedFunction0.isSealed());
      assertEquals("Function", interpretedFunction0.getClassName());
      assertFalse(interpretedFunction0.avoidObjectDetection());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertFalse(nativeJavaPackage0.isSealed());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.isEmpty());
      assertFalse(nativeJavaPackage1.avoidObjectDetection());
      assertEquals("object", nativeJavaPackage1.getTypeOf());
      assertTrue(nativeJavaPackage1.isExtensible());
      assertFalse(nativeJavaPackage1.isSealed());
      assertEquals("JavaPackage", nativeJavaPackage1.getClassName());
      assertFalse(nativeJavaPackage1.isEmpty());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotSame(nativeJavaPackage0, nativeJavaPackage1);
      assertNotSame(nativeJavaPackage1, nativeJavaPackage0);
      
      boolean boolean0 = nativeJavaPackage1.isGenericDescriptor(nativeJavaPackage0);
      assertFalse(nativeJavaPackage0.equals((Object)nativeJavaPackage1));
      assertFalse(nativeJavaPackage1.equals((Object)nativeJavaPackage0));
      assertFalse(boolean0);
      assertTrue(interpretedFunction0.isEmpty());
      assertTrue(interpretedFunction0.isExtensible());
      assertEquals("function", interpretedFunction0.getTypeOf());
      assertFalse(interpretedFunction0.hasPrototypeMap());
      assertFalse(interpretedFunction0.isSealed());
      assertEquals("Function", interpretedFunction0.getClassName());
      assertFalse(interpretedFunction0.avoidObjectDetection());
      assertFalse(nativeJavaPackage0.avoidObjectDetection());
      assertFalse(nativeJavaPackage0.isSealed());
      assertEquals("object", nativeJavaPackage0.getTypeOf());
      assertTrue(nativeJavaPackage0.isExtensible());
      assertEquals("JavaPackage", nativeJavaPackage0.getClassName());
      assertFalse(nativeJavaPackage0.isEmpty());
      assertFalse(nativeJavaPackage1.avoidObjectDetection());
      assertEquals("object", nativeJavaPackage1.getTypeOf());
      assertTrue(nativeJavaPackage1.isExtensible());
      assertFalse(nativeJavaPackage1.isSealed());
      assertEquals("JavaPackage", nativeJavaPackage1.getClassName());
      assertFalse(nativeJavaPackage1.isEmpty());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotSame(nativeJavaPackage0, nativeJavaPackage1);
      assertNotSame(nativeJavaPackage1, nativeJavaPackage0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray((-28L));
      NativeError nativeError0 = new NativeError();
      String string0 = "UgdFl%";
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeIterator_StopIteration0.put(7, (Scriptable) nativeArray0, (Object) "UgdFl%");
      NativeArray nativeArray1 = new NativeArray(8);
      Class<BaseFunction> class0 = BaseFunction.class;
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        ScriptableObject.getDefaultValue((Scriptable) nativeContinuation0, (Class<?>) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(3089L);
      Context.enter();
      Context context0 = Context.getCurrentContext();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      contextFactory0.getApplicationClassLoader();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("enumerable");
      NativeError nativeError0 = new NativeError();
      int int0 = ScriptableObject.EMPTY;
      Scriptable scriptable0 = context0.newObject((Scriptable) nativeError0);
      ScriptableObject.hasProperty(scriptable0, (-2751));
      NativeArray nativeArray1 = new NativeArray(0L);
      ContextFactory.initGlobal(contextFactory0);
      // Undeclared exception!
      try { 
        nativeError0.associateValue(nativeArray1, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }
}

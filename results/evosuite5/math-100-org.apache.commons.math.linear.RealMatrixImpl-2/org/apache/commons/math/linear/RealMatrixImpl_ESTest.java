/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 21:16:36 GMT 2019
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class RealMatrixImpl_ESTest extends RealMatrixImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      // Undeclared exception!
      try { 
        realMatrixImpl0.getLUMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1.0, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, doubleArray0.length);
      
      double double0 = realMatrixImpl0.getDeterminant();
      assertEquals((-1.0), double0, 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1.0, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      RealMatrix realMatrix0 = realMatrixImpl0.getLUMatrix();
      assertTrue(realMatrix0.equals((Object)realMatrixImpl0));
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(1.0, realMatrix0.getNorm(), 0.01);
      assertEquals(1, realMatrix0.getRowDimension());
      assertTrue(realMatrix0.isSquare());
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertEquals(1, doubleArray0.length);
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(23, 23);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(23, realMatrixImpl0.getRowDimension());
      assertEquals(23, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl0);
      
      realMatrixImpl0.hashCode();
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(23, realMatrixImpl0.getRowDimension());
      assertEquals(23, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrixImpl0.isSquare());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, doubleArray0.length);
      
      RealMatrix realMatrix0 = realMatrixImpl0.scalarAdd((-1.0));
      assertFalse(realMatrix0.equals((Object)realMatrixImpl0));
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1.0, realMatrix0.getNorm(), 0.01);
      assertEquals(1, realMatrix0.getRowDimension());
      assertTrue(realMatrix0.isSquare());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertEquals(1, doubleArray0.length);
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
      
      boolean boolean0 = realMatrixImpl0.equals(realMatrix0);
      assertFalse(boolean0);
      assertFalse(realMatrixImpl0.equals((Object)realMatrix0));
      assertFalse(realMatrix0.equals((Object)realMatrixImpl0));
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1.0, realMatrix0.getNorm(), 0.01);
      assertEquals(1, realMatrix0.getRowDimension());
      assertTrue(realMatrix0.isSquare());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[1][9];
      doubleArray1[0] = doubleArray0;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(7, realMatrixImpl1.getRowDimension());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01);
      assertFalse(realMatrixImpl1.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(realMatrixImpl1);
      assertEquals(7, doubleArray2.length);
      
      boolean boolean0 = realMatrixImpl0.equals(realMatrixImpl1);
      assertFalse(boolean0);
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(7, realMatrixImpl1.getRowDimension());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01);
      assertFalse(realMatrixImpl1.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[1][9];
      doubleArray1[0] = doubleArray0;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertNotNull(realMatrixImpl0);
      assertEquals(1, doubleArray1.length);
      
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray0);
      assertTrue(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertTrue(realMatrixImpl1.isSquare());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl1);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = realMatrixImpl0.equals(realMatrixImpl1);
      assertTrue(boolean0);
      assertTrue(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertTrue(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertTrue(realMatrixImpl1.isSquare());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      boolean boolean0 = realMatrixImpl0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[1][9];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1);
      assertEquals(9, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl0);
      assertEquals(1, doubleArray1.length);
      
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray0);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertTrue(realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl1);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = realMatrixImpl0.equals(realMatrixImpl1);
      assertFalse(boolean0);
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertEquals(9, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl1.getRowDimension());
      assertTrue(realMatrixImpl1.isSquare());
      assertEquals(1, realMatrixImpl1.getColumnDimension());
      assertEquals(0.0, realMatrixImpl1.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(17, 17);
      assertEquals(17, realMatrixImpl0.getRowDimension());
      assertEquals(17, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl0);
      
      String string0 = realMatrixImpl0.toString();
      assertEquals(17, realMatrixImpl0.getRowDimension());
      assertEquals(17, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      String string0 = realMatrixImpl0.toString();
      assertEquals("RealMatrixImpl{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1;
      doubleArray0[2] = doubleArray2;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(3, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(3, realMatrixImpl0.getColumnDimension());
      assertNotNull(realMatrixImpl0);
      assertEquals(3, doubleArray0.length);
      
      try { 
        realMatrixImpl0.inverse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Matrix is singular.
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(7, realMatrixImpl0.getRowDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(7, doubleArray0.length);
      
      try { 
        realMatrixImpl0.luDecompose();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // LU decomposition requires that the matrix be square.
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(35, 35);
      assertEquals(35, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(35, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl0);
      
      RealMatrixImpl.TOO_SMALL = (-1.0);
      // Undeclared exception!
      realMatrixImpl0.inverse();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(17, realMatrixImpl0.getRowDimension());
      assertNotNull(realMatrixImpl0);
      assertEquals(17, doubleArray0.length);
      
      try { 
        realMatrixImpl0.solve(doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // coefficient matrix is not square
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = realMatrixImpl0.solve(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(20, 20);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(20, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(20, realMatrixImpl0.getColumnDimension());
      assertNotNull(realMatrixImpl0);
      
      double[] doubleArray0 = new double[0];
      try { 
        realMatrixImpl0.solve(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // constant vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(20, 20);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(20, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(20, realMatrixImpl0.getRowDimension());
      assertNotNull(realMatrixImpl0);
      
      double[] doubleArray0 = new double[1];
      try { 
        realMatrixImpl0.preMultiply(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = realMatrixImpl0.preMultiply(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(18, realMatrixImpl0.getRowDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertNotNull(realMatrixImpl0);
      assertEquals(18, doubleArray0.length);
      
      try { 
        realMatrixImpl0.operate(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = realMatrixImpl0.operate(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(20, 20);
      assertEquals(20, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(20, realMatrixImpl0.getRowDimension());
      assertNotNull(realMatrixImpl0);
      
      double double0 = realMatrixImpl0.getTrace();
      assertEquals(0.0, double0, 0.01);
      assertEquals(20, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(20, realMatrixImpl0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(9, realMatrixImpl0.getColumnDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, doubleArray0.length);
      
      try { 
        realMatrixImpl0.getTrace();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix is not square
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(7, realMatrixImpl0.getRowDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(7, doubleArray0.length);
      
      try { 
        realMatrixImpl0.getDeterminant();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix is not square
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(1, 1);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertNotNull(realMatrixImpl0);
      
      double double0 = realMatrixImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(2, doubleArray0.length);
      
      RealMatrix realMatrix0 = realMatrixImpl0.transpose();
      assertFalse(realMatrix0.equals((Object)realMatrixImpl0));
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(2, realMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(0.0, realMatrix0.getNorm(), 0.01);
      assertFalse(realMatrix0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertEquals(2, doubleArray0.length);
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
      
      try { 
        realMatrix0.solve((RealMatrix) realMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incorrect row dimension
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, doubleArray0.length);
      
      try { 
        realMatrixImpl0.getEntry(452, 452);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix entry does not exist
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(23, 23);
      assertEquals(23, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(23, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertNotNull(realMatrixImpl0);
      
      try { 
        realMatrixImpl0.getColumn((-37));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(17, 17);
      assertEquals(17, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(17, realMatrixImpl0.getColumnDimension());
      assertNotNull(realMatrixImpl0);
      
      double[] doubleArray0 = realMatrixImpl0.getColumn(6);
      assertEquals(17, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(17, realMatrixImpl0.getColumnDimension());
      assertNotNull(doubleArray0);
      assertEquals(17, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(8, realMatrixImpl0.getRowDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(8, doubleArray0.length);
      
      try { 
        realMatrixImpl0.getRow(40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = realMatrixImpl0.getRow(0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(20, 20);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(20, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(20, realMatrixImpl0.getColumnDimension());
      assertNotNull(realMatrixImpl0);
      
      try { 
        realMatrixImpl0.getColumnMatrix(20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, doubleArray0.length);
      
      RealMatrix realMatrix0 = realMatrixImpl0.getColumnMatrix(0);
      assertTrue(realMatrix0.equals((Object)realMatrixImpl0));
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrix0.isSquare());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(0.0, realMatrix0.getNorm(), 0.01);
      assertEquals(1, realMatrix0.getRowDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertEquals(1, doubleArray0.length);
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(31, 31);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(31, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(31, realMatrixImpl0.getRowDimension());
      assertNotNull(realMatrixImpl0);
      
      try { 
        realMatrixImpl0.getRowMatrix((-1875));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(9, realMatrixImpl0.getColumnDimension());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertNotNull(realMatrixImpl0);
      assertEquals(2, doubleArray0.length);
      
      try { 
        realMatrixImpl0.setSubMatrix(doubleArray0, 2, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      try { 
        realMatrixImpl0.setSubMatrix(doubleArray0, 39, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix must be initialized to perfom this method
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[][] doubleArray0 = new double[5][9];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(227, 2);
      assertEquals(2, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(227, realMatrixImpl0.getRowDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl0);
      
      try { 
        realMatrixImpl0.setSubMatrix(doubleArray0, 2, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[3][4];
      doubleArray1[0] = doubleArray0;
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one column.
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[][] doubleArray0 = new double[0][6];
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one row.
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(14, 14);
      assertEquals(14, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(14, realMatrixImpl0.getColumnDimension());
      assertNotNull(realMatrixImpl0);
      
      double[][] doubleArray0 = new double[0][0];
      try { 
        realMatrixImpl0.setSubMatrix(doubleArray0, 14, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[][] doubleArray0 = new double[6][9];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(9, realMatrixImpl0.getColumnDimension());
      assertEquals(6, realMatrixImpl0.getRowDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl0);
      assertEquals(6, doubleArray0.length);
      
      try { 
        realMatrixImpl0.setSubMatrix(doubleArray0, (-1), (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      try { 
        realMatrixImpl0.getSubMatrix(intArray0, intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // selected row and column index arrays must be non-empty
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      RealMatrix realMatrix0 = realMatrixImpl0.getSubMatrix(intArray0, intArray0);
      assertTrue(realMatrix0.equals((Object)realMatrixImpl0));
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertTrue(realMatrix0.isSquare());
      assertEquals(0.0, realMatrix0.getNorm(), 0.01);
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(realMatrix0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, intArray0.length);
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(20, realMatrixImpl0.getRowDimension());
      assertNotNull(realMatrixImpl0);
      assertEquals(20, doubleArray0.length);
      
      RealMatrix realMatrix0 = realMatrixImpl0.getSubMatrix(0, 0, 0, 0);
      assertFalse(realMatrix0.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(20, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrix0.getRowDimension());
      assertTrue(realMatrix0.isSquare());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(0.0, realMatrix0.getNorm(), 0.01);
      assertNotNull(realMatrix0);
      assertEquals(20, doubleArray0.length);
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, doubleArray0.length);
      
      try { 
        realMatrixImpl0.getSubMatrix(1, 1, 7, 7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(1527, 1527);
      assertEquals(1527, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(1527, realMatrixImpl0.getColumnDimension());
      assertNotNull(realMatrixImpl0);
      
      try { 
        realMatrixImpl0.getSubMatrix(293, 1527, 1527, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(4, doubleArray0.length);
      
      try { 
        realMatrixImpl0.getSubMatrix(0, 0, (-85), (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, doubleArray0.length);
      
      try { 
        realMatrixImpl0.getSubMatrix(11, 11, 11, 11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(36, 31);
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(31, realMatrixImpl0.getColumnDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertEquals(36, realMatrixImpl0.getRowDimension());
      assertNotNull(realMatrixImpl0);
      
      try { 
        realMatrixImpl0.getSubMatrix(36, 31, 36, 31);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      
      try { 
        realMatrixImpl0.getSubMatrix((-1), (-1), (-1), (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(9, realMatrixImpl0.getRowDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(9, doubleArray0.length);
      
      double double0 = realMatrixImpl0.getNorm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(9, realMatrixImpl0.getRowDimension());
      assertFalse(realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(13, 13);
      assertEquals(13, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(13, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertNotNull(realMatrixImpl0);
      
      RealMatrix realMatrix0 = realMatrixImpl0.preMultiply((RealMatrix) realMatrixImpl0);
      assertTrue(realMatrix0.equals((Object)realMatrixImpl0));
      assertEquals(13, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(13, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(13, realMatrix0.getRowDimension());
      assertTrue(realMatrix0.isSquare());
      assertEquals(13, realMatrix0.getColumnDimension());
      assertEquals(0.0, realMatrix0.getNorm(), 0.01);
      assertNotNull(realMatrix0);
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      assertEquals(1, doubleArray0.length);
      
      RealMatrix realMatrix0 = realMatrixImpl0.scalarMultiply(597.0);
      assertTrue(realMatrix0.equals((Object)realMatrixImpl0));
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertTrue(realMatrixImpl0.isSquare());
      assertEquals(0.0, realMatrixImpl0.getNorm(), 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertTrue(realMatrix0.isSquare());
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getColumnDimension());
      assertEquals(0.0, realMatrix0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrix0);
      assertEquals(1, doubleArray0.length);
      assertNotSame(realMatrixImpl0, realMatrix0);
      assertNotSame(realMatrix0, realMatrixImpl0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(1, 1);
      RealMatrix realMatrix0 = realMatrixImpl0.scalarAdd(1);
      assertTrue(realMatrixImpl0.isSquare());
      
      double double0 = realMatrix0.getDeterminant();
      assertEquals(1.0, double0, 0.01);
      
      RealMatrix realMatrix1 = realMatrix0.inverse();
      assertEquals(1.0, realMatrix1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[2][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1);
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray0);
      try { 
        realMatrixImpl0.subtract(realMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(1, 1);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      
      RealMatrix realMatrix0 = realMatrixImpl0.subtract(realMatrixImpl0);
      assertEquals(0.0, realMatrix0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      RealMatrix realMatrix0 = realMatrixImpl0.getIdentity(11);
      try { 
        realMatrixImpl0.subtract(realMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      RealMatrix realMatrix0 = realMatrixImpl0.getRowMatrix(0);
      try { 
        realMatrixImpl0.add(realMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      RealMatrix realMatrix0 = realMatrixImpl0.add(realMatrixImpl0);
      assertTrue(realMatrix0.equals((Object)realMatrixImpl0));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(519, 519);
      RealMatrixImpl realMatrixImpl1 = new RealMatrixImpl(doubleArray0);
      try { 
        realMatrixImpl0.add(realMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl(2007, (-2202));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be postive
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = null;
      try {
        realMatrixImpl0 = new RealMatrixImpl((-1233), (-1233));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be postive
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      // Undeclared exception!
      try { 
        realMatrixImpl0.getPermutation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      try { 
        realMatrixImpl0.preMultiply((RealMatrix) realMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrices are not multiplication compatible.
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      // Undeclared exception!
      try { 
        realMatrixImpl0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}

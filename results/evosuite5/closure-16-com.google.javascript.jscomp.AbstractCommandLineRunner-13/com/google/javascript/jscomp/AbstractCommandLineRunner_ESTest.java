/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 22:39:00 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Function;
import com.google.common.base.Supplier;
import com.google.javascript.jscomp.AbstractCommandLineRunner;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSModuleGraph;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.PhaseOptimizer;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceMap;
import java.io.BufferedWriter;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;
import java.util.Stack;
import java.util.Vector;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AbstractCommandLineRunner_ESTest extends AbstractCommandLineRunner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      Vector<String> vector0 = new Vector<String>();
      vector0.add("yTC,yM,]4");
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setOutputManifest(vector0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "com.google.javascript.jscomp.TightenTypes$PropertyAssignAction";
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.TightenTypes$PropertyAssignAction");
      JSModule[] jSModuleArray0 = new JSModule[1];
      JSModule jSModule0 = new JSModule("com.google.javascript.jscomp.TightenTypes$PropertyAssignAction");
      SourceFile sourceFile0 = SourceFile.fromCode("\"Ni1EP*`R+d", "\"Ni1EP*`R+d", "JSC_INVALID_DEFINE_INIT_ERROR");
      jSModule0.add(sourceFile0);
      jSModuleArray0[0] = jSModule0;
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph(jSModuleArray0);
      // Undeclared exception!
      try { 
        commandLineRunner0.printModuleGraphManifestOrBundleTo(jSModuleGraph0, mockPrintStream0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "com.google.javascript.jscomp.TightenTypes$PropertyAssignAction";
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.TightenTypes$PropertyAssignAction");
      JSModule[] jSModuleArray0 = new JSModule[1];
      JSModule jSModule0 = new JSModule("com.google.javascript.jscomp.TightenTypes$PropertyAssignAction");
      SourceFile sourceFile0 = SourceFile.fromCode("\"Ni1EP*`R+d", "\"Ni1EP*`R+d", "JSC_INVALID_DEFINE_INIT_ERROR");
      jSModule0.add(sourceFile0);
      jSModuleArray0[0] = jSModule0;
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph(jSModuleArray0);
      // Undeclared exception!
      try { 
        commandLineRunner0.printModuleGraphManifestOrBundleTo(jSModuleGraph0, mockPrintStream0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "com.google.javascript.jscomp.TightenTypes$PropertyAssignAction";
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.TightenTypes$PropertyAssignAction");
      JSModule[] jSModuleArray0 = new JSModule[1];
      JSModule jSModule0 = new JSModule("com.google.javascript.jscomp.TightenTypes$PropertyAssignAction");
      jSModuleArray0[0] = jSModule0;
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph(jSModuleArray0);
      commandLineRunner0.printModuleGraphManifestOrBundleTo(jSModuleGraph0, mockPrintStream0, true);
      assertTrue(commandLineRunner0.shouldRunCompiler());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "com.google.javascript.jscomp.TightenTypes$PropertyAssignAction";
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.TightenTypes$PropertyAssignAction");
      JSModule[] jSModuleArray0 = new JSModule[1];
      JSModule jSModule0 = new JSModule("com.google.javascript.jscomp.TightenTypes$PropertyAssignAction");
      jSModuleArray0[0] = jSModule0;
      JSModuleGraph jSModuleGraph0 = new JSModuleGraph(jSModuleArray0);
      commandLineRunner0.printModuleGraphManifestOrBundleTo(jSModuleGraph0, mockPrintStream0, false);
      assertTrue(commandLineRunner0.shouldRunCompiler());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".c8}497EL`U?@");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".c8}497EL`U?@";
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0, mockPrintStream0, mockPrintStream0);
      CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
      // Undeclared exception!
      try { 
        AbstractCommandLineRunner.createDefineOrTweakReplacements(arrayList0, compilerOptions0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // --tweak flag syntax invalid: 
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
      AbstractCommandLineRunner.createDefineOrTweakReplacements(list0, compilerOptions0, false);
      assertFalse(compilerOptions0.optimizeParameters);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      Stack<String> stack0 = new Stack<String>();
      CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
      stack0.add("");
      // Undeclared exception!
      try { 
        AbstractCommandLineRunner.createDefineOrTweakReplacements(stack0, compilerOptions0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // --define flag syntax invalid: 
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      AbstractCommandLineRunner.createDefineOrTweakReplacements(list0, compilerOptions0, true);
      assertFalse(compilerOptions0.deadAssignmentElimination);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      OutputStream outputStream0 = commandLineRunner0.filenameToOutputStream((String) null);
      assertNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      OutputStream outputStream0 = commandLineRunner0.filenameToOutputStream("ECMASCRIPT5_STRICT");
      assertNotNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Stack<JSModule> stack0 = new Stack<JSModule>();
      Charset charset0 = Charset.defaultCharset();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("Input variable map parse error: {0}", charset0);
      Result result0 = compiler0.compile((SourceFile) jSSourceFile0, (SourceFile) jSSourceFile0, compilerOptions0);
      int int0 = commandLineRunner0.processResults(result0, stack0, compilerOptions0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.TightenTypes$PropertyAssignAction");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(outputStreamWriter0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      AbstractCommandLineRunner.writeOutput(bufferedWriter0, compiler0, "com.google.javascript.jscomp.TightenTypes$PropertyAssignAction", "Pdpp4+&iIlte!2", "Pdpp4+&iIlte!2");
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".c8}497EL`U?@");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      AbstractCommandLineRunner.writeOutput(mockPrintStream0, (Compiler) null, "Pdpp4+&iIlte!2", ">uZ,*=", "");
      assertEquals(21L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.TightenTypes$PropertyAssignAction");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(outputStreamWriter0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      AbstractCommandLineRunner.writeOutput(bufferedWriter0, compiler0, "com.google.javascript.jscomp.TightenTypes$PropertyAssignAction", "US-ASCII", "com.google.javascript.jscomp.TightenTypes$PropertyAssignAction");
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "com.google.javascript.jscomp.TightenTypes$PropertyAssignAction";
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.TightenTypes$PropertyAssignAction");
      JSModule jSModule0 = new JSModule("com.google.javascript.jscomp.TightenTypes$PropertyAssignAction");
      // Undeclared exception!
      try { 
        commandLineRunner0.writeModuleOutput(mockPrintStream0, jSModule0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add(":\n");
      Vector<JSModule> vector0 = new Vector<JSModule>();
      try { 
        AbstractCommandLineRunner.parseModuleWrappers(arrayList0, vector0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown module: ''
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      List<String> list0 = PhaseOptimizer.OPTIMAL_ORDER;
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      try { 
        AbstractCommandLineRunner.parseModuleWrappers(list0, arrayList0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected module wrapper to have <name>:<wrapper> format: deadAssignmentsElimination
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Stack<JSModule> stack0 = new Stack<JSModule>();
      stack0.add((JSModule) null);
      // Undeclared exception!
      try { 
        AbstractCommandLineRunner.parseModuleWrappers(arrayList0, stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector<JSModule> vector0 = new Vector<JSModule>();
      // Undeclared exception!
      try { 
        AbstractCommandLineRunner.parseModuleWrappers((List<String>) null, vector0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = ";l ?=r\">(MV$62<;_";
      stringArray0[1] = " is not running.";
      stringArray0[2] = ";l ?=r\">(MV$62<;_";
      stringArray0[3] = "Summary:\n";
      stringArray0[4] = "ECMASCRIPT5";
      stringArray0[5] = "{%s%s}\n";
      stringArray0[6] = "ECMASCRIPT3";
      stringArray0[7] = "";
      stringArray0[8] = "ECMASCRIPT5";
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      commandLineRunner0.checkModuleName("ECMASCRIPT5");
      assertTrue(commandLineRunner0.shouldRunCompiler());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      List<String> list0 = PhaseOptimizer.OPTIMAL_ORDER;
      try { 
        commandLineRunner0.createJsModules(list0, list0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected 2-4 colon-delimited parts in module spec: deadAssignmentsElimination
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
      try { 
        commandLineRunner0.createJsModules(arrayList0, (List<String>) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      // Undeclared exception!
      try { 
        commandLineRunner0.createJsModules((List<String>) null, (List<String>) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "->`>G.";
      stringArray0[1] = "->`>G.";
      stringArray0[2] = "href";
      stringArray0[3] = "href";
      stringArray0[4] = "->`>G.";
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;
      List<SourceFile> list1 = commandLineRunner0.createInputs(list0, false);
      assertFalse(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "com.google.javascript.jscomp.TightenTypes$PropertyAssignAction";
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      Supplier<List<JSModule>> supplier0 = (Supplier<List<JSModule>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Function<Integer, Boolean> function0 = (Function<Integer, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(anyInt());
      commandLineRunner0.enableTestMode((Supplier<List<SourceFile>>) null, (Supplier<List<SourceFile>>) null, supplier0, function0);
      commandLineRunner0.run();
      assertTrue(commandLineRunner0.shouldRunCompiler());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      commandLineRunner0.setRunOptions(compilerOptions0);
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "->`>G.";
      stringArray0[1] = "->`>G.";
      stringArray0[2] = "href";
      stringArray0[3] = "href";
      stringArray0[4] = "->`>G.";
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      commandLineRunner0.setRunOptions(compilerOptions0);
      assertFalse(compilerOptions0.aliasKeywords);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      Function<Integer, Boolean> function0 = (Function<Integer, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        commandLineRunner0.enableTestMode((Supplier<List<SourceFile>>) null, (Supplier<List<SourceFile>>) null, (Supplier<List<JSModule>>) null, function0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      Supplier<List<SourceFile>> supplier0 = (Supplier<List<SourceFile>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<List<JSModule>> supplier1 = (Supplier<List<JSModule>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Function<Integer, Boolean> function0 = (Function<Integer, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        commandLineRunner0.enableTestMode(supplier0, supplier0, supplier1, function0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AbstractCommandLineRunner.WarningGuardSpec abstractCommandLineRunner_WarningGuardSpec0 = new AbstractCommandLineRunner.WarningGuardSpec();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      abstractCommandLineRunner_WarningGuardSpec0.add(checkLevel0, "");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "com.google.javascript.jscomp.TightenTypes$PropertyAssignAction";
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      // Undeclared exception!
      try { 
        commandLineRunner0.run();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      Logger logger0 = Logger.getAnonymousLogger();
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Result result0 = compiler0.getResult();
      Stack<JSModule> stack0 = new Stack<JSModule>();
      CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
      int int0 = commandLineRunner0.processResults(result0, stack0, compilerOptions0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "X%f%Bf}x";
      stringArray0[2] = "X%f%Bf}x";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("X%f%Bf}x");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0, mockPrintStream0, mockPrintStream0);
      Compiler compiler0 = commandLineRunner0.getCompiler();
      assertNull(compiler0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=dD:#ljG");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0, mockPrintStream0, mockPrintStream0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      commandLineRunner0.initOptionsFromFlags(compilerOptions0);
      assertFalse(compilerOptions0.exportTestFunctions);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      Compiler compiler0 = commandLineRunner0.createCompiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setSourceMapDetailLevel(sourceMap_DetailLevel0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setComputePhaseOrdering(false);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      // Undeclared exception!
      try { 
        abstractCommandLineRunner_CommandLineConfig0.setTweak((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      CompilerOptions.TweakProcessing compilerOptions_TweakProcessing0 = CompilerOptions.TweakProcessing.STRIP;
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setTweakProcessing(compilerOptions_TweakProcessing0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      Vector<String> vector0 = new Vector<String>();
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setManifestMaps(vector0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      Vector<String> vector0 = new Vector<String>();
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setOutputBundle(vector0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setSkipNormalOutputs(false);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add(":\n");
      String[] stringArray0 = new String[3];
      stringArray0[0] = ":\n";
      stringArray0[1] = ":\n";
      stringArray0[2] = ":\n";
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      try { 
        commandLineRunner0.createJsModules(arrayList0, arrayList0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid module name: ''
         //
         verifyException("com.google.javascript.jscomp.AbstractCommandLineRunner", e);
      }
  }
}

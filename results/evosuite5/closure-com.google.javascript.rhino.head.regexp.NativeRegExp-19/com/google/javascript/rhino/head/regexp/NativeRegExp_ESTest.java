/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 21 17:19:20 GMT 2019
 */

package com.google.javascript.rhino.head.regexp;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.Delegator;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.TopLevel;
import com.google.javascript.rhino.head.regexp.NativeRegExp;
import com.google.javascript.rhino.head.regexp.RegExpImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NativeRegExp_ESTest extends NativeRegExp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      
      int int0 = nativeRegExp0.findPrototypeId("toString");
      assertEquals(2, int0);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      
      int int0 = nativeRegExp0.findPrototypeId("toSource");
      assertEquals(3, int0);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      
      int int0 = nativeRegExp0.findPrototypeId("test");
      assertEquals(5, int0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, NativeRegExp.MATCH);
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("object", nativeRegExp0.getTypeOf());
      
      int int0 = nativeRegExp0.findPrototypeId("de^legee");
      assertEquals(0, int0);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, NativeRegExp.MATCH);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("object", nativeRegExp0.getTypeOf());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.isSealed());
      
      int int0 = nativeRegExp0.findPrototypeId("obj\"ect");
      assertEquals(0, int0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.isSealed());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      
      int int0 = nativeRegExp0.findPrototypeId("+Hr&-I");
      assertEquals(0, int0);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertTrue(nativeRegExp0.isEmpty());
      
      int int0 = nativeRegExp0.findPrototypeId("K^ntP");
      assertEquals(0, int0);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertTrue(nativeRegExp0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(nativeRegExp0);
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      
      int int0 = nativeRegExp0.findPrototypeId("goto");
      assertEquals(0, int0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Context context0 = Context.enter();
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertNotNull(context0);
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertNotNull(nativeRegExp0);
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeRegExp0, context0, 0, "language version", 140, nativeRegExp0);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(idFunctionObject0);
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals(140, idFunctionObject0.getArity());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertEquals(0, idFunctionObject0.methodId());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals("language version", idFunctionObject0.getFunctionName());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertFalse(idFunctionObject0.isSealed());
      assertTrue(idFunctionObject0.isExtensible());
      assertTrue(idFunctionObject0.isEmpty());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertEquals(140, idFunctionObject0.getLength());
      
      // Undeclared exception!
      try { 
        nativeRegExp0.execIdCall(idFunctionObject0, context0, idFunctionObject0, idFunctionObject0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeRegExp0);
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      
      // Undeclared exception!
      try { 
        nativeRegExp0.initPrototypeId(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.head.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      
      // Undeclared exception!
      try { 
        nativeRegExp0.initPrototypeId(6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      
      // Undeclared exception!
      try { 
        nativeRegExp0.initPrototypeId(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      
      // Undeclared exception!
      try { 
        nativeRegExp0.initPrototypeId(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isExtensible());
      
      // Undeclared exception!
      try { 
        nativeRegExp0.initPrototypeId(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      
      // Undeclared exception!
      try { 
        nativeRegExp0.initPrototypeId(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isEmpty());
      
      // Undeclared exception!
      try { 
        nativeRegExp0.initPrototypeId(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      
      // Undeclared exception!
      try { 
        nativeRegExp0.setInstanceIdValue(0, nativeRegExp0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeRegExp0);
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeContinuation0);
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isExtensible());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.isSealed());
      
      nativeRegExp0.setInstanceIdValue(4, nativeContinuation0);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isExtensible());
      assertTrue(nativeContinuation0.isEmpty());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertFalse(nativeContinuation0.isSealed());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test18()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      
      Context context0 = Context.getCurrentContext();
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertNotNull(context0);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      
      nativeRegExp0.setInstanceIdValue(3, context0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertNotNull(nativeRegExp0);
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      
      nativeRegExp0.setInstanceIdValue(2, nativeRegExp0);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      
      nativeRegExp0.setInstanceIdValue(5, nativeRegExp0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeContinuation0);
      assertFalse(nativeContinuation0.isSealed());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertTrue(nativeContinuation0.isEmpty());
      
      // Undeclared exception!
      try { 
        nativeRegExp0.setInstanceIdValue(1, nativeContinuation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(nativeRegExp0);
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      
      Context context0 = new Context();
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertNotNull(context0);
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      
      NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile(context0, nativeRegExp0, context0.emptyArgs);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(nativeRegExp1);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(nativeRegExp1.hasPrototypeMap());
      assertFalse(nativeRegExp1.isSealed());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      assertEquals("object", nativeRegExp1.getTypeOf());
      assertFalse(nativeRegExp1.avoidObjectDetection());
      assertTrue(nativeRegExp1.isEmpty());
      assertTrue(nativeRegExp1.isExtensible());
      
      Boolean boolean0 = (Boolean)nativeRegExp1.getInstanceIdValue(4);
      assertFalse(boolean0);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(boolean0);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(nativeRegExp1.hasPrototypeMap());
      assertFalse(nativeRegExp1.isSealed());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      assertEquals("object", nativeRegExp1.getTypeOf());
      assertFalse(nativeRegExp1.avoidObjectDetection());
      assertTrue(nativeRegExp1.isEmpty());
      assertTrue(nativeRegExp1.isExtensible());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      
      Context context0 = new Context();
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertNotNull(context0);
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      
      NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile(context0, (Scriptable) null, context0.emptyArgs);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeRegExp1);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(nativeRegExp1.avoidObjectDetection());
      assertTrue(nativeRegExp1.isEmpty());
      assertTrue(nativeRegExp1.isExtensible());
      assertFalse(nativeRegExp1.hasPrototypeMap());
      assertFalse(nativeRegExp1.isSealed());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      assertEquals("object", nativeRegExp1.getTypeOf());
      
      Boolean boolean0 = (Boolean)nativeRegExp0.getInstanceIdValue(3);
      assertFalse(boolean0);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertNotNull(boolean0);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeRegExp0);
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      
      // Undeclared exception!
      try { 
        nativeRegExp0.getInstanceIdValue(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeRegExp0);
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      
      // Undeclared exception!
      try { 
        nativeRegExp0.getInstanceIdValue(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      
      // Undeclared exception!
      try { 
        nativeRegExp0.getInstanceIdValue(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeRegExp0);
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      
      Object object0 = nativeRegExp0.getInstanceIdValue(1);
      assertEquals(0.0, object0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(object0);
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeRegExp0);
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertFalse(nativeRegExp0.isSealed());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      
      // Undeclared exception!
      try { 
        nativeRegExp0.getInstanceIdName(90);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 90
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertTrue(nativeRegExp0.isEmpty());
      
      Context context0 = new Context();
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertNotNull(context0);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      
      NativeRegExp nativeRegExp1 = (NativeRegExp)context0.initStandardObjects((ScriptableObject) nativeRegExp0);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeRegExp1);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertFalse(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      assertFalse(nativeRegExp1.isSealed());
      assertFalse(nativeRegExp1.hasPrototypeMap());
      assertTrue(nativeRegExp1.isExtensible());
      assertFalse(nativeRegExp1.avoidObjectDetection());
      assertFalse(nativeRegExp1.isEmpty());
      assertEquals("object", nativeRegExp1.getTypeOf());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      
      Context context0 = new Context();
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      
      NativeRegExp nativeRegExp1 = (NativeRegExp)nativeRegExp0.compile(context0, (Scriptable) null, context0.emptyArgs);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeRegExp1);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertTrue(nativeRegExp1.isEmpty());
      assertFalse(nativeRegExp1.isSealed());
      assertFalse(nativeRegExp1.avoidObjectDetection());
      assertTrue(nativeRegExp1.isExtensible());
      assertEquals("object", nativeRegExp1.getTypeOf());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      assertFalse(nativeRegExp1.hasPrototypeMap());
      
      RegExpImpl regExpImpl0 = new RegExpImpl();
      assertNotNull(regExpImpl0);
      
      int[] intArray0 = new int[6];
      Boolean boolean0 = (Boolean)nativeRegExp0.executeRegExp(context0, nativeRegExp1, regExpImpl0, "error reporter", intArray0, 0);
      assertTrue(boolean0);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(6, intArray0.length);
      assertNotNull(boolean0);
      assertSame(nativeRegExp0, nativeRegExp1);
      assertSame(nativeRegExp1, nativeRegExp0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertTrue(nativeRegExp1.isEmpty());
      assertFalse(nativeRegExp1.isSealed());
      assertFalse(nativeRegExp1.avoidObjectDetection());
      assertTrue(nativeRegExp1.isExtensible());
      assertEquals("object", nativeRegExp1.getTypeOf());
      assertEquals("RegExp", nativeRegExp1.getClassName());
      assertFalse(nativeRegExp1.hasPrototypeMap());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeRegExp0);
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertTrue(nativeRegExp0.isExtensible());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      assertTrue(nativeRegExp0.isEmpty());
      
      Context context0 = Context.enter();
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      
      RegExpImpl regExpImpl0 = new RegExpImpl();
      assertNotNull(regExpImpl0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 11;
      // Undeclared exception!
      try { 
        nativeRegExp0.executeRegExp(context0, nativeRegExp0, regExpImpl0, "7^PHj:k", intArray0, 130);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Context context0 = Context.enter();
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertNotNull(context0);
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      
      Object object0 = NativeRegExp.compileRE(context0, "@9:ac*", (String) null, false);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertNotNull(object0);
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Context context0 = Context.enter();
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertNotNull(context0);
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      
      // Undeclared exception!
      try { 
        NativeRegExp.compileRE(context0, "<HRKh8Hg:-[XVPui\"", (String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: Unterminated character class 
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test34()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertNotNull(context0);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      
      Object object0 = NativeRegExp.compileRE(context0, "L#Z+N?\f", "", false);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertNotNull(object0);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      
      Context context0 = contextFactory0.enterContext();
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertNotNull(context0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      
      // Undeclared exception!
      try { 
        NativeRegExp.compileRE(context0, "?=A ]ciD;-", (String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: Invalid quantifier ?
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Context context0 = new Context();
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      
      // Undeclared exception!
      try { 
        NativeRegExp.compileRE(context0, ")B!f,/G[Pvgj~tT", (String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: unmatched ) in regular expression.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Context context0 = Context.enter();
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertNotNull(context0);
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      
      // Undeclared exception!
      try { 
        NativeRegExp.compileRE(context0, "ry$eE'Ls[%z}/M`$}U", (String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: Unterminated character class 
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Context context0 = new Context();
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertNotNull(context0);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      
      Object object0 = NativeRegExp.compileRE(context0, "()I", "", false);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertNotNull(object0);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Context context0 = new Context();
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      
      Object object0 = NativeRegExp.compileRE(context0, "KAy|v46%}0j0==", (String) null, false);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertNotNull(object0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Context context0 = Context.enter();
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      
      Object object0 = NativeRegExp.compileRE(context0, "i~A\\11_LYw+B]", "", false);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertNotNull(object0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      Context context0 = contextFactory0.enter();
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertNotNull(context0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      
      Object object0 = NativeRegExp.compileRE(context0, "}n'-,yXGBV{g", "", false);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertNotNull(object0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = NativeRegExp.isDigit('!');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Context context0 = new Context();
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertNotNull(context0);
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      
      Object object0 = NativeRegExp.compileRE(context0, "msg.bad.range", "i", false);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertNotNull(object0);
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Context context0 = new Context();
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      
      Object object0 = NativeRegExp.compileRE(context0, "[object Call]", (String) null, false);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertNotNull(object0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      assertEquals(1, NativeRegExp.JSREG_GLOB);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, NativeRegExp.TEST);
      assertEquals(2, NativeRegExp.PREFIX);
      assertEquals(4, NativeRegExp.JSREG_MULTILINE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, NativeRegExp.JSREG_FOLD);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, NativeRegExp.MATCH);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(nativeRegExp0);
      assertTrue(nativeRegExp0.isEmpty());
      assertFalse(nativeRegExp0.isSealed());
      assertFalse(nativeRegExp0.avoidObjectDetection());
      assertTrue(nativeRegExp0.isExtensible());
      assertFalse(nativeRegExp0.hasPrototypeMap());
      assertEquals("object", nativeRegExp0.getTypeOf());
      assertEquals("RegExp", nativeRegExp0.getClassName());
      
      Context context0 = new Context();
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) nativeRegExp0;
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(importerTopLevel0);
      assertTrue(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.isSealed());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals("object", importerTopLevel0.getTypeOf());
      
      // Undeclared exception!
      try { 
        nativeRegExp0.compile(context0, importerTopLevel0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Only one argument may be specified if the first argument to RegExp.prototype.compile is a RegExp object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        nativeRegExp0.construct(context0, (Scriptable) null, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      String string0 = nativeRegExp0.getClassName();
      assertEquals("RegExp", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      Object[] objectArray0 = nativeRegExp0.getAllIds();
      Delegator delegator0 = new Delegator();
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        nativeRegExp0.compile(context0, delegator0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: invalid flag after regular expression
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod((Scriptable) nativeRegExp0, "]}&", (Object[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000002 is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NativeRegExp nativeRegExp0 = new NativeRegExp();
      // Undeclared exception!
      try { 
        nativeRegExp0.getFlags();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Context context0 = new Context();
      String string0 = "~1Ds\\um11Pq";
      Object object0 = NativeRegExp.compileRE(context0, string0, "", false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      NativeRegExp nativeRegExp0 = null;
      try {
        nativeRegExp0 = new NativeRegExp(topLevel0, topLevel0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.javascript.rhino.head.TopLevel cannot be cast to com.google.javascript.rhino.head.regexp.RECompiled
         //
         verifyException("com.google.javascript.rhino.head.regexp.NativeRegExp", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        NativeRegExp.compileRE(context0, "3hW9tn^sn(qd/", (String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: Unterminated parenthetical 
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }
}

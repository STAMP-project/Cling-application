/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 21:41:51 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Minutes;
import org.joda.time.MutableInterval;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.chrono.IslamicChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MutableInterval_ESTest extends MutableInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      Seconds seconds0 = Seconds.MAX_VALUE;
      mutableInterval0.setPeriodBeforeEnd(seconds0);
      assertEquals((-755074365680L), mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      mutableInterval0.setPeriodAfterStart((ReadablePeriod) null);
      assertEquals(1392409281320L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, (ReadablePeriod) null);
      mutableInterval0.setInterval((ReadableInstant) null, (ReadableInstant) null);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, (ReadablePeriod) null);
      mutableInterval0.setInterval((ReadableInstant) null, (ReadableInstant) dateTime0);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      // Undeclared exception!
      try { 
        mutableInterval0.setInterval((ReadableInterval) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Interval must not be null
         //
         verifyException("org.joda.time.MutableInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      mutableInterval0.setInterval((ReadableInterval) mutableInterval0);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      assertEquals(0L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      Duration duration0 = Duration.standardDays(0L);
      mutableInterval0.setDurationAfterStart((ReadableDuration) duration0);
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Minutes minutes0 = Minutes.ONE;
      Seconds seconds0 = minutes0.toStandardSeconds();
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, seconds0);
      mutableInterval0.setDurationAfterStart(0L);
      assertEquals(1392409281320L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, (ReadablePeriod) null);
      mutableInterval0.setEnd((ReadableInstant) null);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Minutes minutes0 = Minutes.ONE;
      Seconds seconds0 = minutes0.toStandardSeconds();
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, seconds0);
      Duration duration0 = Duration.standardMinutes(10000000000L);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      assertEquals((-598607590658680L), mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Days days0 = Days.days(0);
      DateMidnight dateMidnight0 = DateMidnight.now();
      MutableInterval mutableInterval0 = new MutableInterval(days0, dateMidnight0);
      assertEquals(1392332400000L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((Object) null);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      MutableInterval mutableInterval0 = new MutableInterval(duration0, (ReadableInstant) null);
      mutableInterval0.setStart((ReadableInstant) null);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Minutes minutes0 = Minutes.ONE;
      Seconds seconds0 = minutes0.toStandardSeconds();
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, seconds0);
      mutableInterval0.setDurationBeforeEnd((long) 76881320);
      assertEquals(1392332460000L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      Duration duration0 = Duration.standardDays(0L);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, duration0);
      assertEquals(1392409281320L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Minutes minutes0 = Minutes.ONE;
      Seconds seconds0 = minutes0.toStandardSeconds();
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, seconds0);
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      assertTrue(mutableInterval1.equals((Object)mutableInterval0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      MutableInterval mutableInterval0 = null;
      try {
        mutableInterval0 = new MutableInterval(integer0, islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No interval converter found for type: java.lang.Integer
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableInterval.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: 
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Minutes minutes0 = Minutes.ONE;
      Seconds seconds0 = minutes0.toStandardSeconds();
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, seconds0);
      mutableInterval0.setPeriodAfterStart(seconds0);
      assertEquals(1392409341320L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(76881320, 21260793600000L);
      mutableInterval0.setPeriodBeforeEnd((ReadablePeriod) null);
      assertEquals(21260793600000L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, (ReadablePeriod) null);
      MutableInterval mutableInterval1 = mutableInterval0.toMutableInterval();
      assertTrue(mutableInterval1.equals((Object)mutableInterval0));
  }
}

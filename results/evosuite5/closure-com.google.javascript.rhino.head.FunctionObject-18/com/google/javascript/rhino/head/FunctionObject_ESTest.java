/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 22:20:20 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.BoundFunction;
import com.google.javascript.rhino.head.ConsString;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.Script;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.TopLevel;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionObject_ESTest extends FunctionObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test00()  throws Throwable  {
      Class<ConsString> class0 = ConsString.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertNotNull(methodArray0);
      assertEquals(5, methodArray0.length);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      assertNotNull(method0);
      assertEquals("toString", method0.getName());
      assertFalse(method0.isSynthetic());
      assertEquals("public java.lang.String com.google.javascript.rhino.head.ConsString.toString()", method0.toString());
      assertFalse(method0.isVarArgs());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isBridge());
      assertFalse(method0.isAccessible());
      assertEquals(5, methodArray0.length);
      
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      
      FunctionObject functionObject0 = new FunctionObject("language version", method0, nativeError0);
      assertNotNull(functionObject0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals("toString", method0.getName());
      assertFalse(method0.isSynthetic());
      assertEquals("public java.lang.String com.google.javascript.rhino.head.ConsString.toString()", method0.toString());
      assertFalse(method0.isVarArgs());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isBridge());
      assertFalse(method0.isAccessible());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(functionObject0.isSealed());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals("language version", functionObject0.getFunctionName());
      assertEquals(0, functionObject0.getLength());
      assertEquals(0, functionObject0.getArity());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals("Function", functionObject0.getClassName());
      assertTrue(functionObject0.isExtensible());
      assertFalse(functionObject0.avoidObjectDetection());
      assertTrue(functionObject0.isEmpty());
      assertEquals(5, methodArray0.length);
      
      boolean boolean0 = functionObject0.isVarArgsConstructor();
      assertFalse(boolean0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals("toString", method0.getName());
      assertFalse(method0.isSynthetic());
      assertEquals("public java.lang.String com.google.javascript.rhino.head.ConsString.toString()", method0.toString());
      assertFalse(method0.isVarArgs());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isBridge());
      assertFalse(method0.isAccessible());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertEquals("Error", nativeError0.getClassName());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertFalse(functionObject0.isSealed());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals("language version", functionObject0.getFunctionName());
      assertEquals(0, functionObject0.getLength());
      assertEquals(0, functionObject0.getArity());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals("Function", functionObject0.getClassName());
      assertTrue(functionObject0.isExtensible());
      assertFalse(functionObject0.avoidObjectDetection());
      assertTrue(functionObject0.isEmpty());
      assertEquals(5, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<NativeObject> class0 = NativeObject.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertNotNull(methodArray0);
      assertEquals(12, methodArray0.length);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      assertNotNull(method0);
      assertEquals("public java.lang.String com.google.javascript.rhino.head.NativeObject.toString()", method0.toString());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isVarArgs());
      assertEquals("toString", method0.getName());
      assertFalse(method0.isAccessible());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isBridge());
      assertEquals(12, methodArray0.length);
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.isSealed());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      
      FunctionObject functionObject0 = new FunctionObject("error reporter", method0, nativeError0);
      assertNotNull(functionObject0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals("public java.lang.String com.google.javascript.rhino.head.NativeObject.toString()", method0.toString());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isVarArgs());
      assertEquals("toString", method0.getName());
      assertFalse(method0.isAccessible());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isBridge());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.isSealed());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals("Function", functionObject0.getClassName());
      assertEquals("error reporter", functionObject0.getFunctionName());
      assertFalse(functionObject0.avoidObjectDetection());
      assertFalse(functionObject0.isSealed());
      assertTrue(functionObject0.isEmpty());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals(0, functionObject0.getLength());
      assertEquals(0, functionObject0.getArity());
      assertTrue(functionObject0.isExtensible());
      assertEquals(12, methodArray0.length);
      
      NativeObject nativeObject0 = (NativeObject)functionObject0.createObject(context0, nativeError0);
      assertNotNull(nativeObject0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("public java.lang.String com.google.javascript.rhino.head.NativeObject.toString()", method0.toString());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isVarArgs());
      assertEquals("toString", method0.getName());
      assertFalse(method0.isAccessible());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isBridge());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.avoidObjectDetection());
      assertFalse(nativeError0.isSealed());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(nativeError0.isEmpty());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals("Function", functionObject0.getClassName());
      assertEquals("error reporter", functionObject0.getFunctionName());
      assertFalse(functionObject0.avoidObjectDetection());
      assertFalse(functionObject0.isSealed());
      assertTrue(functionObject0.isEmpty());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals(0, functionObject0.getLength());
      assertEquals(0, functionObject0.getArity());
      assertTrue(functionObject0.isExtensible());
      assertTrue(nativeObject0.isEmpty());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals(12, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      assertNotNull(topLevel0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertFalse(topLevel0.avoidObjectDetection());
      assertEquals("global", topLevel0.getClassName());
      assertTrue(topLevel0.isExtensible());
      assertFalse(topLevel0.isSealed());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertTrue(topLevel0.isEmpty());
      
      Class<NativeObject> class0 = NativeObject.class;
      FunctionObject functionObject0 = (FunctionObject)ScriptableObject.buildClassCtor((Scriptable) topLevel0, class0, true, true);
      assertNotNull(functionObject0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(topLevel0.avoidObjectDetection());
      assertEquals("global", topLevel0.getClassName());
      assertTrue(topLevel0.isExtensible());
      assertFalse(topLevel0.isSealed());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertTrue(topLevel0.isEmpty());
      assertEquals("Function", functionObject0.getClassName());
      assertEquals(0, functionObject0.getLength());
      assertFalse(functionObject0.avoidObjectDetection());
      assertTrue(functionObject0.isSealed());
      assertTrue(functionObject0.isEmpty());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals("Object", functionObject0.getFunctionName());
      assertEquals("function", functionObject0.getTypeOf());
      assertTrue(functionObject0.isExtensible());
      assertEquals(0, functionObject0.getArity());
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(6, Context.FEATURE_E4X);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      
      Scriptable scriptable0 = functionObject0.createObject(context0, topLevel0);
      assertNull(scriptable0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(6, Context.FEATURE_E4X);
      assertFalse(topLevel0.avoidObjectDetection());
      assertEquals("global", topLevel0.getClassName());
      assertTrue(topLevel0.isExtensible());
      assertFalse(topLevel0.isSealed());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertTrue(topLevel0.isEmpty());
      assertEquals("Function", functionObject0.getClassName());
      assertEquals(0, functionObject0.getLength());
      assertFalse(functionObject0.avoidObjectDetection());
      assertTrue(functionObject0.isSealed());
      assertTrue(functionObject0.isEmpty());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals("Object", functionObject0.getFunctionName());
      assertEquals("function", functionObject0.getTypeOf());
      assertTrue(functionObject0.isExtensible());
      assertEquals(0, functionObject0.getArity());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test03()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      assertNotNull(topLevel0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertTrue(topLevel0.isExtensible());
      assertEquals("global", topLevel0.getClassName());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertFalse(topLevel0.avoidObjectDetection());
      assertTrue(topLevel0.isEmpty());
      assertFalse(topLevel0.isSealed());
      
      Class<NativeObject> class0 = NativeObject.class;
      FunctionObject functionObject0 = (FunctionObject)ScriptableObject.buildClassCtor((Scriptable) topLevel0, class0, true, true);
      assertNotNull(functionObject0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(topLevel0.isExtensible());
      assertEquals("global", topLevel0.getClassName());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertFalse(topLevel0.avoidObjectDetection());
      assertTrue(topLevel0.isEmpty());
      assertFalse(topLevel0.isSealed());
      assertFalse(functionObject0.hasPrototypeMap());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("Object", functionObject0.getFunctionName());
      assertEquals("Function", functionObject0.getClassName());
      assertEquals(0, functionObject0.getArity());
      assertEquals("function", functionObject0.getTypeOf());
      assertTrue(functionObject0.isEmpty());
      assertTrue(functionObject0.isExtensible());
      assertEquals(0, functionObject0.getLength());
      assertTrue(functionObject0.isSealed());
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      
      // Undeclared exception!
      try { 
        functionObject0.call(context0, topLevel0, topLevel0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test04()  throws Throwable  {
      Class<ConsString> class0 = ConsString.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertNotNull(methodArray0);
      assertEquals(5, methodArray0.length);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      assertNotNull(method0);
      assertEquals("toString", method0.getName());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isBridge());
      assertFalse(method0.isVarArgs());
      assertEquals("public java.lang.String com.google.javascript.rhino.head.ConsString.toString()", method0.toString());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isSynthetic());
      assertEquals(5, methodArray0.length);
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.isSealed());
      
      FunctionObject functionObject0 = new FunctionObject("language version", method0, nativeError0);
      assertNotNull(functionObject0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals("toString", method0.getName());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isBridge());
      assertFalse(method0.isVarArgs());
      assertEquals("public java.lang.String com.google.javascript.rhino.head.ConsString.toString()", method0.toString());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isSynthetic());
      assertEquals("Error", nativeError0.getClassName());
      assertFalse(nativeError0.avoidObjectDetection());
      assertTrue(nativeError0.isEmpty());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isExtensible());
      assertFalse(nativeError0.isSealed());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("Function", functionObject0.getClassName());
      assertEquals(0, functionObject0.getLength());
      assertEquals("language version", functionObject0.getFunctionName());
      assertEquals(0, functionObject0.getArity());
      assertTrue(functionObject0.isExtensible());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals("function", functionObject0.getTypeOf());
      assertFalse(functionObject0.isSealed());
      assertTrue(functionObject0.isEmpty());
      assertEquals(5, methodArray0.length);
      
      NativeArray nativeArray0 = new NativeArray(methodArray0);
      assertNotNull(nativeArray0);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertFalse(nativeArray0.isSealed());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(5L, nativeArray0.getLength());
      assertEquals("Array", nativeArray0.getClassName());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertEquals(5L, nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isExtensible());
      assertEquals(5, methodArray0.length);
      
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeArray0, nativeArray0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test05()  throws Throwable  {
      Class<ConsString> class0 = ConsString.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertNotNull(methodArray0);
      assertEquals(5, methodArray0.length);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      assertNotNull(method0);
      assertFalse(method0.isBridge());
      assertEquals("toString", method0.getName());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isAccessible());
      assertEquals("public java.lang.String com.google.javascript.rhino.head.ConsString.toString()", method0.toString());
      assertFalse(method0.isVarArgs());
      assertEquals(5, methodArray0.length);
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      
      NativeError nativeError0 = new NativeError();
      assertNotNull(nativeError0);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      
      FunctionObject functionObject0 = new FunctionObject("language version", method0, nativeError0);
      assertNotNull(functionObject0);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertFalse(method0.isBridge());
      assertEquals("toString", method0.getName());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isAccessible());
      assertEquals("public java.lang.String com.google.javascript.rhino.head.ConsString.toString()", method0.toString());
      assertFalse(method0.isVarArgs());
      assertTrue(nativeError0.isExtensible());
      assertEquals("object", nativeError0.getTypeOf());
      assertFalse(nativeError0.hasPrototypeMap());
      assertTrue(nativeError0.isEmpty());
      assertFalse(nativeError0.isSealed());
      assertFalse(nativeError0.avoidObjectDetection());
      assertEquals("Error", nativeError0.getClassName());
      assertTrue(functionObject0.isExtensible());
      assertEquals(0, functionObject0.getArity());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals(0, functionObject0.getLength());
      assertTrue(functionObject0.isEmpty());
      assertFalse(functionObject0.isSealed());
      assertEquals("Function", functionObject0.getClassName());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("language version", functionObject0.getFunctionName());
      assertEquals(5, methodArray0.length);
      
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeError0, nativeError0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"language version\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test06()  throws Throwable  {
      Class<ConsString> class0 = ConsString.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertNotNull(methodArray0);
      assertEquals(5, methodArray0.length);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      assertNotNull(method0);
      assertFalse(method0.isSynthetic());
      assertEquals("public java.lang.String com.google.javascript.rhino.head.ConsString.toString()", method0.toString());
      assertFalse(method0.isVarArgs());
      assertEquals("toString", method0.getName());
      assertFalse(method0.isBridge());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isAccessible());
      assertEquals(5, methodArray0.length);
      
      BaseFunction baseFunction0 = new BaseFunction();
      assertNotNull(baseFunction0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("function", baseFunction0.getTypeOf());
      assertTrue(baseFunction0.isExtensible());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertTrue(baseFunction0.isEmpty());
      assertFalse(baseFunction0.isSealed());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertEquals("Function", baseFunction0.getClassName());
      
      Class<NativeObject> class1 = NativeObject.class;
      FunctionObject functionObject0 = (FunctionObject)ScriptableObject.buildClassCtor((Scriptable) baseFunction0, class1, true, false);
      assertNotNull(functionObject0);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals("function", baseFunction0.getTypeOf());
      assertTrue(baseFunction0.isExtensible());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertTrue(baseFunction0.isEmpty());
      assertFalse(baseFunction0.isSealed());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertEquals("Function", baseFunction0.getClassName());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals("function", functionObject0.getTypeOf());
      assertTrue(functionObject0.isExtensible());
      assertEquals(0, functionObject0.getArity());
      assertEquals("Object", functionObject0.getFunctionName());
      assertEquals(0, functionObject0.getLength());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("Function", functionObject0.getClassName());
      assertTrue(functionObject0.isSealed());
      assertTrue(functionObject0.isEmpty());
      
      Context context0 = Context.getCurrentContext();
      assertNotNull(context0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      
      FunctionObject functionObject1 = new FunctionObject("toString", method0, baseFunction0);
      assertNotNull(functionObject1);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertFalse(method0.isSynthetic());
      assertEquals("public java.lang.String com.google.javascript.rhino.head.ConsString.toString()", method0.toString());
      assertFalse(method0.isVarArgs());
      assertEquals("toString", method0.getName());
      assertFalse(method0.isBridge());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isAccessible());
      assertEquals("function", baseFunction0.getTypeOf());
      assertTrue(baseFunction0.isExtensible());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertTrue(baseFunction0.isEmpty());
      assertFalse(baseFunction0.isSealed());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertEquals("Function", baseFunction0.getClassName());
      assertFalse(functionObject1.hasPrototypeMap());
      assertFalse(functionObject1.isSealed());
      assertFalse(functionObject1.avoidObjectDetection());
      assertEquals("Function", functionObject1.getClassName());
      assertEquals(0, functionObject1.getArity());
      assertEquals("toString", functionObject1.getFunctionName());
      assertEquals("function", functionObject1.getTypeOf());
      assertTrue(functionObject1.isEmpty());
      assertTrue(functionObject1.isExtensible());
      assertEquals(0, functionObject1.getLength());
      assertFalse(functionObject1.equals((Object)functionObject0));
      assertEquals(5, methodArray0.length);
      
      // Undeclared exception!
      try { 
        functionObject1.call(context0, baseFunction0, functionObject0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"toString\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test07()  throws Throwable  {
      Class<ConsString> class0 = ConsString.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertNotNull(methodArray0);
      assertEquals(5, methodArray0.length);
      
      BaseFunction baseFunction0 = new BaseFunction();
      assertNotNull(baseFunction0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertFalse(baseFunction0.hasPrototypeMap());
      assertTrue(baseFunction0.isEmpty());
      assertFalse(baseFunction0.isSealed());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertEquals("Function", baseFunction0.getClassName());
      assertEquals("function", baseFunction0.getTypeOf());
      assertTrue(baseFunction0.isExtensible());
      
      Class<NativeObject> class1 = NativeObject.class;
      FunctionObject functionObject0 = (FunctionObject)ScriptableObject.buildClassCtor((Scriptable) baseFunction0, class1, true, false);
      assertNotNull(functionObject0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertFalse(baseFunction0.hasPrototypeMap());
      assertTrue(baseFunction0.isEmpty());
      assertFalse(baseFunction0.isSealed());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertEquals("Function", baseFunction0.getClassName());
      assertEquals("function", baseFunction0.getTypeOf());
      assertTrue(baseFunction0.isExtensible());
      assertEquals("Object", functionObject0.getFunctionName());
      assertTrue(functionObject0.isEmpty());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("Function", functionObject0.getClassName());
      assertEquals(0, functionObject0.getArity());
      assertEquals("function", functionObject0.getTypeOf());
      assertTrue(functionObject0.isSealed());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals(0, functionObject0.getLength());
      assertTrue(functionObject0.isExtensible());
      
      Context context0 = Context.getCurrentContext();
      assertNotNull(context0);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      
      NativeObject nativeObject0 = (NativeObject)functionObject0.call(context0, baseFunction0, functionObject0, methodArray0);
      assertNotNull(nativeObject0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertFalse(baseFunction0.hasPrototypeMap());
      assertTrue(baseFunction0.isEmpty());
      assertFalse(baseFunction0.isSealed());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertEquals("Function", baseFunction0.getClassName());
      assertEquals("function", baseFunction0.getTypeOf());
      assertTrue(baseFunction0.isExtensible());
      assertEquals("Object", functionObject0.getFunctionName());
      assertTrue(functionObject0.isEmpty());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("Function", functionObject0.getClassName());
      assertEquals(0, functionObject0.getArity());
      assertEquals("function", functionObject0.getTypeOf());
      assertTrue(functionObject0.isSealed());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals(0, functionObject0.getLength());
      assertTrue(functionObject0.isExtensible());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertTrue(nativeObject0.isExtensible());
      assertTrue(nativeObject0.isEmpty());
      assertEquals(5, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertFalse(context0.generateObserverCount);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) null, (Object) context0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't convert to type \"java.lang.reflect.Method\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Method[] methodArray0 = new Method[1];
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "setIn");
      assertNull(method0);
      assertEquals(1, methodArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test10()  throws Throwable  {
      Class<ConsString> class0 = ConsString.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertNotNull(methodArray0);
      assertEquals(5, methodArray0.length);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      assertNotNull(method0);
      assertFalse(method0.isBridge());
      assertEquals(1, method0.getModifiers());
      assertEquals("toString", method0.getName());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isSynthetic());
      assertEquals("public java.lang.String com.google.javascript.rhino.head.ConsString.toString()", method0.toString());
      assertEquals(5, methodArray0.length);
      
      Class<NativeObject> class1 = NativeObject.class;
      NativeObject nativeObject0 = new NativeObject();
      assertNotNull(nativeObject0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isEmpty());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.isSealed());
      assertTrue(nativeObject0.isExtensible());
      
      FunctionObject functionObject0 = (FunctionObject)ScriptableObject.buildClassCtor((Scriptable) nativeObject0, class1, true, true);
      assertNotNull(functionObject0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isEmpty());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.isSealed());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", functionObject0.getFunctionName());
      assertTrue(functionObject0.isEmpty());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("Function", functionObject0.getClassName());
      assertEquals(0, functionObject0.getArity());
      assertTrue(functionObject0.isSealed());
      assertEquals(0, functionObject0.getLength());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals("function", functionObject0.getTypeOf());
      assertTrue(functionObject0.isExtensible());
      
      FunctionObject functionObject1 = new FunctionObject("toString", method0, functionObject0);
      assertNotNull(functionObject1);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(method0.isBridge());
      assertEquals(1, method0.getModifiers());
      assertEquals("toString", method0.getName());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isSynthetic());
      assertEquals("public java.lang.String com.google.javascript.rhino.head.ConsString.toString()", method0.toString());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isEmpty());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.isSealed());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", functionObject0.getFunctionName());
      assertTrue(functionObject0.isEmpty());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("Function", functionObject0.getClassName());
      assertEquals(0, functionObject0.getArity());
      assertTrue(functionObject0.isSealed());
      assertEquals(0, functionObject0.getLength());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals("function", functionObject0.getTypeOf());
      assertTrue(functionObject0.isExtensible());
      assertFalse(functionObject1.hasPrototypeMap());
      assertEquals("function", functionObject1.getTypeOf());
      assertEquals("toString", functionObject1.getFunctionName());
      assertTrue(functionObject1.isEmpty());
      assertTrue(functionObject1.isExtensible());
      assertEquals(0, functionObject1.getLength());
      assertFalse(functionObject1.avoidObjectDetection());
      assertEquals("Function", functionObject1.getClassName());
      assertEquals(0, functionObject1.getArity());
      assertFalse(functionObject1.isSealed());
      assertFalse(functionObject1.equals((Object)functionObject0));
      assertEquals(5, methodArray0.length);
      
      Method method1 = (Method)functionObject1.getMethodOrConstructor();
      assertNotNull(method1);
      assertSame(method0, method1);
      assertNotSame(functionObject0, functionObject1);
      assertNotSame(functionObject1, functionObject0);
      assertSame(method1, method0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(method0.isBridge());
      assertEquals(1, method0.getModifiers());
      assertEquals("toString", method0.getName());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isSynthetic());
      assertEquals("public java.lang.String com.google.javascript.rhino.head.ConsString.toString()", method0.toString());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertTrue(nativeObject0.isEmpty());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.isSealed());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", functionObject0.getFunctionName());
      assertTrue(functionObject0.isEmpty());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("Function", functionObject0.getClassName());
      assertEquals(0, functionObject0.getArity());
      assertTrue(functionObject0.isSealed());
      assertEquals(0, functionObject0.getLength());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals("function", functionObject0.getTypeOf());
      assertTrue(functionObject0.isExtensible());
      assertFalse(functionObject1.hasPrototypeMap());
      assertEquals("function", functionObject1.getTypeOf());
      assertEquals("toString", functionObject1.getFunctionName());
      assertTrue(functionObject1.isEmpty());
      assertTrue(functionObject1.isExtensible());
      assertEquals(0, functionObject1.getLength());
      assertFalse(functionObject1.avoidObjectDetection());
      assertEquals("Function", functionObject1.getClassName());
      assertEquals(0, functionObject1.getArity());
      assertFalse(functionObject1.isSealed());
      assertFalse(method1.isBridge());
      assertEquals(1, method1.getModifiers());
      assertEquals("toString", method1.getName());
      assertFalse(method1.isVarArgs());
      assertEquals("public java.lang.String com.google.javascript.rhino.head.ConsString.toString()", method1.toString());
      assertFalse(method1.isAccessible());
      assertFalse(method1.isSynthetic());
      assertFalse(functionObject0.equals((Object)functionObject1));
      assertFalse(functionObject1.equals((Object)functionObject0));
      assertEquals(5, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      assertNotNull(topLevel0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals("global", topLevel0.getClassName());
      assertFalse(topLevel0.avoidObjectDetection());
      assertTrue(topLevel0.isEmpty());
      assertFalse(topLevel0.isSealed());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertTrue(topLevel0.isExtensible());
      
      Class<NativeObject> class0 = NativeObject.class;
      FunctionObject functionObject0 = (FunctionObject)ScriptableObject.buildClassCtor((Scriptable) topLevel0, class0, true, true);
      assertNotNull(functionObject0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals("global", topLevel0.getClassName());
      assertFalse(topLevel0.avoidObjectDetection());
      assertTrue(topLevel0.isEmpty());
      assertFalse(topLevel0.isSealed());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertTrue(topLevel0.isExtensible());
      assertEquals("function", functionObject0.getTypeOf());
      assertTrue(functionObject0.isSealed());
      assertEquals(0, functionObject0.getArity());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals(0, functionObject0.getLength());
      assertTrue(functionObject0.isExtensible());
      assertTrue(functionObject0.isEmpty());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("Object", functionObject0.getFunctionName());
      assertEquals("Function", functionObject0.getClassName());
      
      String string0 = functionObject0.getFunctionName();
      assertNotNull(string0);
      assertEquals("Object", string0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals("global", topLevel0.getClassName());
      assertFalse(topLevel0.avoidObjectDetection());
      assertTrue(topLevel0.isEmpty());
      assertFalse(topLevel0.isSealed());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertTrue(topLevel0.isExtensible());
      assertEquals("function", functionObject0.getTypeOf());
      assertTrue(functionObject0.isSealed());
      assertEquals(0, functionObject0.getArity());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals(0, functionObject0.getLength());
      assertTrue(functionObject0.isExtensible());
      assertTrue(functionObject0.isEmpty());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("Object", functionObject0.getFunctionName());
      assertEquals("Function", functionObject0.getClassName());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test12()  throws Throwable  {
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeIterator_StopIteration0, (Object) context0, (Class<?>) class0);
      assertNotNull(object0);
      assertEquals(Double.NaN, object0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) null, (Object) null, 3);
      assertNotNull(object0);
      assertEquals(false, object0);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) null, (Object) context0.FEATURE_LOCATION_INFORMATION_IN_ERROR, (Class<?>) class0);
      assertNotNull(object0);
      assertEquals(10, object0);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<String> class0 = String.class;
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) null, (Object) class0, (Class<?>) class0);
      assertNotNull(object0);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) null, (Object) null, 170);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      
      Context context1 = (Context)FunctionObject.convertArg(context0, (Scriptable) null, (Object) context0, 6);
      assertNotNull(context1);
      assertSame(context0, context1);
      assertSame(context1, context0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context1.generateObserverCount);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context1.isSealed());
      assertFalse(context1.isGeneratingDebug());
      assertEquals(0, context1.getLanguageVersion());
      assertTrue(context1.isGeneratingSource());
      assertEquals(0, context1.getOptimizationLevel());
      assertFalse(context1.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertEquals(0, context1.getInstructionObserverThreshold());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) null, (Object) context0, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Context context0 = Context.enter((Context) null);
      assertNotNull(context0);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertFalse(context0.generateObserverCount);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      
      NativeObject nativeObject0 = (NativeObject)context0.initStandardObjects();
      assertNotNull(nativeObject0);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertFalse(context0.generateObserverCount);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertTrue(nativeObject0.isExtensible());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.isEmpty());
      
      String string0 = (String)FunctionObject.convertArg((Context) null, (Scriptable) nativeObject0, (Object) "toString", 1);
      assertNotNull(string0);
      assertEquals("toString", string0);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertFalse(context0.generateObserverCount);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertTrue(nativeObject0.isExtensible());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      
      Double double0 = new Double((-1));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Class<Double> class0 = Double.class;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) null, (Object) double0, (Class<?>) class0);
      assertNotNull(object0);
      assertEquals((-1.0), object0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(3, int0);
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) null, (Object) nativeIterator_StopIteration0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaAdapter.runScript((Script) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.JavaAdapter$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      assertNotNull(topLevel0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertFalse(topLevel0.avoidObjectDetection());
      assertFalse(topLevel0.isSealed());
      assertTrue(topLevel0.isEmpty());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertEquals("global", topLevel0.getClassName());
      assertTrue(topLevel0.isExtensible());
      
      Class<NativeObject> class0 = NativeObject.class;
      FunctionObject functionObject0 = (FunctionObject)ScriptableObject.buildClassCtor((Scriptable) topLevel0, class0, true, true);
      assertNotNull(functionObject0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertFalse(topLevel0.avoidObjectDetection());
      assertFalse(topLevel0.isSealed());
      assertTrue(topLevel0.isEmpty());
      assertEquals("object", topLevel0.getTypeOf());
      assertFalse(topLevel0.hasPrototypeMap());
      assertEquals("global", topLevel0.getClassName());
      assertTrue(topLevel0.isExtensible());
      assertEquals("Object", functionObject0.getFunctionName());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("Function", functionObject0.getClassName());
      assertEquals(0, functionObject0.getArity());
      assertTrue(functionObject0.isEmpty());
      assertTrue(functionObject0.isSealed());
      assertTrue(functionObject0.isExtensible());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals(0, functionObject0.getLength());
      
      // Undeclared exception!
      try { 
        functionObject0.addAsConstructor(topLevel0, topLevel0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.BaseFunction", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test25()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<NativeObject> class0 = NativeObject.class;
      BaseFunction baseFunction0 = ScriptableObject.buildClassCtor((Scriptable) importerTopLevel0, class0, false, false);
      Context context0 = new Context();
      BoundFunction boundFunction0 = null;
      try {
        boundFunction0 = new BoundFunction(context0, importerTopLevel0, baseFunction0, baseFunction0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.BoundFunction", e);
      }
  }
}

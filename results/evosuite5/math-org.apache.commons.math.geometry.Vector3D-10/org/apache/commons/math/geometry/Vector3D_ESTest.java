/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 23:55:48 GMT 2019
 */

package org.apache.commons.math.geometry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.geometry.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Vector3D_ESTest extends Vector3D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1800.490328181925, 1800.490328181925);
      Vector3D vector3D1 = vector3D0.orthogonal();
      double double0 = Vector3D.angle(vector3D0, vector3D1);
      assertEquals((-0.3577376749734258), vector3D0.getDelta(), 0.01);
      assertEquals(0.37066027468351, vector3D1.getX(), 0.01);
      assertEquals(0.3279881380724213, vector3D0.getY(), 0.01);
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusK;
      Vector3D vector3D1 = vector3D0.orthogonal();
      Vector3D vector3D2 = vector3D0.plusJ.normalize();
      double double0 = Vector3D.angle(vector3D2, vector3D1);
      assertEquals(0.0, vector3D2.getDelta(), 0.01);
      assertEquals(-0.0, vector3D1.getDelta(), 0.01);
      assertEquals((-1.5707963267948966), vector3D1.getAlpha(), 0.01);
      assertEquals(3.141592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.zero;
      // Undeclared exception!
      try { 
        Vector3D.angle(vector3D0, vector3D0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // null norm
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      Vector3D vector3D1 = vector3D0.plusK.orthogonal();
      Vector3D vector3D2 = vector3D0.subtract(vector3D1);
      Vector3D vector3D3 = vector3D2.orthogonal();
      assertEquals(1.0, vector3D0.getNorm(), 0.01);
      assertEquals(-0.0, vector3D1.getDelta(), 0.01);
      assertEquals((-2.356194490192345), vector3D3.getAlpha(), 0.01);
      assertEquals(0.0, vector3D2.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.zero;
      // Undeclared exception!
      try { 
        vector3D0.orthogonal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // null norm
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusJ;
      // Undeclared exception!
      try { 
        vector3D0.zero.normalize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // cannot normalize a zero norm vector
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1800.490328181925, 1800.490328181925);
      Vector3D vector3D1 = vector3D0.minusJ.subtract(1800.490328181925, vector3D0);
      assertEquals(0.3576695391198052, vector3D1.getDelta(), 0.01);
      assertEquals((-2.783299689702982), vector3D1.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusJ;
      Vector3D vector3D1 = new Vector3D(117.11999, vector3D0, 117.11999, vector3D0, 117.11999, vector3D0, 117.11999, vector3D0);
      assertEquals(468.47996, vector3D1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      double double0 = vector3D0.getY();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1800.490328181925, 1800.490328181925);
      double double0 = vector3D0.getX();
      assertEquals((-0.3501560307851406), vector3D0.getZ(), 0.01);
      assertEquals(0.35773767497342585, vector3D0.getAlpha(), 0.01);
      assertEquals(0.8773907541047957, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D();
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusJ;
      double double0 = vector3D0.getDelta();
      assertEquals(1.0, vector3D0.getNorm(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1800.490328181925, 1800.490328181925);
      Vector3D vector3D1 = vector3D0.add(vector3D0);
      assertEquals(0.35773767497342585, vector3D1.getAlpha(), 0.01);
      assertEquals((-0.3577376749734258), vector3D1.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusK;
      double double0 = vector3D0.getZ();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusJ;
      Vector3D vector3D1 = new Vector3D((-5363.65), vector3D0, 2058.19909, vector3D0);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(3305.4509099999996, vector3D1.getNorm(), 0.01);
      assertEquals(0.0, vector3D1.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      double double0 = vector3D0.getAlpha();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusK;
      Vector3D vector3D1 = vector3D0.negate();
      assertEquals((-3.141592653589793), vector3D1.getAlpha(), 0.01);
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0, 0.0);
      Vector3D vector3D1 = new Vector3D((-1699.0), vector3D0, 0.0, vector3D0, 0.0, vector3D0);
      assertEquals(0.0, vector3D1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1800.490328181925, 1800.490328181925);
      Vector3D vector3D1 = vector3D0.add(1.5707963267948966, vector3D0);
      assertEquals((-0.3577376749734258), vector3D1.getDelta(), 0.01);
      assertEquals(0.3577376749734258, vector3D1.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1800.490328181925, 1800.490328181925);
      double double0 = Vector3D.angle(vector3D0, vector3D0);
      assertEquals(0.35773767497342585, vector3D0.getAlpha(), 0.01);
      assertEquals(1.0, vector3D0.getNorm(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusK;
      Vector3D vector3D1 = new Vector3D((-2274.27130336752), vector3D0);
      assertEquals((-3.141592653589793), vector3D1.getAlpha(), 0.01);
      assertEquals((-2274.27130336752), vector3D1.getZ(), 0.01);
      assertEquals(2274.27130336752, vector3D1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1800.490328181925, 1800.490328181925);
      Vector3D vector3D1 = vector3D0.orthogonal();
      Vector3D vector3D2 = vector3D1.orthogonal();
      Vector3D vector3D3 = Vector3D.minusI;
      Vector3D vector3D4 = vector3D2.add(vector3D3);
      Vector3D vector3D5 = vector3D4.orthogonal();
      assertEquals(0.7853981633974483, vector3D5.getAlpha(), 0.01);
      assertEquals(-0.0, vector3D2.getDelta(), 0.01);
      assertEquals(0.0, vector3D4.getDelta(), 0.01);
      assertEquals(0.9999999999999999, vector3D1.getNorm(), 0.01);
      assertEquals((-0.3577376749734258), vector3D0.getDelta(), 0.01);
      assertEquals(0.3279881380724213, vector3D0.getY(), 0.01);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 05:05:13 GMT 2019
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.format.FormatUtils;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FormatUtils_ESTest extends FormatUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("YjJLe:", 1662);
      assertNotNull(string0);
      assertEquals("Invalid format: \"YjJLe:\" is too short", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("Pz:6>=R|1yjS", 10);
      assertNotNull(string0);
      assertEquals("Invalid format: \"Pz:6>=R|1yjS\" is malformed at \"jS\"", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("", 0);
      assertNotNull(string0);
      assertEquals("Invalid format: \"\"", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.createErrorMessage("=f$j#O4i,Mt=9HU/]p", (-3756));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount(1666L);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount(13411764);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount((-80L));
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount((-9223372036854775808L));
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount((-721L));
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount(0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (-9223372036854775808L));
      assertEquals("-9223372036854775808", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, 34);
      assertEquals("34", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (-1));
      assertEquals("-1", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (-4121));
      assertEquals("-4121", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, Integer.MIN_VALUE);
      assertEquals("-2147483648", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (long) 1649);
      assertEquals("1649", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(100);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-9223372036854775796L));
      assertEquals("-9223372036854775796", stringWriter0.toString());
      assertEquals("-9223372036854775796", stringBuffer0.toString());
      assertEquals(20, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(" >p[i");
      assertNotNull(stringBuffer0);
      assertEquals(5, stringBuffer0.length());
      assertEquals(" >p[i", stringBuffer0.toString());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) '/');
      assertEquals(" >p[i47", stringBuffer0.toString());
      assertEquals(7, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) (-1));
      assertEquals("-1", stringWriter0.toString());
      assertEquals("-1", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, Integer.MIN_VALUE);
      assertEquals("-2147483648", stringBuffer0.toString());
      assertEquals(11, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) 1867);
      assertEquals(4, stringBuffer0.length());
      assertEquals("1867", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 9223372036854775800L, 2816);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (-9223372036854775808L), (-1));
      assertEquals("-9223372036854775808", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (-9223372036854775782L), 2444);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      // Undeclared exception!
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (long) 13411796, 13411796);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (long) 379, 379);
      assertEquals("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000379", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.writePaddedInteger((Writer) null, (long) 15, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (long) 2811, 2811);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 1L, 34);
      assertEquals("0000000000000000000000000000000001", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (long) (-1), (-1));
      assertEquals("-1", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (long) Integer.MIN_VALUE, 2857);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.writePaddedInteger((Writer) null, (long) 38, (-2055));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      FormatUtils.appendPaddedInteger(stringBuffer0, 9223372036854775779L, 2788);
      assertEquals(2788, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      FormatUtils.appendPaddedInteger(stringBuffer0, (-9223372036854775786L), 0);
      assertEquals("-9223372036854775786", stringBuffer0.toString());
      assertEquals(20, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      FormatUtils.appendPaddedInteger(stringBuffer0, (-9223372036854775808L), 2811);
      assertEquals(2812, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      // Undeclared exception!
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 13414587, 13414587);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 2788, 2788);
      assertEquals(2788, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(646);
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 646, 646);
      assertEqualsstringBuffer0.toString());
      assertEquals(646, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      FormatUtils.appendPaddedInteger(stringBuffer0, (-1L), 10000);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 48, 48);
      assertEquals(48, stringBuffer0.length());
      assertEquals("000000000000000000000000000000000000000000000048", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("~YSt?B8E");
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) Integer.MIN_VALUE, 47);
      assertEquals(56, stringBuffer0.length());
      assertEquals("~YSt?B8E-00000000000000000000000000000000000002147483648", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.parseTwoDigits("?W", 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}

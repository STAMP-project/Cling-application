/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 15:39:01 GMT 2019
 */

package org.apache.commons.math.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolator;
import org.apache.commons.math.ode.DummyStepInterpolator;
import org.apache.commons.math.ode.SwitchState;
import org.apache.commons.math.ode.SwitchingFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class SwitchState_ESTest extends SwitchState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(switchingFunction0).eventOccurred(anyDouble() , any(double[].class));
      doReturn(1224.4113223609388, 1224.4113223609388, (-1573.33065), 777.73381756, (-1573.33065)).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 777.73381756, (-1), 1457);
      switchState0.evaluateStep(dummyStepInterpolator0);
      switchState0.stepAccepted((-1), doubleArray0);
      switchState0.evaluateStep(dummyStepInterpolator0);
      switchState0.stepAccepted((-1375.059197), doubleArray0);
      //  // Unstable assertion: assertEquals((-1.0), switchState0.getEventTime(), 0.01);
      
      boolean boolean0 = switchState0.reset((-1406.5033814), doubleArray0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      SwitchState switchState0 = new SwitchState(switchingFunction0, 777.73381756, (-1), 1457);
      boolean boolean0 = switchState0.reset(322.67652014, doubleArray0);
      assertFalse(boolean0);
      assertFalse(switchState0.stop());
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1224.4113223609388, 1224.4113223609388, (-1573.33065), 777.73381756, (-1573.33065)).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 777.73381756, (-1), 1457);
      switchState0.evaluateStep(dummyStepInterpolator0);
      switchState0.stepAccepted((-1), doubleArray0);
      switchState0.evaluateStep(dummyStepInterpolator0);
      assertEquals((-1.0), switchState0.getEventTime(), 0.01);
      
      boolean boolean0 = switchState0.reset((-1406.5033814), doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(switchingFunction0).eventOccurred(anyDouble() , any(double[].class));
      doReturn(1224.4113223609388, 1224.4113223609388, (-1573.33065), 777.73381756, (-1573.33065)).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 777.73381756, (-1), 1457);
      switchState0.evaluateStep(dummyStepInterpolator0);
      switchState0.stepAccepted(1100.72, doubleArray0);
      switchState0.evaluateStep(dummyStepInterpolator0);
      switchState0.stepAccepted((-547.0), doubleArray0);
      boolean boolean0 = switchState0.stop();
      assertEquals(1100.72, switchState0.getEventTime(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      SwitchState switchState0 = new SwitchState(switchingFunction0, 777.73381756, (-1), 1457);
      boolean boolean0 = switchState0.stop();
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-759.4608162525345), 1700.8902, (-759.4608162525345), 1700.8902, 1700.8902).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 20, 1700.8902, 20);
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      double[] doubleArray0 = new double[0];
      classicalRungeKuttaStepInterpolator0.reinitialize(doubleArray0, true);
      switchState0.stepAccepted(20, doubleArray0);
      boolean boolean0 = switchState0.evaluateStep(classicalRungeKuttaStepInterpolator0);
      assertEquals(20.0, classicalRungeKuttaStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-785.1298706455909)).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 2, 1700.8902, 2);
      ClassicalRungeKuttaStepInterpolator classicalRungeKuttaStepInterpolator0 = new ClassicalRungeKuttaStepInterpolator();
      double[] doubleArray0 = new double[0];
      classicalRungeKuttaStepInterpolator0.currentTime = 174.29558;
      switchState0.stepAccepted(2, doubleArray0);
      // Undeclared exception!
      try { 
        switchState0.evaluateStep(classicalRungeKuttaStepInterpolator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 345, 345, (-69));
      double[] doubleArray0 = new double[0];
      switchState0.reinitializeBegin((-69), doubleArray0);
      assertFalse(switchState0.stop());
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-600.0)).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 345, 345, 345);
      switchState0.reinitializeBegin(345, (double[]) null);
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
      assertFalse(switchState0.stop());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      SwitchState switchState0 = new SwitchState(switchingFunction0, 1040.2331181061493, 1040.2331181061493, (-1281));
      double double0 = switchState0.getEventTime();
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(switchState0.stop());
  }
}

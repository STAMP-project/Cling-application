/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 22:03:08 GMT 2019
 */

package org.mockito.cglib.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.asm.ClassVisitor;
import org.mockito.asm.ClassWriter;
import org.mockito.asm.Type;
import org.mockito.cglib.core.ClassEmitter;
import org.mockito.cglib.core.CodeEmitter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ClassEmitter_ESTest extends ClassEmitter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(127);
      Type type0 = Type.VOID_TYPE;
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo((-2878), "G=9*]=Dycc`Qqu2d", type0, (Object) null);
      // Undeclared exception!
      try { 
        classWriter0.newConst(classEmitter_FieldInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.cglib.core.ClassEmitter$FieldInfo@13e6fe41
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Type type0 = Type.SHORT_TYPE;
      Object object0 = new Object();
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo(8, "WhD", type0, object0);
      ClassWriter classWriter0 = new ClassWriter(3);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      // Undeclared exception!
      try { 
        classEmitter0.declare_field(0, "", type0, classEmitter_FieldInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.cglib.core.ClassEmitter$FieldInfo@15344
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(93);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[8];
      Type type0 = Type.FLOAT_TYPE;
      classEmitter0.declare_field(3, "VE1FKASuI 8", type0, stringArray0[5]);
      // Undeclared exception!
      try { 
        classEmitter0.declare_field(3, "VE1FKASuI 8", type0, classEmitter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field \"VE1FKASuI 8\" has been declared differently
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Type type0 = Type.LONG_TYPE;
      Object object0 = new Object();
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo(8, "WhD", type0, object0);
      ClassEmitter.FieldInfo classEmitter_FieldInfo1 = new ClassEmitter.FieldInfo(1230, "WhD", type0, (Object) null);
      classEmitter_FieldInfo0.value = (Object) classEmitter_FieldInfo1;
      boolean boolean0 = classEmitter_FieldInfo0.equals(classEmitter_FieldInfo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Type type0 = Type.VOID_TYPE;
      Object object0 = new Object();
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo(8, "WhsD", type0, object0);
      ClassWriter classWriter0 = new ClassWriter(10);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type1 = Type.FLOAT_TYPE;
      classEmitter0.declare_field(10, "{Fw3>`#P]u|", type1, "WhsD");
      // Undeclared exception!
      try { 
        classEmitter0.declare_field(10, "{Fw3>`#P]u|", type0, classEmitter_FieldInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field \"{Fw3>`#P]u|\" has been declared differently
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Type type0 = Type.LONG_TYPE;
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo(158, "Fo{6", type0, type0);
      ClassEmitter.FieldInfo classEmitter_FieldInfo1 = new ClassEmitter.FieldInfo(158, "S ring[]", type0, (Object) null);
      boolean boolean0 = classEmitter_FieldInfo0.equals(classEmitter_FieldInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(138);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.FLOAT_TYPE;
      classEmitter0.declare_field(138, "", type0, "");
      // Undeclared exception!
      try { 
        classEmitter0.declare_field(0, "", type0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field \"\" has been declared differently
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Type type0 = Type.LONG_TYPE;
      Object object0 = new Object();
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo(8, "WhD", type0, object0);
      boolean boolean0 = classEmitter_FieldInfo0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Type type0 = Type.LONG_TYPE;
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo(2, "q<#d[9']n+NY&", type0, type0);
      boolean boolean0 = classEmitter_FieldInfo0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter((ClassVisitor) null);
      // Undeclared exception!
      try { 
        classEmitter0.getFieldInfo("9g@'70aaUiCwd");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1306));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.BYTE_TYPE;
      classEmitter0.declare_field((-1306), "", type0, "");
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = classEmitter0.getFieldInfo("");
      assertNotNull(classEmitter_FieldInfo0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1306));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.BYTE_TYPE;
      classEmitter0.declare_field((-1306), "", type0, "");
      boolean boolean0 = classEmitter0.isFieldDeclared("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassEmitter classEmitter1 = new ClassEmitter(classEmitter0);
      boolean boolean0 = classEmitter1.isFieldDeclared("Qq,w\"wEbKp");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(93);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.FLOAT_TYPE;
      classEmitter0.declare_field(3, "Signaue", type0, "Signaue");
      // Undeclared exception!
      try { 
        classEmitter0.declare_field(3, "Signaue", type0, classEmitter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field \"Signaue\" has been declared differently
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2342));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[14];
      classEmitter0.visit(1, (-2342), "z'16P-JM.MF6z", "z'16P-JM.MF6z", "z'16P-JM.MF6z", stringArray0);
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      String[] stringArray0 = new String[15];
      // Undeclared exception!
      try { 
        classEmitter0.visitMethod((-2080517788), "SWrieg[]", "SWrieg[]", "SWrieg[]", stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // classInfo is null! org.mockito.cglib.core.ClassEmitter@1
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      // Undeclared exception!
      try { 
        classEmitter0.end_class();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(119);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[15];
      classEmitter0.visit(1, 2, "z'164-JM.JMF6z", "z'164-JM.JMF6z", "z'164-JM.JMF6z", stringArray0);
      classEmitter0.begin_static();
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      assertEquals(154, CodeEmitter.NE);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(99);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type[] typeArray0 = new Type[0];
      classEmitter0.begin_class((-18), (-18), "org.mockito.asm.ByteVector", (Type) null, typeArray0, "org.mockito.asm.ByteVector");
      // Undeclared exception!
      try { 
        classEmitter0.getStaticHook();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // static hook is invalid for this class
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      classEmitter0.setTarget(classEmitter0);
      Type type0 = Type.FLOAT_TYPE;
      classEmitter0.declare_field(177, "vr}*<t}'Lp", type0, type0);
      assertEquals(1, type0.getSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      // Undeclared exception!
      try { 
        classEmitter0.getSuperType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(134);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      ClassEmitter classEmitter1 = new ClassEmitter(classEmitter0);
      String[] stringArray0 = new String[4];
      classEmitter1.visit(1, 2, "z'16++JM.JMF6z", "z'16++JM.JMF6z", "z'16++JM.JMF6z", stringArray0);
      classEmitter1.getStaticHook();
      classEmitter1.end_class();
      assertNotSame(classEmitter1, classEmitter0);
  }
}

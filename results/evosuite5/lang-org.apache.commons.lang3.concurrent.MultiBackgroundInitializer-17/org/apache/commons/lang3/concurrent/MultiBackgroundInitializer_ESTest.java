/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 14:27:57 GMT 2019
 */

package org.apache.commons.lang3.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import org.apache.commons.lang3.concurrent.BackgroundInitializer;
import org.apache.commons.lang3.concurrent.CallableBackgroundInitializer;
import org.apache.commons.lang3.concurrent.MultiBackgroundInitializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MultiBackgroundInitializer_ESTest extends MultiBackgroundInitializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1);
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer(scheduledThreadPoolExecutor0);
      multiBackgroundInitializer0.start();
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful();
      Callable<MockThread> callable0 = (Callable<MockThread>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<MockThread> callableBackgroundInitializer0 = new CallableBackgroundInitializer<MockThread>(callable0);
      // Undeclared exception!
      try { 
        multiBackgroundInitializer0.addInitializer("L0]--j(|_>P@td", callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // addInitializer() must not be called after start()!
         //
         verifyException("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      assertFalse(multiBackgroundInitializer0.isStarted());
      
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0);
      multiBackgroundInitializer0.addInitializer("", callableBackgroundInitializer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "0V5&KmRJgIlJ!t(j";
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      multiBackgroundInitializer0.setExternalExecutor((ExecutorService) null);
      Callable<MultiBackgroundInitializer> callable0 = (Callable<MultiBackgroundInitializer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(multiBackgroundInitializer0).when(callable0).call();
      CallableBackgroundInitializer<MultiBackgroundInitializer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<MultiBackgroundInitializer>(callable0);
      multiBackgroundInitializer0.addInitializer("K!_NL$gM@@", callableBackgroundInitializer0);
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      multiBackgroundInitializer0.getTaskCount();
      // Undeclared exception!
      try { 
        multiBackgroundInitializer_MultiBackgroundInitializerResults0.getResultObject("=<$U:{''!DA1pxMU");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No child initializer with name =<$U:{''!DA1pxMU
         //
         verifyException("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer(forkJoinPool0);
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      multiBackgroundInitializer_MultiBackgroundInitializerResults0.initializerNames();
      multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer(forkJoinPool0);
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      // Undeclared exception!
      try { 
        multiBackgroundInitializer_MultiBackgroundInitializerResults0.getInitializer("Y)):jMm;4m,a");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No child initializer with name Y)):jMm;4m,a
         //
         verifyException("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful();
      // Undeclared exception!
      try { 
        multiBackgroundInitializer0.addInitializer("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$1", (BackgroundInitializer<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Child initializer must not be null!
         //
         verifyException("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertNotNull(multiBackgroundInitializer0);
      
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
      assertNotNull(multiBackgroundInitializer_MultiBackgroundInitializerResults0);
      
      boolean boolean0 = multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
      assertTrue(boolean0);
      
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults1 = multiBackgroundInitializer0.initialize();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults1.isSuccessful());
      assertNotSame(multiBackgroundInitializer_MultiBackgroundInitializerResults1, multiBackgroundInitializer_MultiBackgroundInitializerResults0);
      assertFalse(multiBackgroundInitializer_MultiBackgroundInitializerResults1.equals((Object)multiBackgroundInitializer_MultiBackgroundInitializerResults0));
      assertNotNull(multiBackgroundInitializer_MultiBackgroundInitializerResults1);
      
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      Callable<Callable<Object>> callable1 = (Callable<Callable<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(callable0).when(callable1).call();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      CallableBackgroundInitializer<Callable<Object>> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Callable<Object>>(callable1, forkJoinPool0);
      assertFalse(callableBackgroundInitializer0.isStarted());
      assertNotNull(callableBackgroundInitializer0);
      
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      assertNotNull(threadPoolExecutor_DiscardOldestPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      multiBackgroundInitializer0.addInitializer("PV3O=)nxo", callableBackgroundInitializer0);
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertFalse(callableBackgroundInitializer0.isStarted());
      
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults2 = multiBackgroundInitializer0.initialize();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults2.isSuccessful());
      assertNotSame(multiBackgroundInitializer_MultiBackgroundInitializerResults2, multiBackgroundInitializer_MultiBackgroundInitializerResults1);
      assertNotSame(multiBackgroundInitializer_MultiBackgroundInitializerResults2, multiBackgroundInitializer_MultiBackgroundInitializerResults0);
      assertFalse(multiBackgroundInitializer_MultiBackgroundInitializerResults2.equals((Object)multiBackgroundInitializer_MultiBackgroundInitializerResults1));
      assertFalse(multiBackgroundInitializer_MultiBackgroundInitializerResults2.equals((Object)multiBackgroundInitializer_MultiBackgroundInitializerResults0));
      assertNotNull(multiBackgroundInitializer_MultiBackgroundInitializerResults2);
      
      boolean boolean1 = multiBackgroundInitializer_MultiBackgroundInitializerResults2.isException("PV3O=)nxo");
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults2.isSuccessful());
      assertNotSame(multiBackgroundInitializer_MultiBackgroundInitializerResults2, multiBackgroundInitializer_MultiBackgroundInitializerResults1);
      assertNotSame(multiBackgroundInitializer_MultiBackgroundInitializerResults2, multiBackgroundInitializer_MultiBackgroundInitializerResults0);
      assertFalse(multiBackgroundInitializer_MultiBackgroundInitializerResults2.equals((Object)multiBackgroundInitializer_MultiBackgroundInitializerResults1));
      assertFalse(multiBackgroundInitializer_MultiBackgroundInitializerResults2.equals((Object)multiBackgroundInitializer_MultiBackgroundInitializerResults0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = multiBackgroundInitializer_MultiBackgroundInitializerResults1.isSuccessful();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults1.isSuccessful());
      assertNotSame(multiBackgroundInitializer_MultiBackgroundInitializerResults1, multiBackgroundInitializer_MultiBackgroundInitializerResults0);
      assertNotSame(multiBackgroundInitializer_MultiBackgroundInitializerResults1, multiBackgroundInitializer_MultiBackgroundInitializerResults2);
      assertFalse(multiBackgroundInitializer_MultiBackgroundInitializerResults1.equals((Object)multiBackgroundInitializer_MultiBackgroundInitializerResults0));
      assertFalse(multiBackgroundInitializer_MultiBackgroundInitializerResults1.equals((Object)multiBackgroundInitializer_MultiBackgroundInitializerResults2));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful();
      multiBackgroundInitializer0.initialize();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Callable<Callable<Object>> callable0 = (Callable<Callable<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      CallableBackgroundInitializer<Callable<Object>> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Callable<Object>>(callable0, forkJoinPool0);
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2023);
      multiBackgroundInitializer0.addInitializer("D'e{QR\"Lt).=", callableBackgroundInitializer0);
      multiBackgroundInitializer0.initialize();
      // Undeclared exception!
      try { 
        multiBackgroundInitializer_MultiBackgroundInitializerResults0.isException("P*DnrL>O>!Dj\"w6B");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No child initializer with name P*DnrL>O>!Dj\"w6B
         //
         verifyException("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      // Undeclared exception!
      try { 
        multiBackgroundInitializer_MultiBackgroundInitializerResults0.getResultObject("Nlz2^A\"`n");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No child initializer with name Nlz2^A\"`n
         //
         verifyException("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer(forkJoinPool0);
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      boolean boolean0 = multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      int int0 = multiBackgroundInitializer0.getTaskCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0);
      multiBackgroundInitializer0.addInitializer("1", callableBackgroundInitializer0);
      multiBackgroundInitializer0.addInitializer("1", callableBackgroundInitializer0);
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      boolean boolean0 = multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0);
      Callable<Runnable> callable1 = (Callable<Runnable>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Runnable> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Runnable>(callable1);
      // Undeclared exception!
      try { 
        multiBackgroundInitializer0.addInitializer((String) null, callableBackgroundInitializer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Name of child initializer must not be null!
         //
         verifyException("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      // Undeclared exception!
      try { 
        multiBackgroundInitializer_MultiBackgroundInitializerResults0.getException("0V5KfRJgIlJ!t(j");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No child initializer with name 0V5KfRJgIlJ!t(j
         //
         verifyException("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults", e);
      }
  }
}

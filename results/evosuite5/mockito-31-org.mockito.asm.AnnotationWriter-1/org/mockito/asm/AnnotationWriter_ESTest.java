/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 22 11:05:30 GMT 2019
 */

package org.mockito.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.asm.AnnotationVisitor;
import org.mockito.asm.AnnotationWriter;
import org.mockito.asm.ByteVector;
import org.mockito.asm.ClassWriter;
import org.mockito.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AnnotationWriter_ESTest extends AnnotationWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      ClassWriter classWriter0 = new ClassWriter(113);
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, byteVector0, byteVector0, 2);
      AnnotationWriter[] annotationWriterArray0 = new AnnotationWriter[21];
      annotationWriterArray0[2] = annotationWriter0;
      AnnotationWriter.put(annotationWriterArray0, 2, byteVector0);
      assertEquals(21, annotationWriterArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      AnnotationWriter annotationWriter0 = new AnnotationWriter((ClassWriter) null, false, byteVector0, byteVector0, 24);
      annotationWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      AnnotationWriter annotationWriter0 = new AnnotationWriter((ClassWriter) null, false, byteVector0, (ByteVector) null, 1210);
      annotationWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      AnnotationWriter annotationWriter0 = new AnnotationWriter((ClassWriter) null, true, byteVector0, byteVector0, 101);
      // Undeclared exception!
      try { 
        annotationWriter0.visitArray("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      AnnotationWriter annotationWriter0 = new AnnotationWriter((ClassWriter) null, false, byteVector0, byteVector0, (-600));
      AnnotationVisitor annotationVisitor0 = annotationWriter0.visitArray("");
      assertFalse(annotationVisitor0.equals((Object)annotationWriter0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      AnnotationWriter annotationWriter0 = new AnnotationWriter((ClassWriter) null, true, byteVector0, byteVector0, 1900);
      // Undeclared exception!
      try { 
        annotationWriter0.visitAnnotation("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      AnnotationWriter annotationWriter0 = new AnnotationWriter((ClassWriter) null, false, byteVector0, byteVector0, 1900);
      // Undeclared exception!
      try { 
        annotationWriter0.visitAnnotation("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      AnnotationWriter annotationWriter0 = new AnnotationWriter((ClassWriter) null, true, byteVector0, byteVector0, 101);
      // Undeclared exception!
      try { 
        annotationWriter0.visitEnum("", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      AnnotationWriter annotationWriter0 = new AnnotationWriter((ClassWriter) null, false, byteVector0, byteVector0, (-1170));
      // Undeclared exception!
      try { 
        annotationWriter0.visitEnum("53gL' EpqZ", "53gL' EpqZ", "53gL' EpqZ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      AnnotationWriter annotationWriter0 = new AnnotationWriter((ClassWriter) null, false, byteVector0, byteVector0, 104);
      Type type0 = Type.SHORT_TYPE;
      // Undeclared exception!
      try { 
        annotationWriter0.visit("},(x-:gtq7EsasxtTQa", type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      AnnotationWriter annotationWriter0 = new AnnotationWriter((ClassWriter) null, false, byteVector0, byteVector0, 101);
      Short short0 = new Short((short)2);
      // Undeclared exception!
      try { 
        annotationWriter0.visit((String) null, short0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      AnnotationWriter annotationWriter0 = new AnnotationWriter((ClassWriter) null, false, byteVector0, byteVector0, 1561);
      Character character0 = Character.valueOf('<');
      // Undeclared exception!
      try { 
        annotationWriter0.visit("org.mockito.asm.ClassWriter", character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      AnnotationWriter annotationWriter0 = new AnnotationWriter((ClassWriter) null, false, byteVector0, byteVector0, 73);
      Boolean boolean0 = Boolean.FALSE;
      // Undeclared exception!
      try { 
        annotationWriter0.visit("", boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      AnnotationWriter annotationWriter0 = new AnnotationWriter((ClassWriter) null, false, byteVector0, byteVector0, 101);
      Byte byte0 = new Byte((byte) (-33));
      // Undeclared exception!
      try { 
        annotationWriter0.visit("", byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      AnnotationWriter annotationWriter0 = new AnnotationWriter((ClassWriter) null, false, byteVector0, byteVector0, 2660);
      // Undeclared exception!
      try { 
        annotationWriter0.visit("q", "q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.AnnotationWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      ClassWriter classWriter0 = new ClassWriter(113);
      AnnotationWriter annotationWriter0 = new AnnotationWriter(classWriter0, true, byteVector0, byteVector0, 113);
      Boolean boolean0 = Boolean.valueOf(true);
      annotationWriter0.visit("", boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      AnnotationWriter annotationWriter0 = new AnnotationWriter((ClassWriter) null, false, byteVector0, byteVector0, 101);
      // Undeclared exception!
      try { 
        annotationWriter0.visit("", byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.asm.AnnotationWriter", e);
      }
  }
}

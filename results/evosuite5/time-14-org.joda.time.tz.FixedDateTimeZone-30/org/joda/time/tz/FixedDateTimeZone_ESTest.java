/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 22:26:53 GMT 2019
 */

package org.joda.time.tz;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FixedDateTimeZone_ESTest extends FixedDateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("06 C^i", "-06 C^i", (-10384350), 15);
      FixedDateTimeZone fixedDateTimeZone1 = new FixedDateTimeZone("06 C^i", "DateTimeZone.setDefault", 15, 15);
      boolean boolean0 = fixedDateTimeZone0.equals(fixedDateTimeZone1);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("w", "-TxPHD>", 2147483645, 2147483645);
      FixedDateTimeZone fixedDateTimeZone1 = new FixedDateTimeZone("+f6aIcM", "+f6aIcM", 10, (-447));
      boolean boolean0 = fixedDateTimeZone0.equals(fixedDateTimeZone1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale locale0 = Locale.ENGLISH;
      boolean boolean0 = fixedDateTimeZone0.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("06 C^i", "vrtKnX24k(kO.1^", 2147483634, 2147483634);
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("06 C^i", "vrtKnX24k(kO.1^", 2147483634, 2147483634);
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      assertEquals(2147483634, timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("+00:00", "L-?ME`k{<Q,$X;l|:", 6, 6);
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      assertEquals("GMT+00:00", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("-=jM3o", "-=jM3o", 2147483622, (-2683));
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      assertEquals("GMT", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      assertEquals(0, timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("org.joda.time.Instant", "org.joda.time.Instant", 1295, 1295);
      long long0 = fixedDateTimeZone0.previousTransition(1295);
      assertEquals(1295L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("I+NEcpgO[;@", "I+NEcpgO[;@", (-3330), (-3330));
      boolean boolean0 = fixedDateTimeZone0.isFixed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      String string0 = fixedDateTimeZone0.getShortName(0L);
      assertEquals("+00:00", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("I+NEcpgO[;@", "I+NEcpgO[;@", (-3330), (-3330));
      boolean boolean0 = fixedDateTimeZone0.isStandardOffset((-3330));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      int int0 = fixedDateTimeZone0.getOffsetFromLocal((-2L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("org.joda.time.Instant", "+", 1295, 1295);
      long long0 = fixedDateTimeZone0.nextTransition(1295);
      assertEquals(1295L, long0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 21 16:24:58 GMT 2019
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.NoSuchElementException;
import org.apache.commons.lang3.text.StrMatcher;
import org.apache.commons.lang3.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class StrTokenizer_ESTest extends StrTokenizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      
      String string0 = strTokenizer0.toString();
      assertNotNull(string0);
      assertEquals("StrTokenizer[not tokenized yet]", string0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      String string0 = strTokenizer0.nextToken();
      assertNull(string0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      String string1 = strTokenizer0.toString();
      assertNotNull(string1);
      assertEquals("StrTokenizer[]", string1);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      
      StrTokenizer strTokenizer1 = (StrTokenizer)strTokenizer0.cloneReset();
      assertNotSame(strTokenizer0, strTokenizer1);
      assertNotSame(strTokenizer1, strTokenizer0);
      assertFalse(strTokenizer1.equals((Object)strTokenizer0));
      assertNotNull(strTokenizer1);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      //  // Unstable assertion: assertNotNull(strTokenizer0);
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertFalse(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      
      String string0 = strTokenizer0.getContent();
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(" \t\n\r\f", string0);
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertFalse(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported");
      assertNotNull(strTokenizer0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      String string0 = strTokenizer0.getContent();
      assertNotNull(string0);
      assertEquals("set() is unsupported", string0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
      assertNotNull(strMatcher_NoMatcher0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setTrimmerMatcher(strMatcher_NoMatcher0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[7];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, (StrMatcher) null, (StrMatcher) null);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(7, charArray0.length);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredMatcher((StrMatcher) null);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer1);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[2];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, (StrMatcher) null, (StrMatcher) null);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(2, charArray0.length);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setTrimmerMatcher((StrMatcher) null);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer1);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer(".5@hv ^V_.X.3,qv");
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher(".5@hv ^V_.X.3,qv");
      assertNotNull(strMatcher0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteMatcher(strMatcher0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      
      String string0 = strTokenizer0.nextToken();
      assertSame(strTokenizer0, strTokenizer1);
      assertNotNull(string0);
      assertEquals("5@hv ^V_X3,qv", string0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("\"AP})DaL3VZNT;,`3yM");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      // Undeclared exception!
      try { 
        strTokenizer0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[2];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(2, charArray0.length);
      
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(strMatcher0);
      assertEquals(2, charArray0.length);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteMatcher(strMatcher0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(strTokenizer1);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals(2, charArray0.length);
      
      String string0 = strTokenizer0.nextToken();
      assertSame(strTokenizer0, strTokenizer1);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("");
      assertNotNull(strTokenizer0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      String string0 = strTokenizer0.nextToken();
      assertNull(string0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("U8p_ Sz");
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      String string0 = strTokenizer0.next();
      assertNotNull(string0);
      assertEquals("U8p_", string0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      String string1 = strTokenizer0.previous();
      assertNotNull(string1);
      assertEquals("U8p_", string1);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      // Undeclared exception!
      try { 
        strTokenizer0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance((String) null);
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("Usshe[");
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      List<String> list0 = strTokenizer0.getTokenList();
      assertNotNull(list0);
      assertTrue(list0.contains("Usshe["));
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer(" in an array of ");
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      String string0 = strTokenizer0.next();
      assertNotNull(string0);
      assertEquals("in", string0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      
      String string1 = strTokenizer0.previousToken();
      assertNotNull(string1);
      assertEquals("in", string1);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      String string0 = strTokenizer0.previousToken();
      assertNull(string0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer((String) null);
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      //  // Unstable assertion: assertNotNull(strTokenizer0);
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertFalse(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
      
      int int0 = strTokenizer0.size();
      //  // Unstable assertion: assertEquals(1, int0);
      //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex());
      //  // Unstable assertion: assertFalse(strTokenizer0.isEmptyTokenAsNull());
      //  // Unstable assertion: assertEquals(0, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("X8*[)F}eB9((!,");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      
      String string0 = strTokenizer0.nextToken();
      assertSame(strTokenizer0, strTokenizer1);
      assertNotNull(string0);
      assertEquals("X8*[)F}eB9((!", string0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(0, strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("Uhe;sshOe[");
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      // Undeclared exception!
      try { 
        strTokenizer0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("UsshOe[");
      strTokenizer0.setIgnoredChar('h');
      strTokenizer0.nextToken();
      assertEquals(0, strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(" \t\n\r\f");
      // Undeclared exception!
      try { 
        strTokenizer0.set(" \t\n\r\f");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // set() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[11];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, '6', '6');
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(" \t\n\r\f");
      // Undeclared exception!
      try { 
        strTokenizer0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoreEmptyTokens(true);
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[11];
      StrMatcher strMatcher0 = StrMatcher.trimMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, (StrMatcher) null, strMatcher0);
      // Undeclared exception!
      try { 
        strTokenizer0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      int int0 = strTokenizer0.previousIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[12];
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      assertEquals((-1), strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("tw:I", '=', '=');
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      int int0 = strTokenizer0.nextIndex();
      assertEquals(0, int0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      // Undeclared exception!
      try { 
        strTokenizer0.add("set() is unsupported");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer("d?GX)-_\"yW$Uth$Jz)", strMatcher0, strMatcher0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("StrTokenizer[not tokenized yet]", "StrTokenizer[not tokenized yet]");
      String string0 = strTokenizer0.nextToken();
      assertNull(string0);
      assertEquals(0, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[2];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      String[] stringArray0 = strTokenizer0.getTokenArray();
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(", Length: ");
      strTokenizer0.nextToken();
      assertEquals(0, strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[2];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "");
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }
}

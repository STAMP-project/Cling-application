/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 19:25:44 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.LocalTime;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class LocalTime_ESTest extends LocalTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(buddhistChronology0);
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay((long) 1, (Chronology) buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime_Property0);
      
      // Undeclared exception!
      try { 
        localTime_Property0.addNoWrapToCopy((-2495));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The addition exceeded the boundaries of LocalTime
         //
         verifyException("org.joda.time.LocalTime$Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotNull(buddhistChronology0);
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay((long) 1, (Chronology) buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime_Property0);
      
      LocalTime localTime1 = localTime_Property0.addNoWrapToCopy(4);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = localTime0.toString((String) null, locale0);
      assertEquals("21:21:21.320", string0);
      assertEquals(4, localTime0.size());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      try { 
        localTime0.toString("", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      String string0 = localTime0.toString((String) null);
      assertEquals("21:21:21.320", string0);
      assertEquals(4, localTime0.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.toString("The addition exceeded the boundaries of LocalTime");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'dayOfMonth' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      LocalTime.Property localTime_Property0 = localTime0.property(dateTimeFieldType0);
      assertEquals(4, localTime0.size());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertNotNull(localTime_Property0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.minusMillis(0);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(1, 1, 1);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.minusMillis(1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.minusSeconds(0);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.minusSeconds(3);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.minusMinutes(0);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(1, 1, 1);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.minusMinutes(3399);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.minusHours(0);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.minusHours((-29));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.MIDNIGHT.plusMillis(0);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.plusSeconds(0);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.plusSeconds(10125000);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.plusMinutes(0);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(1, 1, 1);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.plusMinutes(1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.plusHours(0);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.plusHours(520);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1323);
      assertEquals("+00:00:01.323", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01.323", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      assertEquals("+00:00:01.323", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01.323", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      Seconds seconds0 = Seconds.seconds((-937));
      assertEquals(1, seconds0.size());
      assertEquals((-937), seconds0.getSeconds());
      assertNotNull(seconds0);
      
      LocalTime localTime1 = localTime0.withPeriodAdded(seconds0, 0);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals("+00:00:01.323", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01.323", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(1, seconds0.size());
      assertEquals((-937), seconds0.getSeconds());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.withFieldAdded(durationFieldType0, 0);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      // Undeclared exception!
      try { 
        localTime0.withFieldAdded(durationFieldType0, (-2389));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'centuries' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.withFieldAdded((DurationFieldType) null, (-3713));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      LocalTime localTime1 = localTime0.withFieldAdded(durationFieldType0, 877);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try { 
        localTime0.withField(dateTimeFieldType0, (-6385));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -6385 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.withField((DateTimeFieldType) null, (-1400));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try { 
        localTime0.withField(dateTimeFieldType0, 884);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weekOfWeekyear' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.withFields((ReadablePartial) null);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(1, 1, 1);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.withFields(localTime0);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = LocalTime.now();
      assertTrue(localTime1.equals((Object)localTime0));
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
      
      boolean boolean0 = localTime0.isBefore(localTime1);
      assertFalse(boolean0);
      assertTrue(localTime0.equals((Object)localTime1));
      assertTrue(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      boolean boolean0 = localTime0.MIDNIGHT.isBefore(localTime0);
      assertTrue(boolean0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      YearMonth yearMonth0 = new YearMonth();
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertNotNull(yearMonth0);
      
      // Undeclared exception!
      try { 
        localTime0.isEqual(yearMonth0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = LocalTime.MIDNIGHT;
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
      
      boolean boolean0 = localTime0.isBefore(localTime1);
      assertFalse(boolean0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.plusMillis((-29));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
      
      boolean boolean0 = localTime1.equals(localTime0);
      assertFalse(boolean0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = new LocalTime();
      assertTrue(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
      
      boolean boolean0 = localTime1.equals(localTime0);
      assertTrue(boolean0);
      assertTrue(localTime0.equals((Object)localTime1));
      assertTrue(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = localTime0.equals(object0);
      assertFalse(boolean0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      LocalTime localTime0 = new LocalTime(1, 1, 1);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = LocalTime.now((Chronology) ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
      
      boolean boolean0 = localTime0.equals(localTime1);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(boolean0);
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      boolean boolean0 = localTime0.MIDNIGHT.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      boolean boolean0 = localTime0.isSupported((DateTimeFieldType) null);
      assertFalse(boolean0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.get((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.getValue(255);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 255
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.getFieldType((-25));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -25
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Europe/Amsterdam", dateTimeZone0.toString());
      assertEquals("Europe/Amsterdam", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      assertEquals("Europe/Amsterdam", dateTimeZone0.toString());
      assertEquals("Europe/Amsterdam", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.withMinuteOfHour(4);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      LocalTime localTime0 = new LocalTime((-1L), (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.withSecondOfMinute((-1712));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1712 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      LocalTime localTime0 = LocalTime.now((Chronology) ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      boolean boolean0 = localTime0.MIDNIGHT.isEqual(localTime0);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(boolean0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-1L));
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int int0 = localTime0.getHourOfDay();
      assertEquals(0, int0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(1, 1, 1);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.withMillisOfSecond(1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int int0 = localTime0.MIDNIGHT.getMillisOfSecond();
      assertEquals(0, int0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test61()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("Europe/Amsterdam", dateTimeZone0.toString());
      assertEquals("Europe/Amsterdam", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      LocalTime localTime1 = new LocalTime(localTime0, dateTimeZone0);
      assertTrue(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime0.size());
      assertEquals("Europe/Amsterdam", dateTimeZone0.toString());
      assertEquals("Europe/Amsterdam", dateTimeZone0.getID());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      Hours hours0 = Hours.SEVEN;
      assertEquals(1, hours0.size());
      assertEquals(7, hours0.getHours());
      assertNotNull(hours0);
      
      LocalTime localTime1 = localTime0.plus(hours0);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(1, hours0.size());
      assertEquals(7, hours0.getHours());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int int0 = localTime0.getSecondOfMinute();
      assertEquals(0, int0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int int0 = localTime0.MIDNIGHT.getMinuteOfHour();
      assertEquals(0, int0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.withMillisOfDay((-718));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -718 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime_Property0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int int0 = localTime0.getMillisOfDay();
      assertEquals(76881320, int0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1323);
      assertEquals("+00:00:01.323", dateTimeZone0.toString());
      assertEquals("+00:00:01.323", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      assertEquals("+00:00:01.323", dateTimeZone0.toString());
      assertEquals("+00:00:01.323", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      boolean boolean0 = localTime0.isSupported(dateTimeFieldType0);
      assertTrue(boolean0);
      assertEquals("+00:00:01.323", dateTimeZone0.toString());
      assertEquals("+00:00:01.323", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(13, 13);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.minus((ReadablePeriod) null);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.withHourOfDay(3035);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3035 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.parse("org.joda.time.YearMonthDay");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.YearMonthDay\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DateTime dateTime0 = localTime0.MIDNIGHT.toDateTimeToday();
      assertEquals(4, localTime0.size());
      assertEquals(1392332400000L, dateTime0.getMillis());
      assertNotNull(dateTime0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime_Property0);
      
      LocalTime localTime1 = localTime_Property0.addWrapFieldToCopy(9);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(264L);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime_Property0);
      
      LocalTime localTime1 = localTime_Property0.getLocalTime();
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime_Property0);
      
      LocalTime localTime1 = localTime_Property0.addCopy(76860320L);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-1409918680L), (Chronology) null);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime_Property0);
      
      LocalTime localTime1 = localTime_Property0.roundHalfCeilingCopy();
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime_Property0);
      
      LocalTime localTime1 = localTime_Property0.roundHalfEvenCopy();
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime_Property0);
      
      LocalTime localTime1 = localTime_Property0.roundCeilingCopy();
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-1409918680L), (Chronology) null);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime_Property0);
      
      LocalTime localTime1 = localTime_Property0.roundHalfFloorCopy();
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay((long) 1, (Chronology) ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime_Property0);
      
      LocalTime localTime1 = localTime_Property0.addCopy(1);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(1, 1, 1);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime_Property0);
      
      // Undeclared exception!
      try { 
        localTime_Property0.setCopy("The DateTimeFieldType must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"The DateTimeFieldType must not be null\" for minuteOfHour is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1939), (-1939), (-1939), (-1939), (-1939), 0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      LocalTime localTime1 = localTime_Property0.withMinimumValue();
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      Chronology chronology0 = localTime_Property0.getChronology();
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1939), (-1939), (-1939), (-1939), (-1939), 0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      LocalTime localTime1 = localTime_Property0.withMaximumValue();
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((Object) null);
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      LocalTime localTime1 = localTime_Property0.roundFloorCopy();
      assertSame(localTime1, localTime0);
  }
}

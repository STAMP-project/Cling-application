/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 08:24:17 GMT 2019
 */

package org.mockito.asm.tree.analysis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.asm.Opcodes;
import org.mockito.asm.Type;
import org.mockito.asm.tree.FieldInsnNode;
import org.mockito.asm.tree.IincInsnNode;
import org.mockito.asm.tree.InsnNode;
import org.mockito.asm.tree.IntInsnNode;
import org.mockito.asm.tree.JumpInsnNode;
import org.mockito.asm.tree.LabelNode;
import org.mockito.asm.tree.LdcInsnNode;
import org.mockito.asm.tree.LookupSwitchInsnNode;
import org.mockito.asm.tree.MethodInsnNode;
import org.mockito.asm.tree.MultiANewArrayInsnNode;
import org.mockito.asm.tree.TypeInsnNode;
import org.mockito.asm.tree.VarInsnNode;
import org.mockito.asm.tree.analysis.BasicInterpreter;
import org.mockito.asm.tree.analysis.BasicValue;
import org.mockito.asm.tree.analysis.SourceValue;
import org.mockito.asm.tree.analysis.Value;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class BasicInterpreter_ESTest extends BasicInterpreter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicValue basicValue1 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.merge(basicValue0, basicValue1);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.merge(basicValue0, basicValue0);
      assertTrue(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      MultiANewArrayInsnNode multiANewArrayInsnNode0 = new MultiANewArrayInsnNode("", 7);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      // Undeclared exception!
      try { 
        basicInterpreter0.naryOperation(multiANewArrayInsnNode0, linkedList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.mockito.asm.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      LabelNode labelNode0 = new LabelNode();
      // Undeclared exception!
      try { 
        basicInterpreter0.naryOperation(labelNode0, (List) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mockito.asm.tree.LabelNode cannot be cast to org.mockito.asm.tree.MethodInsnNode
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(181, "y-$>5`Ac:ayqX");
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(typeInsnNode0, basicValue0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(180, 180);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(179, 179);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(178, 178);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(177, 177);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(176, 176);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, (Value) null, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(175, 175);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(174, 174);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(173, 173);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(172, "");
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(typeInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(171, 171);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(170, 170);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(169, 169);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(168, 168);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(167, 167);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(166, 166);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(165, 165);
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(164, 164);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(163, 0);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(162, 162);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      SourceValue sourceValue0 = new SourceValue(13);
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, sourceValue0, sourceValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(161, 161);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, (Value) null, (Value) null);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(160, 160);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, (Value) null, (Value) null);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(159, 159);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(158, 158);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(157, 157);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, (Value) null, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(156, 156);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(155, 155);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(154, 154);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(153, 153);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(152, 152);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(151, 151);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(150, 150);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(149, 149);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(148, 148);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(147, "org.moc!to.asm.trep.FieldInsnNode", "org.moc!to.asm.trep.FieldInsnNode", "org.moc!to.asm.trep.FieldInsnNode");
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(fieldInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(146, 146);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, (Value) null, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(145, 145);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(144, 144);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(143, 143);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(142, 142);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(141, 141);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(140, 140);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(139, 2047);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(138, 138);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(137, 137);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(136, 136);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(135, 135);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(134, 134);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(133, 133);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IincInsnNode iincInsnNode0 = new IincInsnNode(109, 109);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(iincInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(131, 131);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(130, "org.mockito.asm.Attribute");
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(typeInsnNode0, basicValue0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(129, 129);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(128, 128);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(127, 127);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(126, 126);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(125, 125);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(124, 124);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(123, 123);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(122, 122);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(121, 121);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(120, 120);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(119, 119);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(118, 118);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, (Value) null, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(117, 117);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(116, 116);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(115, 115);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(114, "yUeAAhy%u'!B20T_ZZK");
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(typeInsnNode0, basicValue0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MethodInsnNode methodInsnNode0 = new MethodInsnNode(113, "[B", "[B", "[B");
      SourceValue sourceValue0 = new SourceValue(8);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(methodInsnNode0, sourceValue0, sourceValue0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(112, 112);
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(111, 111);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(110, 110);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(109, 109);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(108, 108);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(107, 107);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(106, 106);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(105, 105);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(104, 104);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(103, 103);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MethodInsnNode methodInsnNode0 = new MethodInsnNode(102, (String) null, (String) null, (String) null);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(methodInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(101, 101);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(100, 100);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(99, 99);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, (Value) null, (Value) null);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(98, 98);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, (Value) null, (Value) null);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(97, 97);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(96, 96);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(95, 95);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      IntInsnNode intInsnNode0 = new IntInsnNode(94, 135);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(93, 93);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(92, 92);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, (Value) null, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(91, "org.mockito.asm.tree.MultiANewArrayInsnNode", "org.mockito.asm.tree.MultiANewArrayInsnNode", "org.mockito.asm.tree.MultiANewArrayInsnNode");
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(fieldInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(90, 90);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(89, 89);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(88, 88);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(87, 87);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(86, 86);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(85, 85);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(84, 84);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(83, 83);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(82, 82);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(81, 164);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(80, 80);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(79, 79);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(78, 78);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(77, 77);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(76, 76);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(75, 75);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      IntInsnNode intInsnNode0 = new IntInsnNode(74, 74);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(73, 73);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(72, 72);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(71, 71);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(70, 70);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(69, 69);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(68, 68);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(67, 67);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(66, 66);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(65, 65);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(64, 64);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(63, 63);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(62, 62);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(61, 61);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(60, "", "", "");
      SourceValue sourceValue0 = new SourceValue(13);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(fieldInsnNode0, sourceValue0, sourceValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(59, 14);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(58, 58);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(57, 57);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(56, 56);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(55, "LocalVariableTable");
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(typeInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(54, "LocalVariableTable");
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(typeInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(53, "org.mockito.asm.Frame", "", "org.mockito.asm.Frame");
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(fieldInsnNode0, (Value) null, (Value) null);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(52, 52);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(51, 51);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(50, 50);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(49, 49);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(48, "Ko0l5[.zNc4j(Wn");
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(typeInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(47, 47);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, (Value) null, (Value) null);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 5);
      // Undeclared exception!
      try { 
        basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(46, 46);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.binaryOperation(intInsnNode0, basicValue0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 188);
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid array type
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 11);
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 10);
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 9);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertTrue(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 7);
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 6);
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 5);
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertTrue(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 4);
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(199, 199);
      BasicValue basicValue0 = (BasicValue)BasicValue.INT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(198, 198);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(196, 1);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(195, 195);
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(194, 6);
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(193, "K3nNEk~%Zu<", "K3nNEk~%Zu<", "K3nNEk~%Zu<");
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(fieldInsnNode0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(192, 7);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mockito.asm.tree.IntInsnNode cannot be cast to org.mockito.asm.tree.TypeInsnNode
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(191, "A", "A", "A");
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(fieldInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      IntInsnNode intInsnNode0 = new IntInsnNode(190, 10);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(189, "", "org.mockito.asm.tree.TypeInsnNode", "java/lang/Class");
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(fieldInsnNode0, basicValue0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mockito.asm.tree.FieldInsnNode cannot be cast to org.mockito.asm.tree.TypeInsnNode
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(187);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(186, 186);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(185, 185);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(184, "T", "T", "T");
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(fieldInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(183, 183);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(182, (String) null, "A", "A");
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(fieldInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(181);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(insnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(180, "K3nNEk~%Zu<", "K3nNEk~%Zu<", "K3nNEk~%Zu<");
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(fieldInsnNode0, basicValue0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.mockito.asm.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(179, 182);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(178, 172);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(177, "K3nNBEk~fZu<", "K3nNBEk~fZu<", "K3nNBEk~fZu<");
      SourceValue sourceValue0 = new SourceValue(11);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(fieldInsnNode0, sourceValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(176, 188);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(175, 175);
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(174, 42);
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(173, "K3nNEk~%Zu<", "K3nNEk~%Zu<", "K3nNEk~%Zu<");
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(fieldInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(172);
      Value value0 = basicInterpreter0.unaryOperation(insnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      LabelNode[] labelNodeArray0 = new LabelNode[0];
      LookupSwitchInsnNode lookupSwitchInsnNode0 = new LookupSwitchInsnNode((LabelNode) null, (int[]) null, labelNodeArray0);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(lookupSwitchInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(170, 170);
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(169, "_p!-", "_p!-", "_p!-");
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(fieldInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(168, 168);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(167, 167);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(166, 166);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(165, "y-$>5`Ac:ayqX", "y-$>5`Ac:ayqX", "y-$>5`Ac:ayqX");
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(fieldInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(164, 3);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(163, 163);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(162, 162);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(161, 195);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(160, "", "[F", "");
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(fieldInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(159, "K3nNBEk~fyu>", "K3nNBEk~fyu>", "K3nNBEk~fyu>");
      SourceValue sourceValue0 = new SourceValue(7);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(fieldInsnNode0, sourceValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(158, "[", "", "#Syzr%1fM~tYV;9b{");
      Value value0 = basicInterpreter0.unaryOperation(fieldInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(157, (-17));
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(156, "N:?F| h2_", "N:?F| h2_", "N:?F| h2_");
      SourceValue sourceValue0 = new SourceValue(6);
      Value value0 = basicInterpreter0.unaryOperation(fieldInsnNode0, sourceValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(155, "8#SaGX!M.FlU)oGG5@");
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(typeInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(154, 115);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(153, "B", "B", "B");
      SourceValue sourceValue0 = new SourceValue(3);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(fieldInsnNode0, sourceValue0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(152, 152);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(151, "F7k<p>A2EB8%Xi1", "F7k<p>A2EB8%Xi1", "F7k<p>A2EB8%Xi1");
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(fieldInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(150, "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations", "RuntimeInvisibleParameterAnnotations");
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      SourceValue sourceValue0 = new SourceValue(3);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(fieldInsnNode0, sourceValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(149, 149);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(148, ")k-qy@^ZOr5ibO]tFc", "}8", ")k-qy@^ZOr5ibO]tFc");
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(fieldInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(147, 147);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(146, 146);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(145, 145);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(144, "[C");
      SourceValue sourceValue0 = new SourceValue(408);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.unaryOperation(typeInsnNode0, sourceValue0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(143, 143);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(142, "N:?F| h2_", "N:?F| h2_", "N:?F| h2_");
      SourceValue sourceValue0 = new SourceValue(6);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.unaryOperation(fieldInsnNode0, sourceValue0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(141, 3);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(140, "L", "L", "L");
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.unaryOperation(fieldInsnNode0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(139, "L", "L", "L");
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.unaryOperation(fieldInsnNode0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(138);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(insnNode0, basicValue0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(137, "");
      SourceValue sourceValue0 = new SourceValue(339);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(typeInsnNode0, sourceValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(136, 136);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(135, 135);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(134, "org.mockito.asm.tree.FieldInsnNode", "org.mockito.asm.tree.FieldInsnNode", "org.mockito.asm.tree.FieldInsnNode");
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.unaryOperation(fieldInsnNode0, (Value) null);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      VarInsnNode varInsnNode0 = new VarInsnNode(133, 0);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      Value value0 = basicInterpreter0.unaryOperation(varInsnNode0, basicValue0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IincInsnNode iincInsnNode0 = new IincInsnNode(810, 810);
      Value value0 = basicInterpreter0.unaryOperation(iincInsnNode0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      SourceValue sourceValue0 = new SourceValue(127);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(131, "C0*2OUpd7:Dk", "C0*2OUpd7:Dk", "C0*2OUpd7:Dk");
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(fieldInsnNode0, sourceValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(130, "org.mockito.asm.Attribute");
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(typeInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(129, 129);
      BasicValue basicValue0 = (BasicValue)BasicValue.RETURNADDRESS_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(128, "y-$>5`Ac:ayqX", "y-$>5`Ac:ayqX", "y-$>5`Ac:ayqX");
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(fieldInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(127, 127);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(126, 126);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      LabelNode labelNode0 = new LabelNode();
      JumpInsnNode jumpInsnNode0 = new JumpInsnNode(125, labelNode0);
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(jumpInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(124, 124);
      BasicValue basicValue0 = (BasicValue)BasicValue.UNINITIALIZED_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      VarInsnNode varInsnNode0 = new VarInsnNode(123, 123);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(varInsnNode0, (Value) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(122, 122);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(121, 121);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(120, 120);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(119, 119);
      BasicValue basicValue0 = (BasicValue)BasicValue.LONG_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNotSame(basicValue0, value0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(118, "", "", "");
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue1 = (BasicValue)basicInterpreter0.unaryOperation(fieldInsnNode0, basicValue0);
      assertFalse(basicValue1.isReference());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      IntInsnNode intInsnNode0 = new IntInsnNode(117, 117);
      BasicValue basicValue0 = (BasicValue)BasicValue.DOUBLE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FieldInsnNode fieldInsnNode0 = new FieldInsnNode(116, "<", "<", "<");
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(fieldInsnNode0, basicValue0);
      assertNotSame(value0, basicValue0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(basicInterpreter0);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(ldcInsnNode0);
      assertTrue(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Double double0 = new Double(0.75);
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(double0);
      Value value0 = basicInterpreter0.newOperation(ldcInsnNode0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Long long0 = Long.valueOf((long) 115);
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(long0);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.newOperation(ldcInsnNode0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Float float0 = new Float(1259.2F);
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(float0);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(ldcInsnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Integer integer0 = Opcodes.LONG;
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(integer0);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(ldcInsnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      LabelNode labelNode0 = new LabelNode();
      // Undeclared exception!
      try { 
        basicInterpreter0.newOperation(labelNode0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(187);
      // Undeclared exception!
      try { 
        basicInterpreter0.newOperation(insnNode0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mockito.asm.tree.InsnNode cannot be cast to org.mockito.asm.tree.TypeInsnNode
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      VarInsnNode varInsnNode0 = new VarInsnNode(178, 1271);
      // Undeclared exception!
      try { 
        basicInterpreter0.newOperation(varInsnNode0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.mockito.asm.tree.VarInsnNode cannot be cast to org.mockito.asm.tree.FieldInsnNode
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(168, 168);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(intInsnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(17);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(insnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(16);
      Value value0 = basicInterpreter0.newOperation(insnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(15, "org.mockito.asm.Edge");
      Value value0 = basicInterpreter0.newOperation(typeInsnNode0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(13, "");
      Value value0 = basicInterpreter0.newOperation(typeInsnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(12, "");
      Value value0 = basicInterpreter0.newOperation(typeInsnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(11, "$xMETq");
      Value value0 = basicInterpreter0.newOperation(typeInsnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(10, 10);
      Value value0 = basicInterpreter0.newOperation(intInsnNode0);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(intInsnNode0, value0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(9, ",H9!1>R>!F7t+v+");
      Value value0 = basicInterpreter0.newOperation(typeInsnNode0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(8);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(insnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      IntInsnNode intInsnNode0 = new IntInsnNode(7, (-980));
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(intInsnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(6);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(insnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(5);
      Value value0 = basicInterpreter0.newOperation(insnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(4);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(insnNode0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(3);
      Value value0 = basicInterpreter0.newOperation(insnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      InsnNode insnNode0 = new InsnNode(2);
      Value value0 = basicInterpreter0.newOperation(insnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(1, "org.mockito.asm.Edge");
      Value value0 = basicInterpreter0.newOperation(typeInsnNode0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BasicValue basicValue0 = (BasicValue)BasicValue.FLOAT_VALUE;
      IntInsnNode intInsnNode0 = new IntInsnNode(188, 8);
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.unaryOperation(intInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Type type0 = Type.DOUBLE_TYPE;
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newValue(type0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Type type0 = Type.LONG_TYPE;
      Value value0 = basicInterpreter0.newValue(type0);
      assertEquals(2, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Type type0 = Type.FLOAT_TYPE;
      Value value0 = basicInterpreter0.newValue(type0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Type type0 = Type.INT_TYPE;
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newValue(type0);
      assertFalse(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Type type0 = Type.SHORT_TYPE;
      Value value0 = basicInterpreter0.newValue(type0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Type type0 = Type.BYTE_TYPE;
      Value value0 = basicInterpreter0.newValue(type0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Type type0 = Type.CHAR_TYPE;
      Value value0 = basicInterpreter0.newValue(type0);
      MultiANewArrayInsnNode multiANewArrayInsnNode0 = new MultiANewArrayInsnNode("*6a\"CbpsJ2ZAWtXK72", 4);
      // Undeclared exception!
      try { 
        basicInterpreter0.unaryOperation(multiANewArrayInsnNode0, value0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Internal error.
         //
         verifyException("org.mockito.asm.tree.analysis.BasicInterpreter", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Type type0 = Type.BOOLEAN_TYPE;
      Value value0 = basicInterpreter0.newValue(type0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Type type0 = Type.BYTE_TYPE;
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(type0);
      BasicValue basicValue0 = (BasicValue)basicInterpreter0.newOperation(ldcInsnNode0);
      assertTrue(basicValue0.isReference());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Value value0 = basicInterpreter0.newValue((Type) null);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      Type type0 = Type.VOID_TYPE;
      Value value0 = basicInterpreter0.newValue(type0);
      assertNull(value0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      LdcInsnNode ldcInsnNode0 = new LdcInsnNode(basicInterpreter0);
      BasicValue basicValue0 = (BasicValue)BasicValue.REFERENCE_VALUE;
      Value value0 = basicInterpreter0.copyOperation(ldcInsnNode0, basicValue0);
      assertEquals(1, value0.getSize());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BasicInterpreter basicInterpreter0 = new BasicInterpreter();
      TypeInsnNode typeInsnNode0 = new TypeInsnNode(14, "Expected ");
      Value value0 = basicInterpreter0.newOperation(typeInsnNode0);
      Value value1 = basicInterpreter0.ternaryOperation(typeInsnNode0, value0, value0, value0);
      assertNull(value1);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 08:27:05 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.Node;
import com.google.javascript.rhino.head.Token;
import com.google.javascript.rhino.head.ast.ArrayComprehension;
import com.google.javascript.rhino.head.ast.ArrayLiteral;
import com.google.javascript.rhino.head.ast.AstRoot;
import com.google.javascript.rhino.head.ast.Block;
import com.google.javascript.rhino.head.ast.BreakStatement;
import com.google.javascript.rhino.head.ast.CatchClause;
import com.google.javascript.rhino.head.ast.Comment;
import com.google.javascript.rhino.head.ast.ConditionalExpression;
import com.google.javascript.rhino.head.ast.ContinueStatement;
import com.google.javascript.rhino.head.ast.DoLoop;
import com.google.javascript.rhino.head.ast.ElementGet;
import com.google.javascript.rhino.head.ast.EmptyStatement;
import com.google.javascript.rhino.head.ast.ErrorNode;
import com.google.javascript.rhino.head.ast.ExpressionStatement;
import com.google.javascript.rhino.head.ast.ForInLoop;
import com.google.javascript.rhino.head.ast.IfStatement;
import com.google.javascript.rhino.head.ast.InfixExpression;
import com.google.javascript.rhino.head.ast.Jump;
import com.google.javascript.rhino.head.ast.Label;
import com.google.javascript.rhino.head.ast.LabeledStatement;
import com.google.javascript.rhino.head.ast.Name;
import com.google.javascript.rhino.head.ast.NewExpression;
import com.google.javascript.rhino.head.ast.NumberLiteral;
import com.google.javascript.rhino.head.ast.ObjectProperty;
import com.google.javascript.rhino.head.ast.ReturnStatement;
import com.google.javascript.rhino.head.ast.Scope;
import com.google.javascript.rhino.head.ast.ScriptNode;
import com.google.javascript.rhino.head.ast.StringLiteral;
import com.google.javascript.rhino.head.ast.SwitchCase;
import com.google.javascript.rhino.head.ast.VariableDeclaration;
import com.google.javascript.rhino.head.ast.WithStatement;
import com.google.javascript.rhino.head.ast.XmlElemRef;
import com.google.javascript.rhino.head.ast.Yield;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringLiteral stringLiteral0 = new StringLiteral();
      Node node0 = new Node(125, stringLiteral0);
      node0.resetTargets();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Scope scope0 = new Scope();
      // Undeclared exception!
      try { 
        scope0.resetTargets();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = new Node(105);
      // Undeclared exception!
      try { 
        node0.hasSideEffects();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      IfStatement ifStatement0 = new IfStatement();
      Node node0 = new Node(102, ifStatement0, ifStatement0, 14);
      // Undeclared exception!
      try { 
        node0.hasSideEffects();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = new Node(102);
      // Undeclared exception!
      try { 
        node0.hasSideEffects();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = new Node(185);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = new Node(159);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = new Node(158);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = new Node(157);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = new Node(156);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = new Node(155);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = new Node(154);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = new Node(153);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = new Node(152);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = new Node(151);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = new Node(150);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = new Node(149);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = new Node(148);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringLiteral stringLiteral0 = new StringLiteral(57);
      Node node0 = new Node(147, stringLiteral0);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = new Node(146);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = new Node(145);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = new Node(144);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = new Node(143);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      WithStatement withStatement0 = new WithStatement();
      Name name0 = new Name();
      ContinueStatement continueStatement0 = new ContinueStatement(147, name0);
      Node node0 = new Node(142, withStatement0, continueStatement0, 13);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = new Node(141);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = new Node(140);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = new Node(139);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = new Node(138);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = new Node(137);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = new Node(136);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = new Node(135);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node(134);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = new Node(133);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = new Node(132);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newTarget();
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = new Node(130);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ConditionalExpression conditionalExpression0 = new ConditionalExpression();
      Node node0 = new Node(129, conditionalExpression0);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = new Node(128);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = new Node(127);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = new Node(126);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = new Node(125);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = new Node(124);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Block block0 = new Block(1);
      Node node0 = new Node(123, block0);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = new Node(122);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = new Node(121);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = new Node(120);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = new Node(119);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = new Node(118);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = new Node(117);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = new Node(116);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = new Node(115);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ConditionalExpression conditionalExpression0 = new ConditionalExpression();
      Node node0 = new Node(114, conditionalExpression0);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = new Node(113);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = new Node(112);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = new Node(111);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = new Node(110);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      WithStatement withStatement0 = new WithStatement();
      Node node0 = new Node(109, withStatement0, withStatement0, 1);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = new Node(107);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringLiteral stringLiteral0 = new StringLiteral();
      Node node0 = new Node(106, stringLiteral0);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DoLoop doLoop0 = new DoLoop();
      Node node0 = new Node(105, doLoop0);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      WithStatement withStatement0 = new WithStatement();
      ErrorNode errorNode0 = new ErrorNode();
      Node node0 = new Node(102, errorNode0, withStatement0, 25);
      // Undeclared exception!
      try { 
        node0.hasSideEffects();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = new Node(101);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = new Node(100);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = new Node(98);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = new Node(97);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = new Node(94);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = new Node(93);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = new Node(92);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = new Node(91);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = new Node(90);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = new Node(89);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node(88);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = new Node(87);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = new Node(86);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = new Node(85);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = new Node(84);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = new Node(83);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      WithStatement withStatement0 = new WithStatement();
      Node node0 = new Node(81, withStatement0, (-2202));
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = new Node(80);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = new Node(79);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = new Node(78);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ReturnStatement returnStatement0 = new ReturnStatement();
      NewExpression newExpression0 = new NewExpression();
      Node node0 = new Node(77, newExpression0, returnStatement0, 2);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = new Node(76);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = new Node(75);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = new Node(74);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = new Node(73);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = new Node(72);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = new Node(71);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = new Node(69);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = new Node(68);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringLiteral stringLiteral0 = new StringLiteral(67);
      Node node0 = new Node(67, stringLiteral0, 6);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = new Node(65);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = new Node(64);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = new Node(63);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = new Node(62);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = new Node(61);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = new Node(60);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = new Node(59);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = new Node(57);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = new Node(56);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = new Node(55);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = new Node(53);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = new Node(52);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = new Node(51);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = new Node(50);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = new Node(49);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = new Node(48);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = new Node(47);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = new Node(45);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = new Node(43);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = new Node(42);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = new Node(41);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = new Node(39);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = new Node(37);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = new Node(36);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = new Node(35);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = new Node(34);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = new Node(33);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = new Node(31);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = new Node(29);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = new Node(28);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = new Node(27);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = new Node(26);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = new Node(25);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = new Node(24);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = new Node(23);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringLiteral stringLiteral0 = new StringLiteral();
      Node node0 = new Node(22, stringLiteral0);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = new Node(21);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = new Node(20);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = new Node(19);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = new Node(18);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = new Node(17);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = new Node(16);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = new Node(15);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = new Node(14);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = new Node(13);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringLiteral stringLiteral0 = new StringLiteral();
      Node node0 = new Node(12, stringLiteral0);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = new Node(11);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = new Node(10);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = new Node(9);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = new Node(8);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CatchClause catchClause0 = new CatchClause();
      Node node0 = new Node(7, catchClause0, catchClause0, 22);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = new Node(6);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = new Node(5);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = new Node(4);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = new Node(3);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = new Node(2);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = new Node(1);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = new Node(0);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = new Node(95);
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = new Node((-1));
      node0.hasSideEffects();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ContinueStatement continueStatement0 = new ContinueStatement();
      ExpressionStatement expressionStatement0 = new ExpressionStatement(1, 20, continueStatement0);
      Node node0 = expressionStatement0.setType(7);
      Block block0 = new Block(2);
      block0.addChildToFront(node0);
      // Undeclared exception!
      try { 
        block0.hasConsistentReturnUsage();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.javascript.rhino.head.ast.ExpressionStatement cannot be cast to com.google.javascript.rhino.head.ast.Jump
         //
         verifyException("com.google.javascript.rhino.head.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = Node.newTarget();
      Block block0 = new Block(114);
      Node node1 = new Node(26, node0, block0, (-5535));
      node0.hasConsistentReturnUsage();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ReturnStatement returnStatement0 = new ReturnStatement();
      returnStatement0.hasConsistentReturnUsage();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Block block0 = new Block();
      ExpressionStatement expressionStatement0 = new ExpressionStatement();
      expressionStatement0.addChildToFront(block0);
      block0.addChildToFront(expressionStatement0);
      // Undeclared exception!
      try { 
        block0.hasConsistentReturnUsage();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = new Node(141);
      boolean boolean0 = node0.hasConsistentReturnUsage();
      assertTrue(boolean0);
      assertEquals("141", node0.toString());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      LabeledStatement labeledStatement0 = new LabeledStatement();
      boolean boolean0 = labeledStatement0.hasConsistentReturnUsage();
      assertEquals((-1), labeledStatement0.getLineno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = Node.newTarget();
      boolean boolean0 = node0.hasConsistentReturnUsage();
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
      assertEquals("131", node0.toString());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Yield yield0 = new Yield();
      boolean boolean0 = yield0.hasConsistentReturnUsage();
      assertTrue(boolean0);
      assertEquals((-1), yield0.getLineno());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = new Node(50);
      boolean boolean0 = node0.hasConsistentReturnUsage();
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean0);
      assertEquals("50", node0.toString());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      XmlElemRef xmlElemRef0 = new XmlElemRef();
      Block block0 = new Block(17, 1);
      block0.addStatement(xmlElemRef0);
      boolean boolean0 = block0.hasConsistentReturnUsage();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ContinueStatement continueStatement0 = new ContinueStatement();
      Block block0 = new Block(12);
      block0.addStatement(continueStatement0);
      boolean boolean0 = block0.hasConsistentReturnUsage();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      WithStatement withStatement0 = new WithStatement();
      Node node0 = new Node(6, withStatement0, (-2197));
      Node node1 = new Node(132, node0, withStatement0, 1);
      // Undeclared exception!
      try { 
        node1.hasConsistentReturnUsage();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Jump
         //
         verifyException("com.google.javascript.rhino.head.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      WithStatement withStatement0 = new WithStatement();
      Node node0 = new Node(81, withStatement0, (-2202));
      Node node1 = new Node(132, node0, withStatement0, 1);
      boolean boolean0 = node1.hasConsistentReturnUsage();
      assertEquals(1, node1.getLineno());
      assertEquals((-2202), node0.getLineno());
      assertEquals(132, node1.getType());
      assertTrue(boolean0);
      assertEquals(81, node0.getType());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      XmlElemRef xmlElemRef0 = new XmlElemRef();
      ReturnStatement returnStatement0 = new ReturnStatement(1, 6);
      returnStatement0.addChild(xmlElemRef0);
      boolean boolean0 = returnStatement0.hasConsistentReturnUsage();
      assertTrue(returnStatement0.hasChildren());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      XmlElemRef xmlElemRef0 = new XmlElemRef();
      // Undeclared exception!
      try { 
        xmlElemRef0.labelId(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = Node.newTarget();
      assertEquals(131, node0.getType());
      
      node0.labelId(3);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      XmlElemRef xmlElemRef0 = new XmlElemRef();
      // Undeclared exception!
      try { 
        xmlElemRef0.labelId();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Yield yield0 = new Yield();
      int int0 = yield0.labelId();
      assertEquals((-1), int0);
      assertEquals((-1), yield0.getLineno());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      XmlElemRef xmlElemRef0 = new XmlElemRef();
      // Undeclared exception!
      try { 
        xmlElemRef0.setScope((Scope) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ArrayComprehension arrayComprehension0 = new ArrayComprehension();
      // Undeclared exception!
      try { 
        arrayComprehension0.setScope(arrayComprehension0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = new Node(57);
      // Undeclared exception!
      try { 
        node0.setString((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Yield yield0 = new Yield();
      // Undeclared exception!
      try { 
        yield0.setString("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.javascript.rhino.head.ast.Yield cannot be cast to com.google.javascript.rhino.head.ast.Name
         //
         verifyException("com.google.javascript.rhino.head.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Yield yield0 = new Yield();
      yield0.setJsDocNode((Comment) null);
      assertEquals((-1), yield0.getLineno());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StringLiteral stringLiteral0 = new StringLiteral(57);
      // Undeclared exception!
      try { 
        stringLiteral0.getExistingIntProp((-4467));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = new Node(65);
      node0.putIntProp(65, 65);
      int int0 = node0.getExistingIntProp(65);
      assertEquals("65", node0.toString());
      assertEquals((-1), node0.getLineno());
      assertEquals(65, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StringLiteral stringLiteral0 = new StringLiteral();
      stringLiteral0.putIntProp(147, 78);
      int int0 = stringLiteral0.getIntProp(147, 78);
      assertEquals((-1), stringLiteral0.getLineno());
      assertEquals(78, int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StringLiteral stringLiteral0 = new StringLiteral();
      stringLiteral0.putIntProp(147, 147);
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment((-1491), 19, token_CommentType0, "UJ{Z}~{)RPBCVck}");
      stringLiteral0.setJsDocNode(comment0);
      stringLiteral0.removeProp(147);
      assertEquals((-1), stringLiteral0.getLineno());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StringLiteral stringLiteral0 = new StringLiteral();
      stringLiteral0.putIntProp(147, 147);
      stringLiteral0.removeProp(147);
      assertEquals((-1), stringLiteral0.getLineno());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      WithStatement withStatement0 = new WithStatement();
      withStatement0.putIntProp(144, 144);
      withStatement0.putIntProp(144, 144);
      assertEquals((-1), withStatement0.getLineno());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ArrayLiteral arrayLiteral0 = new ArrayLiteral();
      Node.NodeIterator node_NodeIterator0 = arrayLiteral0.new NodeIterator();
      // Undeclared exception!
      try { 
        node_NodeIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // next() has not been called
         //
         verifyException("com.google.javascript.rhino.head.Node$NodeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      IfStatement ifStatement0 = new IfStatement();
      Block block0 = new Block(1, 13);
      block0.addChildToFront(ifStatement0);
      Node.NodeIterator node_NodeIterator0 = block0.new NodeIterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_NodeIterator0.forEachRemaining(consumer0);
      assertTrue(block0.hasChildren());
      
      node_NodeIterator0.remove();
      node_NodeIterator0.remove();
      node_NodeIterator0.remove();
      assertEquals((-1), block0.getLineno());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StringLiteral stringLiteral0 = new StringLiteral(57);
      StringLiteral stringLiteral1 = new StringLiteral(3140);
      Node node0 = new Node(19, stringLiteral0, stringLiteral1, 8);
      node0.replaceChildAfter(stringLiteral0, stringLiteral0);
      assertEquals("19", node0.toString());
      assertEquals((-1), stringLiteral1.getLineno());
      assertEquals(8, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      WithStatement withStatement0 = new WithStatement();
      Block block0 = new Block();
      block0.addChildAfter(withStatement0, withStatement0);
      withStatement0.replaceChildAfter(withStatement0, withStatement0);
      assertEquals((-1), withStatement0.getLineno());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Jump jump0 = new Jump(133, 133);
      NumberLiteral numberLiteral0 = (NumberLiteral)Node.newNumber(699.7);
      Node node0 = new Node(26, numberLiteral0, jump0, (-287));
      node0.replaceChild(numberLiteral0, numberLiteral0);
      assertEquals(133, jump0.getLineno());
      assertEquals((-287), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals(26, node0.getType());
      assertEquals(699.7, numberLiteral0.getNumber(), 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StringLiteral stringLiteral0 = new StringLiteral(67);
      Node node0 = new Node(67, stringLiteral0, 6);
      node0.replaceChild(stringLiteral0, stringLiteral0);
      assertEquals(6, node0.getLineno());
      assertEquals("67", node0.toString());
      assertEquals((-1), stringLiteral0.getLineno());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      XmlElemRef xmlElemRef0 = new XmlElemRef();
      ElementGet elementGet0 = new ElementGet(xmlElemRef0, xmlElemRef0);
      // Undeclared exception!
      try { 
        xmlElemRef0.replaceChild(elementGet0, elementGet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      IfStatement ifStatement0 = new IfStatement();
      Name name0 = new Name(6, "LOCAL_BLOCK");
      Node node0 = new Node(24, ifStatement0, 156);
      node0.last = (Node) name0;
      assertTrue(node0.hasChildren());
      
      node0.removeChild(ifStatement0);
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ScriptNode scriptNode0 = new ScriptNode();
      IfStatement ifStatement0 = new IfStatement(4, 1);
      ifStatement0.addChildrenToBack(scriptNode0);
      ifStatement0.addChildAfter(scriptNode0, scriptNode0);
      assertTrue(ifStatement0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      WithStatement withStatement0 = new WithStatement();
      Block block0 = new Block(1);
      Node node0 = new Node(118, block0, withStatement0, 22);
      // Undeclared exception!
      try { 
        node0.addChildAfter(block0, withStatement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // newChild had siblings in addChildAfter
         //
         verifyException("com.google.javascript.rhino.head.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StringLiteral stringLiteral0 = new StringLiteral();
      Node node0 = new Node(12, stringLiteral0);
      assertTrue(node0.hasChildren());
      
      node0.addChildBefore(stringLiteral0, stringLiteral0);
      assertEquals((-1), node0.getLineno());
      assertEquals(12, node0.getType());
      assertEquals((-1), stringLiteral0.getLineno());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      IfStatement ifStatement0 = new IfStatement();
      Node node0 = new Node(127);
      Node node1 = new Node(126, node0, ifStatement0, 13);
      // Undeclared exception!
      try { 
        node1.addChildBefore(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // newChild had siblings in addChildBefore
         //
         verifyException("com.google.javascript.rhino.head.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ContinueStatement continueStatement0 = new ContinueStatement();
      IfStatement ifStatement0 = new IfStatement();
      ifStatement0.addChildToBack(ifStatement0);
      assertTrue(ifStatement0.hasChildren());
      
      ifStatement0.addChildrenToBack(continueStatement0);
      assertEquals((-1), continueStatement0.getLineno());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      XmlElemRef xmlElemRef0 = new XmlElemRef();
      IfStatement ifStatement0 = new IfStatement(2);
      ifStatement0.addChildrenToBack(xmlElemRef0);
      // Undeclared exception!
      try { 
        ifStatement0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ConditionalExpression conditionalExpression0 = new ConditionalExpression();
      Node node0 = new Node(114, conditionalExpression0);
      assertTrue(node0.hasChildren());
      
      node0.addChildrenToFront(conditionalExpression0);
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), conditionalExpression0.getLineno());
      assertEquals(114, node0.getType());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      XmlElemRef xmlElemRef0 = new XmlElemRef();
      ReturnStatement returnStatement0 = new ReturnStatement(0);
      returnStatement0.addChild(xmlElemRef0);
      returnStatement0.addChild(xmlElemRef0);
      assertTrue(returnStatement0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      XmlElemRef xmlElemRef0 = new XmlElemRef();
      VariableDeclaration variableDeclaration0 = new VariableDeclaration(26, 16);
      xmlElemRef0.addChildToFront(variableDeclaration0);
      xmlElemRef0.addChildToFront(xmlElemRef0);
      assertTrue(xmlElemRef0.hasChildren());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test197()  throws Throwable  {
      ScriptNode scriptNode0 = new ScriptNode();
      IfStatement ifStatement0 = new IfStatement(1);
      ifStatement0.addChildrenToFront(scriptNode0);
      // Undeclared exception!
      ifStatement0.addChildrenToBack(scriptNode0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StringLiteral stringLiteral0 = new StringLiteral();
      Node node0 = new Node(125, stringLiteral0);
      Node node1 = new Node(18, stringLiteral0, node0, 6);
      // Undeclared exception!
      try { 
        node0.removeChild(node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.head.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      WithStatement withStatement0 = new WithStatement();
      Block block0 = new Block(1);
      Node node0 = new Node(118, block0, withStatement0, 22);
      EmptyStatement emptyStatement0 = new EmptyStatement(17);
      node0.addChildBefore(emptyStatement0, withStatement0);
      assertEquals((-1), emptyStatement0.getLineno());
      assertEquals(22, node0.getLineno());
      assertEquals("118", node0.toString());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      IfStatement ifStatement0 = new IfStatement();
      Node node0 = new Node(24, ifStatement0, 156);
      node0.removeChild(ifStatement0);
      assertEquals(24, node0.getType());
      assertEquals(156, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      XmlElemRef xmlElemRef0 = new XmlElemRef();
      xmlElemRef0.addChildToFront(xmlElemRef0);
      boolean boolean0 = xmlElemRef0.hasChildren();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Jump jump0 = new Jump(1778);
      boolean boolean0 = jump0.hasChildren();
      assertEquals((-1), jump0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      CatchClause catchClause0 = new CatchClause();
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(12, 6, token_CommentType0, "Mv^'5~Tc/a}t|q");
      catchClause0.setJsDocNode(comment0);
      String string0 = catchClause0.getJsDoc();
      assertEquals((-1), catchClause0.getLineno());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      IfStatement ifStatement0 = new IfStatement();
      ifStatement0.getJsDoc();
      assertEquals((-1), ifStatement0.getLineno());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Scope scope0 = new Scope();
      scope0.getStatements();
      assertEquals((-1), scope0.getLineno());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ObjectProperty objectProperty0 = new ObjectProperty(4);
      AstRoot astRoot0 = new AstRoot();
      objectProperty0.toStringTree(astRoot0);
      assertEquals((-1), astRoot0.getBaseLineno());
      assertEquals((-1), objectProperty0.getLineno());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      WithStatement withStatement0 = new WithStatement();
      Node node0 = new Node(81, withStatement0, (-2202));
      Block block0 = new Block();
      block0.addChildToBack(node0);
      assertTrue(node0.hasChildren());
      assertEquals((-2202), node0.getLineno());
      assertEquals("81", node0.toString());
      
      boolean boolean0 = block0.hasConsistentReturnUsage();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = new Node(72);
      node0.labelId(72);
      assertEquals(9, Node.DIRECTCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BreakStatement breakStatement0 = new BreakStatement();
      // Undeclared exception!
      try { 
        breakStatement0.hasConsistentReturnUsage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      NumberLiteral numberLiteral0 = new NumberLiteral(2053);
      // Undeclared exception!
      try { 
        numberLiteral0.getString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = new Node(0, 258);
      assertEquals(258, node0.getLineno());
      assertEquals("0", node0.toString());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Jump jump0 = new Jump(140);
      // Undeclared exception!
      try { 
        jump0.debugPrint();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // 140
         //
         verifyException("com.google.javascript.rhino.head.ast.Jump", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      InfixExpression infixExpression0 = new InfixExpression();
      infixExpression0.spliterator();
      assertEquals((-1), infixExpression0.getType());
      assertEquals((-1), infixExpression0.getLineno());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ForInLoop forInLoop0 = new ForInLoop();
      // Undeclared exception!
      try { 
        forInLoop0.getDouble();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Block block0 = new Block(114);
      block0.removeChildren();
      assertEquals((-1), block0.getLineno());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Block block0 = new Block(1);
      Label label0 = new Label(0, (-1471), "|Gk=ysGt.A)ZTZ");
      block0.addChildToFront(label0);
      // Undeclared exception!
      try { 
        block0.hasConsistentReturnUsage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      SwitchCase switchCase0 = new SwitchCase(79, 996);
      switchCase0.getNext();
      assertEquals((-1), switchCase0.getLineno());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = new Node(107);
      // Undeclared exception!
      try { 
        node0.getScope();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name
         //
         verifyException("com.google.javascript.rhino.head.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ExpressionStatement expressionStatement0 = new ExpressionStatement();
      Node node0 = expressionStatement0.setType(114);
      Block block0 = new Block(2);
      block0.addChildToFront(node0);
      boolean boolean0 = block0.hasConsistentReturnUsage();
      assertTrue(block0.hasChildren());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = new Node(19);
      int int0 = node0.getLineno();
      assertEquals(19, node0.getType());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      StringLiteral stringLiteral0 = new StringLiteral();
      Node node0 = new Node(89, stringLiteral0, 24);
      boolean boolean0 = node0.hasSideEffects();
      assertEquals(24, node0.getLineno());
      assertEquals((-1), stringLiteral0.getLineno());
      assertEquals(89, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      StringLiteral stringLiteral0 = new StringLiteral();
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment((-1491), 19, token_CommentType0, "UJ{Z}~{)RPBCVck}");
      stringLiteral0.setJsDocNode(comment0);
      stringLiteral0.removeProp(147);
      assertEquals((-1), stringLiteral0.getLineno());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ElementGet elementGet0 = new ElementGet(8);
      elementGet0.getLastChild();
      assertEquals((-1), elementGet0.getLineno());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      XmlElemRef xmlElemRef0 = new XmlElemRef(59);
      Node node0 = new Node(7, xmlElemRef0, xmlElemRef0, xmlElemRef0, 18);
      assertEquals((-1), xmlElemRef0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals(18, node0.getLineno());
      assertEquals(7, node0.getType());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node node0 = Node.newTarget();
      assertEquals("131", node0.toString());
      
      int int0 = node0.labelId();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      NumberLiteral numberLiteral0 = new NumberLiteral((-1437.879059817563));
      assertEquals((-1), numberLiteral0.getLineno());
      assertEquals((-1437.879059817563), numberLiteral0.getDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      WithStatement withStatement0 = new WithStatement();
      ErrorNode errorNode0 = new ErrorNode(23);
      Node node0 = new Node(30, errorNode0, withStatement0, 25);
      boolean boolean0 = node0.hasSideEffects();
      assertEquals(25, node0.getLineno());
      assertTrue(boolean0);
      assertTrue(node0.hasChildren());
      assertEquals((-1), errorNode0.getLineno());
      assertEquals(30, node0.getType());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = Node.newString("\"))");
      assertEquals(41, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = new Node(57);
      Node.NodeIterator node_NodeIterator0 = node0.new NodeIterator();
      // Undeclared exception!
      try { 
        node_NodeIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Node$NodeIterator", e);
      }
  }
}
